(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react'), require('react-dom'), require('canvas')) :
    typeof define === 'function' && define.amd ? define(['exports', 'react', 'react-dom', 'canvas'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.ReactMSAView = {}, global.React, global.ReactDOM, global.require$$13$1));
})(this, (function (exports, React$i, ReactDOM, require$$13$1) { 'use strict';

    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var React__default = /*#__PURE__*/_interopDefaultLegacy(React$i);
    var React__namespace = /*#__PURE__*/_interopNamespace(React$i);
    var ReactDOM__namespace = /*#__PURE__*/_interopNamespace(ReactDOM);
    var ReactDOM__default = /*#__PURE__*/_interopDefaultLegacy(ReactDOM);
    var require$$13__default = /*#__PURE__*/_interopDefaultLegacy(require$$13$1);

    /** MobX - (c) Michel Weststrate 2015 - 2020 - MIT Licensed */
    var OBFUSCATED_ERROR = "An invariant failed, however the error is obfuscated because this is a production build.";
    var EMPTY_ARRAY$1 = [];
    Object.freeze(EMPTY_ARRAY$1);
    var EMPTY_OBJECT$2 = {};
    Object.freeze(EMPTY_OBJECT$2);
    function getNextId() {
        return ++globalState.mobxGuid;
    }
    function fail$2(message) {
        invariant(false, message);
        throw "X"; // unreachable
    }
    function invariant(check, message) {
        if (!check)
            throw new Error("[mobx] " + (message || OBFUSCATED_ERROR));
    }
    /**
     * Prints a deprecation message, but only one time.
     * Returns false if the deprecated message was already printed before
     */
    var deprecatedMessages = [];
    function deprecated$1(msg, thing) {
        if (process.env.NODE_ENV === "production")
            return false;
        if (thing) {
            return deprecated$1("'" + msg + "', use '" + thing + "' instead.");
        }
        if (deprecatedMessages.indexOf(msg) !== -1)
            return false;
        deprecatedMessages.push(msg);
        console.error("[mobx] Deprecated: " + msg);
        return true;
    }
    /**
     * Makes sure that the provided function is invoked at most once.
     */
    function once(func) {
        var invoked = false;
        return function () {
            if (invoked)
                return;
            invoked = true;
            return func.apply(this, arguments);
        };
    }
    var noop$2 = function () { };
    function unique(list) {
        var res = [];
        list.forEach(function (item) {
            if (res.indexOf(item) === -1)
                res.push(item);
        });
        return res;
    }
    function isObject$2(value) {
        return value !== null && typeof value === "object";
    }
    function isPlainObject$3(value) {
        if (value === null || typeof value !== "object")
            return false;
        var proto = Object.getPrototypeOf(value);
        return proto === Object.prototype || proto === null;
    }
    function convertToMap(dataStructure) {
        if (isES6Map(dataStructure) || isObservableMap(dataStructure)) {
            return dataStructure;
        }
        else if (Array.isArray(dataStructure)) {
            return new Map(dataStructure);
        }
        else if (isPlainObject$3(dataStructure)) {
            var map = new Map();
            for (var key in dataStructure) {
                map.set(key, dataStructure[key]);
            }
            return map;
        }
        else {
            return fail$2("Cannot convert to map from '" + dataStructure + "'");
        }
    }
    function addHiddenProp(object, propName, value) {
        Object.defineProperty(object, propName, {
            enumerable: false,
            writable: true,
            configurable: true,
            value: value
        });
    }
    function addHiddenFinalProp$1(object, propName, value) {
        Object.defineProperty(object, propName, {
            enumerable: false,
            writable: false,
            configurable: true,
            value: value
        });
    }
    function isPropertyConfigurable(object, prop) {
        var descriptor = Object.getOwnPropertyDescriptor(object, prop);
        return !descriptor || (descriptor.configurable !== false && descriptor.writable !== false);
    }
    function assertPropertyConfigurable(object, prop) {
        if (process.env.NODE_ENV !== "production" && !isPropertyConfigurable(object, prop))
            fail$2("Cannot make property '" + prop.toString() + "' observable, it is not configurable and writable in the target object");
    }
    function createInstanceofPredicate(name, clazz) {
        var propName = "isMobX" + name;
        clazz.prototype[propName] = true;
        return function (x) {
            return isObject$2(x) && x[propName] === true;
        };
    }
    /**
     * Returns whether the argument is an array, disregarding observability.
     */
    function isArrayLike$1(x) {
        return Array.isArray(x) || isObservableArray(x);
    }
    function isES6Map(thing) {
        return thing instanceof Map;
    }
    function isES6Set(thing) {
        return thing instanceof Set;
    }
    /**
     * Returns the following: own keys, prototype keys & own symbol keys, if they are enumerable.
     */
    function getPlainObjectKeys(object) {
        var enumerables = new Set();
        for (var key in object)
            enumerables.add(key); // *all* enumerables
        Object.getOwnPropertySymbols(object).forEach(function (k) {
            if (Object.getOwnPropertyDescriptor(object, k).enumerable)
                enumerables.add(k);
        }); // *own* symbols
        // Note: this implementation is missing enumerable, inherited, symbolic property names! That would however pretty expensive to add,
        // as there is no efficient iterator that returns *all* properties
        return Array.from(enumerables);
    }
    function stringifyKey(key) {
        if (key && key.toString)
            return key.toString();
        else
            return new String(key).toString();
    }
    function toPrimitive$1(value) {
        return value === null ? null : typeof value === "object" ? "" + value : value;
    }
    var ownKeys$d = typeof Reflect !== "undefined" && Reflect.ownKeys
        ? Reflect.ownKeys
        : Object.getOwnPropertySymbols
            ? function (obj) { return Object.getOwnPropertyNames(obj).concat(Object.getOwnPropertySymbols(obj)); }
            : /* istanbul ignore next */ Object.getOwnPropertyNames;

    var $mobx = Symbol("mobx administration");
    var Atom = /** @class */ (function () {
        /**
         * Create a new atom. For debugging purposes it is recommended to give it a name.
         * The onBecomeObserved and onBecomeUnobserved callbacks can be used for resource management.
         */
        function Atom(name) {
            if (name === void 0) { name = "Atom@" + getNextId(); }
            this.name = name;
            this.isPendingUnobservation = false; // for effective unobserving. BaseAtom has true, for extra optimization, so its onBecomeUnobserved never gets called, because it's not needed
            this.isBeingObserved = false;
            this.observers = new Set();
            this.diffValue = 0;
            this.lastAccessedBy = 0;
            this.lowestObserverState = IDerivationState.NOT_TRACKING;
        }
        Atom.prototype.onBecomeObserved = function () {
            if (this.onBecomeObservedListeners) {
                this.onBecomeObservedListeners.forEach(function (listener) { return listener(); });
            }
        };
        Atom.prototype.onBecomeUnobserved = function () {
            if (this.onBecomeUnobservedListeners) {
                this.onBecomeUnobservedListeners.forEach(function (listener) { return listener(); });
            }
        };
        /**
         * Invoke this method to notify mobx that your atom has been used somehow.
         * Returns true if there is currently a reactive context.
         */
        Atom.prototype.reportObserved = function () {
            return reportObserved(this);
        };
        /**
         * Invoke this method _after_ this method has changed to signal mobx that all its observers should invalidate.
         */
        Atom.prototype.reportChanged = function () {
            startBatch();
            propagateChanged(this);
            endBatch();
        };
        Atom.prototype.toString = function () {
            return this.name;
        };
        return Atom;
    }());
    var isAtom = createInstanceofPredicate("Atom", Atom);
    function createAtom(name, onBecomeObservedHandler, onBecomeUnobservedHandler) {
        if (onBecomeObservedHandler === void 0) { onBecomeObservedHandler = noop$2; }
        if (onBecomeUnobservedHandler === void 0) { onBecomeUnobservedHandler = noop$2; }
        var atom = new Atom(name);
        // default `noop` listener will not initialize the hook Set
        if (onBecomeObservedHandler !== noop$2) {
            onBecomeObserved(atom, onBecomeObservedHandler);
        }
        if (onBecomeUnobservedHandler !== noop$2) {
            onBecomeUnobserved(atom, onBecomeUnobservedHandler);
        }
        return atom;
    }

    function identityComparer(a, b) {
        return a === b;
    }
    function structuralComparer(a, b) {
        return deepEqual(a, b);
    }
    function shallowComparer(a, b) {
        return deepEqual(a, b, 1);
    }
    function defaultComparer(a, b) {
        return Object.is(a, b);
    }
    var comparer = {
        identity: identityComparer,
        structural: structuralComparer,
        default: defaultComparer,
        shallow: shallowComparer
    };

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics$2 = function(d, b) {
        extendStatics$2 = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics$2(d, b);
    };

    function __extends$2(d, b) {
        extendStatics$2(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign$6 = function() {
        __assign$6 = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign$6.apply(this, arguments);
    };

    function __values$1(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m) return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    function __read$3(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread$1() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read$3(arguments[i]));
        return ar;
    }

    var mobxDidRunLazyInitializersSymbol = Symbol("mobx did run lazy initializers");
    var mobxPendingDecorators = Symbol("mobx pending decorators");
    var enumerableDescriptorCache = {};
    var nonEnumerableDescriptorCache = {};
    function createPropertyInitializerDescriptor(prop, enumerable) {
        var cache = enumerable ? enumerableDescriptorCache : nonEnumerableDescriptorCache;
        return (cache[prop] ||
            (cache[prop] = {
                configurable: true,
                enumerable: enumerable,
                get: function () {
                    initializeInstance(this);
                    return this[prop];
                },
                set: function (value) {
                    initializeInstance(this);
                    this[prop] = value;
                }
            }));
    }
    function initializeInstance(target) {
        var e_1, _a;
        if (target[mobxDidRunLazyInitializersSymbol] === true)
            return;
        var decorators = target[mobxPendingDecorators];
        if (decorators) {
            addHiddenProp(target, mobxDidRunLazyInitializersSymbol, true);
            // Build property key array from both strings and symbols
            var keys = __spread$1(Object.getOwnPropertySymbols(decorators), Object.keys(decorators));
            try {
                for (var keys_1 = __values$1(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
                    var key = keys_1_1.value;
                    var d = decorators[key];
                    d.propertyCreator(target, d.prop, d.descriptor, d.decoratorTarget, d.decoratorArguments);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
    }
    function createPropDecorator(propertyInitiallyEnumerable, propertyCreator) {
        return function decoratorFactory() {
            var decoratorArguments;
            var decorator = function decorate(target, prop, descriptor, applyImmediately
            // This is a special parameter to signal the direct application of a decorator, allow extendObservable to skip the entire type decoration part,
            // as the instance to apply the decorator to equals the target
            ) {
                if (applyImmediately === true) {
                    propertyCreator(target, prop, descriptor, target, decoratorArguments);
                    return null;
                }
                if (process.env.NODE_ENV !== "production" && !quacksLikeADecorator(arguments))
                    fail$2("This function is a decorator, but it wasn't invoked like a decorator");
                if (!Object.prototype.hasOwnProperty.call(target, mobxPendingDecorators)) {
                    var inheritedDecorators = target[mobxPendingDecorators];
                    addHiddenProp(target, mobxPendingDecorators, __assign$6({}, inheritedDecorators));
                }
                target[mobxPendingDecorators][prop] = {
                    prop: prop,
                    propertyCreator: propertyCreator,
                    descriptor: descriptor,
                    decoratorTarget: target,
                    decoratorArguments: decoratorArguments
                };
                return createPropertyInitializerDescriptor(prop, propertyInitiallyEnumerable);
            };
            if (quacksLikeADecorator(arguments)) {
                // @decorator
                decoratorArguments = EMPTY_ARRAY$1;
                return decorator.apply(null, arguments);
            }
            else {
                // @decorator(args)
                decoratorArguments = Array.prototype.slice.call(arguments);
                return decorator;
            }
        };
    }
    function quacksLikeADecorator(args) {
        return (((args.length === 2 || args.length === 3) &&
            (typeof args[1] === "string" || typeof args[1] === "symbol")) ||
            (args.length === 4 && args[3] === true));
    }

    function deepEnhancer(v, _, name) {
        // it is an observable already, done
        if (isObservable$1(v))
            return v;
        // something that can be converted and mutated?
        if (Array.isArray(v))
            return observable$1.array(v, { name: name });
        if (isPlainObject$3(v))
            return observable$1.object(v, undefined, { name: name });
        if (isES6Map(v))
            return observable$1.map(v, { name: name });
        if (isES6Set(v))
            return observable$1.set(v, { name: name });
        return v;
    }
    function shallowEnhancer(v, _, name) {
        if (v === undefined || v === null)
            return v;
        if (isObservableObject(v) || isObservableArray(v) || isObservableMap(v) || isObservableSet(v))
            return v;
        if (Array.isArray(v))
            return observable$1.array(v, { name: name, deep: false });
        if (isPlainObject$3(v))
            return observable$1.object(v, undefined, { name: name, deep: false });
        if (isES6Map(v))
            return observable$1.map(v, { name: name, deep: false });
        if (isES6Set(v))
            return observable$1.set(v, { name: name, deep: false });
        return fail$2(process.env.NODE_ENV !== "production" &&
            "The shallow modifier / decorator can only used in combination with arrays, objects, maps and sets");
    }
    function referenceEnhancer(newValue) {
        // never turn into an observable
        return newValue;
    }
    function refStructEnhancer(v, oldValue, name) {
        if (process.env.NODE_ENV !== "production" && isObservable$1(v))
            throw "observable.struct should not be used with observable values";
        if (deepEqual(v, oldValue))
            return oldValue;
        return v;
    }

    function createDecoratorForEnhancer(enhancer) {
        invariant(enhancer);
        var decorator = createPropDecorator(true, function (target, propertyName, descriptor, _decoratorTarget, decoratorArgs) {
            if (process.env.NODE_ENV !== "production") {
                invariant(!descriptor || !descriptor.get, "@observable cannot be used on getter (property \"" + stringifyKey(propertyName) + "\"), use @computed instead.");
            }
            var initialValue = descriptor
                ? descriptor.initializer
                    ? descriptor.initializer.call(target)
                    : descriptor.value
                : undefined;
            asObservableObject(target).addObservableProp(propertyName, initialValue, enhancer);
        });
        var res = 
        // Extra process checks, as this happens during module initialization
        typeof process !== "undefined" && process.env && process.env.NODE_ENV !== "production"
            ? function observableDecorator() {
                // This wrapper function is just to detect illegal decorator invocations, deprecate in a next version
                // and simply return the created prop decorator
                if (arguments.length < 2)
                    return fail$2("Incorrect decorator invocation. @observable decorator doesn't expect any arguments");
                return decorator.apply(null, arguments);
            }
            : decorator;
        res.enhancer = enhancer;
        return res;
    }

    // Predefined bags of create observable options, to avoid allocating temporarily option objects
    // in the majority of cases
    var defaultCreateObservableOptions = {
        deep: true,
        name: undefined,
        defaultDecorator: undefined,
        proxy: true
    };
    Object.freeze(defaultCreateObservableOptions);
    function assertValidOption(key) {
        if (!/^(deep|name|equals|defaultDecorator|proxy)$/.test(key))
            fail$2("invalid option for (extend)observable: " + key);
    }
    function asCreateObservableOptions(thing) {
        if (thing === null || thing === undefined)
            return defaultCreateObservableOptions;
        if (typeof thing === "string")
            return { name: thing, deep: true, proxy: true };
        if (process.env.NODE_ENV !== "production") {
            if (typeof thing !== "object")
                return fail$2("expected options object");
            Object.keys(thing).forEach(assertValidOption);
        }
        return thing;
    }
    var deepDecorator = createDecoratorForEnhancer(deepEnhancer);
    var shallowDecorator = createDecoratorForEnhancer(shallowEnhancer);
    var refDecorator = createDecoratorForEnhancer(referenceEnhancer);
    var refStructDecorator = createDecoratorForEnhancer(refStructEnhancer);
    function getEnhancerFromOptions(options) {
        return options.defaultDecorator
            ? options.defaultDecorator.enhancer
            : options.deep === false
                ? referenceEnhancer
                : deepEnhancer;
    }
    /**
     * Turns an object, array or function into a reactive structure.
     * @param v the value which should become observable.
     */
    function createObservable(v, arg2, arg3) {
        // @observable someProp;
        if (typeof arguments[1] === "string" || typeof arguments[1] === "symbol") {
            return deepDecorator.apply(null, arguments);
        }
        // it is an observable already, done
        if (isObservable$1(v))
            return v;
        // something that can be converted and mutated?
        var res = isPlainObject$3(v)
            ? observable$1.object(v, arg2, arg3)
            : Array.isArray(v)
                ? observable$1.array(v, arg2)
                : isES6Map(v)
                    ? observable$1.map(v, arg2)
                    : isES6Set(v)
                        ? observable$1.set(v, arg2)
                        : v;
        // this value could be converted to a new observable data structure, return it
        if (res !== v)
            return res;
        // otherwise, just box it
        fail$2(process.env.NODE_ENV !== "production" &&
            "The provided value could not be converted into an observable. If you want just create an observable reference to the object use 'observable.box(value)'");
    }
    var observableFactories = {
        box: function (value, options) {
            if (arguments.length > 2)
                incorrectlyUsedAsDecorator("box");
            var o = asCreateObservableOptions(options);
            return new ObservableValue(value, getEnhancerFromOptions(o), o.name, true, o.equals);
        },
        array: function (initialValues, options) {
            if (arguments.length > 2)
                incorrectlyUsedAsDecorator("array");
            var o = asCreateObservableOptions(options);
            return createObservableArray(initialValues, getEnhancerFromOptions(o), o.name);
        },
        map: function (initialValues, options) {
            if (arguments.length > 2)
                incorrectlyUsedAsDecorator("map");
            var o = asCreateObservableOptions(options);
            return new ObservableMap(initialValues, getEnhancerFromOptions(o), o.name);
        },
        set: function (initialValues, options) {
            if (arguments.length > 2)
                incorrectlyUsedAsDecorator("set");
            var o = asCreateObservableOptions(options);
            return new ObservableSet(initialValues, getEnhancerFromOptions(o), o.name);
        },
        object: function (props, decorators, options) {
            if (typeof arguments[1] === "string")
                incorrectlyUsedAsDecorator("object");
            var o = asCreateObservableOptions(options);
            if (o.proxy === false) {
                return extendObservable({}, props, decorators, o);
            }
            else {
                var defaultDecorator = getDefaultDecoratorFromObjectOptions(o);
                var base = extendObservable({}, undefined, undefined, o);
                var proxy = createDynamicObservableObject(base);
                extendObservableObjectWithProperties(proxy, props, decorators, defaultDecorator);
                return proxy;
            }
        },
        ref: refDecorator,
        shallow: shallowDecorator,
        deep: deepDecorator,
        struct: refStructDecorator
    };
    var observable$1 = createObservable;
    // weird trick to keep our typings nicely with our funcs, and still extend the observable function
    Object.keys(observableFactories).forEach(function (name) { return (observable$1[name] = observableFactories[name]); });
    function incorrectlyUsedAsDecorator(methodName) {
        fail$2(
        // process.env.NODE_ENV !== "production" &&
        "Expected one or two arguments to observable." + methodName + ". Did you accidentally try to use observable." + methodName + " as decorator?");
    }

    var computedDecorator = createPropDecorator(false, function (instance, propertyName, descriptor, decoratorTarget, decoratorArgs) {
        if (process.env.NODE_ENV !== "production") {
            invariant(descriptor && descriptor.get, "Trying to declare a computed value for unspecified getter '" + stringifyKey(propertyName) + "'");
        }
        var get = descriptor.get, set = descriptor.set; // initialValue is the descriptor for get / set props
        // Optimization: faster on decorator target or instance? Assuming target
        // Optimization: find out if declaring on instance isn't just faster. (also makes the property descriptor simpler). But, more memory usage..
        // Forcing instance now, fixes hot reloadig issues on React Native:
        var options = decoratorArgs[0] || {};
        asObservableObject(instance).addComputedProp(instance, propertyName, __assign$6({ get: get,
            set: set, context: instance }, options));
    });
    var computedStructDecorator = computedDecorator({ equals: comparer.structural });
    /**
     * Decorator for class properties: @computed get value() { return expr; }.
     * For legacy purposes also invokable as ES5 observable created: `computed(() => expr)`;
     */
    var computed$1 = function computed(arg1, arg2, arg3) {
        if (typeof arg2 === "string") {
            // @computed
            return computedDecorator.apply(null, arguments);
        }
        if (arg1 !== null && typeof arg1 === "object" && arguments.length === 1) {
            // @computed({ options })
            return computedDecorator.apply(null, arguments);
        }
        // computed(expr, options?)
        if (process.env.NODE_ENV !== "production") {
            invariant(typeof arg1 === "function", "First argument to `computed` should be an expression.");
            invariant(arguments.length < 3, "Computed takes one or two arguments if used as function");
        }
        var opts = typeof arg2 === "object" ? arg2 : {};
        opts.get = arg1;
        opts.set = typeof arg2 === "function" ? arg2 : opts.set;
        opts.name = opts.name || arg1.name || ""; /* for generated name */
        return new ComputedValue(opts);
    };
    computed$1.struct = computedStructDecorator;

    var IDerivationState;
    (function (IDerivationState) {
        // before being run or (outside batch and not being observed)
        // at this point derivation is not holding any data about dependency tree
        IDerivationState[IDerivationState["NOT_TRACKING"] = -1] = "NOT_TRACKING";
        // no shallow dependency changed since last computation
        // won't recalculate derivation
        // this is what makes mobx fast
        IDerivationState[IDerivationState["UP_TO_DATE"] = 0] = "UP_TO_DATE";
        // some deep dependency changed, but don't know if shallow dependency changed
        // will require to check first if UP_TO_DATE or POSSIBLY_STALE
        // currently only ComputedValue will propagate POSSIBLY_STALE
        //
        // having this state is second big optimization:
        // don't have to recompute on every dependency change, but only when it's needed
        IDerivationState[IDerivationState["POSSIBLY_STALE"] = 1] = "POSSIBLY_STALE";
        // A shallow dependency has changed since last computation and the derivation
        // will need to recompute when it's needed next.
        IDerivationState[IDerivationState["STALE"] = 2] = "STALE";
    })(IDerivationState || (IDerivationState = {}));
    var TraceMode;
    (function (TraceMode) {
        TraceMode[TraceMode["NONE"] = 0] = "NONE";
        TraceMode[TraceMode["LOG"] = 1] = "LOG";
        TraceMode[TraceMode["BREAK"] = 2] = "BREAK";
    })(TraceMode || (TraceMode = {}));
    var CaughtException = /** @class */ (function () {
        function CaughtException(cause) {
            this.cause = cause;
            // Empty
        }
        return CaughtException;
    }());
    function isCaughtException(e) {
        return e instanceof CaughtException;
    }
    /**
     * Finds out whether any dependency of the derivation has actually changed.
     * If dependenciesState is 1 then it will recalculate dependencies,
     * if any dependency changed it will propagate it by changing dependenciesState to 2.
     *
     * By iterating over the dependencies in the same order that they were reported and
     * stopping on the first change, all the recalculations are only called for ComputedValues
     * that will be tracked by derivation. That is because we assume that if the first x
     * dependencies of the derivation doesn't change then the derivation should run the same way
     * up until accessing x-th dependency.
     */
    function shouldCompute(derivation) {
        switch (derivation.dependenciesState) {
            case IDerivationState.UP_TO_DATE:
                return false;
            case IDerivationState.NOT_TRACKING:
            case IDerivationState.STALE:
                return true;
            case IDerivationState.POSSIBLY_STALE: {
                // state propagation can occur outside of action/reactive context #2195
                var prevAllowStateReads = allowStateReadsStart(true);
                var prevUntracked = untrackedStart(); // no need for those computeds to be reported, they will be picked up in trackDerivedFunction.
                var obs = derivation.observing, l = obs.length;
                for (var i = 0; i < l; i++) {
                    var obj = obs[i];
                    if (isComputedValue(obj)) {
                        if (globalState.disableErrorBoundaries) {
                            obj.get();
                        }
                        else {
                            try {
                                obj.get();
                            }
                            catch (e) {
                                // we are not interested in the value *or* exception at this moment, but if there is one, notify all
                                untrackedEnd(prevUntracked);
                                allowStateReadsEnd(prevAllowStateReads);
                                return true;
                            }
                        }
                        // if ComputedValue `obj` actually changed it will be computed and propagated to its observers.
                        // and `derivation` is an observer of `obj`
                        // invariantShouldCompute(derivation)
                        if (derivation.dependenciesState === IDerivationState.STALE) {
                            untrackedEnd(prevUntracked);
                            allowStateReadsEnd(prevAllowStateReads);
                            return true;
                        }
                    }
                }
                changeDependenciesStateTo0(derivation);
                untrackedEnd(prevUntracked);
                allowStateReadsEnd(prevAllowStateReads);
                return false;
            }
        }
    }
    // function invariantShouldCompute(derivation: IDerivation) {
    //     const newDepState = (derivation as any).dependenciesState
    //     if (
    //         process.env.NODE_ENV === "production" &&
    //         (newDepState === IDerivationState.POSSIBLY_STALE ||
    //             newDepState === IDerivationState.NOT_TRACKING)
    //     )
    //         fail("Illegal dependency state")
    // }
    function isComputingDerivation() {
        return globalState.trackingDerivation !== null; // filter out actions inside computations
    }
    function checkIfStateModificationsAreAllowed(atom) {
        var hasObservers = atom.observers.size > 0;
        // Should never be possible to change an observed observable from inside computed, see #798
        if (globalState.computationDepth > 0 && hasObservers)
            fail$2(process.env.NODE_ENV !== "production" &&
                "Computed values are not allowed to cause side effects by changing observables that are already being observed. Tried to modify: " + atom.name);
        // Should not be possible to change observed state outside strict mode, except during initialization, see #563
        if (!globalState.allowStateChanges && (hasObservers || globalState.enforceActions === "strict"))
            fail$2(process.env.NODE_ENV !== "production" &&
                (globalState.enforceActions
                    ? "Since strict-mode is enabled, changing observed observable values outside actions is not allowed. Please wrap the code in an `action` if this change is intended. Tried to modify: "
                    : "Side effects like changing state are not allowed at this point. Are you trying to modify state from, for example, the render function of a React component? Tried to modify: ") +
                    atom.name);
    }
    function checkIfStateReadsAreAllowed(observable) {
        if (process.env.NODE_ENV !== "production" &&
            !globalState.allowStateReads &&
            globalState.observableRequiresReaction) {
            console.warn("[mobx] Observable " + observable.name + " being read outside a reactive context");
        }
    }
    /**
     * Executes the provided function `f` and tracks which observables are being accessed.
     * The tracking information is stored on the `derivation` object and the derivation is registered
     * as observer of any of the accessed observables.
     */
    function trackDerivedFunction(derivation, f, context) {
        var prevAllowStateReads = allowStateReadsStart(true);
        // pre allocate array allocation + room for variation in deps
        // array will be trimmed by bindDependencies
        changeDependenciesStateTo0(derivation);
        derivation.newObserving = new Array(derivation.observing.length + 100);
        derivation.unboundDepsCount = 0;
        derivation.runId = ++globalState.runId;
        var prevTracking = globalState.trackingDerivation;
        globalState.trackingDerivation = derivation;
        var result;
        if (globalState.disableErrorBoundaries === true) {
            result = f.call(context);
        }
        else {
            try {
                result = f.call(context);
            }
            catch (e) {
                result = new CaughtException(e);
            }
        }
        globalState.trackingDerivation = prevTracking;
        bindDependencies(derivation);
        warnAboutDerivationWithoutDependencies(derivation);
        allowStateReadsEnd(prevAllowStateReads);
        return result;
    }
    function warnAboutDerivationWithoutDependencies(derivation) {
        if (process.env.NODE_ENV === "production")
            return;
        if (derivation.observing.length !== 0)
            return;
        if (globalState.reactionRequiresObservable || derivation.requiresObservable) {
            console.warn("[mobx] Derivation " + derivation.name + " is created/updated without reading any observable value");
        }
    }
    /**
     * diffs newObserving with observing.
     * update observing to be newObserving with unique observables
     * notify observers that become observed/unobserved
     */
    function bindDependencies(derivation) {
        // invariant(derivation.dependenciesState !== IDerivationState.NOT_TRACKING, "INTERNAL ERROR bindDependencies expects derivation.dependenciesState !== -1");
        var prevObserving = derivation.observing;
        var observing = (derivation.observing = derivation.newObserving);
        var lowestNewObservingDerivationState = IDerivationState.UP_TO_DATE;
        // Go through all new observables and check diffValue: (this list can contain duplicates):
        //   0: first occurrence, change to 1 and keep it
        //   1: extra occurrence, drop it
        var i0 = 0, l = derivation.unboundDepsCount;
        for (var i = 0; i < l; i++) {
            var dep = observing[i];
            if (dep.diffValue === 0) {
                dep.diffValue = 1;
                if (i0 !== i)
                    observing[i0] = dep;
                i0++;
            }
            // Upcast is 'safe' here, because if dep is IObservable, `dependenciesState` will be undefined,
            // not hitting the condition
            if (dep.dependenciesState > lowestNewObservingDerivationState) {
                lowestNewObservingDerivationState = dep.dependenciesState;
            }
        }
        observing.length = i0;
        derivation.newObserving = null; // newObserving shouldn't be needed outside tracking (statement moved down to work around FF bug, see #614)
        // Go through all old observables and check diffValue: (it is unique after last bindDependencies)
        //   0: it's not in new observables, unobserve it
        //   1: it keeps being observed, don't want to notify it. change to 0
        l = prevObserving.length;
        while (l--) {
            var dep = prevObserving[l];
            if (dep.diffValue === 0) {
                removeObserver(dep, derivation);
            }
            dep.diffValue = 0;
        }
        // Go through all new observables and check diffValue: (now it should be unique)
        //   0: it was set to 0 in last loop. don't need to do anything.
        //   1: it wasn't observed, let's observe it. set back to 0
        while (i0--) {
            var dep = observing[i0];
            if (dep.diffValue === 1) {
                dep.diffValue = 0;
                addObserver(dep, derivation);
            }
        }
        // Some new observed derivations may become stale during this derivation computation
        // so they have had no chance to propagate staleness (#916)
        if (lowestNewObservingDerivationState !== IDerivationState.UP_TO_DATE) {
            derivation.dependenciesState = lowestNewObservingDerivationState;
            derivation.onBecomeStale();
        }
    }
    function clearObserving(derivation) {
        // invariant(globalState.inBatch > 0, "INTERNAL ERROR clearObserving should be called only inside batch");
        var obs = derivation.observing;
        derivation.observing = [];
        var i = obs.length;
        while (i--)
            removeObserver(obs[i], derivation);
        derivation.dependenciesState = IDerivationState.NOT_TRACKING;
    }
    function untracked(action) {
        var prev = untrackedStart();
        try {
            return action();
        }
        finally {
            untrackedEnd(prev);
        }
    }
    function untrackedStart() {
        var prev = globalState.trackingDerivation;
        globalState.trackingDerivation = null;
        return prev;
    }
    function untrackedEnd(prev) {
        globalState.trackingDerivation = prev;
    }
    function allowStateReadsStart(allowStateReads) {
        var prev = globalState.allowStateReads;
        globalState.allowStateReads = allowStateReads;
        return prev;
    }
    function allowStateReadsEnd(prev) {
        globalState.allowStateReads = prev;
    }
    /**
     * needed to keep `lowestObserverState` correct. when changing from (2 or 1) to 0
     *
     */
    function changeDependenciesStateTo0(derivation) {
        if (derivation.dependenciesState === IDerivationState.UP_TO_DATE)
            return;
        derivation.dependenciesState = IDerivationState.UP_TO_DATE;
        var obs = derivation.observing;
        var i = obs.length;
        while (i--)
            obs[i].lowestObserverState = IDerivationState.UP_TO_DATE;
    }

    // we don't use globalState for these in order to avoid possible issues with multiple
    // mobx versions
    var currentActionId = 0;
    var nextActionId$1 = 1;
    var functionNameDescriptor = Object.getOwnPropertyDescriptor(function () { }, "name");
    var isFunctionNameConfigurable = functionNameDescriptor && functionNameDescriptor.configurable;
    function createAction(actionName, fn, ref) {
        if (process.env.NODE_ENV !== "production") {
            invariant(typeof fn === "function", "`action` can only be invoked on functions");
            if (typeof actionName !== "string" || !actionName)
                fail$2("actions should have valid names, got: '" + actionName + "'");
        }
        var res = function () {
            return executeAction(actionName, fn, ref || this, arguments);
        };
        res.isMobxAction = true;
        if (process.env.NODE_ENV !== "production") {
            if (isFunctionNameConfigurable) {
                Object.defineProperty(res, "name", { value: actionName });
            }
        }
        return res;
    }
    function executeAction(actionName, fn, scope, args) {
        var runInfo = _startAction(actionName, scope, args);
        try {
            return fn.apply(scope, args);
        }
        catch (err) {
            runInfo.error = err;
            throw err;
        }
        finally {
            _endAction(runInfo);
        }
    }
    function _startAction(actionName, scope, args) {
        var notifySpy = isSpyEnabled() && !!actionName;
        var startTime = 0;
        if (notifySpy && process.env.NODE_ENV !== "production") {
            startTime = Date.now();
            var l = (args && args.length) || 0;
            var flattendArgs = new Array(l);
            if (l > 0)
                for (var i = 0; i < l; i++)
                    flattendArgs[i] = args[i];
            spyReportStart({
                type: "action",
                name: actionName,
                object: scope,
                arguments: flattendArgs
            });
        }
        var prevDerivation = untrackedStart();
        startBatch();
        var prevAllowStateChanges = allowStateChangesStart(true);
        var prevAllowStateReads = allowStateReadsStart(true);
        var runInfo = {
            prevDerivation: prevDerivation,
            prevAllowStateChanges: prevAllowStateChanges,
            prevAllowStateReads: prevAllowStateReads,
            notifySpy: notifySpy,
            startTime: startTime,
            actionId: nextActionId$1++,
            parentActionId: currentActionId
        };
        currentActionId = runInfo.actionId;
        return runInfo;
    }
    function _endAction(runInfo) {
        if (currentActionId !== runInfo.actionId) {
            fail$2("invalid action stack. did you forget to finish an action?");
        }
        currentActionId = runInfo.parentActionId;
        if (runInfo.error !== undefined) {
            globalState.suppressReactionErrors = true;
        }
        allowStateChangesEnd(runInfo.prevAllowStateChanges);
        allowStateReadsEnd(runInfo.prevAllowStateReads);
        endBatch();
        untrackedEnd(runInfo.prevDerivation);
        if (runInfo.notifySpy && process.env.NODE_ENV !== "production") {
            spyReportEnd({ time: Date.now() - runInfo.startTime });
        }
        globalState.suppressReactionErrors = false;
    }
    function allowStateChanges(allowStateChanges, func) {
        var prev = allowStateChangesStart(allowStateChanges);
        var res;
        try {
            res = func();
        }
        finally {
            allowStateChangesEnd(prev);
        }
        return res;
    }
    function allowStateChangesStart(allowStateChanges) {
        var prev = globalState.allowStateChanges;
        globalState.allowStateChanges = allowStateChanges;
        return prev;
    }
    function allowStateChangesEnd(prev) {
        globalState.allowStateChanges = prev;
    }
    function allowStateChangesInsideComputed(func) {
        var prev = globalState.computationDepth;
        globalState.computationDepth = 0;
        var res;
        try {
            res = func();
        }
        finally {
            globalState.computationDepth = prev;
        }
        return res;
    }

    var ObservableValue = /** @class */ (function (_super) {
        __extends$2(ObservableValue, _super);
        function ObservableValue(value, enhancer, name, notifySpy, equals) {
            if (name === void 0) { name = "ObservableValue@" + getNextId(); }
            if (notifySpy === void 0) { notifySpy = true; }
            if (equals === void 0) { equals = comparer.default; }
            var _this = _super.call(this, name) || this;
            _this.enhancer = enhancer;
            _this.name = name;
            _this.equals = equals;
            _this.hasUnreportedChange = false;
            _this.value = enhancer(value, undefined, name);
            if (notifySpy && isSpyEnabled() && process.env.NODE_ENV !== "production") {
                // only notify spy if this is a stand-alone observable
                spyReport({ type: "create", name: _this.name, newValue: "" + _this.value });
            }
            return _this;
        }
        ObservableValue.prototype.dehanceValue = function (value) {
            if (this.dehancer !== undefined)
                return this.dehancer(value);
            return value;
        };
        ObservableValue.prototype.set = function (newValue) {
            var oldValue = this.value;
            newValue = this.prepareNewValue(newValue);
            if (newValue !== globalState.UNCHANGED) {
                var notifySpy = isSpyEnabled();
                if (notifySpy && process.env.NODE_ENV !== "production") {
                    spyReportStart({
                        type: "update",
                        name: this.name,
                        newValue: newValue,
                        oldValue: oldValue
                    });
                }
                this.setNewValue(newValue);
                if (notifySpy && process.env.NODE_ENV !== "production")
                    spyReportEnd();
            }
        };
        ObservableValue.prototype.prepareNewValue = function (newValue) {
            checkIfStateModificationsAreAllowed(this);
            if (hasInterceptors(this)) {
                var change = interceptChange(this, {
                    object: this,
                    type: "update",
                    newValue: newValue
                });
                if (!change)
                    return globalState.UNCHANGED;
                newValue = change.newValue;
            }
            // apply modifier
            newValue = this.enhancer(newValue, this.value, this.name);
            return this.equals(this.value, newValue) ? globalState.UNCHANGED : newValue;
        };
        ObservableValue.prototype.setNewValue = function (newValue) {
            var oldValue = this.value;
            this.value = newValue;
            this.reportChanged();
            if (hasListeners(this)) {
                notifyListeners(this, {
                    type: "update",
                    object: this,
                    newValue: newValue,
                    oldValue: oldValue
                });
            }
        };
        ObservableValue.prototype.get = function () {
            this.reportObserved();
            return this.dehanceValue(this.value);
        };
        ObservableValue.prototype.intercept = function (handler) {
            return registerInterceptor(this, handler);
        };
        ObservableValue.prototype.observe = function (listener, fireImmediately) {
            if (fireImmediately)
                listener({
                    object: this,
                    type: "update",
                    newValue: this.value,
                    oldValue: undefined
                });
            return registerListener(this, listener);
        };
        ObservableValue.prototype.toJSON = function () {
            return this.get();
        };
        ObservableValue.prototype.toString = function () {
            return this.name + "[" + this.value + "]";
        };
        ObservableValue.prototype.valueOf = function () {
            return toPrimitive$1(this.get());
        };
        ObservableValue.prototype[Symbol.toPrimitive] = function () {
            return this.valueOf();
        };
        return ObservableValue;
    }(Atom));
    var isObservableValue = createInstanceofPredicate("ObservableValue", ObservableValue);

    /**
     * A node in the state dependency root that observes other nodes, and can be observed itself.
     *
     * ComputedValue will remember the result of the computation for the duration of the batch, or
     * while being observed.
     *
     * During this time it will recompute only when one of its direct dependencies changed,
     * but only when it is being accessed with `ComputedValue.get()`.
     *
     * Implementation description:
     * 1. First time it's being accessed it will compute and remember result
     *    give back remembered result until 2. happens
     * 2. First time any deep dependency change, propagate POSSIBLY_STALE to all observers, wait for 3.
     * 3. When it's being accessed, recompute if any shallow dependency changed.
     *    if result changed: propagate STALE to all observers, that were POSSIBLY_STALE from the last step.
     *    go to step 2. either way
     *
     * If at any point it's outside batch and it isn't observed: reset everything and go to 1.
     */
    var ComputedValue = /** @class */ (function () {
        /**
         * Create a new computed value based on a function expression.
         *
         * The `name` property is for debug purposes only.
         *
         * The `equals` property specifies the comparer function to use to determine if a newly produced
         * value differs from the previous value. Two comparers are provided in the library; `defaultComparer`
         * compares based on identity comparison (===), and `structualComparer` deeply compares the structure.
         * Structural comparison can be convenient if you always produce a new aggregated object and
         * don't want to notify observers if it is structurally the same.
         * This is useful for working with vectors, mouse coordinates etc.
         */
        function ComputedValue(options) {
            this.dependenciesState = IDerivationState.NOT_TRACKING;
            this.observing = []; // nodes we are looking at. Our value depends on these nodes
            this.newObserving = null; // during tracking it's an array with new observed observers
            this.isBeingObserved = false;
            this.isPendingUnobservation = false;
            this.observers = new Set();
            this.diffValue = 0;
            this.runId = 0;
            this.lastAccessedBy = 0;
            this.lowestObserverState = IDerivationState.UP_TO_DATE;
            this.unboundDepsCount = 0;
            this.__mapid = "#" + getNextId();
            this.value = new CaughtException(null);
            this.isComputing = false; // to check for cycles
            this.isRunningSetter = false;
            this.isTracing = TraceMode.NONE;
            invariant(options.get, "missing option for computed: get");
            this.derivation = options.get;
            this.name = options.name || "ComputedValue@" + getNextId();
            if (options.set)
                this.setter = createAction(this.name + "-setter", options.set);
            this.equals =
                options.equals ||
                    (options.compareStructural || options.struct
                        ? comparer.structural
                        : comparer.default);
            this.scope = options.context;
            this.requiresReaction = !!options.requiresReaction;
            this.keepAlive = !!options.keepAlive;
        }
        ComputedValue.prototype.onBecomeStale = function () {
            propagateMaybeChanged(this);
        };
        ComputedValue.prototype.onBecomeObserved = function () {
            if (this.onBecomeObservedListeners) {
                this.onBecomeObservedListeners.forEach(function (listener) { return listener(); });
            }
        };
        ComputedValue.prototype.onBecomeUnobserved = function () {
            if (this.onBecomeUnobservedListeners) {
                this.onBecomeUnobservedListeners.forEach(function (listener) { return listener(); });
            }
        };
        /**
         * Returns the current value of this computed value.
         * Will evaluate its computation first if needed.
         */
        ComputedValue.prototype.get = function () {
            if (this.isComputing)
                fail$2("Cycle detected in computation " + this.name + ": " + this.derivation);
            if (globalState.inBatch === 0 && this.observers.size === 0 && !this.keepAlive) {
                if (shouldCompute(this)) {
                    this.warnAboutUntrackedRead();
                    startBatch(); // See perf test 'computed memoization'
                    this.value = this.computeValue(false);
                    endBatch();
                }
            }
            else {
                reportObserved(this);
                if (shouldCompute(this))
                    if (this.trackAndCompute())
                        propagateChangeConfirmed(this);
            }
            var result = this.value;
            if (isCaughtException(result))
                throw result.cause;
            return result;
        };
        ComputedValue.prototype.peek = function () {
            var res = this.computeValue(false);
            if (isCaughtException(res))
                throw res.cause;
            return res;
        };
        ComputedValue.prototype.set = function (value) {
            if (this.setter) {
                invariant(!this.isRunningSetter, "The setter of computed value '" + this.name + "' is trying to update itself. Did you intend to update an _observable_ value, instead of the computed property?");
                this.isRunningSetter = true;
                try {
                    this.setter.call(this.scope, value);
                }
                finally {
                    this.isRunningSetter = false;
                }
            }
            else
                invariant(false, process.env.NODE_ENV !== "production" &&
                    "[ComputedValue '" + this.name + "'] It is not possible to assign a new value to a computed value.");
        };
        ComputedValue.prototype.trackAndCompute = function () {
            if (isSpyEnabled() && process.env.NODE_ENV !== "production") {
                spyReport({
                    object: this.scope,
                    type: "compute",
                    name: this.name
                });
            }
            var oldValue = this.value;
            var wasSuspended = 
            /* see #1208 */ this.dependenciesState === IDerivationState.NOT_TRACKING;
            var newValue = this.computeValue(true);
            var changed = wasSuspended ||
                isCaughtException(oldValue) ||
                isCaughtException(newValue) ||
                !this.equals(oldValue, newValue);
            if (changed) {
                this.value = newValue;
            }
            return changed;
        };
        ComputedValue.prototype.computeValue = function (track) {
            this.isComputing = true;
            globalState.computationDepth++;
            var res;
            if (track) {
                res = trackDerivedFunction(this, this.derivation, this.scope);
            }
            else {
                if (globalState.disableErrorBoundaries === true) {
                    res = this.derivation.call(this.scope);
                }
                else {
                    try {
                        res = this.derivation.call(this.scope);
                    }
                    catch (e) {
                        res = new CaughtException(e);
                    }
                }
            }
            globalState.computationDepth--;
            this.isComputing = false;
            return res;
        };
        ComputedValue.prototype.suspend = function () {
            if (!this.keepAlive) {
                clearObserving(this);
                this.value = undefined; // don't hold on to computed value!
            }
        };
        ComputedValue.prototype.observe = function (listener, fireImmediately) {
            var _this = this;
            var firstTime = true;
            var prevValue = undefined;
            return autorun(function () {
                var newValue = _this.get();
                if (!firstTime || fireImmediately) {
                    var prevU = untrackedStart();
                    listener({
                        type: "update",
                        object: _this,
                        newValue: newValue,
                        oldValue: prevValue
                    });
                    untrackedEnd(prevU);
                }
                firstTime = false;
                prevValue = newValue;
            });
        };
        ComputedValue.prototype.warnAboutUntrackedRead = function () {
            if (process.env.NODE_ENV === "production")
                return;
            if (this.requiresReaction === true) {
                fail$2("[mobx] Computed value " + this.name + " is read outside a reactive context");
            }
            if (this.isTracing !== TraceMode.NONE) {
                console.log("[mobx.trace] '" + this.name + "' is being read outside a reactive context. Doing a full recompute");
            }
            if (globalState.computedRequiresReaction) {
                console.warn("[mobx] Computed value " + this.name + " is being read outside a reactive context. Doing a full recompute");
            }
        };
        ComputedValue.prototype.toJSON = function () {
            return this.get();
        };
        ComputedValue.prototype.toString = function () {
            return this.name + "[" + this.derivation.toString() + "]";
        };
        ComputedValue.prototype.valueOf = function () {
            return toPrimitive$1(this.get());
        };
        ComputedValue.prototype[Symbol.toPrimitive] = function () {
            return this.valueOf();
        };
        return ComputedValue;
    }());
    var isComputedValue = createInstanceofPredicate("ComputedValue", ComputedValue);

    /**
     * These values will persist if global state is reset
     */
    var persistentKeys = [
        "mobxGuid",
        "spyListeners",
        "enforceActions",
        "computedRequiresReaction",
        "reactionRequiresObservable",
        "observableRequiresReaction",
        "allowStateReads",
        "disableErrorBoundaries",
        "runId",
        "UNCHANGED"
    ];
    var MobXGlobals = /** @class */ (function () {
        function MobXGlobals() {
            /**
             * MobXGlobals version.
             * MobX compatiblity with other versions loaded in memory as long as this version matches.
             * It indicates that the global state still stores similar information
             *
             * N.B: this version is unrelated to the package version of MobX, and is only the version of the
             * internal state storage of MobX, and can be the same across many different package versions
             */
            this.version = 5;
            /**
             * globally unique token to signal unchanged
             */
            this.UNCHANGED = {};
            /**
             * Currently running derivation
             */
            this.trackingDerivation = null;
            /**
             * Are we running a computation currently? (not a reaction)
             */
            this.computationDepth = 0;
            /**
             * Each time a derivation is tracked, it is assigned a unique run-id
             */
            this.runId = 0;
            /**
             * 'guid' for general purpose. Will be persisted amongst resets.
             */
            this.mobxGuid = 0;
            /**
             * Are we in a batch block? (and how many of them)
             */
            this.inBatch = 0;
            /**
             * Observables that don't have observers anymore, and are about to be
             * suspended, unless somebody else accesses it in the same batch
             *
             * @type {IObservable[]}
             */
            this.pendingUnobservations = [];
            /**
             * List of scheduled, not yet executed, reactions.
             */
            this.pendingReactions = [];
            /**
             * Are we currently processing reactions?
             */
            this.isRunningReactions = false;
            /**
             * Is it allowed to change observables at this point?
             * In general, MobX doesn't allow that when running computations and React.render.
             * To ensure that those functions stay pure.
             */
            this.allowStateChanges = true;
            /**
             * Is it allowed to read observables at this point?
             * Used to hold the state needed for `observableRequiresReaction`
             */
            this.allowStateReads = true;
            /**
             * If strict mode is enabled, state changes are by default not allowed
             */
            this.enforceActions = false;
            /**
             * Spy callbacks
             */
            this.spyListeners = [];
            /**
             * Globally attached error handlers that react specifically to errors in reactions
             */
            this.globalReactionErrorHandlers = [];
            /**
             * Warn if computed values are accessed outside a reactive context
             */
            this.computedRequiresReaction = false;
            /**
             * (Experimental)
             * Warn if you try to create to derivation / reactive context without accessing any observable.
             */
            this.reactionRequiresObservable = false;
            /**
             * (Experimental)
             * Warn if observables are accessed outside a reactive context
             */
            this.observableRequiresReaction = false;
            /**
             * Allows overwriting of computed properties, useful in tests but not prod as it can cause
             * memory leaks. See https://github.com/mobxjs/mobx/issues/1867
             */
            this.computedConfigurable = false;
            /*
             * Don't catch and rethrow exceptions. This is useful for inspecting the state of
             * the stack when an exception occurs while debugging.
             */
            this.disableErrorBoundaries = false;
            /*
             * If true, we are already handling an exception in an action. Any errors in reactions should be suppressed, as
             * they are not the cause, see: https://github.com/mobxjs/mobx/issues/1836
             */
            this.suppressReactionErrors = false;
        }
        return MobXGlobals;
    }());
    var mockGlobal$1 = {};
    function getGlobal$1() {
        if (typeof window !== "undefined") {
            return window;
        }
        if (typeof global !== "undefined") {
            return global;
        }
        if (typeof self !== "undefined") {
            return self;
        }
        return mockGlobal$1;
    }
    var canMergeGlobalState = true;
    var isolateCalled = false;
    var globalState = (function () {
        var global = getGlobal$1();
        if (global.__mobxInstanceCount > 0 && !global.__mobxGlobals)
            canMergeGlobalState = false;
        if (global.__mobxGlobals && global.__mobxGlobals.version !== new MobXGlobals().version)
            canMergeGlobalState = false;
        if (!canMergeGlobalState) {
            setTimeout(function () {
                if (!isolateCalled) {
                    fail$2("There are multiple, different versions of MobX active. Make sure MobX is loaded only once or use `configure({ isolateGlobalState: true })`");
                }
            }, 1);
            return new MobXGlobals();
        }
        else if (global.__mobxGlobals) {
            global.__mobxInstanceCount += 1;
            if (!global.__mobxGlobals.UNCHANGED)
                global.__mobxGlobals.UNCHANGED = {}; // make merge backward compatible
            return global.__mobxGlobals;
        }
        else {
            global.__mobxInstanceCount = 1;
            return (global.__mobxGlobals = new MobXGlobals());
        }
    })();
    function isolateGlobalState() {
        if (globalState.pendingReactions.length ||
            globalState.inBatch ||
            globalState.isRunningReactions)
            fail$2("isolateGlobalState should be called before MobX is running any reactions");
        isolateCalled = true;
        if (canMergeGlobalState) {
            if (--getGlobal$1().__mobxInstanceCount === 0)
                getGlobal$1().__mobxGlobals = undefined;
            globalState = new MobXGlobals();
        }
    }
    function getGlobalState() {
        return globalState;
    }
    /**
     * For testing purposes only; this will break the internal state of existing observables,
     * but can be used to get back at a stable state after throwing errors
     */
    function resetGlobalState() {
        var defaultGlobals = new MobXGlobals();
        for (var key in defaultGlobals)
            if (persistentKeys.indexOf(key) === -1)
                globalState[key] = defaultGlobals[key];
        globalState.allowStateChanges = !globalState.enforceActions;
    }

    function hasObservers(observable) {
        return observable.observers && observable.observers.size > 0;
    }
    function getObservers(observable) {
        return observable.observers;
    }
    // function invariantObservers(observable: IObservable) {
    //     const list = observable.observers
    //     const map = observable.observersIndexes
    //     const l = list.length
    //     for (let i = 0; i < l; i++) {
    //         const id = list[i].__mapid
    //         if (i) {
    //             invariant(map[id] === i, "INTERNAL ERROR maps derivation.__mapid to index in list") // for performance
    //         } else {
    //             invariant(!(id in map), "INTERNAL ERROR observer on index 0 shouldn't be held in map.") // for performance
    //         }
    //     }
    //     invariant(
    //         list.length === 0 || Object.keys(map).length === list.length - 1,
    //         "INTERNAL ERROR there is no junk in map"
    //     )
    // }
    function addObserver(observable, node) {
        // invariant(node.dependenciesState !== -1, "INTERNAL ERROR, can add only dependenciesState !== -1");
        // invariant(observable._observers.indexOf(node) === -1, "INTERNAL ERROR add already added node");
        // invariantObservers(observable);
        observable.observers.add(node);
        if (observable.lowestObserverState > node.dependenciesState)
            observable.lowestObserverState = node.dependenciesState;
        // invariantObservers(observable);
        // invariant(observable._observers.indexOf(node) !== -1, "INTERNAL ERROR didn't add node");
    }
    function removeObserver(observable, node) {
        // invariant(globalState.inBatch > 0, "INTERNAL ERROR, remove should be called only inside batch");
        // invariant(observable._observers.indexOf(node) !== -1, "INTERNAL ERROR remove already removed node");
        // invariantObservers(observable);
        observable.observers.delete(node);
        if (observable.observers.size === 0) {
            // deleting last observer
            queueForUnobservation(observable);
        }
        // invariantObservers(observable);
        // invariant(observable._observers.indexOf(node) === -1, "INTERNAL ERROR remove already removed node2");
    }
    function queueForUnobservation(observable) {
        if (observable.isPendingUnobservation === false) {
            // invariant(observable._observers.length === 0, "INTERNAL ERROR, should only queue for unobservation unobserved observables");
            observable.isPendingUnobservation = true;
            globalState.pendingUnobservations.push(observable);
        }
    }
    /**
     * Batch starts a transaction, at least for purposes of memoizing ComputedValues when nothing else does.
     * During a batch `onBecomeUnobserved` will be called at most once per observable.
     * Avoids unnecessary recalculations.
     */
    function startBatch() {
        globalState.inBatch++;
    }
    function endBatch() {
        if (--globalState.inBatch === 0) {
            runReactions();
            // the batch is actually about to finish, all unobserving should happen here.
            var list = globalState.pendingUnobservations;
            for (var i = 0; i < list.length; i++) {
                var observable = list[i];
                observable.isPendingUnobservation = false;
                if (observable.observers.size === 0) {
                    if (observable.isBeingObserved) {
                        // if this observable had reactive observers, trigger the hooks
                        observable.isBeingObserved = false;
                        observable.onBecomeUnobserved();
                    }
                    if (observable instanceof ComputedValue) {
                        // computed values are automatically teared down when the last observer leaves
                        // this process happens recursively, this computed might be the last observable of another, etc..
                        observable.suspend();
                    }
                }
            }
            globalState.pendingUnobservations = [];
        }
    }
    function reportObserved(observable) {
        checkIfStateReadsAreAllowed(observable);
        var derivation = globalState.trackingDerivation;
        if (derivation !== null) {
            /**
             * Simple optimization, give each derivation run an unique id (runId)
             * Check if last time this observable was accessed the same runId is used
             * if this is the case, the relation is already known
             */
            if (derivation.runId !== observable.lastAccessedBy) {
                observable.lastAccessedBy = derivation.runId;
                // Tried storing newObserving, or observing, or both as Set, but performance didn't come close...
                derivation.newObserving[derivation.unboundDepsCount++] = observable;
                if (!observable.isBeingObserved) {
                    observable.isBeingObserved = true;
                    observable.onBecomeObserved();
                }
            }
            return true;
        }
        else if (observable.observers.size === 0 && globalState.inBatch > 0) {
            queueForUnobservation(observable);
        }
        return false;
    }
    // function invariantLOS(observable: IObservable, msg: string) {
    //     // it's expensive so better not run it in produciton. but temporarily helpful for testing
    //     const min = getObservers(observable).reduce((a, b) => Math.min(a, b.dependenciesState), 2)
    //     if (min >= observable.lowestObserverState) return // <- the only assumption about `lowestObserverState`
    //     throw new Error(
    //         "lowestObserverState is wrong for " +
    //             msg +
    //             " because " +
    //             min +
    //             " < " +
    //             observable.lowestObserverState
    //     )
    // }
    /**
     * NOTE: current propagation mechanism will in case of self reruning autoruns behave unexpectedly
     * It will propagate changes to observers from previous run
     * It's hard or maybe impossible (with reasonable perf) to get it right with current approach
     * Hopefully self reruning autoruns aren't a feature people should depend on
     * Also most basic use cases should be ok
     */
    // Called by Atom when its value changes
    function propagateChanged(observable) {
        // invariantLOS(observable, "changed start");
        if (observable.lowestObserverState === IDerivationState.STALE)
            return;
        observable.lowestObserverState = IDerivationState.STALE;
        // Ideally we use for..of here, but the downcompiled version is really slow...
        observable.observers.forEach(function (d) {
            if (d.dependenciesState === IDerivationState.UP_TO_DATE) {
                if (d.isTracing !== TraceMode.NONE) {
                    logTraceInfo(d, observable);
                }
                d.onBecomeStale();
            }
            d.dependenciesState = IDerivationState.STALE;
        });
        // invariantLOS(observable, "changed end");
    }
    // Called by ComputedValue when it recalculate and its value changed
    function propagateChangeConfirmed(observable) {
        // invariantLOS(observable, "confirmed start");
        if (observable.lowestObserverState === IDerivationState.STALE)
            return;
        observable.lowestObserverState = IDerivationState.STALE;
        observable.observers.forEach(function (d) {
            if (d.dependenciesState === IDerivationState.POSSIBLY_STALE)
                d.dependenciesState = IDerivationState.STALE;
            else if (d.dependenciesState === IDerivationState.UP_TO_DATE // this happens during computing of `d`, just keep lowestObserverState up to date.
            )
                observable.lowestObserverState = IDerivationState.UP_TO_DATE;
        });
        // invariantLOS(observable, "confirmed end");
    }
    // Used by computed when its dependency changed, but we don't wan't to immediately recompute.
    function propagateMaybeChanged(observable) {
        // invariantLOS(observable, "maybe start");
        if (observable.lowestObserverState !== IDerivationState.UP_TO_DATE)
            return;
        observable.lowestObserverState = IDerivationState.POSSIBLY_STALE;
        observable.observers.forEach(function (d) {
            if (d.dependenciesState === IDerivationState.UP_TO_DATE) {
                d.dependenciesState = IDerivationState.POSSIBLY_STALE;
                if (d.isTracing !== TraceMode.NONE) {
                    logTraceInfo(d, observable);
                }
                d.onBecomeStale();
            }
        });
        // invariantLOS(observable, "maybe end");
    }
    function logTraceInfo(derivation, observable) {
        console.log("[mobx.trace] '" + derivation.name + "' is invalidated due to a change in: '" + observable.name + "'");
        if (derivation.isTracing === TraceMode.BREAK) {
            var lines = [];
            printDepTree(getDependencyTree(derivation), lines, 1);
            // prettier-ignore
            new Function("debugger;\n/*\nTracing '" + derivation.name + "'\n\nYou are entering this break point because derivation '" + derivation.name + "' is being traced and '" + observable.name + "' is now forcing it to update.\nJust follow the stacktrace you should now see in the devtools to see precisely what piece of your code is causing this update\nThe stackframe you are looking for is at least ~6-8 stack-frames up.\n\n" + (derivation instanceof ComputedValue ? derivation.derivation.toString().replace(/[*]\//g, "/") : "") + "\n\nThe dependencies for this derivation are:\n\n" + lines.join("\n") + "\n*/\n    ")();
        }
    }
    function printDepTree(tree, lines, depth) {
        if (lines.length >= 1000) {
            lines.push("(and many more)");
            return;
        }
        lines.push("" + new Array(depth).join("\t") + tree.name); // MWE: not the fastest, but the easiest way :)
        if (tree.dependencies)
            tree.dependencies.forEach(function (child) { return printDepTree(child, lines, depth + 1); });
    }

    var Reaction = /** @class */ (function () {
        function Reaction(name, onInvalidate, errorHandler, requiresObservable) {
            if (name === void 0) { name = "Reaction@" + getNextId(); }
            if (requiresObservable === void 0) { requiresObservable = false; }
            this.name = name;
            this.onInvalidate = onInvalidate;
            this.errorHandler = errorHandler;
            this.requiresObservable = requiresObservable;
            this.observing = []; // nodes we are looking at. Our value depends on these nodes
            this.newObserving = [];
            this.dependenciesState = IDerivationState.NOT_TRACKING;
            this.diffValue = 0;
            this.runId = 0;
            this.unboundDepsCount = 0;
            this.__mapid = "#" + getNextId();
            this.isDisposed = false;
            this._isScheduled = false;
            this._isTrackPending = false;
            this._isRunning = false;
            this.isTracing = TraceMode.NONE;
        }
        Reaction.prototype.onBecomeStale = function () {
            this.schedule();
        };
        Reaction.prototype.schedule = function () {
            if (!this._isScheduled) {
                this._isScheduled = true;
                globalState.pendingReactions.push(this);
                runReactions();
            }
        };
        Reaction.prototype.isScheduled = function () {
            return this._isScheduled;
        };
        /**
         * internal, use schedule() if you intend to kick off a reaction
         */
        Reaction.prototype.runReaction = function () {
            if (!this.isDisposed) {
                startBatch();
                this._isScheduled = false;
                if (shouldCompute(this)) {
                    this._isTrackPending = true;
                    try {
                        this.onInvalidate();
                        if (this._isTrackPending &&
                            isSpyEnabled() &&
                            process.env.NODE_ENV !== "production") {
                            // onInvalidate didn't trigger track right away..
                            spyReport({
                                name: this.name,
                                type: "scheduled-reaction"
                            });
                        }
                    }
                    catch (e) {
                        this.reportExceptionInDerivation(e);
                    }
                }
                endBatch();
            }
        };
        Reaction.prototype.track = function (fn) {
            if (this.isDisposed) {
                return;
                // console.warn("Reaction already disposed") // Note: Not a warning / error in mobx 4 either
            }
            startBatch();
            var notify = isSpyEnabled();
            var startTime;
            if (notify && process.env.NODE_ENV !== "production") {
                startTime = Date.now();
                spyReportStart({
                    name: this.name,
                    type: "reaction"
                });
            }
            this._isRunning = true;
            var result = trackDerivedFunction(this, fn, undefined);
            this._isRunning = false;
            this._isTrackPending = false;
            if (this.isDisposed) {
                // disposed during last run. Clean up everything that was bound after the dispose call.
                clearObserving(this);
            }
            if (isCaughtException(result))
                this.reportExceptionInDerivation(result.cause);
            if (notify && process.env.NODE_ENV !== "production") {
                spyReportEnd({
                    time: Date.now() - startTime
                });
            }
            endBatch();
        };
        Reaction.prototype.reportExceptionInDerivation = function (error) {
            var _this = this;
            if (this.errorHandler) {
                this.errorHandler(error, this);
                return;
            }
            if (globalState.disableErrorBoundaries)
                throw error;
            var message = "[mobx] Encountered an uncaught exception that was thrown by a reaction or observer component, in: '" + this + "'";
            if (globalState.suppressReactionErrors) {
                console.warn("[mobx] (error in reaction '" + this.name + "' suppressed, fix error of causing action below)"); // prettier-ignore
            }
            else {
                console.error(message, error);
                /** If debugging brought you here, please, read the above message :-). Tnx! */
            }
            if (isSpyEnabled()) {
                spyReport({
                    type: "error",
                    name: this.name,
                    message: message,
                    error: "" + error
                });
            }
            globalState.globalReactionErrorHandlers.forEach(function (f) { return f(error, _this); });
        };
        Reaction.prototype.dispose = function () {
            if (!this.isDisposed) {
                this.isDisposed = true;
                if (!this._isRunning) {
                    // if disposed while running, clean up later. Maybe not optimal, but rare case
                    startBatch();
                    clearObserving(this);
                    endBatch();
                }
            }
        };
        Reaction.prototype.getDisposer = function () {
            var r = this.dispose.bind(this);
            r[$mobx] = this;
            return r;
        };
        Reaction.prototype.toString = function () {
            return "Reaction[" + this.name + "]";
        };
        Reaction.prototype.trace = function (enterBreakPoint) {
            if (enterBreakPoint === void 0) { enterBreakPoint = false; }
            trace(this, enterBreakPoint);
        };
        return Reaction;
    }());
    function onReactionError(handler) {
        globalState.globalReactionErrorHandlers.push(handler);
        return function () {
            var idx = globalState.globalReactionErrorHandlers.indexOf(handler);
            if (idx >= 0)
                globalState.globalReactionErrorHandlers.splice(idx, 1);
        };
    }
    /**
     * Magic number alert!
     * Defines within how many times a reaction is allowed to re-trigger itself
     * until it is assumed that this is gonna be a never ending loop...
     */
    var MAX_REACTION_ITERATIONS = 100;
    var reactionScheduler = function (f) { return f(); };
    function runReactions() {
        // Trampolining, if runReactions are already running, new reactions will be picked up
        if (globalState.inBatch > 0 || globalState.isRunningReactions)
            return;
        reactionScheduler(runReactionsHelper);
    }
    function runReactionsHelper() {
        globalState.isRunningReactions = true;
        var allReactions = globalState.pendingReactions;
        var iterations = 0;
        // While running reactions, new reactions might be triggered.
        // Hence we work with two variables and check whether
        // we converge to no remaining reactions after a while.
        while (allReactions.length > 0) {
            if (++iterations === MAX_REACTION_ITERATIONS) {
                console.error("Reaction doesn't converge to a stable state after " + MAX_REACTION_ITERATIONS + " iterations." +
                    (" Probably there is a cycle in the reactive function: " + allReactions[0]));
                allReactions.splice(0); // clear reactions
            }
            var remainingReactions = allReactions.splice(0);
            for (var i = 0, l = remainingReactions.length; i < l; i++)
                remainingReactions[i].runReaction();
        }
        globalState.isRunningReactions = false;
    }
    var isReaction = createInstanceofPredicate("Reaction", Reaction);
    function setReactionScheduler(fn) {
        var baseScheduler = reactionScheduler;
        reactionScheduler = function (f) { return fn(function () { return baseScheduler(f); }); };
    }

    function isSpyEnabled() {
        return process.env.NODE_ENV !== "production" && !!globalState.spyListeners.length;
    }
    function spyReport(event) {
        if (process.env.NODE_ENV === "production")
            return; // dead code elimination can do the rest
        if (!globalState.spyListeners.length)
            return;
        var listeners = globalState.spyListeners;
        for (var i = 0, l = listeners.length; i < l; i++)
            listeners[i](event);
    }
    function spyReportStart(event) {
        if (process.env.NODE_ENV === "production")
            return;
        var change = __assign$6(__assign$6({}, event), { spyReportStart: true });
        spyReport(change);
    }
    var END_EVENT = { spyReportEnd: true };
    function spyReportEnd(change) {
        if (process.env.NODE_ENV === "production")
            return;
        if (change)
            spyReport(__assign$6(__assign$6({}, change), { spyReportEnd: true }));
        else
            spyReport(END_EVENT);
    }
    function spy(listener) {
        if (process.env.NODE_ENV === "production") {
            console.warn("[mobx.spy] Is a no-op in production builds");
            return function () { };
        }
        else {
            globalState.spyListeners.push(listener);
            return once(function () {
                globalState.spyListeners = globalState.spyListeners.filter(function (l) { return l !== listener; });
            });
        }
    }

    function dontReassignFields() {
        fail$2(process.env.NODE_ENV !== "production" && "@action fields are not reassignable");
    }
    function namedActionDecorator(name) {
        return function (target, prop, descriptor) {
            if (descriptor) {
                if (process.env.NODE_ENV !== "production" && descriptor.get !== undefined) {
                    return fail$2("@action cannot be used with getters");
                }
                // babel / typescript
                // @action method() { }
                if (descriptor.value) {
                    // typescript
                    return {
                        value: createAction(name, descriptor.value),
                        enumerable: false,
                        configurable: true,
                        writable: true // for typescript, this must be writable, otherwise it cannot inherit :/ (see inheritable actions test)
                    };
                }
                // babel only: @action method = () => {}
                var initializer_1 = descriptor.initializer;
                return {
                    enumerable: false,
                    configurable: true,
                    writable: true,
                    initializer: function () {
                        // N.B: we can't immediately invoke initializer; this would be wrong
                        return createAction(name, initializer_1.call(this));
                    }
                };
            }
            // bound instance methods
            return actionFieldDecorator(name).apply(this, arguments);
        };
    }
    function actionFieldDecorator(name) {
        // Simple property that writes on first invocation to the current instance
        return function (target, prop, descriptor) {
            Object.defineProperty(target, prop, {
                configurable: true,
                enumerable: false,
                get: function () {
                    return undefined;
                },
                set: function (value) {
                    addHiddenProp(this, prop, action(name, value));
                }
            });
        };
    }
    function boundActionDecorator(target, propertyName, descriptor, applyToInstance) {
        if (applyToInstance === true) {
            defineBoundAction(target, propertyName, descriptor.value);
            return null;
        }
        if (descriptor) {
            // if (descriptor.value)
            // Typescript / Babel: @action.bound method() { }
            // also: babel @action.bound method = () => {}
            return {
                configurable: true,
                enumerable: false,
                get: function () {
                    defineBoundAction(this, propertyName, descriptor.value || descriptor.initializer.call(this));
                    return this[propertyName];
                },
                set: dontReassignFields
            };
        }
        // field decorator Typescript @action.bound method = () => {}
        return {
            enumerable: false,
            configurable: true,
            set: function (v) {
                defineBoundAction(this, propertyName, v);
            },
            get: function () {
                return undefined;
            }
        };
    }

    var action = function action(arg1, arg2, arg3, arg4) {
        // action(fn() {})
        if (arguments.length === 1 && typeof arg1 === "function")
            return createAction(arg1.name || "<unnamed action>", arg1);
        // action("name", fn() {})
        if (arguments.length === 2 && typeof arg2 === "function")
            return createAction(arg1, arg2);
        // @action("name") fn() {}
        if (arguments.length === 1 && typeof arg1 === "string")
            return namedActionDecorator(arg1);
        // @action fn() {}
        if (arg4 === true) {
            // apply to instance immediately
            addHiddenProp(arg1, arg2, createAction(arg1.name || arg2, arg3.value, this));
        }
        else {
            return namedActionDecorator(arg2).apply(null, arguments);
        }
    };
    action.bound = boundActionDecorator;
    function runInAction(arg1, arg2) {
        var actionName = typeof arg1 === "string" ? arg1 : arg1.name || "<unnamed action>";
        var fn = typeof arg1 === "function" ? arg1 : arg2;
        if (process.env.NODE_ENV !== "production") {
            invariant(typeof fn === "function" && fn.length === 0, "`runInAction` expects a function without arguments");
            if (typeof actionName !== "string" || !actionName)
                fail$2("actions should have valid names, got: '" + actionName + "'");
        }
        return executeAction(actionName, fn, this, undefined);
    }
    function isAction(thing) {
        return typeof thing === "function" && thing.isMobxAction === true;
    }
    function defineBoundAction(target, propertyName, fn) {
        addHiddenProp(target, propertyName, createAction(propertyName, fn.bind(target)));
    }

    /**
     * Creates a named reactive view and keeps it alive, so that the view is always
     * updated if one of the dependencies changes, even when the view is not further used by something else.
     * @param view The reactive view
     * @returns disposer function, which can be used to stop the view from being updated in the future.
     */
    function autorun(view, opts) {
        if (opts === void 0) { opts = EMPTY_OBJECT$2; }
        if (process.env.NODE_ENV !== "production") {
            invariant(typeof view === "function", "Autorun expects a function as first argument");
            invariant(isAction(view) === false, "Autorun does not accept actions since actions are untrackable");
        }
        var name = (opts && opts.name) || view.name || "Autorun@" + getNextId();
        var runSync = !opts.scheduler && !opts.delay;
        var reaction;
        if (runSync) {
            // normal autorun
            reaction = new Reaction(name, function () {
                this.track(reactionRunner);
            }, opts.onError, opts.requiresObservable);
        }
        else {
            var scheduler_1 = createSchedulerFromOptions(opts);
            // debounced autorun
            var isScheduled_1 = false;
            reaction = new Reaction(name, function () {
                if (!isScheduled_1) {
                    isScheduled_1 = true;
                    scheduler_1(function () {
                        isScheduled_1 = false;
                        if (!reaction.isDisposed)
                            reaction.track(reactionRunner);
                    });
                }
            }, opts.onError, opts.requiresObservable);
        }
        function reactionRunner() {
            view(reaction);
        }
        reaction.schedule();
        return reaction.getDisposer();
    }
    var run = function (f) { return f(); };
    function createSchedulerFromOptions(opts) {
        return opts.scheduler
            ? opts.scheduler
            : opts.delay
                ? function (f) { return setTimeout(f, opts.delay); }
                : run;
    }
    function reaction(expression, effect, opts) {
        if (opts === void 0) { opts = EMPTY_OBJECT$2; }
        if (process.env.NODE_ENV !== "production") {
            invariant(typeof expression === "function", "First argument to reaction should be a function");
            invariant(typeof opts === "object", "Third argument of reactions should be an object");
        }
        var name = opts.name || "Reaction@" + getNextId();
        var effectAction = action(name, opts.onError ? wrapErrorHandler(opts.onError, effect) : effect);
        var runSync = !opts.scheduler && !opts.delay;
        var scheduler = createSchedulerFromOptions(opts);
        var firstTime = true;
        var isScheduled = false;
        var value;
        var equals = opts.compareStructural
            ? comparer.structural
            : opts.equals || comparer.default;
        var r = new Reaction(name, function () {
            if (firstTime || runSync) {
                reactionRunner();
            }
            else if (!isScheduled) {
                isScheduled = true;
                scheduler(reactionRunner);
            }
        }, opts.onError, opts.requiresObservable);
        function reactionRunner() {
            isScheduled = false; // Q: move into reaction runner?
            if (r.isDisposed)
                return;
            var changed = false;
            r.track(function () {
                var nextValue = expression(r);
                changed = firstTime || !equals(value, nextValue);
                value = nextValue;
            });
            if (firstTime && opts.fireImmediately)
                effectAction(value, r);
            if (!firstTime && changed === true)
                effectAction(value, r);
            if (firstTime)
                firstTime = false;
        }
        r.schedule();
        return r.getDisposer();
    }
    function wrapErrorHandler(errorHandler, baseFn) {
        return function () {
            try {
                return baseFn.apply(this, arguments);
            }
            catch (e) {
                errorHandler.call(this, e);
            }
        };
    }

    function onBecomeObserved(thing, arg2, arg3) {
        return interceptHook("onBecomeObserved", thing, arg2, arg3);
    }
    function onBecomeUnobserved(thing, arg2, arg3) {
        return interceptHook("onBecomeUnobserved", thing, arg2, arg3);
    }
    function interceptHook(hook, thing, arg2, arg3) {
        var atom = typeof arg3 === "function" ? getAtom(thing, arg2) : getAtom(thing);
        var cb = typeof arg3 === "function" ? arg3 : arg2;
        var listenersKey = hook + "Listeners";
        if (atom[listenersKey]) {
            atom[listenersKey].add(cb);
        }
        else {
            atom[listenersKey] = new Set([cb]);
        }
        var orig = atom[hook];
        if (typeof orig !== "function")
            return fail$2(process.env.NODE_ENV !== "production" && "Not an atom that can be (un)observed");
        return function () {
            var hookListeners = atom[listenersKey];
            if (hookListeners) {
                hookListeners.delete(cb);
                if (hookListeners.size === 0) {
                    delete atom[listenersKey];
                }
            }
        };
    }

    function configure(options) {
        var enforceActions = options.enforceActions, computedRequiresReaction = options.computedRequiresReaction, computedConfigurable = options.computedConfigurable, disableErrorBoundaries = options.disableErrorBoundaries, reactionScheduler = options.reactionScheduler, reactionRequiresObservable = options.reactionRequiresObservable, observableRequiresReaction = options.observableRequiresReaction;
        if (options.isolateGlobalState === true) {
            isolateGlobalState();
        }
        if (enforceActions !== undefined) {
            if (typeof enforceActions === "boolean" || enforceActions === "strict")
                deprecated$1("Deprecated value for 'enforceActions', use 'false' => '\"never\"', 'true' => '\"observed\"', '\"strict\"' => \"'always'\" instead");
            var ea = void 0;
            switch (enforceActions) {
                case true:
                case "observed":
                    ea = true;
                    break;
                case false:
                case "never":
                    ea = false;
                    break;
                case "strict":
                case "always":
                    ea = "strict";
                    break;
                default:
                    fail$2("Invalid value for 'enforceActions': '" + enforceActions + "', expected 'never', 'always' or 'observed'");
            }
            globalState.enforceActions = ea;
            globalState.allowStateChanges = ea === true || ea === "strict" ? false : true;
        }
        if (computedRequiresReaction !== undefined) {
            globalState.computedRequiresReaction = !!computedRequiresReaction;
        }
        if (reactionRequiresObservable !== undefined) {
            globalState.reactionRequiresObservable = !!reactionRequiresObservable;
        }
        if (observableRequiresReaction !== undefined) {
            globalState.observableRequiresReaction = !!observableRequiresReaction;
            globalState.allowStateReads = !globalState.observableRequiresReaction;
        }
        if (computedConfigurable !== undefined) {
            globalState.computedConfigurable = !!computedConfigurable;
        }
        if (disableErrorBoundaries !== undefined) {
            if (disableErrorBoundaries === true)
                console.warn("WARNING: Debug feature only. MobX will NOT recover from errors when `disableErrorBoundaries` is enabled.");
            globalState.disableErrorBoundaries = !!disableErrorBoundaries;
        }
        if (reactionScheduler) {
            setReactionScheduler(reactionScheduler);
        }
    }

    function decorate$1(thing, decorators) {
        process.env.NODE_ENV !== "production" &&
            invariant(isPlainObject$3(decorators), "Decorators should be a key value map");
        var target = typeof thing === "function" ? thing.prototype : thing;
        var _loop_1 = function (prop) {
            var propertyDecorators = decorators[prop];
            if (!Array.isArray(propertyDecorators)) {
                propertyDecorators = [propertyDecorators];
            }
            process.env.NODE_ENV !== "production" &&
                invariant(propertyDecorators.every(function (decorator) { return typeof decorator === "function"; }), "Decorate: expected a decorator function or array of decorator functions for '" + prop + "'");
            var descriptor = Object.getOwnPropertyDescriptor(target, prop);
            var newDescriptor = propertyDecorators.reduce(function (accDescriptor, decorator) { return decorator(target, prop, accDescriptor); }, descriptor);
            if (newDescriptor)
                Object.defineProperty(target, prop, newDescriptor);
        };
        for (var prop in decorators) {
            _loop_1(prop);
        }
        return thing;
    }

    function extendObservable(target, properties, decorators, options) {
        if (process.env.NODE_ENV !== "production") {
            invariant(arguments.length >= 2 && arguments.length <= 4, "'extendObservable' expected 2-4 arguments");
            invariant(typeof target === "object", "'extendObservable' expects an object as first argument");
            invariant(!isObservableMap(target), "'extendObservable' should not be used on maps, use map.merge instead");
        }
        options = asCreateObservableOptions(options);
        var defaultDecorator = getDefaultDecoratorFromObjectOptions(options);
        initializeInstance(target); // Fixes #1740
        asObservableObject(target, options.name, defaultDecorator.enhancer); // make sure object is observable, even without initial props
        if (properties)
            extendObservableObjectWithProperties(target, properties, decorators, defaultDecorator);
        return target;
    }
    function getDefaultDecoratorFromObjectOptions(options) {
        return options.defaultDecorator || (options.deep === false ? refDecorator : deepDecorator);
    }
    function extendObservableObjectWithProperties(target, properties, decorators, defaultDecorator) {
        var e_1, _a, e_2, _b;
        if (process.env.NODE_ENV !== "production") {
            invariant(!isObservable$1(properties), "Extending an object with another observable (object) is not supported. Please construct an explicit propertymap, using `toJS` if need. See issue #540");
            if (decorators) {
                var keys = getPlainObjectKeys(decorators);
                try {
                    for (var keys_1 = __values$1(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
                        var key = keys_1_1.value;
                        if (!(key in properties))
                            fail$2("Trying to declare a decorator for unspecified property '" + stringifyKey(key) + "'");
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
        }
        startBatch();
        try {
            var keys = ownKeys$d(properties);
            try {
                for (var keys_2 = __values$1(keys), keys_2_1 = keys_2.next(); !keys_2_1.done; keys_2_1 = keys_2.next()) {
                    var key = keys_2_1.value;
                    var descriptor = Object.getOwnPropertyDescriptor(properties, key);
                    if (process.env.NODE_ENV !== "production") {
                        if (!isPlainObject$3(properties))
                            fail$2("'extendObservable' only accepts plain objects as second argument");
                        if (isComputed(descriptor.value))
                            fail$2("Passing a 'computed' as initial property value is no longer supported by extendObservable. Use a getter or decorator instead");
                    }
                    var decorator = decorators && key in decorators
                        ? decorators[key]
                        : descriptor.get
                            ? computedDecorator
                            : defaultDecorator;
                    if (process.env.NODE_ENV !== "production" && typeof decorator !== "function")
                        fail$2("Not a valid decorator for '" + stringifyKey(key) + "', got: " + decorator);
                    var resultDescriptor = decorator(target, key, descriptor, true);
                    if (resultDescriptor // otherwise, assume already applied, due to `applyToInstance`
                    )
                        Object.defineProperty(target, key, resultDescriptor);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (keys_2_1 && !keys_2_1.done && (_b = keys_2.return)) _b.call(keys_2);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        finally {
            endBatch();
        }
    }

    function getDependencyTree(thing, property) {
        return nodeToDependencyTree(getAtom(thing, property));
    }
    function nodeToDependencyTree(node) {
        var result = {
            name: node.name
        };
        if (node.observing && node.observing.length > 0)
            result.dependencies = unique(node.observing).map(nodeToDependencyTree);
        return result;
    }
    function getObserverTree(thing, property) {
        return nodeToObserverTree(getAtom(thing, property));
    }
    function nodeToObserverTree(node) {
        var result = {
            name: node.name
        };
        if (hasObservers(node))
            result.observers = Array.from(getObservers(node)).map(nodeToObserverTree);
        return result;
    }

    var generatorId = 0;
    function FlowCancellationError() {
        this.message = "FLOW_CANCELLED";
    }
    FlowCancellationError.prototype = Object.create(Error.prototype);
    function isFlowCancellationError(error) {
        return error instanceof FlowCancellationError;
    }
    function flow$1(generator) {
        if (arguments.length !== 1)
            fail$2(!!process.env.NODE_ENV && "Flow expects 1 argument and cannot be used as decorator");
        var name = generator.name || "<unnamed flow>";
        // Implementation based on https://github.com/tj/co/blob/master/index.js
        return function () {
            var ctx = this;
            var args = arguments;
            var runId = ++generatorId;
            var gen = action(name + " - runid: " + runId + " - init", generator).apply(ctx, args);
            var rejector;
            var pendingPromise = undefined;
            var promise = new Promise(function (resolve, reject) {
                var stepId = 0;
                rejector = reject;
                function onFulfilled(res) {
                    pendingPromise = undefined;
                    var ret;
                    try {
                        ret = action(name + " - runid: " + runId + " - yield " + stepId++, gen.next).call(gen, res);
                    }
                    catch (e) {
                        return reject(e);
                    }
                    next(ret);
                }
                function onRejected(err) {
                    pendingPromise = undefined;
                    var ret;
                    try {
                        ret = action(name + " - runid: " + runId + " - yield " + stepId++, gen.throw).call(gen, err);
                    }
                    catch (e) {
                        return reject(e);
                    }
                    next(ret);
                }
                function next(ret) {
                    if (ret && typeof ret.then === "function") {
                        // an async iterator
                        ret.then(next, reject);
                        return;
                    }
                    if (ret.done)
                        return resolve(ret.value);
                    pendingPromise = Promise.resolve(ret.value);
                    return pendingPromise.then(onFulfilled, onRejected);
                }
                onFulfilled(undefined); // kick off the process
            });
            promise.cancel = action(name + " - runid: " + runId + " - cancel", function () {
                try {
                    if (pendingPromise)
                        cancelPromise(pendingPromise);
                    // Finally block can return (or yield) stuff..
                    var res = gen.return(undefined);
                    // eat anything that promise would do, it's cancelled!
                    var yieldedPromise = Promise.resolve(res.value);
                    yieldedPromise.then(noop$2, noop$2);
                    cancelPromise(yieldedPromise); // maybe it can be cancelled :)
                    // reject our original promise
                    rejector(new FlowCancellationError());
                }
                catch (e) {
                    rejector(e); // there could be a throwing finally block
                }
            });
            return promise;
        };
    }
    function cancelPromise(promise) {
        if (typeof promise.cancel === "function")
            promise.cancel();
    }

    function interceptReads(thing, propOrHandler, handler) {
        var target;
        if (isObservableMap(thing) || isObservableArray(thing) || isObservableValue(thing)) {
            target = getAdministration(thing);
        }
        else if (isObservableObject(thing)) {
            if (typeof propOrHandler !== "string")
                return fail$2(process.env.NODE_ENV !== "production" &&
                    "InterceptReads can only be used with a specific property, not with an object in general");
            target = getAdministration(thing, propOrHandler);
        }
        else {
            return fail$2(process.env.NODE_ENV !== "production" &&
                "Expected observable map, object or array as first array");
        }
        if (target.dehancer !== undefined)
            return fail$2(process.env.NODE_ENV !== "production" && "An intercept reader was already established");
        target.dehancer = typeof propOrHandler === "function" ? propOrHandler : handler;
        return function () {
            target.dehancer = undefined;
        };
    }

    function intercept(thing, propOrHandler, handler) {
        if (typeof handler === "function")
            return interceptProperty(thing, propOrHandler, handler);
        else
            return interceptInterceptable(thing, propOrHandler);
    }
    function interceptInterceptable(thing, handler) {
        return getAdministration(thing).intercept(handler);
    }
    function interceptProperty(thing, property, handler) {
        return getAdministration(thing, property).intercept(handler);
    }

    function _isComputed(value, property) {
        if (value === null || value === undefined)
            return false;
        if (property !== undefined) {
            if (isObservableObject(value) === false)
                return false;
            if (!value[$mobx].values.has(property))
                return false;
            var atom = getAtom(value, property);
            return isComputedValue(atom);
        }
        return isComputedValue(value);
    }
    function isComputed(value) {
        if (arguments.length > 1)
            return fail$2(process.env.NODE_ENV !== "production" &&
                "isComputed expects only 1 argument. Use isObservableProp to inspect the observability of a property");
        return _isComputed(value);
    }
    function isComputedProp(value, propName) {
        if (typeof propName !== "string")
            return fail$2(process.env.NODE_ENV !== "production" &&
                "isComputed expected a property name as second argument");
        return _isComputed(value, propName);
    }

    function _isObservable(value, property) {
        if (value === null || value === undefined)
            return false;
        if (property !== undefined) {
            if (process.env.NODE_ENV !== "production" &&
                (isObservableMap(value) || isObservableArray(value)))
                return fail$2("isObservable(object, propertyName) is not supported for arrays and maps. Use map.has or array.length instead.");
            if (isObservableObject(value)) {
                return value[$mobx].values.has(property);
            }
            return false;
        }
        // For first check, see #701
        return (isObservableObject(value) ||
            !!value[$mobx] ||
            isAtom(value) ||
            isReaction(value) ||
            isComputedValue(value));
    }
    function isObservable$1(value) {
        if (arguments.length !== 1)
            fail$2(process.env.NODE_ENV !== "production" &&
                "isObservable expects only 1 argument. Use isObservableProp to inspect the observability of a property");
        return _isObservable(value);
    }
    function isObservableProp(value, propName) {
        if (typeof propName !== "string")
            return fail$2(process.env.NODE_ENV !== "production" && "expected a property name as second argument");
        return _isObservable(value, propName);
    }

    function keys$2(obj) {
        if (isObservableObject(obj)) {
            return obj[$mobx].getKeys();
        }
        if (isObservableMap(obj)) {
            return Array.from(obj.keys());
        }
        if (isObservableSet(obj)) {
            return Array.from(obj.keys());
        }
        if (isObservableArray(obj)) {
            return obj.map(function (_, index) { return index; });
        }
        return fail$2(process.env.NODE_ENV !== "production" &&
            "'keys()' can only be used on observable objects, arrays, sets and maps");
    }
    function values$2(obj) {
        if (isObservableObject(obj)) {
            return keys$2(obj).map(function (key) { return obj[key]; });
        }
        if (isObservableMap(obj)) {
            return keys$2(obj).map(function (key) { return obj.get(key); });
        }
        if (isObservableSet(obj)) {
            return Array.from(obj.values());
        }
        if (isObservableArray(obj)) {
            return obj.slice();
        }
        return fail$2(process.env.NODE_ENV !== "production" &&
            "'values()' can only be used on observable objects, arrays, sets and maps");
    }
    function entries$1(obj) {
        if (isObservableObject(obj)) {
            return keys$2(obj).map(function (key) { return [key, obj[key]]; });
        }
        if (isObservableMap(obj)) {
            return keys$2(obj).map(function (key) { return [key, obj.get(key)]; });
        }
        if (isObservableSet(obj)) {
            return Array.from(obj.entries());
        }
        if (isObservableArray(obj)) {
            return obj.map(function (key, index) { return [index, key]; });
        }
        return fail$2(process.env.NODE_ENV !== "production" &&
            "'entries()' can only be used on observable objects, arrays and maps");
    }
    function set(obj, key, value) {
        if (arguments.length === 2 && !isObservableSet(obj)) {
            startBatch();
            var values_1 = key;
            try {
                for (var key_1 in values_1)
                    set(obj, key_1, values_1[key_1]);
            }
            finally {
                endBatch();
            }
            return;
        }
        if (isObservableObject(obj)) {
            var adm = obj[$mobx];
            var existingObservable = adm.values.get(key);
            if (existingObservable) {
                adm.write(key, value);
            }
            else {
                adm.addObservableProp(key, value, adm.defaultEnhancer);
            }
        }
        else if (isObservableMap(obj)) {
            obj.set(key, value);
        }
        else if (isObservableSet(obj)) {
            obj.add(key);
        }
        else if (isObservableArray(obj)) {
            if (typeof key !== "number")
                key = parseInt(key, 10);
            invariant(key >= 0, "Not a valid index: '" + key + "'");
            startBatch();
            if (key >= obj.length)
                obj.length = key + 1;
            obj[key] = value;
            endBatch();
        }
        else {
            return fail$2(process.env.NODE_ENV !== "production" &&
                "'set()' can only be used on observable objects, arrays and maps");
        }
    }
    function remove(obj, key) {
        if (isObservableObject(obj)) {
            obj[$mobx].remove(key);
        }
        else if (isObservableMap(obj)) {
            obj.delete(key);
        }
        else if (isObservableSet(obj)) {
            obj.delete(key);
        }
        else if (isObservableArray(obj)) {
            if (typeof key !== "number")
                key = parseInt(key, 10);
            invariant(key >= 0, "Not a valid index: '" + key + "'");
            obj.splice(key, 1);
        }
        else {
            return fail$2(process.env.NODE_ENV !== "production" &&
                "'remove()' can only be used on observable objects, arrays and maps");
        }
    }
    function has$a(obj, key) {
        if (isObservableObject(obj)) {
            // return keys(obj).indexOf(key) >= 0
            var adm = getAdministration(obj);
            return adm.has(key);
        }
        else if (isObservableMap(obj)) {
            return obj.has(key);
        }
        else if (isObservableSet(obj)) {
            return obj.has(key);
        }
        else if (isObservableArray(obj)) {
            return key >= 0 && key < obj.length;
        }
        else {
            return fail$2(process.env.NODE_ENV !== "production" &&
                "'has()' can only be used on observable objects, arrays and maps");
        }
    }
    function get$2(obj, key) {
        if (!has$a(obj, key))
            return undefined;
        if (isObservableObject(obj)) {
            return obj[key];
        }
        else if (isObservableMap(obj)) {
            return obj.get(key);
        }
        else if (isObservableArray(obj)) {
            return obj[key];
        }
        else {
            return fail$2(process.env.NODE_ENV !== "production" &&
                "'get()' can only be used on observable objects, arrays and maps");
        }
    }

    function observe$1(thing, propOrCb, cbOrFire, fireImmediately) {
        if (typeof cbOrFire === "function")
            return observeObservableProperty(thing, propOrCb, cbOrFire, fireImmediately);
        else
            return observeObservable(thing, propOrCb, cbOrFire);
    }
    function observeObservable(thing, listener, fireImmediately) {
        return getAdministration(thing).observe(listener, fireImmediately);
    }
    function observeObservableProperty(thing, property, listener, fireImmediately) {
        return getAdministration(thing, property).observe(listener, fireImmediately);
    }

    var defaultOptions$1 = {
        detectCycles: true,
        exportMapsAsObjects: true,
        recurseEverything: false
    };
    function cache$3(map, key, value, options) {
        if (options.detectCycles)
            map.set(key, value);
        return value;
    }
    function toJSHelper(source, options, __alreadySeen) {
        if (!options.recurseEverything && !isObservable$1(source))
            return source;
        if (typeof source !== "object")
            return source;
        // Directly return null if source is null
        if (source === null)
            return null;
        // Directly return the Date object itself if contained in the observable
        if (source instanceof Date)
            return source;
        if (isObservableValue(source))
            return toJSHelper(source.get(), options, __alreadySeen);
        // make sure we track the keys of the object
        if (isObservable$1(source))
            keys$2(source);
        var detectCycles = options.detectCycles === true;
        if (detectCycles && source !== null && __alreadySeen.has(source)) {
            return __alreadySeen.get(source);
        }
        if (isObservableArray(source) || Array.isArray(source)) {
            var res_1 = cache$3(__alreadySeen, source, [], options);
            var toAdd = source.map(function (value) { return toJSHelper(value, options, __alreadySeen); });
            res_1.length = toAdd.length;
            for (var i = 0, l = toAdd.length; i < l; i++)
                res_1[i] = toAdd[i];
            return res_1;
        }
        if (isObservableSet(source) || Object.getPrototypeOf(source) === Set.prototype) {
            if (options.exportMapsAsObjects === false) {
                var res_2 = cache$3(__alreadySeen, source, new Set(), options);
                source.forEach(function (value) {
                    res_2.add(toJSHelper(value, options, __alreadySeen));
                });
                return res_2;
            }
            else {
                var res_3 = cache$3(__alreadySeen, source, [], options);
                source.forEach(function (value) {
                    res_3.push(toJSHelper(value, options, __alreadySeen));
                });
                return res_3;
            }
        }
        if (isObservableMap(source) || Object.getPrototypeOf(source) === Map.prototype) {
            if (options.exportMapsAsObjects === false) {
                var res_4 = cache$3(__alreadySeen, source, new Map(), options);
                source.forEach(function (value, key) {
                    res_4.set(key, toJSHelper(value, options, __alreadySeen));
                });
                return res_4;
            }
            else {
                var res_5 = cache$3(__alreadySeen, source, {}, options);
                source.forEach(function (value, key) {
                    res_5[key] = toJSHelper(value, options, __alreadySeen);
                });
                return res_5;
            }
        }
        // Fallback to the situation that source is an ObservableObject or a plain object
        var res = cache$3(__alreadySeen, source, {}, options);
        getPlainObjectKeys(source).forEach(function (key) {
            res[key] = toJSHelper(source[key], options, __alreadySeen);
        });
        return res;
    }
    function toJS(source, options) {
        // backward compatibility
        if (typeof options === "boolean")
            options = { detectCycles: options };
        if (!options)
            options = defaultOptions$1;
        options.detectCycles =
            options.detectCycles === undefined
                ? options.recurseEverything === true
                : options.detectCycles === true;
        var __alreadySeen;
        if (options.detectCycles)
            __alreadySeen = new Map();
        return toJSHelper(source, options, __alreadySeen);
    }

    function trace() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var enterBreakPoint = false;
        if (typeof args[args.length - 1] === "boolean")
            enterBreakPoint = args.pop();
        var derivation = getAtomFromArgs(args);
        if (!derivation) {
            return fail$2(process.env.NODE_ENV !== "production" &&
                "'trace(break?)' can only be used inside a tracked computed value or a Reaction. Consider passing in the computed value or reaction explicitly");
        }
        if (derivation.isTracing === TraceMode.NONE) {
            console.log("[mobx.trace] '" + derivation.name + "' tracing enabled");
        }
        derivation.isTracing = enterBreakPoint ? TraceMode.BREAK : TraceMode.LOG;
    }
    function getAtomFromArgs(args) {
        switch (args.length) {
            case 0:
                return globalState.trackingDerivation;
            case 1:
                return getAtom(args[0]);
            case 2:
                return getAtom(args[0], args[1]);
        }
    }

    /**
     * During a transaction no views are updated until the end of the transaction.
     * The transaction will be run synchronously nonetheless.
     *
     * @param action a function that updates some reactive state
     * @returns any value that was returned by the 'action' parameter.
     */
    function transaction(action, thisArg) {
        if (thisArg === void 0) { thisArg = undefined; }
        startBatch();
        try {
            return action.apply(thisArg);
        }
        finally {
            endBatch();
        }
    }

    function when$2(predicate, arg1, arg2) {
        if (arguments.length === 1 || (arg1 && typeof arg1 === "object"))
            return whenPromise(predicate, arg1);
        return _when(predicate, arg1, arg2 || {});
    }
    function _when(predicate, effect, opts) {
        var timeoutHandle;
        if (typeof opts.timeout === "number") {
            timeoutHandle = setTimeout(function () {
                if (!disposer[$mobx].isDisposed) {
                    disposer();
                    var error = new Error("WHEN_TIMEOUT");
                    if (opts.onError)
                        opts.onError(error);
                    else
                        throw error;
                }
            }, opts.timeout);
        }
        opts.name = opts.name || "When@" + getNextId();
        var effectAction = createAction(opts.name + "-effect", effect);
        var disposer = autorun(function (r) {
            if (predicate()) {
                r.dispose();
                if (timeoutHandle)
                    clearTimeout(timeoutHandle);
                effectAction();
            }
        }, opts);
        return disposer;
    }
    function whenPromise(predicate, opts) {
        if (process.env.NODE_ENV !== "production" && opts && opts.onError)
            return fail$2("the options 'onError' and 'promise' cannot be combined");
        var cancel;
        var res = new Promise(function (resolve, reject) {
            var disposer = _when(predicate, resolve, __assign$6(__assign$6({}, opts), { onError: reject }));
            cancel = function () {
                disposer();
                reject("WHEN_CANCELLED");
            };
        });
        res.cancel = cancel;
        return res;
    }

    function getAdm(target) {
        return target[$mobx];
    }
    function isPropertyKey(val) {
        return typeof val === "string" || typeof val === "number" || typeof val === "symbol";
    }
    // Optimization: we don't need the intermediate objects and could have a completely custom administration for DynamicObjects,
    // and skip either the internal values map, or the base object with its property descriptors!
    var objectProxyTraps = {
        has: function (target, name) {
            if (name === $mobx || name === "constructor" || name === mobxDidRunLazyInitializersSymbol)
                return true;
            var adm = getAdm(target);
            // MWE: should `in` operator be reactive? If not, below code path will be faster / more memory efficient
            // TODO: check performance stats!
            // if (adm.values.get(name as string)) return true
            if (isPropertyKey(name))
                return adm.has(name);
            return name in target;
        },
        get: function (target, name) {
            if (name === $mobx || name === "constructor" || name === mobxDidRunLazyInitializersSymbol)
                return target[name];
            var adm = getAdm(target);
            var observable = adm.values.get(name);
            if (observable instanceof Atom) {
                var result = observable.get();
                if (result === undefined) {
                    // This fixes #1796, because deleting a prop that has an
                    // undefined value won't retrigger a observer (no visible effect),
                    // the autorun wouldn't subscribe to future key changes (see also next comment)
                    adm.has(name);
                }
                return result;
            }
            // make sure we start listening to future keys
            // note that we only do this here for optimization
            if (isPropertyKey(name))
                adm.has(name);
            return target[name];
        },
        set: function (target, name, value) {
            if (!isPropertyKey(name))
                return false;
            set(target, name, value);
            return true;
        },
        deleteProperty: function (target, name) {
            if (!isPropertyKey(name))
                return false;
            var adm = getAdm(target);
            adm.remove(name);
            return true;
        },
        ownKeys: function (target) {
            var adm = getAdm(target);
            adm.keysAtom.reportObserved();
            return Reflect.ownKeys(target);
        },
        preventExtensions: function (target) {
            fail$2("Dynamic observable objects cannot be frozen");
            return false;
        }
    };
    function createDynamicObservableObject(base) {
        var proxy = new Proxy(base, objectProxyTraps);
        base[$mobx].proxy = proxy;
        return proxy;
    }

    function hasInterceptors(interceptable) {
        return interceptable.interceptors !== undefined && interceptable.interceptors.length > 0;
    }
    function registerInterceptor(interceptable, handler) {
        var interceptors = interceptable.interceptors || (interceptable.interceptors = []);
        interceptors.push(handler);
        return once(function () {
            var idx = interceptors.indexOf(handler);
            if (idx !== -1)
                interceptors.splice(idx, 1);
        });
    }
    function interceptChange(interceptable, change) {
        var prevU = untrackedStart();
        try {
            // Interceptor can modify the array, copy it to avoid concurrent modification, see #1950
            var interceptors = __spread$1((interceptable.interceptors || []));
            for (var i = 0, l = interceptors.length; i < l; i++) {
                change = interceptors[i](change);
                invariant(!change || change.type, "Intercept handlers should return nothing or a change object");
                if (!change)
                    break;
            }
            return change;
        }
        finally {
            untrackedEnd(prevU);
        }
    }

    function hasListeners(listenable) {
        return listenable.changeListeners !== undefined && listenable.changeListeners.length > 0;
    }
    function registerListener(listenable, handler) {
        var listeners = listenable.changeListeners || (listenable.changeListeners = []);
        listeners.push(handler);
        return once(function () {
            var idx = listeners.indexOf(handler);
            if (idx !== -1)
                listeners.splice(idx, 1);
        });
    }
    function notifyListeners(listenable, change) {
        var prevU = untrackedStart();
        var listeners = listenable.changeListeners;
        if (!listeners)
            return;
        listeners = listeners.slice();
        for (var i = 0, l = listeners.length; i < l; i++) {
            listeners[i](change);
        }
        untrackedEnd(prevU);
    }

    var MAX_SPLICE_SIZE = 10000; // See e.g. https://github.com/mobxjs/mobx/issues/859
    var arrayTraps = {
        get: function (target, name) {
            if (name === $mobx)
                return target[$mobx];
            if (name === "length")
                return target[$mobx].getArrayLength();
            if (typeof name === "number") {
                return arrayExtensions.get.call(target, name);
            }
            if (typeof name === "string" && !isNaN(name)) {
                return arrayExtensions.get.call(target, parseInt(name));
            }
            if (arrayExtensions.hasOwnProperty(name)) {
                return arrayExtensions[name];
            }
            return target[name];
        },
        set: function (target, name, value) {
            if (name === "length") {
                target[$mobx].setArrayLength(value);
            }
            if (typeof name === "number") {
                arrayExtensions.set.call(target, name, value);
            }
            if (typeof name === "symbol" || isNaN(name)) {
                target[name] = value;
            }
            else {
                // numeric string
                arrayExtensions.set.call(target, parseInt(name), value);
            }
            return true;
        },
        preventExtensions: function (target) {
            fail$2("Observable arrays cannot be frozen");
            return false;
        }
    };
    function createObservableArray(initialValues, enhancer, name, owned) {
        if (name === void 0) { name = "ObservableArray@" + getNextId(); }
        if (owned === void 0) { owned = false; }
        var adm = new ObservableArrayAdministration(name, enhancer, owned);
        addHiddenFinalProp$1(adm.values, $mobx, adm);
        var proxy = new Proxy(adm.values, arrayTraps);
        adm.proxy = proxy;
        if (initialValues && initialValues.length) {
            var prev = allowStateChangesStart(true);
            adm.spliceWithArray(0, 0, initialValues);
            allowStateChangesEnd(prev);
        }
        return proxy;
    }
    var ObservableArrayAdministration = /** @class */ (function () {
        function ObservableArrayAdministration(name, enhancer, owned) {
            this.owned = owned;
            this.values = [];
            this.proxy = undefined;
            this.lastKnownLength = 0;
            this.atom = new Atom(name || "ObservableArray@" + getNextId());
            this.enhancer = function (newV, oldV) { return enhancer(newV, oldV, name + "[..]"); };
        }
        ObservableArrayAdministration.prototype.dehanceValue = function (value) {
            if (this.dehancer !== undefined)
                return this.dehancer(value);
            return value;
        };
        ObservableArrayAdministration.prototype.dehanceValues = function (values) {
            if (this.dehancer !== undefined && values.length > 0)
                return values.map(this.dehancer);
            return values;
        };
        ObservableArrayAdministration.prototype.intercept = function (handler) {
            return registerInterceptor(this, handler);
        };
        ObservableArrayAdministration.prototype.observe = function (listener, fireImmediately) {
            if (fireImmediately === void 0) { fireImmediately = false; }
            if (fireImmediately) {
                listener({
                    object: this.proxy,
                    type: "splice",
                    index: 0,
                    added: this.values.slice(),
                    addedCount: this.values.length,
                    removed: [],
                    removedCount: 0
                });
            }
            return registerListener(this, listener);
        };
        ObservableArrayAdministration.prototype.getArrayLength = function () {
            this.atom.reportObserved();
            return this.values.length;
        };
        ObservableArrayAdministration.prototype.setArrayLength = function (newLength) {
            if (typeof newLength !== "number" || newLength < 0)
                throw new Error("[mobx.array] Out of range: " + newLength);
            var currentLength = this.values.length;
            if (newLength === currentLength)
                return;
            else if (newLength > currentLength) {
                var newItems = new Array(newLength - currentLength);
                for (var i = 0; i < newLength - currentLength; i++)
                    newItems[i] = undefined; // No Array.fill everywhere...
                this.spliceWithArray(currentLength, 0, newItems);
            }
            else
                this.spliceWithArray(newLength, currentLength - newLength);
        };
        ObservableArrayAdministration.prototype.updateArrayLength = function (oldLength, delta) {
            if (oldLength !== this.lastKnownLength)
                throw new Error("[mobx] Modification exception: the internal structure of an observable array was changed.");
            this.lastKnownLength += delta;
        };
        ObservableArrayAdministration.prototype.spliceWithArray = function (index, deleteCount, newItems) {
            var _this = this;
            checkIfStateModificationsAreAllowed(this.atom);
            var length = this.values.length;
            if (index === undefined)
                index = 0;
            else if (index > length)
                index = length;
            else if (index < 0)
                index = Math.max(0, length + index);
            if (arguments.length === 1)
                deleteCount = length - index;
            else if (deleteCount === undefined || deleteCount === null)
                deleteCount = 0;
            else
                deleteCount = Math.max(0, Math.min(deleteCount, length - index));
            if (newItems === undefined)
                newItems = EMPTY_ARRAY$1;
            if (hasInterceptors(this)) {
                var change = interceptChange(this, {
                    object: this.proxy,
                    type: "splice",
                    index: index,
                    removedCount: deleteCount,
                    added: newItems
                });
                if (!change)
                    return EMPTY_ARRAY$1;
                deleteCount = change.removedCount;
                newItems = change.added;
            }
            newItems = newItems.length === 0 ? newItems : newItems.map(function (v) { return _this.enhancer(v, undefined); });
            if (process.env.NODE_ENV !== "production") {
                var lengthDelta = newItems.length - deleteCount;
                this.updateArrayLength(length, lengthDelta); // checks if internal array wasn't modified
            }
            var res = this.spliceItemsIntoValues(index, deleteCount, newItems);
            if (deleteCount !== 0 || newItems.length !== 0)
                this.notifyArraySplice(index, newItems, res);
            return this.dehanceValues(res);
        };
        ObservableArrayAdministration.prototype.spliceItemsIntoValues = function (index, deleteCount, newItems) {
            var _a;
            if (newItems.length < MAX_SPLICE_SIZE) {
                return (_a = this.values).splice.apply(_a, __spread$1([index, deleteCount], newItems));
            }
            else {
                var res = this.values.slice(index, index + deleteCount);
                this.values = this.values
                    .slice(0, index)
                    .concat(newItems, this.values.slice(index + deleteCount));
                return res;
            }
        };
        ObservableArrayAdministration.prototype.notifyArrayChildUpdate = function (index, newValue, oldValue) {
            var notifySpy = !this.owned && isSpyEnabled();
            var notify = hasListeners(this);
            var change = notify || notifySpy
                ? {
                    object: this.proxy,
                    type: "update",
                    index: index,
                    newValue: newValue,
                    oldValue: oldValue
                }
                : null;
            // The reason why this is on right hand side here (and not above), is this way the uglifier will drop it, but it won't
            // cause any runtime overhead in development mode without NODE_ENV set, unless spying is enabled
            if (notifySpy && process.env.NODE_ENV !== "production")
                spyReportStart(__assign$6(__assign$6({}, change), { name: this.atom.name }));
            this.atom.reportChanged();
            if (notify)
                notifyListeners(this, change);
            if (notifySpy && process.env.NODE_ENV !== "production")
                spyReportEnd();
        };
        ObservableArrayAdministration.prototype.notifyArraySplice = function (index, added, removed) {
            var notifySpy = !this.owned && isSpyEnabled();
            var notify = hasListeners(this);
            var change = notify || notifySpy
                ? {
                    object: this.proxy,
                    type: "splice",
                    index: index,
                    removed: removed,
                    added: added,
                    removedCount: removed.length,
                    addedCount: added.length
                }
                : null;
            if (notifySpy && process.env.NODE_ENV !== "production")
                spyReportStart(__assign$6(__assign$6({}, change), { name: this.atom.name }));
            this.atom.reportChanged();
            // conform: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/observe
            if (notify)
                notifyListeners(this, change);
            if (notifySpy && process.env.NODE_ENV !== "production")
                spyReportEnd();
        };
        return ObservableArrayAdministration;
    }());
    var arrayExtensions = {
        intercept: function (handler) {
            return this[$mobx].intercept(handler);
        },
        observe: function (listener, fireImmediately) {
            if (fireImmediately === void 0) { fireImmediately = false; }
            var adm = this[$mobx];
            return adm.observe(listener, fireImmediately);
        },
        clear: function () {
            return this.splice(0);
        },
        replace: function (newItems) {
            var adm = this[$mobx];
            return adm.spliceWithArray(0, adm.values.length, newItems);
        },
        /**
         * Converts this array back to a (shallow) javascript structure.
         * For a deep clone use mobx.toJS
         */
        toJS: function () {
            return this.slice();
        },
        toJSON: function () {
            // Used by JSON.stringify
            return this.toJS();
        },
        /*
         * functions that do alter the internal structure of the array, (based on lib.es6.d.ts)
         * since these functions alter the inner structure of the array, the have side effects.
         * Because the have side effects, they should not be used in computed function,
         * and for that reason the do not call dependencyState.notifyObserved
         */
        splice: function (index, deleteCount) {
            var newItems = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                newItems[_i - 2] = arguments[_i];
            }
            var adm = this[$mobx];
            switch (arguments.length) {
                case 0:
                    return [];
                case 1:
                    return adm.spliceWithArray(index);
                case 2:
                    return adm.spliceWithArray(index, deleteCount);
            }
            return adm.spliceWithArray(index, deleteCount, newItems);
        },
        spliceWithArray: function (index, deleteCount, newItems) {
            var adm = this[$mobx];
            return adm.spliceWithArray(index, deleteCount, newItems);
        },
        push: function () {
            var items = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                items[_i] = arguments[_i];
            }
            var adm = this[$mobx];
            adm.spliceWithArray(adm.values.length, 0, items);
            return adm.values.length;
        },
        pop: function () {
            return this.splice(Math.max(this[$mobx].values.length - 1, 0), 1)[0];
        },
        shift: function () {
            return this.splice(0, 1)[0];
        },
        unshift: function () {
            var items = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                items[_i] = arguments[_i];
            }
            var adm = this[$mobx];
            adm.spliceWithArray(0, 0, items);
            return adm.values.length;
        },
        reverse: function () {
            // reverse by default mutates in place before returning the result
            // which makes it both a 'derivation' and a 'mutation'.
            // so we deviate from the default and just make it an dervitation
            if (process.env.NODE_ENV !== "production") {
                console.warn("[mobx] `observableArray.reverse()` will not update the array in place. Use `observableArray.slice().reverse()` to suppress this warning and perform the operation on a copy, or `observableArray.replace(observableArray.slice().reverse())` to reverse & update in place");
            }
            var clone = this.slice();
            return clone.reverse.apply(clone, arguments);
        },
        sort: function (compareFn) {
            // sort by default mutates in place before returning the result
            // which goes against all good practices. Let's not change the array in place!
            if (process.env.NODE_ENV !== "production") {
                console.warn("[mobx] `observableArray.sort()` will not update the array in place. Use `observableArray.slice().sort()` to suppress this warning and perform the operation on a copy, or `observableArray.replace(observableArray.slice().sort())` to sort & update in place");
            }
            var clone = this.slice();
            return clone.sort.apply(clone, arguments);
        },
        remove: function (value) {
            var adm = this[$mobx];
            var idx = adm.dehanceValues(adm.values).indexOf(value);
            if (idx > -1) {
                this.splice(idx, 1);
                return true;
            }
            return false;
        },
        get: function (index) {
            var adm = this[$mobx];
            if (adm) {
                if (index < adm.values.length) {
                    adm.atom.reportObserved();
                    return adm.dehanceValue(adm.values[index]);
                }
                console.warn("[mobx.array] Attempt to read an array index (" + index + ") that is out of bounds (" + adm.values.length + "). Please check length first. Out of bound indices will not be tracked by MobX");
            }
            return undefined;
        },
        set: function (index, newValue) {
            var adm = this[$mobx];
            var values = adm.values;
            if (index < values.length) {
                // update at index in range
                checkIfStateModificationsAreAllowed(adm.atom);
                var oldValue = values[index];
                if (hasInterceptors(adm)) {
                    var change = interceptChange(adm, {
                        type: "update",
                        object: adm.proxy,
                        index: index,
                        newValue: newValue
                    });
                    if (!change)
                        return;
                    newValue = change.newValue;
                }
                newValue = adm.enhancer(newValue, oldValue);
                var changed = newValue !== oldValue;
                if (changed) {
                    values[index] = newValue;
                    adm.notifyArrayChildUpdate(index, newValue, oldValue);
                }
            }
            else if (index === values.length) {
                // add a new item
                adm.spliceWithArray(index, 0, [newValue]);
            }
            else {
                // out of bounds
                throw new Error("[mobx.array] Index out of bounds, " + index + " is larger than " + values.length);
            }
        }
    };
    [
        "concat",
        "flat",
        "includes",
        "indexOf",
        "join",
        "lastIndexOf",
        "slice",
        "toString",
        "toLocaleString"
    ].forEach(function (funcName) {
        // Feature detection (eg flat may not be available)
        if (typeof Array.prototype[funcName] !== "function") {
            return;
        }
        arrayExtensions[funcName] = function () {
            var adm = this[$mobx];
            adm.atom.reportObserved();
            var dehancedValues = adm.dehanceValues(adm.values);
            return dehancedValues[funcName].apply(dehancedValues, arguments);
        };
    });
    ["every", "filter", "find", "findIndex", "flatMap", "forEach", "map", "some"].forEach(function (funcName) {
        // Feature detection (eg flatMap may not be available)
        if (typeof Array.prototype[funcName] !== "function") {
            return;
        }
        arrayExtensions[funcName] = function (callback, thisArg) {
            var _this = this;
            var adm = this[$mobx];
            adm.atom.reportObserved();
            var dehancedValues = adm.dehanceValues(adm.values);
            return dehancedValues[funcName](function (element, index) {
                return callback.call(thisArg, element, index, _this);
            }, thisArg);
        };
    });
    ["reduce", "reduceRight"].forEach(function (funcName) {
        arrayExtensions[funcName] = function () {
            var _this = this;
            var adm = this[$mobx];
            adm.atom.reportObserved();
            // #2432 - reduce behavior depends on arguments.length
            var callback = arguments[0];
            arguments[0] = function (accumulator, currentValue, index) {
                currentValue = adm.dehanceValue(currentValue);
                return callback(accumulator, currentValue, index, _this);
            };
            return adm.values[funcName].apply(adm.values, arguments);
        };
    });
    var isObservableArrayAdministration = createInstanceofPredicate("ObservableArrayAdministration", ObservableArrayAdministration);
    function isObservableArray(thing) {
        return isObject$2(thing) && isObservableArrayAdministration(thing[$mobx]);
    }

    var _a$1;
    var ObservableMapMarker = {};
    // just extend Map? See also https://gist.github.com/nestharus/13b4d74f2ef4a2f4357dbd3fc23c1e54
    // But: https://github.com/mobxjs/mobx/issues/1556
    var ObservableMap = /** @class */ (function () {
        function ObservableMap(initialData, enhancer, name) {
            if (enhancer === void 0) { enhancer = deepEnhancer; }
            if (name === void 0) { name = "ObservableMap@" + getNextId(); }
            this.enhancer = enhancer;
            this.name = name;
            this[_a$1] = ObservableMapMarker;
            this._keysAtom = createAtom(this.name + ".keys()");
            this[Symbol.toStringTag] = "Map";
            if (typeof Map !== "function") {
                throw new Error("mobx.map requires Map polyfill for the current browser. Check babel-polyfill or core-js/es6/map.js");
            }
            this._data = new Map();
            this._hasMap = new Map();
            this.merge(initialData);
        }
        ObservableMap.prototype._has = function (key) {
            return this._data.has(key);
        };
        ObservableMap.prototype.has = function (key) {
            var _this = this;
            if (!globalState.trackingDerivation)
                return this._has(key);
            var entry = this._hasMap.get(key);
            if (!entry) {
                // todo: replace with atom (breaking change)
                var newEntry = (entry = new ObservableValue(this._has(key), referenceEnhancer, this.name + "." + stringifyKey(key) + "?", false));
                this._hasMap.set(key, newEntry);
                onBecomeUnobserved(newEntry, function () { return _this._hasMap.delete(key); });
            }
            return entry.get();
        };
        ObservableMap.prototype.set = function (key, value) {
            var hasKey = this._has(key);
            if (hasInterceptors(this)) {
                var change = interceptChange(this, {
                    type: hasKey ? "update" : "add",
                    object: this,
                    newValue: value,
                    name: key
                });
                if (!change)
                    return this;
                value = change.newValue;
            }
            if (hasKey) {
                this._updateValue(key, value);
            }
            else {
                this._addValue(key, value);
            }
            return this;
        };
        ObservableMap.prototype.delete = function (key) {
            var _this = this;
            checkIfStateModificationsAreAllowed(this._keysAtom);
            if (hasInterceptors(this)) {
                var change = interceptChange(this, {
                    type: "delete",
                    object: this,
                    name: key
                });
                if (!change)
                    return false;
            }
            if (this._has(key)) {
                var notifySpy = isSpyEnabled();
                var notify = hasListeners(this);
                var change = notify || notifySpy
                    ? {
                        type: "delete",
                        object: this,
                        oldValue: this._data.get(key).value,
                        name: key
                    }
                    : null;
                if (notifySpy && process.env.NODE_ENV !== "production")
                    spyReportStart(__assign$6(__assign$6({}, change), { name: this.name, key: key }));
                transaction(function () {
                    _this._keysAtom.reportChanged();
                    _this._updateHasMapEntry(key, false);
                    var observable = _this._data.get(key);
                    observable.setNewValue(undefined);
                    _this._data.delete(key);
                });
                if (notify)
                    notifyListeners(this, change);
                if (notifySpy && process.env.NODE_ENV !== "production")
                    spyReportEnd();
                return true;
            }
            return false;
        };
        ObservableMap.prototype._updateHasMapEntry = function (key, value) {
            var entry = this._hasMap.get(key);
            if (entry) {
                entry.setNewValue(value);
            }
        };
        ObservableMap.prototype._updateValue = function (key, newValue) {
            var observable = this._data.get(key);
            newValue = observable.prepareNewValue(newValue);
            if (newValue !== globalState.UNCHANGED) {
                var notifySpy = isSpyEnabled();
                var notify = hasListeners(this);
                var change = notify || notifySpy
                    ? {
                        type: "update",
                        object: this,
                        oldValue: observable.value,
                        name: key,
                        newValue: newValue
                    }
                    : null;
                if (notifySpy && process.env.NODE_ENV !== "production")
                    spyReportStart(__assign$6(__assign$6({}, change), { name: this.name, key: key }));
                observable.setNewValue(newValue);
                if (notify)
                    notifyListeners(this, change);
                if (notifySpy && process.env.NODE_ENV !== "production")
                    spyReportEnd();
            }
        };
        ObservableMap.prototype._addValue = function (key, newValue) {
            var _this = this;
            checkIfStateModificationsAreAllowed(this._keysAtom);
            transaction(function () {
                var observable = new ObservableValue(newValue, _this.enhancer, _this.name + "." + stringifyKey(key), false);
                _this._data.set(key, observable);
                newValue = observable.value; // value might have been changed
                _this._updateHasMapEntry(key, true);
                _this._keysAtom.reportChanged();
            });
            var notifySpy = isSpyEnabled();
            var notify = hasListeners(this);
            var change = notify || notifySpy
                ? {
                    type: "add",
                    object: this,
                    name: key,
                    newValue: newValue
                }
                : null;
            if (notifySpy && process.env.NODE_ENV !== "production")
                spyReportStart(__assign$6(__assign$6({}, change), { name: this.name, key: key }));
            if (notify)
                notifyListeners(this, change);
            if (notifySpy && process.env.NODE_ENV !== "production")
                spyReportEnd();
        };
        ObservableMap.prototype.get = function (key) {
            if (this.has(key))
                return this.dehanceValue(this._data.get(key).get());
            return this.dehanceValue(undefined);
        };
        ObservableMap.prototype.dehanceValue = function (value) {
            if (this.dehancer !== undefined) {
                return this.dehancer(value);
            }
            return value;
        };
        ObservableMap.prototype.keys = function () {
            this._keysAtom.reportObserved();
            return this._data.keys();
        };
        ObservableMap.prototype.values = function () {
            var self = this;
            var keys = this.keys();
            return makeIterable({
                next: function () {
                    var _b = keys.next(), done = _b.done, value = _b.value;
                    return {
                        done: done,
                        value: done ? undefined : self.get(value)
                    };
                }
            });
        };
        ObservableMap.prototype.entries = function () {
            var self = this;
            var keys = this.keys();
            return makeIterable({
                next: function () {
                    var _b = keys.next(), done = _b.done, value = _b.value;
                    return {
                        done: done,
                        value: done ? undefined : [value, self.get(value)]
                    };
                }
            });
        };
        ObservableMap.prototype[(_a$1 = $mobx, Symbol.iterator)] = function () {
            return this.entries();
        };
        ObservableMap.prototype.forEach = function (callback, thisArg) {
            var e_1, _b;
            try {
                for (var _c = __values$1(this), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var _e = __read$3(_d.value, 2), key = _e[0], value = _e[1];
                    callback.call(thisArg, value, key, this);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                }
                finally { if (e_1) throw e_1.error; }
            }
        };
        /** Merge another object into this object, returns this. */
        ObservableMap.prototype.merge = function (other) {
            var _this = this;
            if (isObservableMap(other)) {
                other = other.toJS();
            }
            transaction(function () {
                var prev = allowStateChangesStart(true);
                try {
                    if (isPlainObject$3(other))
                        getPlainObjectKeys(other).forEach(function (key) {
                            return _this.set(key, other[key]);
                        });
                    else if (Array.isArray(other))
                        other.forEach(function (_b) {
                            var _c = __read$3(_b, 2), key = _c[0], value = _c[1];
                            return _this.set(key, value);
                        });
                    else if (isES6Map(other)) {
                        if (other.constructor !== Map)
                            fail$2("Cannot initialize from classes that inherit from Map: " + other.constructor.name); // prettier-ignore
                        other.forEach(function (value, key) { return _this.set(key, value); });
                    }
                    else if (other !== null && other !== undefined)
                        fail$2("Cannot initialize map from " + other);
                }
                finally {
                    allowStateChangesEnd(prev);
                }
            });
            return this;
        };
        ObservableMap.prototype.clear = function () {
            var _this = this;
            transaction(function () {
                untracked(function () {
                    var e_2, _b;
                    try {
                        for (var _c = __values$1(_this.keys()), _d = _c.next(); !_d.done; _d = _c.next()) {
                            var key = _d.value;
                            _this.delete(key);
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                });
            });
        };
        ObservableMap.prototype.replace = function (values) {
            var _this = this;
            // Implementation requirements:
            // - respect ordering of replacement map
            // - allow interceptors to run and potentially prevent individual operations
            // - don't recreate observables that already exist in original map (so we don't destroy existing subscriptions)
            // - don't _keysAtom.reportChanged if the keys of resulting map are indentical (order matters!)
            // - note that result map may differ from replacement map due to the interceptors
            transaction(function () {
                var e_3, _b, e_4, _c;
                // Convert to map so we can do quick key lookups
                var replacementMap = convertToMap(values);
                var orderedData = new Map();
                // Used for optimization
                var keysReportChangedCalled = false;
                try {
                    // Delete keys that don't exist in replacement map
                    // if the key deletion is prevented by interceptor
                    // add entry at the beginning of the result map
                    for (var _d = __values$1(_this._data.keys()), _e = _d.next(); !_e.done; _e = _d.next()) {
                        var key = _e.value;
                        // Concurrently iterating/deleting keys
                        // iterator should handle this correctly
                        if (!replacementMap.has(key)) {
                            var deleted = _this.delete(key);
                            // Was the key removed?
                            if (deleted) {
                                // _keysAtom.reportChanged() was already called
                                keysReportChangedCalled = true;
                            }
                            else {
                                // Delete prevented by interceptor
                                var value = _this._data.get(key);
                                orderedData.set(key, value);
                            }
                        }
                    }
                }
                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                finally {
                    try {
                        if (_e && !_e.done && (_b = _d.return)) _b.call(_d);
                    }
                    finally { if (e_3) throw e_3.error; }
                }
                try {
                    // Merge entries
                    for (var _f = __values$1(replacementMap.entries()), _g = _f.next(); !_g.done; _g = _f.next()) {
                        var _h = __read$3(_g.value, 2), key = _h[0], value = _h[1];
                        // We will want to know whether a new key is added
                        var keyExisted = _this._data.has(key);
                        // Add or update value
                        _this.set(key, value);
                        // The addition could have been prevent by interceptor
                        if (_this._data.has(key)) {
                            // The update could have been prevented by interceptor
                            // and also we want to preserve existing values
                            // so use value from _data map (instead of replacement map)
                            var value_1 = _this._data.get(key);
                            orderedData.set(key, value_1);
                            // Was a new key added?
                            if (!keyExisted) {
                                // _keysAtom.reportChanged() was already called
                                keysReportChangedCalled = true;
                            }
                        }
                    }
                }
                catch (e_4_1) { e_4 = { error: e_4_1 }; }
                finally {
                    try {
                        if (_g && !_g.done && (_c = _f.return)) _c.call(_f);
                    }
                    finally { if (e_4) throw e_4.error; }
                }
                // Check for possible key order change
                if (!keysReportChangedCalled) {
                    if (_this._data.size !== orderedData.size) {
                        // If size differs, keys are definitely modified
                        _this._keysAtom.reportChanged();
                    }
                    else {
                        var iter1 = _this._data.keys();
                        var iter2 = orderedData.keys();
                        var next1 = iter1.next();
                        var next2 = iter2.next();
                        while (!next1.done) {
                            if (next1.value !== next2.value) {
                                _this._keysAtom.reportChanged();
                                break;
                            }
                            next1 = iter1.next();
                            next2 = iter2.next();
                        }
                    }
                }
                // Use correctly ordered map
                _this._data = orderedData;
            });
            return this;
        };
        Object.defineProperty(ObservableMap.prototype, "size", {
            get: function () {
                this._keysAtom.reportObserved();
                return this._data.size;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Returns a plain object that represents this map.
         * Note that all the keys being stringified.
         * If there are duplicating keys after converting them to strings, behaviour is undetermined.
         */
        ObservableMap.prototype.toPOJO = function () {
            var e_5, _b;
            var res = {};
            try {
                for (var _c = __values$1(this), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var _e = __read$3(_d.value, 2), key = _e[0], value = _e[1];
                    // We lie about symbol key types due to https://github.com/Microsoft/TypeScript/issues/1863
                    res[typeof key === "symbol" ? key : stringifyKey(key)] = value;
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                }
                finally { if (e_5) throw e_5.error; }
            }
            return res;
        };
        /**
         * Returns a shallow non observable object clone of this map.
         * Note that the values migth still be observable. For a deep clone use mobx.toJS.
         */
        ObservableMap.prototype.toJS = function () {
            return new Map(this);
        };
        ObservableMap.prototype.toJSON = function () {
            // Used by JSON.stringify
            return this.toPOJO();
        };
        ObservableMap.prototype.toString = function () {
            var _this = this;
            return (this.name +
                "[{ " +
                Array.from(this.keys())
                    .map(function (key) { return stringifyKey(key) + ": " + ("" + _this.get(key)); })
                    .join(", ") +
                " }]");
        };
        /**
         * Observes this object. Triggers for the events 'add', 'update' and 'delete'.
         * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/observe
         * for callback details
         */
        ObservableMap.prototype.observe = function (listener, fireImmediately) {
            process.env.NODE_ENV !== "production" &&
                invariant(fireImmediately !== true, "`observe` doesn't support fireImmediately=true in combination with maps.");
            return registerListener(this, listener);
        };
        ObservableMap.prototype.intercept = function (handler) {
            return registerInterceptor(this, handler);
        };
        return ObservableMap;
    }());
    /* 'var' fixes small-build issue */
    var isObservableMap = createInstanceofPredicate("ObservableMap", ObservableMap);

    var _a$1$1;
    var ObservableSetMarker = {};
    var ObservableSet = /** @class */ (function () {
        function ObservableSet(initialData, enhancer, name) {
            if (enhancer === void 0) { enhancer = deepEnhancer; }
            if (name === void 0) { name = "ObservableSet@" + getNextId(); }
            this.name = name;
            this[_a$1$1] = ObservableSetMarker;
            this._data = new Set();
            this._atom = createAtom(this.name);
            this[Symbol.toStringTag] = "Set";
            if (typeof Set !== "function") {
                throw new Error("mobx.set requires Set polyfill for the current browser. Check babel-polyfill or core-js/es6/set.js");
            }
            this.enhancer = function (newV, oldV) { return enhancer(newV, oldV, name); };
            if (initialData) {
                this.replace(initialData);
            }
        }
        ObservableSet.prototype.dehanceValue = function (value) {
            if (this.dehancer !== undefined) {
                return this.dehancer(value);
            }
            return value;
        };
        ObservableSet.prototype.clear = function () {
            var _this = this;
            transaction(function () {
                untracked(function () {
                    var e_1, _b;
                    try {
                        for (var _c = __values$1(_this._data.values()), _d = _c.next(); !_d.done; _d = _c.next()) {
                            var value = _d.value;
                            _this.delete(value);
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                });
            });
        };
        ObservableSet.prototype.forEach = function (callbackFn, thisArg) {
            var e_2, _b;
            try {
                for (var _c = __values$1(this), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var value = _d.value;
                    callbackFn.call(thisArg, value, value, this);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                }
                finally { if (e_2) throw e_2.error; }
            }
        };
        Object.defineProperty(ObservableSet.prototype, "size", {
            get: function () {
                this._atom.reportObserved();
                return this._data.size;
            },
            enumerable: true,
            configurable: true
        });
        ObservableSet.prototype.add = function (value) {
            var _this = this;
            checkIfStateModificationsAreAllowed(this._atom);
            if (hasInterceptors(this)) {
                var change = interceptChange(this, {
                    type: "add",
                    object: this,
                    newValue: value
                });
                if (!change)
                    return this;
                // TODO: ideally, value = change.value would be done here, so that values can be
                // changed by interceptor. Same applies for other Set and Map api's.
            }
            if (!this.has(value)) {
                transaction(function () {
                    _this._data.add(_this.enhancer(value, undefined));
                    _this._atom.reportChanged();
                });
                var notifySpy = isSpyEnabled();
                var notify = hasListeners(this);
                var change = notify || notifySpy
                    ? {
                        type: "add",
                        object: this,
                        newValue: value
                    }
                    : null;
                if (notifySpy && process.env.NODE_ENV !== "production")
                    spyReportStart(change);
                if (notify)
                    notifyListeners(this, change);
                if (notifySpy && process.env.NODE_ENV !== "production")
                    spyReportEnd();
            }
            return this;
        };
        ObservableSet.prototype.delete = function (value) {
            var _this = this;
            if (hasInterceptors(this)) {
                var change = interceptChange(this, {
                    type: "delete",
                    object: this,
                    oldValue: value
                });
                if (!change)
                    return false;
            }
            if (this.has(value)) {
                var notifySpy = isSpyEnabled();
                var notify = hasListeners(this);
                var change = notify || notifySpy
                    ? {
                        type: "delete",
                        object: this,
                        oldValue: value
                    }
                    : null;
                if (notifySpy && process.env.NODE_ENV !== "production")
                    spyReportStart(__assign$6(__assign$6({}, change), { name: this.name }));
                transaction(function () {
                    _this._atom.reportChanged();
                    _this._data.delete(value);
                });
                if (notify)
                    notifyListeners(this, change);
                if (notifySpy && process.env.NODE_ENV !== "production")
                    spyReportEnd();
                return true;
            }
            return false;
        };
        ObservableSet.prototype.has = function (value) {
            this._atom.reportObserved();
            return this._data.has(this.dehanceValue(value));
        };
        ObservableSet.prototype.entries = function () {
            var nextIndex = 0;
            var keys = Array.from(this.keys());
            var values = Array.from(this.values());
            return makeIterable({
                next: function () {
                    var index = nextIndex;
                    nextIndex += 1;
                    return index < values.length
                        ? { value: [keys[index], values[index]], done: false }
                        : { done: true };
                }
            });
        };
        ObservableSet.prototype.keys = function () {
            return this.values();
        };
        ObservableSet.prototype.values = function () {
            this._atom.reportObserved();
            var self = this;
            var nextIndex = 0;
            var observableValues = Array.from(this._data.values());
            return makeIterable({
                next: function () {
                    return nextIndex < observableValues.length
                        ? { value: self.dehanceValue(observableValues[nextIndex++]), done: false }
                        : { done: true };
                }
            });
        };
        ObservableSet.prototype.replace = function (other) {
            var _this = this;
            if (isObservableSet(other)) {
                other = other.toJS();
            }
            transaction(function () {
                var prev = allowStateChangesStart(true);
                try {
                    if (Array.isArray(other)) {
                        _this.clear();
                        other.forEach(function (value) { return _this.add(value); });
                    }
                    else if (isES6Set(other)) {
                        _this.clear();
                        other.forEach(function (value) { return _this.add(value); });
                    }
                    else if (other !== null && other !== undefined) {
                        fail$2("Cannot initialize set from " + other);
                    }
                }
                finally {
                    allowStateChangesEnd(prev);
                }
            });
            return this;
        };
        ObservableSet.prototype.observe = function (listener, fireImmediately) {
            // TODO 'fireImmediately' can be true?
            process.env.NODE_ENV !== "production" &&
                invariant(fireImmediately !== true, "`observe` doesn't support fireImmediately=true in combination with sets.");
            return registerListener(this, listener);
        };
        ObservableSet.prototype.intercept = function (handler) {
            return registerInterceptor(this, handler);
        };
        ObservableSet.prototype.toJS = function () {
            return new Set(this);
        };
        ObservableSet.prototype.toString = function () {
            return this.name + "[ " + Array.from(this).join(", ") + " ]";
        };
        ObservableSet.prototype[(_a$1$1 = $mobx, Symbol.iterator)] = function () {
            return this.values();
        };
        return ObservableSet;
    }());
    var isObservableSet = createInstanceofPredicate("ObservableSet", ObservableSet);

    var ObservableObjectAdministration = /** @class */ (function () {
        function ObservableObjectAdministration(target, values, name, defaultEnhancer) {
            if (values === void 0) { values = new Map(); }
            this.target = target;
            this.values = values;
            this.name = name;
            this.defaultEnhancer = defaultEnhancer;
            this.keysAtom = new Atom(name + ".keys");
        }
        ObservableObjectAdministration.prototype.read = function (key) {
            return this.values.get(key).get();
        };
        ObservableObjectAdministration.prototype.write = function (key, newValue) {
            var instance = this.target;
            var observable = this.values.get(key);
            if (observable instanceof ComputedValue) {
                observable.set(newValue);
                return;
            }
            // intercept
            if (hasInterceptors(this)) {
                var change = interceptChange(this, {
                    type: "update",
                    object: this.proxy || instance,
                    name: key,
                    newValue: newValue
                });
                if (!change)
                    return;
                newValue = change.newValue;
            }
            newValue = observable.prepareNewValue(newValue);
            // notify spy & observers
            if (newValue !== globalState.UNCHANGED) {
                var notify = hasListeners(this);
                var notifySpy = isSpyEnabled();
                var change = notify || notifySpy
                    ? {
                        type: "update",
                        object: this.proxy || instance,
                        oldValue: observable.value,
                        name: key,
                        newValue: newValue
                    }
                    : null;
                if (notifySpy && process.env.NODE_ENV !== "production")
                    spyReportStart(__assign$6(__assign$6({}, change), { name: this.name, key: key }));
                observable.setNewValue(newValue);
                if (notify)
                    notifyListeners(this, change);
                if (notifySpy && process.env.NODE_ENV !== "production")
                    spyReportEnd();
            }
        };
        ObservableObjectAdministration.prototype.has = function (key) {
            var map = this.pendingKeys || (this.pendingKeys = new Map());
            var entry = map.get(key);
            if (entry)
                return entry.get();
            else {
                var exists = !!this.values.get(key);
                // Possible optimization: Don't have a separate map for non existing keys,
                // but store them in the values map instead, using a special symbol to denote "not existing"
                entry = new ObservableValue(exists, referenceEnhancer, this.name + "." + stringifyKey(key) + "?", false);
                map.set(key, entry);
                return entry.get(); // read to subscribe
            }
        };
        ObservableObjectAdministration.prototype.addObservableProp = function (propName, newValue, enhancer) {
            if (enhancer === void 0) { enhancer = this.defaultEnhancer; }
            var target = this.target;
            assertPropertyConfigurable(target, propName);
            if (hasInterceptors(this)) {
                var change = interceptChange(this, {
                    object: this.proxy || target,
                    name: propName,
                    type: "add",
                    newValue: newValue
                });
                if (!change)
                    return;
                newValue = change.newValue;
            }
            var observable = new ObservableValue(newValue, enhancer, this.name + "." + stringifyKey(propName), false);
            this.values.set(propName, observable);
            newValue = observable.value; // observableValue might have changed it
            Object.defineProperty(target, propName, generateObservablePropConfig(propName));
            this.notifyPropertyAddition(propName, newValue);
        };
        ObservableObjectAdministration.prototype.addComputedProp = function (propertyOwner, // where is the property declared?
        propName, options) {
            var target = this.target;
            options.name = options.name || this.name + "." + stringifyKey(propName);
            this.values.set(propName, new ComputedValue(options));
            if (propertyOwner === target || isPropertyConfigurable(propertyOwner, propName))
                Object.defineProperty(propertyOwner, propName, generateComputedPropConfig(propName));
        };
        ObservableObjectAdministration.prototype.remove = function (key) {
            if (!this.values.has(key))
                return;
            var target = this.target;
            if (hasInterceptors(this)) {
                var change = interceptChange(this, {
                    object: this.proxy || target,
                    name: key,
                    type: "remove"
                });
                if (!change)
                    return;
            }
            try {
                startBatch();
                var notify = hasListeners(this);
                var notifySpy = isSpyEnabled();
                var oldObservable = this.values.get(key);
                var oldValue = oldObservable && oldObservable.get();
                oldObservable && oldObservable.set(undefined);
                // notify key and keyset listeners
                this.keysAtom.reportChanged();
                this.values.delete(key);
                if (this.pendingKeys) {
                    var entry = this.pendingKeys.get(key);
                    if (entry)
                        entry.set(false);
                }
                // delete the prop
                delete this.target[key];
                var change = notify || notifySpy
                    ? {
                        type: "remove",
                        object: this.proxy || target,
                        oldValue: oldValue,
                        name: key
                    }
                    : null;
                if (notifySpy && process.env.NODE_ENV !== "production")
                    spyReportStart(__assign$6(__assign$6({}, change), { name: this.name, key: key }));
                if (notify)
                    notifyListeners(this, change);
                if (notifySpy && process.env.NODE_ENV !== "production")
                    spyReportEnd();
            }
            finally {
                endBatch();
            }
        };
        ObservableObjectAdministration.prototype.illegalAccess = function (owner, propName) {
            /**
             * This happens if a property is accessed through the prototype chain, but the property was
             * declared directly as own property on the prototype.
             *
             * E.g.:
             * class A {
             * }
             * extendObservable(A.prototype, { x: 1 })
             *
             * classB extens A {
             * }
             * console.log(new B().x)
             *
             * It is unclear whether the property should be considered 'static' or inherited.
             * Either use `console.log(A.x)`
             * or: decorate(A, { x: observable })
             *
             * When using decorate, the property will always be redeclared as own property on the actual instance
             */
            console.warn("Property '" + propName + "' of '" + owner + "' was accessed through the prototype chain. Use 'decorate' instead to declare the prop or access it statically through it's owner");
        };
        /**
         * Observes this object. Triggers for the events 'add', 'update' and 'delete'.
         * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/observe
         * for callback details
         */
        ObservableObjectAdministration.prototype.observe = function (callback, fireImmediately) {
            process.env.NODE_ENV !== "production" &&
                invariant(fireImmediately !== true, "`observe` doesn't support the fire immediately property for observable objects.");
            return registerListener(this, callback);
        };
        ObservableObjectAdministration.prototype.intercept = function (handler) {
            return registerInterceptor(this, handler);
        };
        ObservableObjectAdministration.prototype.notifyPropertyAddition = function (key, newValue) {
            var notify = hasListeners(this);
            var notifySpy = isSpyEnabled();
            var change = notify || notifySpy
                ? {
                    type: "add",
                    object: this.proxy || this.target,
                    name: key,
                    newValue: newValue
                }
                : null;
            if (notifySpy && process.env.NODE_ENV !== "production")
                spyReportStart(__assign$6(__assign$6({}, change), { name: this.name, key: key }));
            if (notify)
                notifyListeners(this, change);
            if (notifySpy && process.env.NODE_ENV !== "production")
                spyReportEnd();
            if (this.pendingKeys) {
                var entry = this.pendingKeys.get(key);
                if (entry)
                    entry.set(true);
            }
            this.keysAtom.reportChanged();
        };
        ObservableObjectAdministration.prototype.getKeys = function () {
            var e_1, _a;
            this.keysAtom.reportObserved();
            // return Reflect.ownKeys(this.values) as any
            var res = [];
            try {
                for (var _b = __values$1(this.values), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var _d = __read$3(_c.value, 2), key = _d[0], value = _d[1];
                    if (value instanceof ObservableValue)
                        res.push(key);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return res;
        };
        return ObservableObjectAdministration;
    }());
    function asObservableObject(target, name, defaultEnhancer) {
        if (name === void 0) { name = ""; }
        if (defaultEnhancer === void 0) { defaultEnhancer = deepEnhancer; }
        if (Object.prototype.hasOwnProperty.call(target, $mobx))
            return target[$mobx];
        process.env.NODE_ENV !== "production" &&
            invariant(Object.isExtensible(target), "Cannot make the designated object observable; it is not extensible");
        if (!isPlainObject$3(target))
            name = (target.constructor.name || "ObservableObject") + "@" + getNextId();
        if (!name)
            name = "ObservableObject@" + getNextId();
        var adm = new ObservableObjectAdministration(target, new Map(), stringifyKey(name), defaultEnhancer);
        addHiddenProp(target, $mobx, adm);
        return adm;
    }
    var observablePropertyConfigs = Object.create(null);
    var computedPropertyConfigs = Object.create(null);
    function generateObservablePropConfig(propName) {
        return (observablePropertyConfigs[propName] ||
            (observablePropertyConfigs[propName] = {
                configurable: true,
                enumerable: true,
                get: function () {
                    return this[$mobx].read(propName);
                },
                set: function (v) {
                    this[$mobx].write(propName, v);
                }
            }));
    }
    function getAdministrationForComputedPropOwner(owner) {
        var adm = owner[$mobx];
        if (!adm) {
            // because computed props are declared on proty,
            // the current instance might not have been initialized yet
            initializeInstance(owner);
            return owner[$mobx];
        }
        return adm;
    }
    function generateComputedPropConfig(propName) {
        return (computedPropertyConfigs[propName] ||
            (computedPropertyConfigs[propName] = {
                configurable: globalState.computedConfigurable,
                enumerable: false,
                get: function () {
                    return getAdministrationForComputedPropOwner(this).read(propName);
                },
                set: function (v) {
                    getAdministrationForComputedPropOwner(this).write(propName, v);
                }
            }));
    }
    var isObservableObjectAdministration = createInstanceofPredicate("ObservableObjectAdministration", ObservableObjectAdministration);
    function isObservableObject(thing) {
        if (isObject$2(thing)) {
            // Initializers run lazily when transpiling to babel, so make sure they are run...
            initializeInstance(thing);
            return isObservableObjectAdministration(thing[$mobx]);
        }
        return false;
    }

    function getAtom(thing, property) {
        if (typeof thing === "object" && thing !== null) {
            if (isObservableArray(thing)) {
                if (property !== undefined)
                    fail$2(process.env.NODE_ENV !== "production" &&
                        "It is not possible to get index atoms from arrays");
                return thing[$mobx].atom;
            }
            if (isObservableSet(thing)) {
                return thing[$mobx];
            }
            if (isObservableMap(thing)) {
                var anyThing = thing;
                if (property === undefined)
                    return anyThing._keysAtom;
                var observable = anyThing._data.get(property) || anyThing._hasMap.get(property);
                if (!observable)
                    fail$2(process.env.NODE_ENV !== "production" &&
                        "the entry '" + property + "' does not exist in the observable map '" + getDebugName(thing) + "'");
                return observable;
            }
            // Initializers run lazily when transpiling to babel, so make sure they are run...
            initializeInstance(thing);
            if (property && !thing[$mobx])
                thing[property]; // See #1072
            if (isObservableObject(thing)) {
                if (!property)
                    return fail$2(process.env.NODE_ENV !== "production" && "please specify a property");
                var observable = thing[$mobx].values.get(property);
                if (!observable)
                    fail$2(process.env.NODE_ENV !== "production" &&
                        "no observable property '" + property + "' found on the observable object '" + getDebugName(thing) + "'");
                return observable;
            }
            if (isAtom(thing) || isComputedValue(thing) || isReaction(thing)) {
                return thing;
            }
        }
        else if (typeof thing === "function") {
            if (isReaction(thing[$mobx])) {
                // disposer function
                return thing[$mobx];
            }
        }
        return fail$2(process.env.NODE_ENV !== "production" && "Cannot obtain atom from " + thing);
    }
    function getAdministration(thing, property) {
        if (!thing)
            fail$2("Expecting some object");
        if (property !== undefined)
            return getAdministration(getAtom(thing, property));
        if (isAtom(thing) || isComputedValue(thing) || isReaction(thing))
            return thing;
        if (isObservableMap(thing) || isObservableSet(thing))
            return thing;
        // Initializers run lazily when transpiling to babel, so make sure they are run...
        initializeInstance(thing);
        if (thing[$mobx])
            return thing[$mobx];
        fail$2(process.env.NODE_ENV !== "production" && "Cannot obtain administration from " + thing);
    }
    function getDebugName(thing, property) {
        var named;
        if (property !== undefined)
            named = getAtom(thing, property);
        else if (isObservableObject(thing) || isObservableMap(thing) || isObservableSet(thing))
            named = getAdministration(thing);
        else
            named = getAtom(thing); // valid for arrays as well
        return named.name;
    }

    var toString$1 = Object.prototype.toString;
    function deepEqual(a, b, depth) {
        if (depth === void 0) { depth = -1; }
        return eq(a, b, depth);
    }
    // Copied from https://github.com/jashkenas/underscore/blob/5c237a7c682fb68fd5378203f0bf22dce1624854/underscore.js#L1186-L1289
    // Internal recursive comparison function for `isEqual`.
    function eq(a, b, depth, aStack, bStack) {
        // Identical objects are equal. `0 === -0`, but they aren't identical.
        // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
        if (a === b)
            return a !== 0 || 1 / a === 1 / b;
        // `null` or `undefined` only equal to itself (strict comparison).
        if (a == null || b == null)
            return false;
        // `NaN`s are equivalent, but non-reflexive.
        if (a !== a)
            return b !== b;
        // Exhaust primitive checks
        var type = typeof a;
        if (type !== "function" && type !== "object" && typeof b != "object")
            return false;
        // Compare `[[Class]]` names.
        var className = toString$1.call(a);
        if (className !== toString$1.call(b))
            return false;
        switch (className) {
            // Strings, numbers, regular expressions, dates, and booleans are compared by value.
            case "[object RegExp]":
            // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
            case "[object String]":
                // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
                // equivalent to `new String("5")`.
                return "" + a === "" + b;
            case "[object Number]":
                // `NaN`s are equivalent, but non-reflexive.
                // Object(NaN) is equivalent to NaN.
                if (+a !== +a)
                    return +b !== +b;
                // An `egal` comparison is performed for other numeric values.
                return +a === 0 ? 1 / +a === 1 / b : +a === +b;
            case "[object Date]":
            case "[object Boolean]":
                // Coerce dates and booleans to numeric primitive values. Dates are compared by their
                // millisecond representations. Note that invalid dates with millisecond representations
                // of `NaN` are not equivalent.
                return +a === +b;
            case "[object Symbol]":
                return (typeof Symbol !== "undefined" && Symbol.valueOf.call(a) === Symbol.valueOf.call(b));
            case "[object Map]":
            case "[object Set]":
                // Maps and Sets are unwrapped to arrays of entry-pairs, adding an incidental level.
                // Hide this extra level by increasing the depth.
                if (depth >= 0) {
                    depth++;
                }
                break;
        }
        // Unwrap any wrapped objects.
        a = unwrap(a);
        b = unwrap(b);
        var areArrays = className === "[object Array]";
        if (!areArrays) {
            if (typeof a != "object" || typeof b != "object")
                return false;
            // Objects with different constructors are not equivalent, but `Object`s or `Array`s
            // from different frames are.
            var aCtor = a.constructor, bCtor = b.constructor;
            if (aCtor !== bCtor &&
                !(typeof aCtor === "function" &&
                    aCtor instanceof aCtor &&
                    typeof bCtor === "function" &&
                    bCtor instanceof bCtor) &&
                ("constructor" in a && "constructor" in b)) {
                return false;
            }
        }
        if (depth === 0) {
            return false;
        }
        else if (depth < 0) {
            depth = -1;
        }
        // Assume equality for cyclic structures. The algorithm for detecting cyclic
        // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
        // Initializing stack of traversed objects.
        // It's done here since we only need them for objects and arrays comparison.
        aStack = aStack || [];
        bStack = bStack || [];
        var length = aStack.length;
        while (length--) {
            // Linear search. Performance is inversely proportional to the number of
            // unique nested structures.
            if (aStack[length] === a)
                return bStack[length] === b;
        }
        // Add the first object to the stack of traversed objects.
        aStack.push(a);
        bStack.push(b);
        // Recursively compare objects and arrays.
        if (areArrays) {
            // Compare array lengths to determine if a deep comparison is necessary.
            length = a.length;
            if (length !== b.length)
                return false;
            // Deep compare the contents, ignoring non-numeric properties.
            while (length--) {
                if (!eq(a[length], b[length], depth - 1, aStack, bStack))
                    return false;
            }
        }
        else {
            // Deep compare objects.
            var keys = Object.keys(a);
            var key = void 0;
            length = keys.length;
            // Ensure that both objects contain the same number of properties before comparing deep equality.
            if (Object.keys(b).length !== length)
                return false;
            while (length--) {
                // Deep compare each member
                key = keys[length];
                if (!(has$1$1(b, key) && eq(a[key], b[key], depth - 1, aStack, bStack)))
                    return false;
            }
        }
        // Remove the first object from the stack of traversed objects.
        aStack.pop();
        bStack.pop();
        return true;
    }
    function unwrap(a) {
        if (isObservableArray(a))
            return a.slice();
        if (isES6Map(a) || isObservableMap(a))
            return Array.from(a.entries());
        if (isES6Set(a) || isObservableSet(a))
            return Array.from(a.entries());
        return a;
    }
    function has$1$1(a, key) {
        return Object.prototype.hasOwnProperty.call(a, key);
    }

    function makeIterable(iterator) {
        iterator[Symbol.iterator] = getSelf;
        return iterator;
    }
    function getSelf() {
        return this;
    }

    /**
     * (c) Michel Weststrate 2015 - 2018
     * MIT Licensed
     *
     * Welcome to the mobx sources! To get an global overview of how MobX internally works,
     * this is a good place to start:
     * https://medium.com/@mweststrate/becoming-fully-reactive-an-in-depth-explanation-of-mobservable-55995262a254#.xvbh6qd74
     *
     * Source folders:
     * ===============
     *
     * - api/     Most of the public static methods exposed by the module can be found here.
     * - core/    Implementation of the MobX algorithm; atoms, derivations, reactions, dependency trees, optimizations. Cool stuff can be found here.
     * - types/   All the magic that is need to have observable objects, arrays and values is in this folder. Including the modifiers like `asFlat`.
     * - utils/   Utility stuff.
     *
     */
    if (typeof Proxy === "undefined" || typeof Symbol === "undefined") {
        throw new Error("[mobx] MobX 5+ requires Proxy and Symbol objects. If your environment doesn't support Symbol or Proxy objects, please downgrade to MobX 4. For React Native Android, consider upgrading JSCore.");
    }
    try {
        // define process.env if needed
        // if this is not a production build in the first place
        // (in which case the expression below would be substituted with 'production')
        process.env.NODE_ENV;
    }
    catch (e) {
        var g$3 = getGlobal$1();
        if (typeof process === "undefined")
            g$3.process = {};
        g$3.process.env = {};
    }
    (function () {
        function testCodeMinification() { }
        if (testCodeMinification.name !== "testCodeMinification" &&
            process.env.NODE_ENV !== "production" &&
            typeof process !== 'undefined' && process.env.IGNORE_MOBX_MINIFY_WARNING !== "true") {
            // trick so it doesn't get replaced
            var varName = ["process", "env", "NODE_ENV"].join(".");
            console.warn("[mobx] you are running a minified build, but '" + varName + "' was not set to 'production' in your bundler. This results in an unnecessarily large and slow bundle");
        }
    })();
    if (typeof __MOBX_DEVTOOLS_GLOBAL_HOOK__ === "object") {
        // See: https://github.com/andykog/mobx-devtools/
        __MOBX_DEVTOOLS_GLOBAL_HOOK__.injectMobx({
            spy: spy,
            extras: {
                getDebugName: getDebugName
            },
            $mobx: $mobx
        });
    }

    var mobx_module = /*#__PURE__*/Object.freeze({
        __proto__: null,
        $mobx: $mobx,
        FlowCancellationError: FlowCancellationError,
        get IDerivationState () { return IDerivationState; },
        ObservableMap: ObservableMap,
        ObservableSet: ObservableSet,
        Reaction: Reaction,
        _allowStateChanges: allowStateChanges,
        _allowStateChangesInsideComputed: allowStateChangesInsideComputed,
        _allowStateReadsEnd: allowStateReadsEnd,
        _allowStateReadsStart: allowStateReadsStart,
        _endAction: _endAction,
        _getAdministration: getAdministration,
        _getGlobalState: getGlobalState,
        _interceptReads: interceptReads,
        _isComputingDerivation: isComputingDerivation,
        _resetGlobalState: resetGlobalState,
        _startAction: _startAction,
        action: action,
        autorun: autorun,
        comparer: comparer,
        computed: computed$1,
        configure: configure,
        createAtom: createAtom,
        decorate: decorate$1,
        entries: entries$1,
        extendObservable: extendObservable,
        flow: flow$1,
        get: get$2,
        getAtom: getAtom,
        getDebugName: getDebugName,
        getDependencyTree: getDependencyTree,
        getObserverTree: getObserverTree,
        has: has$a,
        intercept: intercept,
        isAction: isAction,
        isArrayLike: isArrayLike$1,
        isBoxedObservable: isObservableValue,
        isComputed: isComputed,
        isComputedProp: isComputedProp,
        isFlowCancellationError: isFlowCancellationError,
        isObservable: isObservable$1,
        isObservableArray: isObservableArray,
        isObservableMap: isObservableMap,
        isObservableObject: isObservableObject,
        isObservableProp: isObservableProp,
        isObservableSet: isObservableSet,
        keys: keys$2,
        observable: observable$1,
        observe: observe$1,
        onBecomeObserved: onBecomeObserved,
        onBecomeUnobserved: onBecomeUnobserved,
        onReactionError: onReactionError,
        reaction: reaction,
        remove: remove,
        runInAction: runInAction,
        set: set,
        spy: spy,
        toJS: toJS,
        trace: trace,
        transaction: transaction,
        untracked: untracked,
        values: values$2,
        when: when$2
    });

    if (!React$i.useState) {
        throw new Error("mobx-react-lite requires React with Hooks support");
    }
    if (!spy) {
        throw new Error("mobx-react-lite requires mobx at least version 4 to be available");
    }

    var __read$2 = (undefined && undefined.__read) || function (o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    };
    function useForceUpdate() {
        var _a = __read$2(React$i.useState(0), 2), setTick = _a[1];
        var update = React$i.useCallback(function () {
            setTick(function (tick) { return tick + 1; });
        }, []);
        return update;
    }
    function isPlainObject$2(value) {
        if (!value || typeof value !== "object") {
            return false;
        }
        var proto = Object.getPrototypeOf(value);
        return !proto || proto === Object.prototype;
    }
    function getSymbol(name) {
        if (typeof Symbol === "function") {
            return Symbol.for(name);
        }
        return "__$mobx-react " + name + "__";
    }
    var mockGlobal = {};
    function getGlobal() {
        if (typeof window !== "undefined") {
            return window;
        }
        if (typeof global !== "undefined") {
            return global;
        }
        if (typeof self !== "undefined") {
            return self;
        }
        return mockGlobal;
    }

    var observerBatchingConfiguredSymbol = getSymbol("observerBatching");
    function defaultNoopBatch(callback) {
        callback();
    }
    function observerBatching(reactionScheduler) {
        if (!reactionScheduler) {
            reactionScheduler = defaultNoopBatch;
            if ("production" !== process.env.NODE_ENV) {
                console.warn("[MobX] Failed to get unstable_batched updates from react-dom / react-native");
            }
        }
        configure({ reactionScheduler: reactionScheduler });
        getGlobal()[observerBatchingConfiguredSymbol] = true;
    }

    var globalIsUsingStaticRendering = false;
    function useStaticRendering(enable) {
        globalIsUsingStaticRendering = enable;
    }
    function isUsingStaticRendering() {
        return globalIsUsingStaticRendering;
    }

    function printDebugValue(v) {
        return getDependencyTree(v);
    }

    function createTrackingData(reaction) {
        var trackingData = {
            cleanAt: Date.now() + CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS,
            reaction: reaction
        };
        return trackingData;
    }
    /**
     * The minimum time before we'll clean up a Reaction created in a render
     * for a component that hasn't managed to run its effects. This needs to
     * be big enough to ensure that a component won't turn up and have its
     * effects run without being re-rendered.
     */
    var CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS = 10000;
    /**
     * The frequency with which we'll check for leaked reactions.
     */
    var CLEANUP_TIMER_LOOP_MILLIS = 10000;
    /**
     * Reactions created by components that have yet to be fully mounted.
     */
    var uncommittedReactionRefs = new Set();
    /**
     * Latest 'uncommitted reactions' cleanup timer handle.
     */
    var reactionCleanupHandle;
    function ensureCleanupTimerRunning() {
        if (reactionCleanupHandle === undefined) {
            reactionCleanupHandle = setTimeout(cleanUncommittedReactions, CLEANUP_TIMER_LOOP_MILLIS);
        }
    }
    function scheduleCleanupOfReactionIfLeaked(ref) {
        uncommittedReactionRefs.add(ref);
        ensureCleanupTimerRunning();
    }
    function recordReactionAsCommitted(reactionRef) {
        uncommittedReactionRefs.delete(reactionRef);
    }
    /**
     * Run by the cleanup timer to dispose any outstanding reactions
     */
    function cleanUncommittedReactions() {
        reactionCleanupHandle = undefined;
        // Loop through all the candidate leaked reactions; those older
        // than CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS get tidied.
        var now = Date.now();
        uncommittedReactionRefs.forEach(function (ref) {
            var tracking = ref.current;
            if (tracking) {
                if (now >= tracking.cleanAt) {
                    // It's time to tidy up this leaked reaction.
                    tracking.reaction.dispose();
                    ref.current = null;
                    uncommittedReactionRefs.delete(ref);
                }
            }
        });
        if (uncommittedReactionRefs.size > 0) {
            // We've just finished a round of cleanups but there are still
            // some leak candidates outstanding.
            ensureCleanupTimerRunning();
        }
    }

    var insideRender = false;
    var forceUpdateQueue = [];
    function useQueuedForceUpdate(forceUpdate) {
        return function () {
            if (insideRender) {
                forceUpdateQueue.push(forceUpdate);
            }
            else {
                forceUpdate();
            }
        };
    }
    function useQueuedForceUpdateBlock(callback) {
        // start intercepting force-update calls
        insideRender = true;
        forceUpdateQueue = [];
        try {
            var result = callback();
            // stop intercepting force-update
            insideRender = false;
            // store queue or nothing if it was empty to execute useLayoutEffect only when necessary
            var queue_1 = forceUpdateQueue.length > 0 ? forceUpdateQueue : undefined;
            // run force-update queue in useLayoutEffect
            React__default["default"].useLayoutEffect(function () {
                if (queue_1) {
                    queue_1.forEach(function (x) { return x(); });
                }
            }, [queue_1]);
            return result;
        }
        finally {
            insideRender = false;
        }
    }

    var EMPTY_OBJECT$1 = {};
    function observerComponentNameFor(baseComponentName) {
        return "observer" + baseComponentName;
    }
    function useObserver(fn, baseComponentName, options) {
        if (baseComponentName === void 0) { baseComponentName = "observed"; }
        if (options === void 0) { options = EMPTY_OBJECT$1; }
        if (isUsingStaticRendering()) {
            return fn();
        }
        var wantedForceUpdateHook = options.useForceUpdate || useForceUpdate;
        var forceUpdate = wantedForceUpdateHook();
        var queuedForceUpdate = useQueuedForceUpdate(forceUpdate);
        // StrictMode/ConcurrentMode/Suspense may mean that our component is
        // rendered and abandoned multiple times, so we need to track leaked
        // Reactions.
        var reactionTrackingRef = React__default["default"].useRef(null);
        if (!reactionTrackingRef.current) {
            // First render for this component (or first time since a previous
            // reaction from an abandoned render was disposed).
            var newReaction_1 = new Reaction(observerComponentNameFor(baseComponentName), function () {
                // Observable has changed, meaning we want to re-render
                // BUT if we're a component that hasn't yet got to the useEffect()
                // stage, we might be a component that _started_ to render, but
                // got dropped, and we don't want to make state changes then.
                // (It triggers warnings in StrictMode, for a start.)
                if (trackingData_1.mounted) {
                    // We have reached useEffect(), so we're mounted, and can trigger an update
                    queuedForceUpdate();
                }
                else {
                    // We haven't yet reached useEffect(), so we'll need to trigger a re-render
                    // when (and if) useEffect() arrives.  The easiest way to do that is just to
                    // drop our current reaction and allow useEffect() to recreate it.
                    newReaction_1.dispose();
                    reactionTrackingRef.current = null;
                }
            });
            var trackingData_1 = createTrackingData(newReaction_1);
            reactionTrackingRef.current = trackingData_1;
            scheduleCleanupOfReactionIfLeaked(reactionTrackingRef);
        }
        var reaction = reactionTrackingRef.current.reaction;
        React__default["default"].useDebugValue(reaction, printDebugValue);
        React__default["default"].useEffect(function () {
            // Called on first mount only
            recordReactionAsCommitted(reactionTrackingRef);
            if (reactionTrackingRef.current) {
                // Great. We've already got our reaction from our render;
                // all we need to do is to record that it's now mounted,
                // to allow future observable changes to trigger re-renders
                reactionTrackingRef.current.mounted = true;
            }
            else {
                // The reaction we set up in our render has been disposed.
                // This is either due to bad timings of renderings, e.g. our
                // component was paused for a _very_ long time, and our
                // reaction got cleaned up, or we got a observable change
                // between render and useEffect
                // Re-create the reaction
                reactionTrackingRef.current = {
                    reaction: new Reaction(observerComponentNameFor(baseComponentName), function () {
                        // We've definitely already been mounted at this point
                        queuedForceUpdate();
                    }),
                    cleanAt: Infinity
                };
                queuedForceUpdate();
            }
            return function () {
                reactionTrackingRef.current.reaction.dispose();
                reactionTrackingRef.current = null;
            };
        }, []);
        // delay all force-update calls after rendering of this component
        return useQueuedForceUpdateBlock(function () {
            // render the original component, but have the
            // reaction track the observables, so that rendering
            // can be invalidated (see above) once a dependency changes
            var rendering;
            var exception;
            reaction.track(function () {
                try {
                    rendering = fn();
                }
                catch (e) {
                    exception = e;
                }
            });
            if (exception) {
                throw exception; // re-throw any exceptions caught during rendering
            }
            return rendering;
        });
    }

    var __assign$5 = (undefined && undefined.__assign) || function () {
        __assign$5 = Object.assign || function(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
            }
            return t;
        };
        return __assign$5.apply(this, arguments);
    };
    // n.b. base case is not used for actual typings or exported in the typing files
    function observer$1(baseComponent, options) {
        // The working of observer is explained step by step in this talk: https://www.youtube.com/watch?v=cPF4iBedoF0&feature=youtu.be&t=1307
        if (isUsingStaticRendering()) {
            return baseComponent;
        }
        var realOptions = __assign$5({ forwardRef: false }, options);
        var baseComponentName = baseComponent.displayName || baseComponent.name;
        var wrappedComponent = function (props, ref) {
            return useObserver(function () { return baseComponent(props, ref); }, baseComponentName);
        };
        wrappedComponent.displayName = baseComponentName;
        // memo; we are not interested in deep updates
        // in props; we assume that if deep objects are changed,
        // this is in observables, which would have been tracked anyway
        var memoComponent;
        if (realOptions.forwardRef) {
            // we have to use forwardRef here because:
            // 1. it cannot go before memo, only after it
            // 2. forwardRef converts the function into an actual component, so we can't let the baseComponent do it
            //    since it wouldn't be a callable function anymore
            memoComponent = React$i.memo(React$i.forwardRef(wrappedComponent));
        }
        else {
            memoComponent = React$i.memo(wrappedComponent);
        }
        copyStaticProperties$1(baseComponent, memoComponent);
        memoComponent.displayName = baseComponentName;
        return memoComponent;
    }
    // based on https://github.com/mridgway/hoist-non-react-statics/blob/master/src/index.js
    var hoistBlackList$1 = {
        $$typeof: true,
        render: true,
        compare: true,
        type: true
    };
    function copyStaticProperties$1(base, target) {
        Object.keys(base).forEach(function (key) {
            if (!hoistBlackList$1[key]) {
                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(base, key));
            }
        });
    }

    function ObserverComponent(_a) {
        var children = _a.children, render = _a.render;
        var component = children || render;
        if (typeof component !== "function") {
            return null;
        }
        return useObserver(component);
    }
    ObserverComponent.propTypes = {
        children: ObserverPropsCheck,
        render: ObserverPropsCheck
    };
    ObserverComponent.displayName = "Observer";
    function ObserverPropsCheck(props, key, componentName, location, propFullName) {
        var extraKey = key === "children" ? "render" : "children";
        var hasProp = typeof props[key] === "function";
        var hasExtraProp = typeof props[extraKey] === "function";
        if (hasProp && hasExtraProp) {
            return new Error("MobX Observer: Do not use children and render in the same time in`" + componentName);
        }
        if (hasProp || hasExtraProp) {
            return null;
        }
        return new Error("Invalid prop `" +
            propFullName +
            "` of type `" +
            typeof props[key] +
            "` supplied to" +
            " `" +
            componentName +
            "`, expected `function`.");
    }

    var __read$1 = (undefined && undefined.__read) || function (o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    };
    function useAsObservableSourceInternal(current, usedByLocalStore) {
        var culprit = usedByLocalStore ? "useLocalStore" : "useAsObservableSource";
        if ("production" !== process.env.NODE_ENV && usedByLocalStore) {
            var _a = __read$1(React__default["default"].useState(current), 1), initialSource = _a[0];
            if ((initialSource !== undefined && current === undefined) ||
                (initialSource === undefined && current !== undefined)) {
                throw new Error("make sure you never pass `undefined` to " + culprit);
            }
        }
        if (usedByLocalStore && current === undefined) {
            return undefined;
        }
        if ("production" !== process.env.NODE_ENV && !isPlainObject$2(current)) {
            throw new Error(culprit + " expects a plain object as " + (usedByLocalStore ? "second" : "first") + " argument");
        }
        var _b = __read$1(React__default["default"].useState(function () { return observable$1(current, {}, { deep: false }); }), 1), res = _b[0];
        if ("production" !== process.env.NODE_ENV &&
            Object.keys(res).length !== Object.keys(current).length) {
            throw new Error("the shape of objects passed to " + culprit + " should be stable");
        }
        runInAction(function () {
            Object.assign(res, current);
        });
        return res;
    }
    function useAsObservableSource(current) {
        return useAsObservableSourceInternal(current, false);
    }

    function useLocalStore(initializer, current) {
        var source = useAsObservableSourceInternal(current, true);
        return React__default["default"].useState(function () {
            var local = observable$1(initializer(source));
            if (isPlainObject$2(local)) {
                runInAction(function () {
                    Object.keys(local).forEach(function (key) {
                        var value = local[key];
                        if (typeof value === "function") {
                            // @ts-ignore No idea why ts2536 is popping out here
                            local[key] = wrapInTransaction(value, local);
                        }
                    });
                });
            }
            return local;
        })[0];
    }
    // tslint:disable-next-line: ban-types
    function wrapInTransaction(fn, context) {
        return function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return transaction(function () { return fn.apply(context, args); });
        };
    }

    observerBatching(ReactDOM.unstable_batchedUpdates);

    var symbolId = 0;

    function createSymbol(name) {
      if (typeof Symbol === "function") {
        return Symbol(name);
      }

      var symbol = "__$mobx-react " + name + " (" + symbolId + ")";
      symbolId++;
      return symbol;
    }

    var createdSymbols = {};
    function newSymbol(name) {
      if (!createdSymbols[name]) {
        createdSymbols[name] = createSymbol(name);
      }

      return createdSymbols[name];
    }
    function shallowEqual(objA, objB) {
      //From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js
      if (is$1(objA, objB)) return true;

      if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
        return false;
      }

      var keysA = Object.keys(objA);
      var keysB = Object.keys(objB);
      if (keysA.length !== keysB.length) return false;

      for (var i = 0; i < keysA.length; i++) {
        if (!Object.hasOwnProperty.call(objB, keysA[i]) || !is$1(objA[keysA[i]], objB[keysA[i]])) {
          return false;
        }
      }

      return true;
    }

    function is$1(x, y) {
      // From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js
      if (x === y) {
        return x !== 0 || 1 / x === 1 / y;
      } else {
        return x !== x && y !== y;
      }
    } // based on https://github.com/mridgway/hoist-non-react-statics/blob/master/src/index.js


    var hoistBlackList = {
      $$typeof: 1,
      render: 1,
      compare: 1,
      type: 1,
      childContextTypes: 1,
      contextType: 1,
      contextTypes: 1,
      defaultProps: 1,
      getDefaultProps: 1,
      getDerivedStateFromError: 1,
      getDerivedStateFromProps: 1,
      mixins: 1,
      propTypes: 1
    };
    function copyStaticProperties(base, target) {
      var protoProps = Object.getOwnPropertyNames(Object.getPrototypeOf(base));
      Object.getOwnPropertyNames(base).forEach(function (key) {
        if (!hoistBlackList[key] && protoProps.indexOf(key) === -1) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(base, key));
        }
      });
    }
    /**
     * Helper to set `prop` to `this` as non-enumerable (hidden prop)
     * @param target
     * @param prop
     * @param value
     */

    function setHiddenProp(target, prop, value) {
      if (!Object.hasOwnProperty.call(target, prop)) {
        Object.defineProperty(target, prop, {
          enumerable: false,
          configurable: true,
          writable: true,
          value: value
        });
      } else {
        target[prop] = value;
      }
    }
    /**
     * Utilities for patching componentWillUnmount, to make sure @disposeOnUnmount works correctly icm with user defined hooks
     * and the handler provided by mobx-react
     */

    var mobxMixins =
    /*#__PURE__*/
    newSymbol("patchMixins");
    var mobxPatchedDefinition =
    /*#__PURE__*/
    newSymbol("patchedDefinition");

    function getMixins(target, methodName) {
      var mixins = target[mobxMixins] = target[mobxMixins] || {};
      var methodMixins = mixins[methodName] = mixins[methodName] || {};
      methodMixins.locks = methodMixins.locks || 0;
      methodMixins.methods = methodMixins.methods || [];
      return methodMixins;
    }

    function wrapper(realMethod, mixins) {
      var _this = this;

      for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        args[_key - 2] = arguments[_key];
      }

      // locks are used to ensure that mixins are invoked only once per invocation, even on recursive calls
      mixins.locks++;

      try {
        var retVal;

        if (realMethod !== undefined && realMethod !== null) {
          retVal = realMethod.apply(this, args);
        }

        return retVal;
      } finally {
        mixins.locks--;

        if (mixins.locks === 0) {
          mixins.methods.forEach(function (mx) {
            mx.apply(_this, args);
          });
        }
      }
    }

    function wrapFunction(realMethod, mixins) {
      var fn = function fn() {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        wrapper.call.apply(wrapper, [this, realMethod, mixins].concat(args));
      };

      return fn;
    }

    function patch(target, methodName, mixinMethod) {
      var mixins = getMixins(target, methodName);

      if (mixins.methods.indexOf(mixinMethod) < 0) {
        mixins.methods.push(mixinMethod);
      }

      var oldDefinition = Object.getOwnPropertyDescriptor(target, methodName);

      if (oldDefinition && oldDefinition[mobxPatchedDefinition]) {
        // already patched definition, do not repatch
        return;
      }

      var originalMethod = target[methodName];
      var newDefinition = createDefinition(target, methodName, oldDefinition ? oldDefinition.enumerable : undefined, mixins, originalMethod);
      Object.defineProperty(target, methodName, newDefinition);
    }

    function createDefinition(target, methodName, enumerable, mixins, originalMethod) {
      var _ref;

      var wrappedFunc = wrapFunction(originalMethod, mixins);
      return _ref = {}, _ref[mobxPatchedDefinition] = true, _ref.get = function get() {
        return wrappedFunc;
      }, _ref.set = function set(value) {
        if (this === target) {
          wrappedFunc = wrapFunction(value, mixins);
        } else {
          // when it is an instance of the prototype/a child prototype patch that particular case again separately
          // since we need to store separate values depending on wether it is the actual instance, the prototype, etc
          // e.g. the method for super might not be the same as the method for the prototype which might be not the same
          // as the method for the instance
          var newDefinition = createDefinition(this, methodName, enumerable, mixins, value);
          Object.defineProperty(this, methodName, newDefinition);
        }
      }, _ref.configurable = true, _ref.enumerable = enumerable, _ref;
    }

    var mobxAdminProperty = $mobx || "$mobx";
    var mobxObserverProperty =
    /*#__PURE__*/
    newSymbol("isMobXReactObserver");
    var mobxIsUnmounted =
    /*#__PURE__*/
    newSymbol("isUnmounted");
    var skipRenderKey =
    /*#__PURE__*/
    newSymbol("skipRender");
    var isForcingUpdateKey =
    /*#__PURE__*/
    newSymbol("isForcingUpdate");
    function makeClassComponentObserver(componentClass) {
      var target = componentClass.prototype;

      if (componentClass[mobxObserverProperty]) {
        var displayName = getDisplayName$1(target);
        console.warn("The provided component class (" + displayName + ") \n                has already been declared as an observer component.");
      } else {
        componentClass[mobxObserverProperty] = true;
      }

      if (target.componentWillReact) throw new Error("The componentWillReact life-cycle event is no longer supported");

      if (componentClass["__proto__"] !== React$i.PureComponent) {
        if (!target.shouldComponentUpdate) target.shouldComponentUpdate = observerSCU;else if (target.shouldComponentUpdate !== observerSCU) // n.b. unequal check, instead of existence check, as @observer might be on superclass as well
          throw new Error("It is not allowed to use shouldComponentUpdate in observer based components.");
      } // this.props and this.state are made observable, just to make sure @computed fields that
      // are defined inside the component, and which rely on state or props, re-compute if state or props change
      // (otherwise the computed wouldn't update and become stale on props change, since props are not observable)
      // However, this solution is not without it's own problems: https://github.com/mobxjs/mobx-react/issues?utf8=%E2%9C%93&q=is%3Aissue+label%3Aobservable-props-or-not+


      makeObservableProp(target, "props");
      makeObservableProp(target, "state");
      var baseRender = target.render;

      target.render = function () {
        return makeComponentReactive.call(this, baseRender);
      };

      patch(target, "componentWillUnmount", function () {
        var _this$render$mobxAdmi;

        if (isUsingStaticRendering() === true) return;
        (_this$render$mobxAdmi = this.render[mobxAdminProperty]) === null || _this$render$mobxAdmi === void 0 ? void 0 : _this$render$mobxAdmi.dispose();
        this[mobxIsUnmounted] = true;

        if (!this.render[mobxAdminProperty]) {
          // Render may have been hot-swapped and/or overriden by a subclass.
          var _displayName = getDisplayName$1(this);

          console.warn("The reactive render of an observer class component (" + _displayName + ") \n                was overriden after MobX attached. This may result in a memory leak if the \n                overriden reactive render was not properly disposed.");
        }
      });
      return componentClass;
    } // Generates a friendly name for debugging

    function getDisplayName$1(comp) {
      return comp.displayName || comp.name || comp.constructor && (comp.constructor.displayName || comp.constructor.name) || "<component>";
    }

    function makeComponentReactive(render) {
      var _this = this;

      if (isUsingStaticRendering() === true) return render.call(this);
      /**
       * If props are shallowly modified, react will render anyway,
       * so atom.reportChanged() should not result in yet another re-render
       */

      setHiddenProp(this, skipRenderKey, false);
      /**
       * forceUpdate will re-assign this.props. We don't want that to cause a loop,
       * so detect these changes
       */

      setHiddenProp(this, isForcingUpdateKey, false);
      var initialName = getDisplayName$1(this);
      var baseRender = render.bind(this);
      var isRenderingPending = false;
      var reaction = new Reaction(initialName + ".render()", function () {
        if (!isRenderingPending) {
          // N.B. Getting here *before mounting* means that a component constructor has side effects (see the relevant test in misc.js)
          // This unidiomatic React usage but React will correctly warn about this so we continue as usual
          // See #85 / Pull #44
          isRenderingPending = true;

          if (_this[mobxIsUnmounted] !== true) {
            var hasError = true;

            try {
              setHiddenProp(_this, isForcingUpdateKey, true);
              if (!_this[skipRenderKey]) React$i.Component.prototype.forceUpdate.call(_this);
              hasError = false;
            } finally {
              setHiddenProp(_this, isForcingUpdateKey, false);
              if (hasError) reaction.dispose();
            }
          }
        }
      });
      reaction["reactComponent"] = this;
      reactiveRender[mobxAdminProperty] = reaction;
      this.render = reactiveRender;

      function reactiveRender() {
        isRenderingPending = false;
        var exception = undefined;
        var rendering = undefined;
        reaction.track(function () {
          try {
            rendering = allowStateChanges(false, baseRender);
          } catch (e) {
            exception = e;
          }
        });

        if (exception) {
          throw exception;
        }

        return rendering;
      }

      return reactiveRender.call(this);
    }

    function observerSCU(nextProps, nextState) {
      if (isUsingStaticRendering()) {
        console.warn("[mobx-react] It seems that a re-rendering of a React component is triggered while in static (server-side) mode. Please make sure components are rendered only once server-side.");
      } // update on any state changes (as is the default)


      if (this.state !== nextState) {
        return true;
      } // update if props are shallowly not equal, inspired by PureRenderMixin
      // we could return just 'false' here, and avoid the `skipRender` checks etc
      // however, it is nicer if lifecycle events are triggered like usually,
      // so we return true here if props are shallowly modified.


      return !shallowEqual(this.props, nextProps);
    }

    function makeObservableProp(target, propName) {
      var valueHolderKey = newSymbol("reactProp_" + propName + "_valueHolder");
      var atomHolderKey = newSymbol("reactProp_" + propName + "_atomHolder");

      function getAtom() {
        if (!this[atomHolderKey]) {
          setHiddenProp(this, atomHolderKey, createAtom("reactive " + propName));
        }

        return this[atomHolderKey];
      }

      Object.defineProperty(target, propName, {
        configurable: true,
        enumerable: true,
        get: function get() {
          var prevReadState = false;

          if (allowStateReadsStart && allowStateReadsEnd) {
            prevReadState = allowStateReadsStart(true);
          }

          getAtom.call(this).reportObserved();

          if (allowStateReadsStart && allowStateReadsEnd) {
            allowStateReadsEnd(prevReadState);
          }

          return this[valueHolderKey];
        },
        set: function set(v) {
          if (!this[isForcingUpdateKey] && !shallowEqual(this[valueHolderKey], v)) {
            setHiddenProp(this, valueHolderKey, v);
            setHiddenProp(this, skipRenderKey, true);
            getAtom.call(this).reportChanged();
            setHiddenProp(this, skipRenderKey, false);
          } else {
            setHiddenProp(this, valueHolderKey, v);
          }
        }
      });
    }

    var hasSymbol$1 = typeof Symbol === "function" && Symbol.for; // Using react-is had some issues (and operates on elements, not on types), see #608 / #609

    var ReactForwardRefSymbol = hasSymbol$1 ?
    /*#__PURE__*/
    Symbol.for("react.forward_ref") : typeof React$i.forwardRef === "function" &&

    React$i.forwardRef(function (props) {
      return null;
    })["$$typeof"];
    var ReactMemoSymbol = hasSymbol$1 ?
    /*#__PURE__*/
    Symbol.for("react.memo") : typeof React$i.memo === "function" &&

    React$i.memo(function (props) {
      return null;
    })["$$typeof"];
    /**
     * Observer function / decorator
     */

    function observer(component) {
      if (component["isMobxInjector"] === true) {
        console.warn("Mobx observer: You are trying to use 'observer' on a component that already has 'inject'. Please apply 'observer' before applying 'inject'");
      }

      if (ReactMemoSymbol && component["$$typeof"] === ReactMemoSymbol) {
        throw new Error("Mobx observer: You are trying to use 'observer' on a function component wrapped in either another observer or 'React.memo'. The observer already applies 'React.memo' for you.");
      } // Unwrap forward refs into `<Observer>` component
      // we need to unwrap the render, because it is the inner render that needs to be tracked,
      // not the ForwardRef HoC


      if (ReactForwardRefSymbol && component["$$typeof"] === ReactForwardRefSymbol) {
        var baseRender = component["render"];
        if (typeof baseRender !== "function") throw new Error("render property of ForwardRef was not a function");
        return React$i.forwardRef(function ObserverForwardRef() {
          var args = arguments;
          return React$i.createElement(ObserverComponent, null, function () {
            return baseRender.apply(undefined, args);
          });
        });
      } // Function component


      if (typeof component === "function" && (!component.prototype || !component.prototype.render) && !component["isReactClass"] && !Object.prototype.isPrototypeOf.call(React$i.Component, component)) {
        return observer$1(component);
      }

      return makeClassComponentObserver(component);
    }

    function _extends$4() {
      _extends$4 = Object.assign || function (target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];

          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }

        return target;
      };

      return _extends$4.apply(this, arguments);
    }

    function _objectWithoutPropertiesLoose$2(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;

      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }

      return target;
    }

    var MobXProviderContext =
    /*#__PURE__*/
    React__default["default"].createContext({});
    function Provider(props) {
      var children = props.children,
          stores = _objectWithoutPropertiesLoose$2(props, ["children"]);

      var parentValue = React__default["default"].useContext(MobXProviderContext);
      var mutableProviderRef = React__default["default"].useRef(_extends$4({}, parentValue, stores));
      var value = mutableProviderRef.current;

      if (process.env.NODE_ENV !== "production") {
        var newValue = _extends$4({}, value, stores); // spread in previous state for the context based stores


        if (!shallowEqual(value, newValue)) {
          throw new Error("MobX Provider: The set of provided stores has changed. See: https://github.com/mobxjs/mobx-react#the-set-of-provided-stores-has-changed-error.");
        }
      }

      return React__default["default"].createElement(MobXProviderContext.Provider, {
        value: value
      }, children);
    }
    Provider.displayName = "MobXProvider";

    /**
     * Store Injection
     */

    function createStoreInjector(grabStoresFn, component, injectNames, makeReactive) {
      // Support forward refs
      var Injector = React__default["default"].forwardRef(function (props, ref) {
        var newProps = _extends$4({}, props);

        var context = React__default["default"].useContext(MobXProviderContext);
        Object.assign(newProps, grabStoresFn(context || {}, newProps) || {});

        if (ref) {
          newProps.ref = ref;
        }

        return React__default["default"].createElement(component, newProps);
      });
      if (makeReactive) Injector = observer(Injector);
      Injector["isMobxInjector"] = true; // assigned late to suppress observer warning
      // Static fields from component should be visible on the generated Injector

      copyStaticProperties(component, Injector);
      Injector["wrappedComponent"] = component;
      Injector.displayName = getInjectName(component, injectNames);
      return Injector;
    }

    function getInjectName(component, injectNames) {
      var displayName;
      var componentName = component.displayName || component.name || component.constructor && component.constructor.name || "Component";
      if (injectNames) displayName = "inject-with-" + injectNames + "(" + componentName + ")";else displayName = "inject(" + componentName + ")";
      return displayName;
    }

    function grabStoresByName(storeNames) {
      return function (baseStores, nextProps) {
        storeNames.forEach(function (storeName) {
          if (storeName in nextProps // prefer props over stores
          ) return;
          if (!(storeName in baseStores)) throw new Error("MobX injector: Store '" + storeName + "' is not available! Make sure it is provided by some Provider");
          nextProps[storeName] = baseStores[storeName];
        });
        return nextProps;
      };
    }
    /**
     * higher order component that injects stores to a child.
     * takes either a varargs list of strings, which are stores read from the context,
     * or a function that manually maps the available stores from the context to props:
     * storesToProps(mobxStores, props, context) => newProps
     */


    function inject() {
      for (var _len = arguments.length, storeNames = new Array(_len), _key = 0; _key < _len; _key++) {
        storeNames[_key] = arguments[_key];
      }

      if (typeof arguments[0] === "function") {
        var grabStoresFn = arguments[0];
        return function (componentClass) {
          return createStoreInjector(grabStoresFn, componentClass, grabStoresFn.name, true);
        };
      } else {
        return function (componentClass) {
          return createStoreInjector(grabStoresByName(storeNames), componentClass, storeNames.join("-"), false);
        };
      }
    }

    var protoStoreKey =
    /*#__PURE__*/
    newSymbol("disposeOnUnmountProto");
    var instStoreKey =
    /*#__PURE__*/
    newSymbol("disposeOnUnmountInst");

    function runDisposersOnWillUnmount() {
      var _this = this;
      [].concat(this[protoStoreKey] || [], this[instStoreKey] || []).forEach(function (propKeyOrFunction) {
        var prop = typeof propKeyOrFunction === "string" ? _this[propKeyOrFunction] : propKeyOrFunction;

        if (prop !== undefined && prop !== null) {
          if (Array.isArray(prop)) prop.map(function (f) {
            return f();
          });else prop();
        }
      });
    }

    function disposeOnUnmount(target, propertyKeyOrFunction) {
      if (Array.isArray(propertyKeyOrFunction)) {
        return propertyKeyOrFunction.map(function (fn) {
          return disposeOnUnmount(target, fn);
        });
      }

      var c = Object.getPrototypeOf(target).constructor;
      var c2 = Object.getPrototypeOf(target.constructor); // Special case for react-hot-loader

      var c3 = Object.getPrototypeOf(Object.getPrototypeOf(target));

      if (!(c === React__default["default"].Component || c === React__default["default"].PureComponent || c2 === React__default["default"].Component || c2 === React__default["default"].PureComponent || c3 === React__default["default"].Component || c3 === React__default["default"].PureComponent)) {
        throw new Error("[mobx-react] disposeOnUnmount only supports direct subclasses of React.Component or React.PureComponent.");
      }

      if (typeof propertyKeyOrFunction !== "string" && typeof propertyKeyOrFunction !== "function" && !Array.isArray(propertyKeyOrFunction)) {
        throw new Error("[mobx-react] disposeOnUnmount only works if the parameter is either a property key or a function.");
      } // decorator's target is the prototype, so it doesn't have any instance properties like props


      var isDecorator = typeof propertyKeyOrFunction === "string"; // add property key / function we want run (disposed) to the store

      var componentWasAlreadyModified = !!target[protoStoreKey] || !!target[instStoreKey];
      var store = isDecorator ? // decorators are added to the prototype store
      target[protoStoreKey] || (target[protoStoreKey] = []) : // functions are added to the instance store
      target[instStoreKey] || (target[instStoreKey] = []);
      store.push(propertyKeyOrFunction); // tweak the component class componentWillUnmount if not done already

      if (!componentWasAlreadyModified) {
        patch(target, "componentWillUnmount", runDisposersOnWillUnmount);
      } // return the disposer as is if invoked as a non decorator


      if (typeof propertyKeyOrFunction !== "string") {
        return propertyKeyOrFunction;
      }
    }

    function createChainableTypeChecker(validator) {
      function checkType(isRequired, props, propName, componentName, location, propFullName) {
        for (var _len = arguments.length, rest = new Array(_len > 6 ? _len - 6 : 0), _key = 6; _key < _len; _key++) {
          rest[_key - 6] = arguments[_key];
        }

        return untracked(function () {
          componentName = componentName || "<<anonymous>>";
          propFullName = propFullName || propName;

          if (props[propName] == null) {
            if (isRequired) {
              var actual = props[propName] === null ? "null" : "undefined";
              return new Error("The " + location + " `" + propFullName + "` is marked as required " + "in `" + componentName + "`, but its value is `" + actual + "`.");
            }

            return null;
          } else {
            // @ts-ignore rest arg is necessary for some React internals - fails tests otherwise
            return validator.apply(void 0, [props, propName, componentName, location, propFullName].concat(rest));
          }
        });
      }

      var chainedCheckType = checkType.bind(null, false); // Add isRequired to satisfy Requirable

      chainedCheckType.isRequired = checkType.bind(null, true);
      return chainedCheckType;
    } // Copied from React.PropTypes


    function isSymbol$3(propType, propValue) {
      // Native Symbol.
      if (propType === "symbol") {
        return true;
      } // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'


      if (propValue["@@toStringTag"] === "Symbol") {
        return true;
      } // Fallback for non-spec compliant Symbols which are polyfilled.


      if (typeof Symbol === "function" && propValue instanceof Symbol) {
        return true;
      }

      return false;
    } // Copied from React.PropTypes


    function getPropType(propValue) {
      var propType = typeof propValue;

      if (Array.isArray(propValue)) {
        return "array";
      }

      if (propValue instanceof RegExp) {
        // Old webkits (at least until Android 4.0) return 'function' rather than
        // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
        // passes PropTypes.object.
        return "object";
      }

      if (isSymbol$3(propType, propValue)) {
        return "symbol";
      }

      return propType;
    } // This handles more types than `getPropType`. Only used for error messages.
    // Copied from React.PropTypes


    function getPreciseType(propValue) {
      var propType = getPropType(propValue);

      if (propType === "object") {
        if (propValue instanceof Date) {
          return "date";
        } else if (propValue instanceof RegExp) {
          return "regexp";
        }
      }

      return propType;
    }

    function createObservableTypeCheckerCreator(allowNativeType, mobxType) {
      return createChainableTypeChecker(function (props, propName, componentName, location, propFullName) {
        return untracked(function () {
          if (allowNativeType) {
            if (getPropType(props[propName]) === mobxType.toLowerCase()) return null;
          }

          var mobxChecker;

          switch (mobxType) {
            case "Array":
              mobxChecker = isObservableArray;
              break;

            case "Object":
              mobxChecker = isObservableObject;
              break;

            case "Map":
              mobxChecker = isObservableMap;
              break;

            default:
              throw new Error("Unexpected mobxType: " + mobxType);
          }

          var propValue = props[propName];

          if (!mobxChecker(propValue)) {
            var preciseType = getPreciseType(propValue);
            var nativeTypeExpectationMessage = allowNativeType ? " or javascript `" + mobxType.toLowerCase() + "`" : "";
            return new Error("Invalid prop `" + propFullName + "` of type `" + preciseType + "` supplied to" + " `" + componentName + "`, expected `mobx.Observable" + mobxType + "`" + nativeTypeExpectationMessage + ".");
          }

          return null;
        });
      });
    }

    function createObservableArrayOfTypeChecker(allowNativeType, typeChecker) {
      return createChainableTypeChecker(function (props, propName, componentName, location, propFullName) {
        for (var _len2 = arguments.length, rest = new Array(_len2 > 5 ? _len2 - 5 : 0), _key2 = 5; _key2 < _len2; _key2++) {
          rest[_key2 - 5] = arguments[_key2];
        }

        return untracked(function () {
          if (typeof typeChecker !== "function") {
            return new Error("Property `" + propFullName + "` of component `" + componentName + "` has " + "invalid PropType notation.");
          } else {
            var error = createObservableTypeCheckerCreator(allowNativeType, "Array")(props, propName, componentName, location, propFullName);
            if (error instanceof Error) return error;
            var propValue = props[propName];

            for (var i = 0; i < propValue.length; i++) {
              error = typeChecker.apply(void 0, [propValue, i, componentName, location, propFullName + "[" + i + "]"].concat(rest));
              if (error instanceof Error) return error;
            }

            return null;
          }
        });
      });
    }

    var observableArray =
    /*#__PURE__*/
    createObservableTypeCheckerCreator(false, "Array");
    var observableArrayOf =
    /*#__PURE__*/
    createObservableArrayOfTypeChecker.bind(null, false);
    var observableMap =
    /*#__PURE__*/
    createObservableTypeCheckerCreator(false, "Map");
    var observableObject =
    /*#__PURE__*/
    createObservableTypeCheckerCreator(false, "Object");
    var arrayOrObservableArray =
    /*#__PURE__*/
    createObservableTypeCheckerCreator(true, "Array");
    var arrayOrObservableArrayOf =
    /*#__PURE__*/
    createObservableArrayOfTypeChecker.bind(null, true);
    var objectOrObservableObject =
    /*#__PURE__*/
    createObservableTypeCheckerCreator(true, "Object");
    var PropTypes$1 = {
      observableArray: observableArray,
      observableArrayOf: observableArrayOf,
      observableMap: observableMap,
      observableObject: observableObject,
      arrayOrObservableArray: arrayOrObservableArray,
      arrayOrObservableArrayOf: arrayOrObservableArrayOf,
      objectOrObservableObject: objectOrObservableObject
    };

    if (!React$i.Component) throw new Error("mobx-react requires React to be available");
    if (!observable$1) throw new Error("mobx-react requires mobx to be available");

    var mobxreact_esm = /*#__PURE__*/Object.freeze({
        __proto__: null,
        MobXProviderContext: MobXProviderContext,
        PropTypes: PropTypes$1,
        Provider: Provider,
        disposeOnUnmount: disposeOnUnmount,
        inject: inject,
        observer: observer,
        Observer: ObserverComponent,
        isUsingStaticRendering: isUsingStaticRendering,
        observerBatching: observerBatching,
        useAsObservableSource: useAsObservableSource,
        useLocalStore: useLocalStore,
        useObserver: useObserver,
        useStaticRendering: useStaticRendering
    });

    var common = {
      black: '#000',
      white: '#fff'
    };
    var common$1 = common;

    var red = {
      50: '#ffebee',
      100: '#ffcdd2',
      200: '#ef9a9a',
      300: '#e57373',
      400: '#ef5350',
      500: '#f44336',
      600: '#e53935',
      700: '#d32f2f',
      800: '#c62828',
      900: '#b71c1c',
      A100: '#ff8a80',
      A200: '#ff5252',
      A400: '#ff1744',
      A700: '#d50000'
    };
    var red$1 = red;

    var pink = {
      50: '#fce4ec',
      100: '#f8bbd0',
      200: '#f48fb1',
      300: '#f06292',
      400: '#ec407a',
      500: '#e91e63',
      600: '#d81b60',
      700: '#c2185b',
      800: '#ad1457',
      900: '#880e4f',
      A100: '#ff80ab',
      A200: '#ff4081',
      A400: '#f50057',
      A700: '#c51162'
    };
    var pink$1 = pink;

    var purple = {
      50: '#f3e5f5',
      100: '#e1bee7',
      200: '#ce93d8',
      300: '#ba68c8',
      400: '#ab47bc',
      500: '#9c27b0',
      600: '#8e24aa',
      700: '#7b1fa2',
      800: '#6a1b9a',
      900: '#4a148c',
      A100: '#ea80fc',
      A200: '#e040fb',
      A400: '#d500f9',
      A700: '#aa00ff'
    };
    var purple$1 = purple;

    var deepPurple = {
      50: '#ede7f6',
      100: '#d1c4e9',
      200: '#b39ddb',
      300: '#9575cd',
      400: '#7e57c2',
      500: '#673ab7',
      600: '#5e35b1',
      700: '#512da8',
      800: '#4527a0',
      900: '#311b92',
      A100: '#b388ff',
      A200: '#7c4dff',
      A400: '#651fff',
      A700: '#6200ea'
    };
    var deepPurple$1 = deepPurple;

    var indigo = {
      50: '#e8eaf6',
      100: '#c5cae9',
      200: '#9fa8da',
      300: '#7986cb',
      400: '#5c6bc0',
      500: '#3f51b5',
      600: '#3949ab',
      700: '#303f9f',
      800: '#283593',
      900: '#1a237e',
      A100: '#8c9eff',
      A200: '#536dfe',
      A400: '#3d5afe',
      A700: '#304ffe'
    };
    var indigo$1 = indigo;

    var blue = {
      50: '#e3f2fd',
      100: '#bbdefb',
      200: '#90caf9',
      300: '#64b5f6',
      400: '#42a5f5',
      500: '#2196f3',
      600: '#1e88e5',
      700: '#1976d2',
      800: '#1565c0',
      900: '#0d47a1',
      A100: '#82b1ff',
      A200: '#448aff',
      A400: '#2979ff',
      A700: '#2962ff'
    };
    var blue$1 = blue;

    var lightBlue = {
      50: '#e1f5fe',
      100: '#b3e5fc',
      200: '#81d4fa',
      300: '#4fc3f7',
      400: '#29b6f6',
      500: '#03a9f4',
      600: '#039be5',
      700: '#0288d1',
      800: '#0277bd',
      900: '#01579b',
      A100: '#80d8ff',
      A200: '#40c4ff',
      A400: '#00b0ff',
      A700: '#0091ea'
    };
    var lightBlue$1 = lightBlue;

    var cyan = {
      50: '#e0f7fa',
      100: '#b2ebf2',
      200: '#80deea',
      300: '#4dd0e1',
      400: '#26c6da',
      500: '#00bcd4',
      600: '#00acc1',
      700: '#0097a7',
      800: '#00838f',
      900: '#006064',
      A100: '#84ffff',
      A200: '#18ffff',
      A400: '#00e5ff',
      A700: '#00b8d4'
    };
    var cyan$1 = cyan;

    var teal = {
      50: '#e0f2f1',
      100: '#b2dfdb',
      200: '#80cbc4',
      300: '#4db6ac',
      400: '#26a69a',
      500: '#009688',
      600: '#00897b',
      700: '#00796b',
      800: '#00695c',
      900: '#004d40',
      A100: '#a7ffeb',
      A200: '#64ffda',
      A400: '#1de9b6',
      A700: '#00bfa5'
    };
    var teal$1 = teal;

    var green = {
      50: '#e8f5e9',
      100: '#c8e6c9',
      200: '#a5d6a7',
      300: '#81c784',
      400: '#66bb6a',
      500: '#4caf50',
      600: '#43a047',
      700: '#388e3c',
      800: '#2e7d32',
      900: '#1b5e20',
      A100: '#b9f6ca',
      A200: '#69f0ae',
      A400: '#00e676',
      A700: '#00c853'
    };
    var green$1 = green;

    var lightGreen = {
      50: '#f1f8e9',
      100: '#dcedc8',
      200: '#c5e1a5',
      300: '#aed581',
      400: '#9ccc65',
      500: '#8bc34a',
      600: '#7cb342',
      700: '#689f38',
      800: '#558b2f',
      900: '#33691e',
      A100: '#ccff90',
      A200: '#b2ff59',
      A400: '#76ff03',
      A700: '#64dd17'
    };
    var lightGreen$1 = lightGreen;

    var lime = {
      50: '#f9fbe7',
      100: '#f0f4c3',
      200: '#e6ee9c',
      300: '#dce775',
      400: '#d4e157',
      500: '#cddc39',
      600: '#c0ca33',
      700: '#afb42b',
      800: '#9e9d24',
      900: '#827717',
      A100: '#f4ff81',
      A200: '#eeff41',
      A400: '#c6ff00',
      A700: '#aeea00'
    };
    var lime$1 = lime;

    var yellow = {
      50: '#fffde7',
      100: '#fff9c4',
      200: '#fff59d',
      300: '#fff176',
      400: '#ffee58',
      500: '#ffeb3b',
      600: '#fdd835',
      700: '#fbc02d',
      800: '#f9a825',
      900: '#f57f17',
      A100: '#ffff8d',
      A200: '#ffff00',
      A400: '#ffea00',
      A700: '#ffd600'
    };
    var yellow$1 = yellow;

    var amber = {
      50: '#fff8e1',
      100: '#ffecb3',
      200: '#ffe082',
      300: '#ffd54f',
      400: '#ffca28',
      500: '#ffc107',
      600: '#ffb300',
      700: '#ffa000',
      800: '#ff8f00',
      900: '#ff6f00',
      A100: '#ffe57f',
      A200: '#ffd740',
      A400: '#ffc400',
      A700: '#ffab00'
    };
    var amber$1 = amber;

    var orange = {
      50: '#fff3e0',
      100: '#ffe0b2',
      200: '#ffcc80',
      300: '#ffb74d',
      400: '#ffa726',
      500: '#ff9800',
      600: '#fb8c00',
      700: '#f57c00',
      800: '#ef6c00',
      900: '#e65100',
      A100: '#ffd180',
      A200: '#ffab40',
      A400: '#ff9100',
      A700: '#ff6d00'
    };
    var orange$1 = orange;

    var deepOrange = {
      50: '#fbe9e7',
      100: '#ffccbc',
      200: '#ffab91',
      300: '#ff8a65',
      400: '#ff7043',
      500: '#ff5722',
      600: '#f4511e',
      700: '#e64a19',
      800: '#d84315',
      900: '#bf360c',
      A100: '#ff9e80',
      A200: '#ff6e40',
      A400: '#ff3d00',
      A700: '#dd2c00'
    };
    var deepOrange$1 = deepOrange;

    var brown = {
      50: '#efebe9',
      100: '#d7ccc8',
      200: '#bcaaa4',
      300: '#a1887f',
      400: '#8d6e63',
      500: '#795548',
      600: '#6d4c41',
      700: '#5d4037',
      800: '#4e342e',
      900: '#3e2723',
      A100: '#d7ccc8',
      A200: '#bcaaa4',
      A400: '#8d6e63',
      A700: '#5d4037'
    };
    var brown$1 = brown;

    var grey = {
      50: '#fafafa',
      100: '#f5f5f5',
      200: '#eeeeee',
      300: '#e0e0e0',
      400: '#bdbdbd',
      500: '#9e9e9e',
      600: '#757575',
      700: '#616161',
      800: '#424242',
      900: '#212121',
      A100: '#d5d5d5',
      A200: '#aaaaaa',
      A400: '#303030',
      A700: '#616161'
    };
    var grey$1 = grey;

    var blueGrey = {
      50: '#eceff1',
      100: '#cfd8dc',
      200: '#b0bec5',
      300: '#90a4ae',
      400: '#78909c',
      500: '#607d8b',
      600: '#546e7a',
      700: '#455a64',
      800: '#37474f',
      900: '#263238',
      A100: '#cfd8dc',
      A200: '#b0bec5',
      A400: '#78909c',
      A700: '#455a64'
    };
    var blueGrey$1 = blueGrey;

    var colors = /*#__PURE__*/Object.freeze({
        __proto__: null,
        common: common$1,
        red: red$1,
        pink: pink$1,
        purple: purple$1,
        deepPurple: deepPurple$1,
        indigo: indigo$1,
        blue: blue$1,
        lightBlue: lightBlue$1,
        cyan: cyan$1,
        teal: teal$1,
        green: green$1,
        lightGreen: lightGreen$1,
        lime: lime$1,
        yellow: yellow$1,
        amber: amber$1,
        orange: orange$1,
        deepOrange: deepOrange$1,
        brown: brown$1,
        grey: grey$1,
        blueGrey: blueGrey$1
    });

    function chainPropTypes$1(propType1, propType2) {
      if (process.env.NODE_ENV === 'production') {
        return function () {
          return null;
        };
      }

      return function validate() {
        return propType1.apply(void 0, arguments) || propType2.apply(void 0, arguments);
      };
    }

    function _extends$3() {
      _extends$3 = Object.assign || function (target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];

          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }

        return target;
      };

      return _extends$3.apply(this, arguments);
    }

    function _typeof$g(obj) {
      "@babel/helpers - typeof";

      return _typeof$g = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof$g(obj);
    }

    function isPlainObject$1(item) {
      return item && _typeof$g(item) === 'object' && item.constructor === Object;
    }
    function deepmerge$1(target, source) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
        clone: true
      };
      var output = options.clone ? _extends$3({}, target) : target;

      if (isPlainObject$1(target) && isPlainObject$1(source)) {
        Object.keys(source).forEach(function (key) {
          // Avoid prototype pollution
          if (key === '__proto__') {
            return;
          }

          if (isPlainObject$1(source[key]) && key in target) {
            output[key] = deepmerge$1(target[key], source[key], options);
          } else {
            output[key] = source[key];
          }
        });
      }

      return output;
    }

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function getAugmentedNamespace(n) {
    	if (n.__esModule) return n;
    	var a = Object.defineProperty({}, '__esModule', {value: true});
    	Object.keys(n).forEach(function (k) {
    		var d = Object.getOwnPropertyDescriptor(n, k);
    		Object.defineProperty(a, k, d.get ? d : {
    			enumerable: true,
    			get: function () {
    				return n[k];
    			}
    		});
    	});
    	return a;
    }

    var propTypes = {exports: {}};

    var reactIs$3 = {exports: {}};

    var reactIs_production_min$2 = {};

    /** @license React v16.13.1
     * react-is.production.min.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    var b$2="function"===typeof Symbol&&Symbol.for,c$2=b$2?Symbol.for("react.element"):60103,d$3=b$2?Symbol.for("react.portal"):60106,e$2=b$2?Symbol.for("react.fragment"):60107,f$2=b$2?Symbol.for("react.strict_mode"):60108,g$2=b$2?Symbol.for("react.profiler"):60114,h$3=b$2?Symbol.for("react.provider"):60109,k$3=b$2?Symbol.for("react.context"):60110,l$2=b$2?Symbol.for("react.async_mode"):60111,m$2=b$2?Symbol.for("react.concurrent_mode"):60111,n$3=b$2?Symbol.for("react.forward_ref"):60112,p$2=b$2?Symbol.for("react.suspense"):60113,q$2=b$2?
    Symbol.for("react.suspense_list"):60120,r$3=b$2?Symbol.for("react.memo"):60115,t$1=b$2?Symbol.for("react.lazy"):60116,v$3=b$2?Symbol.for("react.block"):60121,w$2=b$2?Symbol.for("react.fundamental"):60117,x$3=b$2?Symbol.for("react.responder"):60118,y$2=b$2?Symbol.for("react.scope"):60119;
    function z$2(a){if("object"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c$2:switch(a=a.type,a){case l$2:case m$2:case e$2:case g$2:case f$2:case p$2:return a;default:switch(a=a&&a.$$typeof,a){case k$3:case n$3:case t$1:case r$3:case h$3:return a;default:return u}}case d$3:return u}}}function A$3(a){return z$2(a)===m$2}reactIs_production_min$2.AsyncMode=l$2;reactIs_production_min$2.ConcurrentMode=m$2;reactIs_production_min$2.ContextConsumer=k$3;reactIs_production_min$2.ContextProvider=h$3;reactIs_production_min$2.Element=c$2;reactIs_production_min$2.ForwardRef=n$3;reactIs_production_min$2.Fragment=e$2;reactIs_production_min$2.Lazy=t$1;reactIs_production_min$2.Memo=r$3;reactIs_production_min$2.Portal=d$3;
    reactIs_production_min$2.Profiler=g$2;reactIs_production_min$2.StrictMode=f$2;reactIs_production_min$2.Suspense=p$2;reactIs_production_min$2.isAsyncMode=function(a){return A$3(a)||z$2(a)===l$2};reactIs_production_min$2.isConcurrentMode=A$3;reactIs_production_min$2.isContextConsumer=function(a){return z$2(a)===k$3};reactIs_production_min$2.isContextProvider=function(a){return z$2(a)===h$3};reactIs_production_min$2.isElement=function(a){return "object"===typeof a&&null!==a&&a.$$typeof===c$2};reactIs_production_min$2.isForwardRef=function(a){return z$2(a)===n$3};reactIs_production_min$2.isFragment=function(a){return z$2(a)===e$2};reactIs_production_min$2.isLazy=function(a){return z$2(a)===t$1};
    reactIs_production_min$2.isMemo=function(a){return z$2(a)===r$3};reactIs_production_min$2.isPortal=function(a){return z$2(a)===d$3};reactIs_production_min$2.isProfiler=function(a){return z$2(a)===g$2};reactIs_production_min$2.isStrictMode=function(a){return z$2(a)===f$2};reactIs_production_min$2.isSuspense=function(a){return z$2(a)===p$2};
    reactIs_production_min$2.isValidElementType=function(a){return "string"===typeof a||"function"===typeof a||a===e$2||a===m$2||a===g$2||a===f$2||a===p$2||a===q$2||"object"===typeof a&&null!==a&&(a.$$typeof===t$1||a.$$typeof===r$3||a.$$typeof===h$3||a.$$typeof===k$3||a.$$typeof===n$3||a.$$typeof===w$2||a.$$typeof===x$3||a.$$typeof===y$2||a.$$typeof===v$3)};reactIs_production_min$2.typeOf=z$2;

    var reactIs_development$2 = {};

    /** @license React v16.13.1
     * react-is.development.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */



    if (process.env.NODE_ENV !== "production") {
      (function() {

    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var hasSymbol = typeof Symbol === 'function' && Symbol.for;
    var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
    var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
    var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
    var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
    var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
    var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
    var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
    // (unstable) APIs that have been removed. Can we remove the symbols?

    var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
    var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
    var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
    var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
    var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
    var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
    var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
    var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
    var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
    var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
    var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;

    function isValidElementType(type) {
      return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
      type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
    }

    function typeOf(object) {
      if (typeof object === 'object' && object !== null) {
        var $$typeof = object.$$typeof;

        switch ($$typeof) {
          case REACT_ELEMENT_TYPE:
            var type = object.type;

            switch (type) {
              case REACT_ASYNC_MODE_TYPE:
              case REACT_CONCURRENT_MODE_TYPE:
              case REACT_FRAGMENT_TYPE:
              case REACT_PROFILER_TYPE:
              case REACT_STRICT_MODE_TYPE:
              case REACT_SUSPENSE_TYPE:
                return type;

              default:
                var $$typeofType = type && type.$$typeof;

                switch ($$typeofType) {
                  case REACT_CONTEXT_TYPE:
                  case REACT_FORWARD_REF_TYPE:
                  case REACT_LAZY_TYPE:
                  case REACT_MEMO_TYPE:
                  case REACT_PROVIDER_TYPE:
                    return $$typeofType;

                  default:
                    return $$typeof;
                }

            }

          case REACT_PORTAL_TYPE:
            return $$typeof;
        }
      }

      return undefined;
    } // AsyncMode is deprecated along with isAsyncMode

    var AsyncMode = REACT_ASYNC_MODE_TYPE;
    var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
    var ContextConsumer = REACT_CONTEXT_TYPE;
    var ContextProvider = REACT_PROVIDER_TYPE;
    var Element = REACT_ELEMENT_TYPE;
    var ForwardRef = REACT_FORWARD_REF_TYPE;
    var Fragment = REACT_FRAGMENT_TYPE;
    var Lazy = REACT_LAZY_TYPE;
    var Memo = REACT_MEMO_TYPE;
    var Portal = REACT_PORTAL_TYPE;
    var Profiler = REACT_PROFILER_TYPE;
    var StrictMode = REACT_STRICT_MODE_TYPE;
    var Suspense = REACT_SUSPENSE_TYPE;
    var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

    function isAsyncMode(object) {
      {
        if (!hasWarnedAboutDeprecatedIsAsyncMode) {
          hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

          console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
        }
      }

      return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
    }
    function isConcurrentMode(object) {
      return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
    }
    function isContextConsumer(object) {
      return typeOf(object) === REACT_CONTEXT_TYPE;
    }
    function isContextProvider(object) {
      return typeOf(object) === REACT_PROVIDER_TYPE;
    }
    function isElement(object) {
      return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    function isForwardRef(object) {
      return typeOf(object) === REACT_FORWARD_REF_TYPE;
    }
    function isFragment(object) {
      return typeOf(object) === REACT_FRAGMENT_TYPE;
    }
    function isLazy(object) {
      return typeOf(object) === REACT_LAZY_TYPE;
    }
    function isMemo(object) {
      return typeOf(object) === REACT_MEMO_TYPE;
    }
    function isPortal(object) {
      return typeOf(object) === REACT_PORTAL_TYPE;
    }
    function isProfiler(object) {
      return typeOf(object) === REACT_PROFILER_TYPE;
    }
    function isStrictMode(object) {
      return typeOf(object) === REACT_STRICT_MODE_TYPE;
    }
    function isSuspense(object) {
      return typeOf(object) === REACT_SUSPENSE_TYPE;
    }

    reactIs_development$2.AsyncMode = AsyncMode;
    reactIs_development$2.ConcurrentMode = ConcurrentMode;
    reactIs_development$2.ContextConsumer = ContextConsumer;
    reactIs_development$2.ContextProvider = ContextProvider;
    reactIs_development$2.Element = Element;
    reactIs_development$2.ForwardRef = ForwardRef;
    reactIs_development$2.Fragment = Fragment;
    reactIs_development$2.Lazy = Lazy;
    reactIs_development$2.Memo = Memo;
    reactIs_development$2.Portal = Portal;
    reactIs_development$2.Profiler = Profiler;
    reactIs_development$2.StrictMode = StrictMode;
    reactIs_development$2.Suspense = Suspense;
    reactIs_development$2.isAsyncMode = isAsyncMode;
    reactIs_development$2.isConcurrentMode = isConcurrentMode;
    reactIs_development$2.isContextConsumer = isContextConsumer;
    reactIs_development$2.isContextProvider = isContextProvider;
    reactIs_development$2.isElement = isElement;
    reactIs_development$2.isForwardRef = isForwardRef;
    reactIs_development$2.isFragment = isFragment;
    reactIs_development$2.isLazy = isLazy;
    reactIs_development$2.isMemo = isMemo;
    reactIs_development$2.isPortal = isPortal;
    reactIs_development$2.isProfiler = isProfiler;
    reactIs_development$2.isStrictMode = isStrictMode;
    reactIs_development$2.isSuspense = isSuspense;
    reactIs_development$2.isValidElementType = isValidElementType;
    reactIs_development$2.typeOf = typeOf;
      })();
    }

    if (process.env.NODE_ENV === 'production') {
      reactIs$3.exports = reactIs_production_min$2;
    } else {
      reactIs$3.exports = reactIs_development$2;
    }

    /*
    object-assign
    (c) Sindre Sorhus
    @license MIT
    */
    /* eslint-disable no-unused-vars */
    var getOwnPropertySymbols$1 = Object.getOwnPropertySymbols;
    var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;

    function toObject(val) {
    	if (val === null || val === undefined) {
    		throw new TypeError('Object.assign cannot be called with null or undefined');
    	}

    	return Object(val);
    }

    function shouldUseNative() {
    	try {
    		if (!Object.assign) {
    			return false;
    		}

    		// Detect buggy property enumeration order in older V8 versions.

    		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
    		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
    		test1[5] = 'de';
    		if (Object.getOwnPropertyNames(test1)[0] === '5') {
    			return false;
    		}

    		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
    		var test2 = {};
    		for (var i = 0; i < 10; i++) {
    			test2['_' + String.fromCharCode(i)] = i;
    		}
    		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
    			return test2[n];
    		});
    		if (order2.join('') !== '0123456789') {
    			return false;
    		}

    		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
    		var test3 = {};
    		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
    			test3[letter] = letter;
    		});
    		if (Object.keys(Object.assign({}, test3)).join('') !==
    				'abcdefghijklmnopqrst') {
    			return false;
    		}

    		return true;
    	} catch (err) {
    		// We don't expect any of the above to throw, but better to be safe.
    		return false;
    	}
    }

    var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
    	var from;
    	var to = toObject(target);
    	var symbols;

    	for (var s = 1; s < arguments.length; s++) {
    		from = Object(arguments[s]);

    		for (var key in from) {
    			if (hasOwnProperty$1.call(from, key)) {
    				to[key] = from[key];
    			}
    		}

    		if (getOwnPropertySymbols$1) {
    			symbols = getOwnPropertySymbols$1(from);
    			for (var i = 0; i < symbols.length; i++) {
    				if (propIsEnumerable.call(from, symbols[i])) {
    					to[symbols[i]] = from[symbols[i]];
    				}
    			}
    		}
    	}

    	return to;
    };

    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */

    var ReactPropTypesSecret$3 = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

    var ReactPropTypesSecret_1 = ReactPropTypesSecret$3;

    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */

    var printWarning$1 = function() {};

    if (process.env.NODE_ENV !== 'production') {
      var ReactPropTypesSecret$2 = ReactPropTypesSecret_1;
      var loggedTypeFailures = {};
      var has$9 = Function.call.bind(Object.prototype.hasOwnProperty);

      printWarning$1 = function(text) {
        var message = 'Warning: ' + text;
        if (typeof console !== 'undefined') {
          console.error(message);
        }
        try {
          // --- Welcome to debugging React ---
          // This error was thrown as a convenience so that you can use this stack
          // to find the callsite that caused this warning to fire.
          throw new Error(message);
        } catch (x) {}
      };
    }

    /**
     * Assert that the values match with the type specs.
     * Error messages are memorized and will only be shown once.
     *
     * @param {object} typeSpecs Map of name to a ReactPropType
     * @param {object} values Runtime values that need to be type-checked
     * @param {string} location e.g. "prop", "context", "child context"
     * @param {string} componentName Name of the component for error messages.
     * @param {?Function} getStack Returns the component stack.
     * @private
     */
    function checkPropTypes$1(typeSpecs, values, location, componentName, getStack) {
      if (process.env.NODE_ENV !== 'production') {
        for (var typeSpecName in typeSpecs) {
          if (has$9(typeSpecs, typeSpecName)) {
            var error;
            // Prop type validation may throw. In case they do, we don't want to
            // fail the render phase where it didn't fail before. So we log it.
            // After these have been cleaned up, we'll let them throw.
            try {
              // This is intentionally an invariant that gets caught. It's the same
              // behavior as without this statement except with a better message.
              if (typeof typeSpecs[typeSpecName] !== 'function') {
                var err = Error(
                  (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +
                  'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.'
                );
                err.name = 'Invariant Violation';
                throw err;
              }
              error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret$2);
            } catch (ex) {
              error = ex;
            }
            if (error && !(error instanceof Error)) {
              printWarning$1(
                (componentName || 'React class') + ': type specification of ' +
                location + ' `' + typeSpecName + '` is invalid; the type checker ' +
                'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +
                'You may have forgotten to pass an argument to the type checker ' +
                'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
                'shape all require an argument).'
              );
            }
            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
              // Only monitor this failure once because there tends to be a lot of the
              // same error.
              loggedTypeFailures[error.message] = true;

              var stack = getStack ? getStack() : '';

              printWarning$1(
                'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')
              );
            }
          }
        }
      }
    }

    /**
     * Resets warning cache when testing.
     *
     * @private
     */
    checkPropTypes$1.resetWarningCache = function() {
      if (process.env.NODE_ENV !== 'production') {
        loggedTypeFailures = {};
      }
    };

    var checkPropTypes_1 = checkPropTypes$1;

    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */

    var ReactIs$1 = reactIs$3.exports;
    var assign = objectAssign;

    var ReactPropTypesSecret$1 = ReactPropTypesSecret_1;
    var checkPropTypes = checkPropTypes_1;

    var has$8 = Function.call.bind(Object.prototype.hasOwnProperty);
    var printWarning = function() {};

    if (process.env.NODE_ENV !== 'production') {
      printWarning = function(text) {
        var message = 'Warning: ' + text;
        if (typeof console !== 'undefined') {
          console.error(message);
        }
        try {
          // --- Welcome to debugging React ---
          // This error was thrown as a convenience so that you can use this stack
          // to find the callsite that caused this warning to fire.
          throw new Error(message);
        } catch (x) {}
      };
    }

    function emptyFunctionThatReturnsNull() {
      return null;
    }

    var factoryWithTypeCheckers = function(isValidElement, throwOnDirectAccess) {
      /* global Symbol */
      var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

      /**
       * Returns the iterator method function contained on the iterable object.
       *
       * Be sure to invoke the function with the iterable as context:
       *
       *     var iteratorFn = getIteratorFn(myIterable);
       *     if (iteratorFn) {
       *       var iterator = iteratorFn.call(myIterable);
       *       ...
       *     }
       *
       * @param {?object} maybeIterable
       * @return {?function}
       */
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === 'function') {
          return iteratorFn;
        }
      }

      /**
       * Collection of methods that allow declaration and validation of props that are
       * supplied to React components. Example usage:
       *
       *   var Props = require('ReactPropTypes');
       *   var MyArticle = React.createClass({
       *     propTypes: {
       *       // An optional string prop named "description".
       *       description: Props.string,
       *
       *       // A required enum prop named "category".
       *       category: Props.oneOf(['News','Photos']).isRequired,
       *
       *       // A prop named "dialog" that requires an instance of Dialog.
       *       dialog: Props.instanceOf(Dialog).isRequired
       *     },
       *     render: function() { ... }
       *   });
       *
       * A more formal specification of how these methods are used:
       *
       *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
       *   decl := ReactPropTypes.{type}(.isRequired)?
       *
       * Each and every declaration produces a function with the same signature. This
       * allows the creation of custom validation functions. For example:
       *
       *  var MyLink = React.createClass({
       *    propTypes: {
       *      // An optional string or URI prop named "href".
       *      href: function(props, propName, componentName) {
       *        var propValue = props[propName];
       *        if (propValue != null && typeof propValue !== 'string' &&
       *            !(propValue instanceof URI)) {
       *          return new Error(
       *            'Expected a string or an URI for ' + propName + ' in ' +
       *            componentName
       *          );
       *        }
       *      }
       *    },
       *    render: function() {...}
       *  });
       *
       * @internal
       */

      var ANONYMOUS = '<<anonymous>>';

      // Important!
      // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
      var ReactPropTypes = {
        array: createPrimitiveTypeChecker('array'),
        bool: createPrimitiveTypeChecker('boolean'),
        func: createPrimitiveTypeChecker('function'),
        number: createPrimitiveTypeChecker('number'),
        object: createPrimitiveTypeChecker('object'),
        string: createPrimitiveTypeChecker('string'),
        symbol: createPrimitiveTypeChecker('symbol'),

        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker,
      };

      /**
       * inlined Object.is polyfill to avoid requiring consumers ship their own
       * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
       */
      /*eslint-disable no-self-compare*/
      function is(x, y) {
        // SameValue algorithm
        if (x === y) {
          // Steps 1-5, 7-10
          // Steps 6.b-6.e: +0 != -0
          return x !== 0 || 1 / x === 1 / y;
        } else {
          // Step 6.a: NaN == NaN
          return x !== x && y !== y;
        }
      }
      /*eslint-enable no-self-compare*/

      /**
       * We use an Error-like object for backward compatibility as people may call
       * PropTypes directly and inspect their output. However, we don't use real
       * Errors anymore. We don't inspect their stack anyway, and creating them
       * is prohibitively expensive if they are created too often, such as what
       * happens in oneOfType() for any type before the one that matched.
       */
      function PropTypeError(message) {
        this.message = message;
        this.stack = '';
      }
      // Make `instanceof Error` still work for returned errors.
      PropTypeError.prototype = Error.prototype;

      function createChainableTypeChecker(validate) {
        if (process.env.NODE_ENV !== 'production') {
          var manualPropTypeCallCache = {};
          var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
          componentName = componentName || ANONYMOUS;
          propFullName = propFullName || propName;

          if (secret !== ReactPropTypesSecret$1) {
            if (throwOnDirectAccess) {
              // New behavior only for users of `prop-types` package
              var err = new Error(
                'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
                'Use `PropTypes.checkPropTypes()` to call them. ' +
                'Read more at http://fb.me/use-check-prop-types'
              );
              err.name = 'Invariant Violation';
              throw err;
            } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {
              // Old behavior for people using React.PropTypes
              var cacheKey = componentName + ':' + propName;
              if (
                !manualPropTypeCallCache[cacheKey] &&
                // Avoid spamming the console because they are often not actionable except for lib authors
                manualPropTypeWarningCount < 3
              ) {
                printWarning(
                  'You are manually calling a React.PropTypes validation ' +
                  'function for the `' + propFullName + '` prop on `' + componentName  + '`. This is deprecated ' +
                  'and will throw in the standalone `prop-types` package. ' +
                  'You may be seeing this warning due to a third-party PropTypes ' +
                  'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'
                );
                manualPropTypeCallCache[cacheKey] = true;
                manualPropTypeWarningCount++;
              }
            }
          }
          if (props[propName] == null) {
            if (isRequired) {
              if (props[propName] === null) {
                return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
              }
              return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
            }
            return null;
          } else {
            return validate(props, propName, componentName, location, propFullName);
          }
        }

        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);

        return chainedCheckType;
      }

      function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== expectedType) {
            // `propValue` being instance of, say, date/regexp, pass the 'object'
            // check, but we can offer a more precise error message here rather than
            // 'of type `object`'.
            var preciseType = getPreciseType(propValue);

            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }

      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }

      function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== 'function') {
            return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
          }
          var propValue = props[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
          }
          for (var i = 0; i < propValue.length; i++) {
            var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret$1);
            if (error instanceof Error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }

      function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!isValidElement(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }

      function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!ReactIs$1.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }

      function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
          if (!(props[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS;
            var actualClassName = getClassName(props[propName]);
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }

      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          if (process.env.NODE_ENV !== 'production') {
            if (arguments.length > 1) {
              printWarning(
                'Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' +
                'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).'
              );
            } else {
              printWarning('Invalid argument supplied to oneOf, expected an array.');
            }
          }
          return emptyFunctionThatReturnsNull;
        }

        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          for (var i = 0; i < expectedValues.length; i++) {
            if (is(propValue, expectedValues[i])) {
              return null;
            }
          }

          var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
            var type = getPreciseType(value);
            if (type === 'symbol') {
              return String(value);
            }
            return value;
          });
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
        }
        return createChainableTypeChecker(validate);
      }

      function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== 'function') {
            return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
          }
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== 'object') {
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
          }
          for (var key in propValue) {
            if (has$8(propValue, key)) {
              var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret$1);
              if (error instanceof Error) {
                return error;
              }
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }

      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
          process.env.NODE_ENV !== 'production' ? printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
          return emptyFunctionThatReturnsNull;
        }

        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
          var checker = arrayOfTypeCheckers[i];
          if (typeof checker !== 'function') {
            printWarning(
              'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
              'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'
            );
            return emptyFunctionThatReturnsNull;
          }
        }

        function validate(props, propName, componentName, location, propFullName) {
          for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
            var checker = arrayOfTypeCheckers[i];
            if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret$1) == null) {
              return null;
            }
          }

          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
        }
        return createChainableTypeChecker(validate);
      }

      function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          if (!isNode(props[propName])) {
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }

      function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== 'object') {
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
          }
          for (var key in shapeTypes) {
            var checker = shapeTypes[key];
            if (!checker) {
              continue;
            }
            var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret$1);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }

      function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== 'object') {
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
          }
          // We need to check all keys in case some are required but missing from
          // props.
          var allKeys = assign({}, props[propName], shapeTypes);
          for (var key in allKeys) {
            var checker = shapeTypes[key];
            if (!checker) {
              return new PropTypeError(
                'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
                '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
                '\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')
              );
            }
            var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret$1);
            if (error) {
              return error;
            }
          }
          return null;
        }

        return createChainableTypeChecker(validate);
      }

      function isNode(propValue) {
        switch (typeof propValue) {
          case 'number':
          case 'string':
          case 'undefined':
            return true;
          case 'boolean':
            return !propValue;
          case 'object':
            if (Array.isArray(propValue)) {
              return propValue.every(isNode);
            }
            if (propValue === null || isValidElement(propValue)) {
              return true;
            }

            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue);
              var step;
              if (iteratorFn !== propValue.entries) {
                while (!(step = iterator.next()).done) {
                  if (!isNode(step.value)) {
                    return false;
                  }
                }
              } else {
                // Iterator will provide entry [k,v] tuples rather than values.
                while (!(step = iterator.next()).done) {
                  var entry = step.value;
                  if (entry) {
                    if (!isNode(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }

            return true;
          default:
            return false;
        }
      }

      function isSymbol(propType, propValue) {
        // Native Symbol.
        if (propType === 'symbol') {
          return true;
        }

        // falsy value can't be a Symbol
        if (!propValue) {
          return false;
        }

        // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
        if (propValue['@@toStringTag'] === 'Symbol') {
          return true;
        }

        // Fallback for non-spec compliant Symbols which are polyfilled.
        if (typeof Symbol === 'function' && propValue instanceof Symbol) {
          return true;
        }

        return false;
      }

      // Equivalent of `typeof` but with special handling for array and regexp.
      function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
          return 'array';
        }
        if (propValue instanceof RegExp) {
          // Old webkits (at least until Android 4.0) return 'function' rather than
          // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
          // passes PropTypes.object.
          return 'object';
        }
        if (isSymbol(propType, propValue)) {
          return 'symbol';
        }
        return propType;
      }

      // This handles more types than `getPropType`. Only used for error messages.
      // See `createPrimitiveTypeChecker`.
      function getPreciseType(propValue) {
        if (typeof propValue === 'undefined' || propValue === null) {
          return '' + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === 'object') {
          if (propValue instanceof Date) {
            return 'date';
          } else if (propValue instanceof RegExp) {
            return 'regexp';
          }
        }
        return propType;
      }

      // Returns a string that is postfixed to a warning about an invalid type.
      // For example, "undefined" or "of type array"
      function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch (type) {
          case 'array':
          case 'object':
            return 'an ' + type;
          case 'boolean':
          case 'date':
          case 'regexp':
            return 'a ' + type;
          default:
            return type;
        }
      }

      // Returns class name of the object, if any.
      function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }
        return propValue.constructor.name;
      }

      ReactPropTypes.checkPropTypes = checkPropTypes;
      ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
      ReactPropTypes.PropTypes = ReactPropTypes;

      return ReactPropTypes;
    };

    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */

    var ReactPropTypesSecret = ReactPropTypesSecret_1;

    function emptyFunction() {}
    function emptyFunctionWithReset() {}
    emptyFunctionWithReset.resetWarningCache = emptyFunction;

    var factoryWithThrowingShims = function() {
      function shim(props, propName, componentName, location, propFullName, secret) {
        if (secret === ReactPropTypesSecret) {
          // It is still safe when called from React.
          return;
        }
        var err = new Error(
          'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
          'Use PropTypes.checkPropTypes() to call them. ' +
          'Read more at http://fb.me/use-check-prop-types'
        );
        err.name = 'Invariant Violation';
        throw err;
      }  shim.isRequired = shim;
      function getShim() {
        return shim;
      }  // Important!
      // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
      var ReactPropTypes = {
        array: shim,
        bool: shim,
        func: shim,
        number: shim,
        object: shim,
        string: shim,
        symbol: shim,

        any: shim,
        arrayOf: getShim,
        element: shim,
        elementType: shim,
        instanceOf: getShim,
        node: shim,
        objectOf: getShim,
        oneOf: getShim,
        oneOfType: getShim,
        shape: getShim,
        exact: getShim,

        checkPropTypes: emptyFunctionWithReset,
        resetWarningCache: emptyFunction
      };

      ReactPropTypes.PropTypes = ReactPropTypes;

      return ReactPropTypes;
    };

    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */

    if (process.env.NODE_ENV !== 'production') {
      var ReactIs = reactIs$3.exports;

      // By explicitly using `prop-types` you are opting into new development behavior.
      // http://fb.me/prop-types-in-prod
      var throwOnDirectAccess = true;
      propTypes.exports = factoryWithTypeCheckers(ReactIs.isElement, throwOnDirectAccess);
    } else {
      // By explicitly using `prop-types` you are opting into new production behavior.
      // http://fb.me/prop-types-in-prod
      propTypes.exports = factoryWithThrowingShims();
    }

    var re = propTypes.exports;

    function isClassComponent$1(elementType) {
      // elementType.prototype?.isReactComponent
      var _elementType$prototyp = elementType.prototype,
          prototype = _elementType$prototyp === void 0 ? {} : _elementType$prototyp;
      return Boolean(prototype.isReactComponent);
    }

    function acceptingRef(props, propName, componentName, location, propFullName) {
      var element = props[propName];
      var safePropName = propFullName || propName;

      if (element == null) {
        return null;
      }

      var warningHint;
      var elementType = element.type;
      /**
       * Blacklisting instead of whitelisting
       *
       * Blacklisting will miss some components, such as React.Fragment. Those will at least
       * trigger a warning in React.
       * We can't whitelist because there is no safe way to detect React.forwardRef
       * or class components. "Safe" means there's no public API.
       *
       */

      if (typeof elementType === 'function' && !isClassComponent$1(elementType)) {
        warningHint = 'Did you accidentally use a plain function component for an element instead?';
      }

      if (warningHint !== undefined) {
        return new Error("Invalid ".concat(location, " `").concat(safePropName, "` supplied to `").concat(componentName, "`. ") + "Expected an element that can hold a ref. ".concat(warningHint, " ") + 'For more information see https://material-ui.com/r/caveat-with-refs-guide');
      }

      return null;
    }

    var elementAcceptingRef = chainPropTypes$1(re.element, acceptingRef);
    elementAcceptingRef.isRequired = chainPropTypes$1(re.element.isRequired, acceptingRef);
    var elementAcceptingRef$1 = elementAcceptingRef;

    function isClassComponent(elementType) {
      // elementType.prototype?.isReactComponent
      var _elementType$prototyp = elementType.prototype,
          prototype = _elementType$prototyp === void 0 ? {} : _elementType$prototyp;
      return Boolean(prototype.isReactComponent);
    }

    function elementTypeAcceptingRef(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var safePropName = propFullName || propName;

      if (propValue == null) {
        return null;
      }

      var warningHint;
      /**
       * Blacklisting instead of whitelisting
       *
       * Blacklisting will miss some components, such as React.Fragment. Those will at least
       * trigger a warning in React.
       * We can't whitelist because there is no safe way to detect React.forwardRef
       * or class components. "Safe" means there's no public API.
       *
       */

      if (typeof propValue === 'function' && !isClassComponent(propValue)) {
        warningHint = 'Did you accidentally provide a plain function component instead?';
      }

      if (warningHint !== undefined) {
        return new Error("Invalid ".concat(location, " `").concat(safePropName, "` supplied to `").concat(componentName, "`. ") + "Expected an element type that can hold a ref. ".concat(warningHint, " ") + 'For more information see https://material-ui.com/r/caveat-with-refs-guide');
      }

      return null;
    }

    var elementTypeAcceptingRef$1 = chainPropTypes$1(propTypes.exports.elementType, elementTypeAcceptingRef);

    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }

      return obj;
    }

    // This module is based on https://github.com/airbnb/prop-types-exact repository.
    // However, in order to reduce the number of dependencies and to remove some extra safe checks
    // the module was forked.
    // Only exported for test purposes.
    var specialProperty = "exact-prop: \u200B";
    function exactProp(propTypes) {
      if (process.env.NODE_ENV === 'production') {
        return propTypes;
      }

      return _extends$3({}, propTypes, _defineProperty({}, specialProperty, function (props) {
        var unsupportedProps = Object.keys(props).filter(function (prop) {
          return !propTypes.hasOwnProperty(prop);
        });

        if (unsupportedProps.length > 0) {
          return new Error("The following props are not supported: ".concat(unsupportedProps.map(function (prop) {
            return "`".concat(prop, "`");
          }).join(', '), ". Please remove them."));
        }

        return null;
      }));
    }

    /**
     * WARNING: Don't import this directly.
     * Use `MuiError` from `@material-ui/utils/macros/MuiError.macro` instead.
     * @param {number} code
     */
    function formatMuiErrorMessage(code) {
      // Apply babel-plugin-transform-template-literals in loose mode
      // loose mode is safe iff we're concatenating primitives
      // see https://babeljs.io/docs/en/babel-plugin-transform-template-literals#loose

      /* eslint-disable prefer-template */
      var url = 'https://material-ui.com/production-error/?code=' + code;

      for (var i = 1; i < arguments.length; i += 1) {
        // rest params over-transpile for this case
        // eslint-disable-next-line prefer-rest-params
        url += '&args[]=' + encodeURIComponent(arguments[i]);
      }

      return 'Minified Material-UI error #' + code + '; visit ' + url + ' for the full message.';
      /* eslint-enable prefer-template */
    }

    var reactIs$2 = {exports: {}};

    var reactIs_production_min$1 = {};

    /** @license React v17.0.2
     * react-is.production.min.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    var b$1=60103,c$1=60106,d$2=60107,e$1=60108,f$1=60114,g$1=60109,h$2=60110,k$2=60112,l$1=60113,m$1=60120,n$2=60115,p$1=60116,q$1=60121,r$2=60122,u=60117,v$2=60129,w$1=60131;
    if("function"===typeof Symbol&&Symbol.for){var x$2=Symbol.for;b$1=x$2("react.element");c$1=x$2("react.portal");d$2=x$2("react.fragment");e$1=x$2("react.strict_mode");f$1=x$2("react.profiler");g$1=x$2("react.provider");h$2=x$2("react.context");k$2=x$2("react.forward_ref");l$1=x$2("react.suspense");m$1=x$2("react.suspense_list");n$2=x$2("react.memo");p$1=x$2("react.lazy");q$1=x$2("react.block");r$2=x$2("react.server.block");u=x$2("react.fundamental");v$2=x$2("react.debug_trace_mode");w$1=x$2("react.legacy_hidden");}
    function y$1(a){if("object"===typeof a&&null!==a){var t=a.$$typeof;switch(t){case b$1:switch(a=a.type,a){case d$2:case f$1:case e$1:case l$1:case m$1:return a;default:switch(a=a&&a.$$typeof,a){case h$2:case k$2:case p$1:case n$2:case g$1:return a;default:return t}}case c$1:return t}}}var z$1=g$1,A$2=b$1,B=k$2,C=d$2,D=p$1,E$1=n$2,F=c$1,G=f$1,H$1=e$1,I=l$1;reactIs_production_min$1.ContextConsumer=h$2;reactIs_production_min$1.ContextProvider=z$1;reactIs_production_min$1.Element=A$2;reactIs_production_min$1.ForwardRef=B;reactIs_production_min$1.Fragment=C;reactIs_production_min$1.Lazy=D;reactIs_production_min$1.Memo=E$1;reactIs_production_min$1.Portal=F;reactIs_production_min$1.Profiler=G;reactIs_production_min$1.StrictMode=H$1;
    reactIs_production_min$1.Suspense=I;reactIs_production_min$1.isAsyncMode=function(){return !1};reactIs_production_min$1.isConcurrentMode=function(){return !1};reactIs_production_min$1.isContextConsumer=function(a){return y$1(a)===h$2};reactIs_production_min$1.isContextProvider=function(a){return y$1(a)===g$1};reactIs_production_min$1.isElement=function(a){return "object"===typeof a&&null!==a&&a.$$typeof===b$1};reactIs_production_min$1.isForwardRef=function(a){return y$1(a)===k$2};reactIs_production_min$1.isFragment=function(a){return y$1(a)===d$2};reactIs_production_min$1.isLazy=function(a){return y$1(a)===p$1};reactIs_production_min$1.isMemo=function(a){return y$1(a)===n$2};
    reactIs_production_min$1.isPortal=function(a){return y$1(a)===c$1};reactIs_production_min$1.isProfiler=function(a){return y$1(a)===f$1};reactIs_production_min$1.isStrictMode=function(a){return y$1(a)===e$1};reactIs_production_min$1.isSuspense=function(a){return y$1(a)===l$1};reactIs_production_min$1.isValidElementType=function(a){return "string"===typeof a||"function"===typeof a||a===d$2||a===f$1||a===v$2||a===e$1||a===l$1||a===m$1||a===w$1||"object"===typeof a&&null!==a&&(a.$$typeof===p$1||a.$$typeof===n$2||a.$$typeof===g$1||a.$$typeof===h$2||a.$$typeof===k$2||a.$$typeof===u||a.$$typeof===q$1||a[0]===r$2)?!0:!1};
    reactIs_production_min$1.typeOf=y$1;

    var reactIs_development$1 = {};

    /** @license React v17.0.2
     * react-is.development.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */

    if (process.env.NODE_ENV !== "production") {
      (function() {

    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var REACT_ELEMENT_TYPE = 0xeac7;
    var REACT_PORTAL_TYPE = 0xeaca;
    var REACT_FRAGMENT_TYPE = 0xeacb;
    var REACT_STRICT_MODE_TYPE = 0xeacc;
    var REACT_PROFILER_TYPE = 0xead2;
    var REACT_PROVIDER_TYPE = 0xeacd;
    var REACT_CONTEXT_TYPE = 0xeace;
    var REACT_FORWARD_REF_TYPE = 0xead0;
    var REACT_SUSPENSE_TYPE = 0xead1;
    var REACT_SUSPENSE_LIST_TYPE = 0xead8;
    var REACT_MEMO_TYPE = 0xead3;
    var REACT_LAZY_TYPE = 0xead4;
    var REACT_BLOCK_TYPE = 0xead9;
    var REACT_SERVER_BLOCK_TYPE = 0xeada;
    var REACT_FUNDAMENTAL_TYPE = 0xead5;
    var REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;
    var REACT_LEGACY_HIDDEN_TYPE = 0xeae3;

    if (typeof Symbol === 'function' && Symbol.for) {
      var symbolFor = Symbol.for;
      REACT_ELEMENT_TYPE = symbolFor('react.element');
      REACT_PORTAL_TYPE = symbolFor('react.portal');
      REACT_FRAGMENT_TYPE = symbolFor('react.fragment');
      REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');
      REACT_PROFILER_TYPE = symbolFor('react.profiler');
      REACT_PROVIDER_TYPE = symbolFor('react.provider');
      REACT_CONTEXT_TYPE = symbolFor('react.context');
      REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
      REACT_SUSPENSE_TYPE = symbolFor('react.suspense');
      REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
      REACT_MEMO_TYPE = symbolFor('react.memo');
      REACT_LAZY_TYPE = symbolFor('react.lazy');
      REACT_BLOCK_TYPE = symbolFor('react.block');
      REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
      REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
      symbolFor('react.scope');
      symbolFor('react.opaque.id');
      REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
      symbolFor('react.offscreen');
      REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
    }

    // Filter certain DOM attributes (e.g. src, href) if their values are empty strings.

    var enableScopeAPI = false; // Experimental Create Event Handle API.

    function isValidElementType(type) {
      if (typeof type === 'string' || typeof type === 'function') {
        return true;
      } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).


      if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || type === REACT_DEBUG_TRACING_MODE_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI ) {
        return true;
      }

      if (typeof type === 'object' && type !== null) {
        if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
          return true;
        }
      }

      return false;
    }

    function typeOf(object) {
      if (typeof object === 'object' && object !== null) {
        var $$typeof = object.$$typeof;

        switch ($$typeof) {
          case REACT_ELEMENT_TYPE:
            var type = object.type;

            switch (type) {
              case REACT_FRAGMENT_TYPE:
              case REACT_PROFILER_TYPE:
              case REACT_STRICT_MODE_TYPE:
              case REACT_SUSPENSE_TYPE:
              case REACT_SUSPENSE_LIST_TYPE:
                return type;

              default:
                var $$typeofType = type && type.$$typeof;

                switch ($$typeofType) {
                  case REACT_CONTEXT_TYPE:
                  case REACT_FORWARD_REF_TYPE:
                  case REACT_LAZY_TYPE:
                  case REACT_MEMO_TYPE:
                  case REACT_PROVIDER_TYPE:
                    return $$typeofType;

                  default:
                    return $$typeof;
                }

            }

          case REACT_PORTAL_TYPE:
            return $$typeof;
        }
      }

      return undefined;
    }
    var ContextConsumer = REACT_CONTEXT_TYPE;
    var ContextProvider = REACT_PROVIDER_TYPE;
    var Element = REACT_ELEMENT_TYPE;
    var ForwardRef = REACT_FORWARD_REF_TYPE;
    var Fragment = REACT_FRAGMENT_TYPE;
    var Lazy = REACT_LAZY_TYPE;
    var Memo = REACT_MEMO_TYPE;
    var Portal = REACT_PORTAL_TYPE;
    var Profiler = REACT_PROFILER_TYPE;
    var StrictMode = REACT_STRICT_MODE_TYPE;
    var Suspense = REACT_SUSPENSE_TYPE;
    var hasWarnedAboutDeprecatedIsAsyncMode = false;
    var hasWarnedAboutDeprecatedIsConcurrentMode = false; // AsyncMode should be deprecated

    function isAsyncMode(object) {
      {
        if (!hasWarnedAboutDeprecatedIsAsyncMode) {
          hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

          console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 18+.');
        }
      }

      return false;
    }
    function isConcurrentMode(object) {
      {
        if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
          hasWarnedAboutDeprecatedIsConcurrentMode = true; // Using console['warn'] to evade Babel and ESLint

          console['warn']('The ReactIs.isConcurrentMode() alias has been deprecated, ' + 'and will be removed in React 18+.');
        }
      }

      return false;
    }
    function isContextConsumer(object) {
      return typeOf(object) === REACT_CONTEXT_TYPE;
    }
    function isContextProvider(object) {
      return typeOf(object) === REACT_PROVIDER_TYPE;
    }
    function isElement(object) {
      return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    function isForwardRef(object) {
      return typeOf(object) === REACT_FORWARD_REF_TYPE;
    }
    function isFragment(object) {
      return typeOf(object) === REACT_FRAGMENT_TYPE;
    }
    function isLazy(object) {
      return typeOf(object) === REACT_LAZY_TYPE;
    }
    function isMemo(object) {
      return typeOf(object) === REACT_MEMO_TYPE;
    }
    function isPortal(object) {
      return typeOf(object) === REACT_PORTAL_TYPE;
    }
    function isProfiler(object) {
      return typeOf(object) === REACT_PROFILER_TYPE;
    }
    function isStrictMode(object) {
      return typeOf(object) === REACT_STRICT_MODE_TYPE;
    }
    function isSuspense(object) {
      return typeOf(object) === REACT_SUSPENSE_TYPE;
    }

    reactIs_development$1.ContextConsumer = ContextConsumer;
    reactIs_development$1.ContextProvider = ContextProvider;
    reactIs_development$1.Element = Element;
    reactIs_development$1.ForwardRef = ForwardRef;
    reactIs_development$1.Fragment = Fragment;
    reactIs_development$1.Lazy = Lazy;
    reactIs_development$1.Memo = Memo;
    reactIs_development$1.Portal = Portal;
    reactIs_development$1.Profiler = Profiler;
    reactIs_development$1.StrictMode = StrictMode;
    reactIs_development$1.Suspense = Suspense;
    reactIs_development$1.isAsyncMode = isAsyncMode;
    reactIs_development$1.isConcurrentMode = isConcurrentMode;
    reactIs_development$1.isContextConsumer = isContextConsumer;
    reactIs_development$1.isContextProvider = isContextProvider;
    reactIs_development$1.isElement = isElement;
    reactIs_development$1.isForwardRef = isForwardRef;
    reactIs_development$1.isFragment = isFragment;
    reactIs_development$1.isLazy = isLazy;
    reactIs_development$1.isMemo = isMemo;
    reactIs_development$1.isPortal = isPortal;
    reactIs_development$1.isProfiler = isProfiler;
    reactIs_development$1.isStrictMode = isStrictMode;
    reactIs_development$1.isSuspense = isSuspense;
    reactIs_development$1.isValidElementType = isValidElementType;
    reactIs_development$1.typeOf = typeOf;
      })();
    }

    if (process.env.NODE_ENV === 'production') {
      reactIs$2.exports = reactIs_production_min$1;
    } else {
      reactIs$2.exports = reactIs_development$1;
    }

    // https://github.com/JamesMGreene/Function.name/blob/58b314d4a983110c3682f1228f845d39ccca1817/Function.name.js#L3

    var fnNameMatchRegex = /^\s*function(?:\s|\s*\/\*.*\*\/\s*)+([^(\s/]*)\s*/;
    function getFunctionName(fn) {
      var match = "".concat(fn).match(fnNameMatchRegex);
      var name = match && match[1];
      return name || '';
    }
    /**
     * @param {function} Component
     * @param {string} fallback
     * @returns {string | undefined}
     */

    function getFunctionComponentName(Component) {
      var fallback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      return Component.displayName || Component.name || getFunctionName(Component) || fallback;
    }

    function getWrappedName(outerType, innerType, wrapperName) {
      var functionName = getFunctionComponentName(innerType);
      return outerType.displayName || (functionName !== '' ? "".concat(wrapperName, "(").concat(functionName, ")") : wrapperName);
    }
    /**
     * cherry-pick from
     * https://github.com/facebook/react/blob/769b1f270e1251d9dbdce0fcbd9e92e502d059b8/packages/shared/getComponentName.js
     * originally forked from recompose/getDisplayName with added IE 11 support
     *
     * @param {React.ReactType} Component
     * @returns {string | undefined}
     */


    function getDisplayName(Component) {
      if (Component == null) {
        return undefined;
      }

      if (typeof Component === 'string') {
        return Component;
      }

      if (typeof Component === 'function') {
        return getFunctionComponentName(Component, 'Component');
      }

      if (_typeof$g(Component) === 'object') {
        switch (Component.$$typeof) {
          case reactIs$2.exports.ForwardRef:
            return getWrappedName(Component, Component.render, 'ForwardRef');

          case reactIs$2.exports.Memo:
            return getWrappedName(Component, Component.type, 'memo');

          default:
            return undefined;
        }
      }

      return undefined;
    }

    function HTMLElementType(props, propName, componentName, location, propFullName) {
      if (process.env.NODE_ENV === 'production') {
        return null;
      }

      var propValue = props[propName];
      var safePropName = propFullName || propName;

      if (propValue == null) {
        return null;
      }

      if (propValue && propValue.nodeType !== 1) {
        return new Error("Invalid ".concat(location, " `").concat(safePropName, "` supplied to `").concat(componentName, "`. ") + "Expected an HTMLElement.");
      }

      return null;
    }

    var refType = re.oneOfType([re.func, re.object]);
    var refType$1 = refType;

    /* eslint-disable no-use-before-define */

    /**
     * Returns a number whose value is limited to the given range.
     *
     * @param {number} value The value to be clamped
     * @param {number} min The lower boundary of the output range
     * @param {number} max The upper boundary of the output range
     * @returns {number} A number in the range [min, max]
     */
    function clamp$5(value) {
      var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;

      if (process.env.NODE_ENV !== 'production') {
        if (value < min || value > max) {
          console.error("Material-UI: The value provided ".concat(value, " is out of range [").concat(min, ", ").concat(max, "]."));
        }
      }

      return Math.min(Math.max(min, value), max);
    }
    /**
     * Converts a color from CSS hex format to CSS rgb format.
     *
     * @param {string} color - Hex color, i.e. #nnn or #nnnnnn
     * @returns {string} A CSS rgb color string
     */


    function hexToRgb(color) {
      color = color.substr(1);
      var re = new RegExp(".{1,".concat(color.length >= 6 ? 2 : 1, "}"), 'g');
      var colors = color.match(re);

      if (colors && colors[0].length === 1) {
        colors = colors.map(function (n) {
          return n + n;
        });
      }

      return colors ? "rgb".concat(colors.length === 4 ? 'a' : '', "(").concat(colors.map(function (n, index) {
        return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1000) / 1000;
      }).join(', '), ")") : '';
    }

    function intToHex(int) {
      var hex = int.toString(16);
      return hex.length === 1 ? "0".concat(hex) : hex;
    }
    /**
     * Converts a color from CSS rgb format to CSS hex format.
     *
     * @param {string} color - RGB color, i.e. rgb(n, n, n)
     * @returns {string} A CSS rgb color string, i.e. #nnnnnn
     */


    function rgbToHex(color) {
      // Idempotent
      if (color.indexOf('#') === 0) {
        return color;
      }

      var _decomposeColor = decomposeColor(color),
          values = _decomposeColor.values;

      return "#".concat(values.map(function (n) {
        return intToHex(n);
      }).join(''));
    }
    /**
     * Converts a color from hsl format to rgb format.
     *
     * @param {string} color - HSL color values
     * @returns {string} rgb color values
     */

    function hslToRgb(color) {
      color = decomposeColor(color);
      var _color = color,
          values = _color.values;
      var h = values[0];
      var s = values[1] / 100;
      var l = values[2] / 100;
      var a = s * Math.min(l, 1 - l);

      var f = function f(n) {
        var k = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (n + h / 30) % 12;
        return l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
      };

      var type = 'rgb';
      var rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];

      if (color.type === 'hsla') {
        type += 'a';
        rgb.push(values[3]);
      }

      return recomposeColor({
        type: type,
        values: rgb
      });
    }
    /**
     * Returns an object with the type and values of a color.
     *
     * Note: Does not support rgb % values.
     *
     * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
     * @returns {object} - A MUI color object: {type: string, values: number[]}
     */

    function decomposeColor(color) {
      // Idempotent
      if (color.type) {
        return color;
      }

      if (color.charAt(0) === '#') {
        return decomposeColor(hexToRgb(color));
      }

      var marker = color.indexOf('(');
      var type = color.substring(0, marker);

      if (['rgb', 'rgba', 'hsl', 'hsla'].indexOf(type) === -1) {
        throw new Error(process.env.NODE_ENV !== "production" ? "Material-UI: Unsupported `".concat(color, "` color.\nWe support the following formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla().") : formatMuiErrorMessage(3, color));
      }

      var values = color.substring(marker + 1, color.length - 1).split(',');
      values = values.map(function (value) {
        return parseFloat(value);
      });
      return {
        type: type,
        values: values
      };
    }
    /**
     * Converts a color object with type and values to a string.
     *
     * @param {object} color - Decomposed color
     * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla'
     * @param {array} color.values - [n,n,n] or [n,n,n,n]
     * @returns {string} A CSS color string
     */

    function recomposeColor(color) {
      var type = color.type;
      var values = color.values;

      if (type.indexOf('rgb') !== -1) {
        // Only convert the first 3 values to int (i.e. not alpha)
        values = values.map(function (n, i) {
          return i < 3 ? parseInt(n, 10) : n;
        });
      } else if (type.indexOf('hsl') !== -1) {
        values[1] = "".concat(values[1], "%");
        values[2] = "".concat(values[2], "%");
      }

      return "".concat(type, "(").concat(values.join(', '), ")");
    }
    /**
     * Calculates the contrast ratio between two colors.
     *
     * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
     *
     * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
     * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
     * @returns {number} A contrast ratio value in the range 0 - 21.
     */

    function getContrastRatio(foreground, background) {
      var lumA = getLuminance(foreground);
      var lumB = getLuminance(background);
      return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);
    }
    /**
     * The relative brightness of any point in a color space,
     * normalized to 0 for darkest black and 1 for lightest white.
     *
     * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
     *
     * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
     * @returns {number} The relative brightness of the color in the range 0 - 1
     */

    function getLuminance(color) {
      color = decomposeColor(color);
      var rgb = color.type === 'hsl' ? decomposeColor(hslToRgb(color)).values : color.values;
      rgb = rgb.map(function (val) {
        val /= 255; // normalized

        return val <= 0.03928 ? val / 12.92 : Math.pow((val + 0.055) / 1.055, 2.4);
      }); // Truncate at 3 digits

      return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));
    }
    /**
     * Darken or lighten a color, depending on its luminance.
     * Light colors are darkened, dark colors are lightened.
     *
     * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
     * @param {number} coefficient=0.15 - multiplier in the range 0 - 1
     * @returns {string} A CSS color string. Hex input values are returned as rgb
     */

    function emphasize(color) {
      var coefficient = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.15;
      return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);
    }
    var warnedOnce$c = false;
    /**
     * Set the absolute transparency of a color.
     * Any existing alpha values are overwritten.
     *
     * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
     * @param {number} value - value to set the alpha channel to in the range 0 -1
     * @returns {string} A CSS color string. Hex input values are returned as rgb
     *
     * @deprecated
     * Use `import { alpha } from '@material-ui/core/styles'` instead.
     */

    function fade(color, value) {
      if (process.env.NODE_ENV !== 'production') {
        if (!warnedOnce$c) {
          warnedOnce$c = true;
          console.error(['Material-UI: The `fade` color utility was renamed to `alpha` to better describe its functionality.', '', "You should use `import { alpha } from '@material-ui/core/styles'`"].join('\n'));
        }
      }

      return alpha(color, value);
    }
    /**
     * Set the absolute transparency of a color.
     * Any existing alpha value is overwritten.
     *
     * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
     * @param {number} value - value to set the alpha channel to in the range 0-1
     * @returns {string} A CSS color string. Hex input values are returned as rgb
     */

    function alpha(color, value) {
      color = decomposeColor(color);
      value = clamp$5(value);

      if (color.type === 'rgb' || color.type === 'hsl') {
        color.type += 'a';
      }

      color.values[3] = value;
      return recomposeColor(color);
    }
    /**
     * Darkens a color.
     *
     * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
     * @param {number} coefficient - multiplier in the range 0 - 1
     * @returns {string} A CSS color string. Hex input values are returned as rgb
     */

    function darken(color, coefficient) {
      color = decomposeColor(color);
      coefficient = clamp$5(coefficient);

      if (color.type.indexOf('hsl') !== -1) {
        color.values[2] *= 1 - coefficient;
      } else if (color.type.indexOf('rgb') !== -1) {
        for (var i = 0; i < 3; i += 1) {
          color.values[i] *= 1 - coefficient;
        }
      }

      return recomposeColor(color);
    }
    /**
     * Lightens a color.
     *
     * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
     * @param {number} coefficient - multiplier in the range 0 - 1
     * @returns {string} A CSS color string. Hex input values are returned as rgb
     */

    function lighten(color, coefficient) {
      color = decomposeColor(color);
      coefficient = clamp$5(coefficient);

      if (color.type.indexOf('hsl') !== -1) {
        color.values[2] += (100 - color.values[2]) * coefficient;
      } else if (color.type.indexOf('rgb') !== -1) {
        for (var i = 0; i < 3; i += 1) {
          color.values[i] += (255 - color.values[i]) * coefficient;
        }
      }

      return recomposeColor(color);
    }

    function _objectWithoutPropertiesLoose$1(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;

      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }

      return target;
    }

    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose$1(source, excluded);
      var key, i;

      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }

      return target;
    }

    // Sorted ASC by size. That's important.
    // It can't be configured as it's used statically for propTypes.
    var keys$1 = ['xs', 'sm', 'md', 'lg', 'xl']; // Keep in mind that @media is inclusive by the CSS specification.

    function createBreakpoints(breakpoints) {
      var _breakpoints$values = breakpoints.values,
          values = _breakpoints$values === void 0 ? {
        xs: 0,
        sm: 600,
        md: 960,
        lg: 1280,
        xl: 1920
      } : _breakpoints$values,
          _breakpoints$unit = breakpoints.unit,
          unit = _breakpoints$unit === void 0 ? 'px' : _breakpoints$unit,
          _breakpoints$step = breakpoints.step,
          step = _breakpoints$step === void 0 ? 5 : _breakpoints$step,
          other = _objectWithoutProperties(breakpoints, ["values", "unit", "step"]);

      function up(key) {
        var value = typeof values[key] === 'number' ? values[key] : key;
        return "@media (min-width:".concat(value).concat(unit, ")");
      }

      function down(key) {
        var endIndex = keys$1.indexOf(key) + 1;
        var upperbound = values[keys$1[endIndex]];

        if (endIndex === keys$1.length) {
          // xl down applies to all sizes
          return up('xs');
        }

        var value = typeof upperbound === 'number' && endIndex > 0 ? upperbound : key;
        return "@media (max-width:".concat(value - step / 100).concat(unit, ")");
      }

      function between(start, end) {
        var endIndex = keys$1.indexOf(end);

        if (endIndex === keys$1.length - 1) {
          return up(start);
        }

        return "@media (min-width:".concat(typeof values[start] === 'number' ? values[start] : start).concat(unit, ") and ") + "(max-width:".concat((endIndex !== -1 && typeof values[keys$1[endIndex + 1]] === 'number' ? values[keys$1[endIndex + 1]] : end) - step / 100).concat(unit, ")");
      }

      function only(key) {
        return between(key, key);
      }

      var warnedOnce = false;

      function width(key) {
        if (process.env.NODE_ENV !== 'production') {
          if (!warnedOnce) {
            warnedOnce = true;
            console.warn(["Material-UI: The `theme.breakpoints.width` utility is deprecated because it's redundant.", 'Use the `theme.breakpoints.values` instead.'].join('\n'));
          }
        }

        return values[key];
      }

      return _extends$3({
        keys: keys$1,
        values: values,
        up: up,
        down: down,
        between: between,
        only: only,
        width: width
      }, other);
    }

    function createMixins(breakpoints, spacing, mixins) {
      var _toolbar;

      return _extends$3({
        gutters: function gutters() {
          var styles = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          console.warn(['Material-UI: theme.mixins.gutters() is deprecated.', 'You can use the source of the mixin directly:', "\n      paddingLeft: theme.spacing(2),\n      paddingRight: theme.spacing(2),\n      [theme.breakpoints.up('sm')]: {\n        paddingLeft: theme.spacing(3),\n        paddingRight: theme.spacing(3),\n      },\n      "].join('\n'));
          return _extends$3({
            paddingLeft: spacing(2),
            paddingRight: spacing(2)
          }, styles, _defineProperty({}, breakpoints.up('sm'), _extends$3({
            paddingLeft: spacing(3),
            paddingRight: spacing(3)
          }, styles[breakpoints.up('sm')])));
        },
        toolbar: (_toolbar = {
          minHeight: 56
        }, _defineProperty(_toolbar, "".concat(breakpoints.up('xs'), " and (orientation: landscape)"), {
          minHeight: 48
        }), _defineProperty(_toolbar, breakpoints.up('sm'), {
          minHeight: 64
        }), _toolbar)
      }, mixins);
    }

    var light = {
      // The colors used to style the text.
      text: {
        // The most important text.
        primary: 'rgba(0, 0, 0, 0.87)',
        // Secondary text.
        secondary: 'rgba(0, 0, 0, 0.54)',
        // Disabled text have even lower visual prominence.
        disabled: 'rgba(0, 0, 0, 0.38)',
        // Text hints.
        hint: 'rgba(0, 0, 0, 0.38)'
      },
      // The color used to divide different elements.
      divider: 'rgba(0, 0, 0, 0.12)',
      // The background colors used to style the surfaces.
      // Consistency between these values is important.
      background: {
        paper: common$1.white,
        default: grey$1[50]
      },
      // The colors used to style the action elements.
      action: {
        // The color of an active action like an icon button.
        active: 'rgba(0, 0, 0, 0.54)',
        // The color of an hovered action.
        hover: 'rgba(0, 0, 0, 0.04)',
        hoverOpacity: 0.04,
        // The color of a selected action.
        selected: 'rgba(0, 0, 0, 0.08)',
        selectedOpacity: 0.08,
        // The color of a disabled action.
        disabled: 'rgba(0, 0, 0, 0.26)',
        // The background color of a disabled action.
        disabledBackground: 'rgba(0, 0, 0, 0.12)',
        disabledOpacity: 0.38,
        focus: 'rgba(0, 0, 0, 0.12)',
        focusOpacity: 0.12,
        activatedOpacity: 0.12
      }
    };
    var dark = {
      text: {
        primary: common$1.white,
        secondary: 'rgba(255, 255, 255, 0.7)',
        disabled: 'rgba(255, 255, 255, 0.5)',
        hint: 'rgba(255, 255, 255, 0.5)',
        icon: 'rgba(255, 255, 255, 0.5)'
      },
      divider: 'rgba(255, 255, 255, 0.12)',
      background: {
        paper: grey$1[800],
        default: '#303030'
      },
      action: {
        active: common$1.white,
        hover: 'rgba(255, 255, 255, 0.08)',
        hoverOpacity: 0.08,
        selected: 'rgba(255, 255, 255, 0.16)',
        selectedOpacity: 0.16,
        disabled: 'rgba(255, 255, 255, 0.3)',
        disabledBackground: 'rgba(255, 255, 255, 0.12)',
        disabledOpacity: 0.38,
        focus: 'rgba(255, 255, 255, 0.12)',
        focusOpacity: 0.12,
        activatedOpacity: 0.24
      }
    };

    function addLightOrDark(intent, direction, shade, tonalOffset) {
      var tonalOffsetLight = tonalOffset.light || tonalOffset;
      var tonalOffsetDark = tonalOffset.dark || tonalOffset * 1.5;

      if (!intent[direction]) {
        if (intent.hasOwnProperty(shade)) {
          intent[direction] = intent[shade];
        } else if (direction === 'light') {
          intent.light = lighten(intent.main, tonalOffsetLight);
        } else if (direction === 'dark') {
          intent.dark = darken(intent.main, tonalOffsetDark);
        }
      }
    }

    function createPalette(palette) {
      var _palette$primary = palette.primary,
          primary = _palette$primary === void 0 ? {
        light: indigo$1[300],
        main: indigo$1[500],
        dark: indigo$1[700]
      } : _palette$primary,
          _palette$secondary = palette.secondary,
          secondary = _palette$secondary === void 0 ? {
        light: pink$1.A200,
        main: pink$1.A400,
        dark: pink$1.A700
      } : _palette$secondary,
          _palette$error = palette.error,
          error = _palette$error === void 0 ? {
        light: red$1[300],
        main: red$1[500],
        dark: red$1[700]
      } : _palette$error,
          _palette$warning = palette.warning,
          warning = _palette$warning === void 0 ? {
        light: orange$1[300],
        main: orange$1[500],
        dark: orange$1[700]
      } : _palette$warning,
          _palette$info = palette.info,
          info = _palette$info === void 0 ? {
        light: blue$1[300],
        main: blue$1[500],
        dark: blue$1[700]
      } : _palette$info,
          _palette$success = palette.success,
          success = _palette$success === void 0 ? {
        light: green$1[300],
        main: green$1[500],
        dark: green$1[700]
      } : _palette$success,
          _palette$type = palette.type,
          type = _palette$type === void 0 ? 'light' : _palette$type,
          _palette$contrastThre = palette.contrastThreshold,
          contrastThreshold = _palette$contrastThre === void 0 ? 3 : _palette$contrastThre,
          _palette$tonalOffset = palette.tonalOffset,
          tonalOffset = _palette$tonalOffset === void 0 ? 0.2 : _palette$tonalOffset,
          other = _objectWithoutProperties(palette, ["primary", "secondary", "error", "warning", "info", "success", "type", "contrastThreshold", "tonalOffset"]); // Use the same logic as
      // Bootstrap: https://github.com/twbs/bootstrap/blob/1d6e3710dd447de1a200f29e8fa521f8a0908f70/scss/_functions.scss#L59
      // and material-components-web https://github.com/material-components/material-components-web/blob/ac46b8863c4dab9fc22c4c662dc6bd1b65dd652f/packages/mdc-theme/_functions.scss#L54


      function getContrastText(background) {
        var contrastText = getContrastRatio(background, dark.text.primary) >= contrastThreshold ? dark.text.primary : light.text.primary;

        if (process.env.NODE_ENV !== 'production') {
          var contrast = getContrastRatio(background, contrastText);

          if (contrast < 3) {
            console.error(["Material-UI: The contrast ratio of ".concat(contrast, ":1 for ").concat(contrastText, " on ").concat(background), 'falls below the WCAG recommended absolute minimum contrast ratio of 3:1.', 'https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast'].join('\n'));
          }
        }

        return contrastText;
      }

      var augmentColor = function augmentColor(color) {
        var mainShade = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 500;
        var lightShade = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 300;
        var darkShade = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 700;
        color = _extends$3({}, color);

        if (!color.main && color[mainShade]) {
          color.main = color[mainShade];
        }

        if (!color.main) {
          throw new Error(process.env.NODE_ENV !== "production" ? "Material-UI: The color provided to augmentColor(color) is invalid.\nThe color object needs to have a `main` property or a `".concat(mainShade, "` property.") : formatMuiErrorMessage(4, mainShade));
        }

        if (typeof color.main !== 'string') {
          throw new Error(process.env.NODE_ENV !== "production" ? "Material-UI: The color provided to augmentColor(color) is invalid.\n`color.main` should be a string, but `".concat(JSON.stringify(color.main), "` was provided instead.\n\nDid you intend to use one of the following approaches?\n\nimport {\xA0green } from \"@material-ui/core/colors\";\n\nconst theme1 = createTheme({ palette: {\n  primary: green,\n} });\n\nconst theme2 = createTheme({ palette: {\n  primary: { main: green[500] },\n} });") : formatMuiErrorMessage(5, JSON.stringify(color.main)));
        }

        addLightOrDark(color, 'light', lightShade, tonalOffset);
        addLightOrDark(color, 'dark', darkShade, tonalOffset);

        if (!color.contrastText) {
          color.contrastText = getContrastText(color.main);
        }

        return color;
      };

      var types = {
        dark: dark,
        light: light
      };

      if (process.env.NODE_ENV !== 'production') {
        if (!types[type]) {
          console.error("Material-UI: The palette type `".concat(type, "` is not supported."));
        }
      }

      var paletteOutput = deepmerge$1(_extends$3({
        // A collection of common colors.
        common: common$1,
        // The palette type, can be light or dark.
        type: type,
        // The colors used to represent primary interface elements for a user.
        primary: augmentColor(primary),
        // The colors used to represent secondary interface elements for a user.
        secondary: augmentColor(secondary, 'A400', 'A200', 'A700'),
        // The colors used to represent interface elements that the user should be made aware of.
        error: augmentColor(error),
        // The colors used to represent potentially dangerous actions or important messages.
        warning: augmentColor(warning),
        // The colors used to present information to the user that is neutral and not necessarily important.
        info: augmentColor(info),
        // The colors used to indicate the successful completion of an action that user triggered.
        success: augmentColor(success),
        // The grey colors.
        grey: grey$1,
        // Used by `getContrastText()` to maximize the contrast between
        // the background and the text.
        contrastThreshold: contrastThreshold,
        // Takes a background color and returns the text color that maximizes the contrast.
        getContrastText: getContrastText,
        // Generate a rich color object.
        augmentColor: augmentColor,
        // Used by the functions below to shift a color's luminance by approximately
        // two indexes within its tonal palette.
        // E.g., shift from Red 500 to Red 300 or Red 700.
        tonalOffset: tonalOffset
      }, types[type]), other);
      return paletteOutput;
    }

    function round$1(value) {
      return Math.round(value * 1e5) / 1e5;
    }

    var warnedOnce$b = false;

    function roundWithDeprecationWarning(value) {
      if (process.env.NODE_ENV !== 'production') {
        if (!warnedOnce$b) {
          console.warn(['Material-UI: The `theme.typography.round` helper is deprecated.', 'Head to https://material-ui.com/r/migration-v4/#theme for a migration path.'].join('\n'));
          warnedOnce$b = true;
        }
      }

      return round$1(value);
    }

    var caseAllCaps = {
      textTransform: 'uppercase'
    };
    var defaultFontFamily = '"Roboto", "Helvetica", "Arial", sans-serif';
    /**
     * @see @link{https://material.io/design/typography/the-type-system.html}
     * @see @link{https://material.io/design/typography/understanding-typography.html}
     */

    function createTypography(palette, typography) {
      var _ref = typeof typography === 'function' ? typography(palette) : typography,
          _ref$fontFamily = _ref.fontFamily,
          fontFamily = _ref$fontFamily === void 0 ? defaultFontFamily : _ref$fontFamily,
          _ref$fontSize = _ref.fontSize,
          fontSize = _ref$fontSize === void 0 ? 14 : _ref$fontSize,
          _ref$fontWeightLight = _ref.fontWeightLight,
          fontWeightLight = _ref$fontWeightLight === void 0 ? 300 : _ref$fontWeightLight,
          _ref$fontWeightRegula = _ref.fontWeightRegular,
          fontWeightRegular = _ref$fontWeightRegula === void 0 ? 400 : _ref$fontWeightRegula,
          _ref$fontWeightMedium = _ref.fontWeightMedium,
          fontWeightMedium = _ref$fontWeightMedium === void 0 ? 500 : _ref$fontWeightMedium,
          _ref$fontWeightBold = _ref.fontWeightBold,
          fontWeightBold = _ref$fontWeightBold === void 0 ? 700 : _ref$fontWeightBold,
          _ref$htmlFontSize = _ref.htmlFontSize,
          htmlFontSize = _ref$htmlFontSize === void 0 ? 16 : _ref$htmlFontSize,
          allVariants = _ref.allVariants,
          pxToRem2 = _ref.pxToRem,
          other = _objectWithoutProperties(_ref, ["fontFamily", "fontSize", "fontWeightLight", "fontWeightRegular", "fontWeightMedium", "fontWeightBold", "htmlFontSize", "allVariants", "pxToRem"]);

      if (process.env.NODE_ENV !== 'production') {
        if (typeof fontSize !== 'number') {
          console.error('Material-UI: `fontSize` is required to be a number.');
        }

        if (typeof htmlFontSize !== 'number') {
          console.error('Material-UI: `htmlFontSize` is required to be a number.');
        }
      }

      var coef = fontSize / 14;

      var pxToRem = pxToRem2 || function (size) {
        return "".concat(size / htmlFontSize * coef, "rem");
      };

      var buildVariant = function buildVariant(fontWeight, size, lineHeight, letterSpacing, casing) {
        return _extends$3({
          fontFamily: fontFamily,
          fontWeight: fontWeight,
          fontSize: pxToRem(size),
          // Unitless following https://meyerweb.com/eric/thoughts/2006/02/08/unitless-line-heights/
          lineHeight: lineHeight
        }, fontFamily === defaultFontFamily ? {
          letterSpacing: "".concat(round$1(letterSpacing / size), "em")
        } : {}, casing, allVariants);
      };

      var variants = {
        h1: buildVariant(fontWeightLight, 96, 1.167, -1.5),
        h2: buildVariant(fontWeightLight, 60, 1.2, -0.5),
        h3: buildVariant(fontWeightRegular, 48, 1.167, 0),
        h4: buildVariant(fontWeightRegular, 34, 1.235, 0.25),
        h5: buildVariant(fontWeightRegular, 24, 1.334, 0),
        h6: buildVariant(fontWeightMedium, 20, 1.6, 0.15),
        subtitle1: buildVariant(fontWeightRegular, 16, 1.75, 0.15),
        subtitle2: buildVariant(fontWeightMedium, 14, 1.57, 0.1),
        body1: buildVariant(fontWeightRegular, 16, 1.5, 0.15),
        body2: buildVariant(fontWeightRegular, 14, 1.43, 0.15),
        button: buildVariant(fontWeightMedium, 14, 1.75, 0.4, caseAllCaps),
        caption: buildVariant(fontWeightRegular, 12, 1.66, 0.4),
        overline: buildVariant(fontWeightRegular, 12, 2.66, 1, caseAllCaps)
      };
      return deepmerge$1(_extends$3({
        htmlFontSize: htmlFontSize,
        pxToRem: pxToRem,
        round: roundWithDeprecationWarning,
        // TODO v5: remove
        fontFamily: fontFamily,
        fontSize: fontSize,
        fontWeightLight: fontWeightLight,
        fontWeightRegular: fontWeightRegular,
        fontWeightMedium: fontWeightMedium,
        fontWeightBold: fontWeightBold
      }, variants), other, {
        clone: false // No need to clone deep

      });
    }

    var shadowKeyUmbraOpacity = 0.2;
    var shadowKeyPenumbraOpacity = 0.14;
    var shadowAmbientShadowOpacity = 0.12;

    function createShadow() {
      return ["".concat(arguments.length <= 0 ? undefined : arguments[0], "px ").concat(arguments.length <= 1 ? undefined : arguments[1], "px ").concat(arguments.length <= 2 ? undefined : arguments[2], "px ").concat(arguments.length <= 3 ? undefined : arguments[3], "px rgba(0,0,0,").concat(shadowKeyUmbraOpacity, ")"), "".concat(arguments.length <= 4 ? undefined : arguments[4], "px ").concat(arguments.length <= 5 ? undefined : arguments[5], "px ").concat(arguments.length <= 6 ? undefined : arguments[6], "px ").concat(arguments.length <= 7 ? undefined : arguments[7], "px rgba(0,0,0,").concat(shadowKeyPenumbraOpacity, ")"), "".concat(arguments.length <= 8 ? undefined : arguments[8], "px ").concat(arguments.length <= 9 ? undefined : arguments[9], "px ").concat(arguments.length <= 10 ? undefined : arguments[10], "px ").concat(arguments.length <= 11 ? undefined : arguments[11], "px rgba(0,0,0,").concat(shadowAmbientShadowOpacity, ")")].join(',');
    } // Values from https://github.com/material-components/material-components-web/blob/be8747f94574669cb5e7add1a7c54fa41a89cec7/packages/mdc-elevation/_variables.scss


    var shadows$1 = ['none', createShadow(0, 2, 1, -1, 0, 1, 1, 0, 0, 1, 3, 0), createShadow(0, 3, 1, -2, 0, 2, 2, 0, 0, 1, 5, 0), createShadow(0, 3, 3, -2, 0, 3, 4, 0, 0, 1, 8, 0), createShadow(0, 2, 4, -1, 0, 4, 5, 0, 0, 1, 10, 0), createShadow(0, 3, 5, -1, 0, 5, 8, 0, 0, 1, 14, 0), createShadow(0, 3, 5, -1, 0, 6, 10, 0, 0, 1, 18, 0), createShadow(0, 4, 5, -2, 0, 7, 10, 1, 0, 2, 16, 1), createShadow(0, 5, 5, -3, 0, 8, 10, 1, 0, 3, 14, 2), createShadow(0, 5, 6, -3, 0, 9, 12, 1, 0, 3, 16, 2), createShadow(0, 6, 6, -3, 0, 10, 14, 1, 0, 4, 18, 3), createShadow(0, 6, 7, -4, 0, 11, 15, 1, 0, 4, 20, 3), createShadow(0, 7, 8, -4, 0, 12, 17, 2, 0, 5, 22, 4), createShadow(0, 7, 8, -4, 0, 13, 19, 2, 0, 5, 24, 4), createShadow(0, 7, 9, -4, 0, 14, 21, 2, 0, 5, 26, 4), createShadow(0, 8, 9, -5, 0, 15, 22, 2, 0, 6, 28, 5), createShadow(0, 8, 10, -5, 0, 16, 24, 2, 0, 6, 30, 5), createShadow(0, 8, 11, -5, 0, 17, 26, 2, 0, 6, 32, 5), createShadow(0, 9, 11, -5, 0, 18, 28, 2, 0, 7, 34, 6), createShadow(0, 9, 12, -6, 0, 19, 29, 2, 0, 7, 36, 6), createShadow(0, 10, 13, -6, 0, 20, 31, 3, 0, 8, 38, 7), createShadow(0, 10, 13, -6, 0, 21, 33, 3, 0, 8, 40, 7), createShadow(0, 10, 14, -6, 0, 22, 35, 3, 0, 8, 42, 7), createShadow(0, 11, 14, -7, 0, 23, 36, 3, 0, 9, 44, 8), createShadow(0, 11, 15, -7, 0, 24, 38, 3, 0, 9, 46, 8)];
    var shadows$2 = shadows$1;

    var shape = {
      borderRadius: 4
    };
    var shape$1 = shape;

    var responsivePropType = process.env.NODE_ENV !== 'production' ? re.oneOfType([re.number, re.string, re.object, re.array]) : {};
    var responsivePropType$1 = responsivePropType;

    function _arrayLikeToArray$1(arr, len) {
      if (len == null || len > arr.length) len = arr.length;

      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    }

    function _arrayWithoutHoles(arr) {
      if (Array.isArray(arr)) return _arrayLikeToArray$1(arr);
    }

    function _iterableToArray(iter) {
      if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
    }

    function _unsupportedIterableToArray$1(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray$1(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen);
    }

    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }

    function _toConsumableArray(arr) {
      return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray$1(arr) || _nonIterableSpread();
    }

    function merge$1(acc, item) {
      if (!item) {
        return acc;
      }

      return deepmerge$1(acc, item, {
        clone: false // No need to clone deep, it's way faster.

      });
    }

    // For instance with the first breakpoint xs: [xs, sm[.

    var values$1 = {
      xs: 0,
      sm: 600,
      md: 960,
      lg: 1280,
      xl: 1920
    };
    var defaultBreakpoints = {
      // Sorted ASC by size. That's important.
      // It can't be configured as it's used statically for propTypes.
      keys: ['xs', 'sm', 'md', 'lg', 'xl'],
      up: function up(key) {
        return "@media (min-width:".concat(values$1[key], "px)");
      }
    };
    function handleBreakpoints(props, propValue, styleFromPropValue) {
      if (process.env.NODE_ENV !== 'production') {
        if (!props.theme) {
          console.error('Material-UI: You are calling a style function without a theme value.');
        }
      }

      if (Array.isArray(propValue)) {
        var themeBreakpoints = props.theme.breakpoints || defaultBreakpoints;
        return propValue.reduce(function (acc, item, index) {
          acc[themeBreakpoints.up(themeBreakpoints.keys[index])] = styleFromPropValue(propValue[index]);
          return acc;
        }, {});
      }

      if (_typeof$g(propValue) === 'object') {
        var _themeBreakpoints = props.theme.breakpoints || defaultBreakpoints;

        return Object.keys(propValue).reduce(function (acc, breakpoint) {
          acc[_themeBreakpoints.up(breakpoint)] = styleFromPropValue(propValue[breakpoint]);
          return acc;
        }, {});
      }

      var output = styleFromPropValue(propValue);
      return output;
    }

    function getPath$1(obj, path) {
      if (!path || typeof path !== 'string') {
        return null;
      }

      return path.split('.').reduce(function (acc, item) {
        return acc && acc[item] ? acc[item] : null;
      }, obj);
    }

    function style$1(options) {
      var prop = options.prop,
          _options$cssProperty = options.cssProperty,
          cssProperty = _options$cssProperty === void 0 ? options.prop : _options$cssProperty,
          themeKey = options.themeKey,
          transform = options.transform;

      var fn = function fn(props) {
        if (props[prop] == null) {
          return null;
        }

        var propValue = props[prop];
        var theme = props.theme;
        var themeMapping = getPath$1(theme, themeKey) || {};

        var styleFromPropValue = function styleFromPropValue(propValueFinal) {
          var value;

          if (typeof themeMapping === 'function') {
            value = themeMapping(propValueFinal);
          } else if (Array.isArray(themeMapping)) {
            value = themeMapping[propValueFinal] || propValueFinal;
          } else {
            value = getPath$1(themeMapping, propValueFinal) || propValueFinal;

            if (transform) {
              value = transform(value);
            }
          }

          if (cssProperty === false) {
            return value;
          }

          return _defineProperty({}, cssProperty, value);
        };

        return handleBreakpoints(props, propValue, styleFromPropValue);
      };

      fn.propTypes = process.env.NODE_ENV !== 'production' ? _defineProperty({}, prop, responsivePropType$1) : {};
      fn.filterProps = [prop];
      return fn;
    }

    function compose$1() {
      for (var _len = arguments.length, styles = new Array(_len), _key = 0; _key < _len; _key++) {
        styles[_key] = arguments[_key];
      }

      var fn = function fn(props) {
        return styles.reduce(function (acc, style) {
          var output = style(props);

          if (output) {
            return merge$1(acc, output);
          }

          return acc;
        }, {});
      }; // Alternative approach that doesn't yield any performance gain.
      // const handlers = styles.reduce((acc, style) => {
      //   style.filterProps.forEach(prop => {
      //     acc[prop] = style;
      //   });
      //   return acc;
      // }, {});
      // const fn = props => {
      //   return Object.keys(props).reduce((acc, prop) => {
      //     if (handlers[prop]) {
      //       return merge(acc, handlers[prop](props));
      //     }
      //     return acc;
      //   }, {});
      // };


      fn.propTypes = process.env.NODE_ENV !== 'production' ? styles.reduce(function (acc, style) {
        return _extends$3(acc, style.propTypes);
      }, {}) : {};
      fn.filterProps = styles.reduce(function (acc, style) {
        return acc.concat(style.filterProps);
      }, []);
      return fn;
    }

    function getBorder(value) {
      if (typeof value !== 'number') {
        return value;
      }

      return "".concat(value, "px solid");
    }

    var border = style$1({
      prop: 'border',
      themeKey: 'borders',
      transform: getBorder
    });
    var borderTop = style$1({
      prop: 'borderTop',
      themeKey: 'borders',
      transform: getBorder
    });
    var borderRight = style$1({
      prop: 'borderRight',
      themeKey: 'borders',
      transform: getBorder
    });
    var borderBottom = style$1({
      prop: 'borderBottom',
      themeKey: 'borders',
      transform: getBorder
    });
    var borderLeft = style$1({
      prop: 'borderLeft',
      themeKey: 'borders',
      transform: getBorder
    });
    var borderColor = style$1({
      prop: 'borderColor',
      themeKey: 'palette'
    });
    var borderRadius = style$1({
      prop: 'borderRadius',
      themeKey: 'shape'
    });
    var borders = compose$1(border, borderTop, borderRight, borderBottom, borderLeft, borderColor, borderRadius);
    var borders$1 = borders;

    function omit$1(input, fields) {
      var output = {};
      Object.keys(input).forEach(function (prop) {
        if (fields.indexOf(prop) === -1) {
          output[prop] = input[prop];
        }
      });
      return output;
    }

    var warnedOnce$a = false;

    function styleFunctionSx(styleFunction) {
      var newStyleFunction = function newStyleFunction(props) {
        var output = styleFunction(props);

        if (props.css) {
          return _extends$3({}, merge$1(output, styleFunction(_extends$3({
            theme: props.theme
          }, props.css))), omit$1(props.css, [styleFunction.filterProps]));
        }

        if (props.sx) {
          return _extends$3({}, merge$1(output, styleFunction(_extends$3({
            theme: props.theme
          }, props.sx))), omit$1(props.sx, [styleFunction.filterProps]));
        }

        return output;
      };

      newStyleFunction.propTypes = process.env.NODE_ENV !== 'production' ? _extends$3({}, styleFunction.propTypes, {
        css: chainPropTypes$1(re.object, function (props) {
          if (!warnedOnce$a && props.css !== undefined) {
            warnedOnce$a = true;
            return new Error('Material-UI: The `css` prop is deprecated, please use the `sx` prop instead.');
          }

          return null;
        }),
        sx: re.object
      }) : {};
      newStyleFunction.filterProps = ['css', 'sx'].concat(_toConsumableArray(styleFunction.filterProps));
      return newStyleFunction;
    }

    var displayPrint = style$1({
      prop: 'displayPrint',
      cssProperty: false,
      transform: function transform(value) {
        return {
          '@media print': {
            display: value
          }
        };
      }
    });
    var displayRaw = style$1({
      prop: 'display'
    });
    var overflow = style$1({
      prop: 'overflow'
    });
    var textOverflow = style$1({
      prop: 'textOverflow'
    });
    var visibility = style$1({
      prop: 'visibility'
    });
    var whiteSpace = style$1({
      prop: 'whiteSpace'
    });
    var display = compose$1(displayPrint, displayRaw, overflow, textOverflow, visibility, whiteSpace);

    var flexBasis = style$1({
      prop: 'flexBasis'
    });
    var flexDirection = style$1({
      prop: 'flexDirection'
    });
    var flexWrap = style$1({
      prop: 'flexWrap'
    });
    var justifyContent = style$1({
      prop: 'justifyContent'
    });
    var alignItems = style$1({
      prop: 'alignItems'
    });
    var alignContent = style$1({
      prop: 'alignContent'
    });
    var order = style$1({
      prop: 'order'
    });
    var flex = style$1({
      prop: 'flex'
    });
    var flexGrow = style$1({
      prop: 'flexGrow'
    });
    var flexShrink = style$1({
      prop: 'flexShrink'
    });
    var alignSelf = style$1({
      prop: 'alignSelf'
    });
    var justifyItems = style$1({
      prop: 'justifyItems'
    });
    var justifySelf = style$1({
      prop: 'justifySelf'
    });
    var flexbox = compose$1(flexBasis, flexDirection, flexWrap, justifyContent, alignItems, alignContent, order, flex, flexGrow, flexShrink, alignSelf, justifyItems, justifySelf);
    var flexbox$1 = flexbox;

    var gridGap = style$1({
      prop: 'gridGap'
    });
    var gridColumnGap = style$1({
      prop: 'gridColumnGap'
    });
    var gridRowGap = style$1({
      prop: 'gridRowGap'
    });
    var gridColumn = style$1({
      prop: 'gridColumn'
    });
    var gridRow = style$1({
      prop: 'gridRow'
    });
    var gridAutoFlow = style$1({
      prop: 'gridAutoFlow'
    });
    var gridAutoColumns = style$1({
      prop: 'gridAutoColumns'
    });
    var gridAutoRows = style$1({
      prop: 'gridAutoRows'
    });
    var gridTemplateColumns = style$1({
      prop: 'gridTemplateColumns'
    });
    var gridTemplateRows = style$1({
      prop: 'gridTemplateRows'
    });
    var gridTemplateAreas = style$1({
      prop: 'gridTemplateAreas'
    });
    var gridArea = style$1({
      prop: 'gridArea'
    });
    var grid = compose$1(gridGap, gridColumnGap, gridRowGap, gridColumn, gridRow, gridAutoFlow, gridAutoColumns, gridAutoRows, gridTemplateColumns, gridTemplateRows, gridTemplateAreas, gridArea);
    var grid$1 = grid;

    var color$1 = style$1({
      prop: 'color',
      themeKey: 'palette'
    });
    var bgcolor = style$1({
      prop: 'bgcolor',
      cssProperty: 'backgroundColor',
      themeKey: 'palette'
    });
    var palette = compose$1(color$1, bgcolor);
    var palette$1 = palette;

    var position = style$1({
      prop: 'position'
    });
    var zIndex$2 = style$1({
      prop: 'zIndex',
      themeKey: 'zIndex'
    });
    var top = style$1({
      prop: 'top'
    });
    var right = style$1({
      prop: 'right'
    });
    var bottom = style$1({
      prop: 'bottom'
    });
    var left = style$1({
      prop: 'left'
    });
    var positions = compose$1(position, zIndex$2, top, right, bottom, left);

    var boxShadow = style$1({
      prop: 'boxShadow',
      themeKey: 'shadows'
    });
    var shadows = boxShadow;

    function transform$2(value) {
      return value <= 1 ? "".concat(value * 100, "%") : value;
    }

    var width = style$1({
      prop: 'width',
      transform: transform$2
    });
    var maxWidth = style$1({
      prop: 'maxWidth',
      transform: transform$2
    });
    var minWidth = style$1({
      prop: 'minWidth',
      transform: transform$2
    });
    var height = style$1({
      prop: 'height',
      transform: transform$2
    });
    var maxHeight = style$1({
      prop: 'maxHeight',
      transform: transform$2
    });
    var minHeight = style$1({
      prop: 'minHeight',
      transform: transform$2
    });
    style$1({
      prop: 'size',
      cssProperty: 'width',
      transform: transform$2
    });
    style$1({
      prop: 'size',
      cssProperty: 'height',
      transform: transform$2
    });
    var boxSizing = style$1({
      prop: 'boxSizing'
    });
    var sizing = compose$1(width, maxWidth, minWidth, height, maxHeight, minHeight, boxSizing);
    var sizing$1 = sizing;

    function _arrayWithHoles(arr) {
      if (Array.isArray(arr)) return arr;
    }

    function _iterableToArrayLimit(arr, i) {
      var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

      if (_i == null) return;
      var _arr = [];
      var _n = true;
      var _d = false;

      var _s, _e;

      try {
        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);

          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }

      return _arr;
    }

    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }

    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray$1(arr, i) || _nonIterableRest();
    }

    function memoize$1(fn) {
      var cache = {};
      return function (arg) {
        if (cache[arg] === undefined) {
          cache[arg] = fn(arg);
        }

        return cache[arg];
      };
    }

    var properties = {
      m: 'margin',
      p: 'padding'
    };
    var directions = {
      t: 'Top',
      r: 'Right',
      b: 'Bottom',
      l: 'Left',
      x: ['Left', 'Right'],
      y: ['Top', 'Bottom']
    };
    var aliases = {
      marginX: 'mx',
      marginY: 'my',
      paddingX: 'px',
      paddingY: 'py'
    }; // memoize() impact:
    // From 300,000 ops/sec
    // To 350,000 ops/sec

    var getCssProperties = memoize$1(function (prop) {
      // It's not a shorthand notation.
      if (prop.length > 2) {
        if (aliases[prop]) {
          prop = aliases[prop];
        } else {
          return [prop];
        }
      }

      var _prop$split = prop.split(''),
          _prop$split2 = _slicedToArray(_prop$split, 2),
          a = _prop$split2[0],
          b = _prop$split2[1];

      var property = properties[a];
      var direction = directions[b] || '';
      return Array.isArray(direction) ? direction.map(function (dir) {
        return property + dir;
      }) : [property + direction];
    });
    var spacingKeys = ['m', 'mt', 'mr', 'mb', 'ml', 'mx', 'my', 'p', 'pt', 'pr', 'pb', 'pl', 'px', 'py', 'margin', 'marginTop', 'marginRight', 'marginBottom', 'marginLeft', 'marginX', 'marginY', 'padding', 'paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft', 'paddingX', 'paddingY'];
    function createUnarySpacing(theme) {
      var themeSpacing = theme.spacing || 8;

      if (typeof themeSpacing === 'number') {
        return function (abs) {
          if (process.env.NODE_ENV !== 'production') {
            if (typeof abs !== 'number') {
              console.error("Material-UI: Expected spacing argument to be a number, got ".concat(abs, "."));
            }
          }

          return themeSpacing * abs;
        };
      }

      if (Array.isArray(themeSpacing)) {
        return function (abs) {
          if (process.env.NODE_ENV !== 'production') {
            if (abs > themeSpacing.length - 1) {
              console.error(["Material-UI: The value provided (".concat(abs, ") overflows."), "The supported values are: ".concat(JSON.stringify(themeSpacing), "."), "".concat(abs, " > ").concat(themeSpacing.length - 1, ", you need to add the missing values.")].join('\n'));
            }
          }

          return themeSpacing[abs];
        };
      }

      if (typeof themeSpacing === 'function') {
        return themeSpacing;
      }

      if (process.env.NODE_ENV !== 'production') {
        console.error(["Material-UI: The `theme.spacing` value (".concat(themeSpacing, ") is invalid."), 'It should be a number, an array or a function.'].join('\n'));
      }

      return function () {
        return undefined;
      };
    }

    function getValue(transformer, propValue) {
      if (typeof propValue === 'string' || propValue == null) {
        return propValue;
      }

      var abs = Math.abs(propValue);
      var transformed = transformer(abs);

      if (propValue >= 0) {
        return transformed;
      }

      if (typeof transformed === 'number') {
        return -transformed;
      }

      return "-".concat(transformed);
    }

    function getStyleFromPropValue(cssProperties, transformer) {
      return function (propValue) {
        return cssProperties.reduce(function (acc, cssProperty) {
          acc[cssProperty] = getValue(transformer, propValue);
          return acc;
        }, {});
      };
    }

    function spacing(props) {
      var theme = props.theme;
      var transformer = createUnarySpacing(theme);
      return Object.keys(props).map(function (prop) {
        // Using a hash computation over an array iteration could be faster, but with only 28 items,
        // it's doesn't worth the bundle size.
        if (spacingKeys.indexOf(prop) === -1) {
          return null;
        }

        var cssProperties = getCssProperties(prop);
        var styleFromPropValue = getStyleFromPropValue(cssProperties, transformer);
        var propValue = props[prop];
        return handleBreakpoints(props, propValue, styleFromPropValue);
      }).reduce(merge$1, {});
    }

    spacing.propTypes = process.env.NODE_ENV !== 'production' ? spacingKeys.reduce(function (obj, key) {
      obj[key] = responsivePropType$1;
      return obj;
    }, {}) : {};
    spacing.filterProps = spacingKeys;

    var fontFamily = style$1({
      prop: 'fontFamily',
      themeKey: 'typography'
    });
    var fontSize = style$1({
      prop: 'fontSize',
      themeKey: 'typography'
    });
    var fontStyle = style$1({
      prop: 'fontStyle',
      themeKey: 'typography'
    });
    var fontWeight = style$1({
      prop: 'fontWeight',
      themeKey: 'typography'
    });
    var letterSpacing = style$1({
      prop: 'letterSpacing'
    });
    var lineHeight = style$1({
      prop: 'lineHeight'
    });
    var textAlign = style$1({
      prop: 'textAlign'
    });
    var typography = compose$1(fontFamily, fontSize, fontStyle, fontWeight, letterSpacing, lineHeight, textAlign);
    var typography$1 = typography;

    var warnOnce;
    function createSpacing() {
      var spacingInput = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 8;

      // Already transformed.
      if (spacingInput.mui) {
        return spacingInput;
      } // Material Design layouts are visually balanced. Most measurements align to an 8dp grid applied, which aligns both spacing and the overall layout.
      // Smaller components, such as icons and type, can align to a 4dp grid.
      // https://material.io/design/layout/understanding-layout.html#usage


      var transform = createUnarySpacing({
        spacing: spacingInput
      });

      var spacing = function spacing() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        if (process.env.NODE_ENV !== 'production') {
          if (!(args.length <= 4)) {
            console.error("Material-UI: Too many arguments provided, expected between 0 and 4, got ".concat(args.length));
          }
        }

        if (args.length === 0) {
          return transform(1);
        }

        if (args.length === 1) {
          return transform(args[0]);
        }

        return args.map(function (argument) {
          if (typeof argument === 'string') {
            return argument;
          }

          var output = transform(argument);
          return typeof output === 'number' ? "".concat(output, "px") : output;
        }).join(' ');
      }; // Backward compatibility, to remove in v5.


      Object.defineProperty(spacing, 'unit', {
        get: function get() {
          if (process.env.NODE_ENV !== 'production') {
            if (!warnOnce || process.env.NODE_ENV === 'test') {
              console.error(['Material-UI: theme.spacing.unit usage has been deprecated.', 'It will be removed in v5.', 'You can replace `theme.spacing.unit * y` with `theme.spacing(y)`.', '', 'You can use the `https://github.com/mui-org/material-ui/tree/master/packages/material-ui-codemod/README.md#theme-spacing-api` migration helper to make the process smoother.'].join('\n'));
            }

            warnOnce = true;
          }

          return spacingInput;
        }
      });
      spacing.mui = true;
      return spacing;
    }

    // Follow https://material.google.com/motion/duration-easing.html#duration-easing-natural-easing-curves
    // to learn the context in which each easing should be used.
    var easing = {
      // This is the most common easing curve.
      easeInOut: 'cubic-bezier(0.4, 0, 0.2, 1)',
      // Objects enter the screen at full velocity from off-screen and
      // slowly decelerate to a resting point.
      easeOut: 'cubic-bezier(0.0, 0, 0.2, 1)',
      // Objects leave the screen at full velocity. They do not decelerate when off-screen.
      easeIn: 'cubic-bezier(0.4, 0, 1, 1)',
      // The sharp curve is used by objects that may return to the screen at any time.
      sharp: 'cubic-bezier(0.4, 0, 0.6, 1)'
    }; // Follow https://material.io/guidelines/motion/duration-easing.html#duration-easing-common-durations
    // to learn when use what timing

    var duration = {
      shortest: 150,
      shorter: 200,
      short: 250,
      // most basic recommended timing
      standard: 300,
      // this is to be used in complex animations
      complex: 375,
      // recommended when something is entering screen
      enteringScreen: 225,
      // recommended when something is leaving screen
      leavingScreen: 195
    };

    function formatMs(milliseconds) {
      return "".concat(Math.round(milliseconds), "ms");
    }
    /**
     * @param {string|Array} props
     * @param {object} param
     * @param {string} param.prop
     * @param {number} param.duration
     * @param {string} param.easing
     * @param {number} param.delay
     */


    var transitions = {
      easing: easing,
      duration: duration,
      create: function create() {
        var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ['all'];
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        var _options$duration = options.duration,
            durationOption = _options$duration === void 0 ? duration.standard : _options$duration,
            _options$easing = options.easing,
            easingOption = _options$easing === void 0 ? easing.easeInOut : _options$easing,
            _options$delay = options.delay,
            delay = _options$delay === void 0 ? 0 : _options$delay,
            other = _objectWithoutProperties(options, ["duration", "easing", "delay"]);

        if (process.env.NODE_ENV !== 'production') {
          var isString = function isString(value) {
            return typeof value === 'string';
          };

          var isNumber = function isNumber(value) {
            return !isNaN(parseFloat(value));
          };

          if (!isString(props) && !Array.isArray(props)) {
            console.error('Material-UI: Argument "props" must be a string or Array.');
          }

          if (!isNumber(durationOption) && !isString(durationOption)) {
            console.error("Material-UI: Argument \"duration\" must be a number or a string but found ".concat(durationOption, "."));
          }

          if (!isString(easingOption)) {
            console.error('Material-UI: Argument "easing" must be a string.');
          }

          if (!isNumber(delay) && !isString(delay)) {
            console.error('Material-UI: Argument "delay" must be a number or a string.');
          }

          if (Object.keys(other).length !== 0) {
            console.error("Material-UI: Unrecognized argument(s) [".concat(Object.keys(other).join(','), "]."));
          }
        }

        return (Array.isArray(props) ? props : [props]).map(function (animatedProp) {
          return "".concat(animatedProp, " ").concat(typeof durationOption === 'string' ? durationOption : formatMs(durationOption), " ").concat(easingOption, " ").concat(typeof delay === 'string' ? delay : formatMs(delay));
        }).join(',');
      },
      getAutoHeightDuration: function getAutoHeightDuration(height) {
        if (!height) {
          return 0;
        }

        var constant = height / 36; // https://www.wolframalpha.com/input/?i=(4+%2B+15+*+(x+%2F+36+)+**+0.25+%2B+(x+%2F+36)+%2F+5)+*+10

        return Math.round((4 + 15 * Math.pow(constant, 0.25) + constant / 5) * 10);
      }
    };

    // We need to centralize the zIndex definitions as they work
    // like global values in the browser.
    var zIndex = {
      mobileStepper: 1000,
      speedDial: 1050,
      appBar: 1100,
      drawer: 1200,
      modal: 1300,
      snackbar: 1400,
      tooltip: 1500
    };
    var zIndex$1 = zIndex;

    function createTheme() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var _options$breakpoints = options.breakpoints,
          breakpointsInput = _options$breakpoints === void 0 ? {} : _options$breakpoints,
          _options$mixins = options.mixins,
          mixinsInput = _options$mixins === void 0 ? {} : _options$mixins,
          _options$palette = options.palette,
          paletteInput = _options$palette === void 0 ? {} : _options$palette,
          spacingInput = options.spacing,
          _options$typography = options.typography,
          typographyInput = _options$typography === void 0 ? {} : _options$typography,
          other = _objectWithoutProperties(options, ["breakpoints", "mixins", "palette", "spacing", "typography"]);

      var palette = createPalette(paletteInput);
      var breakpoints = createBreakpoints(breakpointsInput);
      var spacing = createSpacing(spacingInput);
      var muiTheme = deepmerge$1({
        breakpoints: breakpoints,
        direction: 'ltr',
        mixins: createMixins(breakpoints, spacing, mixinsInput),
        overrides: {},
        // Inject custom styles
        palette: palette,
        props: {},
        // Provide default props
        shadows: shadows$2,
        typography: createTypography(palette, typographyInput),
        spacing: spacing,
        shape: shape$1,
        transitions: transitions,
        zIndex: zIndex$1
      }, other);

      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      muiTheme = args.reduce(function (acc, argument) {
        return deepmerge$1(acc, argument);
      }, muiTheme);

      if (process.env.NODE_ENV !== 'production') {
        var pseudoClasses = ['checked', 'disabled', 'error', 'focused', 'focusVisible', 'required', 'expanded', 'selected'];

        var traverse = function traverse(node, parentKey) {
          var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
          var key; // eslint-disable-next-line guard-for-in, no-restricted-syntax

          for (key in node) {
            var child = node[key];

            if (depth === 1) {
              if (key.indexOf('Mui') === 0 && child) {
                traverse(child, key, depth + 1);
              }
            } else if (pseudoClasses.indexOf(key) !== -1 && Object.keys(child).length > 0) {
              if (process.env.NODE_ENV !== 'production') {
                console.error(["Material-UI: The `".concat(parentKey, "` component increases ") + "the CSS specificity of the `".concat(key, "` internal state."), 'You can not override it like this: ', JSON.stringify(node, null, 2), '', 'Instead, you need to use the $ruleName syntax:', JSON.stringify({
                  root: _defineProperty({}, "&$".concat(key), child)
                }, null, 2), '', 'https://material-ui.com/r/pseudo-classes-guide'].join('\n'));
              } // Remove the style to prevent global conflicts.


              node[key] = {};
            }
          }
        };

        traverse(muiTheme.overrides);
      }

      return muiTheme;
    }

    var warnedOnce$9 = false;
    function createMuiTheme() {
      if (process.env.NODE_ENV !== 'production') {
        if (!warnedOnce$9) {
          warnedOnce$9 = true;
          console.error(['Material-UI: the createMuiTheme function was renamed to createTheme.', '', "You should use `import { createTheme } from '@material-ui/core/styles'`"].join('\n'));
        }
      }

      return createTheme.apply(void 0, arguments);
    }

    function createMuiStrictModeTheme(options) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      return createTheme.apply(void 0, [deepmerge$1({
        unstable_strictMode: true
      }, options)].concat(args));
    }

    var hasSymbol = typeof Symbol === 'function' && Symbol.for;
    var nested = hasSymbol ? Symbol.for('mui.nested') : '__THEME_NESTED__';

    /**
     * This is the list of the style rule name we use as drop in replacement for the built-in
     * pseudo classes (:checked, :disabled, :focused, etc.).
     *
     * Why do they exist in the first place?
     * These classes are used at a specificity of 2.
     * It allows them to override previously definied styles as well as
     * being untouched by simple user overrides.
     */

    var pseudoClasses = ['checked', 'disabled', 'error', 'focused', 'focusVisible', 'required', 'expanded', 'selected']; // Returns a function which generates unique class names based on counters.
    // When new generator function is created, rule counter is reset.
    // We need to reset the rule counter for SSR for each request.
    //
    // It's inspired by
    // https://github.com/cssinjs/jss/blob/4e6a05dd3f7b6572fdd3ab216861d9e446c20331/src/utils/createGenerateClassName.js

    function createGenerateClassName() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var _options$disableGloba = options.disableGlobal,
          disableGlobal = _options$disableGloba === void 0 ? false : _options$disableGloba,
          _options$productionPr = options.productionPrefix,
          productionPrefix = _options$productionPr === void 0 ? 'jss' : _options$productionPr,
          _options$seed = options.seed,
          seed = _options$seed === void 0 ? '' : _options$seed;
      var seedPrefix = seed === '' ? '' : "".concat(seed, "-");
      var ruleCounter = 0;

      var getNextCounterId = function getNextCounterId() {
        ruleCounter += 1;

        if (process.env.NODE_ENV !== 'production') {
          if (ruleCounter >= 1e10) {
            console.warn(['Material-UI: You might have a memory leak.', 'The ruleCounter is not supposed to grow that much.'].join(''));
          }
        }

        return ruleCounter;
      };

      return function (rule, styleSheet) {
        var name = styleSheet.options.name; // Is a global static MUI style?

        if (name && name.indexOf('Mui') === 0 && !styleSheet.options.link && !disableGlobal) {
          // We can use a shorthand class name, we never use the keys to style the components.
          if (pseudoClasses.indexOf(rule.key) !== -1) {
            return "Mui-".concat(rule.key);
          }

          var prefix = "".concat(seedPrefix).concat(name, "-").concat(rule.key);

          if (!styleSheet.options.theme[nested] || seed !== '') {
            return prefix;
          }

          return "".concat(prefix, "-").concat(getNextCounterId());
        }

        if (process.env.NODE_ENV === 'production') {
          return "".concat(seedPrefix).concat(productionPrefix).concat(getNextCounterId());
        }

        var suffix = "".concat(rule.key, "-").concat(getNextCounterId()); // Help with debuggability.

        if (styleSheet.options.classNamePrefix) {
          return "".concat(seedPrefix).concat(styleSheet.options.classNamePrefix, "-").concat(suffix);
        }

        return "".concat(seedPrefix).concat(suffix);
      };
    }

    function createStyles$1(styles) {
      return styles;
    }

    /* eslint-disable no-restricted-syntax */
    function getThemeProps(params) {
      var theme = params.theme,
          name = params.name,
          props = params.props;

      if (!theme || !theme.props || !theme.props[name]) {
        return props;
      } // Resolve default props, code borrow from React source.
      // https://github.com/facebook/react/blob/15a8f031838a553e41c0b66eb1bcf1da8448104d/packages/react/src/ReactElement.js#L221


      var defaultProps = theme.props[name];
      var propName;

      for (propName in defaultProps) {
        if (props[propName] === undefined) {
          props[propName] = defaultProps[propName];
        }
      }

      return props;
    }

    var isProduction = process.env.NODE_ENV === 'production';
    function warning(condition, message) {
      if (!isProduction) {
        if (condition) {
          return;
        }

        var text = "Warning: " + message;

        if (typeof console !== 'undefined') {
          console.warn(text);
        }

        try {
          throw Error(text);
        } catch (x) {}
      }
    }

    var _typeof$f = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

    var isBrowser$2 = (typeof window === "undefined" ? "undefined" : _typeof$f(window)) === "object" && (typeof document === "undefined" ? "undefined" : _typeof$f(document)) === 'object' && document.nodeType === 9;

    function _defineProperties$1(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass$1(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties$1(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties$1(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }

    function _setPrototypeOf$2(o, p) {
      _setPrototypeOf$2 = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
      };

      return _setPrototypeOf$2(o, p);
    }

    function _inheritsLoose$1(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      _setPrototypeOf$2(subClass, superClass);
    }

    function _assertThisInitialized$1(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }

      return self;
    }

    var plainObjectConstrurctor = {}.constructor;
    function cloneStyle(style) {
      if (style == null || typeof style !== 'object') return style;
      if (Array.isArray(style)) return style.map(cloneStyle);
      if (style.constructor !== plainObjectConstrurctor) return style;
      var newStyle = {};

      for (var name in style) {
        newStyle[name] = cloneStyle(style[name]);
      }

      return newStyle;
    }

    /**
     * Create a rule instance.
     */

    function createRule(name, decl, options) {
      if (name === void 0) {
        name = 'unnamed';
      }

      var jss = options.jss;
      var declCopy = cloneStyle(decl);
      var rule = jss.plugins.onCreateRule(name, declCopy, options);
      if (rule) return rule; // It is an at-rule and it has no instance.

      if (name[0] === '@') {
        process.env.NODE_ENV !== "production" ? warning(false, "[JSS] Unknown rule " + name) : void 0;
      }

      return null;
    }

    var join = function join(value, by) {
      var result = '';

      for (var i = 0; i < value.length; i++) {
        // Remove !important from the value, it will be readded later.
        if (value[i] === '!important') break;
        if (result) result += by;
        result += value[i];
      }

      return result;
    };
    /**
     * Converts JSS array value to a CSS string.
     *
     * `margin: [['5px', '10px']]` > `margin: 5px 10px;`
     * `border: ['1px', '2px']` > `border: 1px, 2px;`
     * `margin: [['5px', '10px'], '!important']` > `margin: 5px 10px !important;`
     * `color: ['red', !important]` > `color: red !important;`
     */


    var toCssValue = function toCssValue(value, ignoreImportant) {
      if (ignoreImportant === void 0) {
        ignoreImportant = false;
      }

      if (!Array.isArray(value)) return value;
      var cssValue = ''; // Support space separated values via `[['5px', '10px']]`.

      if (Array.isArray(value[0])) {
        for (var i = 0; i < value.length; i++) {
          if (value[i] === '!important') break;
          if (cssValue) cssValue += ', ';
          cssValue += join(value[i], ' ');
        }
      } else cssValue = join(value, ', '); // Add !important, because it was ignored.


      if (!ignoreImportant && value[value.length - 1] === '!important') {
        cssValue += ' !important';
      }

      return cssValue;
    };

    function getWhitespaceSymbols(options) {
      if (options && options.format === false) {
        return {
          linebreak: '',
          space: ''
        };
      }

      return {
        linebreak: '\n',
        space: ' '
      };
    }

    /**
     * Indent a string.
     * http://jsperf.com/array-join-vs-for
     */

    function indentStr(str, indent) {
      var result = '';

      for (var index = 0; index < indent; index++) {
        result += '  ';
      }

      return result + str;
    }
    /**
     * Converts a Rule to CSS string.
     */


    function toCss(selector, style, options) {
      if (options === void 0) {
        options = {};
      }

      var result = '';
      if (!style) return result;
      var _options = options,
          _options$indent = _options.indent,
          indent = _options$indent === void 0 ? 0 : _options$indent;
      var fallbacks = style.fallbacks;

      if (options.format === false) {
        indent = -Infinity;
      }

      var _getWhitespaceSymbols = getWhitespaceSymbols(options),
          linebreak = _getWhitespaceSymbols.linebreak,
          space = _getWhitespaceSymbols.space;

      if (selector) indent++; // Apply fallbacks first.

      if (fallbacks) {
        // Array syntax {fallbacks: [{prop: value}]}
        if (Array.isArray(fallbacks)) {
          for (var index = 0; index < fallbacks.length; index++) {
            var fallback = fallbacks[index];

            for (var prop in fallback) {
              var value = fallback[prop];

              if (value != null) {
                if (result) result += linebreak;
                result += indentStr(prop + ":" + space + toCssValue(value) + ";", indent);
              }
            }
          }
        } else {
          // Object syntax {fallbacks: {prop: value}}
          for (var _prop in fallbacks) {
            var _value = fallbacks[_prop];

            if (_value != null) {
              if (result) result += linebreak;
              result += indentStr(_prop + ":" + space + toCssValue(_value) + ";", indent);
            }
          }
        }
      }

      for (var _prop2 in style) {
        var _value2 = style[_prop2];

        if (_value2 != null && _prop2 !== 'fallbacks') {
          if (result) result += linebreak;
          result += indentStr(_prop2 + ":" + space + toCssValue(_value2) + ";", indent);
        }
      } // Allow empty style in this case, because properties will be added dynamically.


      if (!result && !options.allowEmpty) return result; // When rule is being stringified before selector was defined.

      if (!selector) return result;
      indent--;
      if (result) result = "" + linebreak + result + linebreak;
      return indentStr("" + selector + space + "{" + result, indent) + indentStr('}', indent);
    }

    var escapeRegex = /([[\].#*$><+~=|^:(),"'`\s])/g;
    var nativeEscape = typeof CSS !== 'undefined' && CSS.escape;
    var escape = (function (str) {
      return nativeEscape ? nativeEscape(str) : str.replace(escapeRegex, '\\$1');
    });

    var BaseStyleRule =
    /*#__PURE__*/
    function () {
      function BaseStyleRule(key, style, options) {
        this.type = 'style';
        this.isProcessed = false;
        var sheet = options.sheet,
            Renderer = options.Renderer;
        this.key = key;
        this.options = options;
        this.style = style;
        if (sheet) this.renderer = sheet.renderer;else if (Renderer) this.renderer = new Renderer();
      }
      /**
       * Get or set a style property.
       */


      var _proto = BaseStyleRule.prototype;

      _proto.prop = function prop(name, value, options) {
        // It's a getter.
        if (value === undefined) return this.style[name]; // Don't do anything if the value has not changed.

        var force = options ? options.force : false;
        if (!force && this.style[name] === value) return this;
        var newValue = value;

        if (!options || options.process !== false) {
          newValue = this.options.jss.plugins.onChangeValue(value, name, this);
        }

        var isEmpty = newValue == null || newValue === false;
        var isDefined = name in this.style; // Value is empty and wasn't defined before.

        if (isEmpty && !isDefined && !force) return this; // We are going to remove this value.

        var remove = isEmpty && isDefined;
        if (remove) delete this.style[name];else this.style[name] = newValue; // Renderable is defined if StyleSheet option `link` is true.

        if (this.renderable && this.renderer) {
          if (remove) this.renderer.removeProperty(this.renderable, name);else this.renderer.setProperty(this.renderable, name, newValue);
          return this;
        }

        var sheet = this.options.sheet;

        if (sheet && sheet.attached) {
          process.env.NODE_ENV !== "production" ? warning(false, '[JSS] Rule is not linked. Missing sheet option "link: true".') : void 0;
        }

        return this;
      };

      return BaseStyleRule;
    }();
    var StyleRule =
    /*#__PURE__*/
    function (_BaseStyleRule) {
      _inheritsLoose$1(StyleRule, _BaseStyleRule);

      function StyleRule(key, style, options) {
        var _this;

        _this = _BaseStyleRule.call(this, key, style, options) || this;
        var selector = options.selector,
            scoped = options.scoped,
            sheet = options.sheet,
            generateId = options.generateId;

        if (selector) {
          _this.selectorText = selector;
        } else if (scoped !== false) {
          _this.id = generateId(_assertThisInitialized$1(_assertThisInitialized$1(_this)), sheet);
          _this.selectorText = "." + escape(_this.id);
        }

        return _this;
      }
      /**
       * Set selector string.
       * Attention: use this with caution. Most browsers didn't implement
       * selectorText setter, so this may result in rerendering of entire Style Sheet.
       */


      var _proto2 = StyleRule.prototype;

      /**
       * Apply rule to an element inline.
       */
      _proto2.applyTo = function applyTo(renderable) {
        var renderer = this.renderer;

        if (renderer) {
          var json = this.toJSON();

          for (var prop in json) {
            renderer.setProperty(renderable, prop, json[prop]);
          }
        }

        return this;
      }
      /**
       * Returns JSON representation of the rule.
       * Fallbacks are not supported.
       * Useful for inline styles.
       */
      ;

      _proto2.toJSON = function toJSON() {
        var json = {};

        for (var prop in this.style) {
          var value = this.style[prop];
          if (typeof value !== 'object') json[prop] = value;else if (Array.isArray(value)) json[prop] = toCssValue(value);
        }

        return json;
      }
      /**
       * Generates a CSS string.
       */
      ;

      _proto2.toString = function toString(options) {
        var sheet = this.options.sheet;
        var link = sheet ? sheet.options.link : false;
        var opts = link ? _extends$3({}, options, {
          allowEmpty: true
        }) : options;
        return toCss(this.selectorText, this.style, opts);
      };

      _createClass$1(StyleRule, [{
        key: "selector",
        set: function set(selector) {
          if (selector === this.selectorText) return;
          this.selectorText = selector;
          var renderer = this.renderer,
              renderable = this.renderable;
          if (!renderable || !renderer) return;
          var hasChanged = renderer.setSelector(renderable, selector); // If selector setter is not implemented, rerender the rule.

          if (!hasChanged) {
            renderer.replaceRule(renderable, this);
          }
        }
        /**
         * Get selector string.
         */
        ,
        get: function get() {
          return this.selectorText;
        }
      }]);

      return StyleRule;
    }(BaseStyleRule);
    var pluginStyleRule = {
      onCreateRule: function onCreateRule(key, style, options) {
        if (key[0] === '@' || options.parent && options.parent.type === 'keyframes') {
          return null;
        }

        return new StyleRule(key, style, options);
      }
    };

    var defaultToStringOptions = {
      indent: 1,
      children: true
    };
    var atRegExp = /@([\w-]+)/;
    /**
     * Conditional rule for @media, @supports
     */

    var ConditionalRule =
    /*#__PURE__*/
    function () {
      function ConditionalRule(key, styles, options) {
        this.type = 'conditional';
        this.isProcessed = false;
        this.key = key;
        var atMatch = key.match(atRegExp);
        this.at = atMatch ? atMatch[1] : 'unknown'; // Key might contain a unique suffix in case the `name` passed by user was duplicate.

        this.query = options.name || "@" + this.at;
        this.options = options;
        this.rules = new RuleList(_extends$3({}, options, {
          parent: this
        }));

        for (var name in styles) {
          this.rules.add(name, styles[name]);
        }

        this.rules.process();
      }
      /**
       * Get a rule.
       */


      var _proto = ConditionalRule.prototype;

      _proto.getRule = function getRule(name) {
        return this.rules.get(name);
      }
      /**
       * Get index of a rule.
       */
      ;

      _proto.indexOf = function indexOf(rule) {
        return this.rules.indexOf(rule);
      }
      /**
       * Create and register rule, run plugins.
       */
      ;

      _proto.addRule = function addRule(name, style, options) {
        var rule = this.rules.add(name, style, options);
        if (!rule) return null;
        this.options.jss.plugins.onProcessRule(rule);
        return rule;
      }
      /**
       * Replace rule, run plugins.
       */
      ;

      _proto.replaceRule = function replaceRule(name, style, options) {
        var newRule = this.rules.replace(name, style, options);
        if (newRule) this.options.jss.plugins.onProcessRule(newRule);
        return newRule;
      }
      /**
       * Generates a CSS string.
       */
      ;

      _proto.toString = function toString(options) {
        if (options === void 0) {
          options = defaultToStringOptions;
        }

        var _getWhitespaceSymbols = getWhitespaceSymbols(options),
            linebreak = _getWhitespaceSymbols.linebreak;

        if (options.indent == null) options.indent = defaultToStringOptions.indent;
        if (options.children == null) options.children = defaultToStringOptions.children;

        if (options.children === false) {
          return this.query + " {}";
        }

        var children = this.rules.toString(options);
        return children ? this.query + " {" + linebreak + children + linebreak + "}" : '';
      };

      return ConditionalRule;
    }();
    var keyRegExp = /@media|@supports\s+/;
    var pluginConditionalRule = {
      onCreateRule: function onCreateRule(key, styles, options) {
        return keyRegExp.test(key) ? new ConditionalRule(key, styles, options) : null;
      }
    };

    var defaultToStringOptions$1 = {
      indent: 1,
      children: true
    };
    var nameRegExp = /@keyframes\s+([\w-]+)/;
    /**
     * Rule for @keyframes
     */

    var KeyframesRule =
    /*#__PURE__*/
    function () {
      function KeyframesRule(key, frames, options) {
        this.type = 'keyframes';
        this.at = '@keyframes';
        this.isProcessed = false;
        var nameMatch = key.match(nameRegExp);

        if (nameMatch && nameMatch[1]) {
          this.name = nameMatch[1];
        } else {
          this.name = 'noname';
          process.env.NODE_ENV !== "production" ? warning(false, "[JSS] Bad keyframes name " + key) : void 0;
        }

        this.key = this.type + "-" + this.name;
        this.options = options;
        var scoped = options.scoped,
            sheet = options.sheet,
            generateId = options.generateId;
        this.id = scoped === false ? this.name : escape(generateId(this, sheet));
        this.rules = new RuleList(_extends$3({}, options, {
          parent: this
        }));

        for (var name in frames) {
          this.rules.add(name, frames[name], _extends$3({}, options, {
            parent: this
          }));
        }

        this.rules.process();
      }
      /**
       * Generates a CSS string.
       */


      var _proto = KeyframesRule.prototype;

      _proto.toString = function toString(options) {
        if (options === void 0) {
          options = defaultToStringOptions$1;
        }

        var _getWhitespaceSymbols = getWhitespaceSymbols(options),
            linebreak = _getWhitespaceSymbols.linebreak;

        if (options.indent == null) options.indent = defaultToStringOptions$1.indent;
        if (options.children == null) options.children = defaultToStringOptions$1.children;

        if (options.children === false) {
          return this.at + " " + this.id + " {}";
        }

        var children = this.rules.toString(options);
        if (children) children = "" + linebreak + children + linebreak;
        return this.at + " " + this.id + " {" + children + "}";
      };

      return KeyframesRule;
    }();
    var keyRegExp$1 = /@keyframes\s+/;
    var refRegExp$1 = /\$([\w-]+)/g;

    var findReferencedKeyframe = function findReferencedKeyframe(val, keyframes) {
      if (typeof val === 'string') {
        return val.replace(refRegExp$1, function (match, name) {
          if (name in keyframes) {
            return keyframes[name];
          }

          process.env.NODE_ENV !== "production" ? warning(false, "[JSS] Referenced keyframes rule \"" + name + "\" is not defined.") : void 0;
          return match;
        });
      }

      return val;
    };
    /**
     * Replace the reference for a animation name.
     */


    var replaceRef = function replaceRef(style, prop, keyframes) {
      var value = style[prop];
      var refKeyframe = findReferencedKeyframe(value, keyframes);

      if (refKeyframe !== value) {
        style[prop] = refKeyframe;
      }
    };

    var pluginKeyframesRule = {
      onCreateRule: function onCreateRule(key, frames, options) {
        return typeof key === 'string' && keyRegExp$1.test(key) ? new KeyframesRule(key, frames, options) : null;
      },
      // Animation name ref replacer.
      onProcessStyle: function onProcessStyle(style, rule, sheet) {
        if (rule.type !== 'style' || !sheet) return style;
        if ('animation-name' in style) replaceRef(style, 'animation-name', sheet.keyframes);
        if ('animation' in style) replaceRef(style, 'animation', sheet.keyframes);
        return style;
      },
      onChangeValue: function onChangeValue(val, prop, rule) {
        var sheet = rule.options.sheet;

        if (!sheet) {
          return val;
        }

        switch (prop) {
          case 'animation':
            return findReferencedKeyframe(val, sheet.keyframes);

          case 'animation-name':
            return findReferencedKeyframe(val, sheet.keyframes);

          default:
            return val;
        }
      }
    };

    var KeyframeRule =
    /*#__PURE__*/
    function (_BaseStyleRule) {
      _inheritsLoose$1(KeyframeRule, _BaseStyleRule);

      function KeyframeRule() {
        return _BaseStyleRule.apply(this, arguments) || this;
      }

      var _proto = KeyframeRule.prototype;

      /**
       * Generates a CSS string.
       */
      _proto.toString = function toString(options) {
        var sheet = this.options.sheet;
        var link = sheet ? sheet.options.link : false;
        var opts = link ? _extends$3({}, options, {
          allowEmpty: true
        }) : options;
        return toCss(this.key, this.style, opts);
      };

      return KeyframeRule;
    }(BaseStyleRule);
    var pluginKeyframeRule = {
      onCreateRule: function onCreateRule(key, style, options) {
        if (options.parent && options.parent.type === 'keyframes') {
          return new KeyframeRule(key, style, options);
        }

        return null;
      }
    };

    var FontFaceRule =
    /*#__PURE__*/
    function () {
      function FontFaceRule(key, style, options) {
        this.type = 'font-face';
        this.at = '@font-face';
        this.isProcessed = false;
        this.key = key;
        this.style = style;
        this.options = options;
      }
      /**
       * Generates a CSS string.
       */


      var _proto = FontFaceRule.prototype;

      _proto.toString = function toString(options) {
        var _getWhitespaceSymbols = getWhitespaceSymbols(options),
            linebreak = _getWhitespaceSymbols.linebreak;

        if (Array.isArray(this.style)) {
          var str = '';

          for (var index = 0; index < this.style.length; index++) {
            str += toCss(this.at, this.style[index]);
            if (this.style[index + 1]) str += linebreak;
          }

          return str;
        }

        return toCss(this.at, this.style, options);
      };

      return FontFaceRule;
    }();
    var keyRegExp$2 = /@font-face/;
    var pluginFontFaceRule = {
      onCreateRule: function onCreateRule(key, style, options) {
        return keyRegExp$2.test(key) ? new FontFaceRule(key, style, options) : null;
      }
    };

    var ViewportRule =
    /*#__PURE__*/
    function () {
      function ViewportRule(key, style, options) {
        this.type = 'viewport';
        this.at = '@viewport';
        this.isProcessed = false;
        this.key = key;
        this.style = style;
        this.options = options;
      }
      /**
       * Generates a CSS string.
       */


      var _proto = ViewportRule.prototype;

      _proto.toString = function toString(options) {
        return toCss(this.key, this.style, options);
      };

      return ViewportRule;
    }();
    var pluginViewportRule = {
      onCreateRule: function onCreateRule(key, style, options) {
        return key === '@viewport' || key === '@-ms-viewport' ? new ViewportRule(key, style, options) : null;
      }
    };

    var SimpleRule =
    /*#__PURE__*/
    function () {
      function SimpleRule(key, value, options) {
        this.type = 'simple';
        this.isProcessed = false;
        this.key = key;
        this.value = value;
        this.options = options;
      }
      /**
       * Generates a CSS string.
       */
      // eslint-disable-next-line no-unused-vars


      var _proto = SimpleRule.prototype;

      _proto.toString = function toString(options) {
        if (Array.isArray(this.value)) {
          var str = '';

          for (var index = 0; index < this.value.length; index++) {
            str += this.key + " " + this.value[index] + ";";
            if (this.value[index + 1]) str += '\n';
          }

          return str;
        }

        return this.key + " " + this.value + ";";
      };

      return SimpleRule;
    }();
    var keysMap = {
      '@charset': true,
      '@import': true,
      '@namespace': true
    };
    var pluginSimpleRule = {
      onCreateRule: function onCreateRule(key, value, options) {
        return key in keysMap ? new SimpleRule(key, value, options) : null;
      }
    };

    var plugins$1 = [pluginStyleRule, pluginConditionalRule, pluginKeyframesRule, pluginKeyframeRule, pluginFontFaceRule, pluginViewportRule, pluginSimpleRule];

    var defaultUpdateOptions = {
      process: true
    };
    var forceUpdateOptions = {
      force: true,
      process: true
      /**
       * Contains rules objects and allows adding/removing etc.
       * Is used for e.g. by `StyleSheet` or `ConditionalRule`.
       */

    };

    var RuleList =
    /*#__PURE__*/
    function () {
      // Rules registry for access by .get() method.
      // It contains the same rule registered by name and by selector.
      // Original styles object.
      // Used to ensure correct rules order.
      function RuleList(options) {
        this.map = {};
        this.raw = {};
        this.index = [];
        this.counter = 0;
        this.options = options;
        this.classes = options.classes;
        this.keyframes = options.keyframes;
      }
      /**
       * Create and register rule.
       *
       * Will not render after Style Sheet was rendered the first time.
       */


      var _proto = RuleList.prototype;

      _proto.add = function add(name, decl, ruleOptions) {
        var _this$options = this.options,
            parent = _this$options.parent,
            sheet = _this$options.sheet,
            jss = _this$options.jss,
            Renderer = _this$options.Renderer,
            generateId = _this$options.generateId,
            scoped = _this$options.scoped;

        var options = _extends$3({
          classes: this.classes,
          parent: parent,
          sheet: sheet,
          jss: jss,
          Renderer: Renderer,
          generateId: generateId,
          scoped: scoped,
          name: name,
          keyframes: this.keyframes,
          selector: undefined
        }, ruleOptions); // When user uses .createStyleSheet(), duplicate names are not possible, but
        // `sheet.addRule()` opens the door for any duplicate rule name. When this happens
        // we need to make the key unique within this RuleList instance scope.


        var key = name;

        if (name in this.raw) {
          key = name + "-d" + this.counter++;
        } // We need to save the original decl before creating the rule
        // because cache plugin needs to use it as a key to return a cached rule.


        this.raw[key] = decl;

        if (key in this.classes) {
          // E.g. rules inside of @media container
          options.selector = "." + escape(this.classes[key]);
        }

        var rule = createRule(key, decl, options);
        if (!rule) return null;
        this.register(rule);
        var index = options.index === undefined ? this.index.length : options.index;
        this.index.splice(index, 0, rule);
        return rule;
      }
      /**
       * Replace rule.
       * Create a new rule and remove old one instead of overwriting
       * because we want to invoke onCreateRule hook to make plugins work.
       */
      ;

      _proto.replace = function replace(name, decl, ruleOptions) {
        var oldRule = this.get(name);
        var oldIndex = this.index.indexOf(oldRule);

        if (oldRule) {
          this.remove(oldRule);
        }

        var options = ruleOptions;
        if (oldIndex !== -1) options = _extends$3({}, ruleOptions, {
          index: oldIndex
        });
        return this.add(name, decl, options);
      }
      /**
       * Get a rule by name or selector.
       */
      ;

      _proto.get = function get(nameOrSelector) {
        return this.map[nameOrSelector];
      }
      /**
       * Delete a rule.
       */
      ;

      _proto.remove = function remove(rule) {
        this.unregister(rule);
        delete this.raw[rule.key];
        this.index.splice(this.index.indexOf(rule), 1);
      }
      /**
       * Get index of a rule.
       */
      ;

      _proto.indexOf = function indexOf(rule) {
        return this.index.indexOf(rule);
      }
      /**
       * Run `onProcessRule()` plugins on every rule.
       */
      ;

      _proto.process = function process() {
        var plugins = this.options.jss.plugins; // We need to clone array because if we modify the index somewhere else during a loop
        // we end up with very hard-to-track-down side effects.

        this.index.slice(0).forEach(plugins.onProcessRule, plugins);
      }
      /**
       * Register a rule in `.map`, `.classes` and `.keyframes` maps.
       */
      ;

      _proto.register = function register(rule) {
        this.map[rule.key] = rule;

        if (rule instanceof StyleRule) {
          this.map[rule.selector] = rule;
          if (rule.id) this.classes[rule.key] = rule.id;
        } else if (rule instanceof KeyframesRule && this.keyframes) {
          this.keyframes[rule.name] = rule.id;
        }
      }
      /**
       * Unregister a rule.
       */
      ;

      _proto.unregister = function unregister(rule) {
        delete this.map[rule.key];

        if (rule instanceof StyleRule) {
          delete this.map[rule.selector];
          delete this.classes[rule.key];
        } else if (rule instanceof KeyframesRule) {
          delete this.keyframes[rule.name];
        }
      }
      /**
       * Update the function values with a new data.
       */
      ;

      _proto.update = function update() {
        var name;
        var data;
        var options;

        if (typeof (arguments.length <= 0 ? undefined : arguments[0]) === 'string') {
          name = arguments.length <= 0 ? undefined : arguments[0];
          data = arguments.length <= 1 ? undefined : arguments[1];
          options = arguments.length <= 2 ? undefined : arguments[2];
        } else {
          data = arguments.length <= 0 ? undefined : arguments[0];
          options = arguments.length <= 1 ? undefined : arguments[1];
          name = null;
        }

        if (name) {
          this.updateOne(this.get(name), data, options);
        } else {
          for (var index = 0; index < this.index.length; index++) {
            this.updateOne(this.index[index], data, options);
          }
        }
      }
      /**
       * Execute plugins, update rule props.
       */
      ;

      _proto.updateOne = function updateOne(rule, data, options) {
        if (options === void 0) {
          options = defaultUpdateOptions;
        }

        var _this$options2 = this.options,
            plugins = _this$options2.jss.plugins,
            sheet = _this$options2.sheet; // It is a rules container like for e.g. ConditionalRule.

        if (rule.rules instanceof RuleList) {
          rule.rules.update(data, options);
          return;
        }

        var style = rule.style;
        plugins.onUpdate(data, rule, sheet, options); // We rely on a new `style` ref in case it was mutated during onUpdate hook.

        if (options.process && style && style !== rule.style) {
          // We need to run the plugins in case new `style` relies on syntax plugins.
          plugins.onProcessStyle(rule.style, rule, sheet); // Update and add props.

          for (var prop in rule.style) {
            var nextValue = rule.style[prop];
            var prevValue = style[prop]; // We need to use `force: true` because `rule.style` has been updated during onUpdate hook, so `rule.prop()` will not update the CSSOM rule.
            // We do this comparison to avoid unneeded `rule.prop()` calls, since we have the old `style` object here.

            if (nextValue !== prevValue) {
              rule.prop(prop, nextValue, forceUpdateOptions);
            }
          } // Remove props.


          for (var _prop in style) {
            var _nextValue = rule.style[_prop];
            var _prevValue = style[_prop]; // We need to use `force: true` because `rule.style` has been updated during onUpdate hook, so `rule.prop()` will not update the CSSOM rule.
            // We do this comparison to avoid unneeded `rule.prop()` calls, since we have the old `style` object here.

            if (_nextValue == null && _nextValue !== _prevValue) {
              rule.prop(_prop, null, forceUpdateOptions);
            }
          }
        }
      }
      /**
       * Convert rules to a CSS string.
       */
      ;

      _proto.toString = function toString(options) {
        var str = '';
        var sheet = this.options.sheet;
        var link = sheet ? sheet.options.link : false;

        var _getWhitespaceSymbols = getWhitespaceSymbols(options),
            linebreak = _getWhitespaceSymbols.linebreak;

        for (var index = 0; index < this.index.length; index++) {
          var rule = this.index[index];
          var css = rule.toString(options); // No need to render an empty rule.

          if (!css && !link) continue;
          if (str) str += linebreak;
          str += css;
        }

        return str;
      };

      return RuleList;
    }();

    var StyleSheet =
    /*#__PURE__*/
    function () {
      function StyleSheet(styles, options) {
        this.attached = false;
        this.deployed = false;
        this.classes = {};
        this.keyframes = {};
        this.options = _extends$3({}, options, {
          sheet: this,
          parent: this,
          classes: this.classes,
          keyframes: this.keyframes
        });

        if (options.Renderer) {
          this.renderer = new options.Renderer(this);
        }

        this.rules = new RuleList(this.options);

        for (var name in styles) {
          this.rules.add(name, styles[name]);
        }

        this.rules.process();
      }
      /**
       * Attach renderable to the render tree.
       */


      var _proto = StyleSheet.prototype;

      _proto.attach = function attach() {
        if (this.attached) return this;
        if (this.renderer) this.renderer.attach();
        this.attached = true; // Order is important, because we can't use insertRule API if style element is not attached.

        if (!this.deployed) this.deploy();
        return this;
      }
      /**
       * Remove renderable from render tree.
       */
      ;

      _proto.detach = function detach() {
        if (!this.attached) return this;
        if (this.renderer) this.renderer.detach();
        this.attached = false;
        return this;
      }
      /**
       * Add a rule to the current stylesheet.
       * Will insert a rule also after the stylesheet has been rendered first time.
       */
      ;

      _proto.addRule = function addRule(name, decl, options) {
        var queue = this.queue; // Plugins can create rules.
        // In order to preserve the right order, we need to queue all `.addRule` calls,
        // which happen after the first `rules.add()` call.

        if (this.attached && !queue) this.queue = [];
        var rule = this.rules.add(name, decl, options);
        if (!rule) return null;
        this.options.jss.plugins.onProcessRule(rule);

        if (this.attached) {
          if (!this.deployed) return rule; // Don't insert rule directly if there is no stringified version yet.
          // It will be inserted all together when .attach is called.

          if (queue) queue.push(rule);else {
            this.insertRule(rule);

            if (this.queue) {
              this.queue.forEach(this.insertRule, this);
              this.queue = undefined;
            }
          }
          return rule;
        } // We can't add rules to a detached style node.
        // We will redeploy the sheet once user will attach it.


        this.deployed = false;
        return rule;
      }
      /**
       * Replace a rule in the current stylesheet.
       */
      ;

      _proto.replaceRule = function replaceRule(nameOrSelector, decl, options) {
        var oldRule = this.rules.get(nameOrSelector);
        if (!oldRule) return this.addRule(nameOrSelector, decl, options);
        var newRule = this.rules.replace(nameOrSelector, decl, options);

        if (newRule) {
          this.options.jss.plugins.onProcessRule(newRule);
        }

        if (this.attached) {
          if (!this.deployed) return newRule; // Don't replace / delete rule directly if there is no stringified version yet.
          // It will be inserted all together when .attach is called.

          if (this.renderer) {
            if (!newRule) {
              this.renderer.deleteRule(oldRule);
            } else if (oldRule.renderable) {
              this.renderer.replaceRule(oldRule.renderable, newRule);
            }
          }

          return newRule;
        } // We can't replace rules to a detached style node.
        // We will redeploy the sheet once user will attach it.


        this.deployed = false;
        return newRule;
      }
      /**
       * Insert rule into the StyleSheet
       */
      ;

      _proto.insertRule = function insertRule(rule) {
        if (this.renderer) {
          this.renderer.insertRule(rule);
        }
      }
      /**
       * Create and add rules.
       * Will render also after Style Sheet was rendered the first time.
       */
      ;

      _proto.addRules = function addRules(styles, options) {
        var added = [];

        for (var name in styles) {
          var rule = this.addRule(name, styles[name], options);
          if (rule) added.push(rule);
        }

        return added;
      }
      /**
       * Get a rule by name or selector.
       */
      ;

      _proto.getRule = function getRule(nameOrSelector) {
        return this.rules.get(nameOrSelector);
      }
      /**
       * Delete a rule by name.
       * Returns `true`: if rule has been deleted from the DOM.
       */
      ;

      _proto.deleteRule = function deleteRule(name) {
        var rule = typeof name === 'object' ? name : this.rules.get(name);

        if (!rule || // Style sheet was created without link: true and attached, in this case we
        // won't be able to remove the CSS rule from the DOM.
        this.attached && !rule.renderable) {
          return false;
        }

        this.rules.remove(rule);

        if (this.attached && rule.renderable && this.renderer) {
          return this.renderer.deleteRule(rule.renderable);
        }

        return true;
      }
      /**
       * Get index of a rule.
       */
      ;

      _proto.indexOf = function indexOf(rule) {
        return this.rules.indexOf(rule);
      }
      /**
       * Deploy pure CSS string to a renderable.
       */
      ;

      _proto.deploy = function deploy() {
        if (this.renderer) this.renderer.deploy();
        this.deployed = true;
        return this;
      }
      /**
       * Update the function values with a new data.
       */
      ;

      _proto.update = function update() {
        var _this$rules;

        (_this$rules = this.rules).update.apply(_this$rules, arguments);

        return this;
      }
      /**
       * Updates a single rule.
       */
      ;

      _proto.updateOne = function updateOne(rule, data, options) {
        this.rules.updateOne(rule, data, options);
        return this;
      }
      /**
       * Convert rules to a CSS string.
       */
      ;

      _proto.toString = function toString(options) {
        return this.rules.toString(options);
      };

      return StyleSheet;
    }();

    var PluginsRegistry =
    /*#__PURE__*/
    function () {
      function PluginsRegistry() {
        this.plugins = {
          internal: [],
          external: []
        };
        this.registry = {};
      }

      var _proto = PluginsRegistry.prototype;

      /**
       * Call `onCreateRule` hooks and return an object if returned by a hook.
       */
      _proto.onCreateRule = function onCreateRule(name, decl, options) {
        for (var i = 0; i < this.registry.onCreateRule.length; i++) {
          var rule = this.registry.onCreateRule[i](name, decl, options);
          if (rule) return rule;
        }

        return null;
      }
      /**
       * Call `onProcessRule` hooks.
       */
      ;

      _proto.onProcessRule = function onProcessRule(rule) {
        if (rule.isProcessed) return;
        var sheet = rule.options.sheet;

        for (var i = 0; i < this.registry.onProcessRule.length; i++) {
          this.registry.onProcessRule[i](rule, sheet);
        }

        if (rule.style) this.onProcessStyle(rule.style, rule, sheet);
        rule.isProcessed = true;
      }
      /**
       * Call `onProcessStyle` hooks.
       */
      ;

      _proto.onProcessStyle = function onProcessStyle(style, rule, sheet) {
        for (var i = 0; i < this.registry.onProcessStyle.length; i++) {
          rule.style = this.registry.onProcessStyle[i](rule.style, rule, sheet);
        }
      }
      /**
       * Call `onProcessSheet` hooks.
       */
      ;

      _proto.onProcessSheet = function onProcessSheet(sheet) {
        for (var i = 0; i < this.registry.onProcessSheet.length; i++) {
          this.registry.onProcessSheet[i](sheet);
        }
      }
      /**
       * Call `onUpdate` hooks.
       */
      ;

      _proto.onUpdate = function onUpdate(data, rule, sheet, options) {
        for (var i = 0; i < this.registry.onUpdate.length; i++) {
          this.registry.onUpdate[i](data, rule, sheet, options);
        }
      }
      /**
       * Call `onChangeValue` hooks.
       */
      ;

      _proto.onChangeValue = function onChangeValue(value, prop, rule) {
        var processedValue = value;

        for (var i = 0; i < this.registry.onChangeValue.length; i++) {
          processedValue = this.registry.onChangeValue[i](processedValue, prop, rule);
        }

        return processedValue;
      }
      /**
       * Register a plugin.
       */
      ;

      _proto.use = function use(newPlugin, options) {
        if (options === void 0) {
          options = {
            queue: 'external'
          };
        }

        var plugins = this.plugins[options.queue]; // Avoids applying same plugin twice, at least based on ref.

        if (plugins.indexOf(newPlugin) !== -1) {
          return;
        }

        plugins.push(newPlugin);
        this.registry = [].concat(this.plugins.external, this.plugins.internal).reduce(function (registry, plugin) {
          for (var name in plugin) {
            if (name in registry) {
              registry[name].push(plugin[name]);
            } else {
              process.env.NODE_ENV !== "production" ? warning(false, "[JSS] Unknown hook \"" + name + "\".") : void 0;
            }
          }

          return registry;
        }, {
          onCreateRule: [],
          onProcessRule: [],
          onProcessStyle: [],
          onProcessSheet: [],
          onChangeValue: [],
          onUpdate: []
        });
      };

      return PluginsRegistry;
    }();

    /**
     * Sheets registry to access all instances in one place.
     */

    var SheetsRegistry =
    /*#__PURE__*/
    function () {
      function SheetsRegistry() {
        this.registry = [];
      }

      var _proto = SheetsRegistry.prototype;

      /**
       * Register a Style Sheet.
       */
      _proto.add = function add(sheet) {
        var registry = this.registry;
        var index = sheet.options.index;
        if (registry.indexOf(sheet) !== -1) return;

        if (registry.length === 0 || index >= this.index) {
          registry.push(sheet);
          return;
        } // Find a position.


        for (var i = 0; i < registry.length; i++) {
          if (registry[i].options.index > index) {
            registry.splice(i, 0, sheet);
            return;
          }
        }
      }
      /**
       * Reset the registry.
       */
      ;

      _proto.reset = function reset() {
        this.registry = [];
      }
      /**
       * Remove a Style Sheet.
       */
      ;

      _proto.remove = function remove(sheet) {
        var index = this.registry.indexOf(sheet);
        this.registry.splice(index, 1);
      }
      /**
       * Convert all attached sheets to a CSS string.
       */
      ;

      _proto.toString = function toString(_temp) {
        var _ref = _temp === void 0 ? {} : _temp,
            attached = _ref.attached,
            options = _objectWithoutPropertiesLoose$1(_ref, ["attached"]);

        var _getWhitespaceSymbols = getWhitespaceSymbols(options),
            linebreak = _getWhitespaceSymbols.linebreak;

        var css = '';

        for (var i = 0; i < this.registry.length; i++) {
          var sheet = this.registry[i];

          if (attached != null && sheet.attached !== attached) {
            continue;
          }

          if (css) css += linebreak;
          css += sheet.toString(options);
        }

        return css;
      };

      _createClass$1(SheetsRegistry, [{
        key: "index",

        /**
         * Current highest index number.
         */
        get: function get() {
          return this.registry.length === 0 ? 0 : this.registry[this.registry.length - 1].options.index;
        }
      }]);

      return SheetsRegistry;
    }();

    /**
     * This is a global sheets registry. Only DomRenderer will add sheets to it.
     * On the server one should use an own SheetsRegistry instance and add the
     * sheets to it, because you need to make sure to create a new registry for
     * each request in order to not leak sheets across requests.
     */

    var sheets = new SheetsRegistry();

    /* eslint-disable */

    /**
     * Now that `globalThis` is available on most platforms
     * (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis#browser_compatibility)
     * we check for `globalThis` first. `globalThis` is necessary for jss
     * to run in Agoric's secure version of JavaScript (SES). Under SES,
     * `globalThis` exists, but `window`, `self`, and `Function('return
     * this')()` are all undefined for security reasons.
     *
     * https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
     */
    var globalThis$1 = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' && window.Math === Math ? window : typeof self !== 'undefined' && self.Math === Math ? self : Function('return this')();

    var ns$1 = '2f1acc6c3a606b082e5eef5e54414ffb';
    if (globalThis$1[ns$1] == null) globalThis$1[ns$1] = 0; // Bundle may contain multiple JSS versions at the same time. In order to identify
    // the current version with just one short number and use it for classes generation
    // we use a counter. Also it is more accurate, because user can manually reevaluate
    // the module.

    var moduleId = globalThis$1[ns$1]++;

    var maxRules = 1e10;
    /**
     * Returns a function which generates unique class names based on counters.
     * When new generator function is created, rule counter is reseted.
     * We need to reset the rule counter for SSR for each request.
     */

    var createGenerateId = function createGenerateId(options) {
      if (options === void 0) {
        options = {};
      }

      var ruleCounter = 0;

      var generateId = function generateId(rule, sheet) {
        ruleCounter += 1;

        if (ruleCounter > maxRules) {
          process.env.NODE_ENV !== "production" ? warning(false, "[JSS] You might have a memory leak. Rule counter is at " + ruleCounter + ".") : void 0;
        }

        var jssId = '';
        var prefix = '';

        if (sheet) {
          if (sheet.options.classNamePrefix) {
            prefix = sheet.options.classNamePrefix;
          }

          if (sheet.options.jss.id != null) {
            jssId = String(sheet.options.jss.id);
          }
        }

        if (options.minify) {
          // Using "c" because a number can't be the first char in a class name.
          return "" + (prefix || 'c') + moduleId + jssId + ruleCounter;
        }

        return prefix + rule.key + "-" + moduleId + (jssId ? "-" + jssId : '') + "-" + ruleCounter;
      };

      return generateId;
    };

    /**
     * Cache the value from the first time a function is called.
     */

    var memoize = function memoize(fn) {
      var value;
      return function () {
        if (!value) value = fn();
        return value;
      };
    };
    /**
     * Get a style property value.
     */


    var getPropertyValue = function getPropertyValue(cssRule, prop) {
      try {
        // Support CSSTOM.
        if (cssRule.attributeStyleMap) {
          return cssRule.attributeStyleMap.get(prop);
        }

        return cssRule.style.getPropertyValue(prop);
      } catch (err) {
        // IE may throw if property is unknown.
        return '';
      }
    };
    /**
     * Set a style property.
     */


    var setProperty = function setProperty(cssRule, prop, value) {
      try {
        var cssValue = value;

        if (Array.isArray(value)) {
          cssValue = toCssValue(value, true);

          if (value[value.length - 1] === '!important') {
            cssRule.style.setProperty(prop, cssValue, 'important');
            return true;
          }
        } // Support CSSTOM.


        if (cssRule.attributeStyleMap) {
          cssRule.attributeStyleMap.set(prop, cssValue);
        } else {
          cssRule.style.setProperty(prop, cssValue);
        }
      } catch (err) {
        // IE may throw if property is unknown.
        return false;
      }

      return true;
    };
    /**
     * Remove a style property.
     */


    var removeProperty = function removeProperty(cssRule, prop) {
      try {
        // Support CSSTOM.
        if (cssRule.attributeStyleMap) {
          cssRule.attributeStyleMap.delete(prop);
        } else {
          cssRule.style.removeProperty(prop);
        }
      } catch (err) {
        process.env.NODE_ENV !== "production" ? warning(false, "[JSS] DOMException \"" + err.message + "\" was thrown. Tried to remove property \"" + prop + "\".") : void 0;
      }
    };
    /**
     * Set the selector.
     */


    var setSelector = function setSelector(cssRule, selectorText) {
      cssRule.selectorText = selectorText; // Return false if setter was not successful.
      // Currently works in chrome only.

      return cssRule.selectorText === selectorText;
    };
    /**
     * Gets the `head` element upon the first call and caches it.
     * We assume it can't be null.
     */


    var getHead = memoize(function () {
      return document.querySelector('head');
    });
    /**
     * Find attached sheet with an index higher than the passed one.
     */

    function findHigherSheet(registry, options) {
      for (var i = 0; i < registry.length; i++) {
        var sheet = registry[i];

        if (sheet.attached && sheet.options.index > options.index && sheet.options.insertionPoint === options.insertionPoint) {
          return sheet;
        }
      }

      return null;
    }
    /**
     * Find attached sheet with the highest index.
     */


    function findHighestSheet(registry, options) {
      for (var i = registry.length - 1; i >= 0; i--) {
        var sheet = registry[i];

        if (sheet.attached && sheet.options.insertionPoint === options.insertionPoint) {
          return sheet;
        }
      }

      return null;
    }
    /**
     * Find a comment with "jss" inside.
     */


    function findCommentNode(text) {
      var head = getHead();

      for (var i = 0; i < head.childNodes.length; i++) {
        var node = head.childNodes[i];

        if (node.nodeType === 8 && node.nodeValue.trim() === text) {
          return node;
        }
      }

      return null;
    }
    /**
     * Find a node before which we can insert the sheet.
     */


    function findPrevNode(options) {
      var registry = sheets.registry;

      if (registry.length > 0) {
        // Try to insert before the next higher sheet.
        var sheet = findHigherSheet(registry, options);

        if (sheet && sheet.renderer) {
          return {
            parent: sheet.renderer.element.parentNode,
            node: sheet.renderer.element
          };
        } // Otherwise insert after the last attached.


        sheet = findHighestSheet(registry, options);

        if (sheet && sheet.renderer) {
          return {
            parent: sheet.renderer.element.parentNode,
            node: sheet.renderer.element.nextSibling
          };
        }
      } // Try to find a comment placeholder if registry is empty.


      var insertionPoint = options.insertionPoint;

      if (insertionPoint && typeof insertionPoint === 'string') {
        var comment = findCommentNode(insertionPoint);

        if (comment) {
          return {
            parent: comment.parentNode,
            node: comment.nextSibling
          };
        } // If user specifies an insertion point and it can't be found in the document -
        // bad specificity issues may appear.


        process.env.NODE_ENV !== "production" ? warning(false, "[JSS] Insertion point \"" + insertionPoint + "\" not found.") : void 0;
      }

      return false;
    }
    /**
     * Insert style element into the DOM.
     */


    function insertStyle(style, options) {
      var insertionPoint = options.insertionPoint;
      var nextNode = findPrevNode(options);

      if (nextNode !== false && nextNode.parent) {
        nextNode.parent.insertBefore(style, nextNode.node);
        return;
      } // Works with iframes and any node types.


      if (insertionPoint && typeof insertionPoint.nodeType === 'number') {
        var insertionPointElement = insertionPoint;
        var parentNode = insertionPointElement.parentNode;
        if (parentNode) parentNode.insertBefore(style, insertionPointElement.nextSibling);else process.env.NODE_ENV !== "production" ? warning(false, '[JSS] Insertion point is not in the DOM.') : void 0;
        return;
      }

      getHead().appendChild(style);
    }
    /**
     * Read jss nonce setting from the page if the user has set it.
     */


    var getNonce = memoize(function () {
      var node = document.querySelector('meta[property="csp-nonce"]');
      return node ? node.getAttribute('content') : null;
    });

    var _insertRule = function insertRule(container, rule, index) {
      try {
        if ('insertRule' in container) {
          container.insertRule(rule, index);
        } // Keyframes rule.
        else if ('appendRule' in container) {
            container.appendRule(rule);
          }
      } catch (err) {
        process.env.NODE_ENV !== "production" ? warning(false, "[JSS] " + err.message) : void 0;
        return false;
      }

      return container.cssRules[index];
    };

    var getValidRuleInsertionIndex = function getValidRuleInsertionIndex(container, index) {
      var maxIndex = container.cssRules.length; // In case previous insertion fails, passed index might be wrong

      if (index === undefined || index > maxIndex) {
        // eslint-disable-next-line no-param-reassign
        return maxIndex;
      }

      return index;
    };

    var createStyle = function createStyle() {
      var el = document.createElement('style'); // Without it, IE will have a broken source order specificity if we
      // insert rules after we insert the style tag.
      // It seems to kick-off the source order specificity algorithm.

      el.textContent = '\n';
      return el;
    };

    var DomRenderer =
    /*#__PURE__*/
    function () {
      // Will be empty if link: true option is not set, because
      // it is only for use together with insertRule API.
      function DomRenderer(sheet) {
        this.getPropertyValue = getPropertyValue;
        this.setProperty = setProperty;
        this.removeProperty = removeProperty;
        this.setSelector = setSelector;
        this.hasInsertedRules = false;
        this.cssRules = [];
        // There is no sheet when the renderer is used from a standalone StyleRule.
        if (sheet) sheets.add(sheet);
        this.sheet = sheet;

        var _ref = this.sheet ? this.sheet.options : {},
            media = _ref.media,
            meta = _ref.meta,
            element = _ref.element;

        this.element = element || createStyle();
        this.element.setAttribute('data-jss', '');
        if (media) this.element.setAttribute('media', media);
        if (meta) this.element.setAttribute('data-meta', meta);
        var nonce = getNonce();
        if (nonce) this.element.setAttribute('nonce', nonce);
      }
      /**
       * Insert style element into render tree.
       */


      var _proto = DomRenderer.prototype;

      _proto.attach = function attach() {
        // In the case the element node is external and it is already in the DOM.
        if (this.element.parentNode || !this.sheet) return;
        insertStyle(this.element, this.sheet.options); // When rules are inserted using `insertRule` API, after `sheet.detach().attach()`
        // most browsers create a new CSSStyleSheet, except of all IEs.

        var deployed = Boolean(this.sheet && this.sheet.deployed);

        if (this.hasInsertedRules && deployed) {
          this.hasInsertedRules = false;
          this.deploy();
        }
      }
      /**
       * Remove style element from render tree.
       */
      ;

      _proto.detach = function detach() {
        if (!this.sheet) return;
        var parentNode = this.element.parentNode;
        if (parentNode) parentNode.removeChild(this.element); // In the most browsers, rules inserted using insertRule() API will be lost when style element is removed.
        // Though IE will keep them and we need a consistent behavior.

        if (this.sheet.options.link) {
          this.cssRules = [];
          this.element.textContent = '\n';
        }
      }
      /**
       * Inject CSS string into element.
       */
      ;

      _proto.deploy = function deploy() {
        var sheet = this.sheet;
        if (!sheet) return;

        if (sheet.options.link) {
          this.insertRules(sheet.rules);
          return;
        }

        this.element.textContent = "\n" + sheet.toString() + "\n";
      }
      /**
       * Insert RuleList into an element.
       */
      ;

      _proto.insertRules = function insertRules(rules, nativeParent) {
        for (var i = 0; i < rules.index.length; i++) {
          this.insertRule(rules.index[i], i, nativeParent);
        }
      }
      /**
       * Insert a rule into element.
       */
      ;

      _proto.insertRule = function insertRule(rule, index, nativeParent) {
        if (nativeParent === void 0) {
          nativeParent = this.element.sheet;
        }

        if (rule.rules) {
          var parent = rule;
          var latestNativeParent = nativeParent;

          if (rule.type === 'conditional' || rule.type === 'keyframes') {
            var _insertionIndex = getValidRuleInsertionIndex(nativeParent, index); // We need to render the container without children first.


            latestNativeParent = _insertRule(nativeParent, parent.toString({
              children: false
            }), _insertionIndex);

            if (latestNativeParent === false) {
              return false;
            }

            this.refCssRule(rule, _insertionIndex, latestNativeParent);
          }

          this.insertRules(parent.rules, latestNativeParent);
          return latestNativeParent;
        }

        var ruleStr = rule.toString();
        if (!ruleStr) return false;
        var insertionIndex = getValidRuleInsertionIndex(nativeParent, index);

        var nativeRule = _insertRule(nativeParent, ruleStr, insertionIndex);

        if (nativeRule === false) {
          return false;
        }

        this.hasInsertedRules = true;
        this.refCssRule(rule, insertionIndex, nativeRule);
        return nativeRule;
      };

      _proto.refCssRule = function refCssRule(rule, index, cssRule) {
        rule.renderable = cssRule; // We only want to reference the top level rules, deleteRule API doesn't support removing nested rules
        // like rules inside media queries or keyframes

        if (rule.options.parent instanceof StyleSheet) {
          this.cssRules.splice(index, 0, cssRule);
        }
      }
      /**
       * Delete a rule.
       */
      ;

      _proto.deleteRule = function deleteRule(cssRule) {
        var sheet = this.element.sheet;
        var index = this.indexOf(cssRule);
        if (index === -1) return false;
        sheet.deleteRule(index);
        this.cssRules.splice(index, 1);
        return true;
      }
      /**
       * Get index of a CSS Rule.
       */
      ;

      _proto.indexOf = function indexOf(cssRule) {
        return this.cssRules.indexOf(cssRule);
      }
      /**
       * Generate a new CSS rule and replace the existing one.
       */
      ;

      _proto.replaceRule = function replaceRule(cssRule, rule) {
        var index = this.indexOf(cssRule);
        if (index === -1) return false;
        this.element.sheet.deleteRule(index);
        this.cssRules.splice(index, 1);
        return this.insertRule(rule, index);
      }
      /**
       * Get all rules elements.
       */
      ;

      _proto.getRules = function getRules() {
        return this.element.sheet.cssRules;
      };

      return DomRenderer;
    }();

    var instanceCounter = 0;

    var Jss =
    /*#__PURE__*/
    function () {
      function Jss(options) {
        this.id = instanceCounter++;
        this.version = "10.9.0";
        this.plugins = new PluginsRegistry();
        this.options = {
          id: {
            minify: false
          },
          createGenerateId: createGenerateId,
          Renderer: isBrowser$2 ? DomRenderer : null,
          plugins: []
        };
        this.generateId = createGenerateId({
          minify: false
        });

        for (var i = 0; i < plugins$1.length; i++) {
          this.plugins.use(plugins$1[i], {
            queue: 'internal'
          });
        }

        this.setup(options);
      }
      /**
       * Prepares various options, applies plugins.
       * Should not be used twice on the same instance, because there is no plugins
       * deduplication logic.
       */


      var _proto = Jss.prototype;

      _proto.setup = function setup(options) {
        if (options === void 0) {
          options = {};
        }

        if (options.createGenerateId) {
          this.options.createGenerateId = options.createGenerateId;
        }

        if (options.id) {
          this.options.id = _extends$3({}, this.options.id, options.id);
        }

        if (options.createGenerateId || options.id) {
          this.generateId = this.options.createGenerateId(this.options.id);
        }

        if (options.insertionPoint != null) this.options.insertionPoint = options.insertionPoint;

        if ('Renderer' in options) {
          this.options.Renderer = options.Renderer;
        } // eslint-disable-next-line prefer-spread


        if (options.plugins) this.use.apply(this, options.plugins);
        return this;
      }
      /**
       * Create a Style Sheet.
       */
      ;

      _proto.createStyleSheet = function createStyleSheet(styles, options) {
        if (options === void 0) {
          options = {};
        }

        var _options = options,
            index = _options.index;

        if (typeof index !== 'number') {
          index = sheets.index === 0 ? 0 : sheets.index + 1;
        }

        var sheet = new StyleSheet(styles, _extends$3({}, options, {
          jss: this,
          generateId: options.generateId || this.generateId,
          insertionPoint: this.options.insertionPoint,
          Renderer: this.options.Renderer,
          index: index
        }));
        this.plugins.onProcessSheet(sheet);
        return sheet;
      }
      /**
       * Detach the Style Sheet and remove it from the registry.
       */
      ;

      _proto.removeStyleSheet = function removeStyleSheet(sheet) {
        sheet.detach();
        sheets.remove(sheet);
        return this;
      }
      /**
       * Create a rule without a Style Sheet.
       * [Deprecated] will be removed in the next major version.
       */
      ;

      _proto.createRule = function createRule$1(name, style, options) {
        if (style === void 0) {
          style = {};
        }

        if (options === void 0) {
          options = {};
        }

        // Enable rule without name for inline styles.
        if (typeof name === 'object') {
          return this.createRule(undefined, name, style);
        }

        var ruleOptions = _extends$3({}, options, {
          name: name,
          jss: this,
          Renderer: this.options.Renderer
        });

        if (!ruleOptions.generateId) ruleOptions.generateId = this.generateId;
        if (!ruleOptions.classes) ruleOptions.classes = {};
        if (!ruleOptions.keyframes) ruleOptions.keyframes = {};

        var rule = createRule(name, style, ruleOptions);

        if (rule) this.plugins.onProcessRule(rule);
        return rule;
      }
      /**
       * Register plugin. Passed function will be invoked with a rule instance.
       */
      ;

      _proto.use = function use() {
        var _this = this;

        for (var _len = arguments.length, plugins = new Array(_len), _key = 0; _key < _len; _key++) {
          plugins[_key] = arguments[_key];
        }

        plugins.forEach(function (plugin) {
          _this.plugins.use(plugin);
        });
        return this;
      };

      return Jss;
    }();

    var createJss = function createJss(options) {
      return new Jss(options);
    };

    /**
    * Export a constant indicating if this browser has CSSTOM support.
    * https://developers.google.com/web/updates/2018/03/cssom
    */
    var hasCSSTOMSupport = typeof CSS === 'object' && CSS != null && 'number' in CSS;

    /**
     * Extracts a styles object with only props that contain function values.
     */
    function getDynamicStyles(styles) {
      var to = null;

      for (var key in styles) {
        var value = styles[key];
        var type = typeof value;

        if (type === 'function') {
          if (!to) to = {};
          to[key] = value;
        } else if (type === 'object' && value !== null && !Array.isArray(value)) {
          var extracted = getDynamicStyles(value);

          if (extracted) {
            if (!to) to = {};
            to[key] = extracted;
          }
        }
      }

      return to;
    }

    /**
     * A better abstraction over CSS.
     *
     * @copyright Oleg Isonen (Slobodskoi) / Isonen 2014-present
     * @website https://github.com/cssinjs/jss
     * @license MIT
     */
    createJss();

    var now = Date.now();
    var fnValuesNs = "fnValues" + now;
    var fnRuleNs = "fnStyle" + ++now;

    var functionPlugin = function functionPlugin() {
      return {
        onCreateRule: function onCreateRule(name, decl, options) {
          if (typeof decl !== 'function') return null;
          var rule = createRule(name, {}, options);
          rule[fnRuleNs] = decl;
          return rule;
        },
        onProcessStyle: function onProcessStyle(style, rule) {
          // We need to extract function values from the declaration, so that we can keep core unaware of them.
          // We need to do that only once.
          // We don't need to extract functions on each style update, since this can happen only once.
          // We don't support function values inside of function rules.
          if (fnValuesNs in rule || fnRuleNs in rule) return style;
          var fnValues = {};

          for (var prop in style) {
            var value = style[prop];
            if (typeof value !== 'function') continue;
            delete style[prop];
            fnValues[prop] = value;
          }

          rule[fnValuesNs] = fnValues;
          return style;
        },
        onUpdate: function onUpdate(data, rule, sheet, options) {
          var styleRule = rule;
          var fnRule = styleRule[fnRuleNs]; // If we have a style function, the entire rule is dynamic and style object
          // will be returned from that function.

          if (fnRule) {
            // Empty object will remove all currently defined props
            // in case function rule returns a falsy value.
            styleRule.style = fnRule(data) || {};

            if (process.env.NODE_ENV === 'development') {
              for (var prop in styleRule.style) {
                if (typeof styleRule.style[prop] === 'function') {
                  process.env.NODE_ENV !== "production" ? warning(false, '[JSS] Function values inside function rules are not supported.') : void 0;
                  break;
                }
              }
            }
          }

          var fnValues = styleRule[fnValuesNs]; // If we have a fn values map, it is a rule with function values.

          if (fnValues) {
            for (var _prop in fnValues) {
              styleRule.prop(_prop, fnValues[_prop](data), options);
            }
          }
        }
      };
    };

    var functions = functionPlugin;

    var at$1 = '@global';
    var atPrefix = '@global ';

    var GlobalContainerRule =
    /*#__PURE__*/
    function () {
      function GlobalContainerRule(key, styles, options) {
        this.type = 'global';
        this.at = at$1;
        this.isProcessed = false;
        this.key = key;
        this.options = options;
        this.rules = new RuleList(_extends$3({}, options, {
          parent: this
        }));

        for (var selector in styles) {
          this.rules.add(selector, styles[selector]);
        }

        this.rules.process();
      }
      /**
       * Get a rule.
       */


      var _proto = GlobalContainerRule.prototype;

      _proto.getRule = function getRule(name) {
        return this.rules.get(name);
      }
      /**
       * Create and register rule, run plugins.
       */
      ;

      _proto.addRule = function addRule(name, style, options) {
        var rule = this.rules.add(name, style, options);
        if (rule) this.options.jss.plugins.onProcessRule(rule);
        return rule;
      }
      /**
       * Replace rule, run plugins.
       */
      ;

      _proto.replaceRule = function replaceRule(name, style, options) {
        var newRule = this.rules.replace(name, style, options);
        if (newRule) this.options.jss.plugins.onProcessRule(newRule);
        return newRule;
      }
      /**
       * Get index of a rule.
       */
      ;

      _proto.indexOf = function indexOf(rule) {
        return this.rules.indexOf(rule);
      }
      /**
       * Generates a CSS string.
       */
      ;

      _proto.toString = function toString(options) {
        return this.rules.toString(options);
      };

      return GlobalContainerRule;
    }();

    var GlobalPrefixedRule =
    /*#__PURE__*/
    function () {
      function GlobalPrefixedRule(key, style, options) {
        this.type = 'global';
        this.at = at$1;
        this.isProcessed = false;
        this.key = key;
        this.options = options;
        var selector = key.substr(atPrefix.length);
        this.rule = options.jss.createRule(selector, style, _extends$3({}, options, {
          parent: this
        }));
      }

      var _proto2 = GlobalPrefixedRule.prototype;

      _proto2.toString = function toString(options) {
        return this.rule ? this.rule.toString(options) : '';
      };

      return GlobalPrefixedRule;
    }();

    var separatorRegExp$1 = /\s*,\s*/g;

    function addScope(selector, scope) {
      var parts = selector.split(separatorRegExp$1);
      var scoped = '';

      for (var i = 0; i < parts.length; i++) {
        scoped += scope + " " + parts[i].trim();
        if (parts[i + 1]) scoped += ', ';
      }

      return scoped;
    }

    function handleNestedGlobalContainerRule(rule, sheet) {
      var options = rule.options,
          style = rule.style;
      var rules = style ? style[at$1] : null;
      if (!rules) return;

      for (var name in rules) {
        sheet.addRule(name, rules[name], _extends$3({}, options, {
          selector: addScope(name, rule.selector)
        }));
      }

      delete style[at$1];
    }

    function handlePrefixedGlobalRule(rule, sheet) {
      var options = rule.options,
          style = rule.style;

      for (var prop in style) {
        if (prop[0] !== '@' || prop.substr(0, at$1.length) !== at$1) continue;
        var selector = addScope(prop.substr(at$1.length), rule.selector);
        sheet.addRule(selector, style[prop], _extends$3({}, options, {
          selector: selector
        }));
        delete style[prop];
      }
    }
    /**
     * Convert nested rules to separate, remove them from original styles.
     */


    function jssGlobal() {
      function onCreateRule(name, styles, options) {
        if (!name) return null;

        if (name === at$1) {
          return new GlobalContainerRule(name, styles, options);
        }

        if (name[0] === '@' && name.substr(0, atPrefix.length) === atPrefix) {
          return new GlobalPrefixedRule(name, styles, options);
        }

        var parent = options.parent;

        if (parent) {
          if (parent.type === 'global' || parent.options.parent && parent.options.parent.type === 'global') {
            options.scoped = false;
          }
        }

        if (!options.selector && options.scoped === false) {
          options.selector = name;
        }

        return null;
      }

      function onProcessRule(rule, sheet) {
        if (rule.type !== 'style' || !sheet) return;
        handleNestedGlobalContainerRule(rule, sheet);
        handlePrefixedGlobalRule(rule, sheet);
      }

      return {
        onCreateRule: onCreateRule,
        onProcessRule: onProcessRule
      };
    }

    var separatorRegExp = /\s*,\s*/g;
    var parentRegExp = /&/g;
    var refRegExp = /\$([\w-]+)/g;
    /**
     * Convert nested rules to separate, remove them from original styles.
     */

    function jssNested() {
      // Get a function to be used for $ref replacement.
      function getReplaceRef(container, sheet) {
        return function (match, key) {
          var rule = container.getRule(key) || sheet && sheet.getRule(key);

          if (rule) {
            return rule.selector;
          }

          process.env.NODE_ENV !== "production" ? warning(false, "[JSS] Could not find the referenced rule \"" + key + "\" in \"" + (container.options.meta || container.toString()) + "\".") : void 0;
          return key;
        };
      }

      function replaceParentRefs(nestedProp, parentProp) {
        var parentSelectors = parentProp.split(separatorRegExp);
        var nestedSelectors = nestedProp.split(separatorRegExp);
        var result = '';

        for (var i = 0; i < parentSelectors.length; i++) {
          var parent = parentSelectors[i];

          for (var j = 0; j < nestedSelectors.length; j++) {
            var nested = nestedSelectors[j];
            if (result) result += ', '; // Replace all & by the parent or prefix & with the parent.

            result += nested.indexOf('&') !== -1 ? nested.replace(parentRegExp, parent) : parent + " " + nested;
          }
        }

        return result;
      }

      function getOptions(rule, container, prevOptions) {
        // Options has been already created, now we only increase index.
        if (prevOptions) return _extends$3({}, prevOptions, {
          index: prevOptions.index + 1
        });
        var nestingLevel = rule.options.nestingLevel;
        nestingLevel = nestingLevel === undefined ? 1 : nestingLevel + 1;

        var options = _extends$3({}, rule.options, {
          nestingLevel: nestingLevel,
          index: container.indexOf(rule) + 1 // We don't need the parent name to be set options for chlid.

        });

        delete options.name;
        return options;
      }

      function onProcessStyle(style, rule, sheet) {
        if (rule.type !== 'style') return style;
        var styleRule = rule;
        var container = styleRule.options.parent;
        var options;
        var replaceRef;

        for (var prop in style) {
          var isNested = prop.indexOf('&') !== -1;
          var isNestedConditional = prop[0] === '@';
          if (!isNested && !isNestedConditional) continue;
          options = getOptions(styleRule, container, options);

          if (isNested) {
            var selector = replaceParentRefs(prop, styleRule.selector); // Lazily create the ref replacer function just once for
            // all nested rules within the sheet.

            if (!replaceRef) replaceRef = getReplaceRef(container, sheet); // Replace all $refs.

            selector = selector.replace(refRegExp, replaceRef);
            var name = styleRule.key + "-" + prop;

            if ('replaceRule' in container) {
              // for backward compatibility
              container.replaceRule(name, style[prop], _extends$3({}, options, {
                selector: selector
              }));
            } else {
              container.addRule(name, style[prop], _extends$3({}, options, {
                selector: selector
              }));
            }
          } else if (isNestedConditional) {
            // Place conditional right after the parent rule to ensure right ordering.
            container.addRule(prop, {}, options).addRule(styleRule.key, style[prop], {
              selector: styleRule.selector
            });
          }

          delete style[prop];
        }

        return style;
      }

      return {
        onProcessStyle: onProcessStyle
      };
    }

    /* eslint-disable no-var, prefer-template */
    var uppercasePattern = /[A-Z]/g;
    var msPattern = /^ms-/;
    var cache$2 = {};

    function toHyphenLower(match) {
      return '-' + match.toLowerCase()
    }

    function hyphenateStyleName(name) {
      if (cache$2.hasOwnProperty(name)) {
        return cache$2[name]
      }

      var hName = name.replace(uppercasePattern, toHyphenLower);
      return (cache$2[name] = msPattern.test(hName) ? '-' + hName : hName)
    }

    /**
     * Convert camel cased property names to dash separated.
     */

    function convertCase(style) {
      var converted = {};

      for (var prop in style) {
        var key = prop.indexOf('--') === 0 ? prop : hyphenateStyleName(prop);
        converted[key] = style[prop];
      }

      if (style.fallbacks) {
        if (Array.isArray(style.fallbacks)) converted.fallbacks = style.fallbacks.map(convertCase);else converted.fallbacks = convertCase(style.fallbacks);
      }

      return converted;
    }
    /**
     * Allow camel cased property names by converting them back to dasherized.
     */


    function camelCase() {
      function onProcessStyle(style) {
        if (Array.isArray(style)) {
          // Handle rules like @font-face, which can have multiple styles in an array
          for (var index = 0; index < style.length; index++) {
            style[index] = convertCase(style[index]);
          }

          return style;
        }

        return convertCase(style);
      }

      function onChangeValue(value, prop, rule) {
        if (prop.indexOf('--') === 0) {
          return value;
        }

        var hyphenatedProp = hyphenateStyleName(prop); // There was no camel case in place

        if (prop === hyphenatedProp) return value;
        rule.prop(hyphenatedProp, value); // Core will ignore that property value we set the proper one above.

        return null;
      }

      return {
        onProcessStyle: onProcessStyle,
        onChangeValue: onChangeValue
      };
    }

    var px = hasCSSTOMSupport && CSS ? CSS.px : 'px';
    var ms$1 = hasCSSTOMSupport && CSS ? CSS.ms : 'ms';
    var percent = hasCSSTOMSupport && CSS ? CSS.percent : '%';
    /**
     * Generated jss-plugin-default-unit CSS property units
     */

    var defaultUnits = {
      // Animation properties
      'animation-delay': ms$1,
      'animation-duration': ms$1,
      // Background properties
      'background-position': px,
      'background-position-x': px,
      'background-position-y': px,
      'background-size': px,
      // Border Properties
      border: px,
      'border-bottom': px,
      'border-bottom-left-radius': px,
      'border-bottom-right-radius': px,
      'border-bottom-width': px,
      'border-left': px,
      'border-left-width': px,
      'border-radius': px,
      'border-right': px,
      'border-right-width': px,
      'border-top': px,
      'border-top-left-radius': px,
      'border-top-right-radius': px,
      'border-top-width': px,
      'border-width': px,
      'border-block': px,
      'border-block-end': px,
      'border-block-end-width': px,
      'border-block-start': px,
      'border-block-start-width': px,
      'border-block-width': px,
      'border-inline': px,
      'border-inline-end': px,
      'border-inline-end-width': px,
      'border-inline-start': px,
      'border-inline-start-width': px,
      'border-inline-width': px,
      'border-start-start-radius': px,
      'border-start-end-radius': px,
      'border-end-start-radius': px,
      'border-end-end-radius': px,
      // Margin properties
      margin: px,
      'margin-bottom': px,
      'margin-left': px,
      'margin-right': px,
      'margin-top': px,
      'margin-block': px,
      'margin-block-end': px,
      'margin-block-start': px,
      'margin-inline': px,
      'margin-inline-end': px,
      'margin-inline-start': px,
      // Padding properties
      padding: px,
      'padding-bottom': px,
      'padding-left': px,
      'padding-right': px,
      'padding-top': px,
      'padding-block': px,
      'padding-block-end': px,
      'padding-block-start': px,
      'padding-inline': px,
      'padding-inline-end': px,
      'padding-inline-start': px,
      // Mask properties
      'mask-position-x': px,
      'mask-position-y': px,
      'mask-size': px,
      // Width and height properties
      height: px,
      width: px,
      'min-height': px,
      'max-height': px,
      'min-width': px,
      'max-width': px,
      // Position properties
      bottom: px,
      left: px,
      top: px,
      right: px,
      inset: px,
      'inset-block': px,
      'inset-block-end': px,
      'inset-block-start': px,
      'inset-inline': px,
      'inset-inline-end': px,
      'inset-inline-start': px,
      // Shadow properties
      'box-shadow': px,
      'text-shadow': px,
      // Column properties
      'column-gap': px,
      'column-rule': px,
      'column-rule-width': px,
      'column-width': px,
      // Font and text properties
      'font-size': px,
      'font-size-delta': px,
      'letter-spacing': px,
      'text-decoration-thickness': px,
      'text-indent': px,
      'text-stroke': px,
      'text-stroke-width': px,
      'word-spacing': px,
      // Motion properties
      motion: px,
      'motion-offset': px,
      // Outline properties
      outline: px,
      'outline-offset': px,
      'outline-width': px,
      // Perspective properties
      perspective: px,
      'perspective-origin-x': percent,
      'perspective-origin-y': percent,
      // Transform properties
      'transform-origin': percent,
      'transform-origin-x': percent,
      'transform-origin-y': percent,
      'transform-origin-z': percent,
      // Transition properties
      'transition-delay': ms$1,
      'transition-duration': ms$1,
      // Alignment properties
      'vertical-align': px,
      'flex-basis': px,
      // Some random properties
      'shape-margin': px,
      size: px,
      gap: px,
      // Grid properties
      grid: px,
      'grid-gap': px,
      'row-gap': px,
      'grid-row-gap': px,
      'grid-column-gap': px,
      'grid-template-rows': px,
      'grid-template-columns': px,
      'grid-auto-rows': px,
      'grid-auto-columns': px,
      // Not existing properties.
      // Used to avoid issues with jss-plugin-expand integration.
      'box-shadow-x': px,
      'box-shadow-y': px,
      'box-shadow-blur': px,
      'box-shadow-spread': px,
      'font-line-height': px,
      'text-shadow-x': px,
      'text-shadow-y': px,
      'text-shadow-blur': px
    };

    /**
     * Clones the object and adds a camel cased property version.
     */

    function addCamelCasedVersion(obj) {
      var regExp = /(-[a-z])/g;

      var replace = function replace(str) {
        return str[1].toUpperCase();
      };

      var newObj = {};

      for (var key in obj) {
        newObj[key] = obj[key];
        newObj[key.replace(regExp, replace)] = obj[key];
      }

      return newObj;
    }

    var units = addCamelCasedVersion(defaultUnits);
    /**
     * Recursive deep style passing function
     */

    function iterate(prop, value, options) {
      if (value == null) return value;

      if (Array.isArray(value)) {
        for (var i = 0; i < value.length; i++) {
          value[i] = iterate(prop, value[i], options);
        }
      } else if (typeof value === 'object') {
        if (prop === 'fallbacks') {
          for (var innerProp in value) {
            value[innerProp] = iterate(innerProp, value[innerProp], options);
          }
        } else {
          for (var _innerProp in value) {
            value[_innerProp] = iterate(prop + "-" + _innerProp, value[_innerProp], options);
          }
        } // eslint-disable-next-line no-restricted-globals

      } else if (typeof value === 'number' && isNaN(value) === false) {
        var unit = options[prop] || units[prop]; // Add the unit if available, except for the special case of 0px.

        if (unit && !(value === 0 && unit === px)) {
          return typeof unit === 'function' ? unit(value).toString() : "" + value + unit;
        }

        return value.toString();
      }

      return value;
    }
    /**
     * Add unit to numeric values.
     */


    function defaultUnit(options) {
      if (options === void 0) {
        options = {};
      }

      var camelCasedOptions = addCamelCasedVersion(options);

      function onProcessStyle(style, rule) {
        if (rule.type !== 'style') return style;

        for (var prop in style) {
          style[prop] = iterate(prop, style[prop], camelCasedOptions);
        }

        return style;
      }

      function onChangeValue(value, prop) {
        return iterate(prop, value, camelCasedOptions);
      }

      return {
        onProcessStyle: onProcessStyle,
        onChangeValue: onChangeValue
      };
    }

    // Export javascript style and css style vendor prefixes.
    var js$1 = '';
    var css = '';
    var vendor = '';
    var browser$1 = '';
    var isTouch = isBrowser$2 && 'ontouchstart' in document.documentElement; // We should not do anything if required serverside.

    if (isBrowser$2) {
      // Order matters. We need to check Webkit the last one because
      // other vendors use to add Webkit prefixes to some properties
      var jsCssMap = {
        Moz: '-moz-',
        ms: '-ms-',
        O: '-o-',
        Webkit: '-webkit-'
      };

      var _document$createEleme = document.createElement('p'),
          style = _document$createEleme.style;

      var testProp = 'Transform';

      for (var key$1 in jsCssMap) {
        if (key$1 + testProp in style) {
          js$1 = key$1;
          css = jsCssMap[key$1];
          break;
        }
      } // Correctly detect the Edge browser.


      if (js$1 === 'Webkit' && 'msHyphens' in style) {
        js$1 = 'ms';
        css = jsCssMap.ms;
        browser$1 = 'edge';
      } // Correctly detect the Safari browser.


      if (js$1 === 'Webkit' && '-apple-trailing-word' in style) {
        vendor = 'apple';
      }
    }
    /**
     * Vendor prefix string for the current browser.
     *
     * @type {{js: String, css: String, vendor: String, browser: String}}
     * @api public
     */


    var prefix = {
      js: js$1,
      css: css,
      vendor: vendor,
      browser: browser$1,
      isTouch: isTouch
    };

    /**
     * Test if a keyframe at-rule should be prefixed or not
     *
     * @param {String} vendor prefix string for the current browser.
     * @return {String}
     * @api public
     */

    function supportedKeyframes(key) {
      // Keyframes is already prefixed. e.g. key = '@-webkit-keyframes a'
      if (key[1] === '-') return key; // No need to prefix IE/Edge. Older browsers will ignore unsupported rules.
      // https://caniuse.com/#search=keyframes

      if (prefix.js === 'ms') return key;
      return "@" + prefix.css + "keyframes" + key.substr(10);
    }

    // https://caniuse.com/#search=appearance

    var appearence = {
      noPrefill: ['appearance'],
      supportedProperty: function supportedProperty(prop) {
        if (prop !== 'appearance') return false;
        if (prefix.js === 'ms') return "-webkit-" + prop;
        return prefix.css + prop;
      }
    };

    // https://caniuse.com/#search=color-adjust

    var colorAdjust = {
      noPrefill: ['color-adjust'],
      supportedProperty: function supportedProperty(prop) {
        if (prop !== 'color-adjust') return false;
        if (prefix.js === 'Webkit') return prefix.css + "print-" + prop;
        return prop;
      }
    };

    var regExp = /[-\s]+(.)?/g;
    /**
     * Replaces the letter with the capital letter
     *
     * @param {String} match
     * @param {String} c
     * @return {String}
     * @api private
     */

    function toUpper(match, c) {
      return c ? c.toUpperCase() : '';
    }
    /**
     * Convert dash separated strings to camel-cased.
     *
     * @param {String} str
     * @return {String}
     * @api private
     */


    function camelize(str) {
      return str.replace(regExp, toUpper);
    }

    /**
     * Convert dash separated strings to pascal cased.
     *
     * @param {String} str
     * @return {String}
     * @api private
     */

    function pascalize(str) {
      return camelize("-" + str);
    }

    // but we can use a longhand property instead.
    // https://caniuse.com/#search=mask

    var mask = {
      noPrefill: ['mask'],
      supportedProperty: function supportedProperty(prop, style) {
        if (!/^mask/.test(prop)) return false;

        if (prefix.js === 'Webkit') {
          var longhand = 'mask-image';

          if (camelize(longhand) in style) {
            return prop;
          }

          if (prefix.js + pascalize(longhand) in style) {
            return prefix.css + prop;
          }
        }

        return prop;
      }
    };

    // https://caniuse.com/#search=text-orientation

    var textOrientation = {
      noPrefill: ['text-orientation'],
      supportedProperty: function supportedProperty(prop) {
        if (prop !== 'text-orientation') return false;

        if (prefix.vendor === 'apple' && !prefix.isTouch) {
          return prefix.css + prop;
        }

        return prop;
      }
    };

    // https://caniuse.com/#search=transform

    var transform$1 = {
      noPrefill: ['transform'],
      supportedProperty: function supportedProperty(prop, style, options) {
        if (prop !== 'transform') return false;

        if (options.transform) {
          return prop;
        }

        return prefix.css + prop;
      }
    };

    // https://caniuse.com/#search=transition

    var transition = {
      noPrefill: ['transition'],
      supportedProperty: function supportedProperty(prop, style, options) {
        if (prop !== 'transition') return false;

        if (options.transition) {
          return prop;
        }

        return prefix.css + prop;
      }
    };

    // https://caniuse.com/#search=writing-mode

    var writingMode = {
      noPrefill: ['writing-mode'],
      supportedProperty: function supportedProperty(prop) {
        if (prop !== 'writing-mode') return false;

        if (prefix.js === 'Webkit' || prefix.js === 'ms' && prefix.browser !== 'edge') {
          return prefix.css + prop;
        }

        return prop;
      }
    };

    // https://caniuse.com/#search=user-select

    var userSelect = {
      noPrefill: ['user-select'],
      supportedProperty: function supportedProperty(prop) {
        if (prop !== 'user-select') return false;

        if (prefix.js === 'Moz' || prefix.js === 'ms' || prefix.vendor === 'apple') {
          return prefix.css + prop;
        }

        return prop;
      }
    };

    // https://caniuse.com/#search=multicolumn
    // https://github.com/postcss/autoprefixer/issues/491
    // https://github.com/postcss/autoprefixer/issues/177

    var breakPropsOld = {
      supportedProperty: function supportedProperty(prop, style) {
        if (!/^break-/.test(prop)) return false;

        if (prefix.js === 'Webkit') {
          var jsProp = "WebkitColumn" + pascalize(prop);
          return jsProp in style ? prefix.css + "column-" + prop : false;
        }

        if (prefix.js === 'Moz') {
          var _jsProp = "page" + pascalize(prop);

          return _jsProp in style ? "page-" + prop : false;
        }

        return false;
      }
    };

    // See https://github.com/postcss/autoprefixer/issues/324.

    var inlineLogicalOld = {
      supportedProperty: function supportedProperty(prop, style) {
        if (!/^(border|margin|padding)-inline/.test(prop)) return false;
        if (prefix.js === 'Moz') return prop;
        var newProp = prop.replace('-inline', '');
        return prefix.js + pascalize(newProp) in style ? prefix.css + newProp : false;
      }
    };

    // Camelization is required because we can't test using.
    // CSS syntax for e.g. in FF.

    var unprefixed = {
      supportedProperty: function supportedProperty(prop, style) {
        return camelize(prop) in style ? prop : false;
      }
    };

    var prefixed = {
      supportedProperty: function supportedProperty(prop, style) {
        var pascalized = pascalize(prop); // Return custom CSS variable without prefixing.

        if (prop[0] === '-') return prop; // Return already prefixed value without prefixing.

        if (prop[0] === '-' && prop[1] === '-') return prop;
        if (prefix.js + pascalized in style) return prefix.css + prop; // Try webkit fallback.

        if (prefix.js !== 'Webkit' && "Webkit" + pascalized in style) return "-webkit-" + prop;
        return false;
      }
    };

    // https://caniuse.com/#search=scroll-snap

    var scrollSnap = {
      supportedProperty: function supportedProperty(prop) {
        if (prop.substring(0, 11) !== 'scroll-snap') return false;

        if (prefix.js === 'ms') {
          return "" + prefix.css + prop;
        }

        return prop;
      }
    };

    // https://caniuse.com/#search=overscroll-behavior

    var overscrollBehavior = {
      supportedProperty: function supportedProperty(prop) {
        if (prop !== 'overscroll-behavior') return false;

        if (prefix.js === 'ms') {
          return prefix.css + "scroll-chaining";
        }

        return prop;
      }
    };

    var propMap = {
      'flex-grow': 'flex-positive',
      'flex-shrink': 'flex-negative',
      'flex-basis': 'flex-preferred-size',
      'justify-content': 'flex-pack',
      order: 'flex-order',
      'align-items': 'flex-align',
      'align-content': 'flex-line-pack' // 'align-self' is handled by 'align-self' plugin.

    }; // Support old flex spec from 2012.

    var flex2012 = {
      supportedProperty: function supportedProperty(prop, style) {
        var newProp = propMap[prop];
        if (!newProp) return false;
        return prefix.js + pascalize(newProp) in style ? prefix.css + newProp : false;
      }
    };

    var propMap$1 = {
      flex: 'box-flex',
      'flex-grow': 'box-flex',
      'flex-direction': ['box-orient', 'box-direction'],
      order: 'box-ordinal-group',
      'align-items': 'box-align',
      'flex-flow': ['box-orient', 'box-direction'],
      'justify-content': 'box-pack'
    };
    var propKeys = Object.keys(propMap$1);

    var prefixCss = function prefixCss(p) {
      return prefix.css + p;
    }; // Support old flex spec from 2009.


    var flex2009 = {
      supportedProperty: function supportedProperty(prop, style, _ref) {
        var multiple = _ref.multiple;

        if (propKeys.indexOf(prop) > -1) {
          var newProp = propMap$1[prop];

          if (!Array.isArray(newProp)) {
            return prefix.js + pascalize(newProp) in style ? prefix.css + newProp : false;
          }

          if (!multiple) return false;

          for (var i = 0; i < newProp.length; i++) {
            if (!(prefix.js + pascalize(newProp[0]) in style)) {
              return false;
            }
          }

          return newProp.map(prefixCss);
        }

        return false;
      }
    };

    // plugins = [
    //   ...plugins,
    //    breakPropsOld,
    //    inlineLogicalOld,
    //    unprefixed,
    //    prefixed,
    //    scrollSnap,
    //    flex2012,
    //    flex2009
    // ]
    // Plugins without 'noPrefill' value, going last.
    // 'flex-*' plugins should be at the bottom.
    // 'flex2009' going after 'flex2012'.
    // 'prefixed' going after 'unprefixed'

    var plugins = [appearence, colorAdjust, mask, textOrientation, transform$1, transition, writingMode, userSelect, breakPropsOld, inlineLogicalOld, unprefixed, prefixed, scrollSnap, overscrollBehavior, flex2012, flex2009];
    var propertyDetectors = plugins.filter(function (p) {
      return p.supportedProperty;
    }).map(function (p) {
      return p.supportedProperty;
    });
    var noPrefill = plugins.filter(function (p) {
      return p.noPrefill;
    }).reduce(function (a, p) {
      a.push.apply(a, _toConsumableArray(p.noPrefill));
      return a;
    }, []);

    var el$1;
    var cache = {};

    if (isBrowser$2) {
      el$1 = document.createElement('p'); // We test every property on vendor prefix requirement.
      // Once tested, result is cached. It gives us up to 70% perf boost.
      // http://jsperf.com/element-style-object-access-vs-plain-object
      //
      // Prefill cache with known css properties to reduce amount of
      // properties we need to feature test at runtime.
      // http://davidwalsh.name/vendor-prefix

      var computed = window.getComputedStyle(document.documentElement, '');

      for (var key$1$1 in computed) {
        // eslint-disable-next-line no-restricted-globals
        if (!isNaN(key$1$1)) cache[computed[key$1$1]] = computed[key$1$1];
      } // Properties that cannot be correctly detected using the
      // cache prefill method.


      noPrefill.forEach(function (x) {
        return delete cache[x];
      });
    }
    /**
     * Test if a property is supported, returns supported property with vendor
     * prefix if required. Returns `false` if not supported.
     *
     * @param {String} prop dash separated
     * @param {Object} [options]
     * @return {String|Boolean}
     * @api public
     */


    function supportedProperty(prop, options) {
      if (options === void 0) {
        options = {};
      }

      // For server-side rendering.
      if (!el$1) return prop; // Remove cache for benchmark tests or return property from the cache.

      if (process.env.NODE_ENV !== 'benchmark' && cache[prop] != null) {
        return cache[prop];
      } // Check if 'transition' or 'transform' natively supported in browser.


      if (prop === 'transition' || prop === 'transform') {
        options[prop] = prop in el$1.style;
      } // Find a plugin for current prefix property.


      for (var i = 0; i < propertyDetectors.length; i++) {
        cache[prop] = propertyDetectors[i](prop, el$1.style, options); // Break loop, if value found.

        if (cache[prop]) break;
      } // Reset styles for current property.
      // Firefox can even throw an error for invalid properties, e.g., "0".


      try {
        el$1.style[prop] = '';
      } catch (err) {
        return false;
      }

      return cache[prop];
    }

    var cache$1 = {};
    var transitionProperties = {
      transition: 1,
      'transition-property': 1,
      '-webkit-transition': 1,
      '-webkit-transition-property': 1
    };
    var transPropsRegExp = /(^\s*[\w-]+)|, (\s*[\w-]+)(?![^()]*\))/g;
    var el$1$1;
    /**
     * Returns prefixed value transition/transform if needed.
     *
     * @param {String} match
     * @param {String} p1
     * @param {String} p2
     * @return {String}
     * @api private
     */

    function prefixTransitionCallback(match, p1, p2) {
      if (p1 === 'var') return 'var';
      if (p1 === 'all') return 'all';
      if (p2 === 'all') return ', all';
      var prefixedValue = p1 ? supportedProperty(p1) : ", " + supportedProperty(p2);
      if (!prefixedValue) return p1 || p2;
      return prefixedValue;
    }

    if (isBrowser$2) el$1$1 = document.createElement('p');
    /**
     * Returns prefixed value if needed. Returns `false` if value is not supported.
     *
     * @param {String} property
     * @param {String} value
     * @return {String|Boolean}
     * @api public
     */

    function supportedValue(property, value) {
      // For server-side rendering.
      var prefixedValue = value;
      if (!el$1$1 || property === 'content') return value; // It is a string or a number as a string like '1'.
      // We want only prefixable values here.
      // eslint-disable-next-line no-restricted-globals

      if (typeof prefixedValue !== 'string' || !isNaN(parseInt(prefixedValue, 10))) {
        return prefixedValue;
      } // Create cache key for current value.


      var cacheKey = property + prefixedValue; // Remove cache for benchmark tests or return value from cache.

      if (process.env.NODE_ENV !== 'benchmark' && cache$1[cacheKey] != null) {
        return cache$1[cacheKey];
      } // IE can even throw an error in some cases, for e.g. style.content = 'bar'.


      try {
        // Test value as it is.
        el$1$1.style[property] = prefixedValue;
      } catch (err) {
        // Return false if value not supported.
        cache$1[cacheKey] = false;
        return false;
      } // If 'transition' or 'transition-property' property.


      if (transitionProperties[property]) {
        prefixedValue = prefixedValue.replace(transPropsRegExp, prefixTransitionCallback);
      } else if (el$1$1.style[property] === '') {
        // Value with a vendor prefix.
        prefixedValue = prefix.css + prefixedValue; // Hardcode test to convert "flex" to "-ms-flexbox" for IE10.

        if (prefixedValue === '-ms-flex') el$1$1.style[property] = '-ms-flexbox'; // Test prefixed value.

        el$1$1.style[property] = prefixedValue; // Return false if value not supported.

        if (el$1$1.style[property] === '') {
          cache$1[cacheKey] = false;
          return false;
        }
      } // Reset styles for current property.


      el$1$1.style[property] = ''; // Write current value to cache.

      cache$1[cacheKey] = prefixedValue;
      return cache$1[cacheKey];
    }

    /**
     * Add vendor prefix to a property name when needed.
     */

    function jssVendorPrefixer() {
      function onProcessRule(rule) {
        if (rule.type === 'keyframes') {
          var atRule = rule;
          atRule.at = supportedKeyframes(atRule.at);
        }
      }

      function prefixStyle(style) {
        for (var prop in style) {
          var value = style[prop];

          if (prop === 'fallbacks' && Array.isArray(value)) {
            style[prop] = value.map(prefixStyle);
            continue;
          }

          var changeProp = false;
          var supportedProp = supportedProperty(prop);
          if (supportedProp && supportedProp !== prop) changeProp = true;
          var changeValue = false;
          var supportedValue$1 = supportedValue(supportedProp, toCssValue(value));
          if (supportedValue$1 && supportedValue$1 !== value) changeValue = true;

          if (changeProp || changeValue) {
            if (changeProp) delete style[prop];
            style[supportedProp || prop] = supportedValue$1 || value;
          }
        }

        return style;
      }

      function onProcessStyle(style, rule) {
        if (rule.type !== 'style') return style;
        return prefixStyle(style);
      }

      function onChangeValue(value, prop) {
        return supportedValue(prop, toCssValue(value)) || value;
      }

      return {
        onProcessRule: onProcessRule,
        onProcessStyle: onProcessStyle,
        onChangeValue: onChangeValue
      };
    }

    /**
     * Sort props by length.
     */
    function jssPropsSort() {
      var sort = function sort(prop0, prop1) {
        if (prop0.length === prop1.length) {
          return prop0 > prop1 ? 1 : -1;
        }

        return prop0.length - prop1.length;
      };

      return {
        onProcessStyle: function onProcessStyle(style, rule) {
          if (rule.type !== 'style') return style;
          var newStyle = {};
          var props = Object.keys(style).sort(sort);

          for (var i = 0; i < props.length; i++) {
            newStyle[props[i]] = style[props[i]];
          }

          return newStyle;
        }
      };
    }

    function jssPreset() {
      return {
        plugins: [functions(), jssGlobal(), jssNested(), camelCase(), defaultUnit(), // Disable the vendor prefixer server-side, it does nothing.
        // This way, we can get a performance boost.
        // In the documentation, we are using `autoprefixer` to solve this problem.
        typeof window === 'undefined' ? null : jssVendorPrefixer(), jssPropsSort()]
      };
    }

    function mergeClasses() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var baseClasses = options.baseClasses,
          newClasses = options.newClasses,
          Component = options.Component;

      if (!newClasses) {
        return baseClasses;
      }

      var nextClasses = _extends$3({}, baseClasses);

      if (process.env.NODE_ENV !== 'production') {
        if (typeof newClasses === 'string') {
          console.error(["Material-UI: The value `".concat(newClasses, "` ") + "provided to the classes prop of ".concat(getDisplayName(Component), " is incorrect."), 'You might want to use the className prop instead.'].join('\n'));
          return baseClasses;
        }
      }

      Object.keys(newClasses).forEach(function (key) {
        if (process.env.NODE_ENV !== 'production') {
          if (!baseClasses[key] && newClasses[key]) {
            console.error(["Material-UI: The key `".concat(key, "` ") + "provided to the classes prop is not implemented in ".concat(getDisplayName(Component), "."), "You can only override one of the following: ".concat(Object.keys(baseClasses).join(','), ".")].join('\n'));
          }

          if (newClasses[key] && typeof newClasses[key] !== 'string') {
            console.error(["Material-UI: The key `".concat(key, "` ") + "provided to the classes prop is not valid for ".concat(getDisplayName(Component), "."), "You need to provide a non empty string instead of: ".concat(newClasses[key], ".")].join('\n'));
          }
        }

        if (newClasses[key]) {
          nextClasses[key] = "".concat(baseClasses[key], " ").concat(newClasses[key]);
        }
      });
      return nextClasses;
    }

    // Used https://github.com/thinkloop/multi-key-cache as inspiration
    var multiKeyStore = {
      set: function set(cache, key1, key2, value) {
        var subCache = cache.get(key1);

        if (!subCache) {
          subCache = new Map();
          cache.set(key1, subCache);
        }

        subCache.set(key2, value);
      },
      get: function get(cache, key1, key2) {
        var subCache = cache.get(key1);
        return subCache ? subCache.get(key2) : undefined;
      },
      delete: function _delete(cache, key1, key2) {
        var subCache = cache.get(key1);
        subCache.delete(key2);
      }
    };
    var multiKeyStore$1 = multiKeyStore;

    var ThemeContext = React__default["default"].createContext(null);

    if (process.env.NODE_ENV !== 'production') {
      ThemeContext.displayName = 'ThemeContext';
    }

    var ThemeContext$1 = ThemeContext;

    function useTheme$1() {
      var theme = React__default["default"].useContext(ThemeContext$1);

      if (process.env.NODE_ENV !== 'production') {
        // eslint-disable-next-line react-hooks/rules-of-hooks
        React__default["default"].useDebugValue(theme);
      }

      return theme;
    }

    var jss = createJss(jssPreset()); // Use a singleton or the provided one by the context.
    //
    // The counter-based approach doesn't tolerate any mistake.
    // It's much safer to use the same counter everywhere.

    var generateClassName = createGenerateClassName(); // Exported for test purposes

    var sheetsManager = new Map();
    var defaultOptions = {
      disableGeneration: false,
      generateClassName: generateClassName,
      jss: jss,
      sheetsCache: null,
      sheetsManager: sheetsManager,
      sheetsRegistry: null
    };
    var StylesContext = React__default["default"].createContext(defaultOptions);

    if (process.env.NODE_ENV !== 'production') {
      StylesContext.displayName = 'StylesContext';
    }

    var injectFirstNode;
    function StylesProvider(props) {
      var children = props.children,
          _props$injectFirst = props.injectFirst,
          injectFirst = _props$injectFirst === void 0 ? false : _props$injectFirst,
          _props$disableGenerat = props.disableGeneration,
          disableGeneration = _props$disableGenerat === void 0 ? false : _props$disableGenerat,
          localOptions = _objectWithoutProperties(props, ["children", "injectFirst", "disableGeneration"]);

      var outerOptions = React__default["default"].useContext(StylesContext);

      var context = _extends$3({}, outerOptions, {
        disableGeneration: disableGeneration
      }, localOptions);

      if (process.env.NODE_ENV !== 'production') {
        if (typeof window === 'undefined' && !context.sheetsManager) {
          console.error('Material-UI: You need to use the ServerStyleSheets API when rendering on the server.');
        }
      }

      if (process.env.NODE_ENV !== 'production') {
        if (context.jss.options.insertionPoint && injectFirst) {
          console.error('Material-UI: You cannot use a custom insertionPoint and <StylesContext injectFirst> at the same time.');
        }
      }

      if (process.env.NODE_ENV !== 'production') {
        if (injectFirst && localOptions.jss) {
          console.error('Material-UI: You cannot use the jss and injectFirst props at the same time.');
        }
      }

      if (!context.jss.options.insertionPoint && injectFirst && typeof window !== 'undefined') {
        if (!injectFirstNode) {
          var head = document.head;
          injectFirstNode = document.createComment('mui-inject-first');
          head.insertBefore(injectFirstNode, head.firstChild);
        }

        context.jss = createJss({
          plugins: jssPreset().plugins,
          insertionPoint: injectFirstNode
        });
      }

      return /*#__PURE__*/React__default["default"].createElement(StylesContext.Provider, {
        value: context
      }, children);
    }
    process.env.NODE_ENV !== "production" ? StylesProvider.propTypes = {
      /**
       * Your component tree.
       */
      children: re.node.isRequired,

      /**
       * You can disable the generation of the styles with this option.
       * It can be useful when traversing the React tree outside of the HTML
       * rendering step on the server.
       * Let's say you are using react-apollo to extract all
       * the queries made by the interface server-side - you can significantly speed up the traversal with this prop.
       */
      disableGeneration: re.bool,

      /**
       * JSS's class name generator.
       */
      generateClassName: re.func,

      /**
       * By default, the styles are injected last in the <head> element of the page.
       * As a result, they gain more specificity than any other style sheet.
       * If you want to override Material-UI's styles, set this prop.
       */
      injectFirst: re.bool,

      /**
       * JSS's instance.
       */
      jss: re.object,

      /**
       * @ignore
       */
      serverGenerateClassName: re.func,

      /**
       * @ignore
       *
       * Beta feature.
       *
       * Cache for the sheets.
       */
      sheetsCache: re.object,

      /**
       * @ignore
       *
       * The sheetsManager is used to deduplicate style sheet injection in the page.
       * It's deduplicating using the (theme, styles) couple.
       * On the server, you should provide a new instance for each request.
       */
      sheetsManager: re.object,

      /**
       * @ignore
       *
       * Collect the sheets.
       */
      sheetsRegistry: re.object
    } : void 0;

    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== "production" ? StylesProvider.propTypes = exactProp(StylesProvider.propTypes) : void 0;
    }

    /* eslint-disable import/prefer-default-export */
    // Global index counter to preserve source order.
    // We create the style sheet during the creation of the component,
    // children are handled after the parents, so the order of style elements would be parent->child.
    // It is a problem though when a parent passes a className
    // which needs to override any child's styles.
    // StyleSheet of the child has a higher specificity, because of the source order.
    // So our solution is to render sheets them in the reverse order child->sheet, so
    // that parent has a higher specificity.
    var indexCounter = -1e9;
    function increment() {
      indexCounter += 1;

      if (process.env.NODE_ENV !== 'production') {
        if (indexCounter >= 0) {
          console.warn(['Material-UI: You might have a memory leak.', 'The indexCounter is not supposed to grow that much.'].join('\n'));
        }
      }

      return indexCounter;
    }

    // We use the same empty object to ref count the styles that don't need a theme object.
    var noopTheme = {};
    var noopTheme$1 = noopTheme;

    function getStylesCreator(stylesOrCreator) {
      var themingEnabled = typeof stylesOrCreator === 'function';

      if (process.env.NODE_ENV !== 'production') {
        if (_typeof$g(stylesOrCreator) !== 'object' && !themingEnabled) {
          console.error(['Material-UI: The `styles` argument provided is invalid.', 'You need to provide a function generating the styles or a styles object.'].join('\n'));
        }
      }

      return {
        create: function create(theme, name) {
          var styles;

          try {
            styles = themingEnabled ? stylesOrCreator(theme) : stylesOrCreator;
          } catch (err) {
            if (process.env.NODE_ENV !== 'production') {
              if (themingEnabled === true && theme === noopTheme$1) {
                // TODO: prepend error message/name instead
                console.error(['Material-UI: The `styles` argument provided is invalid.', 'You are providing a function without a theme in the context.', 'One of the parent elements needs to use a ThemeProvider.'].join('\n'));
              }
            }

            throw err;
          }

          if (!name || !theme.overrides || !theme.overrides[name]) {
            return styles;
          }

          var overrides = theme.overrides[name];

          var stylesWithOverrides = _extends$3({}, styles);

          Object.keys(overrides).forEach(function (key) {
            if (process.env.NODE_ENV !== 'production') {
              if (!stylesWithOverrides[key]) {
                console.warn(['Material-UI: You are trying to override a style that does not exist.', "Fix the `".concat(key, "` key of `theme.overrides.").concat(name, "`.")].join('\n'));
              }
            }

            stylesWithOverrides[key] = deepmerge$1(stylesWithOverrides[key], overrides[key]);
          });
          return stylesWithOverrides;
        },
        options: {}
      };
    }

    function getClasses(_ref, classes, Component) {
      var state = _ref.state,
          stylesOptions = _ref.stylesOptions;

      if (stylesOptions.disableGeneration) {
        return classes || {};
      }

      if (!state.cacheClasses) {
        state.cacheClasses = {
          // Cache for the finalized classes value.
          value: null,
          // Cache for the last used classes prop pointer.
          lastProp: null,
          // Cache for the last used rendered classes pointer.
          lastJSS: {}
        };
      } // Tracks if either the rendered classes or classes prop has changed,
      // requiring the generation of a new finalized classes object.


      var generate = false;

      if (state.classes !== state.cacheClasses.lastJSS) {
        state.cacheClasses.lastJSS = state.classes;
        generate = true;
      }

      if (classes !== state.cacheClasses.lastProp) {
        state.cacheClasses.lastProp = classes;
        generate = true;
      }

      if (generate) {
        state.cacheClasses.value = mergeClasses({
          baseClasses: state.cacheClasses.lastJSS,
          newClasses: classes,
          Component: Component
        });
      }

      return state.cacheClasses.value;
    }

    function attach(_ref2, props) {
      var state = _ref2.state,
          theme = _ref2.theme,
          stylesOptions = _ref2.stylesOptions,
          stylesCreator = _ref2.stylesCreator,
          name = _ref2.name;

      if (stylesOptions.disableGeneration) {
        return;
      }

      var sheetManager = multiKeyStore$1.get(stylesOptions.sheetsManager, stylesCreator, theme);

      if (!sheetManager) {
        sheetManager = {
          refs: 0,
          staticSheet: null,
          dynamicStyles: null
        };
        multiKeyStore$1.set(stylesOptions.sheetsManager, stylesCreator, theme, sheetManager);
      }

      var options = _extends$3({}, stylesCreator.options, stylesOptions, {
        theme: theme,
        flip: typeof stylesOptions.flip === 'boolean' ? stylesOptions.flip : theme.direction === 'rtl'
      });

      options.generateId = options.serverGenerateClassName || options.generateClassName;
      var sheetsRegistry = stylesOptions.sheetsRegistry;

      if (sheetManager.refs === 0) {
        var staticSheet;

        if (stylesOptions.sheetsCache) {
          staticSheet = multiKeyStore$1.get(stylesOptions.sheetsCache, stylesCreator, theme);
        }

        var styles = stylesCreator.create(theme, name);

        if (!staticSheet) {
          staticSheet = stylesOptions.jss.createStyleSheet(styles, _extends$3({
            link: false
          }, options));
          staticSheet.attach();

          if (stylesOptions.sheetsCache) {
            multiKeyStore$1.set(stylesOptions.sheetsCache, stylesCreator, theme, staticSheet);
          }
        }

        if (sheetsRegistry) {
          sheetsRegistry.add(staticSheet);
        }

        sheetManager.staticSheet = staticSheet;
        sheetManager.dynamicStyles = getDynamicStyles(styles);
      }

      if (sheetManager.dynamicStyles) {
        var dynamicSheet = stylesOptions.jss.createStyleSheet(sheetManager.dynamicStyles, _extends$3({
          link: true
        }, options));
        dynamicSheet.update(props);
        dynamicSheet.attach();
        state.dynamicSheet = dynamicSheet;
        state.classes = mergeClasses({
          baseClasses: sheetManager.staticSheet.classes,
          newClasses: dynamicSheet.classes
        });

        if (sheetsRegistry) {
          sheetsRegistry.add(dynamicSheet);
        }
      } else {
        state.classes = sheetManager.staticSheet.classes;
      }

      sheetManager.refs += 1;
    }

    function update$1(_ref3, props) {
      var state = _ref3.state;

      if (state.dynamicSheet) {
        state.dynamicSheet.update(props);
      }
    }

    function detach$1(_ref4) {
      var state = _ref4.state,
          theme = _ref4.theme,
          stylesOptions = _ref4.stylesOptions,
          stylesCreator = _ref4.stylesCreator;

      if (stylesOptions.disableGeneration) {
        return;
      }

      var sheetManager = multiKeyStore$1.get(stylesOptions.sheetsManager, stylesCreator, theme);
      sheetManager.refs -= 1;
      var sheetsRegistry = stylesOptions.sheetsRegistry;

      if (sheetManager.refs === 0) {
        multiKeyStore$1.delete(stylesOptions.sheetsManager, stylesCreator, theme);
        stylesOptions.jss.removeStyleSheet(sheetManager.staticSheet);

        if (sheetsRegistry) {
          sheetsRegistry.remove(sheetManager.staticSheet);
        }
      }

      if (state.dynamicSheet) {
        stylesOptions.jss.removeStyleSheet(state.dynamicSheet);

        if (sheetsRegistry) {
          sheetsRegistry.remove(state.dynamicSheet);
        }
      }
    }

    function useSynchronousEffect(func, values) {
      var key = React__default["default"].useRef([]);
      var output; // Store "generation" key. Just returns a new object every time

      var currentKey = React__default["default"].useMemo(function () {
        return {};
      }, values); // eslint-disable-line react-hooks/exhaustive-deps
      // "the first render", or "memo dropped the value"

      if (key.current !== currentKey) {
        key.current = currentKey;
        output = func();
      }

      React__default["default"].useEffect(function () {
        return function () {
          if (output) {
            output();
          }
        };
      }, [currentKey] // eslint-disable-line react-hooks/exhaustive-deps
      );
    }

    function makeStyles$1(stylesOrCreator) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var name = options.name,
          classNamePrefixOption = options.classNamePrefix,
          Component = options.Component,
          _options$defaultTheme = options.defaultTheme,
          defaultTheme = _options$defaultTheme === void 0 ? noopTheme$1 : _options$defaultTheme,
          stylesOptions2 = _objectWithoutProperties(options, ["name", "classNamePrefix", "Component", "defaultTheme"]);

      var stylesCreator = getStylesCreator(stylesOrCreator);
      var classNamePrefix = name || classNamePrefixOption || 'makeStyles';
      stylesCreator.options = {
        index: increment(),
        name: name,
        meta: classNamePrefix,
        classNamePrefix: classNamePrefix
      };

      var useStyles = function useStyles() {
        var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var theme = useTheme$1() || defaultTheme;

        var stylesOptions = _extends$3({}, React__default["default"].useContext(StylesContext), stylesOptions2);

        var instance = React__default["default"].useRef();
        var shouldUpdate = React__default["default"].useRef();
        useSynchronousEffect(function () {
          var current = {
            name: name,
            state: {},
            stylesCreator: stylesCreator,
            stylesOptions: stylesOptions,
            theme: theme
          };
          attach(current, props);
          shouldUpdate.current = false;
          instance.current = current;
          return function () {
            detach$1(current);
          };
        }, [theme, stylesCreator]);
        React__default["default"].useEffect(function () {
          if (shouldUpdate.current) {
            update$1(instance.current, props);
          }

          shouldUpdate.current = true;
        });
        var classes = getClasses(instance.current, props.classes, Component);

        if (process.env.NODE_ENV !== 'production') {
          // eslint-disable-next-line react-hooks/rules-of-hooks
          React__default["default"].useDebugValue(classes);
        }

        return classes;
      };

      return useStyles;
    }

    function _classCallCheck$1(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    var ServerStyleSheets = /*#__PURE__*/function () {
      function ServerStyleSheets() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        _classCallCheck$1(this, ServerStyleSheets);

        this.options = options;
      }

      _createClass$1(ServerStyleSheets, [{
        key: "collect",
        value: function collect(children) {
          // This is needed in order to deduplicate the injection of CSS in the page.
          var sheetsManager = new Map(); // This is needed in order to inject the critical CSS.

          this.sheetsRegistry = new SheetsRegistry(); // A new class name generator

          var generateClassName = createGenerateClassName();
          return /*#__PURE__*/React__default["default"].createElement(StylesProvider, _extends$3({
            sheetsManager: sheetsManager,
            serverGenerateClassName: generateClassName,
            sheetsRegistry: this.sheetsRegistry
          }, this.options), children);
        }
      }, {
        key: "toString",
        value: function toString() {
          return this.sheetsRegistry ? this.sheetsRegistry.toString() : '';
        }
      }, {
        key: "getStyleElement",
        value: function getStyleElement(props) {
          return /*#__PURE__*/React__default["default"].createElement('style', _extends$3({
            id: 'jss-server-side',
            key: 'jss-server-side',
            dangerouslySetInnerHTML: {
              __html: this.toString()
            }
          }, props));
        }
      }]);

      return ServerStyleSheets;
    }();

    function toVal(mix) {
    	var k, y, str='';

    	if (typeof mix === 'string' || typeof mix === 'number') {
    		str += mix;
    	} else if (typeof mix === 'object') {
    		if (Array.isArray(mix)) {
    			for (k=0; k < mix.length; k++) {
    				if (mix[k]) {
    					if (y = toVal(mix[k])) {
    						str && (str += ' ');
    						str += y;
    					}
    				}
    			}
    		} else {
    			for (k in mix) {
    				if (mix[k]) {
    					str && (str += ' ');
    					str += k;
    				}
    			}
    		}
    	}

    	return str;
    }

    function r$1 () {
    	var i=0, tmp, x, str='';
    	while (i < arguments.length) {
    		if (tmp = arguments[i++]) {
    			if (x = toVal(tmp)) {
    				str && (str += ' ');
    				str += x;
    			}
    		}
    	}
    	return str;
    }

    var clsx_m = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': r$1
    });

    var reactIs$1 = {exports: {}};

    var reactIs_production_min = {};

    /** @license React v16.13.1
     * react-is.production.min.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    var b="function"===typeof Symbol&&Symbol.for,c=b?Symbol.for("react.element"):60103,d$1=b?Symbol.for("react.portal"):60106,e=b?Symbol.for("react.fragment"):60107,f=b?Symbol.for("react.strict_mode"):60108,g=b?Symbol.for("react.profiler"):60114,h$1=b?Symbol.for("react.provider"):60109,k$1=b?Symbol.for("react.context"):60110,l=b?Symbol.for("react.async_mode"):60111,m=b?Symbol.for("react.concurrent_mode"):60111,n$1=b?Symbol.for("react.forward_ref"):60112,p=b?Symbol.for("react.suspense"):60113,q=b?
    Symbol.for("react.suspense_list"):60120,r=b?Symbol.for("react.memo"):60115,t=b?Symbol.for("react.lazy"):60116,v$1=b?Symbol.for("react.block"):60121,w=b?Symbol.for("react.fundamental"):60117,x$1=b?Symbol.for("react.responder"):60118,y=b?Symbol.for("react.scope"):60119;
    function z(a){if("object"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k$1:case n$1:case t:case r:case h$1:return a;default:return u}}case d$1:return u}}}function A$1(a){return z(a)===m}reactIs_production_min.AsyncMode=l;reactIs_production_min.ConcurrentMode=m;reactIs_production_min.ContextConsumer=k$1;reactIs_production_min.ContextProvider=h$1;reactIs_production_min.Element=c;reactIs_production_min.ForwardRef=n$1;reactIs_production_min.Fragment=e;reactIs_production_min.Lazy=t;reactIs_production_min.Memo=r;reactIs_production_min.Portal=d$1;
    reactIs_production_min.Profiler=g;reactIs_production_min.StrictMode=f;reactIs_production_min.Suspense=p;reactIs_production_min.isAsyncMode=function(a){return A$1(a)||z(a)===l};reactIs_production_min.isConcurrentMode=A$1;reactIs_production_min.isContextConsumer=function(a){return z(a)===k$1};reactIs_production_min.isContextProvider=function(a){return z(a)===h$1};reactIs_production_min.isElement=function(a){return "object"===typeof a&&null!==a&&a.$$typeof===c};reactIs_production_min.isForwardRef=function(a){return z(a)===n$1};reactIs_production_min.isFragment=function(a){return z(a)===e};reactIs_production_min.isLazy=function(a){return z(a)===t};
    reactIs_production_min.isMemo=function(a){return z(a)===r};reactIs_production_min.isPortal=function(a){return z(a)===d$1};reactIs_production_min.isProfiler=function(a){return z(a)===g};reactIs_production_min.isStrictMode=function(a){return z(a)===f};reactIs_production_min.isSuspense=function(a){return z(a)===p};
    reactIs_production_min.isValidElementType=function(a){return "string"===typeof a||"function"===typeof a||a===e||a===m||a===g||a===f||a===p||a===q||"object"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h$1||a.$$typeof===k$1||a.$$typeof===n$1||a.$$typeof===w||a.$$typeof===x$1||a.$$typeof===y||a.$$typeof===v$1)};reactIs_production_min.typeOf=z;

    var reactIs_development = {};

    /** @license React v16.13.1
     * react-is.development.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */



    if (process.env.NODE_ENV !== "production") {
      (function() {

    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var hasSymbol = typeof Symbol === 'function' && Symbol.for;
    var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
    var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
    var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
    var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
    var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
    var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
    var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
    // (unstable) APIs that have been removed. Can we remove the symbols?

    var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
    var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
    var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
    var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
    var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
    var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
    var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
    var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
    var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
    var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
    var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;

    function isValidElementType(type) {
      return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
      type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
    }

    function typeOf(object) {
      if (typeof object === 'object' && object !== null) {
        var $$typeof = object.$$typeof;

        switch ($$typeof) {
          case REACT_ELEMENT_TYPE:
            var type = object.type;

            switch (type) {
              case REACT_ASYNC_MODE_TYPE:
              case REACT_CONCURRENT_MODE_TYPE:
              case REACT_FRAGMENT_TYPE:
              case REACT_PROFILER_TYPE:
              case REACT_STRICT_MODE_TYPE:
              case REACT_SUSPENSE_TYPE:
                return type;

              default:
                var $$typeofType = type && type.$$typeof;

                switch ($$typeofType) {
                  case REACT_CONTEXT_TYPE:
                  case REACT_FORWARD_REF_TYPE:
                  case REACT_LAZY_TYPE:
                  case REACT_MEMO_TYPE:
                  case REACT_PROVIDER_TYPE:
                    return $$typeofType;

                  default:
                    return $$typeof;
                }

            }

          case REACT_PORTAL_TYPE:
            return $$typeof;
        }
      }

      return undefined;
    } // AsyncMode is deprecated along with isAsyncMode

    var AsyncMode = REACT_ASYNC_MODE_TYPE;
    var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
    var ContextConsumer = REACT_CONTEXT_TYPE;
    var ContextProvider = REACT_PROVIDER_TYPE;
    var Element = REACT_ELEMENT_TYPE;
    var ForwardRef = REACT_FORWARD_REF_TYPE;
    var Fragment = REACT_FRAGMENT_TYPE;
    var Lazy = REACT_LAZY_TYPE;
    var Memo = REACT_MEMO_TYPE;
    var Portal = REACT_PORTAL_TYPE;
    var Profiler = REACT_PROFILER_TYPE;
    var StrictMode = REACT_STRICT_MODE_TYPE;
    var Suspense = REACT_SUSPENSE_TYPE;
    var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

    function isAsyncMode(object) {
      {
        if (!hasWarnedAboutDeprecatedIsAsyncMode) {
          hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

          console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
        }
      }

      return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
    }
    function isConcurrentMode(object) {
      return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
    }
    function isContextConsumer(object) {
      return typeOf(object) === REACT_CONTEXT_TYPE;
    }
    function isContextProvider(object) {
      return typeOf(object) === REACT_PROVIDER_TYPE;
    }
    function isElement(object) {
      return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    function isForwardRef(object) {
      return typeOf(object) === REACT_FORWARD_REF_TYPE;
    }
    function isFragment(object) {
      return typeOf(object) === REACT_FRAGMENT_TYPE;
    }
    function isLazy(object) {
      return typeOf(object) === REACT_LAZY_TYPE;
    }
    function isMemo(object) {
      return typeOf(object) === REACT_MEMO_TYPE;
    }
    function isPortal(object) {
      return typeOf(object) === REACT_PORTAL_TYPE;
    }
    function isProfiler(object) {
      return typeOf(object) === REACT_PROFILER_TYPE;
    }
    function isStrictMode(object) {
      return typeOf(object) === REACT_STRICT_MODE_TYPE;
    }
    function isSuspense(object) {
      return typeOf(object) === REACT_SUSPENSE_TYPE;
    }

    reactIs_development.AsyncMode = AsyncMode;
    reactIs_development.ConcurrentMode = ConcurrentMode;
    reactIs_development.ContextConsumer = ContextConsumer;
    reactIs_development.ContextProvider = ContextProvider;
    reactIs_development.Element = Element;
    reactIs_development.ForwardRef = ForwardRef;
    reactIs_development.Fragment = Fragment;
    reactIs_development.Lazy = Lazy;
    reactIs_development.Memo = Memo;
    reactIs_development.Portal = Portal;
    reactIs_development.Profiler = Profiler;
    reactIs_development.StrictMode = StrictMode;
    reactIs_development.Suspense = Suspense;
    reactIs_development.isAsyncMode = isAsyncMode;
    reactIs_development.isConcurrentMode = isConcurrentMode;
    reactIs_development.isContextConsumer = isContextConsumer;
    reactIs_development.isContextProvider = isContextProvider;
    reactIs_development.isElement = isElement;
    reactIs_development.isForwardRef = isForwardRef;
    reactIs_development.isFragment = isFragment;
    reactIs_development.isLazy = isLazy;
    reactIs_development.isMemo = isMemo;
    reactIs_development.isPortal = isPortal;
    reactIs_development.isProfiler = isProfiler;
    reactIs_development.isStrictMode = isStrictMode;
    reactIs_development.isSuspense = isSuspense;
    reactIs_development.isValidElementType = isValidElementType;
    reactIs_development.typeOf = typeOf;
      })();
    }

    if (process.env.NODE_ENV === 'production') {
      reactIs$1.exports = reactIs_production_min;
    } else {
      reactIs$1.exports = reactIs_development;
    }

    var reactIs = reactIs$1.exports;

    /**
     * Copyright 2015, Yahoo! Inc.
     * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
     */
    var REACT_STATICS = {
      childContextTypes: true,
      contextType: true,
      contextTypes: true,
      defaultProps: true,
      displayName: true,
      getDefaultProps: true,
      getDerivedStateFromError: true,
      getDerivedStateFromProps: true,
      mixins: true,
      propTypes: true,
      type: true
    };
    var KNOWN_STATICS = {
      name: true,
      length: true,
      prototype: true,
      caller: true,
      callee: true,
      arguments: true,
      arity: true
    };
    var FORWARD_REF_STATICS = {
      '$$typeof': true,
      render: true,
      defaultProps: true,
      displayName: true,
      propTypes: true
    };
    var MEMO_STATICS = {
      '$$typeof': true,
      compare: true,
      defaultProps: true,
      displayName: true,
      propTypes: true,
      type: true
    };
    var TYPE_STATICS = {};
    TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
    TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;

    function getStatics(component) {
      // React v16.11 and below
      if (reactIs.isMemo(component)) {
        return MEMO_STATICS;
      } // React v16.12 and above


      return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;
    }

    var defineProperty$3 = Object.defineProperty;
    var getOwnPropertyNames = Object.getOwnPropertyNames;
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var getOwnPropertyDescriptor$1 = Object.getOwnPropertyDescriptor;
    var getPrototypeOf$1 = Object.getPrototypeOf;
    var objectPrototype = Object.prototype;
    function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
      if (typeof sourceComponent !== 'string') {
        // don't hoist over string (html) components
        if (objectPrototype) {
          var inheritedComponent = getPrototypeOf$1(sourceComponent);

          if (inheritedComponent && inheritedComponent !== objectPrototype) {
            hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
          }
        }

        var keys = getOwnPropertyNames(sourceComponent);

        if (getOwnPropertySymbols) {
          keys = keys.concat(getOwnPropertySymbols(sourceComponent));
        }

        var targetStatics = getStatics(targetComponent);
        var sourceStatics = getStatics(sourceComponent);

        for (var i = 0; i < keys.length; ++i) {
          var key = keys[i];

          if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
            var descriptor = getOwnPropertyDescriptor$1(sourceComponent, key);

            try {
              // Avoid failures from read-only properties
              defineProperty$3(targetComponent, key, descriptor);
            } catch (e) {}
          }
        }
      }

      return targetComponent;
    }

    var hoistNonReactStatics_cjs = hoistNonReactStatics;

    function omit(input, fields) {
      var output = {};
      Object.keys(input).forEach(function (prop) {
        if (fields.indexOf(prop) === -1) {
          output[prop] = input[prop];
        }
      });
      return output;
    } // styled-components's API removes the mapping between components and styles.
    // Using components as a low-level styling construct can be simpler.


    function styled$2(Component) {
      var componentCreator = function componentCreator(style) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        var name = options.name,
            stylesOptions = _objectWithoutProperties(options, ["name"]);

        if (process.env.NODE_ENV !== 'production' && Component === undefined) {
          throw new Error(['You are calling styled(Component)(style) with an undefined component.', 'You may have forgotten to import it.'].join('\n'));
        }

        var classNamePrefix = name;

        if (process.env.NODE_ENV !== 'production') {
          if (!name) {
            // Provide a better DX outside production.
            var displayName = getDisplayName(Component);

            if (displayName !== undefined) {
              classNamePrefix = displayName;
            }
          }
        }

        var stylesOrCreator = typeof style === 'function' ? function (theme) {
          return {
            root: function root(props) {
              return style(_extends$3({
                theme: theme
              }, props));
            }
          };
        } : {
          root: style
        };
        var useStyles = makeStyles$1(stylesOrCreator, _extends$3({
          Component: Component,
          name: name || Component.displayName,
          classNamePrefix: classNamePrefix
        }, stylesOptions));
        var filterProps;
        var propTypes = {};

        if (style.filterProps) {
          filterProps = style.filterProps;
          delete style.filterProps;
        }
        /* eslint-disable react/forbid-foreign-prop-types */


        if (style.propTypes) {
          propTypes = style.propTypes;
          delete style.propTypes;
        }
        /* eslint-enable react/forbid-foreign-prop-types */


        var StyledComponent = /*#__PURE__*/React__default["default"].forwardRef(function StyledComponent(props, ref) {
          var children = props.children,
              classNameProp = props.className,
              clone = props.clone,
              ComponentProp = props.component,
              other = _objectWithoutProperties(props, ["children", "className", "clone", "component"]);

          var classes = useStyles(props);
          var className = r$1(classes.root, classNameProp);
          var spread = other;

          if (filterProps) {
            spread = omit(spread, filterProps);
          }

          if (clone) {
            return /*#__PURE__*/React__default["default"].cloneElement(children, _extends$3({
              className: r$1(children.props.className, className)
            }, spread));
          }

          if (typeof children === 'function') {
            return children(_extends$3({
              className: className
            }, spread));
          }

          var FinalComponent = ComponentProp || Component;
          return /*#__PURE__*/React__default["default"].createElement(FinalComponent, _extends$3({
            ref: ref,
            className: className
          }, spread), children);
        });
        process.env.NODE_ENV !== "production" ? StyledComponent.propTypes = _extends$3({
          /**
           * A render function or node.
           */
          children: re.oneOfType([re.node, re.func]),

          /**
           * @ignore
           */
          className: re.string,

          /**
           * If `true`, the component will recycle it's children HTML element.
           * It's using `React.cloneElement` internally.
           *
           * This prop will be deprecated and removed in v5
           */
          clone: chainPropTypes$1(re.bool, function (props) {
            if (props.clone && props.component) {
              return new Error('You can not use the clone and component prop at the same time.');
            }

            return null;
          }),

          /**
           * The component used for the root node.
           * Either a string to use a HTML element or a component.
           */
          component: re
          /* @typescript-to-proptypes-ignore */
          .elementType
        }, propTypes) : void 0;

        if (process.env.NODE_ENV !== 'production') {
          StyledComponent.displayName = "Styled(".concat(classNamePrefix, ")");
        }

        hoistNonReactStatics_cjs(StyledComponent, Component);
        return StyledComponent;
      };

      return componentCreator;
    }

    function mergeOuterLocalTheme(outerTheme, localTheme) {
      if (typeof localTheme === 'function') {
        var mergedTheme = localTheme(outerTheme);

        if (process.env.NODE_ENV !== 'production') {
          if (!mergedTheme) {
            console.error(['Material-UI: You should return an object from your theme function, i.e.', '<ThemeProvider theme={() => ({})} />'].join('\n'));
          }
        }

        return mergedTheme;
      }

      return _extends$3({}, outerTheme, localTheme);
    }
    /**
     * This component takes a `theme` prop.
     * It makes the `theme` available down the React tree thanks to React context.
     * This component should preferably be used at **the root of your component tree**.
     */


    function ThemeProvider(props) {
      var children = props.children,
          localTheme = props.theme;
      var outerTheme = useTheme$1();

      if (process.env.NODE_ENV !== 'production') {
        if (outerTheme === null && typeof localTheme === 'function') {
          console.error(['Material-UI: You are providing a theme function prop to the ThemeProvider component:', '<ThemeProvider theme={outerTheme => outerTheme} />', '', 'However, no outer theme is present.', 'Make sure a theme is already injected higher in the React tree ' + 'or provide a theme object.'].join('\n'));
        }
      }

      var theme = React__default["default"].useMemo(function () {
        var output = outerTheme === null ? localTheme : mergeOuterLocalTheme(outerTheme, localTheme);

        if (output != null) {
          output[nested] = outerTheme !== null;
        }

        return output;
      }, [localTheme, outerTheme]);
      return /*#__PURE__*/React__default["default"].createElement(ThemeContext$1.Provider, {
        value: theme
      }, children);
    }

    process.env.NODE_ENV !== "production" ? ThemeProvider.propTypes = {
      /**
       * Your component tree.
       */
      children: re.node.isRequired,

      /**
       * A theme object. You can provide a function to extend the outer theme.
       */
      theme: re.oneOfType([re.object, re.func]).isRequired
    } : void 0;

    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== "production" ? ThemeProvider.propTypes = exactProp(ThemeProvider.propTypes) : void 0;
    }

    // It does not modify the component passed to it;
    // instead, it returns a new component, with a `classes` property.

    var withStyles$1 = function withStyles(stylesOrCreator) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return function (Component) {
        var defaultTheme = options.defaultTheme,
            _options$withTheme = options.withTheme,
            withTheme = _options$withTheme === void 0 ? false : _options$withTheme,
            name = options.name,
            stylesOptions = _objectWithoutProperties(options, ["defaultTheme", "withTheme", "name"]);

        if (process.env.NODE_ENV !== 'production') {
          if (Component === undefined) {
            throw new Error(['You are calling withStyles(styles)(Component) with an undefined component.', 'You may have forgotten to import it.'].join('\n'));
          }
        }

        var classNamePrefix = name;

        if (process.env.NODE_ENV !== 'production') {
          if (!name) {
            // Provide a better DX outside production.
            var displayName = getDisplayName(Component);

            if (displayName !== undefined) {
              classNamePrefix = displayName;
            }
          }
        }

        var useStyles = makeStyles$1(stylesOrCreator, _extends$3({
          defaultTheme: defaultTheme,
          Component: Component,
          name: name || Component.displayName,
          classNamePrefix: classNamePrefix
        }, stylesOptions));
        var WithStyles = /*#__PURE__*/React__default["default"].forwardRef(function WithStyles(props, ref) {
          props.classes;
              var innerRef = props.innerRef,
              other = _objectWithoutProperties(props, ["classes", "innerRef"]); // The wrapper receives only user supplied props, which could be a subset of
          // the actual props Component might receive due to merging with defaultProps.
          // So copying it here would give us the same result in the wrapper as well.


          var classes = useStyles(_extends$3({}, Component.defaultProps, props));
          var theme;
          var more = other;

          if (typeof name === 'string' || withTheme) {
            // name and withTheme are invariant in the outer scope
            // eslint-disable-next-line react-hooks/rules-of-hooks
            theme = useTheme$1() || defaultTheme;

            if (name) {
              more = getThemeProps({
                theme: theme,
                name: name,
                props: other
              });
            } // Provide the theme to the wrapped component.
            // So we don't have to use the `withTheme()` Higher-order Component.


            if (withTheme && !more.theme) {
              more.theme = theme;
            }
          }

          return /*#__PURE__*/React__default["default"].createElement(Component, _extends$3({
            ref: innerRef || ref,
            classes: classes
          }, more));
        });
        process.env.NODE_ENV !== "production" ? WithStyles.propTypes = {
          /**
           * Override or extend the styles applied to the component.
           */
          classes: re.object,

          /**
           * Use that prop to pass a ref to the decorated component.
           * @deprecated
           */
          innerRef: chainPropTypes$1(re.oneOfType([re.func, re.object]), function (props) {
            if (props.innerRef == null) {
              return null;
            }

            return null; // return new Error(
            //   'Material-UI: The `innerRef` prop is deprecated and will be removed in v5. ' +
            //     'Refs are now automatically forwarded to the inner component.',
            // );
          })
        } : void 0;

        if (process.env.NODE_ENV !== 'production') {
          WithStyles.displayName = "WithStyles(".concat(getDisplayName(Component), ")");
        }

        hoistNonReactStatics_cjs(WithStyles, Component);

        if (process.env.NODE_ENV !== 'production') {
          // Exposed for test purposes.
          WithStyles.Naked = Component;
          WithStyles.options = options;
          WithStyles.useStyles = useStyles;
        }

        return WithStyles;
      };
    };

    var withStylesWithoutDefault = withStyles$1;

    function withThemeCreator() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var defaultTheme = options.defaultTheme;

      var withTheme = function withTheme(Component) {
        if (process.env.NODE_ENV !== 'production') {
          if (Component === undefined) {
            throw new Error(['You are calling withTheme(Component) with an undefined component.', 'You may have forgotten to import it.'].join('\n'));
          }
        }

        var WithTheme = /*#__PURE__*/React__default["default"].forwardRef(function WithTheme(props, ref) {
          var innerRef = props.innerRef,
              other = _objectWithoutProperties(props, ["innerRef"]);

          var theme = useTheme$1() || defaultTheme;
          return /*#__PURE__*/React__default["default"].createElement(Component, _extends$3({
            theme: theme,
            ref: innerRef || ref
          }, other));
        });
        process.env.NODE_ENV !== "production" ? WithTheme.propTypes = {
          /**
           * Use that prop to pass a ref to the decorated component.
           * @deprecated
           */
          innerRef: chainPropTypes$1(re.oneOfType([re.func, re.object]), function (props) {
            if (props.innerRef == null) {
              return null;
            }

            return new Error('Material-UI: The `innerRef` prop is deprecated and will be removed in v5. ' + 'Refs are now automatically forwarded to the inner component.');
          })
        } : void 0;

        if (process.env.NODE_ENV !== 'production') {
          WithTheme.displayName = "WithTheme(".concat(getDisplayName(Component), ")");
        }

        hoistNonReactStatics_cjs(WithTheme, Component);

        if (process.env.NODE_ENV !== 'production') {
          // Exposed for test purposes.
          WithTheme.Naked = Component;
        }

        return WithTheme;
      };

      return withTheme;
    } // Provide the theme object as a prop to the input component.
    // It's an alternative API to useTheme().
    // We encourage the usage of useTheme() where possible.

    withThemeCreator();

    // To remove in v5

    function createStyles(styles) {
      // warning(
      //   warnOnce,
      //   [
      //     'Material-UI: createStyles from @material-ui/core/styles is deprecated.',
      //     'Please use @material-ui/styles/createStyles',
      //   ].join('\n'),
      // );
      // warnOnce = true;
      return createStyles$1(styles);
    }

    var defaultTheme = createTheme();
    var defaultTheme$1 = defaultTheme;

    function makeStyles(stylesOrCreator) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return makeStyles$1(stylesOrCreator, _extends$3({
        defaultTheme: defaultTheme$1
      }, options));
    }

    function isUnitless(value) {
      return String(parseFloat(value)).length === String(value).length;
    } // Ported from Compass
    // https://github.com/Compass/compass/blob/master/core/stylesheets/compass/typography/_units.scss
    // Emulate the sass function "unit"

    function getUnit(input) {
      return String(input).match(/[\d.\-+]*\s*(.*)/)[1] || '';
    } // Emulate the sass function "unitless"

    function toUnitless(length) {
      return parseFloat(length);
    } // Convert any CSS <length> or <percentage> value to any another.
    // From https://github.com/KyleAMathews/convert-css-length

    function convertLength(baseFontSize) {
      return function (length, toUnit) {
        var fromUnit = getUnit(length); // Optimize for cases where `from` and `to` units are accidentally the same.

        if (fromUnit === toUnit) {
          return length;
        } // Convert input length to pixels.


        var pxLength = toUnitless(length);

        if (fromUnit !== 'px') {
          if (fromUnit === 'em') {
            pxLength = toUnitless(length) * toUnitless(baseFontSize);
          } else if (fromUnit === 'rem') {
            pxLength = toUnitless(length) * toUnitless(baseFontSize);
            return length;
          }
        } // Convert length in pixels to the output unit


        var outputLength = pxLength;

        if (toUnit !== 'px') {
          if (toUnit === 'em') {
            outputLength = pxLength / toUnitless(baseFontSize);
          } else if (toUnit === 'rem') {
            outputLength = pxLength / toUnitless(baseFontSize);
          } else {
            return length;
          }
        }

        return parseFloat(outputLength.toFixed(5)) + toUnit;
      };
    }
    function alignProperty(_ref) {
      var size = _ref.size,
          grid = _ref.grid;
      var sizeBelow = size - size % grid;
      var sizeAbove = sizeBelow + grid;
      return size - sizeBelow < sizeAbove - size ? sizeBelow : sizeAbove;
    } // fontGrid finds a minimal grid (in rem) for the fontSize values so that the
    // lineHeight falls under a x pixels grid, 4px in the case of Material Design,
    // without changing the relative line height

    function fontGrid(_ref2) {
      var lineHeight = _ref2.lineHeight,
          pixels = _ref2.pixels,
          htmlFontSize = _ref2.htmlFontSize;
      return pixels / (lineHeight * htmlFontSize);
    }
    /**
     * generate a responsive version of a given CSS property
     * @example
     * responsiveProperty({
     *   cssProperty: 'fontSize',
     *   min: 15,
     *   max: 20,
     *   unit: 'px',
     *   breakpoints: [300, 600],
     * })
     *
     * // this returns
     *
     * {
     *   fontSize: '15px',
     *   '@media (min-width:300px)': {
     *     fontSize: '17.5px',
     *   },
     *   '@media (min-width:600px)': {
     *     fontSize: '20px',
     *   },
     * }
     *
     * @param {Object} params
     * @param {string} params.cssProperty - The CSS property to be made responsive
     * @param {number} params.min - The smallest value of the CSS property
     * @param {number} params.max - The largest value of the CSS property
     * @param {string} [params.unit] - The unit to be used for the CSS property
     * @param {Array.number} [params.breakpoints]  - An array of breakpoints
     * @param {number} [params.alignStep] - Round scaled value to fall under this grid
     * @returns {Object} responsive styles for {params.cssProperty}
     */

    function responsiveProperty(_ref3) {
      var cssProperty = _ref3.cssProperty,
          min = _ref3.min,
          max = _ref3.max,
          _ref3$unit = _ref3.unit,
          unit = _ref3$unit === void 0 ? 'rem' : _ref3$unit,
          _ref3$breakpoints = _ref3.breakpoints,
          breakpoints = _ref3$breakpoints === void 0 ? [600, 960, 1280] : _ref3$breakpoints,
          _ref3$transform = _ref3.transform,
          transform = _ref3$transform === void 0 ? null : _ref3$transform;

      var output = _defineProperty({}, cssProperty, "".concat(min).concat(unit));

      var factor = (max - min) / breakpoints[breakpoints.length - 1];
      breakpoints.forEach(function (breakpoint) {
        var value = min + factor * breakpoint;

        if (transform !== null) {
          value = transform(value);
        }

        output["@media (min-width:".concat(breakpoint, "px)")] = _defineProperty({}, cssProperty, "".concat(Math.round(value * 10000) / 10000).concat(unit));
      });
      return output;
    }

    function responsiveFontSizes(themeInput) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var _options$breakpoints = options.breakpoints,
          breakpoints = _options$breakpoints === void 0 ? ['sm', 'md', 'lg'] : _options$breakpoints,
          _options$disableAlign = options.disableAlign,
          disableAlign = _options$disableAlign === void 0 ? false : _options$disableAlign,
          _options$factor = options.factor,
          factor = _options$factor === void 0 ? 2 : _options$factor,
          _options$variants = options.variants,
          variants = _options$variants === void 0 ? ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'subtitle1', 'subtitle2', 'body1', 'body2', 'caption', 'button', 'overline'] : _options$variants;

      var theme = _extends$3({}, themeInput);

      theme.typography = _extends$3({}, theme.typography);
      var typography = theme.typography; // Convert between css lengths e.g. em->px or px->rem
      // Set the baseFontSize for your project. Defaults to 16px (also the browser default).

      var convert = convertLength(typography.htmlFontSize);
      var breakpointValues = breakpoints.map(function (x) {
        return theme.breakpoints.values[x];
      });
      variants.forEach(function (variant) {
        var style = typography[variant];
        var remFontSize = parseFloat(convert(style.fontSize, 'rem'));

        if (remFontSize <= 1) {
          return;
        }

        var maxFontSize = remFontSize;
        var minFontSize = 1 + (maxFontSize - 1) / factor;
        var lineHeight = style.lineHeight;

        if (!isUnitless(lineHeight) && !disableAlign) {
          throw new Error(process.env.NODE_ENV !== "production" ? "Material-UI: Unsupported non-unitless line height with grid alignment.\nUse unitless line heights instead." : formatMuiErrorMessage(6));
        }

        if (!isUnitless(lineHeight)) {
          // make it unitless
          lineHeight = parseFloat(convert(lineHeight, 'rem')) / parseFloat(remFontSize);
        }

        var transform = null;

        if (!disableAlign) {
          transform = function transform(value) {
            return alignProperty({
              size: value,
              grid: fontGrid({
                pixels: 4,
                lineHeight: lineHeight,
                htmlFontSize: typography.htmlFontSize
              })
            });
          };
        }

        typography[variant] = _extends$3({}, style, responsiveProperty({
          cssProperty: 'fontSize',
          min: minFontSize,
          max: maxFontSize,
          unit: 'rem',
          breakpoints: breakpointValues,
          transform: transform
        }));
      });
      return theme;
    }

    var styled = function styled(Component) {
      var componentCreator = styled$2(Component);
      return function (style, options) {
        return componentCreator(style, _extends$3({
          defaultTheme: defaultTheme$1
        }, options));
      };
    };

    var styled$1 = styled;

    function useTheme() {
      var theme = useTheme$1() || defaultTheme$1;

      if (process.env.NODE_ENV !== 'production') {
        // eslint-disable-next-line react-hooks/rules-of-hooks
        React__default["default"].useDebugValue(theme);
      }

      return theme;
    }

    function withStyles(stylesOrCreator, options) {
      return withStylesWithoutDefault(stylesOrCreator, _extends$3({
        defaultTheme: defaultTheme$1
      }, options));
    }

    var withTheme = withThemeCreator({
      defaultTheme: defaultTheme$1
    });
    var withTheme$1 = withTheme;

    var n = /*#__PURE__*/Object.freeze({
        __proto__: null,
        createTheme: createTheme,
        createMuiTheme: createMuiTheme,
        unstable_createMuiStrictModeTheme: createMuiStrictModeTheme,
        createStyles: createStyles,
        makeStyles: makeStyles,
        responsiveFontSizes: responsiveFontSizes,
        styled: styled$1,
        useTheme: useTheme,
        withStyles: withStyles,
        withTheme: withTheme$1,
        createGenerateClassName: createGenerateClassName,
        jssPreset: jssPreset,
        ServerStyleSheets: ServerStyleSheets,
        StylesProvider: StylesProvider,
        MuiThemeProvider: ThemeProvider,
        ThemeProvider: ThemeProvider,
        hexToRgb: hexToRgb,
        rgbToHex: rgbToHex,
        hslToRgb: hslToRgb,
        decomposeColor: decomposeColor,
        recomposeColor: recomposeColor,
        getContrastRatio: getContrastRatio,
        getLuminance: getLuminance,
        emphasize: emphasize,
        fade: fade,
        alpha: alpha,
        darken: darken,
        lighten: lighten,
        easing: easing,
        duration: duration
    });

    // It should to be noted that this function isn't equivalent to `text-transform: capitalize`.
    //
    // A strict capitalization should uppercase the first letter of each word a the sentence.
    // We only handle the first word.
    function capitalize(string) {
      if (typeof string !== 'string') {
        throw new Error(process.env.NODE_ENV !== "production" ? "Material-UI: capitalize(string) expects a string argument." : formatMuiErrorMessage(7));
      }

      return string.charAt(0).toUpperCase() + string.slice(1);
    }

    /**
     * Safe chained function
     *
     * Will only create a new function if needed,
     * otherwise will pass back existing functions or null.
     *
     * @param {function} functions to chain
     * @returns {function|null}
     */
    function createChainedFunction() {
      for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {
        funcs[_key] = arguments[_key];
      }

      return funcs.reduce(function (acc, func) {
        if (func == null) {
          return acc;
        }

        if (process.env.NODE_ENV !== 'production') {
          if (typeof func !== 'function') {
            console.error('Material-UI: Invalid Argument Type, must only provide functions, undefined, or null.');
          }
        }

        return function chainedFunction() {
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }

          acc.apply(this, args);
          func.apply(this, args);
        };
      }, function () {});
    }

    var styles$2d = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          userSelect: 'none',
          width: '1em',
          height: '1em',
          display: 'inline-block',
          fill: 'currentColor',
          flexShrink: 0,
          fontSize: theme.typography.pxToRem(24),
          transition: theme.transitions.create('fill', {
            duration: theme.transitions.duration.shorter
          })
        },

        /* Styles applied to the root element if `color="primary"`. */
        colorPrimary: {
          color: theme.palette.primary.main
        },

        /* Styles applied to the root element if `color="secondary"`. */
        colorSecondary: {
          color: theme.palette.secondary.main
        },

        /* Styles applied to the root element if `color="action"`. */
        colorAction: {
          color: theme.palette.action.active
        },

        /* Styles applied to the root element if `color="error"`. */
        colorError: {
          color: theme.palette.error.main
        },

        /* Styles applied to the root element if `color="disabled"`. */
        colorDisabled: {
          color: theme.palette.action.disabled
        },

        /* Styles applied to the root element if `fontSize="inherit"`. */
        fontSizeInherit: {
          fontSize: 'inherit'
        },

        /* Styles applied to the root element if `fontSize="small"`. */
        fontSizeSmall: {
          fontSize: theme.typography.pxToRem(20)
        },

        /* Styles applied to the root element if `fontSize="large"`. */
        fontSizeLarge: {
          fontSize: theme.typography.pxToRem(35)
        }
      };
    };
    var SvgIcon = /*#__PURE__*/React__namespace.forwardRef(function SvgIcon(props, ref) {
      var children = props.children,
          classes = props.classes,
          className = props.className,
          _props$color = props.color,
          color = _props$color === void 0 ? 'inherit' : _props$color,
          _props$component = props.component,
          Component = _props$component === void 0 ? 'svg' : _props$component,
          _props$fontSize = props.fontSize,
          fontSize = _props$fontSize === void 0 ? 'medium' : _props$fontSize,
          htmlColor = props.htmlColor,
          titleAccess = props.titleAccess,
          _props$viewBox = props.viewBox,
          viewBox = _props$viewBox === void 0 ? '0 0 24 24' : _props$viewBox,
          other = _objectWithoutProperties(props, ["children", "classes", "className", "color", "component", "fontSize", "htmlColor", "titleAccess", "viewBox"]);

      return /*#__PURE__*/React__namespace.createElement(Component, _extends$3({
        className: r$1(classes.root, className, color !== 'inherit' && classes["color".concat(capitalize(color))], fontSize !== 'default' && fontSize !== 'medium' && classes["fontSize".concat(capitalize(fontSize))]),
        focusable: "false",
        viewBox: viewBox,
        color: htmlColor,
        "aria-hidden": titleAccess ? undefined : true,
        role: titleAccess ? 'img' : undefined,
        ref: ref
      }, other), children, titleAccess ? /*#__PURE__*/React__namespace.createElement("title", null, titleAccess) : null);
    });
    process.env.NODE_ENV !== "production" ? SvgIcon.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * Node passed into the SVG element.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * The color of the component. It supports those theme colors that make sense for this component.
       * You can use the `htmlColor` prop to apply a color attribute to the SVG element.
       */
      color: re.oneOf(['action', 'disabled', 'error', 'inherit', 'primary', 'secondary']),

      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: re
      /* @typescript-to-proptypes-ignore */
      .elementType,

      /**
       * The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.
       */
      fontSize: chainPropTypes$1(re.oneOf(['default', 'inherit', 'large', 'medium', 'small']), function (props) {
        var fontSize = props.fontSize;

        if (fontSize === 'default') {
          throw new Error('Material-UI: `fontSize="default"` is deprecated. Use `fontSize="medium"` instead.');
        }

        return null;
      }),

      /**
       * Applies a color attribute to the SVG element.
       */
      htmlColor: re.string,

      /**
       * The shape-rendering attribute. The behavior of the different options is described on the
       * [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering).
       * If you are having issues with blurry icons you should investigate this property.
       */
      shapeRendering: re.string,

      /**
       * Provides a human-readable title for the element that contains it.
       * https://www.w3.org/TR/SVG-access/#Equivalent
       */
      titleAccess: re.string,

      /**
       * Allows you to redefine what the coordinates without units mean inside an SVG element.
       * For example, if the SVG element is 500 (width) by 200 (height),
       * and you pass viewBox="0 0 50 20",
       * this means that the coordinates inside the SVG will go from the top left corner (0,0)
       * to bottom right (50,20) and each unit will be worth 10px.
       */
      viewBox: re.string
    } : void 0;
    SvgIcon.muiName = 'SvgIcon';
    var SvgIcon$1 = withStyles(styles$2d, {
      name: 'MuiSvgIcon'
    })(SvgIcon);

    /**
     * Private module reserved for @material-ui/x packages.
     */

    function createSvgIcon$1(path, displayName) {
      var Component = function Component(props, ref) {
        return /*#__PURE__*/React__default["default"].createElement(SvgIcon$1, _extends$3({
          ref: ref
        }, props), path);
      };

      if (process.env.NODE_ENV !== 'production') {
        // Need to set `displayName` on the inner component for React.memo.
        // React prior to 16.14 ignores `displayName` on the wrapper.
        Component.displayName = "".concat(displayName, "Icon");
      }

      Component.muiName = SvgIcon$1.muiName;
      return /*#__PURE__*/React__default["default"].memo( /*#__PURE__*/React__default["default"].forwardRef(Component));
    }

    // Corresponds to 10 frames at 60 Hz.
    // A few bytes payload overhead when lodash/debounce is ~3 kB and debounce ~300 B.
    function debounce$1(func) {
      var wait = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 166;
      var timeout;

      function debounced() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        // eslint-disable-next-line consistent-this
        var that = this;

        var later = function later() {
          func.apply(that, args);
        };

        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
      }

      debounced.clear = function () {
        clearTimeout(timeout);
      };

      return debounced;
    }

    function deprecatedPropType(validator, reason) {
      if (process.env.NODE_ENV === 'production') {
        return function () {
          return null;
        };
      }

      return function (props, propName, componentName, location, propFullName) {
        var componentNameSafe = componentName || '<<anonymous>>';
        var propFullNameSafe = propFullName || propName;

        if (typeof props[propName] !== 'undefined') {
          return new Error("The ".concat(location, " `").concat(propFullNameSafe, "` of ") + "`".concat(componentNameSafe, "` is deprecated. ").concat(reason));
        }

        return null;
      };
    }

    function isMuiElement(element, muiNames) {
      return /*#__PURE__*/React__namespace.isValidElement(element) && muiNames.indexOf(element.type.muiName) !== -1;
    }

    function ownerDocument(node) {
      return node && node.ownerDocument || document;
    }

    function ownerWindow(node) {
      var doc = ownerDocument(node);
      return doc.defaultView || window;
    }

    function requirePropFactory(componentNameInError) {
      if (process.env.NODE_ENV === 'production') {
        return function () {
          return null;
        };
      }

      var requireProp = function requireProp(requiredProp) {
        return function (props, propName, componentName, location, propFullName) {
          var propFullNameSafe = propFullName || propName;

          if (typeof props[propName] !== 'undefined' && !props[requiredProp]) {
            return new Error("The prop `".concat(propFullNameSafe, "` of ") + "`".concat(componentNameInError, "` must be used on `").concat(requiredProp, "`."));
          }

          return null;
        };
      };

      return requireProp;
    }

    // TODO v5: consider to make it private
    function setRef(ref, value) {
      if (typeof ref === 'function') {
        ref(value);
      } else if (ref) {
        ref.current = value;
      }
    }

    function unsupportedProp(props, propName, componentName, location, propFullName) {
      if (process.env.NODE_ENV === 'production') {
        return null;
      }

      var propFullNameSafe = propFullName || propName;

      if (typeof props[propName] !== 'undefined') {
        return new Error("The prop `".concat(propFullNameSafe, "` is not supported. Please remove it."));
      }

      return null;
    }

    /* eslint-disable react-hooks/rules-of-hooks, react-hooks/exhaustive-deps */
    function useControlled(_ref) {
      var controlled = _ref.controlled,
          defaultProp = _ref.default,
          name = _ref.name,
          _ref$state = _ref.state,
          state = _ref$state === void 0 ? 'value' : _ref$state;

      var _React$useRef = React__namespace.useRef(controlled !== undefined),
          isControlled = _React$useRef.current;

      var _React$useState = React__namespace.useState(defaultProp),
          valueState = _React$useState[0],
          setValue = _React$useState[1];

      var value = isControlled ? controlled : valueState;

      if (process.env.NODE_ENV !== 'production') {
        React__namespace.useEffect(function () {
          if (isControlled !== (controlled !== undefined)) {
            console.error(["Material-UI: A component is changing the ".concat(isControlled ? '' : 'un', "controlled ").concat(state, " state of ").concat(name, " to be ").concat(isControlled ? 'un' : '', "controlled."), 'Elements should not switch from uncontrolled to controlled (or vice versa).', "Decide between using a controlled or uncontrolled ".concat(name, " ") + 'element for the lifetime of the component.', "The nature of the state is determined during the first render, it's considered controlled if the value is not `undefined`.", 'More info: https://fb.me/react-controlled-components'].join('\n'));
          }
        }, [controlled]);

        var _React$useRef2 = React__namespace.useRef(defaultProp),
            defaultValue = _React$useRef2.current;

        React__namespace.useEffect(function () {
          if (!isControlled && defaultValue !== defaultProp) {
            console.error(["Material-UI: A component is changing the default ".concat(state, " state of an uncontrolled ").concat(name, " after being initialized. ") + "To suppress this warning opt to use a controlled ".concat(name, ".")].join('\n'));
          }
        }, [JSON.stringify(defaultProp)]);
      }

      var setValueIfUncontrolled = React__namespace.useCallback(function (newValue) {
        if (!isControlled) {
          setValue(newValue);
        }
      }, []);
      return [value, setValueIfUncontrolled];
    }

    var useEnhancedEffect$a = typeof window !== 'undefined' ? React__namespace.useLayoutEffect : React__namespace.useEffect;
    /**
     * https://github.com/facebook/react/issues/14099#issuecomment-440013892
     *
     * @param {function} fn
     */

    function useEventCallback(fn) {
      var ref = React__namespace.useRef(fn);
      useEnhancedEffect$a(function () {
        ref.current = fn;
      });
      return React__namespace.useCallback(function () {
        return (ref.current).apply(void 0, arguments);
      }, []);
    }

    function useForkRef(refA, refB) {
      /**
       * This will create a new function if the ref props change and are defined.
       * This means react will call the old forkRef with `null` and the new forkRef
       * with the ref. Cleanup naturally emerges from this behavior
       */
      return React__namespace.useMemo(function () {
        if (refA == null && refB == null) {
          return null;
        }

        return function (refValue) {
          setRef(refA, refValue);
          setRef(refB, refValue);
        };
      }, [refA, refB]);
    }

    /**
     * Private module reserved for @material-ui/x packages.
     */

    function useId(idOverride) {
      var _React$useState = React__namespace.useState(idOverride),
          defaultId = _React$useState[0],
          setDefaultId = _React$useState[1];

      var id = idOverride || defaultId;
      React__namespace.useEffect(function () {
        if (defaultId == null) {
          // Fallback to this default id when possible.
          // Use the random value for client-side rendering only.
          // We can't use it server-side.
          setDefaultId("mui-".concat(Math.round(Math.random() * 1e5)));
        }
      }, [defaultId]);
      return id;
    }

    // based on https://github.com/WICG/focus-visible/blob/v4.1.5/src/focus-visible.js
    var hadKeyboardEvent = true;
    var hadFocusVisibleRecently = false;
    var hadFocusVisibleRecentlyTimeout = null;
    var inputTypesWhitelist = {
      text: true,
      search: true,
      url: true,
      tel: true,
      email: true,
      password: true,
      number: true,
      date: true,
      month: true,
      week: true,
      time: true,
      datetime: true,
      'datetime-local': true
    };
    /**
     * Computes whether the given element should automatically trigger the
     * `focus-visible` class being added, i.e. whether it should always match
     * `:focus-visible` when focused.
     * @param {Element} node
     * @return {boolean}
     */

    function focusTriggersKeyboardModality(node) {
      var type = node.type,
          tagName = node.tagName;

      if (tagName === 'INPUT' && inputTypesWhitelist[type] && !node.readOnly) {
        return true;
      }

      if (tagName === 'TEXTAREA' && !node.readOnly) {
        return true;
      }

      if (node.isContentEditable) {
        return true;
      }

      return false;
    }
    /**
     * Keep track of our keyboard modality state with `hadKeyboardEvent`.
     * If the most recent user interaction was via the keyboard;
     * and the key press did not include a meta, alt/option, or control key;
     * then the modality is keyboard. Otherwise, the modality is not keyboard.
     * @param {KeyboardEvent} event
     */


    function handleKeyDown(event) {
      if (event.metaKey || event.altKey || event.ctrlKey) {
        return;
      }

      hadKeyboardEvent = true;
    }
    /**
     * If at any point a user clicks with a pointing device, ensure that we change
     * the modality away from keyboard.
     * This avoids the situation where a user presses a key on an already focused
     * element, and then clicks on a different element, focusing it with a
     * pointing device, while we still think we're in keyboard modality.
     */


    function handlePointerDown() {
      hadKeyboardEvent = false;
    }

    function handleVisibilityChange() {
      if (this.visibilityState === 'hidden') {
        // If the tab becomes active again, the browser will handle calling focus
        // on the element (Safari actually calls it twice).
        // If this tab change caused a blur on an element with focus-visible,
        // re-apply the class when the user switches back to the tab.
        if (hadFocusVisibleRecently) {
          hadKeyboardEvent = true;
        }
      }
    }

    function prepare(doc) {
      doc.addEventListener('keydown', handleKeyDown, true);
      doc.addEventListener('mousedown', handlePointerDown, true);
      doc.addEventListener('pointerdown', handlePointerDown, true);
      doc.addEventListener('touchstart', handlePointerDown, true);
      doc.addEventListener('visibilitychange', handleVisibilityChange, true);
    }

    function isFocusVisible(event) {
      var target = event.target;

      try {
        return target.matches(':focus-visible');
      } catch (error) {} // browsers not implementing :focus-visible will throw a SyntaxError
      // we use our own heuristic for those browsers
      // rethrow might be better if it's not the expected error but do we really
      // want to crash if focus-visible malfunctioned?
      // no need for validFocusTarget check. the user does that by attaching it to
      // focusable events only


      return hadKeyboardEvent || focusTriggersKeyboardModality(target);
    }
    /**
     * Should be called if a blur event is fired on a focus-visible element
     */


    function handleBlurVisible() {
      // To detect a tab/window switch, we look for a blur event followed
      // rapidly by a visibility change.
      // If we don't see a visibility change within 100ms, it's probably a
      // regular focus change.
      hadFocusVisibleRecently = true;
      window.clearTimeout(hadFocusVisibleRecentlyTimeout);
      hadFocusVisibleRecentlyTimeout = window.setTimeout(function () {
        hadFocusVisibleRecently = false;
      }, 100);
    }

    function useIsFocusVisible() {
      var ref = React__namespace.useCallback(function (instance) {
        var node = ReactDOM__namespace.findDOMNode(instance);

        if (node != null) {
          prepare(node.ownerDocument);
        }
      }, []);

      if (process.env.NODE_ENV !== 'production') {
        // eslint-disable-next-line react-hooks/rules-of-hooks
        React__namespace.useDebugValue(isFocusVisible);
      }

      return {
        isFocusVisible: isFocusVisible,
        onBlurVisible: handleBlurVisible,
        ref: ref
      };
    }

    var utils = /*#__PURE__*/Object.freeze({
        __proto__: null,
        capitalize: capitalize,
        createChainedFunction: createChainedFunction,
        createSvgIcon: createSvgIcon$1,
        debounce: debounce$1,
        deprecatedPropType: deprecatedPropType,
        isMuiElement: isMuiElement,
        ownerDocument: ownerDocument,
        ownerWindow: ownerWindow,
        requirePropFactory: requirePropFactory,
        setRef: setRef,
        unsupportedProp: unsupportedProp,
        useControlled: useControlled,
        useEventCallback: useEventCallback,
        useForkRef: useForkRef,
        unstable_useId: useId,
        useIsFocusVisible: useIsFocusVisible
    });

    function _toArray(arr) {
      return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray$1(arr) || _nonIterableRest();
    }

    var config$1 = {
      disabled: false
    };

    var timeoutsShape = process.env.NODE_ENV !== 'production' ? re.oneOfType([re.number, re.shape({
      enter: re.number,
      exit: re.number,
      appear: re.number
    }).isRequired]) : null;
    process.env.NODE_ENV !== 'production' ? re.oneOfType([re.string, re.shape({
      enter: re.string,
      exit: re.string,
      active: re.string
    }), re.shape({
      enter: re.string,
      enterDone: re.string,
      enterActive: re.string,
      exit: re.string,
      exitDone: re.string,
      exitActive: re.string
    })]) : null;

    var TransitionGroupContext = React__default["default"].createContext(null);

    var UNMOUNTED = 'unmounted';
    var EXITED = 'exited';
    var ENTERING = 'entering';
    var ENTERED = 'entered';
    var EXITING = 'exiting';
    /**
     * The Transition component lets you describe a transition from one component
     * state to another _over time_ with a simple declarative API. Most commonly
     * it's used to animate the mounting and unmounting of a component, but can also
     * be used to describe in-place transition states as well.
     *
     * ---
     *
     * **Note**: `Transition` is a platform-agnostic base component. If you're using
     * transitions in CSS, you'll probably want to use
     * [`CSSTransition`](https://reactcommunity.org/react-transition-group/css-transition)
     * instead. It inherits all the features of `Transition`, but contains
     * additional features necessary to play nice with CSS transitions (hence the
     * name of the component).
     *
     * ---
     *
     * By default the `Transition` component does not alter the behavior of the
     * component it renders, it only tracks "enter" and "exit" states for the
     * components. It's up to you to give meaning and effect to those states. For
     * example we can add styles to a component when it enters or exits:
     *
     * ```jsx
     * import { Transition } from 'react-transition-group';
     *
     * const duration = 300;
     *
     * const defaultStyle = {
     *   transition: `opacity ${duration}ms ease-in-out`,
     *   opacity: 0,
     * }
     *
     * const transitionStyles = {
     *   entering: { opacity: 1 },
     *   entered:  { opacity: 1 },
     *   exiting:  { opacity: 0 },
     *   exited:  { opacity: 0 },
     * };
     *
     * const Fade = ({ in: inProp }) => (
     *   <Transition in={inProp} timeout={duration}>
     *     {state => (
     *       <div style={{
     *         ...defaultStyle,
     *         ...transitionStyles[state]
     *       }}>
     *         I'm a fade Transition!
     *       </div>
     *     )}
     *   </Transition>
     * );
     * ```
     *
     * There are 4 main states a Transition can be in:
     *  - `'entering'`
     *  - `'entered'`
     *  - `'exiting'`
     *  - `'exited'`
     *
     * Transition state is toggled via the `in` prop. When `true` the component
     * begins the "Enter" stage. During this stage, the component will shift from
     * its current transition state, to `'entering'` for the duration of the
     * transition and then to the `'entered'` stage once it's complete. Let's take
     * the following example (we'll use the
     * [useState](https://reactjs.org/docs/hooks-reference.html#usestate) hook):
     *
     * ```jsx
     * function App() {
     *   const [inProp, setInProp] = useState(false);
     *   return (
     *     <div>
     *       <Transition in={inProp} timeout={500}>
     *         {state => (
     *           // ...
     *         )}
     *       </Transition>
     *       <button onClick={() => setInProp(true)}>
     *         Click to Enter
     *       </button>
     *     </div>
     *   );
     * }
     * ```
     *
     * When the button is clicked the component will shift to the `'entering'` state
     * and stay there for 500ms (the value of `timeout`) before it finally switches
     * to `'entered'`.
     *
     * When `in` is `false` the same thing happens except the state moves from
     * `'exiting'` to `'exited'`.
     */

    var Transition = /*#__PURE__*/function (_React$Component) {
      _inheritsLoose$1(Transition, _React$Component);

      function Transition(props, context) {
        var _this;

        _this = _React$Component.call(this, props, context) || this;
        var parentGroup = context; // In the context of a TransitionGroup all enters are really appears

        var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
        var initialStatus;
        _this.appearStatus = null;

        if (props.in) {
          if (appear) {
            initialStatus = EXITED;
            _this.appearStatus = ENTERING;
          } else {
            initialStatus = ENTERED;
          }
        } else {
          if (props.unmountOnExit || props.mountOnEnter) {
            initialStatus = UNMOUNTED;
          } else {
            initialStatus = EXITED;
          }
        }

        _this.state = {
          status: initialStatus
        };
        _this.nextCallback = null;
        return _this;
      }

      Transition.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
        var nextIn = _ref.in;

        if (nextIn && prevState.status === UNMOUNTED) {
          return {
            status: EXITED
          };
        }

        return null;
      } // getSnapshotBeforeUpdate(prevProps) {
      //   let nextStatus = null
      //   if (prevProps !== this.props) {
      //     const { status } = this.state
      //     if (this.props.in) {
      //       if (status !== ENTERING && status !== ENTERED) {
      //         nextStatus = ENTERING
      //       }
      //     } else {
      //       if (status === ENTERING || status === ENTERED) {
      //         nextStatus = EXITING
      //       }
      //     }
      //   }
      //   return { nextStatus }
      // }
      ;

      var _proto = Transition.prototype;

      _proto.componentDidMount = function componentDidMount() {
        this.updateStatus(true, this.appearStatus);
      };

      _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
        var nextStatus = null;

        if (prevProps !== this.props) {
          var status = this.state.status;

          if (this.props.in) {
            if (status !== ENTERING && status !== ENTERED) {
              nextStatus = ENTERING;
            }
          } else {
            if (status === ENTERING || status === ENTERED) {
              nextStatus = EXITING;
            }
          }
        }

        this.updateStatus(false, nextStatus);
      };

      _proto.componentWillUnmount = function componentWillUnmount() {
        this.cancelNextCallback();
      };

      _proto.getTimeouts = function getTimeouts() {
        var timeout = this.props.timeout;
        var exit, enter, appear;
        exit = enter = appear = timeout;

        if (timeout != null && typeof timeout !== 'number') {
          exit = timeout.exit;
          enter = timeout.enter; // TODO: remove fallback for next major

          appear = timeout.appear !== undefined ? timeout.appear : enter;
        }

        return {
          exit: exit,
          enter: enter,
          appear: appear
        };
      };

      _proto.updateStatus = function updateStatus(mounting, nextStatus) {
        if (mounting === void 0) {
          mounting = false;
        }

        if (nextStatus !== null) {
          // nextStatus will always be ENTERING or EXITING.
          this.cancelNextCallback();

          if (nextStatus === ENTERING) {
            this.performEnter(mounting);
          } else {
            this.performExit();
          }
        } else if (this.props.unmountOnExit && this.state.status === EXITED) {
          this.setState({
            status: UNMOUNTED
          });
        }
      };

      _proto.performEnter = function performEnter(mounting) {
        var _this2 = this;

        var enter = this.props.enter;
        var appearing = this.context ? this.context.isMounting : mounting;

        var _ref2 = this.props.nodeRef ? [appearing] : [ReactDOM__default["default"].findDOMNode(this), appearing],
            maybeNode = _ref2[0],
            maybeAppearing = _ref2[1];

        var timeouts = this.getTimeouts();
        var enterTimeout = appearing ? timeouts.appear : timeouts.enter; // no enter animation skip right to ENTERED
        // if we are mounting and running this it means appear _must_ be set

        if (!mounting && !enter || config$1.disabled) {
          this.safeSetState({
            status: ENTERED
          }, function () {
            _this2.props.onEntered(maybeNode);
          });
          return;
        }

        this.props.onEnter(maybeNode, maybeAppearing);
        this.safeSetState({
          status: ENTERING
        }, function () {
          _this2.props.onEntering(maybeNode, maybeAppearing);

          _this2.onTransitionEnd(enterTimeout, function () {
            _this2.safeSetState({
              status: ENTERED
            }, function () {
              _this2.props.onEntered(maybeNode, maybeAppearing);
            });
          });
        });
      };

      _proto.performExit = function performExit() {
        var _this3 = this;

        var exit = this.props.exit;
        var timeouts = this.getTimeouts();
        var maybeNode = this.props.nodeRef ? undefined : ReactDOM__default["default"].findDOMNode(this); // no exit animation skip right to EXITED

        if (!exit || config$1.disabled) {
          this.safeSetState({
            status: EXITED
          }, function () {
            _this3.props.onExited(maybeNode);
          });
          return;
        }

        this.props.onExit(maybeNode);
        this.safeSetState({
          status: EXITING
        }, function () {
          _this3.props.onExiting(maybeNode);

          _this3.onTransitionEnd(timeouts.exit, function () {
            _this3.safeSetState({
              status: EXITED
            }, function () {
              _this3.props.onExited(maybeNode);
            });
          });
        });
      };

      _proto.cancelNextCallback = function cancelNextCallback() {
        if (this.nextCallback !== null) {
          this.nextCallback.cancel();
          this.nextCallback = null;
        }
      };

      _proto.safeSetState = function safeSetState(nextState, callback) {
        // This shouldn't be necessary, but there are weird race conditions with
        // setState callbacks and unmounting in testing, so always make sure that
        // we can cancel any pending setState callbacks after we unmount.
        callback = this.setNextCallback(callback);
        this.setState(nextState, callback);
      };

      _proto.setNextCallback = function setNextCallback(callback) {
        var _this4 = this;

        var active = true;

        this.nextCallback = function (event) {
          if (active) {
            active = false;
            _this4.nextCallback = null;
            callback(event);
          }
        };

        this.nextCallback.cancel = function () {
          active = false;
        };

        return this.nextCallback;
      };

      _proto.onTransitionEnd = function onTransitionEnd(timeout, handler) {
        this.setNextCallback(handler);
        var node = this.props.nodeRef ? this.props.nodeRef.current : ReactDOM__default["default"].findDOMNode(this);
        var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;

        if (!node || doesNotHaveTimeoutOrListener) {
          setTimeout(this.nextCallback, 0);
          return;
        }

        if (this.props.addEndListener) {
          var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node, this.nextCallback],
              maybeNode = _ref3[0],
              maybeNextCallback = _ref3[1];

          this.props.addEndListener(maybeNode, maybeNextCallback);
        }

        if (timeout != null) {
          setTimeout(this.nextCallback, timeout);
        }
      };

      _proto.render = function render() {
        var status = this.state.status;

        if (status === UNMOUNTED) {
          return null;
        }

        var _this$props = this.props,
            children = _this$props.children;
            _this$props.in;
            _this$props.mountOnEnter;
            _this$props.unmountOnExit;
            _this$props.appear;
            _this$props.enter;
            _this$props.exit;
            _this$props.timeout;
            _this$props.addEndListener;
            _this$props.onEnter;
            _this$props.onEntering;
            _this$props.onEntered;
            _this$props.onExit;
            _this$props.onExiting;
            _this$props.onExited;
            _this$props.nodeRef;
            var childProps = _objectWithoutPropertiesLoose$1(_this$props, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);

        return (
          /*#__PURE__*/
          // allows for nested Transitions
          React__default["default"].createElement(TransitionGroupContext.Provider, {
            value: null
          }, typeof children === 'function' ? children(status, childProps) : React__default["default"].cloneElement(React__default["default"].Children.only(children), childProps))
        );
      };

      return Transition;
    }(React__default["default"].Component);

    Transition.contextType = TransitionGroupContext;
    Transition.propTypes = process.env.NODE_ENV !== "production" ? {
      /**
       * A React reference to DOM element that need to transition:
       * https://stackoverflow.com/a/51127130/4671932
       *
       *   - When `nodeRef` prop is used, `node` is not passed to callback functions
       *      (e.g. `onEnter`) because user already has direct access to the node.
       *   - When changing `key` prop of `Transition` in a `TransitionGroup` a new
       *     `nodeRef` need to be provided to `Transition` with changed `key` prop
       *     (see
       *     [test/CSSTransition-test.js](https://github.com/reactjs/react-transition-group/blob/13435f897b3ab71f6e19d724f145596f5910581c/test/CSSTransition-test.js#L362-L437)).
       */
      nodeRef: re.shape({
        current: typeof Element === 'undefined' ? re.any : function (propValue, key, componentName, location, propFullName, secret) {
          var value = propValue[key];
          return re.instanceOf(value && 'ownerDocument' in value ? value.ownerDocument.defaultView.Element : Element)(propValue, key, componentName, location, propFullName, secret);
        }
      }),

      /**
       * A `function` child can be used instead of a React element. This function is
       * called with the current transition status (`'entering'`, `'entered'`,
       * `'exiting'`, `'exited'`), which can be used to apply context
       * specific props to a component.
       *
       * ```jsx
       * <Transition in={this.state.in} timeout={150}>
       *   {state => (
       *     <MyComponent className={`fade fade-${state}`} />
       *   )}
       * </Transition>
       * ```
       */
      children: re.oneOfType([re.func.isRequired, re.element.isRequired]).isRequired,

      /**
       * Show the component; triggers the enter or exit states
       */
      in: re.bool,

      /**
       * By default the child component is mounted immediately along with
       * the parent `Transition` component. If you want to "lazy mount" the component on the
       * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay
       * mounted, even on "exited", unless you also specify `unmountOnExit`.
       */
      mountOnEnter: re.bool,

      /**
       * By default the child component stays mounted after it reaches the `'exited'` state.
       * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.
       */
      unmountOnExit: re.bool,

      /**
       * By default the child component does not perform the enter transition when
       * it first mounts, regardless of the value of `in`. If you want this
       * behavior, set both `appear` and `in` to `true`.
       *
       * > **Note**: there are no special appear states like `appearing`/`appeared`, this prop
       * > only adds an additional enter transition. However, in the
       * > `<CSSTransition>` component that first enter transition does result in
       * > additional `.appear-*` classes, that way you can choose to style it
       * > differently.
       */
      appear: re.bool,

      /**
       * Enable or disable enter transitions.
       */
      enter: re.bool,

      /**
       * Enable or disable exit transitions.
       */
      exit: re.bool,

      /**
       * The duration of the transition, in milliseconds.
       * Required unless `addEndListener` is provided.
       *
       * You may specify a single timeout for all transitions:
       *
       * ```jsx
       * timeout={500}
       * ```
       *
       * or individually:
       *
       * ```jsx
       * timeout={{
       *  appear: 500,
       *  enter: 300,
       *  exit: 500,
       * }}
       * ```
       *
       * - `appear` defaults to the value of `enter`
       * - `enter` defaults to `0`
       * - `exit` defaults to `0`
       *
       * @type {number | { enter?: number, exit?: number, appear?: number }}
       */
      timeout: function timeout(props) {
        var pt = timeoutsShape;
        if (!props.addEndListener) pt = pt.isRequired;

        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        return pt.apply(void 0, [props].concat(args));
      },

      /**
       * Add a custom transition end trigger. Called with the transitioning
       * DOM node and a `done` callback. Allows for more fine grained transition end
       * logic. Timeouts are still used as a fallback if provided.
       *
       * **Note**: when `nodeRef` prop is passed, `node` is not passed.
       *
       * ```jsx
       * addEndListener={(node, done) => {
       *   // use the css transitionend event to mark the finish of a transition
       *   node.addEventListener('transitionend', done, false);
       * }}
       * ```
       */
      addEndListener: re.func,

      /**
       * Callback fired before the "entering" status is applied. An extra parameter
       * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
       *
       * **Note**: when `nodeRef` prop is passed, `node` is not passed.
       *
       * @type Function(node: HtmlElement, isAppearing: bool) -> void
       */
      onEnter: re.func,

      /**
       * Callback fired after the "entering" status is applied. An extra parameter
       * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
       *
       * **Note**: when `nodeRef` prop is passed, `node` is not passed.
       *
       * @type Function(node: HtmlElement, isAppearing: bool)
       */
      onEntering: re.func,

      /**
       * Callback fired after the "entered" status is applied. An extra parameter
       * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
       *
       * **Note**: when `nodeRef` prop is passed, `node` is not passed.
       *
       * @type Function(node: HtmlElement, isAppearing: bool) -> void
       */
      onEntered: re.func,

      /**
       * Callback fired before the "exiting" status is applied.
       *
       * **Note**: when `nodeRef` prop is passed, `node` is not passed.
       *
       * @type Function(node: HtmlElement) -> void
       */
      onExit: re.func,

      /**
       * Callback fired after the "exiting" status is applied.
       *
       * **Note**: when `nodeRef` prop is passed, `node` is not passed.
       *
       * @type Function(node: HtmlElement) -> void
       */
      onExiting: re.func,

      /**
       * Callback fired after the "exited" status is applied.
       *
       * **Note**: when `nodeRef` prop is passed, `node` is not passed
       *
       * @type Function(node: HtmlElement) -> void
       */
      onExited: re.func
    } : {}; // Name the function so it is clearer in the documentation

    function noop$1() {}

    Transition.defaultProps = {
      in: false,
      mountOnEnter: false,
      unmountOnExit: false,
      appear: false,
      enter: true,
      exit: true,
      onEnter: noop$1,
      onEntering: noop$1,
      onEntered: noop$1,
      onExit: noop$1,
      onExiting: noop$1,
      onExited: noop$1
    };
    Transition.UNMOUNTED = UNMOUNTED;
    Transition.EXITED = EXITED;
    Transition.ENTERING = ENTERING;
    Transition.ENTERED = ENTERED;
    Transition.EXITING = EXITING;
    var Transition$1 = Transition;

    /**
     * Given `this.props.children`, return an object mapping key to child.
     *
     * @param {*} children `this.props.children`
     * @return {object} Mapping of key to child
     */

    function getChildMapping(children, mapFn) {
      var mapper = function mapper(child) {
        return mapFn && React$i.isValidElement(child) ? mapFn(child) : child;
      };

      var result = Object.create(null);
      if (children) React$i.Children.map(children, function (c) {
        return c;
      }).forEach(function (child) {
        // run the map function here instead so that the key is the computed one
        result[child.key] = mapper(child);
      });
      return result;
    }
    /**
     * When you're adding or removing children some may be added or removed in the
     * same render pass. We want to show *both* since we want to simultaneously
     * animate elements in and out. This function takes a previous set of keys
     * and a new set of keys and merges them with its best guess of the correct
     * ordering. In the future we may expose some of the utilities in
     * ReactMultiChild to make this easy, but for now React itself does not
     * directly have this concept of the union of prevChildren and nextChildren
     * so we implement it here.
     *
     * @param {object} prev prev children as returned from
     * `ReactTransitionChildMapping.getChildMapping()`.
     * @param {object} next next children as returned from
     * `ReactTransitionChildMapping.getChildMapping()`.
     * @return {object} a key set that contains all keys in `prev` and all keys
     * in `next` in a reasonable order.
     */

    function mergeChildMappings(prev, next) {
      prev = prev || {};
      next = next || {};

      function getValueForKey(key) {
        return key in next ? next[key] : prev[key];
      } // For each key of `next`, the list of keys to insert before that key in
      // the combined list


      var nextKeysPending = Object.create(null);
      var pendingKeys = [];

      for (var prevKey in prev) {
        if (prevKey in next) {
          if (pendingKeys.length) {
            nextKeysPending[prevKey] = pendingKeys;
            pendingKeys = [];
          }
        } else {
          pendingKeys.push(prevKey);
        }
      }

      var i;
      var childMapping = {};

      for (var nextKey in next) {
        if (nextKeysPending[nextKey]) {
          for (i = 0; i < nextKeysPending[nextKey].length; i++) {
            var pendingNextKey = nextKeysPending[nextKey][i];
            childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
          }
        }

        childMapping[nextKey] = getValueForKey(nextKey);
      } // Finally, add the keys which didn't appear before any key in `next`


      for (i = 0; i < pendingKeys.length; i++) {
        childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
      }

      return childMapping;
    }

    function getProp(child, prop, props) {
      return props[prop] != null ? props[prop] : child.props[prop];
    }

    function getInitialChildMapping(props, onExited) {
      return getChildMapping(props.children, function (child) {
        return React$i.cloneElement(child, {
          onExited: onExited.bind(null, child),
          in: true,
          appear: getProp(child, 'appear', props),
          enter: getProp(child, 'enter', props),
          exit: getProp(child, 'exit', props)
        });
      });
    }
    function getNextChildMapping(nextProps, prevChildMapping, onExited) {
      var nextChildMapping = getChildMapping(nextProps.children);
      var children = mergeChildMappings(prevChildMapping, nextChildMapping);
      Object.keys(children).forEach(function (key) {
        var child = children[key];
        if (!React$i.isValidElement(child)) return;
        var hasPrev = (key in prevChildMapping);
        var hasNext = (key in nextChildMapping);
        var prevChild = prevChildMapping[key];
        var isLeaving = React$i.isValidElement(prevChild) && !prevChild.props.in; // item is new (entering)

        if (hasNext && (!hasPrev || isLeaving)) {
          // console.log('entering', key)
          children[key] = React$i.cloneElement(child, {
            onExited: onExited.bind(null, child),
            in: true,
            exit: getProp(child, 'exit', nextProps),
            enter: getProp(child, 'enter', nextProps)
          });
        } else if (!hasNext && hasPrev && !isLeaving) {
          // item is old (exiting)
          // console.log('leaving', key)
          children[key] = React$i.cloneElement(child, {
            in: false
          });
        } else if (hasNext && hasPrev && React$i.isValidElement(prevChild)) {
          // item hasn't changed transition states
          // copy over the last transition props;
          // console.log('unchanged', key)
          children[key] = React$i.cloneElement(child, {
            onExited: onExited.bind(null, child),
            in: prevChild.props.in,
            exit: getProp(child, 'exit', nextProps),
            enter: getProp(child, 'enter', nextProps)
          });
        }
      });
      return children;
    }

    var values = Object.values || function (obj) {
      return Object.keys(obj).map(function (k) {
        return obj[k];
      });
    };

    var defaultProps = {
      component: 'div',
      childFactory: function childFactory(child) {
        return child;
      }
    };
    /**
     * The `<TransitionGroup>` component manages a set of transition components
     * (`<Transition>` and `<CSSTransition>`) in a list. Like with the transition
     * components, `<TransitionGroup>` is a state machine for managing the mounting
     * and unmounting of components over time.
     *
     * Consider the example below. As items are removed or added to the TodoList the
     * `in` prop is toggled automatically by the `<TransitionGroup>`.
     *
     * Note that `<TransitionGroup>`  does not define any animation behavior!
     * Exactly _how_ a list item animates is up to the individual transition
     * component. This means you can mix and match animations across different list
     * items.
     */

    var TransitionGroup = /*#__PURE__*/function (_React$Component) {
      _inheritsLoose$1(TransitionGroup, _React$Component);

      function TransitionGroup(props, context) {
        var _this;

        _this = _React$Component.call(this, props, context) || this;

        var handleExited = _this.handleExited.bind(_assertThisInitialized$1(_this)); // Initial children should all be entering, dependent on appear


        _this.state = {
          contextValue: {
            isMounting: true
          },
          handleExited: handleExited,
          firstRender: true
        };
        return _this;
      }

      var _proto = TransitionGroup.prototype;

      _proto.componentDidMount = function componentDidMount() {
        this.mounted = true;
        this.setState({
          contextValue: {
            isMounting: false
          }
        });
      };

      _proto.componentWillUnmount = function componentWillUnmount() {
        this.mounted = false;
      };

      TransitionGroup.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {
        var prevChildMapping = _ref.children,
            handleExited = _ref.handleExited,
            firstRender = _ref.firstRender;
        return {
          children: firstRender ? getInitialChildMapping(nextProps, handleExited) : getNextChildMapping(nextProps, prevChildMapping, handleExited),
          firstRender: false
        };
      } // node is `undefined` when user provided `nodeRef` prop
      ;

      _proto.handleExited = function handleExited(child, node) {
        var currentChildMapping = getChildMapping(this.props.children);
        if (child.key in currentChildMapping) return;

        if (child.props.onExited) {
          child.props.onExited(node);
        }

        if (this.mounted) {
          this.setState(function (state) {
            var children = _extends$3({}, state.children);

            delete children[child.key];
            return {
              children: children
            };
          });
        }
      };

      _proto.render = function render() {
        var _this$props = this.props,
            Component = _this$props.component,
            childFactory = _this$props.childFactory,
            props = _objectWithoutPropertiesLoose$1(_this$props, ["component", "childFactory"]);

        var contextValue = this.state.contextValue;
        var children = values(this.state.children).map(childFactory);
        delete props.appear;
        delete props.enter;
        delete props.exit;

        if (Component === null) {
          return /*#__PURE__*/React__default["default"].createElement(TransitionGroupContext.Provider, {
            value: contextValue
          }, children);
        }

        return /*#__PURE__*/React__default["default"].createElement(TransitionGroupContext.Provider, {
          value: contextValue
        }, /*#__PURE__*/React__default["default"].createElement(Component, props, children));
      };

      return TransitionGroup;
    }(React__default["default"].Component);

    TransitionGroup.propTypes = process.env.NODE_ENV !== "production" ? {
      /**
       * `<TransitionGroup>` renders a `<div>` by default. You can change this
       * behavior by providing a `component` prop.
       * If you use React v16+ and would like to avoid a wrapping `<div>` element
       * you can pass in `component={null}`. This is useful if the wrapping div
       * borks your css styles.
       */
      component: re.any,

      /**
       * A set of `<Transition>` components, that are toggled `in` and out as they
       * leave. the `<TransitionGroup>` will inject specific transition props, so
       * remember to spread them through if you are wrapping the `<Transition>` as
       * with our `<Fade>` example.
       *
       * While this component is meant for multiple `Transition` or `CSSTransition`
       * children, sometimes you may want to have a single transition child with
       * content that you want to be transitioned out and in when you change it
       * (e.g. routes, images etc.) In that case you can change the `key` prop of
       * the transition child as you change its content, this will cause
       * `TransitionGroup` to transition the child out and back in.
       */
      children: re.node,

      /**
       * A convenience prop that enables or disables appear animations
       * for all children. Note that specifying this will override any defaults set
       * on individual children Transitions.
       */
      appear: re.bool,

      /**
       * A convenience prop that enables or disables enter animations
       * for all children. Note that specifying this will override any defaults set
       * on individual children Transitions.
       */
      enter: re.bool,

      /**
       * A convenience prop that enables or disables exit animations
       * for all children. Note that specifying this will override any defaults set
       * on individual children Transitions.
       */
      exit: re.bool,

      /**
       * You may need to apply reactive updates to a child as it is exiting.
       * This is generally done by using `cloneElement` however in the case of an exiting
       * child the element has already been removed and not accessible to the consumer.
       *
       * If you do need to update a child as it leaves you can provide a `childFactory`
       * to wrap every child, even the ones that are leaving.
       *
       * @type Function(child: ReactElement) -> ReactElement
       */
      childFactory: re.func
    } : {};
    TransitionGroup.defaultProps = defaultProps;
    var TransitionGroup$1 = TransitionGroup;

    var reflow = function reflow(node) {
      return node.scrollTop;
    };
    function getTransitionProps(props, options) {
      var timeout = props.timeout,
          _props$style = props.style,
          style = _props$style === void 0 ? {} : _props$style;
      return {
        duration: style.transitionDuration || typeof timeout === 'number' ? timeout : timeout[options.mode] || 0,
        delay: style.transitionDelay
      };
    }

    var styles$2c = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          height: 0,
          overflow: 'hidden',
          transition: theme.transitions.create('height')
        },

        /* Styles applied to the root element when the transition has entered. */
        entered: {
          height: 'auto',
          overflow: 'visible'
        },

        /* Styles applied to the root element when the transition has exited and `collapsedSize` != 0px. */
        hidden: {
          visibility: 'hidden'
        },

        /* Styles applied to the outer wrapper element. */
        wrapper: {
          // Hack to get children with a negative margin to not falsify the height computation.
          display: 'flex'
        },

        /* Styles applied to the inner wrapper element. */
        wrapperInner: {
          width: '100%'
        }
      };
    };
    /**
     * The Collapse transition is used by the
     * [Vertical Stepper](/components/steppers/#vertical-stepper) StepContent component.
     * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.
     */

    var Collapse = /*#__PURE__*/React__namespace.forwardRef(function Collapse(props, ref) {
      var children = props.children,
          classes = props.classes,
          className = props.className,
          collapsedHeight = props.collapsedHeight,
          _props$collapsedSize = props.collapsedSize,
          collapsedSizeProp = _props$collapsedSize === void 0 ? '0px' : _props$collapsedSize,
          _props$component = props.component,
          Component = _props$component === void 0 ? 'div' : _props$component,
          _props$disableStrictM = props.disableStrictModeCompat,
          disableStrictModeCompat = _props$disableStrictM === void 0 ? false : _props$disableStrictM,
          inProp = props.in,
          onEnter = props.onEnter,
          onEntered = props.onEntered,
          onEntering = props.onEntering,
          onExit = props.onExit,
          onExited = props.onExited,
          onExiting = props.onExiting,
          style = props.style,
          _props$timeout = props.timeout,
          timeout = _props$timeout === void 0 ? duration.standard : _props$timeout,
          _props$TransitionComp = props.TransitionComponent,
          TransitionComponent = _props$TransitionComp === void 0 ? Transition$1 : _props$TransitionComp,
          other = _objectWithoutProperties(props, ["children", "classes", "className", "collapsedHeight", "collapsedSize", "component", "disableStrictModeCompat", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"]);

      var theme = useTheme();
      var timer = React__namespace.useRef();
      var wrapperRef = React__namespace.useRef(null);
      var autoTransitionDuration = React__namespace.useRef();
      var collapsedSize = typeof (collapsedHeight || collapsedSizeProp) === 'number' ? "".concat(collapsedHeight || collapsedSizeProp, "px") : collapsedHeight || collapsedSizeProp;
      React__namespace.useEffect(function () {
        return function () {
          clearTimeout(timer.current);
        };
      }, []);
      var enableStrictModeCompat = theme.unstable_strictMode && !disableStrictModeCompat;
      var nodeRef = React__namespace.useRef(null);
      var handleRef = useForkRef(ref, enableStrictModeCompat ? nodeRef : undefined);

      var normalizedTransitionCallback = function normalizedTransitionCallback(callback) {
        return function (nodeOrAppearing, maybeAppearing) {
          if (callback) {
            var _ref = enableStrictModeCompat ? [nodeRef.current, nodeOrAppearing] : [nodeOrAppearing, maybeAppearing],
                _ref2 = _slicedToArray(_ref, 2),
                node = _ref2[0],
                isAppearing = _ref2[1]; // onEnterXxx and onExitXxx callbacks have a different arguments.length value.


            if (isAppearing === undefined) {
              callback(node);
            } else {
              callback(node, isAppearing);
            }
          }
        };
      };

      var handleEnter = normalizedTransitionCallback(function (node, isAppearing) {
        node.style.height = collapsedSize;

        if (onEnter) {
          onEnter(node, isAppearing);
        }
      });
      var handleEntering = normalizedTransitionCallback(function (node, isAppearing) {
        var wrapperHeight = wrapperRef.current ? wrapperRef.current.clientHeight : 0;

        var _getTransitionProps = getTransitionProps({
          style: style,
          timeout: timeout
        }, {
          mode: 'enter'
        }),
            transitionDuration = _getTransitionProps.duration;

        if (timeout === 'auto') {
          var duration2 = theme.transitions.getAutoHeightDuration(wrapperHeight);
          node.style.transitionDuration = "".concat(duration2, "ms");
          autoTransitionDuration.current = duration2;
        } else {
          node.style.transitionDuration = typeof transitionDuration === 'string' ? transitionDuration : "".concat(transitionDuration, "ms");
        }

        node.style.height = "".concat(wrapperHeight, "px");

        if (onEntering) {
          onEntering(node, isAppearing);
        }
      });
      var handleEntered = normalizedTransitionCallback(function (node, isAppearing) {
        node.style.height = 'auto';

        if (onEntered) {
          onEntered(node, isAppearing);
        }
      });
      var handleExit = normalizedTransitionCallback(function (node) {
        var wrapperHeight = wrapperRef.current ? wrapperRef.current.clientHeight : 0;
        node.style.height = "".concat(wrapperHeight, "px");

        if (onExit) {
          onExit(node);
        }
      });
      var handleExited = normalizedTransitionCallback(onExited);
      var handleExiting = normalizedTransitionCallback(function (node) {
        var wrapperHeight = wrapperRef.current ? wrapperRef.current.clientHeight : 0;

        var _getTransitionProps2 = getTransitionProps({
          style: style,
          timeout: timeout
        }, {
          mode: 'exit'
        }),
            transitionDuration = _getTransitionProps2.duration;

        if (timeout === 'auto') {
          var duration2 = theme.transitions.getAutoHeightDuration(wrapperHeight);
          node.style.transitionDuration = "".concat(duration2, "ms");
          autoTransitionDuration.current = duration2;
        } else {
          node.style.transitionDuration = typeof transitionDuration === 'string' ? transitionDuration : "".concat(transitionDuration, "ms");
        }

        node.style.height = collapsedSize;

        if (onExiting) {
          onExiting(node);
        }
      });

      var addEndListener = function addEndListener(nodeOrNext, maybeNext) {
        var next = enableStrictModeCompat ? nodeOrNext : maybeNext;

        if (timeout === 'auto') {
          timer.current = setTimeout(next, autoTransitionDuration.current || 0);
        }
      };

      return /*#__PURE__*/React__namespace.createElement(TransitionComponent, _extends$3({
        in: inProp,
        onEnter: handleEnter,
        onEntered: handleEntered,
        onEntering: handleEntering,
        onExit: handleExit,
        onExited: handleExited,
        onExiting: handleExiting,
        addEndListener: addEndListener,
        nodeRef: enableStrictModeCompat ? nodeRef : undefined,
        timeout: timeout === 'auto' ? null : timeout
      }, other), function (state, childProps) {
        return /*#__PURE__*/React__namespace.createElement(Component, _extends$3({
          className: r$1(classes.root, classes.container, className, {
            'entered': classes.entered,
            'exited': !inProp && collapsedSize === '0px' && classes.hidden
          }[state]),
          style: _extends$3({
            minHeight: collapsedSize
          }, style),
          ref: handleRef
        }, childProps), /*#__PURE__*/React__namespace.createElement("div", {
          className: classes.wrapper,
          ref: wrapperRef
        }, /*#__PURE__*/React__namespace.createElement("div", {
          className: classes.wrapperInner
        }, children)));
      });
    });
    process.env.NODE_ENV !== "production" ? Collapse.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * The content node to be collapsed.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: chainPropTypes$1(re.object, function (props) {
        if (props.classes && props.classes.container) {
          throw new Error(['Material-UI: the classes.container key is deprecated.', 'Use `classes.root` instead', 'The name of the pseudo-class was changed for consistency.'].join('\n'));
        }

        return null;
      }),

      /**
       * @ignore
       */
      className: re.string,

      /**
       * The height of the container when collapsed.
       * @deprecated The prop was renamed to support the addition of horizontal orientation, use `collapsedSize` instead.
       */
      collapsedHeight: deprecatedPropType(re.oneOfType([re.number, re.string]), 'The prop was renamed to support the vertical orientation, use `collapsedSize` instead'),

      /**
       * The height of the container when collapsed.
       */
      collapsedSize: re.oneOfType([re.number, re.string]),

      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: re
      /* @typescript-to-proptypes-ignore */
      .elementType,

      /**
       * Enable this prop if you encounter 'Function components cannot be given refs',
       * use `unstable_createStrictModeTheme`,
       * and can't forward the ref in the passed `Component`.
       */
      disableStrictModeCompat: re.bool,

      /**
       * If `true`, the component will transition in.
       */
      in: re.bool,

      /**
       * @ignore
       */
      onEnter: re.func,

      /**
       * @ignore
       */
      onEntered: re.func,

      /**
       * @ignore
       */
      onEntering: re.func,

      /**
       * @ignore
       */
      onExit: re.func,

      /**
       * @ignore
       */
      onExited: re.func,

      /**
       * @ignore
       */
      onExiting: re.func,

      /**
       * @ignore
       */
      style: re.object,

      /**
       * The duration for the transition, in milliseconds.
       * You may specify a single timeout for all transitions, or individually with an object.
       *
       * Set to 'auto' to automatically calculate transition time based on height.
       */
      timeout: re.oneOfType([re.oneOf(['auto']), re.number, re.shape({
        appear: re.number,
        enter: re.number,
        exit: re.number
      })])
    } : void 0;
    Collapse.muiSupportAuto = true;
    var Collapse$1 = withStyles(styles$2c, {
      name: 'MuiCollapse'
    })(Collapse);

    var styles$2b = function styles(theme) {
      var elevations = {};
      theme.shadows.forEach(function (shadow, index) {
        elevations["elevation".concat(index)] = {
          boxShadow: shadow
        };
      });
      return _extends$3({
        /* Styles applied to the root element. */
        root: {
          backgroundColor: theme.palette.background.paper,
          color: theme.palette.text.primary,
          transition: theme.transitions.create('box-shadow')
        },

        /* Styles applied to the root element if `square={false}`. */
        rounded: {
          borderRadius: theme.shape.borderRadius
        },

        /* Styles applied to the root element if `variant="outlined"`. */
        outlined: {
          border: "1px solid ".concat(theme.palette.divider)
        }
      }, elevations);
    };
    var Paper$1 = /*#__PURE__*/React__namespace.forwardRef(function Paper(props, ref) {
      var classes = props.classes,
          className = props.className,
          _props$component = props.component,
          Component = _props$component === void 0 ? 'div' : _props$component,
          _props$square = props.square,
          square = _props$square === void 0 ? false : _props$square,
          _props$elevation = props.elevation,
          elevation = _props$elevation === void 0 ? 1 : _props$elevation,
          _props$variant = props.variant,
          variant = _props$variant === void 0 ? 'elevation' : _props$variant,
          other = _objectWithoutProperties(props, ["classes", "className", "component", "square", "elevation", "variant"]);

      return /*#__PURE__*/React__namespace.createElement(Component, _extends$3({
        className: r$1(classes.root, className, variant === 'outlined' ? classes.outlined : classes["elevation".concat(elevation)], !square && classes.rounded),
        ref: ref
      }, other));
    });
    process.env.NODE_ENV !== "production" ? Paper$1.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * The content of the component.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: re
      /* @typescript-to-proptypes-ignore */
      .elementType,

      /**
       * Shadow depth, corresponds to `dp` in the spec.
       * It accepts values between 0 and 24 inclusive.
       */
      elevation: chainPropTypes$1(re.number, function (props) {
        var classes = props.classes,
            elevation = props.elevation; // in case `withStyles` fails to inject we don't need this warning

        if (classes === undefined) {
          return null;
        }

        if (elevation != null && classes["elevation".concat(elevation)] === undefined) {
          return new Error("Material-UI: This elevation `".concat(elevation, "` is not implemented."));
        }

        return null;
      }),

      /**
       * If `true`, rounded corners are disabled.
       */
      square: re.bool,

      /**
       * The variant to use.
       */
      variant: re.oneOf(['elevation', 'outlined'])
    } : void 0;
    var M = withStyles(styles$2b, {
      name: 'MuiPaper'
    })(Paper$1);

    var Paper = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': M
    });

    /**
     * @ignore - internal component.
     * @type {React.Context<{} | {expanded: boolean, disabled: boolean, toggle: () => void}>}
     */

    var AccordionContext = React__namespace.createContext({});

    if (process.env.NODE_ENV !== 'production') {
      AccordionContext.displayName = 'AccordionContext';
    }

    var AccordionContext$1 = AccordionContext;

    var styles$2a = function styles(theme) {
      var transition = {
        duration: theme.transitions.duration.shortest
      };
      return {
        /* Styles applied to the root element. */
        root: {
          position: 'relative',
          transition: theme.transitions.create(['margin'], transition),
          '&:before': {
            position: 'absolute',
            left: 0,
            top: -1,
            right: 0,
            height: 1,
            content: '""',
            opacity: 1,
            backgroundColor: theme.palette.divider,
            transition: theme.transitions.create(['opacity', 'background-color'], transition)
          },
          '&:first-child': {
            '&:before': {
              display: 'none'
            }
          },
          '&$expanded': {
            margin: '16px 0',
            '&:first-child': {
              marginTop: 0
            },
            '&:last-child': {
              marginBottom: 0
            },
            '&:before': {
              opacity: 0
            }
          },
          '&$expanded + &': {
            '&:before': {
              display: 'none'
            }
          },
          '&$disabled': {
            backgroundColor: theme.palette.action.disabledBackground
          }
        },

        /* Styles applied to the root element if `square={false}`. */
        rounded: {
          borderRadius: 0,
          '&:first-child': {
            borderTopLeftRadius: theme.shape.borderRadius,
            borderTopRightRadius: theme.shape.borderRadius
          },
          '&:last-child': {
            borderBottomLeftRadius: theme.shape.borderRadius,
            borderBottomRightRadius: theme.shape.borderRadius,
            // Fix a rendering issue on Edge
            '@supports (-ms-ime-align: auto)': {
              borderBottomLeftRadius: 0,
              borderBottomRightRadius: 0
            }
          }
        },

        /* Styles applied to the root element if `expanded={true}`. */
        expanded: {},

        /* Styles applied to the root element if `disabled={true}`. */
        disabled: {}
      };
    };
    var Accordion = /*#__PURE__*/React__namespace.forwardRef(function Accordion(props, ref) {
      var childrenProp = props.children,
          classes = props.classes,
          className = props.className,
          _props$defaultExpande = props.defaultExpanded,
          defaultExpanded = _props$defaultExpande === void 0 ? false : _props$defaultExpande,
          _props$disabled = props.disabled,
          disabled = _props$disabled === void 0 ? false : _props$disabled,
          expandedProp = props.expanded,
          onChange = props.onChange,
          _props$square = props.square,
          square = _props$square === void 0 ? false : _props$square,
          _props$TransitionComp = props.TransitionComponent,
          TransitionComponent = _props$TransitionComp === void 0 ? Collapse$1 : _props$TransitionComp,
          TransitionProps = props.TransitionProps,
          other = _objectWithoutProperties(props, ["children", "classes", "className", "defaultExpanded", "disabled", "expanded", "onChange", "square", "TransitionComponent", "TransitionProps"]);

      var _useControlled = useControlled({
        controlled: expandedProp,
        default: defaultExpanded,
        name: 'Accordion',
        state: 'expanded'
      }),
          _useControlled2 = _slicedToArray(_useControlled, 2),
          expanded = _useControlled2[0],
          setExpandedState = _useControlled2[1];

      var handleChange = React__namespace.useCallback(function (event) {
        setExpandedState(!expanded);

        if (onChange) {
          onChange(event, !expanded);
        }
      }, [expanded, onChange, setExpandedState]);

      var _React$Children$toArr = React__namespace.Children.toArray(childrenProp),
          _React$Children$toArr2 = _toArray(_React$Children$toArr),
          summary = _React$Children$toArr2[0],
          children = _React$Children$toArr2.slice(1);

      var contextValue = React__namespace.useMemo(function () {
        return {
          expanded: expanded,
          disabled: disabled,
          toggle: handleChange
        };
      }, [expanded, disabled, handleChange]);
      return /*#__PURE__*/React__namespace.createElement(M, _extends$3({
        className: r$1(classes.root, className, expanded && classes.expanded, disabled && classes.disabled, !square && classes.rounded),
        ref: ref,
        square: square
      }, other), /*#__PURE__*/React__namespace.createElement(AccordionContext$1.Provider, {
        value: contextValue
      }, summary), /*#__PURE__*/React__namespace.createElement(TransitionComponent, _extends$3({
        in: expanded,
        timeout: "auto"
      }, TransitionProps), /*#__PURE__*/React__namespace.createElement("div", {
        "aria-labelledby": summary.props.id,
        id: summary.props['aria-controls'],
        role: "region"
      }, children)));
    });
    process.env.NODE_ENV !== "production" ? Accordion.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * The content of the accordion.
       */
      children: chainPropTypes$1(re.node.isRequired, function (props) {
        var summary = React__namespace.Children.toArray(props.children)[0];

        if (reactIs$2.exports.isFragment(summary)) {
          return new Error("Material-UI: The Accordion doesn't accept a Fragment as a child. " + 'Consider providing an array instead.');
        }

        if (! /*#__PURE__*/React__namespace.isValidElement(summary)) {
          return new Error('Material-UI: Expected the first child of Accordion to be a valid element.');
        }

        return null;
      }),

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * If `true`, expands the accordion by default.
       */
      defaultExpanded: re.bool,

      /**
       * If `true`, the accordion will be displayed in a disabled state.
       */
      disabled: re.bool,

      /**
       * If `true`, expands the accordion, otherwise collapse it.
       * Setting this prop enables control over the accordion.
       */
      expanded: re.bool,

      /**
       * Callback fired when the expand/collapse state is changed.
       *
       * @param {object} event The event source of the callback.
       * @param {boolean} expanded The `expanded` state of the accordion.
       */
      onChange: re.func,

      /**
       * If `true`, rounded corners are disabled.
       */
      square: re.bool,

      /**
       * The component used for the collapse effect.
       * [Follow this guide](/components/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
       */
      TransitionComponent: re.elementType,

      /**
       * Props applied to the [`Transition`](http://reactcommunity.org/react-transition-group/transition#Transition-props) element.
       */
      TransitionProps: re.object
    } : void 0;
    var Accordion$1 = withStyles(styles$2a, {
      name: 'MuiAccordion'
    })(Accordion);

    var styles$29 = {
      /* Styles applied to the root element. */
      root: {
        display: 'flex',
        alignItems: 'center',
        padding: 8,
        justifyContent: 'flex-end'
      },

      /* Styles applied to the root element if `disableSpacing={false}`. */
      spacing: {
        '& > :not(:first-child)': {
          marginLeft: 8
        }
      }
    };
    var AccordionActions = /*#__PURE__*/React__namespace.forwardRef(function AccordionActions(props, ref) {
      var classes = props.classes,
          className = props.className,
          _props$disableSpacing = props.disableSpacing,
          disableSpacing = _props$disableSpacing === void 0 ? false : _props$disableSpacing,
          other = _objectWithoutProperties(props, ["classes", "className", "disableSpacing"]);

      return /*#__PURE__*/React__namespace.createElement("div", _extends$3({
        className: r$1(classes.root, className, !disableSpacing && classes.spacing),
        ref: ref
      }, other));
    });
    process.env.NODE_ENV !== "production" ? AccordionActions.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * The content of the component.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * If `true`, the actions do not have additional margin.
       */
      disableSpacing: re.bool
    } : void 0;
    var AccordionActions$1 = withStyles(styles$29, {
      name: 'MuiAccordionActions'
    })(AccordionActions);

    var styles$28 = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          display: 'flex',
          padding: theme.spacing(1, 2, 2)
        }
      };
    };
    var AccordionDetails = /*#__PURE__*/React__namespace.forwardRef(function AccordionDetails(props, ref) {
      var classes = props.classes,
          className = props.className,
          other = _objectWithoutProperties(props, ["classes", "className"]);

      return /*#__PURE__*/React__namespace.createElement("div", _extends$3({
        className: r$1(classes.root, className),
        ref: ref
      }, other));
    });
    process.env.NODE_ENV !== "production" ? AccordionDetails.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * The content of the accordion details.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string
    } : void 0;
    var AccordionDetails$1 = withStyles(styles$28, {
      name: 'MuiAccordionDetails'
    })(AccordionDetails);

    var useEnhancedEffect$9 = typeof window === 'undefined' ? React__namespace.useEffect : React__namespace.useLayoutEffect;
    /**
     * @ignore - internal component.
     */

    function Ripple(props) {
      var classes = props.classes,
          _props$pulsate = props.pulsate,
          pulsate = _props$pulsate === void 0 ? false : _props$pulsate,
          rippleX = props.rippleX,
          rippleY = props.rippleY,
          rippleSize = props.rippleSize,
          inProp = props.in,
          _props$onExited = props.onExited,
          onExited = _props$onExited === void 0 ? function () {} : _props$onExited,
          timeout = props.timeout;

      var _React$useState = React__namespace.useState(false),
          leaving = _React$useState[0],
          setLeaving = _React$useState[1];

      var rippleClassName = r$1(classes.ripple, classes.rippleVisible, pulsate && classes.ripplePulsate);
      var rippleStyles = {
        width: rippleSize,
        height: rippleSize,
        top: -(rippleSize / 2) + rippleY,
        left: -(rippleSize / 2) + rippleX
      };
      var childClassName = r$1(classes.child, leaving && classes.childLeaving, pulsate && classes.childPulsate);
      var handleExited = useEventCallback(onExited); // Ripple is used for user feedback (e.g. click or press) so we want to apply styles with the highest priority

      useEnhancedEffect$9(function () {
        if (!inProp) {
          // react-transition-group#onExit
          setLeaving(true); // react-transition-group#onExited

          var timeoutId = setTimeout(handleExited, timeout);
          return function () {
            clearTimeout(timeoutId);
          };
        }

        return undefined;
      }, [handleExited, inProp, timeout]);
      return /*#__PURE__*/React__namespace.createElement("span", {
        className: rippleClassName,
        style: rippleStyles
      }, /*#__PURE__*/React__namespace.createElement("span", {
        className: childClassName
      }));
    }

    process.env.NODE_ENV !== "production" ? Ripple.propTypes = {
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object.isRequired,

      /**
       * @ignore - injected from TransitionGroup
       */
      in: re.bool,

      /**
       * @ignore - injected from TransitionGroup
       */
      onExited: re.func,

      /**
       * If `true`, the ripple pulsates, typically indicating the keyboard focus state of an element.
       */
      pulsate: re.bool,

      /**
       * Diameter of the ripple.
       */
      rippleSize: re.number,

      /**
       * Horizontal position of the ripple center.
       */
      rippleX: re.number,

      /**
       * Vertical position of the ripple center.
       */
      rippleY: re.number,

      /**
       * exit delay
       */
      timeout: re.number.isRequired
    } : void 0;

    var DURATION = 550;
    var DELAY_RIPPLE = 80;
    var styles$27 = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          overflow: 'hidden',
          pointerEvents: 'none',
          position: 'absolute',
          zIndex: 0,
          top: 0,
          right: 0,
          bottom: 0,
          left: 0,
          borderRadius: 'inherit'
        },

        /* Styles applied to the internal `Ripple` components `ripple` class. */
        ripple: {
          opacity: 0,
          position: 'absolute'
        },

        /* Styles applied to the internal `Ripple` components `rippleVisible` class. */
        rippleVisible: {
          opacity: 0.3,
          transform: 'scale(1)',
          animation: "$enter ".concat(DURATION, "ms ").concat(theme.transitions.easing.easeInOut)
        },

        /* Styles applied to the internal `Ripple` components `ripplePulsate` class. */
        ripplePulsate: {
          animationDuration: "".concat(theme.transitions.duration.shorter, "ms")
        },

        /* Styles applied to the internal `Ripple` components `child` class. */
        child: {
          opacity: 1,
          display: 'block',
          width: '100%',
          height: '100%',
          borderRadius: '50%',
          backgroundColor: 'currentColor'
        },

        /* Styles applied to the internal `Ripple` components `childLeaving` class. */
        childLeaving: {
          opacity: 0,
          animation: "$exit ".concat(DURATION, "ms ").concat(theme.transitions.easing.easeInOut)
        },

        /* Styles applied to the internal `Ripple` components `childPulsate` class. */
        childPulsate: {
          position: 'absolute',
          left: 0,
          top: 0,
          animation: "$pulsate 2500ms ".concat(theme.transitions.easing.easeInOut, " 200ms infinite")
        },
        '@keyframes enter': {
          '0%': {
            transform: 'scale(0)',
            opacity: 0.1
          },
          '100%': {
            transform: 'scale(1)',
            opacity: 0.3
          }
        },
        '@keyframes exit': {
          '0%': {
            opacity: 1
          },
          '100%': {
            opacity: 0
          }
        },
        '@keyframes pulsate': {
          '0%': {
            transform: 'scale(1)'
          },
          '50%': {
            transform: 'scale(0.92)'
          },
          '100%': {
            transform: 'scale(1)'
          }
        }
      };
    };
    /**
     * @ignore - internal component.
     *
     * TODO v5: Make private
     */

    var TouchRipple = /*#__PURE__*/React__namespace.forwardRef(function TouchRipple(props, ref) {
      var _props$center = props.center,
          centerProp = _props$center === void 0 ? false : _props$center,
          classes = props.classes,
          className = props.className,
          other = _objectWithoutProperties(props, ["center", "classes", "className"]);

      var _React$useState = React__namespace.useState([]),
          ripples = _React$useState[0],
          setRipples = _React$useState[1];

      var nextKey = React__namespace.useRef(0);
      var rippleCallback = React__namespace.useRef(null);
      React__namespace.useEffect(function () {
        if (rippleCallback.current) {
          rippleCallback.current();
          rippleCallback.current = null;
        }
      }, [ripples]); // Used to filter out mouse emulated events on mobile.

      var ignoringMouseDown = React__namespace.useRef(false); // We use a timer in order to only show the ripples for touch "click" like events.
      // We don't want to display the ripple for touch scroll events.

      var startTimer = React__namespace.useRef(null); // This is the hook called once the previous timeout is ready.

      var startTimerCommit = React__namespace.useRef(null);
      var container = React__namespace.useRef(null);
      React__namespace.useEffect(function () {
        return function () {
          clearTimeout(startTimer.current);
        };
      }, []);
      var startCommit = React__namespace.useCallback(function (params) {
        var pulsate = params.pulsate,
            rippleX = params.rippleX,
            rippleY = params.rippleY,
            rippleSize = params.rippleSize,
            cb = params.cb;
        setRipples(function (oldRipples) {
          return [].concat(_toConsumableArray(oldRipples), [/*#__PURE__*/React__namespace.createElement(Ripple, {
            key: nextKey.current,
            classes: classes,
            timeout: DURATION,
            pulsate: pulsate,
            rippleX: rippleX,
            rippleY: rippleY,
            rippleSize: rippleSize
          })]);
        });
        nextKey.current += 1;
        rippleCallback.current = cb;
      }, [classes]);
      var start = React__namespace.useCallback(function () {
        var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var cb = arguments.length > 2 ? arguments[2] : undefined;
        var _options$pulsate = options.pulsate,
            pulsate = _options$pulsate === void 0 ? false : _options$pulsate,
            _options$center = options.center,
            center = _options$center === void 0 ? centerProp || options.pulsate : _options$center,
            _options$fakeElement = options.fakeElement,
            fakeElement = _options$fakeElement === void 0 ? false : _options$fakeElement;

        if (event.type === 'mousedown' && ignoringMouseDown.current) {
          ignoringMouseDown.current = false;
          return;
        }

        if (event.type === 'touchstart') {
          ignoringMouseDown.current = true;
        }

        var element = fakeElement ? null : container.current;
        var rect = element ? element.getBoundingClientRect() : {
          width: 0,
          height: 0,
          left: 0,
          top: 0
        }; // Get the size of the ripple

        var rippleX;
        var rippleY;
        var rippleSize;

        if (center || event.clientX === 0 && event.clientY === 0 || !event.clientX && !event.touches) {
          rippleX = Math.round(rect.width / 2);
          rippleY = Math.round(rect.height / 2);
        } else {
          var _ref = event.touches ? event.touches[0] : event,
              clientX = _ref.clientX,
              clientY = _ref.clientY;

          rippleX = Math.round(clientX - rect.left);
          rippleY = Math.round(clientY - rect.top);
        }

        if (center) {
          rippleSize = Math.sqrt((2 * Math.pow(rect.width, 2) + Math.pow(rect.height, 2)) / 3); // For some reason the animation is broken on Mobile Chrome if the size if even.

          if (rippleSize % 2 === 0) {
            rippleSize += 1;
          }
        } else {
          var sizeX = Math.max(Math.abs((element ? element.clientWidth : 0) - rippleX), rippleX) * 2 + 2;
          var sizeY = Math.max(Math.abs((element ? element.clientHeight : 0) - rippleY), rippleY) * 2 + 2;
          rippleSize = Math.sqrt(Math.pow(sizeX, 2) + Math.pow(sizeY, 2));
        } // Touche devices


        if (event.touches) {
          // check that this isn't another touchstart due to multitouch
          // otherwise we will only clear a single timer when unmounting while two
          // are running
          if (startTimerCommit.current === null) {
            // Prepare the ripple effect.
            startTimerCommit.current = function () {
              startCommit({
                pulsate: pulsate,
                rippleX: rippleX,
                rippleY: rippleY,
                rippleSize: rippleSize,
                cb: cb
              });
            }; // Delay the execution of the ripple effect.


            startTimer.current = setTimeout(function () {
              if (startTimerCommit.current) {
                startTimerCommit.current();
                startTimerCommit.current = null;
              }
            }, DELAY_RIPPLE); // We have to make a tradeoff with this value.
          }
        } else {
          startCommit({
            pulsate: pulsate,
            rippleX: rippleX,
            rippleY: rippleY,
            rippleSize: rippleSize,
            cb: cb
          });
        }
      }, [centerProp, startCommit]);
      var pulsate = React__namespace.useCallback(function () {
        start({}, {
          pulsate: true
        });
      }, [start]);
      var stop = React__namespace.useCallback(function (event, cb) {
        clearTimeout(startTimer.current); // The touch interaction occurs too quickly.
        // We still want to show ripple effect.

        if (event.type === 'touchend' && startTimerCommit.current) {
          event.persist();
          startTimerCommit.current();
          startTimerCommit.current = null;
          startTimer.current = setTimeout(function () {
            stop(event, cb);
          });
          return;
        }

        startTimerCommit.current = null;
        setRipples(function (oldRipples) {
          if (oldRipples.length > 0) {
            return oldRipples.slice(1);
          }

          return oldRipples;
        });
        rippleCallback.current = cb;
      }, []);
      React__namespace.useImperativeHandle(ref, function () {
        return {
          pulsate: pulsate,
          start: start,
          stop: stop
        };
      }, [pulsate, start, stop]);
      return /*#__PURE__*/React__namespace.createElement("span", _extends$3({
        className: r$1(classes.root, className),
        ref: container
      }, other), /*#__PURE__*/React__namespace.createElement(TransitionGroup$1, {
        component: null,
        exit: true
      }, ripples));
    });
    process.env.NODE_ENV !== "production" ? TouchRipple.propTypes = {
      /**
       * If `true`, the ripple starts at the center of the component
       * rather than at the point of interaction.
       */
      center: re.bool,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object.isRequired,

      /**
       * @ignore
       */
      className: re.string
    } : void 0;
    var TouchRipple$1 = withStyles(styles$27, {
      flip: false,
      name: 'MuiTouchRipple'
    })( /*#__PURE__*/React__namespace.memo(TouchRipple));

    var styles$26 = {
      /* Styles applied to the root element. */
      root: {
        display: 'inline-flex',
        alignItems: 'center',
        justifyContent: 'center',
        position: 'relative',
        WebkitTapHighlightColor: 'transparent',
        backgroundColor: 'transparent',
        // Reset default value
        // We disable the focus ring for mouse, touch and keyboard users.
        outline: 0,
        border: 0,
        margin: 0,
        // Remove the margin in Safari
        borderRadius: 0,
        padding: 0,
        // Remove the padding in Firefox
        cursor: 'pointer',
        userSelect: 'none',
        verticalAlign: 'middle',
        '-moz-appearance': 'none',
        // Reset
        '-webkit-appearance': 'none',
        // Reset
        textDecoration: 'none',
        // So we take precedent over the style of a native <a /> element.
        color: 'inherit',
        '&::-moz-focus-inner': {
          borderStyle: 'none' // Remove Firefox dotted outline.

        },
        '&$disabled': {
          pointerEvents: 'none',
          // Disable link interactions
          cursor: 'default'
        },
        '@media print': {
          colorAdjust: 'exact'
        }
      },

      /* Pseudo-class applied to the root element if `disabled={true}`. */
      disabled: {},

      /* Pseudo-class applied to the root element if keyboard focused. */
      focusVisible: {}
    };
    /**
     * `ButtonBase` contains as few styles as possible.
     * It aims to be a simple building block for creating a button.
     * It contains a load of style reset and some focus/ripple logic.
     */

    var ButtonBase = /*#__PURE__*/React__namespace.forwardRef(function ButtonBase(props, ref) {
      var action = props.action,
          buttonRefProp = props.buttonRef,
          _props$centerRipple = props.centerRipple,
          centerRipple = _props$centerRipple === void 0 ? false : _props$centerRipple,
          children = props.children,
          classes = props.classes,
          className = props.className,
          _props$component = props.component,
          component = _props$component === void 0 ? 'button' : _props$component,
          _props$disabled = props.disabled,
          disabled = _props$disabled === void 0 ? false : _props$disabled,
          _props$disableRipple = props.disableRipple,
          disableRipple = _props$disableRipple === void 0 ? false : _props$disableRipple,
          _props$disableTouchRi = props.disableTouchRipple,
          disableTouchRipple = _props$disableTouchRi === void 0 ? false : _props$disableTouchRi,
          _props$focusRipple = props.focusRipple,
          focusRipple = _props$focusRipple === void 0 ? false : _props$focusRipple,
          focusVisibleClassName = props.focusVisibleClassName,
          onBlur = props.onBlur,
          onClick = props.onClick,
          onFocus = props.onFocus,
          onFocusVisible = props.onFocusVisible,
          onKeyDown = props.onKeyDown,
          onKeyUp = props.onKeyUp,
          onMouseDown = props.onMouseDown,
          onMouseLeave = props.onMouseLeave,
          onMouseUp = props.onMouseUp,
          onTouchEnd = props.onTouchEnd,
          onTouchMove = props.onTouchMove,
          onTouchStart = props.onTouchStart,
          onDragLeave = props.onDragLeave,
          _props$tabIndex = props.tabIndex,
          tabIndex = _props$tabIndex === void 0 ? 0 : _props$tabIndex,
          TouchRippleProps = props.TouchRippleProps,
          _props$type = props.type,
          type = _props$type === void 0 ? 'button' : _props$type,
          other = _objectWithoutProperties(props, ["action", "buttonRef", "centerRipple", "children", "classes", "className", "component", "disabled", "disableRipple", "disableTouchRipple", "focusRipple", "focusVisibleClassName", "onBlur", "onClick", "onFocus", "onFocusVisible", "onKeyDown", "onKeyUp", "onMouseDown", "onMouseLeave", "onMouseUp", "onTouchEnd", "onTouchMove", "onTouchStart", "onDragLeave", "tabIndex", "TouchRippleProps", "type"]);

      var buttonRef = React__namespace.useRef(null);

      function getButtonNode() {
        // #StrictMode ready
        return ReactDOM__namespace.findDOMNode(buttonRef.current);
      }

      var rippleRef = React__namespace.useRef(null);

      var _React$useState = React__namespace.useState(false),
          focusVisible = _React$useState[0],
          setFocusVisible = _React$useState[1];

      if (disabled && focusVisible) {
        setFocusVisible(false);
      }

      var _useIsFocusVisible = useIsFocusVisible(),
          isFocusVisible = _useIsFocusVisible.isFocusVisible,
          onBlurVisible = _useIsFocusVisible.onBlurVisible,
          focusVisibleRef = _useIsFocusVisible.ref;

      React__namespace.useImperativeHandle(action, function () {
        return {
          focusVisible: function focusVisible() {
            setFocusVisible(true);
            buttonRef.current.focus();
          }
        };
      }, []);
      React__namespace.useEffect(function () {
        if (focusVisible && focusRipple && !disableRipple) {
          rippleRef.current.pulsate();
        }
      }, [disableRipple, focusRipple, focusVisible]);

      function useRippleHandler(rippleAction, eventCallback) {
        var skipRippleAction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : disableTouchRipple;
        return useEventCallback(function (event) {
          if (eventCallback) {
            eventCallback(event);
          }

          var ignore = skipRippleAction;

          if (!ignore && rippleRef.current) {
            rippleRef.current[rippleAction](event);
          }

          return true;
        });
      }

      var handleMouseDown = useRippleHandler('start', onMouseDown);
      var handleDragLeave = useRippleHandler('stop', onDragLeave);
      var handleMouseUp = useRippleHandler('stop', onMouseUp);
      var handleMouseLeave = useRippleHandler('stop', function (event) {
        if (focusVisible) {
          event.preventDefault();
        }

        if (onMouseLeave) {
          onMouseLeave(event);
        }
      });
      var handleTouchStart = useRippleHandler('start', onTouchStart);
      var handleTouchEnd = useRippleHandler('stop', onTouchEnd);
      var handleTouchMove = useRippleHandler('stop', onTouchMove);
      var handleBlur = useRippleHandler('stop', function (event) {
        if (focusVisible) {
          onBlurVisible(event);
          setFocusVisible(false);
        }

        if (onBlur) {
          onBlur(event);
        }
      }, false);
      var handleFocus = useEventCallback(function (event) {
        // Fix for https://github.com/facebook/react/issues/7769
        if (!buttonRef.current) {
          buttonRef.current = event.currentTarget;
        }

        if (isFocusVisible(event)) {
          setFocusVisible(true);

          if (onFocusVisible) {
            onFocusVisible(event);
          }
        }

        if (onFocus) {
          onFocus(event);
        }
      });

      var isNonNativeButton = function isNonNativeButton() {
        var button = getButtonNode();
        return component && component !== 'button' && !(button.tagName === 'A' && button.href);
      };
      /**
       * IE 11 shim for https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/repeat
       */


      var keydownRef = React__namespace.useRef(false);
      var handleKeyDown = useEventCallback(function (event) {
        // Check if key is already down to avoid repeats being counted as multiple activations
        if (focusRipple && !keydownRef.current && focusVisible && rippleRef.current && event.key === ' ') {
          keydownRef.current = true;
          event.persist();
          rippleRef.current.stop(event, function () {
            rippleRef.current.start(event);
          });
        }

        if (event.target === event.currentTarget && isNonNativeButton() && event.key === ' ') {
          event.preventDefault();
        }

        if (onKeyDown) {
          onKeyDown(event);
        } // Keyboard accessibility for non interactive elements


        if (event.target === event.currentTarget && isNonNativeButton() && event.key === 'Enter' && !disabled) {
          event.preventDefault();

          if (onClick) {
            onClick(event);
          }
        }
      });
      var handleKeyUp = useEventCallback(function (event) {
        // calling preventDefault in keyUp on a <button> will not dispatch a click event if Space is pressed
        // https://codesandbox.io/s/button-keyup-preventdefault-dn7f0
        if (focusRipple && event.key === ' ' && rippleRef.current && focusVisible && !event.defaultPrevented) {
          keydownRef.current = false;
          event.persist();
          rippleRef.current.stop(event, function () {
            rippleRef.current.pulsate(event);
          });
        }

        if (onKeyUp) {
          onKeyUp(event);
        } // Keyboard accessibility for non interactive elements


        if (onClick && event.target === event.currentTarget && isNonNativeButton() && event.key === ' ' && !event.defaultPrevented) {
          onClick(event);
        }
      });
      var ComponentProp = component;

      if (ComponentProp === 'button' && other.href) {
        ComponentProp = 'a';
      }

      var buttonProps = {};

      if (ComponentProp === 'button') {
        buttonProps.type = type;
        buttonProps.disabled = disabled;
      } else {
        if (ComponentProp !== 'a' || !other.href) {
          buttonProps.role = 'button';
        }

        buttonProps['aria-disabled'] = disabled;
      }

      var handleUserRef = useForkRef(buttonRefProp, ref);
      var handleOwnRef = useForkRef(focusVisibleRef, buttonRef);
      var handleRef = useForkRef(handleUserRef, handleOwnRef);

      var _React$useState2 = React__namespace.useState(false),
          mountedState = _React$useState2[0],
          setMountedState = _React$useState2[1];

      React__namespace.useEffect(function () {
        setMountedState(true);
      }, []);
      var enableTouchRipple = mountedState && !disableRipple && !disabled;

      if (process.env.NODE_ENV !== 'production') {
        // eslint-disable-next-line react-hooks/rules-of-hooks
        React__namespace.useEffect(function () {
          if (enableTouchRipple && !rippleRef.current) {
            console.error(['Material-UI: The `component` prop provided to ButtonBase is invalid.', 'Please make sure the children prop is rendered in this custom component.'].join('\n'));
          }
        }, [enableTouchRipple]);
      }

      return /*#__PURE__*/React__namespace.createElement(ComponentProp, _extends$3({
        className: r$1(classes.root, className, focusVisible && [classes.focusVisible, focusVisibleClassName], disabled && classes.disabled),
        onBlur: handleBlur,
        onClick: onClick,
        onFocus: handleFocus,
        onKeyDown: handleKeyDown,
        onKeyUp: handleKeyUp,
        onMouseDown: handleMouseDown,
        onMouseLeave: handleMouseLeave,
        onMouseUp: handleMouseUp,
        onDragLeave: handleDragLeave,
        onTouchEnd: handleTouchEnd,
        onTouchMove: handleTouchMove,
        onTouchStart: handleTouchStart,
        ref: handleRef,
        tabIndex: disabled ? -1 : tabIndex
      }, buttonProps, other), children, enableTouchRipple ?
      /*#__PURE__*/

      /* TouchRipple is only needed client-side, x2 boost on the server. */
      React__namespace.createElement(TouchRipple$1, _extends$3({
        ref: rippleRef,
        center: centerRipple
      }, TouchRippleProps)) : null);
    });
    process.env.NODE_ENV !== "production" ? ButtonBase.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * A ref for imperative actions.
       * It currently only supports `focusVisible()` action.
       */
      action: refType$1,

      /**
       * @ignore
       *
       * Use that prop to pass a ref to the native button component.
       * @deprecated Use `ref` instead.
       */
      buttonRef: deprecatedPropType(refType$1, 'Use `ref` instead.'),

      /**
       * If `true`, the ripples will be centered.
       * They won't start at the cursor interaction position.
       */
      centerRipple: re.bool,

      /**
       * The content of the component.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: elementTypeAcceptingRef$1,

      /**
       * If `true`, the base button will be disabled.
       */
      disabled: re.bool,

      /**
       * If `true`, the ripple effect will be disabled.
       *
       * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
       * to highlight the element by applying separate styles with the `focusVisibleClassName`.
       */
      disableRipple: re.bool,

      /**
       * If `true`, the touch ripple effect will be disabled.
       */
      disableTouchRipple: re.bool,

      /**
       * If `true`, the base button will have a keyboard focus ripple.
       */
      focusRipple: re.bool,

      /**
       * This prop can help identify which element has keyboard focus.
       * The class name will be applied when the element gains the focus through keyboard interaction.
       * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
       * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/master/explainer.md).
       * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
       * if needed.
       */
      focusVisibleClassName: re.string,

      /**
       * @ignore
       */
      href: re.string,

      /**
       * @ignore
       */
      onBlur: re.func,

      /**
       * @ignore
       */
      onClick: re.func,

      /**
       * @ignore
       */
      onDragLeave: re.func,

      /**
       * @ignore
       */
      onFocus: re.func,

      /**
       * Callback fired when the component is focused with a keyboard.
       * We trigger a `onFocus` callback too.
       */
      onFocusVisible: re.func,

      /**
       * @ignore
       */
      onKeyDown: re.func,

      /**
       * @ignore
       */
      onKeyUp: re.func,

      /**
       * @ignore
       */
      onMouseDown: re.func,

      /**
       * @ignore
       */
      onMouseLeave: re.func,

      /**
       * @ignore
       */
      onMouseUp: re.func,

      /**
       * @ignore
       */
      onTouchEnd: re.func,

      /**
       * @ignore
       */
      onTouchMove: re.func,

      /**
       * @ignore
       */
      onTouchStart: re.func,

      /**
       * @ignore
       */
      tabIndex: re.oneOfType([re.number, re.string]),

      /**
       * Props applied to the `TouchRipple` element.
       */
      TouchRippleProps: re.object,

      /**
       * @ignore
       */
      type: re.oneOfType([re.oneOf(['button', 'reset', 'submit']), re.string])
    } : void 0;
    var ButtonBase$1 = withStyles(styles$26, {
      name: 'MuiButtonBase'
    })(ButtonBase);

    var styles$25 = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          textAlign: 'center',
          flex: '0 0 auto',
          fontSize: theme.typography.pxToRem(24),
          padding: 12,
          borderRadius: '50%',
          overflow: 'visible',
          // Explicitly set the default value to solve a bug on IE 11.
          color: theme.palette.action.active,
          transition: theme.transitions.create('background-color', {
            duration: theme.transitions.duration.shortest
          }),
          '&:hover': {
            backgroundColor: alpha(theme.palette.action.active, theme.palette.action.hoverOpacity),
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
              backgroundColor: 'transparent'
            }
          },
          '&$disabled': {
            backgroundColor: 'transparent',
            color: theme.palette.action.disabled
          }
        },

        /* Styles applied to the root element if `edge="start"`. */
        edgeStart: {
          marginLeft: -12,
          '$sizeSmall&': {
            marginLeft: -3
          }
        },

        /* Styles applied to the root element if `edge="end"`. */
        edgeEnd: {
          marginRight: -12,
          '$sizeSmall&': {
            marginRight: -3
          }
        },

        /* Styles applied to the root element if `color="inherit"`. */
        colorInherit: {
          color: 'inherit'
        },

        /* Styles applied to the root element if `color="primary"`. */
        colorPrimary: {
          color: theme.palette.primary.main,
          '&:hover': {
            backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.hoverOpacity),
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
              backgroundColor: 'transparent'
            }
          }
        },

        /* Styles applied to the root element if `color="secondary"`. */
        colorSecondary: {
          color: theme.palette.secondary.main,
          '&:hover': {
            backgroundColor: alpha(theme.palette.secondary.main, theme.palette.action.hoverOpacity),
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
              backgroundColor: 'transparent'
            }
          }
        },

        /* Pseudo-class applied to the root element if `disabled={true}`. */
        disabled: {},

        /* Styles applied to the root element if `size="small"`. */
        sizeSmall: {
          padding: 3,
          fontSize: theme.typography.pxToRem(18)
        },

        /* Styles applied to the children container element. */
        label: {
          width: '100%',
          display: 'flex',
          alignItems: 'inherit',
          justifyContent: 'inherit'
        }
      };
    };
    /**
     * Refer to the [Icons](/components/icons/) section of the documentation
     * regarding the available icon options.
     */

    var IconButton = /*#__PURE__*/React__namespace.forwardRef(function IconButton(props, ref) {
      var _props$edge = props.edge,
          edge = _props$edge === void 0 ? false : _props$edge,
          children = props.children,
          classes = props.classes,
          className = props.className,
          _props$color = props.color,
          color = _props$color === void 0 ? 'default' : _props$color,
          _props$disabled = props.disabled,
          disabled = _props$disabled === void 0 ? false : _props$disabled,
          _props$disableFocusRi = props.disableFocusRipple,
          disableFocusRipple = _props$disableFocusRi === void 0 ? false : _props$disableFocusRi,
          _props$size = props.size,
          size = _props$size === void 0 ? 'medium' : _props$size,
          other = _objectWithoutProperties(props, ["edge", "children", "classes", "className", "color", "disabled", "disableFocusRipple", "size"]);

      return /*#__PURE__*/React__namespace.createElement(ButtonBase$1, _extends$3({
        className: r$1(classes.root, className, color !== 'default' && classes["color".concat(capitalize(color))], disabled && classes.disabled, size === "small" && classes["size".concat(capitalize(size))], {
          'start': classes.edgeStart,
          'end': classes.edgeEnd
        }[edge]),
        centerRipple: true,
        focusRipple: !disableFocusRipple,
        disabled: disabled,
        ref: ref
      }, other), /*#__PURE__*/React__namespace.createElement("span", {
        className: classes.label
      }, children));
    });
    process.env.NODE_ENV !== "production" ? IconButton.propTypes = {
      /**
       * The icon element.
       */
      children: chainPropTypes$1(re.node, function (props) {
        var found = React__namespace.Children.toArray(props.children).some(function (child) {
          return /*#__PURE__*/React__namespace.isValidElement(child) && child.props.onClick;
        });

        if (found) {
          return new Error(['Material-UI: You are providing an onClick event listener ' + 'to a child of a button element.', 'Firefox will never trigger the event.', 'You should move the onClick listener to the parent button element.', 'https://github.com/mui-org/material-ui/issues/13957'].join('\n'));
        }

        return null;
      }),

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object.isRequired,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * The color of the component. It supports those theme colors that make sense for this component.
       */
      color: re.oneOf(['default', 'inherit', 'primary', 'secondary']),

      /**
       * If `true`, the button will be disabled.
       */
      disabled: re.bool,

      /**
       * If `true`, the  keyboard focus ripple will be disabled.
       */
      disableFocusRipple: re.bool,

      /**
       * If `true`, the ripple effect will be disabled.
       */
      disableRipple: re.bool,

      /**
       * If given, uses a negative margin to counteract the padding on one
       * side (this is often helpful for aligning the left or right
       * side of the icon with content above or below, without ruining the border
       * size and shape).
       */
      edge: re.oneOf(['start', 'end', false]),

      /**
       * The size of the button.
       * `small` is equivalent to the dense button styling.
       */
      size: re.oneOf(['small', 'medium'])
    } : void 0;
    var IconButton$1 = withStyles(styles$25, {
      name: 'MuiIconButton'
    })(IconButton);

    var styles$24 = function styles(theme) {
      var transition = {
        duration: theme.transitions.duration.shortest
      };
      return {
        /* Styles applied to the root element. */
        root: {
          display: 'flex',
          minHeight: 8 * 6,
          transition: theme.transitions.create(['min-height', 'background-color'], transition),
          padding: theme.spacing(0, 2),
          '&:hover:not($disabled)': {
            cursor: 'pointer'
          },
          '&$expanded': {
            minHeight: 64
          },
          '&$focused, &$focusVisible': {
            backgroundColor: theme.palette.action.focus
          },
          '&$disabled': {
            opacity: theme.palette.action.disabledOpacity
          }
        },

        /* Pseudo-class applied to the root element, children wrapper element and `IconButton` component if `expanded={true}`. */
        expanded: {},

        /* Pseudo-class applied to the ButtonBase root element if the button is keyboard focused. */
        focused: {},

        /* Pseudo-class applied to the ButtonBase root element if the button is keyboard focused. */
        focusVisible: {},

        /* Pseudo-class applied to the root element if `disabled={true}`. */
        disabled: {},

        /* Styles applied to the children wrapper element. */
        content: {
          display: 'flex',
          flexGrow: 1,
          transition: theme.transitions.create(['margin'], transition),
          margin: '12px 0',
          '&$expanded': {
            margin: '20px 0'
          }
        },

        /* Styles applied to the `IconButton` component when `expandIcon` is supplied. */
        expandIcon: {
          transform: 'rotate(0deg)',
          transition: theme.transitions.create('transform', transition),
          '&:hover': {
            // Disable the hover effect for the IconButton,
            // because a hover effect should apply to the entire Expand button and
            // not only to the IconButton.
            backgroundColor: 'transparent'
          },
          '&$expanded': {
            transform: 'rotate(180deg)'
          }
        }
      };
    };
    var AccordionSummary = /*#__PURE__*/React__namespace.forwardRef(function AccordionSummary(props, ref) {
      var children = props.children,
          classes = props.classes,
          className = props.className,
          expandIcon = props.expandIcon,
          focusVisibleClassName = props.focusVisibleClassName,
          _props$IconButtonProp = props.IconButtonProps,
          IconButtonProps = _props$IconButtonProp === void 0 ? {} : _props$IconButtonProp,
          onClick = props.onClick,
          other = _objectWithoutProperties(props, ["children", "classes", "className", "expandIcon", "focusVisibleClassName", "IconButtonProps", "onClick"]);

      var _React$useContext = React__namespace.useContext(AccordionContext$1),
          _React$useContext$dis = _React$useContext.disabled,
          disabled = _React$useContext$dis === void 0 ? false : _React$useContext$dis,
          expanded = _React$useContext.expanded,
          toggle = _React$useContext.toggle;

      var handleChange = function handleChange(event) {
        if (toggle) {
          toggle(event);
        }

        if (onClick) {
          onClick(event);
        }
      };

      return /*#__PURE__*/React__namespace.createElement(ButtonBase$1, _extends$3({
        focusRipple: false,
        disableRipple: true,
        disabled: disabled,
        component: "div",
        "aria-expanded": expanded,
        className: r$1(classes.root, className, disabled && classes.disabled, expanded && classes.expanded),
        focusVisibleClassName: r$1(classes.focusVisible, classes.focused, focusVisibleClassName),
        onClick: handleChange,
        ref: ref
      }, other), /*#__PURE__*/React__namespace.createElement("div", {
        className: r$1(classes.content, expanded && classes.expanded)
      }, children), expandIcon && /*#__PURE__*/React__namespace.createElement(IconButton$1, _extends$3({
        className: r$1(classes.expandIcon, expanded && classes.expanded),
        edge: "end",
        component: "div",
        tabIndex: null,
        role: null,
        "aria-hidden": true
      }, IconButtonProps), expandIcon));
    });
    process.env.NODE_ENV !== "production" ? AccordionSummary.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * The content of the accordion summary.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: chainPropTypes$1(re.object, function (props) {
        // Guard against when generation of classes is disabled in the stylesheets (`disableGeneration`).
        // For `disableGeneration` we don't have an accurate warning but `disableGeneration` is an advanced use case anyway.
        if (props.classes.focused !== undefined && props.classes.focused.indexOf(' ') !== -1) {
          return new Error(['Material-UI: The `classes.focused` key is deprecated.', 'Use `classes.focusVisible` instead.', 'The name of the pseudo-class was changed for consistency.'].join('\n'));
        }

        return null;
      }),

      /**
       * @ignore
       */
      className: re.string,

      /**
       * The icon to display as the expand indicator.
       */
      expandIcon: re.node,

      /**
       * This prop can help identify which element has keyboard focus.
       * The class name will be applied when the element gains the focus through keyboard interaction.
       * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
       * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/master/explainer.md).
       * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
       * if needed.
       */
      focusVisibleClassName: re.string,

      /**
       * Props applied to the `IconButton` element wrapping the expand icon.
       */
      IconButtonProps: re.object,

      /**
       * @ignore
       */
      onClick: re.func
    } : void 0;
    var AccordionSummary$1 = withStyles(styles$24, {
      name: 'MuiAccordionSummary'
    })(AccordionSummary);

    var styles$23 = function styles(theme) {
      var backgroundColorDefault = theme.palette.type === 'light' ? theme.palette.grey[100] : theme.palette.grey[900];
      return {
        /* Styles applied to the root element. */
        root: {
          display: 'flex',
          flexDirection: 'column',
          width: '100%',
          boxSizing: 'border-box',
          // Prevent padding issue with the Modal and fixed positioned AppBar.
          zIndex: theme.zIndex.appBar,
          flexShrink: 0
        },

        /* Styles applied to the root element if `position="fixed"`. */
        positionFixed: {
          position: 'fixed',
          top: 0,
          left: 'auto',
          right: 0,
          '@media print': {
            // Prevent the app bar to be visible on each printed page.
            position: 'absolute'
          }
        },

        /* Styles applied to the root element if `position="absolute"`. */
        positionAbsolute: {
          position: 'absolute',
          top: 0,
          left: 'auto',
          right: 0
        },

        /* Styles applied to the root element if `position="sticky"`. */
        positionSticky: {
          // ⚠️ sticky is not supported by IE 11.
          position: 'sticky',
          top: 0,
          left: 'auto',
          right: 0
        },

        /* Styles applied to the root element if `position="static"`. */
        positionStatic: {
          position: 'static'
        },

        /* Styles applied to the root element if `position="relative"`. */
        positionRelative: {
          position: 'relative'
        },

        /* Styles applied to the root element if `color="default"`. */
        colorDefault: {
          backgroundColor: backgroundColorDefault,
          color: theme.palette.getContrastText(backgroundColorDefault)
        },

        /* Styles applied to the root element if `color="primary"`. */
        colorPrimary: {
          backgroundColor: theme.palette.primary.main,
          color: theme.palette.primary.contrastText
        },

        /* Styles applied to the root element if `color="secondary"`. */
        colorSecondary: {
          backgroundColor: theme.palette.secondary.main,
          color: theme.palette.secondary.contrastText
        },

        /* Styles applied to the root element if `color="inherit"`. */
        colorInherit: {
          color: 'inherit'
        },

        /* Styles applied to the root element if `color="transparent"`. */
        colorTransparent: {
          backgroundColor: 'transparent',
          color: 'inherit'
        }
      };
    };
    var AppBar = /*#__PURE__*/React__namespace.forwardRef(function AppBar(props, ref) {
      var classes = props.classes,
          className = props.className,
          _props$color = props.color,
          color = _props$color === void 0 ? 'primary' : _props$color,
          _props$position = props.position,
          position = _props$position === void 0 ? 'fixed' : _props$position,
          other = _objectWithoutProperties(props, ["classes", "className", "color", "position"]);

      return /*#__PURE__*/React__namespace.createElement(M, _extends$3({
        square: true,
        component: "header",
        elevation: 4,
        className: r$1(classes.root, classes["position".concat(capitalize(position))], classes["color".concat(capitalize(color))], className, position === 'fixed' && 'mui-fixed'),
        ref: ref
      }, other));
    });
    process.env.NODE_ENV !== "production" ? AppBar.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * The content of the component.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * The color of the component. It supports those theme colors that make sense for this component.
       */
      color: re.oneOf(['default', 'inherit', 'primary', 'secondary', 'transparent']),

      /**
       * The positioning type. The behavior of the different options is described
       * [in the MDN web docs](https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Positioning).
       * Note: `sticky` is not universally supported and will fall back to `static` when unavailable.
       */
      position: re.oneOf(['absolute', 'fixed', 'relative', 'static', 'sticky'])
    } : void 0;
    var AppBar$1 = withStyles(styles$23, {
      name: 'MuiAppBar'
    })(AppBar);

    /**
     * @ignore - internal component.
     */

    var Person = createSvgIcon$1( /*#__PURE__*/React__namespace.createElement("path", {
      d: "M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"
    }), 'Person');

    var styles$22 = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          position: 'relative',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          flexShrink: 0,
          width: 40,
          height: 40,
          fontFamily: theme.typography.fontFamily,
          fontSize: theme.typography.pxToRem(20),
          lineHeight: 1,
          borderRadius: '50%',
          overflow: 'hidden',
          userSelect: 'none'
        },

        /* Styles applied to the root element if not `src` or `srcSet`. */
        colorDefault: {
          color: theme.palette.background.default,
          backgroundColor: theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[600]
        },

        /* Styles applied to the root element if `variant="circle"`. */
        circle: {},

        /* Styles applied to the root element if `variant="circular"`. */
        circular: {},

        /* Styles applied to the root element if `variant="rounded"`. */
        rounded: {
          borderRadius: theme.shape.borderRadius
        },

        /* Styles applied to the root element if `variant="square"`. */
        square: {
          borderRadius: 0
        },

        /* Styles applied to the img element if either `src` or `srcSet` is defined. */
        img: {
          width: '100%',
          height: '100%',
          textAlign: 'center',
          // Handle non-square image. The property isn't supported by IE 11.
          objectFit: 'cover',
          // Hide alt text.
          color: 'transparent',
          // Hide the image broken icon, only works on Chrome.
          textIndent: 10000
        },

        /* Styles applied to the fallback icon */
        fallback: {
          width: '75%',
          height: '75%'
        }
      };
    };

    function useLoaded(_ref) {
      var src = _ref.src,
          srcSet = _ref.srcSet;

      var _React$useState = React__namespace.useState(false),
          loaded = _React$useState[0],
          setLoaded = _React$useState[1];

      React__namespace.useEffect(function () {
        if (!src && !srcSet) {
          return undefined;
        }

        setLoaded(false);
        var active = true;
        var image = new Image();
        image.src = src;
        image.srcSet = srcSet;

        image.onload = function () {
          if (!active) {
            return;
          }

          setLoaded('loaded');
        };

        image.onerror = function () {
          if (!active) {
            return;
          }

          setLoaded('error');
        };

        return function () {
          active = false;
        };
      }, [src, srcSet]);
      return loaded;
    }

    var Avatar = /*#__PURE__*/React__namespace.forwardRef(function Avatar(props, ref) {
      var alt = props.alt,
          childrenProp = props.children,
          classes = props.classes,
          className = props.className,
          _props$component = props.component,
          Component = _props$component === void 0 ? 'div' : _props$component,
          imgProps = props.imgProps,
          sizes = props.sizes,
          src = props.src,
          srcSet = props.srcSet,
          _props$variant = props.variant,
          variant = _props$variant === void 0 ? 'circular' : _props$variant,
          other = _objectWithoutProperties(props, ["alt", "children", "classes", "className", "component", "imgProps", "sizes", "src", "srcSet", "variant"]);

      var children = null; // Use a hook instead of onError on the img element to support server-side rendering.

      var loaded = useLoaded({
        src: src,
        srcSet: srcSet
      });
      var hasImg = src || srcSet;
      var hasImgNotFailing = hasImg && loaded !== 'error';

      if (hasImgNotFailing) {
        children = /*#__PURE__*/React__namespace.createElement("img", _extends$3({
          alt: alt,
          src: src,
          srcSet: srcSet,
          sizes: sizes,
          className: classes.img
        }, imgProps));
      } else if (childrenProp != null) {
        children = childrenProp;
      } else if (hasImg && alt) {
        children = alt[0];
      } else {
        children = /*#__PURE__*/React__namespace.createElement(Person, {
          className: classes.fallback
        });
      }

      return /*#__PURE__*/React__namespace.createElement(Component, _extends$3({
        className: r$1(classes.root, classes.system, classes[variant], className, !hasImgNotFailing && classes.colorDefault),
        ref: ref
      }, other), children);
    });
    process.env.NODE_ENV !== "production" ? Avatar.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * Used in combination with `src` or `srcSet` to
       * provide an alt attribute for the rendered `img` element.
       */
      alt: re.string,

      /**
       * Used to render icon or text elements inside the Avatar if `src` is not set.
       * This can be an element, or just a string.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: chainPropTypes$1(re.object, function (props) {
        var classes = props.classes;

        if (classes == null) {
          return null;
        }

        if (classes.circle != null && // 2 classnames? one from withStyles the other must be custom
        classes.circle.split(' ').length > 1) {
          throw new Error("Material-UI: The `circle` class is deprecated. Use `circular` instead.");
        }

        return null;
      }),

      /**
       * @ignore
       */
      className: re.string,

      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: re
      /* @typescript-to-proptypes-ignore */
      .elementType,

      /**
       * Attributes applied to the `img` element if the component is used to display an image.
       * It can be used to listen for the loading error event.
       */
      imgProps: re.object,

      /**
       * The `sizes` attribute for the `img` element.
       */
      sizes: re.string,

      /**
       * The `src` attribute for the `img` element.
       */
      src: re.string,

      /**
       * The `srcSet` attribute for the `img` element.
       * Use this attribute for responsive image display.
       */
      srcSet: re.string,

      /**
       * The shape of the avatar.
       */
      variant: chainPropTypes$1(re.oneOf(['circle', 'circular', 'rounded', 'square']), function (props) {
        var variant = props.variant;

        if (variant === 'circle') {
          throw new Error('Material-UI: `variant="circle"` is deprecated. Use `variant="circular"` instead.');
        }

        return null;
      })
    } : void 0;
    var Avatar$1 = withStyles(styles$22, {
      name: 'MuiAvatar'
    })(Avatar);

    var styles$21 = {
      entering: {
        opacity: 1
      },
      entered: {
        opacity: 1
      }
    };
    var defaultTimeout$2 = {
      enter: duration.enteringScreen,
      exit: duration.leavingScreen
    };
    /**
     * The Fade transition is used by the [Modal](/components/modal/) component.
     * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.
     */

    var Fade = /*#__PURE__*/React__namespace.forwardRef(function Fade(props, ref) {
      var children = props.children,
          _props$disableStrictM = props.disableStrictModeCompat,
          disableStrictModeCompat = _props$disableStrictM === void 0 ? false : _props$disableStrictM,
          inProp = props.in,
          onEnter = props.onEnter,
          onEntered = props.onEntered,
          onEntering = props.onEntering,
          onExit = props.onExit,
          onExited = props.onExited,
          onExiting = props.onExiting,
          style = props.style,
          _props$TransitionComp = props.TransitionComponent,
          TransitionComponent = _props$TransitionComp === void 0 ? Transition$1 : _props$TransitionComp,
          _props$timeout = props.timeout,
          timeout = _props$timeout === void 0 ? defaultTimeout$2 : _props$timeout,
          other = _objectWithoutProperties(props, ["children", "disableStrictModeCompat", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "TransitionComponent", "timeout"]);

      var theme = useTheme();
      var enableStrictModeCompat = theme.unstable_strictMode && !disableStrictModeCompat;
      var nodeRef = React__namespace.useRef(null);
      var foreignRef = useForkRef(children.ref, ref);
      var handleRef = useForkRef(enableStrictModeCompat ? nodeRef : undefined, foreignRef);

      var normalizedTransitionCallback = function normalizedTransitionCallback(callback) {
        return function (nodeOrAppearing, maybeAppearing) {
          if (callback) {
            var _ref = enableStrictModeCompat ? [nodeRef.current, nodeOrAppearing] : [nodeOrAppearing, maybeAppearing],
                _ref2 = _slicedToArray(_ref, 2),
                node = _ref2[0],
                isAppearing = _ref2[1]; // onEnterXxx and onExitXxx callbacks have a different arguments.length value.


            if (isAppearing === undefined) {
              callback(node);
            } else {
              callback(node, isAppearing);
            }
          }
        };
      };

      var handleEntering = normalizedTransitionCallback(onEntering);
      var handleEnter = normalizedTransitionCallback(function (node, isAppearing) {
        reflow(node); // So the animation always start from the start.

        var transitionProps = getTransitionProps({
          style: style,
          timeout: timeout
        }, {
          mode: 'enter'
        });
        node.style.webkitTransition = theme.transitions.create('opacity', transitionProps);
        node.style.transition = theme.transitions.create('opacity', transitionProps);

        if (onEnter) {
          onEnter(node, isAppearing);
        }
      });
      var handleEntered = normalizedTransitionCallback(onEntered);
      var handleExiting = normalizedTransitionCallback(onExiting);
      var handleExit = normalizedTransitionCallback(function (node) {
        var transitionProps = getTransitionProps({
          style: style,
          timeout: timeout
        }, {
          mode: 'exit'
        });
        node.style.webkitTransition = theme.transitions.create('opacity', transitionProps);
        node.style.transition = theme.transitions.create('opacity', transitionProps);

        if (onExit) {
          onExit(node);
        }
      });
      var handleExited = normalizedTransitionCallback(onExited);
      return /*#__PURE__*/React__namespace.createElement(TransitionComponent, _extends$3({
        appear: true,
        in: inProp,
        nodeRef: enableStrictModeCompat ? nodeRef : undefined,
        onEnter: handleEnter,
        onEntered: handleEntered,
        onEntering: handleEntering,
        onExit: handleExit,
        onExited: handleExited,
        onExiting: handleExiting,
        timeout: timeout
      }, other), function (state, childProps) {
        return /*#__PURE__*/React__namespace.cloneElement(children, _extends$3({
          style: _extends$3({
            opacity: 0,
            visibility: state === 'exited' && !inProp ? 'hidden' : undefined
          }, styles$21[state], style, children.props.style),
          ref: handleRef
        }, childProps));
      });
    });
    process.env.NODE_ENV !== "production" ? Fade.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * A single child content element.
       */
      children: re.element,

      /**
       * Enable this prop if you encounter 'Function components cannot be given refs',
       * use `unstable_createStrictModeTheme`,
       * and can't forward the ref in the child component.
       */
      disableStrictModeCompat: re.bool,

      /**
       * If `true`, the component will transition in.
       */
      in: re.bool,

      /**
       * @ignore
       */
      onEnter: re.func,

      /**
       * @ignore
       */
      onEntered: re.func,

      /**
       * @ignore
       */
      onEntering: re.func,

      /**
       * @ignore
       */
      onExit: re.func,

      /**
       * @ignore
       */
      onExited: re.func,

      /**
       * @ignore
       */
      onExiting: re.func,

      /**
       * @ignore
       */
      style: re.object,

      /**
       * The duration for the transition, in milliseconds.
       * You may specify a single timeout for all transitions, or individually with an object.
       */
      timeout: re.oneOfType([re.number, re.shape({
        appear: re.number,
        enter: re.number,
        exit: re.number
      })])
    } : void 0;
    var Fade$1 = Fade;

    var styles$20 = {
      /* Styles applied to the root element. */
      root: {
        // Improve scrollable dialog support.
        zIndex: -1,
        position: 'fixed',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        right: 0,
        bottom: 0,
        top: 0,
        left: 0,
        backgroundColor: 'rgba(0, 0, 0, 0.5)',
        WebkitTapHighlightColor: 'transparent'
      },

      /* Styles applied to the root element if `invisible={true}`. */
      invisible: {
        backgroundColor: 'transparent'
      }
    };
    var Backdrop = /*#__PURE__*/React__namespace.forwardRef(function Backdrop(props, ref) {
      var children = props.children,
          classes = props.classes,
          className = props.className,
          _props$invisible = props.invisible,
          invisible = _props$invisible === void 0 ? false : _props$invisible,
          open = props.open,
          transitionDuration = props.transitionDuration,
          _props$TransitionComp = props.TransitionComponent,
          TransitionComponent = _props$TransitionComp === void 0 ? Fade$1 : _props$TransitionComp,
          other = _objectWithoutProperties(props, ["children", "classes", "className", "invisible", "open", "transitionDuration", "TransitionComponent"]);

      return /*#__PURE__*/React__namespace.createElement(TransitionComponent, _extends$3({
        in: open,
        timeout: transitionDuration
      }, other), /*#__PURE__*/React__namespace.createElement("div", {
        className: r$1(classes.root, className, invisible && classes.invisible),
        "aria-hidden": true,
        ref: ref
      }, children));
    });
    process.env.NODE_ENV !== "production" ? Backdrop.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * The content of the component.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * If `true`, the backdrop is invisible.
       * It can be used when rendering a popover or a custom select component.
       */
      invisible: re.bool,

      /**
       * If `true`, the backdrop is open.
       */
      open: re.bool.isRequired,

      /**
       * The duration for the transition, in milliseconds.
       * You may specify a single timeout for all transitions, or individually with an object.
       */
      transitionDuration: re.oneOfType([re.number, re.shape({
        appear: re.number,
        enter: re.number,
        exit: re.number
      })])
    } : void 0;
    var Backdrop$1 = withStyles(styles$20, {
      name: 'MuiBackdrop'
    })(Backdrop);

    var RADIUS_STANDARD = 10;
    var RADIUS_DOT = 4;
    var styles$1$ = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          position: 'relative',
          display: 'inline-flex',
          // For correct alignment with the text.
          verticalAlign: 'middle',
          flexShrink: 0
        },

        /* Styles applied to the badge `span` element. */
        badge: {
          display: 'flex',
          flexDirection: 'row',
          flexWrap: 'wrap',
          justifyContent: 'center',
          alignContent: 'center',
          alignItems: 'center',
          position: 'absolute',
          boxSizing: 'border-box',
          fontFamily: theme.typography.fontFamily,
          fontWeight: theme.typography.fontWeightMedium,
          fontSize: theme.typography.pxToRem(12),
          minWidth: RADIUS_STANDARD * 2,
          lineHeight: 1,
          padding: '0 6px',
          height: RADIUS_STANDARD * 2,
          borderRadius: RADIUS_STANDARD,
          zIndex: 1,
          // Render the badge on top of potential ripples.
          transition: theme.transitions.create('transform', {
            easing: theme.transitions.easing.easeInOut,
            duration: theme.transitions.duration.enteringScreen
          })
        },

        /* Styles applied to the root element if `color="primary"`. */
        colorPrimary: {
          backgroundColor: theme.palette.primary.main,
          color: theme.palette.primary.contrastText
        },

        /* Styles applied to the root element if `color="secondary"`. */
        colorSecondary: {
          backgroundColor: theme.palette.secondary.main,
          color: theme.palette.secondary.contrastText
        },

        /* Styles applied to the root element if `color="error"`. */
        colorError: {
          backgroundColor: theme.palette.error.main,
          color: theme.palette.error.contrastText
        },

        /* Styles applied to the root element if `variant="dot"`. */
        dot: {
          borderRadius: RADIUS_DOT,
          height: RADIUS_DOT * 2,
          minWidth: RADIUS_DOT * 2,
          padding: 0
        },

        /* Styles applied to the root element if `anchorOrigin={{ 'top', 'right' }} overlap="rectangle"`. */
        anchorOriginTopRightRectangle: {
          top: 0,
          right: 0,
          transform: 'scale(1) translate(50%, -50%)',
          transformOrigin: '100% 0%',
          '&$invisible': {
            transform: 'scale(0) translate(50%, -50%)'
          }
        },

        /* Styles applied to the root element if `anchorOrigin={{ 'top', 'right' }} overlap="rectangular"`. */
        anchorOriginTopRightRectangular: {
          top: 0,
          right: 0,
          transform: 'scale(1) translate(50%, -50%)',
          transformOrigin: '100% 0%',
          '&$invisible': {
            transform: 'scale(0) translate(50%, -50%)'
          }
        },

        /* Styles applied to the root element if `anchorOrigin={{ 'bottom', 'right' }} overlap="rectangle"`. */
        anchorOriginBottomRightRectangle: {
          bottom: 0,
          right: 0,
          transform: 'scale(1) translate(50%, 50%)',
          transformOrigin: '100% 100%',
          '&$invisible': {
            transform: 'scale(0) translate(50%, 50%)'
          }
        },

        /* Styles applied to the root element if `anchorOrigin={{ 'bottom', 'right' }} overlap="rectangular"`. */
        anchorOriginBottomRightRectangular: {
          bottom: 0,
          right: 0,
          transform: 'scale(1) translate(50%, 50%)',
          transformOrigin: '100% 100%',
          '&$invisible': {
            transform: 'scale(0) translate(50%, 50%)'
          }
        },

        /* Styles applied to the root element if `anchorOrigin={{ 'top', 'left' }} overlap="rectangle"`. */
        anchorOriginTopLeftRectangle: {
          top: 0,
          left: 0,
          transform: 'scale(1) translate(-50%, -50%)',
          transformOrigin: '0% 0%',
          '&$invisible': {
            transform: 'scale(0) translate(-50%, -50%)'
          }
        },

        /* Styles applied to the root element if `anchorOrigin={{ 'top', 'left' }} overlap="rectangular"`. */
        anchorOriginTopLeftRectangular: {
          top: 0,
          left: 0,
          transform: 'scale(1) translate(-50%, -50%)',
          transformOrigin: '0% 0%',
          '&$invisible': {
            transform: 'scale(0) translate(-50%, -50%)'
          }
        },

        /* Styles applied to the root element if `anchorOrigin={{ 'bottom', 'left' }} overlap="rectangle"`. */
        anchorOriginBottomLeftRectangle: {
          bottom: 0,
          left: 0,
          transform: 'scale(1) translate(-50%, 50%)',
          transformOrigin: '0% 100%',
          '&$invisible': {
            transform: 'scale(0) translate(-50%, 50%)'
          }
        },

        /* Styles applied to the root element if `anchorOrigin={{ 'bottom', 'left' }} overlap="rectangular"`. */
        anchorOriginBottomLeftRectangular: {
          bottom: 0,
          left: 0,
          transform: 'scale(1) translate(-50%, 50%)',
          transformOrigin: '0% 100%',
          '&$invisible': {
            transform: 'scale(0) translate(-50%, 50%)'
          }
        },

        /* Styles applied to the root element if `anchorOrigin={{ 'top', 'right' }} overlap="circle"`. */
        anchorOriginTopRightCircle: {
          top: '14%',
          right: '14%',
          transform: 'scale(1) translate(50%, -50%)',
          transformOrigin: '100% 0%',
          '&$invisible': {
            transform: 'scale(0) translate(50%, -50%)'
          }
        },

        /* Styles applied to the root element if `anchorOrigin={{ 'top', 'right' }} overlap="circular"`. */
        anchorOriginTopRightCircular: {
          top: '14%',
          right: '14%',
          transform: 'scale(1) translate(50%, -50%)',
          transformOrigin: '100% 0%',
          '&$invisible': {
            transform: 'scale(0) translate(50%, -50%)'
          }
        },

        /* Styles applied to the root element if `anchorOrigin={{ 'bottom', 'right' }} overlap="circle"`. */
        anchorOriginBottomRightCircle: {
          bottom: '14%',
          right: '14%',
          transform: 'scale(1) translate(50%, 50%)',
          transformOrigin: '100% 100%',
          '&$invisible': {
            transform: 'scale(0) translate(50%, 50%)'
          }
        },

        /* Styles applied to the root element if `anchorOrigin={{ 'bottom', 'right' }} overlap="circular"`. */
        anchorOriginBottomRightCircular: {
          bottom: '14%',
          right: '14%',
          transform: 'scale(1) translate(50%, 50%)',
          transformOrigin: '100% 100%',
          '&$invisible': {
            transform: 'scale(0) translate(50%, 50%)'
          }
        },

        /* Styles applied to the root element if `anchorOrigin={{ 'top', 'left' }} overlap="circle"`. */
        anchorOriginTopLeftCircle: {
          top: '14%',
          left: '14%',
          transform: 'scale(1) translate(-50%, -50%)',
          transformOrigin: '0% 0%',
          '&$invisible': {
            transform: 'scale(0) translate(-50%, -50%)'
          }
        },

        /* Styles applied to the root element if `anchorOrigin={{ 'top', 'left' }} overlap="circular"`. */
        anchorOriginTopLeftCircular: {
          top: '14%',
          left: '14%',
          transform: 'scale(1) translate(-50%, -50%)',
          transformOrigin: '0% 0%',
          '&$invisible': {
            transform: 'scale(0) translate(-50%, -50%)'
          }
        },

        /* Styles applied to the root element if `anchorOrigin={{ 'bottom', 'left' }} overlap="circle"`. */
        anchorOriginBottomLeftCircle: {
          bottom: '14%',
          left: '14%',
          transform: 'scale(1) translate(-50%, 50%)',
          transformOrigin: '0% 100%',
          '&$invisible': {
            transform: 'scale(0) translate(-50%, 50%)'
          }
        },

        /* Styles applied to the root element if `anchorOrigin={{ 'bottom', 'left' }} overlap="circular"`. */
        anchorOriginBottomLeftCircular: {
          bottom: '14%',
          left: '14%',
          transform: 'scale(1) translate(-50%, 50%)',
          transformOrigin: '0% 100%',
          '&$invisible': {
            transform: 'scale(0) translate(-50%, 50%)'
          }
        },

        /* Pseudo-class to the badge `span` element if `invisible={true}`. */
        invisible: {
          transition: theme.transitions.create('transform', {
            easing: theme.transitions.easing.easeInOut,
            duration: theme.transitions.duration.leavingScreen
          })
        }
      };
    };
    var Badge = /*#__PURE__*/React__namespace.forwardRef(function Badge(props, ref) {
      var _props$anchorOrigin = props.anchorOrigin,
          anchorOrigin = _props$anchorOrigin === void 0 ? {
        vertical: 'top',
        horizontal: 'right'
      } : _props$anchorOrigin,
          badgeContent = props.badgeContent,
          children = props.children,
          classes = props.classes,
          className = props.className,
          _props$color = props.color,
          color = _props$color === void 0 ? 'default' : _props$color,
          _props$component = props.component,
          ComponentProp = _props$component === void 0 ? 'span' : _props$component,
          invisibleProp = props.invisible,
          _props$max = props.max,
          max = _props$max === void 0 ? 99 : _props$max,
          _props$overlap = props.overlap,
          overlap = _props$overlap === void 0 ? 'rectangle' : _props$overlap,
          _props$showZero = props.showZero,
          showZero = _props$showZero === void 0 ? false : _props$showZero,
          _props$variant = props.variant,
          variant = _props$variant === void 0 ? 'standard' : _props$variant,
          other = _objectWithoutProperties(props, ["anchorOrigin", "badgeContent", "children", "classes", "className", "color", "component", "invisible", "max", "overlap", "showZero", "variant"]);

      var invisible = invisibleProp;

      if (invisibleProp == null && (badgeContent === 0 && !showZero || badgeContent == null && variant !== 'dot')) {
        invisible = true;
      }

      var displayValue = '';

      if (variant !== 'dot') {
        displayValue = badgeContent > max ? "".concat(max, "+") : badgeContent;
      }

      return /*#__PURE__*/React__namespace.createElement(ComponentProp, _extends$3({
        className: r$1(classes.root, className),
        ref: ref
      }, other), children, /*#__PURE__*/React__namespace.createElement("span", {
        className: r$1(classes.badge, classes["".concat(anchorOrigin.horizontal).concat(capitalize(anchorOrigin.vertical), "}")], classes["anchorOrigin".concat(capitalize(anchorOrigin.vertical)).concat(capitalize(anchorOrigin.horizontal)).concat(capitalize(overlap))], color !== 'default' && classes["color".concat(capitalize(color))], invisible && classes.invisible, variant === 'dot' && classes.dot)
      }, displayValue));
    });
    process.env.NODE_ENV !== "production" ? Badge.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * The anchor of the badge.
       */
      anchorOrigin: re.shape({
        horizontal: re.oneOf(['left', 'right']).isRequired,
        vertical: re.oneOf(['bottom', 'top']).isRequired
      }),

      /**
       * The content rendered within the badge.
       */
      badgeContent: re.node,

      /**
       * The badge will be added relative to this node.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: chainPropTypes$1(re.object, function (props) {
        var classes = props.classes;

        if (classes == null) {
          return null;
        }

        [['anchorOriginTopRightRectangle', 'anchorOriginTopRightRectangular'], ['anchorOriginBottomRightRectangle', 'anchorOriginBottomRightRectangular'], ['anchorOriginTopLeftRectangle', 'anchorOriginTopLeftRectangular'], ['anchorOriginBottomLeftRectangle', 'anchorOriginBottomLeftRectangular'], ['anchorOriginTopRightCircle', 'anchorOriginTopRightCircular'], ['anchorOriginBottomRightCircle', 'anchorOriginBottomRightCircular'], ['anchorOriginTopLeftCircle', 'anchorOriginTopLeftCircular']].forEach(function (_ref) {
          var _ref2 = _slicedToArray(_ref, 2),
              deprecatedClassKey = _ref2[0],
              newClassKey = _ref2[1];

          if (classes[deprecatedClassKey] != null && // 2 classnames? one from withStyles the other must be custom
          classes[deprecatedClassKey].split(' ').length > 1) {
            throw new Error("Material-UI: The `".concat(deprecatedClassKey, "` class was deprecated. Use `").concat(newClassKey, "` instead."));
          }
        });
        return null;
      }),

      /**
       * @ignore
       */
      className: re.string,

      /**
       * The color of the component. It supports those theme colors that make sense for this component.
       */
      color: re.oneOf(['default', 'error', 'primary', 'secondary']),

      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: re
      /* @typescript-to-proptypes-ignore */
      .elementType,

      /**
       * If `true`, the badge will be invisible.
       */
      invisible: re.bool,

      /**
       * Max count to show.
       */
      max: re.number,

      /**
       * Wrapped shape the badge should overlap.
       */
      overlap: chainPropTypes$1(re.oneOf(['circle', 'rectangle', 'circular', 'rectangular']), function (props) {
        var overlap = props.overlap;

        if (overlap === 'rectangle') {
          throw new Error('Material-UI: `overlap="rectangle"` was deprecated. Use `overlap="rectangular"` instead.');
        }

        if (overlap === 'circle') {
          throw new Error('Material-UI: `overlap="circle"` was deprecated. Use `overlap="circular"` instead.');
        }

        return null;
      }),

      /**
       * Controls whether the badge is hidden when `badgeContent` is zero.
       */
      showZero: re.bool,

      /**
       * The variant to use.
       */
      variant: re.oneOf(['dot', 'standard'])
    } : void 0;
    var E = withStyles(styles$1$, {
      name: 'MuiBadge'
    })(Badge);

    var styles$1_ = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          display: 'flex',
          justifyContent: 'center',
          height: 56,
          backgroundColor: theme.palette.background.paper
        }
      };
    };
    var BottomNavigation = /*#__PURE__*/React__namespace.forwardRef(function BottomNavigation(props, ref) {
      var children = props.children,
          classes = props.classes,
          className = props.className,
          _props$component = props.component,
          Component = _props$component === void 0 ? 'div' : _props$component,
          onChange = props.onChange,
          _props$showLabels = props.showLabels,
          showLabels = _props$showLabels === void 0 ? false : _props$showLabels,
          value = props.value,
          other = _objectWithoutProperties(props, ["children", "classes", "className", "component", "onChange", "showLabels", "value"]);

      return /*#__PURE__*/React__namespace.createElement(Component, _extends$3({
        className: r$1(classes.root, className),
        ref: ref
      }, other), React__namespace.Children.map(children, function (child, childIndex) {
        if (! /*#__PURE__*/React__namespace.isValidElement(child)) {
          return null;
        }

        if (process.env.NODE_ENV !== 'production') {
          if (reactIs$2.exports.isFragment(child)) {
            console.error(["Material-UI: The BottomNavigation component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n'));
          }
        }

        var childValue = child.props.value === undefined ? childIndex : child.props.value;
        return /*#__PURE__*/React__namespace.cloneElement(child, {
          selected: childValue === value,
          showLabel: child.props.showLabel !== undefined ? child.props.showLabel : showLabels,
          value: childValue,
          onChange: onChange
        });
      }));
    });
    process.env.NODE_ENV !== "production" ? BottomNavigation.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * The content of the component.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: re
      /* @typescript-to-proptypes-ignore */
      .elementType,

      /**
       * Callback fired when the value changes.
       *
       * @param {object} event The event source of the callback.
       * @param {any} value We default to the index of the child.
       */
      onChange: re.func,

      /**
       * If `true`, all `BottomNavigationAction`s will show their labels.
       * By default, only the selected `BottomNavigationAction` will show its label.
       */
      showLabels: re.bool,

      /**
       * The value of the currently selected `BottomNavigationAction`.
       */
      value: re.any
    } : void 0;
    var BottomNavigation$1 = withStyles(styles$1_, {
      name: 'MuiBottomNavigation'
    })(BottomNavigation);

    var styles$1Z = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          transition: theme.transitions.create(['color', 'padding-top'], {
            duration: theme.transitions.duration.short
          }),
          padding: '6px 12px 8px',
          minWidth: 80,
          maxWidth: 168,
          color: theme.palette.text.secondary,
          flex: '1',
          '&$iconOnly': {
            paddingTop: 16
          },
          '&$selected': {
            paddingTop: 6,
            color: theme.palette.primary.main
          }
        },

        /* Pseudo-class applied to the root element if selected. */
        selected: {},

        /* Pseudo-class applied to the root element if `showLabel={false}` and not selected. */
        iconOnly: {},

        /* Styles applied to the span element that wraps the icon and label. */
        wrapper: {
          display: 'inline-flex',
          alignItems: 'center',
          justifyContent: 'center',
          width: '100%',
          flexDirection: 'column'
        },

        /* Styles applied to the label's span element. */
        label: {
          fontFamily: theme.typography.fontFamily,
          fontSize: theme.typography.pxToRem(12),
          opacity: 1,
          transition: 'font-size 0.2s, opacity 0.2s',
          transitionDelay: '0.1s',
          '&$iconOnly': {
            opacity: 0,
            transitionDelay: '0s'
          },
          '&$selected': {
            fontSize: theme.typography.pxToRem(14)
          }
        }
      };
    };
    var BottomNavigationAction = /*#__PURE__*/React__namespace.forwardRef(function BottomNavigationAction(props, ref) {
      var classes = props.classes,
          className = props.className,
          icon = props.icon,
          label = props.label,
          onChange = props.onChange,
          onClick = props.onClick,
          selected = props.selected,
          showLabel = props.showLabel,
          value = props.value,
          other = _objectWithoutProperties(props, ["classes", "className", "icon", "label", "onChange", "onClick", "selected", "showLabel", "value"]);

      var handleChange = function handleChange(event) {
        if (onChange) {
          onChange(event, value);
        }

        if (onClick) {
          onClick(event);
        }
      };

      return /*#__PURE__*/React__namespace.createElement(ButtonBase$1, _extends$3({
        ref: ref,
        className: r$1(classes.root, className, selected ? classes.selected : !showLabel && classes.iconOnly),
        focusRipple: true,
        onClick: handleChange
      }, other), /*#__PURE__*/React__namespace.createElement("span", {
        className: classes.wrapper
      }, icon, /*#__PURE__*/React__namespace.createElement("span", {
        className: r$1(classes.label, selected ? classes.selected : !showLabel && classes.iconOnly)
      }, label)));
    });
    process.env.NODE_ENV !== "production" ? BottomNavigationAction.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * This prop isn't supported.
       * Use the `component` prop if you need to change the children structure.
       */
      children: unsupportedProp,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * The icon element.
       */
      icon: re.node,

      /**
       * The label element.
       */
      label: re.node,

      /**
       * @ignore
       */
      onChange: re.func,

      /**
       * @ignore
       */
      onClick: re.func,

      /**
       * @ignore
       */
      selected: re.bool,

      /**
       * If `true`, the `BottomNavigationAction` will show its label.
       * By default, only the selected `BottomNavigationAction`
       * inside `BottomNavigation` will show its label.
       */
      showLabel: re.bool,

      /**
       * You can provide your own value. Otherwise, we fallback to the child position index.
       */
      value: re.any
    } : void 0;
    var BottomNavigationAction$1 = withStyles(styles$1Z, {
      name: 'MuiBottomNavigationAction'
    })(BottomNavigationAction);

    var styleFunction = styleFunctionSx(compose$1(borders$1, display, flexbox$1, grid$1, positions, palette$1, shadows, sizing$1, spacing, typography$1));
    /**
     * @ignore - do not document.
     */

    var Box = styled$1('div')(styleFunction, {
      name: 'MuiBox'
    });
    var Box$1 = Box;

    var styles$1Y = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          margin: 0
        },

        /* Styles applied to the root element if `variant="body2"`. */
        body2: theme.typography.body2,

        /* Styles applied to the root element if `variant="body1"`. */
        body1: theme.typography.body1,

        /* Styles applied to the root element if `variant="caption"`. */
        caption: theme.typography.caption,

        /* Styles applied to the root element if `variant="button"`. */
        button: theme.typography.button,

        /* Styles applied to the root element if `variant="h1"`. */
        h1: theme.typography.h1,

        /* Styles applied to the root element if `variant="h2"`. */
        h2: theme.typography.h2,

        /* Styles applied to the root element if `variant="h3"`. */
        h3: theme.typography.h3,

        /* Styles applied to the root element if `variant="h4"`. */
        h4: theme.typography.h4,

        /* Styles applied to the root element if `variant="h5"`. */
        h5: theme.typography.h5,

        /* Styles applied to the root element if `variant="h6"`. */
        h6: theme.typography.h6,

        /* Styles applied to the root element if `variant="subtitle1"`. */
        subtitle1: theme.typography.subtitle1,

        /* Styles applied to the root element if `variant="subtitle2"`. */
        subtitle2: theme.typography.subtitle2,

        /* Styles applied to the root element if `variant="overline"`. */
        overline: theme.typography.overline,

        /* Styles applied to the root element if `variant="srOnly"`. Only accessible to screen readers. */
        srOnly: {
          position: 'absolute',
          height: 1,
          width: 1,
          overflow: 'hidden'
        },

        /* Styles applied to the root element if `align="left"`. */
        alignLeft: {
          textAlign: 'left'
        },

        /* Styles applied to the root element if `align="center"`. */
        alignCenter: {
          textAlign: 'center'
        },

        /* Styles applied to the root element if `align="right"`. */
        alignRight: {
          textAlign: 'right'
        },

        /* Styles applied to the root element if `align="justify"`. */
        alignJustify: {
          textAlign: 'justify'
        },

        /* Styles applied to the root element if `nowrap={true}`. */
        noWrap: {
          overflow: 'hidden',
          textOverflow: 'ellipsis',
          whiteSpace: 'nowrap'
        },

        /* Styles applied to the root element if `gutterBottom={true}`. */
        gutterBottom: {
          marginBottom: '0.35em'
        },

        /* Styles applied to the root element if `paragraph={true}`. */
        paragraph: {
          marginBottom: 16
        },

        /* Styles applied to the root element if `color="inherit"`. */
        colorInherit: {
          color: 'inherit'
        },

        /* Styles applied to the root element if `color="primary"`. */
        colorPrimary: {
          color: theme.palette.primary.main
        },

        /* Styles applied to the root element if `color="secondary"`. */
        colorSecondary: {
          color: theme.palette.secondary.main
        },

        /* Styles applied to the root element if `color="textPrimary"`. */
        colorTextPrimary: {
          color: theme.palette.text.primary
        },

        /* Styles applied to the root element if `color="textSecondary"`. */
        colorTextSecondary: {
          color: theme.palette.text.secondary
        },

        /* Styles applied to the root element if `color="error"`. */
        colorError: {
          color: theme.palette.error.main
        },

        /* Styles applied to the root element if `display="inline"`. */
        displayInline: {
          display: 'inline'
        },

        /* Styles applied to the root element if `display="block"`. */
        displayBlock: {
          display: 'block'
        }
      };
    };
    var defaultVariantMapping = {
      h1: 'h1',
      h2: 'h2',
      h3: 'h3',
      h4: 'h4',
      h5: 'h5',
      h6: 'h6',
      subtitle1: 'h6',
      subtitle2: 'h6',
      body1: 'p',
      body2: 'p'
    };
    var Typography$1 = /*#__PURE__*/React__namespace.forwardRef(function Typography(props, ref) {
      var _props$align = props.align,
          align = _props$align === void 0 ? 'inherit' : _props$align,
          classes = props.classes,
          className = props.className,
          _props$color = props.color,
          color = _props$color === void 0 ? 'initial' : _props$color,
          component = props.component,
          _props$display = props.display,
          display = _props$display === void 0 ? 'initial' : _props$display,
          _props$gutterBottom = props.gutterBottom,
          gutterBottom = _props$gutterBottom === void 0 ? false : _props$gutterBottom,
          _props$noWrap = props.noWrap,
          noWrap = _props$noWrap === void 0 ? false : _props$noWrap,
          _props$paragraph = props.paragraph,
          paragraph = _props$paragraph === void 0 ? false : _props$paragraph,
          _props$variant = props.variant,
          variant = _props$variant === void 0 ? 'body1' : _props$variant,
          _props$variantMapping = props.variantMapping,
          variantMapping = _props$variantMapping === void 0 ? defaultVariantMapping : _props$variantMapping,
          other = _objectWithoutProperties(props, ["align", "classes", "className", "color", "component", "display", "gutterBottom", "noWrap", "paragraph", "variant", "variantMapping"]);

      var Component = component || (paragraph ? 'p' : variantMapping[variant] || defaultVariantMapping[variant]) || 'span';
      return /*#__PURE__*/React__namespace.createElement(Component, _extends$3({
        className: r$1(classes.root, className, variant !== 'inherit' && classes[variant], color !== 'initial' && classes["color".concat(capitalize(color))], noWrap && classes.noWrap, gutterBottom && classes.gutterBottom, paragraph && classes.paragraph, align !== 'inherit' && classes["align".concat(capitalize(align))], display !== 'initial' && classes["display".concat(capitalize(display))]),
        ref: ref
      }, other));
    });
    process.env.NODE_ENV !== "production" ? Typography$1.propTypes = {
      /**
       * Set the text-align on the component.
       */
      align: re.oneOf(['inherit', 'left', 'center', 'right', 'justify']),

      /**
       * The content of the component.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object.isRequired,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * The color of the component. It supports those theme colors that make sense for this component.
       */
      color: re.oneOf(['initial', 'inherit', 'primary', 'secondary', 'textPrimary', 'textSecondary', 'error']),

      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       * Overrides the behavior of the `variantMapping` prop.
       */
      component: re
      /* @typescript-to-proptypes-ignore */
      .elementType,

      /**
       * Controls the display type
       */
      display: re.oneOf(['initial', 'block', 'inline']),

      /**
       * If `true`, the text will have a bottom margin.
       */
      gutterBottom: re.bool,

      /**
       * If `true`, the text will not wrap, but instead will truncate with a text overflow ellipsis.
       *
       * Note that text overflow can only happen with block or inline-block level elements
       * (the element needs to have a width in order to overflow).
       */
      noWrap: re.bool,

      /**
       * If `true`, the text will have a bottom margin.
       */
      paragraph: re.bool,

      /**
       * Applies the theme typography styles.
       */
      variant: re.oneOf(['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'subtitle1', 'subtitle2', 'body1', 'body2', 'caption', 'button', 'overline', 'srOnly', 'inherit']),

      /**
       * The component maps the variant prop to a range of different HTML element types.
       * For instance, subtitle1 to `<h6>`.
       * If you wish to change that mapping, you can provide your own.
       * Alternatively, you can use the `component` prop.
       */
      variantMapping: re.object
    } : void 0;
    var Typography$2 = withStyles(styles$1Y, {
      name: 'MuiTypography'
    })(Typography$1);

    var Typography = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Typography$2
    });

    /**
     * @ignore - internal component.
     */

    var MoreHorizIcon = createSvgIcon$1( /*#__PURE__*/React__namespace.createElement("path", {
      d: "M6 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm12 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm-6 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"
    }), 'MoreHoriz');

    var styles$1X = function styles(theme) {
      return {
        root: {
          display: 'flex',
          marginLeft: theme.spacing(0.5),
          marginRight: theme.spacing(0.5),
          backgroundColor: theme.palette.grey[100],
          color: theme.palette.grey[700],
          borderRadius: 2,
          cursor: 'pointer',
          '&:hover, &:focus': {
            backgroundColor: theme.palette.grey[200]
          },
          '&:active': {
            boxShadow: theme.shadows[0],
            backgroundColor: emphasize(theme.palette.grey[200], 0.12)
          }
        },
        icon: {
          width: 24,
          height: 16
        }
      };
    };
    /**
     * @ignore - internal component.
     */


    function BreadcrumbCollapsed(props) {
      var classes = props.classes,
          other = _objectWithoutProperties(props, ["classes"]);

      return /*#__PURE__*/React__namespace.createElement(ButtonBase$1, _extends$3({
        component: "li",
        className: classes.root,
        focusRipple: true
      }, other), /*#__PURE__*/React__namespace.createElement(MoreHorizIcon, {
        className: classes.icon
      }));
    }

    process.env.NODE_ENV !== "production" ? BreadcrumbCollapsed.propTypes = {
      /**
       * @ignore
       */
      classes: re.object.isRequired
    } : void 0;
    var BreadcrumbCollapsed$1 = withStyles(styles$1X, {
      name: 'PrivateBreadcrumbCollapsed'
    })(BreadcrumbCollapsed);

    var styles$1W = {
      /* Styles applied to the root element. */
      root: {},

      /* Styles applied to the ol element. */
      ol: {
        display: 'flex',
        flexWrap: 'wrap',
        alignItems: 'center',
        padding: 0,
        margin: 0,
        listStyle: 'none'
      },

      /* Styles applied to the li element. */
      li: {},

      /* Styles applied to the separator element. */
      separator: {
        display: 'flex',
        userSelect: 'none',
        marginLeft: 8,
        marginRight: 8
      }
    };

    function insertSeparators(items, className, separator) {
      return items.reduce(function (acc, current, index) {
        if (index < items.length - 1) {
          acc = acc.concat(current, /*#__PURE__*/React__namespace.createElement("li", {
            "aria-hidden": true,
            key: "separator-".concat(index),
            className: className
          }, separator));
        } else {
          acc.push(current);
        }

        return acc;
      }, []);
    }

    var Breadcrumbs = /*#__PURE__*/React__namespace.forwardRef(function Breadcrumbs(props, ref) {
      var children = props.children,
          classes = props.classes,
          className = props.className,
          _props$component = props.component,
          Component = _props$component === void 0 ? 'nav' : _props$component,
          _props$expandText = props.expandText,
          expandText = _props$expandText === void 0 ? 'Show path' : _props$expandText,
          _props$itemsAfterColl = props.itemsAfterCollapse,
          itemsAfterCollapse = _props$itemsAfterColl === void 0 ? 1 : _props$itemsAfterColl,
          _props$itemsBeforeCol = props.itemsBeforeCollapse,
          itemsBeforeCollapse = _props$itemsBeforeCol === void 0 ? 1 : _props$itemsBeforeCol,
          _props$maxItems = props.maxItems,
          maxItems = _props$maxItems === void 0 ? 8 : _props$maxItems,
          _props$separator = props.separator,
          separator = _props$separator === void 0 ? '/' : _props$separator,
          other = _objectWithoutProperties(props, ["children", "classes", "className", "component", "expandText", "itemsAfterCollapse", "itemsBeforeCollapse", "maxItems", "separator"]);

      var _React$useState = React__namespace.useState(false),
          expanded = _React$useState[0],
          setExpanded = _React$useState[1];

      var renderItemsBeforeAndAfter = function renderItemsBeforeAndAfter(allItems) {
        var handleClickExpand = function handleClickExpand(event) {
          setExpanded(true); // The clicked element received the focus but gets removed from the DOM.
          // Let's keep the focus in the component after expanding.

          var focusable = event.currentTarget.parentNode.querySelector('a[href],button,[tabindex]');

          if (focusable) {
            focusable.focus();
          }
        }; // This defends against someone passing weird input, to ensure that if all
        // items would be shown anyway, we just show all items without the EllipsisItem


        if (itemsBeforeCollapse + itemsAfterCollapse >= allItems.length) {
          if (process.env.NODE_ENV !== 'production') {
            console.error(['Material-UI: You have provided an invalid combination of props to the Breadcrumbs.', "itemsAfterCollapse={".concat(itemsAfterCollapse, "} + itemsBeforeCollapse={").concat(itemsBeforeCollapse, "} >= maxItems={").concat(maxItems, "}")].join('\n'));
          }

          return allItems;
        }

        return [].concat(_toConsumableArray(allItems.slice(0, itemsBeforeCollapse)), [/*#__PURE__*/React__namespace.createElement(BreadcrumbCollapsed$1, {
          "aria-label": expandText,
          key: "ellipsis",
          onClick: handleClickExpand
        })], _toConsumableArray(allItems.slice(allItems.length - itemsAfterCollapse, allItems.length)));
      };

      var allItems = React__namespace.Children.toArray(children).filter(function (child) {
        if (process.env.NODE_ENV !== 'production') {
          if (reactIs$2.exports.isFragment(child)) {
            console.error(["Material-UI: The Breadcrumbs component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n'));
          }
        }

        return /*#__PURE__*/React__namespace.isValidElement(child);
      }).map(function (child, index) {
        return /*#__PURE__*/React__namespace.createElement("li", {
          className: classes.li,
          key: "child-".concat(index)
        }, child);
      });
      return /*#__PURE__*/React__namespace.createElement(Typography$2, _extends$3({
        ref: ref,
        component: Component,
        color: "textSecondary",
        className: r$1(classes.root, className)
      }, other), /*#__PURE__*/React__namespace.createElement("ol", {
        className: classes.ol
      }, insertSeparators(expanded || maxItems && allItems.length <= maxItems ? allItems : renderItemsBeforeAndAfter(allItems), classes.separator, separator)));
    });
    process.env.NODE_ENV !== "production" ? Breadcrumbs.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * The breadcrumb children.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: re
      /* @typescript-to-proptypes-ignore */
      .elementType,

      /**
       * Override the default label for the expand button.
       *
       * For localization purposes, you can use the provided [translations](/guides/localization/).
       */
      expandText: re.string,

      /**
       * If max items is exceeded, the number of items to show after the ellipsis.
       */
      itemsAfterCollapse: re.number,

      /**
       * If max items is exceeded, the number of items to show before the ellipsis.
       */
      itemsBeforeCollapse: re.number,

      /**
       * Specifies the maximum number of breadcrumbs to display. When there are more
       * than the maximum number, only the first `itemsBeforeCollapse` and last `itemsAfterCollapse`
       * will be shown, with an ellipsis in between.
       */
      maxItems: re.number,

      /**
       * Custom separator node.
       */
      separator: re.node
    } : void 0;
    var Breadcrumbs$1 = withStyles(styles$1W, {
      name: 'MuiBreadcrumbs'
    })(Breadcrumbs);

    var styles$1V = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: _extends$3({}, theme.typography.button, {
          boxSizing: 'border-box',
          minWidth: 64,
          padding: '6px 16px',
          borderRadius: theme.shape.borderRadius,
          color: theme.palette.text.primary,
          transition: theme.transitions.create(['background-color', 'box-shadow', 'border'], {
            duration: theme.transitions.duration.short
          }),
          '&:hover': {
            textDecoration: 'none',
            backgroundColor: alpha(theme.palette.text.primary, theme.palette.action.hoverOpacity),
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
              backgroundColor: 'transparent'
            },
            '&$disabled': {
              backgroundColor: 'transparent'
            }
          },
          '&$disabled': {
            color: theme.palette.action.disabled
          }
        }),

        /* Styles applied to the span element that wraps the children. */
        label: {
          width: '100%',
          // Ensure the correct width for iOS Safari
          display: 'inherit',
          alignItems: 'inherit',
          justifyContent: 'inherit'
        },

        /* Styles applied to the root element if `variant="text"`. */
        text: {
          padding: '6px 8px'
        },

        /* Styles applied to the root element if `variant="text"` and `color="primary"`. */
        textPrimary: {
          color: theme.palette.primary.main,
          '&:hover': {
            backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.hoverOpacity),
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
              backgroundColor: 'transparent'
            }
          }
        },

        /* Styles applied to the root element if `variant="text"` and `color="secondary"`. */
        textSecondary: {
          color: theme.palette.secondary.main,
          '&:hover': {
            backgroundColor: alpha(theme.palette.secondary.main, theme.palette.action.hoverOpacity),
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
              backgroundColor: 'transparent'
            }
          }
        },

        /* Styles applied to the root element if `variant="outlined"`. */
        outlined: {
          padding: '5px 15px',
          border: "1px solid ".concat(theme.palette.type === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)'),
          '&$disabled': {
            border: "1px solid ".concat(theme.palette.action.disabledBackground)
          }
        },

        /* Styles applied to the root element if `variant="outlined"` and `color="primary"`. */
        outlinedPrimary: {
          color: theme.palette.primary.main,
          border: "1px solid ".concat(alpha(theme.palette.primary.main, 0.5)),
          '&:hover': {
            border: "1px solid ".concat(theme.palette.primary.main),
            backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.hoverOpacity),
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
              backgroundColor: 'transparent'
            }
          }
        },

        /* Styles applied to the root element if `variant="outlined"` and `color="secondary"`. */
        outlinedSecondary: {
          color: theme.palette.secondary.main,
          border: "1px solid ".concat(alpha(theme.palette.secondary.main, 0.5)),
          '&:hover': {
            border: "1px solid ".concat(theme.palette.secondary.main),
            backgroundColor: alpha(theme.palette.secondary.main, theme.palette.action.hoverOpacity),
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
              backgroundColor: 'transparent'
            }
          },
          '&$disabled': {
            border: "1px solid ".concat(theme.palette.action.disabled)
          }
        },

        /* Styles applied to the root element if `variant="contained"`. */
        contained: {
          color: theme.palette.getContrastText(theme.palette.grey[300]),
          backgroundColor: theme.palette.grey[300],
          boxShadow: theme.shadows[2],
          '&:hover': {
            backgroundColor: theme.palette.grey.A100,
            boxShadow: theme.shadows[4],
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
              boxShadow: theme.shadows[2],
              backgroundColor: theme.palette.grey[300]
            },
            '&$disabled': {
              backgroundColor: theme.palette.action.disabledBackground
            }
          },
          '&$focusVisible': {
            boxShadow: theme.shadows[6]
          },
          '&:active': {
            boxShadow: theme.shadows[8]
          },
          '&$disabled': {
            color: theme.palette.action.disabled,
            boxShadow: theme.shadows[0],
            backgroundColor: theme.palette.action.disabledBackground
          }
        },

        /* Styles applied to the root element if `variant="contained"` and `color="primary"`. */
        containedPrimary: {
          color: theme.palette.primary.contrastText,
          backgroundColor: theme.palette.primary.main,
          '&:hover': {
            backgroundColor: theme.palette.primary.dark,
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
              backgroundColor: theme.palette.primary.main
            }
          }
        },

        /* Styles applied to the root element if `variant="contained"` and `color="secondary"`. */
        containedSecondary: {
          color: theme.palette.secondary.contrastText,
          backgroundColor: theme.palette.secondary.main,
          '&:hover': {
            backgroundColor: theme.palette.secondary.dark,
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
              backgroundColor: theme.palette.secondary.main
            }
          }
        },

        /* Styles applied to the root element if `disableElevation={true}`. */
        disableElevation: {
          boxShadow: 'none',
          '&:hover': {
            boxShadow: 'none'
          },
          '&$focusVisible': {
            boxShadow: 'none'
          },
          '&:active': {
            boxShadow: 'none'
          },
          '&$disabled': {
            boxShadow: 'none'
          }
        },

        /* Pseudo-class applied to the ButtonBase root element if the button is keyboard focused. */
        focusVisible: {},

        /* Pseudo-class applied to the root element if `disabled={true}`. */
        disabled: {},

        /* Styles applied to the root element if `color="inherit"`. */
        colorInherit: {
          color: 'inherit',
          borderColor: 'currentColor'
        },

        /* Styles applied to the root element if `size="small"` and `variant="text"`. */
        textSizeSmall: {
          padding: '4px 5px',
          fontSize: theme.typography.pxToRem(13)
        },

        /* Styles applied to the root element if `size="large"` and `variant="text"`. */
        textSizeLarge: {
          padding: '8px 11px',
          fontSize: theme.typography.pxToRem(15)
        },

        /* Styles applied to the root element if `size="small"` and `variant="outlined"`. */
        outlinedSizeSmall: {
          padding: '3px 9px',
          fontSize: theme.typography.pxToRem(13)
        },

        /* Styles applied to the root element if `size="large"` and `variant="outlined"`. */
        outlinedSizeLarge: {
          padding: '7px 21px',
          fontSize: theme.typography.pxToRem(15)
        },

        /* Styles applied to the root element if `size="small"` and `variant="contained"`. */
        containedSizeSmall: {
          padding: '4px 10px',
          fontSize: theme.typography.pxToRem(13)
        },

        /* Styles applied to the root element if `size="large"` and `variant="contained"`. */
        containedSizeLarge: {
          padding: '8px 22px',
          fontSize: theme.typography.pxToRem(15)
        },

        /* Styles applied to the root element if `size="small"`. */
        sizeSmall: {},

        /* Styles applied to the root element if `size="large"`. */
        sizeLarge: {},

        /* Styles applied to the root element if `fullWidth={true}`. */
        fullWidth: {
          width: '100%'
        },

        /* Styles applied to the startIcon element if supplied. */
        startIcon: {
          display: 'inherit',
          marginRight: 8,
          marginLeft: -4,
          '&$iconSizeSmall': {
            marginLeft: -2
          }
        },

        /* Styles applied to the endIcon element if supplied. */
        endIcon: {
          display: 'inherit',
          marginRight: -4,
          marginLeft: 8,
          '&$iconSizeSmall': {
            marginRight: -2
          }
        },

        /* Styles applied to the icon element if supplied and `size="small"`. */
        iconSizeSmall: {
          '& > *:first-child': {
            fontSize: 18
          }
        },

        /* Styles applied to the icon element if supplied and `size="medium"`. */
        iconSizeMedium: {
          '& > *:first-child': {
            fontSize: 20
          }
        },

        /* Styles applied to the icon element if supplied and `size="large"`. */
        iconSizeLarge: {
          '& > *:first-child': {
            fontSize: 22
          }
        }
      };
    };
    var Button$1 = /*#__PURE__*/React__namespace.forwardRef(function Button(props, ref) {
      var children = props.children,
          classes = props.classes,
          className = props.className,
          _props$color = props.color,
          color = _props$color === void 0 ? 'default' : _props$color,
          _props$component = props.component,
          component = _props$component === void 0 ? 'button' : _props$component,
          _props$disabled = props.disabled,
          disabled = _props$disabled === void 0 ? false : _props$disabled,
          _props$disableElevati = props.disableElevation,
          disableElevation = _props$disableElevati === void 0 ? false : _props$disableElevati,
          _props$disableFocusRi = props.disableFocusRipple,
          disableFocusRipple = _props$disableFocusRi === void 0 ? false : _props$disableFocusRi,
          endIconProp = props.endIcon,
          focusVisibleClassName = props.focusVisibleClassName,
          _props$fullWidth = props.fullWidth,
          fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,
          _props$size = props.size,
          size = _props$size === void 0 ? 'medium' : _props$size,
          startIconProp = props.startIcon,
          _props$type = props.type,
          type = _props$type === void 0 ? 'button' : _props$type,
          _props$variant = props.variant,
          variant = _props$variant === void 0 ? 'text' : _props$variant,
          other = _objectWithoutProperties(props, ["children", "classes", "className", "color", "component", "disabled", "disableElevation", "disableFocusRipple", "endIcon", "focusVisibleClassName", "fullWidth", "size", "startIcon", "type", "variant"]);

      var startIcon = startIconProp && /*#__PURE__*/React__namespace.createElement("span", {
        className: r$1(classes.startIcon, classes["iconSize".concat(capitalize(size))])
      }, startIconProp);
      var endIcon = endIconProp && /*#__PURE__*/React__namespace.createElement("span", {
        className: r$1(classes.endIcon, classes["iconSize".concat(capitalize(size))])
      }, endIconProp);
      return /*#__PURE__*/React__namespace.createElement(ButtonBase$1, _extends$3({
        className: r$1(classes.root, classes[variant], className, color === 'inherit' ? classes.colorInherit : color !== 'default' && classes["".concat(variant).concat(capitalize(color))], size !== 'medium' && [classes["".concat(variant, "Size").concat(capitalize(size))], classes["size".concat(capitalize(size))]], disableElevation && classes.disableElevation, disabled && classes.disabled, fullWidth && classes.fullWidth),
        component: component,
        disabled: disabled,
        focusRipple: !disableFocusRipple,
        focusVisibleClassName: r$1(classes.focusVisible, focusVisibleClassName),
        ref: ref,
        type: type
      }, other), /*#__PURE__*/React__namespace.createElement("span", {
        className: classes.label
      }, startIcon, children, endIcon));
    });
    process.env.NODE_ENV !== "production" ? Button$1.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * The content of the button.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * The color of the component. It supports those theme colors that make sense for this component.
       */
      color: re.oneOf(['default', 'inherit', 'primary', 'secondary']),

      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: re
      /* @typescript-to-proptypes-ignore */
      .elementType,

      /**
       * If `true`, the button will be disabled.
       */
      disabled: re.bool,

      /**
       * If `true`, no elevation is used.
       */
      disableElevation: re.bool,

      /**
       * If `true`, the  keyboard focus ripple will be disabled.
       */
      disableFocusRipple: re.bool,

      /**
       * If `true`, the ripple effect will be disabled.
       *
       * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
       * to highlight the element by applying separate styles with the `focusVisibleClassName`.
       */
      disableRipple: re.bool,

      /**
       * Element placed after the children.
       */
      endIcon: re.node,

      /**
       * @ignore
       */
      focusVisibleClassName: re.string,

      /**
       * If `true`, the button will take up the full width of its container.
       */
      fullWidth: re.bool,

      /**
       * The URL to link to when the button is clicked.
       * If defined, an `a` element will be used as the root node.
       */
      href: re.string,

      /**
       * The size of the button.
       * `small` is equivalent to the dense button styling.
       */
      size: re.oneOf(['large', 'medium', 'small']),

      /**
       * Element placed before the children.
       */
      startIcon: re.node,

      /**
       * @ignore
       */
      type: re.oneOfType([re.oneOf(['button', 'reset', 'submit']), re.string]),

      /**
       * The variant to use.
       */
      variant: re.oneOf(['contained', 'outlined', 'text'])
    } : void 0;
    var Button$2 = withStyles(styles$1V, {
      name: 'MuiButton'
    })(Button$1);

    var Button = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Button$2
    });

    // eslint-disable-next-line no-unused-expressions

    Button$2.styles;
    var styles$1U = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          display: 'inline-flex',
          borderRadius: theme.shape.borderRadius
        },

        /* Styles applied to the root element if `variant="contained"`. */
        contained: {
          boxShadow: theme.shadows[2]
        },

        /* Styles applied to the root element if `disableElevation={true}`. */
        disableElevation: {
          boxShadow: 'none'
        },

        /* Pseudo-class applied to child elements if `disabled={true}`. */
        disabled: {},

        /* Styles applied to the root element if `fullWidth={true}`. */
        fullWidth: {
          width: '100%'
        },

        /* Styles applied to the root element if `orientation="vertical"`. */
        vertical: {
          flexDirection: 'column'
        },

        /* Styles applied to the children. */
        grouped: {
          minWidth: 40
        },

        /* Styles applied to the children if `orientation="horizontal"`. */
        groupedHorizontal: {
          '&:not(:first-child)': {
            borderTopLeftRadius: 0,
            borderBottomLeftRadius: 0
          },
          '&:not(:last-child)': {
            borderTopRightRadius: 0,
            borderBottomRightRadius: 0
          }
        },

        /* Styles applied to the children if `orientation="vertical"`. */
        groupedVertical: {
          '&:not(:first-child)': {
            borderTopRightRadius: 0,
            borderTopLeftRadius: 0
          },
          '&:not(:last-child)': {
            borderBottomRightRadius: 0,
            borderBottomLeftRadius: 0
          }
        },

        /* Styles applied to the children if `variant="text"`. */
        groupedText: {},

        /* Styles applied to the children if `variant="text"` and `orientation="horizontal"`. */
        groupedTextHorizontal: {
          '&:not(:last-child)': {
            borderRight: "1px solid ".concat(theme.palette.type === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)')
          }
        },

        /* Styles applied to the children if `variant="text"` and `orientation="vertical"`. */
        groupedTextVertical: {
          '&:not(:last-child)': {
            borderBottom: "1px solid ".concat(theme.palette.type === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)')
          }
        },

        /* Styles applied to the children if `variant="text"` and `color="primary"`. */
        groupedTextPrimary: {
          '&:not(:last-child)': {
            borderColor: alpha(theme.palette.primary.main, 0.5)
          }
        },

        /* Styles applied to the children if `variant="text"` and `color="secondary"`. */
        groupedTextSecondary: {
          '&:not(:last-child)': {
            borderColor: alpha(theme.palette.secondary.main, 0.5)
          }
        },

        /* Styles applied to the children if `variant="outlined"`. */
        groupedOutlined: {},

        /* Styles applied to the children if `variant="outlined"` and `orientation="horizontal"`. */
        groupedOutlinedHorizontal: {
          '&:not(:first-child)': {
            marginLeft: -1
          },
          '&:not(:last-child)': {
            borderRightColor: 'transparent'
          }
        },

        /* Styles applied to the children if `variant="outlined"` and `orientation="vertical"`. */
        groupedOutlinedVertical: {
          '&:not(:first-child)': {
            marginTop: -1
          },
          '&:not(:last-child)': {
            borderBottomColor: 'transparent'
          }
        },

        /* Styles applied to the children if `variant="outlined"` and `color="primary"`. */
        groupedOutlinedPrimary: {
          '&:hover': {
            borderColor: theme.palette.primary.main
          }
        },

        /* Styles applied to the children if `variant="outlined"` and `color="secondary"`. */
        groupedOutlinedSecondary: {
          '&:hover': {
            borderColor: theme.palette.secondary.main
          }
        },

        /* Styles applied to the children if `variant="contained"`. */
        groupedContained: {
          boxShadow: 'none'
        },

        /* Styles applied to the children if `variant="contained"` and `orientation="horizontal"`. */
        groupedContainedHorizontal: {
          '&:not(:last-child)': {
            borderRight: "1px solid ".concat(theme.palette.grey[400]),
            '&$disabled': {
              borderRight: "1px solid ".concat(theme.palette.action.disabled)
            }
          }
        },

        /* Styles applied to the children if `variant="contained"` and `orientation="vertical"`. */
        groupedContainedVertical: {
          '&:not(:last-child)': {
            borderBottom: "1px solid ".concat(theme.palette.grey[400]),
            '&$disabled': {
              borderBottom: "1px solid ".concat(theme.palette.action.disabled)
            }
          }
        },

        /* Styles applied to the children if `variant="contained"` and `color="primary"`. */
        groupedContainedPrimary: {
          '&:not(:last-child)': {
            borderColor: theme.palette.primary.dark
          }
        },

        /* Styles applied to the children if `variant="contained"` and `color="secondary"`. */
        groupedContainedSecondary: {
          '&:not(:last-child)': {
            borderColor: theme.palette.secondary.dark
          }
        }
      };
    };
    var ButtonGroup = /*#__PURE__*/React__namespace.forwardRef(function ButtonGroup(props, ref) {
      var children = props.children,
          classes = props.classes,
          className = props.className,
          _props$color = props.color,
          color = _props$color === void 0 ? 'default' : _props$color,
          _props$component = props.component,
          Component = _props$component === void 0 ? 'div' : _props$component,
          _props$disabled = props.disabled,
          disabled = _props$disabled === void 0 ? false : _props$disabled,
          _props$disableElevati = props.disableElevation,
          disableElevation = _props$disableElevati === void 0 ? false : _props$disableElevati,
          _props$disableFocusRi = props.disableFocusRipple,
          disableFocusRipple = _props$disableFocusRi === void 0 ? false : _props$disableFocusRi,
          _props$disableRipple = props.disableRipple,
          disableRipple = _props$disableRipple === void 0 ? false : _props$disableRipple,
          _props$fullWidth = props.fullWidth,
          fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,
          _props$orientation = props.orientation,
          orientation = _props$orientation === void 0 ? 'horizontal' : _props$orientation,
          _props$size = props.size,
          size = _props$size === void 0 ? 'medium' : _props$size,
          _props$variant = props.variant,
          variant = _props$variant === void 0 ? 'outlined' : _props$variant,
          other = _objectWithoutProperties(props, ["children", "classes", "className", "color", "component", "disabled", "disableElevation", "disableFocusRipple", "disableRipple", "fullWidth", "orientation", "size", "variant"]);

      var buttonClassName = r$1(classes.grouped, classes["grouped".concat(capitalize(orientation))], classes["grouped".concat(capitalize(variant))], classes["grouped".concat(capitalize(variant)).concat(capitalize(orientation))], classes["grouped".concat(capitalize(variant)).concat(color !== 'default' ? capitalize(color) : '')], disabled && classes.disabled);
      return /*#__PURE__*/React__namespace.createElement(Component, _extends$3({
        role: "group",
        className: r$1(classes.root, className, fullWidth && classes.fullWidth, disableElevation && classes.disableElevation, variant === 'contained' && classes.contained, orientation === 'vertical' && classes.vertical),
        ref: ref
      }, other), React__namespace.Children.map(children, function (child) {
        if (! /*#__PURE__*/React__namespace.isValidElement(child)) {
          return null;
        }

        if (process.env.NODE_ENV !== 'production') {
          if (reactIs$2.exports.isFragment(child)) {
            console.error(["Material-UI: The ButtonGroup component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n'));
          }
        }

        return /*#__PURE__*/React__namespace.cloneElement(child, {
          className: r$1(buttonClassName, child.props.className),
          color: child.props.color || color,
          disabled: child.props.disabled || disabled,
          disableElevation: child.props.disableElevation || disableElevation,
          disableFocusRipple: disableFocusRipple,
          disableRipple: disableRipple,
          fullWidth: fullWidth,
          size: child.props.size || size,
          variant: child.props.variant || variant
        });
      }));
    });
    process.env.NODE_ENV !== "production" ? ButtonGroup.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * The content of the button group.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * The color of the component. It supports those theme colors that make sense for this component.
       */
      color: re.oneOf(['default', 'inherit', 'primary', 'secondary']),

      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: re
      /* @typescript-to-proptypes-ignore */
      .elementType,

      /**
       * If `true`, the buttons will be disabled.
       */
      disabled: re.bool,

      /**
       * If `true`, no elevation is used.
       */
      disableElevation: re.bool,

      /**
       * If `true`, the button keyboard focus ripple will be disabled.
       */
      disableFocusRipple: re.bool,

      /**
       * If `true`, the button ripple effect will be disabled.
       */
      disableRipple: re.bool,

      /**
       * If `true`, the buttons will take up the full width of its container.
       */
      fullWidth: re.bool,

      /**
       * The group orientation (layout flow direction).
       */
      orientation: re.oneOf(['horizontal', 'vertical']),

      /**
       * The size of the button.
       * `small` is equivalent to the dense button styling.
       */
      size: re.oneOf(['large', 'medium', 'small']),

      /**
       * The variant to use.
       */
      variant: re.oneOf(['contained', 'outlined', 'text'])
    } : void 0;
    var ButtonGroup$1 = withStyles(styles$1U, {
      name: 'MuiButtonGroup'
    })(ButtonGroup);

    var styles$1T = {
      /* Styles applied to the root element. */
      root: {
        overflow: 'hidden'
      }
    };
    var Card = /*#__PURE__*/React__namespace.forwardRef(function Card(props, ref) {
      var classes = props.classes,
          className = props.className,
          _props$raised = props.raised,
          raised = _props$raised === void 0 ? false : _props$raised,
          other = _objectWithoutProperties(props, ["classes", "className", "raised"]);

      return /*#__PURE__*/React__namespace.createElement(M, _extends$3({
        className: r$1(classes.root, className),
        elevation: raised ? 8 : 1,
        ref: ref
      }, other));
    });
    process.env.NODE_ENV !== "production" ? Card.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * The content of the component.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * If `true`, the card will use raised styling.
       */
      raised: re.bool
    } : void 0;
    var Card$1 = withStyles(styles$1T, {
      name: 'MuiCard'
    })(Card);

    var styles$1S = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          display: 'block',
          textAlign: 'inherit',
          width: '100%',
          '&:hover $focusHighlight': {
            opacity: theme.palette.action.hoverOpacity
          },
          '&$focusVisible $focusHighlight': {
            opacity: 0.12
          }
        },

        /* Pseudo-class applied to the ButtonBase root element if the action area is keyboard focused. */
        focusVisible: {},

        /* Styles applied to the overlay that covers the action area when it is keyboard focused. */
        focusHighlight: {
          overflow: 'hidden',
          pointerEvents: 'none',
          position: 'absolute',
          top: 0,
          right: 0,
          bottom: 0,
          left: 0,
          borderRadius: 'inherit',
          opacity: 0,
          backgroundColor: 'currentcolor',
          transition: theme.transitions.create('opacity', {
            duration: theme.transitions.duration.short
          })
        }
      };
    };
    var CardActionArea = /*#__PURE__*/React__namespace.forwardRef(function CardActionArea(props, ref) {
      var children = props.children,
          classes = props.classes,
          className = props.className,
          focusVisibleClassName = props.focusVisibleClassName,
          other = _objectWithoutProperties(props, ["children", "classes", "className", "focusVisibleClassName"]);

      return /*#__PURE__*/React__namespace.createElement(ButtonBase$1, _extends$3({
        className: r$1(classes.root, className),
        focusVisibleClassName: r$1(focusVisibleClassName, classes.focusVisible),
        ref: ref
      }, other), children, /*#__PURE__*/React__namespace.createElement("span", {
        className: classes.focusHighlight
      }));
    });
    process.env.NODE_ENV !== "production" ? CardActionArea.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * The content of the component.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * @ignore
       */
      focusVisibleClassName: re.string
    } : void 0;
    var CardActionArea$1 = withStyles(styles$1S, {
      name: 'MuiCardActionArea'
    })(CardActionArea);

    var styles$1R = {
      /* Styles applied to the root element. */
      root: {
        display: 'flex',
        alignItems: 'center',
        padding: 8
      },

      /* Styles applied to the root element if `disableSpacing={false}`. */
      spacing: {
        '& > :not(:first-child)': {
          marginLeft: 8
        }
      }
    };
    var CardActions = /*#__PURE__*/React__namespace.forwardRef(function CardActions(props, ref) {
      var _props$disableSpacing = props.disableSpacing,
          disableSpacing = _props$disableSpacing === void 0 ? false : _props$disableSpacing,
          classes = props.classes,
          className = props.className,
          other = _objectWithoutProperties(props, ["disableSpacing", "classes", "className"]);

      return /*#__PURE__*/React__namespace.createElement("div", _extends$3({
        className: r$1(classes.root, className, !disableSpacing && classes.spacing),
        ref: ref
      }, other));
    });
    process.env.NODE_ENV !== "production" ? CardActions.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * The content of the component.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * If `true`, the actions do not have additional margin.
       */
      disableSpacing: re.bool
    } : void 0;
    var CardActions$1 = withStyles(styles$1R, {
      name: 'MuiCardActions'
    })(CardActions);

    var styles$1Q = {
      /* Styles applied to the root element. */
      root: {
        padding: 16,
        '&:last-child': {
          paddingBottom: 24
        }
      }
    };
    var CardContent = /*#__PURE__*/React__namespace.forwardRef(function CardContent(props, ref) {
      var classes = props.classes,
          className = props.className,
          _props$component = props.component,
          Component = _props$component === void 0 ? 'div' : _props$component,
          other = _objectWithoutProperties(props, ["classes", "className", "component"]);

      return /*#__PURE__*/React__namespace.createElement(Component, _extends$3({
        className: r$1(classes.root, className),
        ref: ref
      }, other));
    });
    process.env.NODE_ENV !== "production" ? CardContent.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * The content of the component.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: re
      /* @typescript-to-proptypes-ignore */
      .elementType
    } : void 0;
    var CardContent$1 = withStyles(styles$1Q, {
      name: 'MuiCardContent'
    })(CardContent);

    var styles$1P = {
      /* Styles applied to the root element. */
      root: {
        display: 'flex',
        alignItems: 'center',
        padding: 16
      },

      /* Styles applied to the avatar element. */
      avatar: {
        flex: '0 0 auto',
        marginRight: 16
      },

      /* Styles applied to the action element. */
      action: {
        flex: '0 0 auto',
        alignSelf: 'flex-start',
        marginTop: -8,
        marginRight: -8
      },

      /* Styles applied to the content wrapper element. */
      content: {
        flex: '1 1 auto'
      },

      /* Styles applied to the title Typography element. */
      title: {},

      /* Styles applied to the subheader Typography element. */
      subheader: {}
    };
    var CardHeader = /*#__PURE__*/React__namespace.forwardRef(function CardHeader(props, ref) {
      var action = props.action,
          avatar = props.avatar,
          classes = props.classes,
          className = props.className,
          _props$component = props.component,
          Component = _props$component === void 0 ? 'div' : _props$component,
          _props$disableTypogra = props.disableTypography,
          disableTypography = _props$disableTypogra === void 0 ? false : _props$disableTypogra,
          subheaderProp = props.subheader,
          subheaderTypographyProps = props.subheaderTypographyProps,
          titleProp = props.title,
          titleTypographyProps = props.titleTypographyProps,
          other = _objectWithoutProperties(props, ["action", "avatar", "classes", "className", "component", "disableTypography", "subheader", "subheaderTypographyProps", "title", "titleTypographyProps"]);

      var title = titleProp;

      if (title != null && title.type !== Typography$2 && !disableTypography) {
        title = /*#__PURE__*/React__namespace.createElement(Typography$2, _extends$3({
          variant: avatar ? 'body2' : 'h5',
          className: classes.title,
          component: "span",
          display: "block"
        }, titleTypographyProps), title);
      }

      var subheader = subheaderProp;

      if (subheader != null && subheader.type !== Typography$2 && !disableTypography) {
        subheader = /*#__PURE__*/React__namespace.createElement(Typography$2, _extends$3({
          variant: avatar ? 'body2' : 'body1',
          className: classes.subheader,
          color: "textSecondary",
          component: "span",
          display: "block"
        }, subheaderTypographyProps), subheader);
      }

      return /*#__PURE__*/React__namespace.createElement(Component, _extends$3({
        className: r$1(classes.root, className),
        ref: ref
      }, other), avatar && /*#__PURE__*/React__namespace.createElement("div", {
        className: classes.avatar
      }, avatar), /*#__PURE__*/React__namespace.createElement("div", {
        className: classes.content
      }, title, subheader), action && /*#__PURE__*/React__namespace.createElement("div", {
        className: classes.action
      }, action));
    });
    process.env.NODE_ENV !== "production" ? CardHeader.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * The action to display in the card header.
       */
      action: re.node,

      /**
       * The Avatar for the Card Header.
       */
      avatar: re.node,

      /**
       * @ignore
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: re
      /* @typescript-to-proptypes-ignore */
      .elementType,

      /**
       * If `true`, `subheader` and `title` won't be wrapped by a Typography component.
       * This can be useful to render an alternative Typography variant by wrapping
       * the `title` text, and optional `subheader` text
       * with the Typography component.
       */
      disableTypography: re.bool,

      /**
       * The content of the component.
       */
      subheader: re.node,

      /**
       * These props will be forwarded to the subheader
       * (as long as disableTypography is not `true`).
       */
      subheaderTypographyProps: re.object,

      /**
       * The content of the Card Title.
       */
      title: re.node,

      /**
       * These props will be forwarded to the title
       * (as long as disableTypography is not `true`).
       */
      titleTypographyProps: re.object
    } : void 0;
    var CardHeader$1 = withStyles(styles$1P, {
      name: 'MuiCardHeader'
    })(CardHeader);

    var styles$1O = {
      /* Styles applied to the root element. */
      root: {
        display: 'block',
        backgroundSize: 'cover',
        backgroundRepeat: 'no-repeat',
        backgroundPosition: 'center'
      },

      /* Styles applied to the root element if `component="video, audio, picture, iframe, or img"`. */
      media: {
        width: '100%'
      },

      /* Styles applied to the root element if `component="picture or img"`. */
      img: {
        // ⚠️ object-fit is not supported by IE 11.
        objectFit: 'cover'
      }
    };
    var MEDIA_COMPONENTS = ['video', 'audio', 'picture', 'iframe', 'img'];
    var CardMedia = /*#__PURE__*/React__namespace.forwardRef(function CardMedia(props, ref) {
      var children = props.children,
          classes = props.classes,
          className = props.className,
          _props$component = props.component,
          Component = _props$component === void 0 ? 'div' : _props$component,
          image = props.image,
          src = props.src,
          style = props.style,
          other = _objectWithoutProperties(props, ["children", "classes", "className", "component", "image", "src", "style"]);

      var isMediaComponent = MEDIA_COMPONENTS.indexOf(Component) !== -1;
      var composedStyle = !isMediaComponent && image ? _extends$3({
        backgroundImage: "url(\"".concat(image, "\")")
      }, style) : style;
      return /*#__PURE__*/React__namespace.createElement(Component, _extends$3({
        className: r$1(classes.root, className, isMediaComponent && classes.media, "picture img".indexOf(Component) !== -1 && classes.img),
        ref: ref,
        style: composedStyle,
        src: isMediaComponent ? image || src : undefined
      }, other), children);
    });
    process.env.NODE_ENV !== "production" ? CardMedia.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * The content of the component.
       */
      children: chainPropTypes$1(re.node, function (props) {
        if (!props.children && !props.image && !props.src && !props.component) {
          return new Error('Material-UI: Either `children`, `image`, `src` or `component` prop must be specified.');
        }

        return null;
      }),

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: re
      /* @typescript-to-proptypes-ignore */
      .elementType,

      /**
       * Image to be displayed as a background image.
       * Either `image` or `src` prop must be specified.
       * Note that caller must specify height otherwise the image will not be visible.
       */
      image: re.string,

      /**
       * An alias for `image` property.
       * Available only with media components.
       * Media components: `video`, `audio`, `picture`, `iframe`, `img`.
       */
      src: re.string,

      /**
       * @ignore
       */
      style: re.object
    } : void 0;
    var CardMedia$1 = withStyles(styles$1O, {
      name: 'MuiCardMedia'
    })(CardMedia);

    /**
     * @ignore - internal component.
     */

    var FormControlContext = React__namespace.createContext();

    if (process.env.NODE_ENV !== 'production') {
      FormControlContext.displayName = 'FormControlContext';
    }

    function useFormControl$1() {
      return React__namespace.useContext(FormControlContext);
    }
    var FormControlContext$1 = FormControlContext;

    function useFormControl() {
      return React__namespace.useContext(FormControlContext$1);
    }

    var styles$1N = {
      root: {
        padding: 9
      },
      checked: {},
      disabled: {},
      input: {
        cursor: 'inherit',
        position: 'absolute',
        opacity: 0,
        width: '100%',
        height: '100%',
        top: 0,
        left: 0,
        margin: 0,
        padding: 0,
        zIndex: 1
      }
    };
    /**
     * @ignore - internal component.
     */

    var SwitchBase = /*#__PURE__*/React__namespace.forwardRef(function SwitchBase(props, ref) {
      var autoFocus = props.autoFocus,
          checkedProp = props.checked,
          checkedIcon = props.checkedIcon,
          classes = props.classes,
          className = props.className,
          defaultChecked = props.defaultChecked,
          disabledProp = props.disabled,
          icon = props.icon,
          id = props.id,
          inputProps = props.inputProps,
          inputRef = props.inputRef,
          name = props.name,
          onBlur = props.onBlur,
          onChange = props.onChange,
          onFocus = props.onFocus,
          readOnly = props.readOnly,
          required = props.required,
          tabIndex = props.tabIndex,
          type = props.type,
          value = props.value,
          other = _objectWithoutProperties(props, ["autoFocus", "checked", "checkedIcon", "classes", "className", "defaultChecked", "disabled", "icon", "id", "inputProps", "inputRef", "name", "onBlur", "onChange", "onFocus", "readOnly", "required", "tabIndex", "type", "value"]);

      var _useControlled = useControlled({
        controlled: checkedProp,
        default: Boolean(defaultChecked),
        name: 'SwitchBase',
        state: 'checked'
      }),
          _useControlled2 = _slicedToArray(_useControlled, 2),
          checked = _useControlled2[0],
          setCheckedState = _useControlled2[1];

      var muiFormControl = useFormControl();

      var handleFocus = function handleFocus(event) {
        if (onFocus) {
          onFocus(event);
        }

        if (muiFormControl && muiFormControl.onFocus) {
          muiFormControl.onFocus(event);
        }
      };

      var handleBlur = function handleBlur(event) {
        if (onBlur) {
          onBlur(event);
        }

        if (muiFormControl && muiFormControl.onBlur) {
          muiFormControl.onBlur(event);
        }
      };

      var handleInputChange = function handleInputChange(event) {
        var newChecked = event.target.checked;
        setCheckedState(newChecked);

        if (onChange) {
          // TODO v5: remove the second argument.
          onChange(event, newChecked);
        }
      };

      var disabled = disabledProp;

      if (muiFormControl) {
        if (typeof disabled === 'undefined') {
          disabled = muiFormControl.disabled;
        }
      }

      var hasLabelFor = type === 'checkbox' || type === 'radio';
      return /*#__PURE__*/React__namespace.createElement(IconButton$1, _extends$3({
        component: "span",
        className: r$1(classes.root, className, checked && classes.checked, disabled && classes.disabled),
        disabled: disabled,
        tabIndex: null,
        role: undefined,
        onFocus: handleFocus,
        onBlur: handleBlur,
        ref: ref
      }, other), /*#__PURE__*/React__namespace.createElement("input", _extends$3({
        autoFocus: autoFocus,
        checked: checkedProp,
        defaultChecked: defaultChecked,
        className: classes.input,
        disabled: disabled,
        id: hasLabelFor && id,
        name: name,
        onChange: handleInputChange,
        readOnly: readOnly,
        ref: inputRef,
        required: required,
        tabIndex: tabIndex,
        type: type,
        value: value
      }, inputProps)), checked ? checkedIcon : icon);
    }); // NB: If changed, please update Checkbox, Switch and Radio
    // so that the API documentation is updated.

    process.env.NODE_ENV !== "production" ? SwitchBase.propTypes = {
      /**
       * If `true`, the `input` element will be focused during the first mount.
       */
      autoFocus: re.bool,

      /**
       * If `true`, the component is checked.
       */
      checked: re.bool,

      /**
       * The icon to display when the component is checked.
       */
      checkedIcon: re.node.isRequired,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object.isRequired,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * @ignore
       */
      defaultChecked: re.bool,

      /**
       * If `true`, the switch will be disabled.
       */
      disabled: re.bool,

      /**
       * The icon to display when the component is unchecked.
       */
      icon: re.node.isRequired,

      /**
       * The id of the `input` element.
       */
      id: re.string,

      /**
       * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
       */
      inputProps: re.object,

      /**
       * Pass a ref to the `input` element.
       */
      inputRef: refType$1,

      /*
       * @ignore
       */
      name: re.string,

      /**
       * @ignore
       */
      onBlur: re.func,

      /**
       * Callback fired when the state is changed.
       *
       * @param {object} event The event source of the callback.
       * You can pull out the new checked state by accessing `event.target.checked` (boolean).
       */
      onChange: re.func,

      /**
       * @ignore
       */
      onFocus: re.func,

      /**
       * It prevents the user from changing the value of the field
       * (not from interacting with the field).
       */
      readOnly: re.bool,

      /**
       * If `true`, the `input` element will be required.
       */
      required: re.bool,

      /**
       * @ignore
       */
      tabIndex: re.oneOfType([re.number, re.string]),

      /**
       * The input component prop `type`.
       */
      type: re.string.isRequired,

      /**
       * The value of the component.
       */
      value: re.any
    } : void 0;
    var SwitchBase$1 = withStyles(styles$1N, {
      name: 'PrivateSwitchBase'
    })(SwitchBase);

    /**
     * @ignore - internal component.
     */

    var CheckBoxOutlineBlankIcon = createSvgIcon$1( /*#__PURE__*/React__namespace.createElement("path", {
      d: "M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"
    }), 'CheckBoxOutlineBlank');

    /**
     * @ignore - internal component.
     */

    var CheckBoxIcon = createSvgIcon$1( /*#__PURE__*/React__namespace.createElement("path", {
      d: "M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
    }), 'CheckBox');

    /**
     * @ignore - internal component.
     */

    var IndeterminateCheckBoxIcon = createSvgIcon$1( /*#__PURE__*/React__namespace.createElement("path", {
      d: "M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z"
    }), 'IndeterminateCheckBox');

    var styles$1M = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          color: theme.palette.text.secondary
        },

        /* Pseudo-class applied to the root element if `checked={true}`. */
        checked: {},

        /* Pseudo-class applied to the root element if `disabled={true}`. */
        disabled: {},

        /* Pseudo-class applied to the root element if `indeterminate={true}`. */
        indeterminate: {},

        /* Styles applied to the root element if `color="primary"`. */
        colorPrimary: {
          '&$checked': {
            color: theme.palette.primary.main,
            '&:hover': {
              backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.hoverOpacity),
              // Reset on touch devices, it doesn't add specificity
              '@media (hover: none)': {
                backgroundColor: 'transparent'
              }
            }
          },
          '&$disabled': {
            color: theme.palette.action.disabled
          }
        },

        /* Styles applied to the root element if `color="secondary"`. */
        colorSecondary: {
          '&$checked': {
            color: theme.palette.secondary.main,
            '&:hover': {
              backgroundColor: alpha(theme.palette.secondary.main, theme.palette.action.hoverOpacity),
              // Reset on touch devices, it doesn't add specificity
              '@media (hover: none)': {
                backgroundColor: 'transparent'
              }
            }
          },
          '&$disabled': {
            color: theme.palette.action.disabled
          }
        }
      };
    };
    var defaultCheckedIcon$1 = /*#__PURE__*/React__namespace.createElement(CheckBoxIcon, null);
    var defaultIcon$2 = /*#__PURE__*/React__namespace.createElement(CheckBoxOutlineBlankIcon, null);
    var defaultIndeterminateIcon = /*#__PURE__*/React__namespace.createElement(IndeterminateCheckBoxIcon, null);
    var Checkbox = /*#__PURE__*/React__namespace.forwardRef(function Checkbox(props, ref) {
      var _props$checkedIcon = props.checkedIcon,
          checkedIcon = _props$checkedIcon === void 0 ? defaultCheckedIcon$1 : _props$checkedIcon,
          classes = props.classes,
          _props$color = props.color,
          color = _props$color === void 0 ? 'secondary' : _props$color,
          _props$icon = props.icon,
          iconProp = _props$icon === void 0 ? defaultIcon$2 : _props$icon,
          _props$indeterminate = props.indeterminate,
          indeterminate = _props$indeterminate === void 0 ? false : _props$indeterminate,
          _props$indeterminateI = props.indeterminateIcon,
          indeterminateIconProp = _props$indeterminateI === void 0 ? defaultIndeterminateIcon : _props$indeterminateI,
          inputProps = props.inputProps,
          _props$size = props.size,
          size = _props$size === void 0 ? 'medium' : _props$size,
          other = _objectWithoutProperties(props, ["checkedIcon", "classes", "color", "icon", "indeterminate", "indeterminateIcon", "inputProps", "size"]);

      var icon = indeterminate ? indeterminateIconProp : iconProp;
      var indeterminateIcon = indeterminate ? indeterminateIconProp : checkedIcon;
      return /*#__PURE__*/React__namespace.createElement(SwitchBase$1, _extends$3({
        type: "checkbox",
        classes: {
          root: r$1(classes.root, classes["color".concat(capitalize(color))], indeterminate && classes.indeterminate),
          checked: classes.checked,
          disabled: classes.disabled
        },
        color: color,
        inputProps: _extends$3({
          'data-indeterminate': indeterminate
        }, inputProps),
        icon: /*#__PURE__*/React__namespace.cloneElement(icon, {
          fontSize: icon.props.fontSize === undefined && size === "small" ? size : icon.props.fontSize
        }),
        checkedIcon: /*#__PURE__*/React__namespace.cloneElement(indeterminateIcon, {
          fontSize: indeterminateIcon.props.fontSize === undefined && size === "small" ? size : indeterminateIcon.props.fontSize
        }),
        ref: ref
      }, other));
    });
    process.env.NODE_ENV !== "production" ? Checkbox.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * If `true`, the component is checked.
       */
      checked: re.bool,

      /**
       * The icon to display when the component is checked.
       */
      checkedIcon: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * The color of the component. It supports those theme colors that make sense for this component.
       */
      color: re.oneOf(['default', 'primary', 'secondary']),

      /**
       * If `true`, the checkbox will be disabled.
       */
      disabled: re.bool,

      /**
       * If `true`, the ripple effect will be disabled.
       */
      disableRipple: re.bool,

      /**
       * The icon to display when the component is unchecked.
       */
      icon: re.node,

      /**
       * The id of the `input` element.
       */
      id: re.string,

      /**
       * If `true`, the component appears indeterminate.
       * This does not set the native input element to indeterminate due
       * to inconsistent behavior across browsers.
       * However, we set a `data-indeterminate` attribute on the input.
       */
      indeterminate: re.bool,

      /**
       * The icon to display when the component is indeterminate.
       */
      indeterminateIcon: re.node,

      /**
       * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
       */
      inputProps: re.object,

      /**
       * Pass a ref to the `input` element.
       */
      inputRef: refType$1,

      /**
       * Callback fired when the state is changed.
       *
       * @param {object} event The event source of the callback.
       * You can pull out the new checked state by accessing `event.target.checked` (boolean).
       */
      onChange: re.func,

      /**
       * If `true`, the `input` element will be required.
       */
      required: re.bool,

      /**
       * The size of the checkbox.
       * `small` is equivalent to the dense checkbox styling.
       */
      size: re.oneOf(['medium', 'small']),

      /**
       * The value of the component. The DOM API casts this to a string.
       * The browser uses "on" as the default value.
       */
      value: re.any
    } : void 0;
    var Checkbox$1 = withStyles(styles$1M, {
      name: 'MuiCheckbox'
    })(Checkbox);

    /**
     * @ignore - internal component.
     */

    var CancelIcon = createSvgIcon$1( /*#__PURE__*/React__namespace.createElement("path", {
      d: "M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z"
    }), 'Cancel');

    var styles$1L = function styles(theme) {
      var backgroundColor = theme.palette.type === 'light' ? theme.palette.grey[300] : theme.palette.grey[700];
      var deleteIconColor = alpha(theme.palette.text.primary, 0.26);
      return {
        /* Styles applied to the root element. */
        root: {
          fontFamily: theme.typography.fontFamily,
          fontSize: theme.typography.pxToRem(13),
          display: 'inline-flex',
          alignItems: 'center',
          justifyContent: 'center',
          height: 32,
          color: theme.palette.getContrastText(backgroundColor),
          backgroundColor: backgroundColor,
          borderRadius: 32 / 2,
          whiteSpace: 'nowrap',
          transition: theme.transitions.create(['background-color', 'box-shadow']),
          // label will inherit this from root, then `clickable` class overrides this for both
          cursor: 'default',
          // We disable the focus ring for mouse, touch and keyboard users.
          outline: 0,
          textDecoration: 'none',
          border: 'none',
          // Remove `button` border
          padding: 0,
          // Remove `button` padding
          verticalAlign: 'middle',
          boxSizing: 'border-box',
          '&$disabled': {
            opacity: 0.5,
            pointerEvents: 'none'
          },
          '& $avatar': {
            marginLeft: 5,
            marginRight: -6,
            width: 24,
            height: 24,
            color: theme.palette.type === 'light' ? theme.palette.grey[700] : theme.palette.grey[300],
            fontSize: theme.typography.pxToRem(12)
          },
          '& $avatarColorPrimary': {
            color: theme.palette.primary.contrastText,
            backgroundColor: theme.palette.primary.dark
          },
          '& $avatarColorSecondary': {
            color: theme.palette.secondary.contrastText,
            backgroundColor: theme.palette.secondary.dark
          },
          '& $avatarSmall': {
            marginLeft: 4,
            marginRight: -4,
            width: 18,
            height: 18,
            fontSize: theme.typography.pxToRem(10)
          }
        },

        /* Styles applied to the root element if `size="small"`. */
        sizeSmall: {
          height: 24
        },

        /* Styles applied to the root element if `color="primary"`. */
        colorPrimary: {
          backgroundColor: theme.palette.primary.main,
          color: theme.palette.primary.contrastText
        },

        /* Styles applied to the root element if `color="secondary"`. */
        colorSecondary: {
          backgroundColor: theme.palette.secondary.main,
          color: theme.palette.secondary.contrastText
        },

        /* Pseudo-class applied to the root element if `disabled={true}`. */
        disabled: {},

        /* Styles applied to the root element if `onClick` is defined or `clickable={true}`. */
        clickable: {
          userSelect: 'none',
          WebkitTapHighlightColor: 'transparent',
          cursor: 'pointer',
          '&:hover, &:focus': {
            backgroundColor: emphasize(backgroundColor, 0.08)
          },
          '&:active': {
            boxShadow: theme.shadows[1]
          }
        },

        /* Styles applied to the root element if `onClick` and `color="primary"` is defined or `clickable={true}`. */
        clickableColorPrimary: {
          '&:hover, &:focus': {
            backgroundColor: emphasize(theme.palette.primary.main, 0.08)
          }
        },

        /* Styles applied to the root element if `onClick` and `color="secondary"` is defined or `clickable={true}`. */
        clickableColorSecondary: {
          '&:hover, &:focus': {
            backgroundColor: emphasize(theme.palette.secondary.main, 0.08)
          }
        },

        /* Styles applied to the root element if `onDelete` is defined. */
        deletable: {
          '&:focus': {
            backgroundColor: emphasize(backgroundColor, 0.08)
          }
        },

        /* Styles applied to the root element if `onDelete` and `color="primary"` is defined. */
        deletableColorPrimary: {
          '&:focus': {
            backgroundColor: emphasize(theme.palette.primary.main, 0.2)
          }
        },

        /* Styles applied to the root element if `onDelete` and `color="secondary"` is defined. */
        deletableColorSecondary: {
          '&:focus': {
            backgroundColor: emphasize(theme.palette.secondary.main, 0.2)
          }
        },

        /* Styles applied to the root element if `variant="outlined"`. */
        outlined: {
          backgroundColor: 'transparent',
          border: "1px solid ".concat(theme.palette.type === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)'),
          '$clickable&:hover, $clickable&:focus, $deletable&:focus': {
            backgroundColor: alpha(theme.palette.text.primary, theme.palette.action.hoverOpacity)
          },
          '& $avatar': {
            marginLeft: 4
          },
          '& $avatarSmall': {
            marginLeft: 2
          },
          '& $icon': {
            marginLeft: 4
          },
          '& $iconSmall': {
            marginLeft: 2
          },
          '& $deleteIcon': {
            marginRight: 5
          },
          '& $deleteIconSmall': {
            marginRight: 3
          }
        },

        /* Styles applied to the root element if `variant="outlined"` and `color="primary"`. */
        outlinedPrimary: {
          color: theme.palette.primary.main,
          border: "1px solid ".concat(theme.palette.primary.main),
          '$clickable&:hover, $clickable&:focus, $deletable&:focus': {
            backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.hoverOpacity)
          }
        },

        /* Styles applied to the root element if `variant="outlined"` and `color="secondary"`. */
        outlinedSecondary: {
          color: theme.palette.secondary.main,
          border: "1px solid ".concat(theme.palette.secondary.main),
          '$clickable&:hover, $clickable&:focus, $deletable&:focus': {
            backgroundColor: alpha(theme.palette.secondary.main, theme.palette.action.hoverOpacity)
          }
        },
        // TODO v5: remove

        /* Styles applied to the `avatar` element. */
        avatar: {},

        /* Styles applied to the `avatar` element if `size="small"`. */
        avatarSmall: {},

        /* Styles applied to the `avatar` element if `color="primary"`. */
        avatarColorPrimary: {},

        /* Styles applied to the `avatar` element if `color="secondary"`. */
        avatarColorSecondary: {},

        /* Styles applied to the `icon` element. */
        icon: {
          color: theme.palette.type === 'light' ? theme.palette.grey[700] : theme.palette.grey[300],
          marginLeft: 5,
          marginRight: -6
        },

        /* Styles applied to the `icon` element if `size="small"`. */
        iconSmall: {
          width: 18,
          height: 18,
          marginLeft: 4,
          marginRight: -4
        },

        /* Styles applied to the `icon` element if `color="primary"`. */
        iconColorPrimary: {
          color: 'inherit'
        },

        /* Styles applied to the `icon` element if `color="secondary"`. */
        iconColorSecondary: {
          color: 'inherit'
        },

        /* Styles applied to the label `span` element. */
        label: {
          overflow: 'hidden',
          textOverflow: 'ellipsis',
          paddingLeft: 12,
          paddingRight: 12,
          whiteSpace: 'nowrap'
        },

        /* Styles applied to the label `span` element if `size="small"`. */
        labelSmall: {
          paddingLeft: 8,
          paddingRight: 8
        },

        /* Styles applied to the `deleteIcon` element. */
        deleteIcon: {
          WebkitTapHighlightColor: 'transparent',
          color: deleteIconColor,
          height: 22,
          width: 22,
          cursor: 'pointer',
          margin: '0 5px 0 -6px',
          '&:hover': {
            color: alpha(deleteIconColor, 0.4)
          }
        },

        /* Styles applied to the `deleteIcon` element if `size="small"`. */
        deleteIconSmall: {
          height: 16,
          width: 16,
          marginRight: 4,
          marginLeft: -4
        },

        /* Styles applied to the deleteIcon element if `color="primary"` and `variant="default"`. */
        deleteIconColorPrimary: {
          color: alpha(theme.palette.primary.contrastText, 0.7),
          '&:hover, &:active': {
            color: theme.palette.primary.contrastText
          }
        },

        /* Styles applied to the deleteIcon element if `color="secondary"` and `variant="default"`. */
        deleteIconColorSecondary: {
          color: alpha(theme.palette.secondary.contrastText, 0.7),
          '&:hover, &:active': {
            color: theme.palette.secondary.contrastText
          }
        },

        /* Styles applied to the deleteIcon element if `color="primary"` and `variant="outlined"`. */
        deleteIconOutlinedColorPrimary: {
          color: alpha(theme.palette.primary.main, 0.7),
          '&:hover, &:active': {
            color: theme.palette.primary.main
          }
        },

        /* Styles applied to the deleteIcon element if `color="secondary"` and `variant="outlined"`. */
        deleteIconOutlinedColorSecondary: {
          color: alpha(theme.palette.secondary.main, 0.7),
          '&:hover, &:active': {
            color: theme.palette.secondary.main
          }
        }
      };
    };

    function isDeleteKeyboardEvent(keyboardEvent) {
      return keyboardEvent.key === 'Backspace' || keyboardEvent.key === 'Delete';
    }
    /**
     * Chips represent complex entities in small blocks, such as a contact.
     */


    var Chip = /*#__PURE__*/React__namespace.forwardRef(function Chip(props, ref) {
      var avatarProp = props.avatar,
          classes = props.classes,
          className = props.className,
          clickableProp = props.clickable,
          _props$color = props.color,
          color = _props$color === void 0 ? 'default' : _props$color,
          ComponentProp = props.component,
          deleteIconProp = props.deleteIcon,
          _props$disabled = props.disabled,
          disabled = _props$disabled === void 0 ? false : _props$disabled,
          iconProp = props.icon,
          label = props.label,
          onClick = props.onClick,
          onDelete = props.onDelete,
          onKeyDown = props.onKeyDown,
          onKeyUp = props.onKeyUp,
          _props$size = props.size,
          size = _props$size === void 0 ? 'medium' : _props$size,
          _props$variant = props.variant,
          variant = _props$variant === void 0 ? 'default' : _props$variant,
          other = _objectWithoutProperties(props, ["avatar", "classes", "className", "clickable", "color", "component", "deleteIcon", "disabled", "icon", "label", "onClick", "onDelete", "onKeyDown", "onKeyUp", "size", "variant"]);

      var chipRef = React__namespace.useRef(null);
      var handleRef = useForkRef(chipRef, ref);

      var handleDeleteIconClick = function handleDeleteIconClick(event) {
        // Stop the event from bubbling up to the `Chip`
        event.stopPropagation();

        if (onDelete) {
          onDelete(event);
        }
      };

      var handleKeyDown = function handleKeyDown(event) {
        // Ignore events from children of `Chip`.
        if (event.currentTarget === event.target && isDeleteKeyboardEvent(event)) {
          // will be handled in keyUp, otherwise some browsers
          // might init navigation
          event.preventDefault();
        }

        if (onKeyDown) {
          onKeyDown(event);
        }
      };

      var handleKeyUp = function handleKeyUp(event) {
        // Ignore events from children of `Chip`.
        if (event.currentTarget === event.target) {
          if (onDelete && isDeleteKeyboardEvent(event)) {
            onDelete(event);
          } else if (event.key === 'Escape' && chipRef.current) {
            chipRef.current.blur();
          }
        }

        if (onKeyUp) {
          onKeyUp(event);
        }
      };

      var clickable = clickableProp !== false && onClick ? true : clickableProp;
      var small = size === 'small';
      var Component = ComponentProp || (clickable ? ButtonBase$1 : 'div');
      var moreProps = Component === ButtonBase$1 ? {
        component: 'div'
      } : {};
      var deleteIcon = null;

      if (onDelete) {
        var customClasses = r$1(color !== 'default' && (variant === "default" ? classes["deleteIconColor".concat(capitalize(color))] : classes["deleteIconOutlinedColor".concat(capitalize(color))]), small && classes.deleteIconSmall);
        deleteIcon = deleteIconProp && /*#__PURE__*/React__namespace.isValidElement(deleteIconProp) ? /*#__PURE__*/React__namespace.cloneElement(deleteIconProp, {
          className: r$1(deleteIconProp.props.className, classes.deleteIcon, customClasses),
          onClick: handleDeleteIconClick
        }) : /*#__PURE__*/React__namespace.createElement(CancelIcon, {
          className: r$1(classes.deleteIcon, customClasses),
          onClick: handleDeleteIconClick
        });
      }

      var avatar = null;

      if (avatarProp && /*#__PURE__*/React__namespace.isValidElement(avatarProp)) {
        avatar = /*#__PURE__*/React__namespace.cloneElement(avatarProp, {
          className: r$1(classes.avatar, avatarProp.props.className, small && classes.avatarSmall, color !== 'default' && classes["avatarColor".concat(capitalize(color))])
        });
      }

      var icon = null;

      if (iconProp && /*#__PURE__*/React__namespace.isValidElement(iconProp)) {
        icon = /*#__PURE__*/React__namespace.cloneElement(iconProp, {
          className: r$1(classes.icon, iconProp.props.className, small && classes.iconSmall, color !== 'default' && classes["iconColor".concat(capitalize(color))])
        });
      }

      if (process.env.NODE_ENV !== 'production') {
        if (avatar && icon) {
          console.error('Material-UI: The Chip component can not handle the avatar ' + 'and the icon prop at the same time. Pick one.');
        }
      }

      return /*#__PURE__*/React__namespace.createElement(Component, _extends$3({
        role: clickable || onDelete ? 'button' : undefined,
        className: r$1(classes.root, className, color !== 'default' && [classes["color".concat(capitalize(color))], clickable && classes["clickableColor".concat(capitalize(color))], onDelete && classes["deletableColor".concat(capitalize(color))]], variant !== "default" && [classes.outlined, {
          'primary': classes.outlinedPrimary,
          'secondary': classes.outlinedSecondary
        }[color]], disabled && classes.disabled, small && classes.sizeSmall, clickable && classes.clickable, onDelete && classes.deletable),
        "aria-disabled": disabled ? true : undefined,
        tabIndex: clickable || onDelete ? 0 : undefined,
        onClick: onClick,
        onKeyDown: handleKeyDown,
        onKeyUp: handleKeyUp,
        ref: handleRef
      }, moreProps, other), avatar || icon, /*#__PURE__*/React__namespace.createElement("span", {
        className: r$1(classes.label, small && classes.labelSmall)
      }, label), deleteIcon);
    });
    process.env.NODE_ENV !== "production" ? Chip.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * Avatar element.
       */
      avatar: re.element,

      /**
       * This prop isn't supported.
       * Use the `component` prop if you need to change the children structure.
       */
      children: unsupportedProp,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * If `true`, the chip will appear clickable, and will raise when pressed,
       * even if the onClick prop is not defined.
       * If false, the chip will not be clickable, even if onClick prop is defined.
       * This can be used, for example,
       * along with the component prop to indicate an anchor Chip is clickable.
       */
      clickable: re.bool,

      /**
       * The color of the component. It supports those theme colors that make sense for this component.
       */
      color: re.oneOf(['default', 'primary', 'secondary']),

      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: re
      /* @typescript-to-proptypes-ignore */
      .elementType,

      /**
       * Override the default delete icon element. Shown only if `onDelete` is set.
       */
      deleteIcon: re.element,

      /**
       * If `true`, the chip should be displayed in a disabled state.
       */
      disabled: re.bool,

      /**
       * Icon element.
       */
      icon: re.element,

      /**
       * The content of the label.
       */
      label: re.node,

      /**
       * @ignore
       */
      onClick: re.func,

      /**
       * Callback function fired when the delete icon is clicked.
       * If set, the delete icon will be shown.
       */
      onDelete: re.func,

      /**
       * @ignore
       */
      onKeyDown: re.func,

      /**
       * @ignore
       */
      onKeyUp: re.func,

      /**
       * The size of the chip.
       */
      size: re.oneOf(['medium', 'small']),

      /**
       * The variant to use.
       */
      variant: re.oneOf(['default', 'outlined'])
    } : void 0;
    var Chip$1 = withStyles(styles$1L, {
      name: 'MuiChip'
    })(Chip);

    var SIZE = 44;
    var styles$1K = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          display: 'inline-block'
        },

        /* Styles applied to the root element if `variant="static"`. */
        static: {
          transition: theme.transitions.create('transform')
        },

        /* Styles applied to the root element if `variant="indeterminate"`. */
        indeterminate: {
          animation: '$circular-rotate 1.4s linear infinite'
        },

        /* Styles applied to the root element if `variant="determinate"`. */
        determinate: {
          transition: theme.transitions.create('transform')
        },

        /* Styles applied to the root element if `color="primary"`. */
        colorPrimary: {
          color: theme.palette.primary.main
        },

        /* Styles applied to the root element if `color="secondary"`. */
        colorSecondary: {
          color: theme.palette.secondary.main
        },

        /* Styles applied to the `svg` element. */
        svg: {
          display: 'block' // Keeps the progress centered

        },

        /* Styles applied to the `circle` svg path. */
        circle: {
          stroke: 'currentColor' // Use butt to follow the specification, by chance, it's already the default CSS value.
          // strokeLinecap: 'butt',

        },

        /* Styles applied to the `circle` svg path if `variant="static"`. */
        circleStatic: {
          transition: theme.transitions.create('stroke-dashoffset')
        },

        /* Styles applied to the `circle` svg path if `variant="indeterminate"`. */
        circleIndeterminate: {
          animation: '$circular-dash 1.4s ease-in-out infinite',
          // Some default value that looks fine waiting for the animation to kicks in.
          strokeDasharray: '80px, 200px',
          strokeDashoffset: '0px' // Add the unit to fix a Edge 16 and below bug.

        },

        /* Styles applied to the `circle` svg path if `variant="determinate"`. */
        circleDeterminate: {
          transition: theme.transitions.create('stroke-dashoffset')
        },
        '@keyframes circular-rotate': {
          '0%': {
            // Fix IE 11 wobbly
            transformOrigin: '50% 50%'
          },
          '100%': {
            transform: 'rotate(360deg)'
          }
        },
        '@keyframes circular-dash': {
          '0%': {
            strokeDasharray: '1px, 200px',
            strokeDashoffset: '0px'
          },
          '50%': {
            strokeDasharray: '100px, 200px',
            strokeDashoffset: '-15px'
          },
          '100%': {
            strokeDasharray: '100px, 200px',
            strokeDashoffset: '-125px'
          }
        },

        /* Styles applied to the `circle` svg path if `disableShrink={true}`. */
        circleDisableShrink: {
          animation: 'none'
        }
      };
    };
    /**
     * ## ARIA
     *
     * If the progress bar is describing the loading progress of a particular region of a page,
     * you should use `aria-describedby` to point to the progress bar, and set the `aria-busy`
     * attribute to `true` on that region until it has finished loading.
     */

    var CircularProgress = /*#__PURE__*/React__namespace.forwardRef(function CircularProgress(props, ref) {
      var classes = props.classes,
          className = props.className,
          _props$color = props.color,
          color = _props$color === void 0 ? 'primary' : _props$color,
          _props$disableShrink = props.disableShrink,
          disableShrink = _props$disableShrink === void 0 ? false : _props$disableShrink,
          _props$size = props.size,
          size = _props$size === void 0 ? 40 : _props$size,
          style = props.style,
          _props$thickness = props.thickness,
          thickness = _props$thickness === void 0 ? 3.6 : _props$thickness,
          _props$value = props.value,
          value = _props$value === void 0 ? 0 : _props$value,
          _props$variant = props.variant,
          variant = _props$variant === void 0 ? 'indeterminate' : _props$variant,
          other = _objectWithoutProperties(props, ["classes", "className", "color", "disableShrink", "size", "style", "thickness", "value", "variant"]);

      var circleStyle = {};
      var rootStyle = {};
      var rootProps = {};

      if (variant === 'determinate' || variant === 'static') {
        var circumference = 2 * Math.PI * ((SIZE - thickness) / 2);
        circleStyle.strokeDasharray = circumference.toFixed(3);
        rootProps['aria-valuenow'] = Math.round(value);
        circleStyle.strokeDashoffset = "".concat(((100 - value) / 100 * circumference).toFixed(3), "px");
        rootStyle.transform = 'rotate(-90deg)';
      }

      return /*#__PURE__*/React__namespace.createElement("div", _extends$3({
        className: r$1(classes.root, className, color !== 'inherit' && classes["color".concat(capitalize(color))], {
          'determinate': classes.determinate,
          'indeterminate': classes.indeterminate,
          'static': classes.static
        }[variant]),
        style: _extends$3({
          width: size,
          height: size
        }, rootStyle, style),
        ref: ref,
        role: "progressbar"
      }, rootProps, other), /*#__PURE__*/React__namespace.createElement("svg", {
        className: classes.svg,
        viewBox: "".concat(SIZE / 2, " ").concat(SIZE / 2, " ").concat(SIZE, " ").concat(SIZE)
      }, /*#__PURE__*/React__namespace.createElement("circle", {
        className: r$1(classes.circle, disableShrink && classes.circleDisableShrink, {
          'determinate': classes.circleDeterminate,
          'indeterminate': classes.circleIndeterminate,
          'static': classes.circleStatic
        }[variant]),
        style: circleStyle,
        cx: SIZE,
        cy: SIZE,
        r: (SIZE - thickness) / 2,
        fill: "none",
        strokeWidth: thickness
      })));
    });
    process.env.NODE_ENV !== "production" ? CircularProgress.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * The color of the component. It supports those theme colors that make sense for this component.
       */
      color: re.oneOf(['inherit', 'primary', 'secondary']),

      /**
       * If `true`, the shrink animation is disabled.
       * This only works if variant is `indeterminate`.
       */
      disableShrink: chainPropTypes$1(re.bool, function (props) {
        if (props.disableShrink && props.variant && props.variant !== 'indeterminate') {
          return new Error('Material-UI: You have provided the `disableShrink` prop ' + 'with a variant other than `indeterminate`. This will have no effect.');
        }

        return null;
      }),

      /**
       * The size of the circle.
       * If using a number, the pixel unit is assumed.
       * If using a string, you need to provide the CSS unit, e.g '3rem'.
       */
      size: re.oneOfType([re.number, re.string]),

      /**
       * @ignore
       */
      style: re.object,

      /**
       * The thickness of the circle.
       */
      thickness: re.number,

      /**
       * The value of the progress indicator for the determinate variant.
       * Value between 0 and 100.
       */
      value: re.number,

      /**
       * The variant to use.
       * Use indeterminate when there is no progress value.
       */
      variant: chainPropTypes$1(re.oneOf(['determinate', 'indeterminate', 'static']), function (props) {
        var variant = props.variant;

        if (variant === 'static') {
          throw new Error('Material-UI: `variant="static"` was deprecated. Use `variant="determinate"` instead.');
        }

        return null;
      })
    } : void 0;
    var CircularProgress$1 = withStyles(styles$1K, {
      name: 'MuiCircularProgress',
      flip: false
    })(CircularProgress);

    function mapEventPropToEvent(eventProp) {
      return eventProp.substring(2).toLowerCase();
    }

    function clickedRootScrollbar(event) {
      return document.documentElement.clientWidth < event.clientX || document.documentElement.clientHeight < event.clientY;
    }
    /**
     * Listen for click events that occur somewhere in the document, outside of the element itself.
     * For instance, if you need to hide a menu when people click anywhere else on your page.
     */


    function ClickAwayListener(props) {
      var children = props.children,
          _props$disableReactTr = props.disableReactTree,
          disableReactTree = _props$disableReactTr === void 0 ? false : _props$disableReactTr,
          _props$mouseEvent = props.mouseEvent,
          mouseEvent = _props$mouseEvent === void 0 ? 'onClick' : _props$mouseEvent,
          onClickAway = props.onClickAway,
          _props$touchEvent = props.touchEvent,
          touchEvent = _props$touchEvent === void 0 ? 'onTouchEnd' : _props$touchEvent;
      var movedRef = React__namespace.useRef(false);
      var nodeRef = React__namespace.useRef(null);
      var activatedRef = React__namespace.useRef(false);
      var syntheticEventRef = React__namespace.useRef(false);
      React__namespace.useEffect(function () {
        // Ensure that this component is not "activated" synchronously.
        // https://github.com/facebook/react/issues/20074
        setTimeout(function () {
          activatedRef.current = true;
        }, 0);
        return function () {
          activatedRef.current = false;
        };
      }, []); // can be removed once we drop support for non ref forwarding class components

      var handleOwnRef = React__namespace.useCallback(function (instance) {
        // #StrictMode ready
        nodeRef.current = ReactDOM__namespace.findDOMNode(instance);
      }, []);
      var handleRef = useForkRef(children.ref, handleOwnRef); // The handler doesn't take event.defaultPrevented into account:
      //
      // event.preventDefault() is meant to stop default behaviours like
      // clicking a checkbox to check it, hitting a button to submit a form,
      // and hitting left arrow to move the cursor in a text input etc.
      // Only special HTML elements have these default behaviors.

      var handleClickAway = useEventCallback(function (event) {
        // Given developers can stop the propagation of the synthetic event,
        // we can only be confident with a positive value.
        var insideReactTree = syntheticEventRef.current;
        syntheticEventRef.current = false; // 1. IE 11 support, which trigger the handleClickAway even after the unbind
        // 2. The child might render null.
        // 3. Behave like a blur listener.

        if (!activatedRef.current || !nodeRef.current || clickedRootScrollbar(event)) {
          return;
        } // Do not act if user performed touchmove


        if (movedRef.current) {
          movedRef.current = false;
          return;
        }

        var insideDOM; // If not enough, can use https://github.com/DieterHolvoet/event-propagation-path/blob/master/propagationPath.js

        if (event.composedPath) {
          insideDOM = event.composedPath().indexOf(nodeRef.current) > -1;
        } else {
          // TODO v6 remove dead logic https://caniuse.com/#search=composedPath.
          var doc = ownerDocument(nodeRef.current);
          insideDOM = !doc.documentElement.contains(event.target) || nodeRef.current.contains(event.target);
        }

        if (!insideDOM && (disableReactTree || !insideReactTree)) {
          onClickAway(event);
        }
      }); // Keep track of mouse/touch events that bubbled up through the portal.

      var createHandleSynthetic = function createHandleSynthetic(handlerName) {
        return function (event) {
          syntheticEventRef.current = true;
          var childrenPropsHandler = children.props[handlerName];

          if (childrenPropsHandler) {
            childrenPropsHandler(event);
          }
        };
      };

      var childrenProps = {
        ref: handleRef
      };

      if (touchEvent !== false) {
        childrenProps[touchEvent] = createHandleSynthetic(touchEvent);
      }

      React__namespace.useEffect(function () {
        if (touchEvent !== false) {
          var mappedTouchEvent = mapEventPropToEvent(touchEvent);
          var doc = ownerDocument(nodeRef.current);

          var handleTouchMove = function handleTouchMove() {
            movedRef.current = true;
          };

          doc.addEventListener(mappedTouchEvent, handleClickAway);
          doc.addEventListener('touchmove', handleTouchMove);
          return function () {
            doc.removeEventListener(mappedTouchEvent, handleClickAway);
            doc.removeEventListener('touchmove', handleTouchMove);
          };
        }

        return undefined;
      }, [handleClickAway, touchEvent]);

      if (mouseEvent !== false) {
        childrenProps[mouseEvent] = createHandleSynthetic(mouseEvent);
      }

      React__namespace.useEffect(function () {
        if (mouseEvent !== false) {
          var mappedMouseEvent = mapEventPropToEvent(mouseEvent);
          var doc = ownerDocument(nodeRef.current);
          doc.addEventListener(mappedMouseEvent, handleClickAway);
          return function () {
            doc.removeEventListener(mappedMouseEvent, handleClickAway);
          };
        }

        return undefined;
      }, [handleClickAway, mouseEvent]);
      return /*#__PURE__*/React__namespace.createElement(React__namespace.Fragment, null, /*#__PURE__*/React__namespace.cloneElement(children, childrenProps));
    }

    process.env.NODE_ENV !== "production" ? ClickAwayListener.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * The wrapped element.
       */
      children: elementAcceptingRef$1.isRequired,

      /**
       * If `true`, the React tree is ignored and only the DOM tree is considered.
       * This prop changes how portaled elements are handled.
       */
      disableReactTree: re.bool,

      /**
       * The mouse event to listen to. You can disable the listener by providing `false`.
       */
      mouseEvent: re.oneOf(['onClick', 'onMouseDown', 'onMouseUp', false]),

      /**
       * Callback fired when a "click away" event is detected.
       */
      onClickAway: re.func.isRequired,

      /**
       * The touch event to listen to. You can disable the listener by providing `false`.
       */
      touchEvent: re.oneOf(['onTouchEnd', 'onTouchStart', false])
    } : void 0;

    if (process.env.NODE_ENV !== 'production') {
      // eslint-disable-next-line
      ClickAwayListener['propTypes' + ''] = exactProp(ClickAwayListener.propTypes);
    }

    var styles$1J = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: _defineProperty({
          width: '100%',
          marginLeft: 'auto',
          boxSizing: 'border-box',
          marginRight: 'auto',
          paddingLeft: theme.spacing(2),
          paddingRight: theme.spacing(2),
          display: 'block'
        }, theme.breakpoints.up('sm'), {
          paddingLeft: theme.spacing(3),
          paddingRight: theme.spacing(3)
        }),

        /* Styles applied to the root element if `disableGutters={true}`. */
        disableGutters: {
          paddingLeft: 0,
          paddingRight: 0
        },

        /* Styles applied to the root element if `fixed={true}`. */
        fixed: Object.keys(theme.breakpoints.values).reduce(function (acc, breakpoint) {
          var value = theme.breakpoints.values[breakpoint];

          if (value !== 0) {
            acc[theme.breakpoints.up(breakpoint)] = {
              maxWidth: value
            };
          }

          return acc;
        }, {}),

        /* Styles applied to the root element if `maxWidth="xs"`. */
        maxWidthXs: _defineProperty({}, theme.breakpoints.up('xs'), {
          maxWidth: Math.max(theme.breakpoints.values.xs, 444)
        }),

        /* Styles applied to the root element if `maxWidth="sm"`. */
        maxWidthSm: _defineProperty({}, theme.breakpoints.up('sm'), {
          maxWidth: theme.breakpoints.values.sm
        }),

        /* Styles applied to the root element if `maxWidth="md"`. */
        maxWidthMd: _defineProperty({}, theme.breakpoints.up('md'), {
          maxWidth: theme.breakpoints.values.md
        }),

        /* Styles applied to the root element if `maxWidth="lg"`. */
        maxWidthLg: _defineProperty({}, theme.breakpoints.up('lg'), {
          maxWidth: theme.breakpoints.values.lg
        }),

        /* Styles applied to the root element if `maxWidth="xl"`. */
        maxWidthXl: _defineProperty({}, theme.breakpoints.up('xl'), {
          maxWidth: theme.breakpoints.values.xl
        })
      };
    };
    var Container = /*#__PURE__*/React__namespace.forwardRef(function Container(props, ref) {
      var classes = props.classes,
          className = props.className,
          _props$component = props.component,
          Component = _props$component === void 0 ? 'div' : _props$component,
          _props$disableGutters = props.disableGutters,
          disableGutters = _props$disableGutters === void 0 ? false : _props$disableGutters,
          _props$fixed = props.fixed,
          fixed = _props$fixed === void 0 ? false : _props$fixed,
          _props$maxWidth = props.maxWidth,
          maxWidth = _props$maxWidth === void 0 ? 'lg' : _props$maxWidth,
          other = _objectWithoutProperties(props, ["classes", "className", "component", "disableGutters", "fixed", "maxWidth"]);

      return /*#__PURE__*/React__namespace.createElement(Component, _extends$3({
        className: r$1(classes.root, className, fixed && classes.fixed, disableGutters && classes.disableGutters, maxWidth !== false && classes["maxWidth".concat(capitalize(String(maxWidth)))]),
        ref: ref
      }, other));
    });
    process.env.NODE_ENV !== "production" ? Container.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * @ignore
       */
      children: re
      /* @typescript-to-proptypes-ignore */
      .node.isRequired,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: re
      /* @typescript-to-proptypes-ignore */
      .elementType,

      /**
       * If `true`, the left and right padding is removed.
       */
      disableGutters: re.bool,

      /**
       * Set the max-width to match the min-width of the current breakpoint.
       * This is useful if you'd prefer to design for a fixed set of sizes
       * instead of trying to accommodate a fully fluid viewport.
       * It's fluid by default.
       */
      fixed: re.bool,

      /**
       * Determine the max-width of the container.
       * The container width grows with the size of the screen.
       * Set to `false` to disable `maxWidth`.
       */
      maxWidth: re.oneOf(['lg', 'md', 'sm', 'xl', 'xs', false])
    } : void 0;
    var Container$1 = withStyles(styles$1J, {
      name: 'MuiContainer'
    })(Container);

    var html = {
      WebkitFontSmoothing: 'antialiased',
      // Antialiasing.
      MozOsxFontSmoothing: 'grayscale',
      // Antialiasing.
      // Change from `box-sizing: content-box` so that `width`
      // is not affected by `padding` or `border`.
      boxSizing: 'border-box'
    };
    var body = function body(theme) {
      return _extends$3({
        color: theme.palette.text.primary
      }, theme.typography.body2, {
        backgroundColor: theme.palette.background.default,
        '@media print': {
          // Save printer ink.
          backgroundColor: theme.palette.common.white
        }
      });
    };
    var styles$1I = function styles(theme) {
      return {
        '@global': {
          html: html,
          '*, *::before, *::after': {
            boxSizing: 'inherit'
          },
          'strong, b': {
            fontWeight: theme.typography.fontWeightBold
          },
          body: _extends$3({
            margin: 0
          }, body(theme), {
            // Add support for document.body.requestFullScreen().
            // Other elements, if background transparent, are not supported.
            '&::backdrop': {
              backgroundColor: theme.palette.background.default
            }
          })
        }
      };
    };
    /**
     * Kickstart an elegant, consistent, and simple baseline to build upon.
     */

    function CssBaseline(props) {
      /* eslint-disable no-unused-vars */
      var _props$children = props.children,
          children = _props$children === void 0 ? null : _props$children;
          props.classes;
      /* eslint-enable no-unused-vars */

      return /*#__PURE__*/React__namespace.createElement(React__namespace.Fragment, null, children);
    }

    process.env.NODE_ENV !== "production" ? CssBaseline.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * You can wrap a node.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object
    } : void 0;

    if (process.env.NODE_ENV !== 'production') {
      // eslint-disable-next-line
      CssBaseline['propTypes' + ''] = exactProp(CssBaseline.propTypes);
    }

    var CssBaseline$1 = withStyles(styles$1I, {
      name: 'MuiCssBaseline'
    })(CssBaseline);

    function getContainer$1(container) {
      container = typeof container === 'function' ? container() : container; // #StrictMode ready

      return ReactDOM__namespace.findDOMNode(container);
    }

    var useEnhancedEffect$8 = typeof window !== 'undefined' ? React__namespace.useLayoutEffect : React__namespace.useEffect;
    /**
     * Portals provide a first-class way to render children into a DOM node
     * that exists outside the DOM hierarchy of the parent component.
     */

    var Portal = /*#__PURE__*/React__namespace.forwardRef(function Portal(props, ref) {
      var children = props.children,
          container = props.container,
          _props$disablePortal = props.disablePortal,
          disablePortal = _props$disablePortal === void 0 ? false : _props$disablePortal,
          onRendered = props.onRendered;

      var _React$useState = React__namespace.useState(null),
          mountNode = _React$useState[0],
          setMountNode = _React$useState[1];

      var handleRef = useForkRef( /*#__PURE__*/React__namespace.isValidElement(children) ? children.ref : null, ref);
      useEnhancedEffect$8(function () {
        if (!disablePortal) {
          setMountNode(getContainer$1(container) || document.body);
        }
      }, [container, disablePortal]);
      useEnhancedEffect$8(function () {
        if (mountNode && !disablePortal) {
          setRef(ref, mountNode);
          return function () {
            setRef(ref, null);
          };
        }

        return undefined;
      }, [ref, mountNode, disablePortal]);
      useEnhancedEffect$8(function () {
        if (onRendered && (mountNode || disablePortal)) {
          onRendered();
        }
      }, [onRendered, mountNode, disablePortal]);

      if (disablePortal) {
        if ( /*#__PURE__*/React__namespace.isValidElement(children)) {
          return /*#__PURE__*/React__namespace.cloneElement(children, {
            ref: handleRef
          });
        }

        return children;
      }

      return mountNode ? /*#__PURE__*/ReactDOM__namespace.createPortal(children, mountNode) : mountNode;
    });
    process.env.NODE_ENV !== "production" ? Portal.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * The children to render into the `container`.
       */
      children: re.node,

      /**
       * A HTML element, component instance, or function that returns either.
       * The `container` will have the portal children appended to it.
       *
       * By default, it uses the body of the top-level document object,
       * so it's simply `document.body` most of the time.
       */
      container: re
      /* @typescript-to-proptypes-ignore */
      .oneOfType([HTMLElementType, re.instanceOf(React__namespace.Component), re.func]),

      /**
       * Disable the portal behavior.
       * The children stay within it's parent DOM hierarchy.
       */
      disablePortal: re.bool,

      /**
       * Callback fired once the children has been mounted into the `container`.
       *
       * This prop will be removed in v5, the ref can be used instead.
       * @deprecated Use the ref instead.
       */
      onRendered: deprecatedPropType(re.func, 'Use the ref instead.')
    } : void 0;

    if (process.env.NODE_ENV !== 'production') {
      // eslint-disable-next-line
      Portal['propTypes' + ''] = exactProp(Portal.propTypes);
    }

    var Portal$1 = Portal;

    // A change of the browser zoom change the scrollbar size.
    // Credit https://github.com/twbs/bootstrap/blob/3ffe3a5d82f6f561b82ff78d82b32a7d14aed558/js/src/modal.js#L512-L519
    function getScrollbarSize() {
      var scrollDiv = document.createElement('div');
      scrollDiv.style.width = '99px';
      scrollDiv.style.height = '99px';
      scrollDiv.style.position = 'absolute';
      scrollDiv.style.top = '-9999px';
      scrollDiv.style.overflow = 'scroll';
      document.body.appendChild(scrollDiv);
      var scrollbarSize = scrollDiv.offsetWidth - scrollDiv.clientWidth;
      document.body.removeChild(scrollDiv);
      return scrollbarSize;
    }

    function isOverflowing(container) {
      var doc = ownerDocument(container);

      if (doc.body === container) {
        return ownerWindow(doc).innerWidth > doc.documentElement.clientWidth;
      }

      return container.scrollHeight > container.clientHeight;
    }

    function ariaHidden(node, show) {
      if (show) {
        node.setAttribute('aria-hidden', 'true');
      } else {
        node.removeAttribute('aria-hidden');
      }
    }

    function getPaddingRight(node) {
      return parseInt(window.getComputedStyle(node)['padding-right'], 10) || 0;
    }

    function ariaHiddenSiblings(container, mountNode, currentNode) {
      var nodesToExclude = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
      var show = arguments.length > 4 ? arguments[4] : undefined;
      var blacklist = [mountNode, currentNode].concat(_toConsumableArray(nodesToExclude));
      var blacklistTagNames = ['TEMPLATE', 'SCRIPT', 'STYLE'];
      [].forEach.call(container.children, function (node) {
        if (node.nodeType === 1 && blacklist.indexOf(node) === -1 && blacklistTagNames.indexOf(node.tagName) === -1) {
          ariaHidden(node, show);
        }
      });
    }

    function findIndexOf(containerInfo, callback) {
      var idx = -1;
      containerInfo.some(function (item, index) {
        if (callback(item)) {
          idx = index;
          return true;
        }

        return false;
      });
      return idx;
    }

    function handleContainer(containerInfo, props) {
      var restoreStyle = [];
      var restorePaddings = [];
      var container = containerInfo.container;
      var fixedNodes;

      if (!props.disableScrollLock) {
        if (isOverflowing(container)) {
          // Compute the size before applying overflow hidden to avoid any scroll jumps.
          var scrollbarSize = getScrollbarSize();
          restoreStyle.push({
            value: container.style.paddingRight,
            key: 'padding-right',
            el: container
          }); // Use computed style, here to get the real padding to add our scrollbar width.

          container.style['padding-right'] = "".concat(getPaddingRight(container) + scrollbarSize, "px"); // .mui-fixed is a global helper.

          fixedNodes = ownerDocument(container).querySelectorAll('.mui-fixed');
          [].forEach.call(fixedNodes, function (node) {
            restorePaddings.push(node.style.paddingRight);
            node.style.paddingRight = "".concat(getPaddingRight(node) + scrollbarSize, "px");
          });
        } // Improve Gatsby support
        // https://css-tricks.com/snippets/css/force-vertical-scrollbar/


        var parent = container.parentElement;
        var scrollContainer = parent.nodeName === 'HTML' && window.getComputedStyle(parent)['overflow-y'] === 'scroll' ? parent : container; // Block the scroll even if no scrollbar is visible to account for mobile keyboard
        // screensize shrink.

        restoreStyle.push({
          value: scrollContainer.style.overflow,
          key: 'overflow',
          el: scrollContainer
        });
        scrollContainer.style.overflow = 'hidden';
      }

      var restore = function restore() {
        if (fixedNodes) {
          [].forEach.call(fixedNodes, function (node, i) {
            if (restorePaddings[i]) {
              node.style.paddingRight = restorePaddings[i];
            } else {
              node.style.removeProperty('padding-right');
            }
          });
        }

        restoreStyle.forEach(function (_ref) {
          var value = _ref.value,
              el = _ref.el,
              key = _ref.key;

          if (value) {
            el.style.setProperty(key, value);
          } else {
            el.style.removeProperty(key);
          }
        });
      };

      return restore;
    }

    function getHiddenSiblings(container) {
      var hiddenSiblings = [];
      [].forEach.call(container.children, function (node) {
        if (node.getAttribute && node.getAttribute('aria-hidden') === 'true') {
          hiddenSiblings.push(node);
        }
      });
      return hiddenSiblings;
    }
    /**
     * @ignore - do not document.
     *
     * Proper state management for containers and the modals in those containers.
     * Simplified, but inspired by react-overlay's ModalManager class.
     * Used by the Modal to ensure proper styling of containers.
     */


    var ModalManager = /*#__PURE__*/function () {
      function ModalManager() {
        _classCallCheck$1(this, ModalManager);

        // this.modals[modalIndex] = modal
        this.modals = []; // this.containers[containerIndex] = {
        //   modals: [],
        //   container,
        //   restore: null,
        // }

        this.containers = [];
      }

      _createClass$1(ModalManager, [{
        key: "add",
        value: function add(modal, container) {
          var modalIndex = this.modals.indexOf(modal);

          if (modalIndex !== -1) {
            return modalIndex;
          }

          modalIndex = this.modals.length;
          this.modals.push(modal); // If the modal we are adding is already in the DOM.

          if (modal.modalRef) {
            ariaHidden(modal.modalRef, false);
          }

          var hiddenSiblingNodes = getHiddenSiblings(container);
          ariaHiddenSiblings(container, modal.mountNode, modal.modalRef, hiddenSiblingNodes, true);
          var containerIndex = findIndexOf(this.containers, function (item) {
            return item.container === container;
          });

          if (containerIndex !== -1) {
            this.containers[containerIndex].modals.push(modal);
            return modalIndex;
          }

          this.containers.push({
            modals: [modal],
            container: container,
            restore: null,
            hiddenSiblingNodes: hiddenSiblingNodes
          });
          return modalIndex;
        }
      }, {
        key: "mount",
        value: function mount(modal, props) {
          var containerIndex = findIndexOf(this.containers, function (item) {
            return item.modals.indexOf(modal) !== -1;
          });
          var containerInfo = this.containers[containerIndex];

          if (!containerInfo.restore) {
            containerInfo.restore = handleContainer(containerInfo, props);
          }
        }
      }, {
        key: "remove",
        value: function remove(modal) {
          var modalIndex = this.modals.indexOf(modal);

          if (modalIndex === -1) {
            return modalIndex;
          }

          var containerIndex = findIndexOf(this.containers, function (item) {
            return item.modals.indexOf(modal) !== -1;
          });
          var containerInfo = this.containers[containerIndex];
          containerInfo.modals.splice(containerInfo.modals.indexOf(modal), 1);
          this.modals.splice(modalIndex, 1); // If that was the last modal in a container, clean up the container.

          if (containerInfo.modals.length === 0) {
            // The modal might be closed before it had the chance to be mounted in the DOM.
            if (containerInfo.restore) {
              containerInfo.restore();
            }

            if (modal.modalRef) {
              // In case the modal wasn't in the DOM yet.
              ariaHidden(modal.modalRef, true);
            }

            ariaHiddenSiblings(containerInfo.container, modal.mountNode, modal.modalRef, containerInfo.hiddenSiblingNodes, false);
            this.containers.splice(containerIndex, 1);
          } else {
            // Otherwise make sure the next top modal is visible to a screen reader.
            var nextTop = containerInfo.modals[containerInfo.modals.length - 1]; // as soon as a modal is adding its modalRef is undefined. it can't set
            // aria-hidden because the dom element doesn't exist either
            // when modal was unmounted before modalRef gets null

            if (nextTop.modalRef) {
              ariaHidden(nextTop.modalRef, false);
            }
          }

          return modalIndex;
        }
      }, {
        key: "isTopModal",
        value: function isTopModal(modal) {
          return this.modals.length > 0 && this.modals[this.modals.length - 1] === modal;
        }
      }]);

      return ModalManager;
    }();

    /* eslint-disable consistent-return, jsx-a11y/no-noninteractive-tabindex, camelcase */
    /**
     * Utility component that locks focus inside the component.
     */

    function Unstable_TrapFocus(props) {
      var children = props.children,
          _props$disableAutoFoc = props.disableAutoFocus,
          disableAutoFocus = _props$disableAutoFoc === void 0 ? false : _props$disableAutoFoc,
          _props$disableEnforce = props.disableEnforceFocus,
          disableEnforceFocus = _props$disableEnforce === void 0 ? false : _props$disableEnforce,
          _props$disableRestore = props.disableRestoreFocus,
          disableRestoreFocus = _props$disableRestore === void 0 ? false : _props$disableRestore,
          getDoc = props.getDoc,
          isEnabled = props.isEnabled,
          open = props.open;
      var ignoreNextEnforceFocus = React__namespace.useRef();
      var sentinelStart = React__namespace.useRef(null);
      var sentinelEnd = React__namespace.useRef(null);
      var nodeToRestore = React__namespace.useRef();
      var rootRef = React__namespace.useRef(null); // can be removed once we drop support for non ref forwarding class components

      var handleOwnRef = React__namespace.useCallback(function (instance) {
        // #StrictMode ready
        rootRef.current = ReactDOM__namespace.findDOMNode(instance);
      }, []);
      var handleRef = useForkRef(children.ref, handleOwnRef);
      var prevOpenRef = React__namespace.useRef();
      React__namespace.useEffect(function () {
        prevOpenRef.current = open;
      }, [open]);

      if (!prevOpenRef.current && open && typeof window !== 'undefined') {
        // WARNING: Potentially unsafe in concurrent mode.
        // The way the read on `nodeToRestore` is setup could make this actually safe.
        // Say we render `open={false}` -> `open={true}` but never commit.
        // We have now written a state that wasn't committed. But no committed effect
        // will read this wrong value. We only read from `nodeToRestore` in effects
        // that were committed on `open={true}`
        // WARNING: Prevents the instance from being garbage collected. Should only
        // hold a weak ref.
        nodeToRestore.current = getDoc().activeElement;
      }

      React__namespace.useEffect(function () {
        if (!open) {
          return;
        }

        var doc = ownerDocument(rootRef.current); // We might render an empty child.

        if (!disableAutoFocus && rootRef.current && !rootRef.current.contains(doc.activeElement)) {
          if (!rootRef.current.hasAttribute('tabIndex')) {
            if (process.env.NODE_ENV !== 'production') {
              console.error(['Material-UI: The modal content node does not accept focus.', 'For the benefit of assistive technologies, ' + 'the tabIndex of the node is being set to "-1".'].join('\n'));
            }

            rootRef.current.setAttribute('tabIndex', -1);
          }

          rootRef.current.focus();
        }

        var contain = function contain() {
          var rootElement = rootRef.current; // Cleanup functions are executed lazily in React 17.
          // Contain can be called between the component being unmounted and its cleanup function being run.

          if (rootElement === null) {
            return;
          }

          if (!doc.hasFocus() || disableEnforceFocus || !isEnabled() || ignoreNextEnforceFocus.current) {
            ignoreNextEnforceFocus.current = false;
            return;
          }

          if (rootRef.current && !rootRef.current.contains(doc.activeElement)) {
            rootRef.current.focus();
          }
        };

        var loopFocus = function loopFocus(event) {
          // 9 = Tab
          if (disableEnforceFocus || !isEnabled() || event.keyCode !== 9) {
            return;
          } // Make sure the next tab starts from the right place.


          if (doc.activeElement === rootRef.current) {
            // We need to ignore the next contain as
            // it will try to move the focus back to the rootRef element.
            ignoreNextEnforceFocus.current = true;

            if (event.shiftKey) {
              sentinelEnd.current.focus();
            } else {
              sentinelStart.current.focus();
            }
          }
        };

        doc.addEventListener('focus', contain, true);
        doc.addEventListener('keydown', loopFocus, true); // With Edge, Safari and Firefox, no focus related events are fired when the focused area stops being a focused area
        // e.g. https://bugzilla.mozilla.org/show_bug.cgi?id=559561.
        //
        // The whatwg spec defines how the browser should behave but does not explicitly mention any events:
        // https://html.spec.whatwg.org/multipage/interaction.html#focus-fixup-rule.

        var interval = setInterval(function () {
          contain();
        }, 50);
        return function () {
          clearInterval(interval);
          doc.removeEventListener('focus', contain, true);
          doc.removeEventListener('keydown', loopFocus, true); // restoreLastFocus()

          if (!disableRestoreFocus) {
            // In IE 11 it is possible for document.activeElement to be null resulting
            // in nodeToRestore.current being null.
            // Not all elements in IE 11 have a focus method.
            // Once IE 11 support is dropped the focus() call can be unconditional.
            if (nodeToRestore.current && nodeToRestore.current.focus) {
              nodeToRestore.current.focus();
            }

            nodeToRestore.current = null;
          }
        };
      }, [disableAutoFocus, disableEnforceFocus, disableRestoreFocus, isEnabled, open]);
      return /*#__PURE__*/React__namespace.createElement(React__namespace.Fragment, null, /*#__PURE__*/React__namespace.createElement("div", {
        tabIndex: 0,
        ref: sentinelStart,
        "data-test": "sentinelStart"
      }), /*#__PURE__*/React__namespace.cloneElement(children, {
        ref: handleRef
      }), /*#__PURE__*/React__namespace.createElement("div", {
        tabIndex: 0,
        ref: sentinelEnd,
        "data-test": "sentinelEnd"
      }));
    }

    process.env.NODE_ENV !== "production" ? Unstable_TrapFocus.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * A single child content element.
       */
      children: re.node,

      /**
       * If `true`, the trap focus will not automatically shift focus to itself when it opens, and
       * replace it to the last focused element when it closes.
       * This also works correctly with any trap focus children that have the `disableAutoFocus` prop.
       *
       * Generally this should never be set to `true` as it makes the trap focus less
       * accessible to assistive technologies, like screen readers.
       */
      disableAutoFocus: re.bool,

      /**
       * If `true`, the trap focus will not prevent focus from leaving the trap focus while open.
       *
       * Generally this should never be set to `true` as it makes the trap focus less
       * accessible to assistive technologies, like screen readers.
       */
      disableEnforceFocus: re.bool,

      /**
       * If `true`, the trap focus will not restore focus to previously focused element once
       * trap focus is hidden.
       */
      disableRestoreFocus: re.bool,

      /**
       * Return the document to consider.
       * We use it to implement the restore focus between different browser documents.
       */
      getDoc: re.func.isRequired,

      /**
       * Do we still want to enforce the focus?
       * This prop helps nesting TrapFocus elements.
       */
      isEnabled: re.func.isRequired,

      /**
       * If `true`, focus will be locked.
       */
      open: re.bool.isRequired
    } : void 0;

    if (process.env.NODE_ENV !== 'production') {
      // eslint-disable-next-line
      Unstable_TrapFocus['propTypes' + ''] = exactProp(Unstable_TrapFocus.propTypes);
    }

    var styles$1H = {
      /* Styles applied to the root element. */
      root: {
        zIndex: -1,
        position: 'fixed',
        right: 0,
        bottom: 0,
        top: 0,
        left: 0,
        backgroundColor: 'rgba(0, 0, 0, 0.5)',
        WebkitTapHighlightColor: 'transparent'
      },

      /* Styles applied to the root element if `invisible={true}`. */
      invisible: {
        backgroundColor: 'transparent'
      }
    };
    /**
     * @ignore - internal component.
     */

    var SimpleBackdrop = /*#__PURE__*/React__namespace.forwardRef(function SimpleBackdrop(props, ref) {
      var _props$invisible = props.invisible,
          invisible = _props$invisible === void 0 ? false : _props$invisible,
          open = props.open,
          other = _objectWithoutProperties(props, ["invisible", "open"]);

      return open ? /*#__PURE__*/React__namespace.createElement("div", _extends$3({
        "aria-hidden": true,
        ref: ref
      }, other, {
        style: _extends$3({}, styles$1H.root, invisible ? styles$1H.invisible : {}, other.style)
      })) : null;
    });
    process.env.NODE_ENV !== "production" ? SimpleBackdrop.propTypes = {
      /**
       * If `true`, the backdrop is invisible.
       * It can be used when rendering a popover or a custom select component.
       */
      invisible: re.bool,

      /**
       * If `true`, the backdrop is open.
       */
      open: re.bool.isRequired
    } : void 0;
    var SimpleBackdrop$1 = SimpleBackdrop;

    function getContainer(container) {
      container = typeof container === 'function' ? container() : container;
      return ReactDOM__namespace.findDOMNode(container);
    }

    function getHasTransition(props) {
      return props.children ? props.children.props.hasOwnProperty('in') : false;
    } // A modal manager used to track and manage the state of open Modals.
    // Modals don't open on the server so this won't conflict with concurrent requests.


    var defaultManager = new ModalManager();
    var styles$1G = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          position: 'fixed',
          zIndex: theme.zIndex.modal,
          right: 0,
          bottom: 0,
          top: 0,
          left: 0
        },

        /* Styles applied to the root element if the `Modal` has exited. */
        hidden: {
          visibility: 'hidden'
        }
      };
    };
    /**
     * Modal is a lower-level construct that is leveraged by the following components:
     *
     * - [Dialog](/api/dialog/)
     * - [Drawer](/api/drawer/)
     * - [Menu](/api/menu/)
     * - [Popover](/api/popover/)
     *
     * If you are creating a modal dialog, you probably want to use the [Dialog](/api/dialog/) component
     * rather than directly using Modal.
     *
     * This component shares many concepts with [react-overlays](https://react-bootstrap.github.io/react-overlays/#modals).
     */

    var Modal = /*#__PURE__*/React__namespace.forwardRef(function Modal(inProps, ref) {
      var theme = useTheme$1();
      var props = getThemeProps({
        name: 'MuiModal',
        props: _extends$3({}, inProps),
        theme: theme
      });

      var _props$BackdropCompon = props.BackdropComponent,
          BackdropComponent = _props$BackdropCompon === void 0 ? SimpleBackdrop$1 : _props$BackdropCompon,
          BackdropProps = props.BackdropProps,
          children = props.children,
          _props$closeAfterTran = props.closeAfterTransition,
          closeAfterTransition = _props$closeAfterTran === void 0 ? false : _props$closeAfterTran,
          container = props.container,
          _props$disableAutoFoc = props.disableAutoFocus,
          disableAutoFocus = _props$disableAutoFoc === void 0 ? false : _props$disableAutoFoc,
          _props$disableBackdro = props.disableBackdropClick,
          disableBackdropClick = _props$disableBackdro === void 0 ? false : _props$disableBackdro,
          _props$disableEnforce = props.disableEnforceFocus,
          disableEnforceFocus = _props$disableEnforce === void 0 ? false : _props$disableEnforce,
          _props$disableEscapeK = props.disableEscapeKeyDown,
          disableEscapeKeyDown = _props$disableEscapeK === void 0 ? false : _props$disableEscapeK,
          _props$disablePortal = props.disablePortal,
          disablePortal = _props$disablePortal === void 0 ? false : _props$disablePortal,
          _props$disableRestore = props.disableRestoreFocus,
          disableRestoreFocus = _props$disableRestore === void 0 ? false : _props$disableRestore,
          _props$disableScrollL = props.disableScrollLock,
          disableScrollLock = _props$disableScrollL === void 0 ? false : _props$disableScrollL,
          _props$hideBackdrop = props.hideBackdrop,
          hideBackdrop = _props$hideBackdrop === void 0 ? false : _props$hideBackdrop,
          _props$keepMounted = props.keepMounted,
          keepMounted = _props$keepMounted === void 0 ? false : _props$keepMounted,
          _props$manager = props.manager,
          manager = _props$manager === void 0 ? defaultManager : _props$manager,
          onBackdropClick = props.onBackdropClick,
          onClose = props.onClose,
          onEscapeKeyDown = props.onEscapeKeyDown,
          onRendered = props.onRendered,
          open = props.open,
          other = _objectWithoutProperties(props, ["BackdropComponent", "BackdropProps", "children", "closeAfterTransition", "container", "disableAutoFocus", "disableBackdropClick", "disableEnforceFocus", "disableEscapeKeyDown", "disablePortal", "disableRestoreFocus", "disableScrollLock", "hideBackdrop", "keepMounted", "manager", "onBackdropClick", "onClose", "onEscapeKeyDown", "onRendered", "open"]);

      var _React$useState = React__namespace.useState(true),
          exited = _React$useState[0],
          setExited = _React$useState[1];

      var modal = React__namespace.useRef({});
      var mountNodeRef = React__namespace.useRef(null);
      var modalRef = React__namespace.useRef(null);
      var handleRef = useForkRef(modalRef, ref);
      var hasTransition = getHasTransition(props);

      var getDoc = function getDoc() {
        return ownerDocument(mountNodeRef.current);
      };

      var getModal = function getModal() {
        modal.current.modalRef = modalRef.current;
        modal.current.mountNode = mountNodeRef.current;
        return modal.current;
      };

      var handleMounted = function handleMounted() {
        manager.mount(getModal(), {
          disableScrollLock: disableScrollLock
        }); // Fix a bug on Chrome where the scroll isn't initially 0.

        modalRef.current.scrollTop = 0;
      };

      var handleOpen = useEventCallback(function () {
        var resolvedContainer = getContainer(container) || getDoc().body;
        manager.add(getModal(), resolvedContainer); // The element was already mounted.

        if (modalRef.current) {
          handleMounted();
        }
      });
      var isTopModal = React__namespace.useCallback(function () {
        return manager.isTopModal(getModal());
      }, [manager]);
      var handlePortalRef = useEventCallback(function (node) {
        mountNodeRef.current = node;

        if (!node) {
          return;
        }

        if (onRendered) {
          onRendered();
        }

        if (open && isTopModal()) {
          handleMounted();
        } else {
          ariaHidden(modalRef.current, true);
        }
      });
      var handleClose = React__namespace.useCallback(function () {
        manager.remove(getModal());
      }, [manager]);
      React__namespace.useEffect(function () {
        return function () {
          handleClose();
        };
      }, [handleClose]);
      React__namespace.useEffect(function () {
        if (open) {
          handleOpen();
        } else if (!hasTransition || !closeAfterTransition) {
          handleClose();
        }
      }, [open, handleClose, hasTransition, closeAfterTransition, handleOpen]);

      if (!keepMounted && !open && (!hasTransition || exited)) {
        return null;
      }

      var handleEnter = function handleEnter() {
        setExited(false);
      };

      var handleExited = function handleExited() {
        setExited(true);

        if (closeAfterTransition) {
          handleClose();
        }
      };

      var handleBackdropClick = function handleBackdropClick(event) {
        if (event.target !== event.currentTarget) {
          return;
        }

        if (onBackdropClick) {
          onBackdropClick(event);
        }

        if (!disableBackdropClick && onClose) {
          onClose(event, 'backdropClick');
        }
      };

      var handleKeyDown = function handleKeyDown(event) {
        // The handler doesn't take event.defaultPrevented into account:
        //
        // event.preventDefault() is meant to stop default behaviours like
        // clicking a checkbox to check it, hitting a button to submit a form,
        // and hitting left arrow to move the cursor in a text input etc.
        // Only special HTML elements have these default behaviors.
        if (event.key !== 'Escape' || !isTopModal()) {
          return;
        }

        if (onEscapeKeyDown) {
          onEscapeKeyDown(event);
        }

        if (!disableEscapeKeyDown) {
          // Swallow the event, in case someone is listening for the escape key on the body.
          event.stopPropagation();

          if (onClose) {
            onClose(event, 'escapeKeyDown');
          }
        }
      };

      var inlineStyle = styles$1G(theme || {
        zIndex: zIndex$1
      });
      var childProps = {};

      if (children.props.tabIndex === undefined) {
        childProps.tabIndex = children.props.tabIndex || '-1';
      } // It's a Transition like component


      if (hasTransition) {
        childProps.onEnter = createChainedFunction(handleEnter, children.props.onEnter);
        childProps.onExited = createChainedFunction(handleExited, children.props.onExited);
      }

      return /*#__PURE__*/React__namespace.createElement(Portal$1, {
        ref: handlePortalRef,
        container: container,
        disablePortal: disablePortal
      }, /*#__PURE__*/React__namespace.createElement("div", _extends$3({
        ref: handleRef,
        onKeyDown: handleKeyDown,
        role: "presentation"
      }, other, {
        style: _extends$3({}, inlineStyle.root, !open && exited ? inlineStyle.hidden : {}, other.style)
      }), hideBackdrop ? null : /*#__PURE__*/React__namespace.createElement(BackdropComponent, _extends$3({
        open: open,
        onClick: handleBackdropClick
      }, BackdropProps)), /*#__PURE__*/React__namespace.createElement(Unstable_TrapFocus, {
        disableEnforceFocus: disableEnforceFocus,
        disableAutoFocus: disableAutoFocus,
        disableRestoreFocus: disableRestoreFocus,
        getDoc: getDoc,
        isEnabled: isTopModal,
        open: open
      }, /*#__PURE__*/React__namespace.cloneElement(children, childProps))));
    });
    process.env.NODE_ENV !== "production" ? Modal.propTypes = {
      /**
       * A backdrop component. This prop enables custom backdrop rendering.
       */
      BackdropComponent: re.elementType,

      /**
       * Props applied to the [`Backdrop`](/api/backdrop/) element.
       */
      BackdropProps: re.object,

      /**
       * A single child content element.
       */
      children: elementAcceptingRef$1.isRequired,

      /**
       * When set to true the Modal waits until a nested Transition is completed before closing.
       */
      closeAfterTransition: re.bool,

      /**
       * A HTML element, component instance, or function that returns either.
       * The `container` will have the portal children appended to it.
       *
       * By default, it uses the body of the top-level document object,
       * so it's simply `document.body` most of the time.
       */
      container: re
      /* @typescript-to-proptypes-ignore */
      .oneOfType([HTMLElementType, re.instanceOf(React__namespace.Component), re.func]),

      /**
       * If `true`, the modal will not automatically shift focus to itself when it opens, and
       * replace it to the last focused element when it closes.
       * This also works correctly with any modal children that have the `disableAutoFocus` prop.
       *
       * Generally this should never be set to `true` as it makes the modal less
       * accessible to assistive technologies, like screen readers.
       */
      disableAutoFocus: re.bool,

      /**
       * If `true`, clicking the backdrop will not fire `onClose`.
       */
      disableBackdropClick: deprecatedPropType(re.bool, 'Use the onClose prop with the `reason` argument to filter the `backdropClick` events.'),

      /**
       * If `true`, the modal will not prevent focus from leaving the modal while open.
       *
       * Generally this should never be set to `true` as it makes the modal less
       * accessible to assistive technologies, like screen readers.
       */
      disableEnforceFocus: re.bool,

      /**
       * If `true`, hitting escape will not fire `onClose`.
       */
      disableEscapeKeyDown: re.bool,

      /**
       * Disable the portal behavior.
       * The children stay within it's parent DOM hierarchy.
       */
      disablePortal: re.bool,

      /**
       * If `true`, the modal will not restore focus to previously focused element once
       * modal is hidden.
       */
      disableRestoreFocus: re.bool,

      /**
       * Disable the scroll lock behavior.
       */
      disableScrollLock: re.bool,

      /**
       * If `true`, the backdrop is not rendered.
       */
      hideBackdrop: re.bool,

      /**
       * Always keep the children in the DOM.
       * This prop can be useful in SEO situation or
       * when you want to maximize the responsiveness of the Modal.
       */
      keepMounted: re.bool,

      /**
       * @ignore
       */
      manager: re.object,

      /**
       * Callback fired when the backdrop is clicked.
       */
      onBackdropClick: deprecatedPropType(re.func, 'Use the onClose prop with the `reason` argument to handle the `backdropClick` events.'),

      /**
       * Callback fired when the component requests to be closed.
       * The `reason` parameter can optionally be used to control the response to `onClose`.
       *
       * @param {object} event The event source of the callback.
       * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`.
       */
      onClose: re.func,

      /**
       * Callback fired when the escape key is pressed,
       * `disableEscapeKeyDown` is false and the modal is in focus.
       */
      onEscapeKeyDown: deprecatedPropType(re.func, 'Use the onClose prop with the `reason` argument to handle the `escapeKeyDown` events.'),

      /**
       * Callback fired once the children has been mounted into the `container`.
       * It signals that the `open={true}` prop took effect.
       *
       * This prop will be removed in v5, the ref can be used instead.
       */
      onRendered: deprecatedPropType(re.func, 'Use the ref instead.'),

      /**
       * If `true`, the modal is open.
       */
      open: re.bool.isRequired
    } : void 0;
    var Modal$1 = Modal;

    var styles$1F = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          '@media print': {
            // Use !important to override the Modal inline-style.
            position: 'absolute !important'
          }
        },

        /* Styles applied to the container element if `scroll="paper"`. */
        scrollPaper: {
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'center'
        },

        /* Styles applied to the container element if `scroll="body"`. */
        scrollBody: {
          overflowY: 'auto',
          overflowX: 'hidden',
          textAlign: 'center',
          '&:after': {
            content: '""',
            display: 'inline-block',
            verticalAlign: 'middle',
            height: '100%',
            width: '0'
          }
        },

        /* Styles applied to the container element. */
        container: {
          height: '100%',
          '@media print': {
            height: 'auto'
          },
          // We disable the focus ring for mouse, touch and keyboard users.
          outline: 0
        },

        /* Styles applied to the `Paper` component. */
        paper: {
          margin: 32,
          position: 'relative',
          overflowY: 'auto',
          // Fix IE 11 issue, to remove at some point.
          '@media print': {
            overflowY: 'visible',
            boxShadow: 'none'
          }
        },

        /* Styles applied to the `Paper` component if `scroll="paper"`. */
        paperScrollPaper: {
          display: 'flex',
          flexDirection: 'column',
          maxHeight: 'calc(100% - 64px)'
        },

        /* Styles applied to the `Paper` component if `scroll="body"`. */
        paperScrollBody: {
          display: 'inline-block',
          verticalAlign: 'middle',
          textAlign: 'left' // 'initial' doesn't work on IE 11

        },

        /* Styles applied to the `Paper` component if `maxWidth=false`. */
        paperWidthFalse: {
          maxWidth: 'calc(100% - 64px)'
        },

        /* Styles applied to the `Paper` component if `maxWidth="xs"`. */
        paperWidthXs: {
          maxWidth: Math.max(theme.breakpoints.values.xs, 444),
          '&$paperScrollBody': _defineProperty({}, theme.breakpoints.down(Math.max(theme.breakpoints.values.xs, 444) + 32 * 2), {
            maxWidth: 'calc(100% - 64px)'
          })
        },

        /* Styles applied to the `Paper` component if `maxWidth="sm"`. */
        paperWidthSm: {
          maxWidth: theme.breakpoints.values.sm,
          '&$paperScrollBody': _defineProperty({}, theme.breakpoints.down(theme.breakpoints.values.sm + 32 * 2), {
            maxWidth: 'calc(100% - 64px)'
          })
        },

        /* Styles applied to the `Paper` component if `maxWidth="md"`. */
        paperWidthMd: {
          maxWidth: theme.breakpoints.values.md,
          '&$paperScrollBody': _defineProperty({}, theme.breakpoints.down(theme.breakpoints.values.md + 32 * 2), {
            maxWidth: 'calc(100% - 64px)'
          })
        },

        /* Styles applied to the `Paper` component if `maxWidth="lg"`. */
        paperWidthLg: {
          maxWidth: theme.breakpoints.values.lg,
          '&$paperScrollBody': _defineProperty({}, theme.breakpoints.down(theme.breakpoints.values.lg + 32 * 2), {
            maxWidth: 'calc(100% - 64px)'
          })
        },

        /* Styles applied to the `Paper` component if `maxWidth="xl"`. */
        paperWidthXl: {
          maxWidth: theme.breakpoints.values.xl,
          '&$paperScrollBody': _defineProperty({}, theme.breakpoints.down(theme.breakpoints.values.xl + 32 * 2), {
            maxWidth: 'calc(100% - 64px)'
          })
        },

        /* Styles applied to the `Paper` component if `fullWidth={true}`. */
        paperFullWidth: {
          width: 'calc(100% - 64px)'
        },

        /* Styles applied to the `Paper` component if `fullScreen={true}`. */
        paperFullScreen: {
          margin: 0,
          width: '100%',
          maxWidth: '100%',
          height: '100%',
          maxHeight: 'none',
          borderRadius: 0,
          '&$paperScrollBody': {
            margin: 0,
            maxWidth: '100%'
          }
        }
      };
    };
    var defaultTransitionDuration$1 = {
      enter: duration.enteringScreen,
      exit: duration.leavingScreen
    };
    /**
     * Dialogs are overlaid modal paper based components with a backdrop.
     */

    var Dialog$1 = /*#__PURE__*/React__namespace.forwardRef(function Dialog(props, ref) {
      var BackdropProps = props.BackdropProps,
          children = props.children,
          classes = props.classes,
          className = props.className,
          _props$disableBackdro = props.disableBackdropClick,
          disableBackdropClick = _props$disableBackdro === void 0 ? false : _props$disableBackdro,
          _props$disableEscapeK = props.disableEscapeKeyDown,
          disableEscapeKeyDown = _props$disableEscapeK === void 0 ? false : _props$disableEscapeK,
          _props$fullScreen = props.fullScreen,
          fullScreen = _props$fullScreen === void 0 ? false : _props$fullScreen,
          _props$fullWidth = props.fullWidth,
          fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,
          _props$maxWidth = props.maxWidth,
          maxWidth = _props$maxWidth === void 0 ? 'sm' : _props$maxWidth,
          onBackdropClick = props.onBackdropClick,
          onClose = props.onClose,
          onEnter = props.onEnter,
          onEntered = props.onEntered,
          onEntering = props.onEntering,
          onEscapeKeyDown = props.onEscapeKeyDown,
          onExit = props.onExit,
          onExited = props.onExited,
          onExiting = props.onExiting,
          open = props.open,
          _props$PaperComponent = props.PaperComponent,
          PaperComponent = _props$PaperComponent === void 0 ? M : _props$PaperComponent,
          _props$PaperProps = props.PaperProps,
          PaperProps = _props$PaperProps === void 0 ? {} : _props$PaperProps,
          _props$scroll = props.scroll,
          scroll = _props$scroll === void 0 ? 'paper' : _props$scroll,
          _props$TransitionComp = props.TransitionComponent,
          TransitionComponent = _props$TransitionComp === void 0 ? Fade$1 : _props$TransitionComp,
          _props$transitionDura = props.transitionDuration,
          transitionDuration = _props$transitionDura === void 0 ? defaultTransitionDuration$1 : _props$transitionDura,
          TransitionProps = props.TransitionProps,
          ariaDescribedby = props['aria-describedby'],
          ariaLabelledby = props['aria-labelledby'],
          other = _objectWithoutProperties(props, ["BackdropProps", "children", "classes", "className", "disableBackdropClick", "disableEscapeKeyDown", "fullScreen", "fullWidth", "maxWidth", "onBackdropClick", "onClose", "onEnter", "onEntered", "onEntering", "onEscapeKeyDown", "onExit", "onExited", "onExiting", "open", "PaperComponent", "PaperProps", "scroll", "TransitionComponent", "transitionDuration", "TransitionProps", "aria-describedby", "aria-labelledby"]);

      var mouseDownTarget = React__namespace.useRef();

      var handleMouseDown = function handleMouseDown(event) {
        mouseDownTarget.current = event.target;
      };

      var handleBackdropClick = function handleBackdropClick(event) {
        // Ignore the events not coming from the "backdrop"
        // We don't want to close the dialog when clicking the dialog content.
        if (event.target !== event.currentTarget) {
          return;
        } // Make sure the event starts and ends on the same DOM element.


        if (event.target !== mouseDownTarget.current) {
          return;
        }

        mouseDownTarget.current = null;

        if (onBackdropClick) {
          onBackdropClick(event);
        }

        if (!disableBackdropClick && onClose) {
          onClose(event, 'backdropClick');
        }
      };

      return /*#__PURE__*/React__namespace.createElement(Modal$1, _extends$3({
        className: r$1(classes.root, className),
        BackdropComponent: Backdrop$1,
        BackdropProps: _extends$3({
          transitionDuration: transitionDuration
        }, BackdropProps),
        closeAfterTransition: true
      }, disableBackdropClick ? {
        disableBackdropClick: disableBackdropClick
      } : {}, {
        disableEscapeKeyDown: disableEscapeKeyDown,
        onEscapeKeyDown: onEscapeKeyDown,
        onClose: onClose,
        open: open,
        ref: ref
      }, other), /*#__PURE__*/React__namespace.createElement(TransitionComponent, _extends$3({
        appear: true,
        in: open,
        timeout: transitionDuration,
        onEnter: onEnter,
        onEntering: onEntering,
        onEntered: onEntered,
        onExit: onExit,
        onExiting: onExiting,
        onExited: onExited,
        role: "none presentation"
      }, TransitionProps), /*#__PURE__*/React__namespace.createElement("div", {
        className: r$1(classes.container, classes["scroll".concat(capitalize(scroll))]),
        onMouseUp: handleBackdropClick,
        onMouseDown: handleMouseDown
      }, /*#__PURE__*/React__namespace.createElement(PaperComponent, _extends$3({
        elevation: 24,
        role: "dialog",
        "aria-describedby": ariaDescribedby,
        "aria-labelledby": ariaLabelledby
      }, PaperProps, {
        className: r$1(classes.paper, classes["paperScroll".concat(capitalize(scroll))], classes["paperWidth".concat(capitalize(String(maxWidth)))], PaperProps.className, fullScreen && classes.paperFullScreen, fullWidth && classes.paperFullWidth)
      }), children))));
    });
    process.env.NODE_ENV !== "production" ? Dialog$1.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * The id(s) of the element(s) that describe the dialog.
       */
      'aria-describedby': re.string,

      /**
       * The id(s) of the element(s) that label the dialog.
       */
      'aria-labelledby': re.string,

      /**
       * @ignore
       */
      BackdropProps: re.object,

      /**
       * Dialog children, usually the included sub-components.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * If `true`, clicking the backdrop will not fire the `onClose` callback.
       * @deprecated Use the onClose prop with the `reason` argument to filter the `backdropClick` events.
       */
      disableBackdropClick: deprecatedPropType(re.bool, 'Use the onClose prop with the `reason` argument to filter the `backdropClick` events.'),

      /**
       * If `true`, hitting escape will not fire the `onClose` callback.
       */
      disableEscapeKeyDown: re.bool,

      /**
       * If `true`, the dialog will be full-screen
       */
      fullScreen: re.bool,

      /**
       * If `true`, the dialog stretches to `maxWidth`.
       *
       * Notice that the dialog width grow is limited by the default margin.
       */
      fullWidth: re.bool,

      /**
       * Determine the max-width of the dialog.
       * The dialog width grows with the size of the screen.
       * Set to `false` to disable `maxWidth`.
       */
      maxWidth: re.oneOf(['lg', 'md', 'sm', 'xl', 'xs', false]),

      /**
       * Callback fired when the backdrop is clicked.
       * @deprecated Use the onClose prop with the `reason` argument to handle the `backdropClick` events.
       */
      onBackdropClick: deprecatedPropType(re.func, 'Use the onClose prop with the `reason` argument to handle the `backdropClick` events.'),

      /**
       * Callback fired when the component requests to be closed.
       *
       * @param {object} event The event source of the callback.
       * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`.
       */
      onClose: re.func,

      /**
       * Callback fired before the dialog enters.
       * @deprecated Use the `TransitionProps` prop instead.
       */
      onEnter: deprecatedPropType(re.func, 'Use the `TransitionProps` prop instead.'),

      /**
       * Callback fired when the dialog has entered.
       * @deprecated Use the `TransitionProps` prop instead.
       */
      onEntered: deprecatedPropType(re.func, 'Use the `TransitionProps` prop instead.'),

      /**
       * Callback fired when the dialog is entering.
       * @deprecated Use the `TransitionProps` prop instead.
       */
      onEntering: deprecatedPropType(re.func, 'Use the `TransitionProps` prop instead.'),

      /**
       * Callback fired when the escape key is pressed,
       * `disableKeyboard` is false and the modal is in focus.
       * @deprecated Use the onClose prop with the `reason` argument to handle the `escapeKeyDown` events.
       */
      onEscapeKeyDown: deprecatedPropType(re.func, 'Use the onClose prop with the `reason` argument to handle the `escapeKeyDown` events.'),

      /**
       * Callback fired before the dialog exits.
       * @deprecated Use the `TransitionProps` prop instead.
       */
      onExit: deprecatedPropType(re.func, 'Use the `TransitionProps` prop instead.'),

      /**
       * Callback fired when the dialog has exited.
       * @deprecated Use the `TransitionProps` prop instead.
       */
      onExited: deprecatedPropType(re.func, 'Use the `TransitionProps` prop instead.'),

      /**
       * Callback fired when the dialog is exiting.
       * @deprecated Use the `TransitionProps` prop instead.
       */
      onExiting: deprecatedPropType(re.func, 'Use the `TransitionProps` prop instead.'),

      /**
       * If `true`, the Dialog is open.
       */
      open: re.bool.isRequired,

      /**
       * The component used to render the body of the dialog.
       */
      PaperComponent: re.elementType,

      /**
       * Props applied to the [`Paper`](/api/paper/) element.
       */
      PaperProps: re.object,

      /**
       * Determine the container for scrolling the dialog.
       */
      scroll: re.oneOf(['body', 'paper']),

      /**
       * The component used for the transition.
       * [Follow this guide](/components/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
       */
      TransitionComponent: re.elementType,

      /**
       * The duration for the transition, in milliseconds.
       * You may specify a single timeout for all transitions, or individually with an object.
       */
      transitionDuration: re.oneOfType([re.number, re.shape({
        appear: re.number,
        enter: re.number,
        exit: re.number
      })]),

      /**
       * Props applied to the [`Transition`](http://reactcommunity.org/react-transition-group/transition#Transition-props) element.
       */
      TransitionProps: re.object
    } : void 0;
    var Dialog$2 = withStyles(styles$1F, {
      name: 'MuiDialog'
    })(Dialog$1);

    var Dialog = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Dialog$2
    });

    var styles$1E = {
      /* Styles applied to the root element. */
      root: {
        display: 'flex',
        alignItems: 'center',
        padding: 8,
        justifyContent: 'flex-end',
        flex: '0 0 auto'
      },

      /* Styles applied to the root element if `disableSpacing={false}`. */
      spacing: {
        '& > :not(:first-child)': {
          marginLeft: 8
        }
      }
    };
    var DialogActions$1 = /*#__PURE__*/React__namespace.forwardRef(function DialogActions(props, ref) {
      var _props$disableSpacing = props.disableSpacing,
          disableSpacing = _props$disableSpacing === void 0 ? false : _props$disableSpacing,
          classes = props.classes,
          className = props.className,
          other = _objectWithoutProperties(props, ["disableSpacing", "classes", "className"]);

      return /*#__PURE__*/React__namespace.createElement("div", _extends$3({
        className: r$1(classes.root, className, !disableSpacing && classes.spacing),
        ref: ref
      }, other));
    });
    process.env.NODE_ENV !== "production" ? DialogActions$1.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * The content of the component.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * If `true`, the actions do not have additional margin.
       */
      disableSpacing: re.bool
    } : void 0;
    var DialogActions$2 = withStyles(styles$1E, {
      name: 'MuiDialogActions'
    })(DialogActions$1);

    var DialogActions = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': DialogActions$2
    });

    var styles$1D = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          flex: '1 1 auto',
          WebkitOverflowScrolling: 'touch',
          // Add iOS momentum scrolling.
          overflowY: 'auto',
          padding: '8px 24px',
          '&:first-child': {
            // dialog without title
            paddingTop: 20
          }
        },

        /* Styles applied to the root element if `dividers={true}`. */
        dividers: {
          padding: '16px 24px',
          borderTop: "1px solid ".concat(theme.palette.divider),
          borderBottom: "1px solid ".concat(theme.palette.divider)
        }
      };
    };
    var DialogContent$1 = /*#__PURE__*/React__namespace.forwardRef(function DialogContent(props, ref) {
      var classes = props.classes,
          className = props.className,
          _props$dividers = props.dividers,
          dividers = _props$dividers === void 0 ? false : _props$dividers,
          other = _objectWithoutProperties(props, ["classes", "className", "dividers"]);

      return /*#__PURE__*/React__namespace.createElement("div", _extends$3({
        className: r$1(classes.root, className, dividers && classes.dividers),
        ref: ref
      }, other));
    });
    process.env.NODE_ENV !== "production" ? DialogContent$1.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * The content of the component.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * Display the top and bottom dividers.
       */
      dividers: re.bool
    } : void 0;
    var DialogContent$2 = withStyles(styles$1D, {
      name: 'MuiDialogContent'
    })(DialogContent$1);

    var DialogContent = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': DialogContent$2
    });

    var styles$1C = {
      /* Styles applied to the root element. */
      root: {
        marginBottom: 12
      }
    };
    var DialogContentText$1 = /*#__PURE__*/React__namespace.forwardRef(function DialogContentText(props, ref) {
      return /*#__PURE__*/React__namespace.createElement(Typography$2, _extends$3({
        component: "p",
        variant: "body1",
        color: "textSecondary",
        ref: ref
      }, props));
    });
    process.env.NODE_ENV !== "production" ? DialogContentText$1.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * The content of the component.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object
    } : void 0;
    var DialogContentText$2 = withStyles(styles$1C, {
      name: 'MuiDialogContentText'
    })(DialogContentText$1);

    var DialogContentText = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': DialogContentText$2
    });

    var styles$1B = {
      /* Styles applied to the root element. */
      root: {
        margin: 0,
        padding: '16px 24px',
        flex: '0 0 auto'
      }
    };
    var DialogTitle$1 = /*#__PURE__*/React__namespace.forwardRef(function DialogTitle(props, ref) {
      var children = props.children,
          classes = props.classes,
          className = props.className,
          _props$disableTypogra = props.disableTypography,
          disableTypography = _props$disableTypogra === void 0 ? false : _props$disableTypogra,
          other = _objectWithoutProperties(props, ["children", "classes", "className", "disableTypography"]);

      return /*#__PURE__*/React__namespace.createElement("div", _extends$3({
        className: r$1(classes.root, className),
        ref: ref
      }, other), disableTypography ? children : /*#__PURE__*/React__namespace.createElement(Typography$2, {
        component: "h2",
        variant: "h6"
      }, children));
    });
    process.env.NODE_ENV !== "production" ? DialogTitle$1.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * The content of the component.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * If `true`, the children won't be wrapped by a typography component.
       * For instance, this can be useful to render an h4 instead of the default h2.
       */
      disableTypography: re.bool
    } : void 0;
    var DialogTitle$2 = withStyles(styles$1B, {
      name: 'MuiDialogTitle'
    })(DialogTitle$1);

    var DialogTitle = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': DialogTitle$2
    });

    var styles$1A = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          height: 1,
          margin: 0,
          // Reset browser default style.
          border: 'none',
          flexShrink: 0,
          backgroundColor: theme.palette.divider
        },

        /* Styles applied to the root element if `absolute={true}`. */
        absolute: {
          position: 'absolute',
          bottom: 0,
          left: 0,
          width: '100%'
        },

        /* Styles applied to the root element if `variant="inset"`. */
        inset: {
          marginLeft: 72
        },

        /* Styles applied to the root element if `light={true}`. */
        light: {
          backgroundColor: alpha(theme.palette.divider, 0.08)
        },

        /* Styles applied to the root element if `variant="middle"`. */
        middle: {
          marginLeft: theme.spacing(2),
          marginRight: theme.spacing(2)
        },

        /* Styles applied to the root element if `orientation="vertical"`. */
        vertical: {
          height: '100%',
          width: 1
        },

        /* Styles applied to the root element if `flexItem={true}`. */
        flexItem: {
          alignSelf: 'stretch',
          height: 'auto'
        }
      };
    };
    var Divider = /*#__PURE__*/React__namespace.forwardRef(function Divider(props, ref) {
      var _props$absolute = props.absolute,
          absolute = _props$absolute === void 0 ? false : _props$absolute,
          classes = props.classes,
          className = props.className,
          _props$component = props.component,
          Component = _props$component === void 0 ? 'hr' : _props$component,
          _props$flexItem = props.flexItem,
          flexItem = _props$flexItem === void 0 ? false : _props$flexItem,
          _props$light = props.light,
          light = _props$light === void 0 ? false : _props$light,
          _props$orientation = props.orientation,
          orientation = _props$orientation === void 0 ? 'horizontal' : _props$orientation,
          _props$role = props.role,
          role = _props$role === void 0 ? Component !== 'hr' ? 'separator' : undefined : _props$role,
          _props$variant = props.variant,
          variant = _props$variant === void 0 ? 'fullWidth' : _props$variant,
          other = _objectWithoutProperties(props, ["absolute", "classes", "className", "component", "flexItem", "light", "orientation", "role", "variant"]);

      return /*#__PURE__*/React__namespace.createElement(Component, _extends$3({
        className: r$1(classes.root, className, variant !== 'fullWidth' && classes[variant], absolute && classes.absolute, flexItem && classes.flexItem, light && classes.light, orientation === 'vertical' && classes.vertical),
        role: role,
        ref: ref
      }, other));
    });
    process.env.NODE_ENV !== "production" ? Divider.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * Absolutely position the element.
       */
      absolute: re.bool,

      /**
       * @ignore
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: re
      /* @typescript-to-proptypes-ignore */
      .elementType,

      /**
       * If `true`, a vertical divider will have the correct height when used in flex container.
       * (By default, a vertical divider will have a calculated height of `0px` if it is the child of a flex container.)
       */
      flexItem: re.bool,

      /**
       * If `true`, the divider will have a lighter color.
       */
      light: re.bool,

      /**
       * The divider orientation.
       */
      orientation: re.oneOf(['horizontal', 'vertical']),

      /**
       * @ignore
       */
      role: re.string,

      /**
       * The variant to use.
       */
      variant: re.oneOf(['fullWidth', 'inset', 'middle'])
    } : void 0;
    var Divider$1 = withStyles(styles$1A, {
      name: 'MuiDivider'
    })(Divider);

    // Later, we gonna translate back the node to his original location
    // with `none`.`

    function getTranslateValue(direction, node) {
      var rect = node.getBoundingClientRect();
      var transform;

      if (node.fakeTransform) {
        transform = node.fakeTransform;
      } else {
        var computedStyle = window.getComputedStyle(node);
        transform = computedStyle.getPropertyValue('-webkit-transform') || computedStyle.getPropertyValue('transform');
      }

      var offsetX = 0;
      var offsetY = 0;

      if (transform && transform !== 'none' && typeof transform === 'string') {
        var transformValues = transform.split('(')[1].split(')')[0].split(',');
        offsetX = parseInt(transformValues[4], 10);
        offsetY = parseInt(transformValues[5], 10);
      }

      if (direction === 'left') {
        return "translateX(".concat(window.innerWidth, "px) translateX(").concat(offsetX - rect.left, "px)");
      }

      if (direction === 'right') {
        return "translateX(-".concat(rect.left + rect.width - offsetX, "px)");
      }

      if (direction === 'up') {
        return "translateY(".concat(window.innerHeight, "px) translateY(").concat(offsetY - rect.top, "px)");
      } // direction === 'down'


      return "translateY(-".concat(rect.top + rect.height - offsetY, "px)");
    }

    function setTranslateValue(direction, node) {
      var transform = getTranslateValue(direction, node);

      if (transform) {
        node.style.webkitTransform = transform;
        node.style.transform = transform;
      }
    }
    var defaultTimeout$1 = {
      enter: duration.enteringScreen,
      exit: duration.leavingScreen
    };
    /**
     * The Slide transition is used by the [Drawer](/components/drawers/) component.
     * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.
     */

    var Slide = /*#__PURE__*/React__namespace.forwardRef(function Slide(props, ref) {
      var children = props.children,
          _props$direction = props.direction,
          direction = _props$direction === void 0 ? 'down' : _props$direction,
          inProp = props.in,
          onEnter = props.onEnter,
          onEntered = props.onEntered,
          onEntering = props.onEntering,
          onExit = props.onExit,
          onExited = props.onExited,
          onExiting = props.onExiting,
          style = props.style,
          _props$timeout = props.timeout,
          timeout = _props$timeout === void 0 ? defaultTimeout$1 : _props$timeout,
          _props$TransitionComp = props.TransitionComponent,
          TransitionComponent = _props$TransitionComp === void 0 ? Transition$1 : _props$TransitionComp,
          other = _objectWithoutProperties(props, ["children", "direction", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"]);

      var theme = useTheme();
      var childrenRef = React__namespace.useRef(null);
      /**
       * used in cloneElement(children, { ref: handleRef })
       */

      var handleOwnRef = React__namespace.useCallback(function (instance) {
        // #StrictMode ready
        childrenRef.current = ReactDOM__namespace.findDOMNode(instance);
      }, []);
      var handleRefIntermediary = useForkRef(children.ref, handleOwnRef);
      var handleRef = useForkRef(handleRefIntermediary, ref);

      var normalizedTransitionCallback = function normalizedTransitionCallback(callback) {
        return function (isAppearing) {
          if (callback) {
            // onEnterXxx and onExitXxx callbacks have a different arguments.length value.
            if (isAppearing === undefined) {
              callback(childrenRef.current);
            } else {
              callback(childrenRef.current, isAppearing);
            }
          }
        };
      };

      var handleEnter = normalizedTransitionCallback(function (node, isAppearing) {
        setTranslateValue(direction, node);
        reflow(node);

        if (onEnter) {
          onEnter(node, isAppearing);
        }
      });
      var handleEntering = normalizedTransitionCallback(function (node, isAppearing) {
        var transitionProps = getTransitionProps({
          timeout: timeout,
          style: style
        }, {
          mode: 'enter'
        });
        node.style.webkitTransition = theme.transitions.create('-webkit-transform', _extends$3({}, transitionProps, {
          easing: theme.transitions.easing.easeOut
        }));
        node.style.transition = theme.transitions.create('transform', _extends$3({}, transitionProps, {
          easing: theme.transitions.easing.easeOut
        }));
        node.style.webkitTransform = 'none';
        node.style.transform = 'none';

        if (onEntering) {
          onEntering(node, isAppearing);
        }
      });
      var handleEntered = normalizedTransitionCallback(onEntered);
      var handleExiting = normalizedTransitionCallback(onExiting);
      var handleExit = normalizedTransitionCallback(function (node) {
        var transitionProps = getTransitionProps({
          timeout: timeout,
          style: style
        }, {
          mode: 'exit'
        });
        node.style.webkitTransition = theme.transitions.create('-webkit-transform', _extends$3({}, transitionProps, {
          easing: theme.transitions.easing.sharp
        }));
        node.style.transition = theme.transitions.create('transform', _extends$3({}, transitionProps, {
          easing: theme.transitions.easing.sharp
        }));
        setTranslateValue(direction, node);

        if (onExit) {
          onExit(node);
        }
      });
      var handleExited = normalizedTransitionCallback(function (node) {
        // No need for transitions when the component is hidden
        node.style.webkitTransition = '';
        node.style.transition = '';

        if (onExited) {
          onExited(node);
        }
      });
      var updatePosition = React__namespace.useCallback(function () {
        if (childrenRef.current) {
          setTranslateValue(direction, childrenRef.current);
        }
      }, [direction]);
      React__namespace.useEffect(function () {
        // Skip configuration where the position is screen size invariant.
        if (inProp || direction === 'down' || direction === 'right') {
          return undefined;
        }

        var handleResize = debounce$1(function () {
          if (childrenRef.current) {
            setTranslateValue(direction, childrenRef.current);
          }
        });
        window.addEventListener('resize', handleResize);
        return function () {
          handleResize.clear();
          window.removeEventListener('resize', handleResize);
        };
      }, [direction, inProp]);
      React__namespace.useEffect(function () {
        if (!inProp) {
          // We need to update the position of the drawer when the direction change and
          // when it's hidden.
          updatePosition();
        }
      }, [inProp, updatePosition]);
      return /*#__PURE__*/React__namespace.createElement(TransitionComponent, _extends$3({
        nodeRef: childrenRef,
        onEnter: handleEnter,
        onEntered: handleEntered,
        onEntering: handleEntering,
        onExit: handleExit,
        onExited: handleExited,
        onExiting: handleExiting,
        appear: true,
        in: inProp,
        timeout: timeout
      }, other), function (state, childProps) {
        return /*#__PURE__*/React__namespace.cloneElement(children, _extends$3({
          ref: handleRef,
          style: _extends$3({
            visibility: state === 'exited' && !inProp ? 'hidden' : undefined
          }, style, children.props.style)
        }, childProps));
      });
    });
    process.env.NODE_ENV !== "production" ? Slide.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * A single child content element.
       */
      children: elementAcceptingRef$1,

      /**
       * Direction the child node will enter from.
       */
      direction: re.oneOf(['down', 'left', 'right', 'up']),

      /**
       * If `true`, show the component; triggers the enter or exit animation.
       */
      in: re.bool,

      /**
       * @ignore
       */
      onEnter: re.func,

      /**
       * @ignore
       */
      onEntered: re.func,

      /**
       * @ignore
       */
      onEntering: re.func,

      /**
       * @ignore
       */
      onExit: re.func,

      /**
       * @ignore
       */
      onExited: re.func,

      /**
       * @ignore
       */
      onExiting: re.func,

      /**
       * @ignore
       */
      style: re.object,

      /**
       * The duration for the transition, in milliseconds.
       * You may specify a single timeout for all transitions, or individually with an object.
       */
      timeout: re.oneOfType([re.number, re.shape({
        appear: re.number,
        enter: re.number,
        exit: re.number
      })])
    } : void 0;
    var Slide$1 = Slide;

    var styles$1z = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {},

        /* Styles applied to the root element if `variant="permanent or persistent"`. */
        docked: {
          flex: '0 0 auto'
        },

        /* Styles applied to the `Paper` component. */
        paper: {
          overflowY: 'auto',
          display: 'flex',
          flexDirection: 'column',
          height: '100%',
          flex: '1 0 auto',
          zIndex: theme.zIndex.drawer,
          WebkitOverflowScrolling: 'touch',
          // Add iOS momentum scrolling.
          // temporary style
          position: 'fixed',
          top: 0,
          // We disable the focus ring for mouse, touch and keyboard users.
          // At some point, it would be better to keep it for keyboard users.
          // :focus-ring CSS pseudo-class will help.
          outline: 0
        },

        /* Styles applied to the `Paper` component if `anchor="left"`. */
        paperAnchorLeft: {
          left: 0,
          right: 'auto'
        },

        /* Styles applied to the `Paper` component if `anchor="right"`. */
        paperAnchorRight: {
          left: 'auto',
          right: 0
        },

        /* Styles applied to the `Paper` component if `anchor="top"`. */
        paperAnchorTop: {
          top: 0,
          left: 0,
          bottom: 'auto',
          right: 0,
          height: 'auto',
          maxHeight: '100%'
        },

        /* Styles applied to the `Paper` component if `anchor="bottom"`. */
        paperAnchorBottom: {
          top: 'auto',
          left: 0,
          bottom: 0,
          right: 0,
          height: 'auto',
          maxHeight: '100%'
        },

        /* Styles applied to the `Paper` component if `anchor="left"` and `variant` is not "temporary". */
        paperAnchorDockedLeft: {
          borderRight: "1px solid ".concat(theme.palette.divider)
        },

        /* Styles applied to the `Paper` component if `anchor="top"` and `variant` is not "temporary". */
        paperAnchorDockedTop: {
          borderBottom: "1px solid ".concat(theme.palette.divider)
        },

        /* Styles applied to the `Paper` component if `anchor="right"` and `variant` is not "temporary". */
        paperAnchorDockedRight: {
          borderLeft: "1px solid ".concat(theme.palette.divider)
        },

        /* Styles applied to the `Paper` component if `anchor="bottom"` and `variant` is not "temporary". */
        paperAnchorDockedBottom: {
          borderTop: "1px solid ".concat(theme.palette.divider)
        },

        /* Styles applied to the `Modal` component. */
        modal: {}
      };
    };
    var oppositeDirection = {
      left: 'right',
      right: 'left',
      top: 'down',
      bottom: 'up'
    };
    function isHorizontal(anchor) {
      return ['left', 'right'].indexOf(anchor) !== -1;
    }
    function getAnchor(theme, anchor) {
      return theme.direction === 'rtl' && isHorizontal(anchor) ? oppositeDirection[anchor] : anchor;
    }
    var defaultTransitionDuration = {
      enter: duration.enteringScreen,
      exit: duration.leavingScreen
    };
    /**
     * The props of the [Modal](/api/modal/) component are available
     * when `variant="temporary"` is set.
     */

    var Drawer$2 = /*#__PURE__*/React__namespace.forwardRef(function Drawer(props, ref) {
      var _props$anchor = props.anchor,
          anchorProp = _props$anchor === void 0 ? 'left' : _props$anchor,
          BackdropProps = props.BackdropProps,
          children = props.children,
          classes = props.classes,
          className = props.className,
          _props$elevation = props.elevation,
          elevation = _props$elevation === void 0 ? 16 : _props$elevation,
          _props$ModalProps = props.ModalProps;
      _props$ModalProps = _props$ModalProps === void 0 ? {} : _props$ModalProps;

      var BackdropPropsProp = _props$ModalProps.BackdropProps,
          ModalProps = _objectWithoutProperties(_props$ModalProps, ["BackdropProps"]),
          onClose = props.onClose,
          _props$open = props.open,
          open = _props$open === void 0 ? false : _props$open,
          _props$PaperProps = props.PaperProps,
          PaperProps = _props$PaperProps === void 0 ? {} : _props$PaperProps,
          SlideProps = props.SlideProps,
          _props$TransitionComp = props.TransitionComponent,
          TransitionComponent = _props$TransitionComp === void 0 ? Slide$1 : _props$TransitionComp,
          _props$transitionDura = props.transitionDuration,
          transitionDuration = _props$transitionDura === void 0 ? defaultTransitionDuration : _props$transitionDura,
          _props$variant = props.variant,
          variant = _props$variant === void 0 ? 'temporary' : _props$variant,
          other = _objectWithoutProperties(props, ["anchor", "BackdropProps", "children", "classes", "className", "elevation", "ModalProps", "onClose", "open", "PaperProps", "SlideProps", "TransitionComponent", "transitionDuration", "variant"]);

      var theme = useTheme(); // Let's assume that the Drawer will always be rendered on user space.
      // We use this state is order to skip the appear transition during the
      // initial mount of the component.

      var mounted = React__namespace.useRef(false);
      React__namespace.useEffect(function () {
        mounted.current = true;
      }, []);
      var anchor = getAnchor(theme, anchorProp);
      var drawer = /*#__PURE__*/React__namespace.createElement(M, _extends$3({
        elevation: variant === 'temporary' ? elevation : 0,
        square: true
      }, PaperProps, {
        className: r$1(classes.paper, classes["paperAnchor".concat(capitalize(anchor))], PaperProps.className, variant !== 'temporary' && classes["paperAnchorDocked".concat(capitalize(anchor))])
      }), children);

      if (variant === 'permanent') {
        return /*#__PURE__*/React__namespace.createElement("div", _extends$3({
          className: r$1(classes.root, classes.docked, className),
          ref: ref
        }, other), drawer);
      }

      var slidingDrawer = /*#__PURE__*/React__namespace.createElement(TransitionComponent, _extends$3({
        in: open,
        direction: oppositeDirection[anchor],
        timeout: transitionDuration,
        appear: mounted.current
      }, SlideProps), drawer);

      if (variant === 'persistent') {
        return /*#__PURE__*/React__namespace.createElement("div", _extends$3({
          className: r$1(classes.root, classes.docked, className),
          ref: ref
        }, other), slidingDrawer);
      } // variant === temporary


      return /*#__PURE__*/React__namespace.createElement(Modal$1, _extends$3({
        BackdropProps: _extends$3({}, BackdropProps, BackdropPropsProp, {
          transitionDuration: transitionDuration
        }),
        BackdropComponent: Backdrop$1,
        className: r$1(classes.root, classes.modal, className),
        open: open,
        onClose: onClose,
        ref: ref
      }, other, ModalProps), slidingDrawer);
    });
    process.env.NODE_ENV !== "production" ? Drawer$2.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * Side from which the drawer will appear.
       */
      anchor: re.oneOf(['bottom', 'left', 'right', 'top']),

      /**
       * @ignore
       */
      BackdropProps: re.object,

      /**
       * The contents of the drawer.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * The elevation of the drawer.
       */
      elevation: re.number,

      /**
       * Props applied to the [`Modal`](/api/modal/) element.
       */
      ModalProps: re.object,

      /**
       * Callback fired when the component requests to be closed.
       *
       * @param {object} event The event source of the callback.
       */
      onClose: re.func,

      /**
       * If `true`, the drawer is open.
       */
      open: re.bool,

      /**
       * Props applied to the [`Paper`](/api/paper/) element.
       */
      PaperProps: re.object,

      /**
       * Props applied to the [`Slide`](/api/slide/) element.
       */
      SlideProps: re.object,

      /**
       * The duration for the transition, in milliseconds.
       * You may specify a single timeout for all transitions, or individually with an object.
       */
      transitionDuration: re.oneOfType([re.number, re.shape({
        appear: re.number,
        enter: re.number,
        exit: re.number
      })]),

      /**
       * The variant to use.
       */
      variant: re.oneOf(['permanent', 'persistent', 'temporary'])
    } : void 0;
    var Drawer$3 = withStyles(styles$1z, {
      name: 'MuiDrawer',
      flip: false
    })(Drawer$2);

    /**
     * @ignore - internal component.
     * @type {React.Context<{} | {expanded: boolean, disabled: boolean, toggle: () => void}>}
     */

    var ExpansionPanelContext = React__namespace.createContext({});

    if (process.env.NODE_ENV !== 'production') {
      ExpansionPanelContext.displayName = 'ExpansionPanelContext';
    }

    var ExpansionPanelContext$1 = ExpansionPanelContext;

    var styles$1y = function styles(theme) {
      var transition = {
        duration: theme.transitions.duration.shortest
      };
      return {
        /* Styles applied to the root element. */
        root: {
          position: 'relative',
          transition: theme.transitions.create(['margin'], transition),
          '&:before': {
            position: 'absolute',
            left: 0,
            top: -1,
            right: 0,
            height: 1,
            content: '""',
            opacity: 1,
            backgroundColor: theme.palette.divider,
            transition: theme.transitions.create(['opacity', 'background-color'], transition)
          },
          '&:first-child': {
            '&:before': {
              display: 'none'
            }
          },
          '&$expanded': {
            margin: '16px 0',
            '&:first-child': {
              marginTop: 0
            },
            '&:last-child': {
              marginBottom: 0
            },
            '&:before': {
              opacity: 0
            }
          },
          '&$expanded + &': {
            '&:before': {
              display: 'none'
            }
          },
          '&$disabled': {
            backgroundColor: theme.palette.action.disabledBackground
          }
        },

        /* Styles applied to the root element if `square={false}`. */
        rounded: {
          borderRadius: 0,
          '&:first-child': {
            borderTopLeftRadius: theme.shape.borderRadius,
            borderTopRightRadius: theme.shape.borderRadius
          },
          '&:last-child': {
            borderBottomLeftRadius: theme.shape.borderRadius,
            borderBottomRightRadius: theme.shape.borderRadius,
            // Fix a rendering issue on Edge
            '@supports (-ms-ime-align: auto)': {
              borderBottomLeftRadius: 0,
              borderBottomRightRadius: 0
            }
          }
        },

        /* Styles applied to the root element if `expanded={true}`. */
        expanded: {},

        /* Styles applied to the root element if `disabled={true}`. */
        disabled: {}
      };
    };
    var warnedOnce$8 = false;
    /**
     * ⚠️ The ExpansionPanel component was renamed to Accordion to use a more common naming convention.
     *
     * You should use `import { Accordion } from '@material-ui/core'`
     * or `import Accordion from '@material-ui/core/Accordion'`.
     */

    var ExpansionPanel = /*#__PURE__*/React__namespace.forwardRef(function ExpansionPanel(props, ref) {
      if (process.env.NODE_ENV !== 'production') {
        if (!warnedOnce$8) {
          warnedOnce$8 = true;
          console.error(['Material-UI: the ExpansionPanel component was renamed to Accordion to use a more common naming convention.', '', "You should use `import { Accordion } from '@material-ui/core'`", "or `import Accordion from '@material-ui/core/Accordion'`"].join('\n'));
        }
      }

      var childrenProp = props.children,
          classes = props.classes,
          className = props.className,
          _props$defaultExpande = props.defaultExpanded,
          defaultExpanded = _props$defaultExpande === void 0 ? false : _props$defaultExpande,
          _props$disabled = props.disabled,
          disabled = _props$disabled === void 0 ? false : _props$disabled,
          expandedProp = props.expanded,
          onChange = props.onChange,
          _props$square = props.square,
          square = _props$square === void 0 ? false : _props$square,
          _props$TransitionComp = props.TransitionComponent,
          TransitionComponent = _props$TransitionComp === void 0 ? Collapse$1 : _props$TransitionComp,
          TransitionProps = props.TransitionProps,
          other = _objectWithoutProperties(props, ["children", "classes", "className", "defaultExpanded", "disabled", "expanded", "onChange", "square", "TransitionComponent", "TransitionProps"]);

      var _useControlled = useControlled({
        controlled: expandedProp,
        default: defaultExpanded,
        name: 'ExpansionPanel',
        state: 'expanded'
      }),
          _useControlled2 = _slicedToArray(_useControlled, 2),
          expanded = _useControlled2[0],
          setExpandedState = _useControlled2[1];

      var handleChange = React__namespace.useCallback(function (event) {
        setExpandedState(!expanded);

        if (onChange) {
          onChange(event, !expanded);
        }
      }, [expanded, onChange, setExpandedState]);

      var _React$Children$toArr = React__namespace.Children.toArray(childrenProp),
          _React$Children$toArr2 = _toArray(_React$Children$toArr),
          summary = _React$Children$toArr2[0],
          children = _React$Children$toArr2.slice(1);

      var contextValue = React__namespace.useMemo(function () {
        return {
          expanded: expanded,
          disabled: disabled,
          toggle: handleChange
        };
      }, [expanded, disabled, handleChange]);
      return /*#__PURE__*/React__namespace.createElement(M, _extends$3({
        className: r$1(classes.root, className, expanded && classes.expanded, disabled && classes.disabled, !square && classes.rounded),
        ref: ref,
        square: square
      }, other), /*#__PURE__*/React__namespace.createElement(ExpansionPanelContext$1.Provider, {
        value: contextValue
      }, summary), /*#__PURE__*/React__namespace.createElement(TransitionComponent, _extends$3({
        in: expanded,
        timeout: "auto"
      }, TransitionProps), /*#__PURE__*/React__namespace.createElement("div", {
        "aria-labelledby": summary.props.id,
        id: summary.props['aria-controls'],
        role: "region"
      }, children)));
    });
    process.env.NODE_ENV !== "production" ? ExpansionPanel.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * The content of the expansion panel.
       */
      children: chainPropTypes$1(re.node.isRequired, function (props) {
        var summary = React__namespace.Children.toArray(props.children)[0];

        if (reactIs$2.exports.isFragment(summary)) {
          return new Error("Material-UI: The ExpansionPanel doesn't accept a Fragment as a child. " + 'Consider providing an array instead.');
        }

        if (! /*#__PURE__*/React__namespace.isValidElement(summary)) {
          return new Error('Material-UI: Expected the first child of ExpansionPanel to be a valid element.');
        }

        return null;
      }),

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * If `true`, expands the panel by default.
       */
      defaultExpanded: re.bool,

      /**
       * If `true`, the panel will be displayed in a disabled state.
       */
      disabled: re.bool,

      /**
       * If `true`, expands the panel, otherwise collapse it.
       * Setting this prop enables control over the panel.
       */
      expanded: re.bool,

      /**
       * Callback fired when the expand/collapse state is changed.
       *
       * @param {object} event The event source of the callback.
       * @param {boolean} expanded The `expanded` state of the panel.
       */
      onChange: re.func,

      /**
       * If `true`, rounded corners are disabled.
       */
      square: re.bool,

      /**
       * The component used for the collapse effect.
       * [Follow this guide](/components/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
       */
      TransitionComponent: re.elementType,

      /**
       * Props applied to the [`Transition`](http://reactcommunity.org/react-transition-group/transition#Transition-props) element.
       */
      TransitionProps: re.object
    } : void 0;
    var ExpansionPanel$1 = withStyles(styles$1y, {
      name: 'MuiExpansionPanel'
    })(ExpansionPanel);

    var styles$1x = {
      /* Styles applied to the root element. */
      root: {
        display: 'flex',
        alignItems: 'center',
        padding: 8,
        justifyContent: 'flex-end'
      },

      /* Styles applied to the root element if `disableSpacing={false}`. */
      spacing: {
        '& > :not(:first-child)': {
          marginLeft: 8
        }
      }
    };
    var warnedOnce$7 = false;
    /**
     * ⚠️ The ExpansionPanelActions component was renamed to AccordionActions to use a more common naming convention.
     *
     * You should use `import { AccordionActions } from '@material-ui/core'`
     * or `import AccordionActions from '@material-ui/core/AccordionActions'`.
     */

    var ExpansionPanelActions = /*#__PURE__*/React__namespace.forwardRef(function ExpansionPanelActions(props, ref) {
      if (process.env.NODE_ENV !== 'production') {
        if (!warnedOnce$7) {
          warnedOnce$7 = true;
          console.error(['Material-UI: the ExpansionPanelActions component was renamed to AccordionActions to use a more common naming convention.', '', "You should use `import { AccordionActions } from '@material-ui/core'`", "or `import AccordionActions from '@material-ui/core/AccordionActions'`"].join('\n'));
        }
      }

      var classes = props.classes,
          className = props.className,
          _props$disableSpacing = props.disableSpacing,
          disableSpacing = _props$disableSpacing === void 0 ? false : _props$disableSpacing,
          other = _objectWithoutProperties(props, ["classes", "className", "disableSpacing"]);

      return /*#__PURE__*/React__namespace.createElement("div", _extends$3({
        className: r$1(classes.root, className, !disableSpacing && classes.spacing),
        ref: ref
      }, other));
    });
    process.env.NODE_ENV !== "production" ? ExpansionPanelActions.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * The content of the component.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * If `true`, the actions do not have additional margin.
       */
      disableSpacing: re.bool
    } : void 0;
    var ExpansionPanelActions$1 = withStyles(styles$1x, {
      name: 'MuiExpansionPanelActions'
    })(ExpansionPanelActions);

    var styles$1w = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          display: 'flex',
          padding: theme.spacing(1, 2, 2)
        }
      };
    };
    var warnedOnce$6 = false;
    /**
     * ⚠️ The ExpansionPanelDetails component was renamed to AccordionDetails to use a more common naming convention.
     *
     * You should use `import { AccordionDetails } from '@material-ui/core'`
     * or `import AccordionDetails from '@material-ui/core/AccordionDetails'`.
     */

    var ExpansionPanelDetails = /*#__PURE__*/React__namespace.forwardRef(function ExpansionPanelDetails(props, ref) {
      if (process.env.NODE_ENV !== 'production') {
        if (!warnedOnce$6) {
          warnedOnce$6 = true;
          console.error(['Material-UI: the ExpansionPanelDetails component was renamed to AccordionDetails to use a more common naming convention.', '', "You should use `import { AccordionDetails } from '@material-ui/core'`", "or `import AccordionDetails from '@material-ui/core/AccordionActions'`"].join('\n'));
        }
      }

      var classes = props.classes,
          className = props.className,
          other = _objectWithoutProperties(props, ["classes", "className"]);

      return /*#__PURE__*/React__namespace.createElement("div", _extends$3({
        className: r$1(classes.root, className),
        ref: ref
      }, other));
    });
    process.env.NODE_ENV !== "production" ? ExpansionPanelDetails.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * The content of the expansion panel details.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string
    } : void 0;
    var ExpansionPanelDetails$1 = withStyles(styles$1w, {
      name: 'MuiExpansionPanelDetails'
    })(ExpansionPanelDetails);

    var styles$1v = function styles(theme) {
      var transition = {
        duration: theme.transitions.duration.shortest
      };
      return {
        /* Styles applied to the root element. */
        root: {
          display: 'flex',
          minHeight: 8 * 6,
          transition: theme.transitions.create(['min-height', 'background-color'], transition),
          padding: theme.spacing(0, 2),
          '&:hover:not($disabled)': {
            cursor: 'pointer'
          },
          '&$expanded': {
            minHeight: 64
          },
          '&$focused': {
            backgroundColor: theme.palette.action.focus
          },
          '&$disabled': {
            opacity: theme.palette.action.disabledOpacity
          }
        },

        /* Pseudo-class applied to the root element, children wrapper element and `IconButton` component if `expanded={true}`. */
        expanded: {},

        /* Pseudo-class applied to the root element if `focused={true}`. */
        focused: {},

        /* Pseudo-class applied to the root element if `disabled={true}`. */
        disabled: {},

        /* Styles applied to the children wrapper element. */
        content: {
          display: 'flex',
          flexGrow: 1,
          transition: theme.transitions.create(['margin'], transition),
          margin: '12px 0',
          '&$expanded': {
            margin: '20px 0'
          }
        },

        /* Styles applied to the `IconButton` component when `expandIcon` is supplied. */
        expandIcon: {
          transform: 'rotate(0deg)',
          transition: theme.transitions.create('transform', transition),
          '&:hover': {
            // Disable the hover effect for the IconButton,
            // because a hover effect should apply to the entire Expand button and
            // not only to the IconButton.
            backgroundColor: 'transparent'
          },
          '&$expanded': {
            transform: 'rotate(180deg)'
          }
        }
      };
    };
    var warnedOnce$5 = false;
    /**
     * ⚠️ The ExpansionPanelSummary component was renamed to AccordionSummary to use a more common naming convention.
     *
     * You should use `import { AccordionSummary } from '@material-ui/core'`
     * or `import AccordionSummary from '@material-ui/core/AccordionSummary'`.
     */

    var ExpansionPanelSummary = /*#__PURE__*/React__namespace.forwardRef(function ExpansionPanelSummary(props, ref) {
      if (process.env.NODE_ENV !== 'production') {
        if (!warnedOnce$5) {
          warnedOnce$5 = true;
          console.error(['Material-UI: the ExpansionPanelSummary component was renamed to AccordionSummary to use a more common naming convention.', '', "You should use `import { AccordionSummary } from '@material-ui/core'`", "or `import AccordionSummary from '@material-ui/core/AccordionSummary'`"].join('\n'));
        }
      }

      var children = props.children,
          classes = props.classes,
          className = props.className,
          expandIcon = props.expandIcon,
          IconButtonProps = props.IconButtonProps,
          onBlur = props.onBlur,
          onClick = props.onClick,
          onFocusVisible = props.onFocusVisible,
          other = _objectWithoutProperties(props, ["children", "classes", "className", "expandIcon", "IconButtonProps", "onBlur", "onClick", "onFocusVisible"]);

      var _React$useState = React__namespace.useState(false),
          focusedState = _React$useState[0],
          setFocusedState = _React$useState[1];

      var handleFocusVisible = function handleFocusVisible(event) {
        setFocusedState(true);

        if (onFocusVisible) {
          onFocusVisible(event);
        }
      };

      var handleBlur = function handleBlur(event) {
        setFocusedState(false);

        if (onBlur) {
          onBlur(event);
        }
      };

      var _React$useContext = React__namespace.useContext(ExpansionPanelContext$1),
          _React$useContext$dis = _React$useContext.disabled,
          disabled = _React$useContext$dis === void 0 ? false : _React$useContext$dis,
          expanded = _React$useContext.expanded,
          toggle = _React$useContext.toggle;

      var handleChange = function handleChange(event) {
        if (toggle) {
          toggle(event);
        }

        if (onClick) {
          onClick(event);
        }
      };

      return /*#__PURE__*/React__namespace.createElement(ButtonBase$1, _extends$3({
        focusRipple: false,
        disableRipple: true,
        disabled: disabled,
        component: "div",
        "aria-expanded": expanded,
        className: r$1(classes.root, className, disabled && classes.disabled, expanded && classes.expanded, focusedState && classes.focused),
        onFocusVisible: handleFocusVisible,
        onBlur: handleBlur,
        onClick: handleChange,
        ref: ref
      }, other), /*#__PURE__*/React__namespace.createElement("div", {
        className: r$1(classes.content, expanded && classes.expanded)
      }, children), expandIcon && /*#__PURE__*/React__namespace.createElement(IconButton$1, _extends$3({
        className: r$1(classes.expandIcon, expanded && classes.expanded),
        edge: "end",
        component: "div",
        tabIndex: null,
        role: null,
        "aria-hidden": true
      }, IconButtonProps), expandIcon));
    });
    process.env.NODE_ENV !== "production" ? ExpansionPanelSummary.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * The content of the expansion panel summary.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * The icon to display as the expand indicator.
       */
      expandIcon: re.node,

      /**
       * Props applied to the `IconButton` element wrapping the expand icon.
       */
      IconButtonProps: re.object,

      /**
       * @ignore
       */
      onBlur: re.func,

      /**
       * @ignore
       */
      onClick: re.func,

      /**
       * Callback fired when the component is focused with a keyboard.
       * We trigger a `onFocus` callback too.
       */
      onFocusVisible: re.func
    } : void 0;
    var ExpansionPanelSummary$1 = withStyles(styles$1v, {
      name: 'MuiExpansionPanelSummary'
    })(ExpansionPanelSummary);

    var styles$1u = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: _extends$3({}, theme.typography.button, {
          boxSizing: 'border-box',
          minHeight: 36,
          transition: theme.transitions.create(['background-color', 'box-shadow', 'border'], {
            duration: theme.transitions.duration.short
          }),
          borderRadius: '50%',
          padding: 0,
          minWidth: 0,
          width: 56,
          height: 56,
          boxShadow: theme.shadows[6],
          '&:active': {
            boxShadow: theme.shadows[12]
          },
          color: theme.palette.getContrastText(theme.palette.grey[300]),
          backgroundColor: theme.palette.grey[300],
          '&:hover': {
            backgroundColor: theme.palette.grey.A100,
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
              backgroundColor: theme.palette.grey[300]
            },
            '&$disabled': {
              backgroundColor: theme.palette.action.disabledBackground
            },
            textDecoration: 'none'
          },
          '&$focusVisible': {
            boxShadow: theme.shadows[6]
          },
          '&$disabled': {
            color: theme.palette.action.disabled,
            boxShadow: theme.shadows[0],
            backgroundColor: theme.palette.action.disabledBackground
          }
        }),

        /* Styles applied to the span element that wraps the children. */
        label: {
          width: '100%',
          // assure the correct width for iOS Safari
          display: 'inherit',
          alignItems: 'inherit',
          justifyContent: 'inherit'
        },

        /* Styles applied to the root element if `color="primary"`. */
        primary: {
          color: theme.palette.primary.contrastText,
          backgroundColor: theme.palette.primary.main,
          '&:hover': {
            backgroundColor: theme.palette.primary.dark,
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
              backgroundColor: theme.palette.primary.main
            }
          }
        },

        /* Styles applied to the root element if `color="secondary"`. */
        secondary: {
          color: theme.palette.secondary.contrastText,
          backgroundColor: theme.palette.secondary.main,
          '&:hover': {
            backgroundColor: theme.palette.secondary.dark,
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
              backgroundColor: theme.palette.secondary.main
            }
          }
        },

        /* Styles applied to the root element if `variant="extended"`. */
        extended: {
          borderRadius: 48 / 2,
          padding: '0 16px',
          width: 'auto',
          minHeight: 'auto',
          minWidth: 48,
          height: 48,
          '&$sizeSmall': {
            width: 'auto',
            padding: '0 8px',
            borderRadius: 34 / 2,
            minWidth: 34,
            height: 34
          },
          '&$sizeMedium': {
            width: 'auto',
            padding: '0 16px',
            borderRadius: 40 / 2,
            minWidth: 40,
            height: 40
          }
        },

        /* Pseudo-class applied to the ButtonBase root element if the button is keyboard focused. */
        focusVisible: {},

        /* Pseudo-class applied to the root element if `disabled={true}`. */
        disabled: {},

        /* Styles applied to the root element if `color="inherit"`. */
        colorInherit: {
          color: 'inherit'
        },

        /* Styles applied to the root element if `size="small"``. */
        sizeSmall: {
          width: 40,
          height: 40
        },

        /* Styles applied to the root element if `size="medium"``. */
        sizeMedium: {
          width: 48,
          height: 48
        }
      };
    };
    var Fab = /*#__PURE__*/React__namespace.forwardRef(function Fab(props, ref) {
      var children = props.children,
          classes = props.classes,
          className = props.className,
          _props$color = props.color,
          color = _props$color === void 0 ? 'default' : _props$color,
          _props$component = props.component,
          component = _props$component === void 0 ? 'button' : _props$component,
          _props$disabled = props.disabled,
          disabled = _props$disabled === void 0 ? false : _props$disabled,
          _props$disableFocusRi = props.disableFocusRipple,
          disableFocusRipple = _props$disableFocusRi === void 0 ? false : _props$disableFocusRi,
          focusVisibleClassName = props.focusVisibleClassName,
          _props$size = props.size,
          size = _props$size === void 0 ? 'large' : _props$size,
          _props$variant = props.variant,
          variant = _props$variant === void 0 ? 'circular' : _props$variant,
          other = _objectWithoutProperties(props, ["children", "classes", "className", "color", "component", "disabled", "disableFocusRipple", "focusVisibleClassName", "size", "variant"]);

      return /*#__PURE__*/React__namespace.createElement(ButtonBase$1, _extends$3({
        className: r$1(classes.root, className, size !== 'large' && classes["size".concat(capitalize(size))], disabled && classes.disabled, variant === 'extended' && classes.extended, {
          'primary': classes.primary,
          'secondary': classes.secondary,
          'inherit': classes.colorInherit
        }[color]),
        component: component,
        disabled: disabled,
        focusRipple: !disableFocusRipple,
        focusVisibleClassName: r$1(classes.focusVisible, focusVisibleClassName),
        ref: ref
      }, other), /*#__PURE__*/React__namespace.createElement("span", {
        className: classes.label
      }, children));
    });
    process.env.NODE_ENV !== "production" ? Fab.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * The content of the button.
       */
      children: re
      /* @typescript-to-proptypes-ignore */
      .node.isRequired,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * The color of the component. It supports those theme colors that make sense for this component.
       */
      color: re.oneOf(['default', 'inherit', 'primary', 'secondary']),

      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: re
      /* @typescript-to-proptypes-ignore */
      .elementType,

      /**
       * If `true`, the button will be disabled.
       */
      disabled: re.bool,

      /**
       * If `true`, the  keyboard focus ripple will be disabled.
       */
      disableFocusRipple: re.bool,

      /**
       * If `true`, the ripple effect will be disabled.
       */
      disableRipple: re.bool,

      /**
       * @ignore
       */
      focusVisibleClassName: re.string,

      /**
       * The URL to link to when the button is clicked.
       * If defined, an `a` element will be used as the root node.
       */
      href: re.string,

      /**
       * The size of the button.
       * `small` is equivalent to the dense button styling.
       */
      size: re.oneOf(['large', 'medium', 'small']),

      /**
       * The variant to use.
       * 'round' is deprecated, use 'circular' instead.
       */
      variant: chainPropTypes$1(re.oneOf(['extended', 'circular', 'round']), function (props) {
        if (props.variant === 'round') {
          throw new Error('Material-UI: variant="round" was renamed variant="circular" for consistency.');
        }

        return null;
      })
    } : void 0;
    var Fab$1 = withStyles(styles$1u, {
      name: 'MuiFab'
    })(Fab);

    function formControlState(_ref) {
      var props = _ref.props,
          states = _ref.states,
          muiFormControl = _ref.muiFormControl;
      return states.reduce(function (acc, state) {
        acc[state] = props[state];

        if (muiFormControl) {
          if (typeof props[state] === 'undefined') {
            acc[state] = muiFormControl[state];
          }
        }

        return acc;
      }, {});
    }

    function getStyleValue(computedStyle, property) {
      return parseInt(computedStyle[property], 10) || 0;
    }

    var useEnhancedEffect$7 = typeof window !== 'undefined' ? React__namespace.useLayoutEffect : React__namespace.useEffect;
    var styles$1t = {
      /* Styles applied to the shadow textarea element. */
      shadow: {
        // Visibility needed to hide the extra text area on iPads
        visibility: 'hidden',
        // Remove from the content flow
        position: 'absolute',
        // Ignore the scrollbar width
        overflow: 'hidden',
        height: 0,
        top: 0,
        left: 0,
        // Create a new layer, increase the isolation of the computed values
        transform: 'translateZ(0)'
      }
    };
    var TextareaAutosize = /*#__PURE__*/React__namespace.forwardRef(function TextareaAutosize(props, ref) {
      var onChange = props.onChange,
          rows = props.rows,
          rowsMax = props.rowsMax,
          rowsMinProp = props.rowsMin,
          maxRowsProp = props.maxRows,
          _props$minRows = props.minRows,
          minRowsProp = _props$minRows === void 0 ? 1 : _props$minRows,
          style = props.style,
          value = props.value,
          other = _objectWithoutProperties(props, ["onChange", "rows", "rowsMax", "rowsMin", "maxRows", "minRows", "style", "value"]);

      var maxRows = maxRowsProp || rowsMax;
      var minRows = rows || rowsMinProp || minRowsProp;

      var _React$useRef = React__namespace.useRef(value != null),
          isControlled = _React$useRef.current;

      var inputRef = React__namespace.useRef(null);
      var handleRef = useForkRef(ref, inputRef);
      var shadowRef = React__namespace.useRef(null);
      var renders = React__namespace.useRef(0);

      var _React$useState = React__namespace.useState({}),
          state = _React$useState[0],
          setState = _React$useState[1];

      var syncHeight = React__namespace.useCallback(function () {
        var input = inputRef.current;
        var computedStyle = window.getComputedStyle(input);
        var inputShallow = shadowRef.current;
        inputShallow.style.width = computedStyle.width;
        inputShallow.value = input.value || props.placeholder || 'x';

        if (inputShallow.value.slice(-1) === '\n') {
          // Certain fonts which overflow the line height will cause the textarea
          // to report a different scrollHeight depending on whether the last line
          // is empty. Make it non-empty to avoid this issue.
          inputShallow.value += ' ';
        }

        var boxSizing = computedStyle['box-sizing'];
        var padding = getStyleValue(computedStyle, 'padding-bottom') + getStyleValue(computedStyle, 'padding-top');
        var border = getStyleValue(computedStyle, 'border-bottom-width') + getStyleValue(computedStyle, 'border-top-width'); // The height of the inner content

        var innerHeight = inputShallow.scrollHeight - padding; // Measure height of a textarea with a single row

        inputShallow.value = 'x';
        var singleRowHeight = inputShallow.scrollHeight - padding; // The height of the outer content

        var outerHeight = innerHeight;

        if (minRows) {
          outerHeight = Math.max(Number(minRows) * singleRowHeight, outerHeight);
        }

        if (maxRows) {
          outerHeight = Math.min(Number(maxRows) * singleRowHeight, outerHeight);
        }

        outerHeight = Math.max(outerHeight, singleRowHeight); // Take the box sizing into account for applying this value as a style.

        var outerHeightStyle = outerHeight + (boxSizing === 'border-box' ? padding + border : 0);
        var overflow = Math.abs(outerHeight - innerHeight) <= 1;
        setState(function (prevState) {
          // Need a large enough difference to update the height.
          // This prevents infinite rendering loop.
          if (renders.current < 20 && (outerHeightStyle > 0 && Math.abs((prevState.outerHeightStyle || 0) - outerHeightStyle) > 1 || prevState.overflow !== overflow)) {
            renders.current += 1;
            return {
              overflow: overflow,
              outerHeightStyle: outerHeightStyle
            };
          }

          if (process.env.NODE_ENV !== 'production') {
            if (renders.current === 20) {
              console.error(['Material-UI: Too many re-renders. The layout is unstable.', 'TextareaAutosize limits the number of renders to prevent an infinite loop.'].join('\n'));
            }
          }

          return prevState;
        });
      }, [maxRows, minRows, props.placeholder]);
      React__namespace.useEffect(function () {
        var handleResize = debounce$1(function () {
          renders.current = 0;
          syncHeight();
        });
        window.addEventListener('resize', handleResize);
        return function () {
          handleResize.clear();
          window.removeEventListener('resize', handleResize);
        };
      }, [syncHeight]);
      useEnhancedEffect$7(function () {
        syncHeight();
      });
      React__namespace.useEffect(function () {
        renders.current = 0;
      }, [value]);

      var handleChange = function handleChange(event) {
        renders.current = 0;

        if (!isControlled) {
          syncHeight();
        }

        if (onChange) {
          onChange(event);
        }
      };

      return /*#__PURE__*/React__namespace.createElement(React__namespace.Fragment, null, /*#__PURE__*/React__namespace.createElement("textarea", _extends$3({
        value: value,
        onChange: handleChange,
        ref: handleRef // Apply the rows prop to get a "correct" first SSR paint
        ,
        rows: minRows,
        style: _extends$3({
          height: state.outerHeightStyle,
          // Need a large enough difference to allow scrolling.
          // This prevents infinite rendering loop.
          overflow: state.overflow ? 'hidden' : null
        }, style)
      }, other)), /*#__PURE__*/React__namespace.createElement("textarea", {
        "aria-hidden": true,
        className: props.className,
        readOnly: true,
        ref: shadowRef,
        tabIndex: -1,
        style: _extends$3({}, styles$1t.shadow, style)
      }));
    });
    process.env.NODE_ENV !== "production" ? TextareaAutosize.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * @ignore
       */
      className: re.string,

      /**
       * Maximum number of rows to display.
       */
      maxRows: re.oneOfType([re.number, re.string]),

      /**
       * Minimum number of rows to display.
       */
      minRows: re.oneOfType([re.number, re.string]),

      /**
       * @ignore
       */
      onChange: re.func,

      /**
       * @ignore
       */
      placeholder: re.string,

      /**
       * Minimum number of rows to display.
       * @deprecated Use `minRows` instead.
       */
      rows: deprecatedPropType(re.oneOfType([re.number, re.string]), 'Use `minRows` instead.'),

      /**
       * Maximum number of rows to display.
       * @deprecated Use `maxRows` instead.
       */
      rowsMax: deprecatedPropType(re.oneOfType([re.number, re.string]), 'Use `maxRows` instead.'),

      /**
       * Minimum number of rows to display.
       * @deprecated Use `minRows` instead.
       */
      rowsMin: deprecatedPropType(re.oneOfType([re.number, re.string]), 'Use `minRows` instead.'),

      /**
       * @ignore
       */
      style: re.object,

      /**
       * @ignore
       */
      value: re.oneOfType([re.arrayOf(re.string), re.number, re.string])
    } : void 0;
    var TextareaAutosize$1 = TextareaAutosize;

    // Supports determination of isControlled().
    // Controlled input accepts its current value as a prop.
    //
    // @see https://facebook.github.io/react/docs/forms.html#controlled-components
    // @param value
    // @returns {boolean} true if string (including '') or number (including zero)
    function hasValue(value) {
      return value != null && !(Array.isArray(value) && value.length === 0);
    } // Determine if field is empty or filled.
    // Response determines if label is presented above field or as placeholder.
    //
    // @param obj
    // @param SSR
    // @returns {boolean} False when not present or empty string.
    //                    True when any number or string with length.

    function isFilled(obj) {
      var SSR = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      return obj && (hasValue(obj.value) && obj.value !== '' || SSR && hasValue(obj.defaultValue) && obj.defaultValue !== '');
    } // Determine if an Input is adorned on start.
    // It's corresponding to the left with LTR.
    //
    // @param obj
    // @returns {boolean} False when no adornments.
    //                    True when adorned at the start.

    function isAdornedStart(obj) {
      return obj.startAdornment;
    }

    var styles$1s = function styles(theme) {
      var light = theme.palette.type === 'light';
      var placeholder = {
        color: 'currentColor',
        opacity: light ? 0.42 : 0.5,
        transition: theme.transitions.create('opacity', {
          duration: theme.transitions.duration.shorter
        })
      };
      var placeholderHidden = {
        opacity: '0 !important'
      };
      var placeholderVisible = {
        opacity: light ? 0.42 : 0.5
      };
      return {
        '@global': {
          '@keyframes mui-auto-fill': {},
          '@keyframes mui-auto-fill-cancel': {}
        },

        /* Styles applied to the root element. */
        root: _extends$3({}, theme.typography.body1, {
          color: theme.palette.text.primary,
          lineHeight: '1.1876em',
          // Reset (19px), match the native input line-height
          boxSizing: 'border-box',
          // Prevent padding issue with fullWidth.
          position: 'relative',
          cursor: 'text',
          display: 'inline-flex',
          alignItems: 'center',
          '&$disabled': {
            color: theme.palette.text.disabled,
            cursor: 'default'
          }
        }),

        /* Styles applied to the root element if the component is a descendant of `FormControl`. */
        formControl: {},

        /* Styles applied to the root element if the component is focused. */
        focused: {},

        /* Styles applied to the root element if `disabled={true}`. */
        disabled: {},

        /* Styles applied to the root element if `startAdornment` is provided. */
        adornedStart: {},

        /* Styles applied to the root element if `endAdornment` is provided. */
        adornedEnd: {},

        /* Pseudo-class applied to the root element if `error={true}`. */
        error: {},

        /* Styles applied to the `input` element if `margin="dense"`. */
        marginDense: {},

        /* Styles applied to the root element if `multiline={true}`. */
        multiline: {
          padding: "".concat(8 - 2, "px 0 ").concat(8 - 1, "px"),
          '&$marginDense': {
            paddingTop: 4 - 1
          }
        },

        /* Styles applied to the root element if the color is secondary. */
        colorSecondary: {},

        /* Styles applied to the root element if `fullWidth={true}`. */
        fullWidth: {
          width: '100%'
        },

        /* Styles applied to the `input` element. */
        input: {
          font: 'inherit',
          letterSpacing: 'inherit',
          color: 'currentColor',
          padding: "".concat(8 - 2, "px 0 ").concat(8 - 1, "px"),
          border: 0,
          boxSizing: 'content-box',
          background: 'none',
          height: '1.1876em',
          // Reset (19px), match the native input line-height
          margin: 0,
          // Reset for Safari
          WebkitTapHighlightColor: 'transparent',
          display: 'block',
          // Make the flex item shrink with Firefox
          minWidth: 0,
          width: '100%',
          // Fix IE 11 width issue
          animationName: 'mui-auto-fill-cancel',
          animationDuration: '10ms',
          '&::-webkit-input-placeholder': placeholder,
          '&::-moz-placeholder': placeholder,
          // Firefox 19+
          '&:-ms-input-placeholder': placeholder,
          // IE 11
          '&::-ms-input-placeholder': placeholder,
          // Edge
          '&:focus': {
            outline: 0
          },
          // Reset Firefox invalid required input style
          '&:invalid': {
            boxShadow: 'none'
          },
          '&::-webkit-search-decoration': {
            // Remove the padding when type=search.
            '-webkit-appearance': 'none'
          },
          // Show and hide the placeholder logic
          'label[data-shrink=false] + $formControl &': {
            '&::-webkit-input-placeholder': placeholderHidden,
            '&::-moz-placeholder': placeholderHidden,
            // Firefox 19+
            '&:-ms-input-placeholder': placeholderHidden,
            // IE 11
            '&::-ms-input-placeholder': placeholderHidden,
            // Edge
            '&:focus::-webkit-input-placeholder': placeholderVisible,
            '&:focus::-moz-placeholder': placeholderVisible,
            // Firefox 19+
            '&:focus:-ms-input-placeholder': placeholderVisible,
            // IE 11
            '&:focus::-ms-input-placeholder': placeholderVisible // Edge

          },
          '&$disabled': {
            opacity: 1 // Reset iOS opacity

          },
          '&:-webkit-autofill': {
            animationDuration: '5000s',
            animationName: 'mui-auto-fill'
          }
        },

        /* Styles applied to the `input` element if `margin="dense"`. */
        inputMarginDense: {
          paddingTop: 4 - 1
        },

        /* Styles applied to the `input` element if `multiline={true}`. */
        inputMultiline: {
          height: 'auto',
          resize: 'none',
          padding: 0
        },

        /* Styles applied to the `input` element if `type="search"`. */
        inputTypeSearch: {
          // Improve type search style.
          '-moz-appearance': 'textfield',
          '-webkit-appearance': 'textfield'
        },

        /* Styles applied to the `input` element if `startAdornment` is provided. */
        inputAdornedStart: {},

        /* Styles applied to the `input` element if `endAdornment` is provided. */
        inputAdornedEnd: {},

        /* Styles applied to the `input` element if `hiddenLabel={true}`. */
        inputHiddenLabel: {}
      };
    };
    var useEnhancedEffect$6 = typeof window === 'undefined' ? React__namespace.useEffect : React__namespace.useLayoutEffect;
    /**
     * `InputBase` contains as few styles as possible.
     * It aims to be a simple building block for creating an input.
     * It contains a load of style reset and some state logic.
     */

    var InputBase$1 = /*#__PURE__*/React__namespace.forwardRef(function InputBase(props, ref) {
      var ariaDescribedby = props['aria-describedby'],
          autoComplete = props.autoComplete,
          autoFocus = props.autoFocus,
          classes = props.classes,
          className = props.className;
          props.color;
          var defaultValue = props.defaultValue,
          disabled = props.disabled,
          endAdornment = props.endAdornment;
          props.error;
          var _props$fullWidth = props.fullWidth,
          fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,
          id = props.id,
          _props$inputComponent = props.inputComponent,
          inputComponent = _props$inputComponent === void 0 ? 'input' : _props$inputComponent,
          _props$inputProps = props.inputProps,
          inputPropsProp = _props$inputProps === void 0 ? {} : _props$inputProps,
          inputRefProp = props.inputRef;
          props.margin;
          var _props$multiline = props.multiline,
          multiline = _props$multiline === void 0 ? false : _props$multiline,
          name = props.name,
          onBlur = props.onBlur,
          onChange = props.onChange,
          onClick = props.onClick,
          onFocus = props.onFocus,
          onKeyDown = props.onKeyDown,
          onKeyUp = props.onKeyUp,
          placeholder = props.placeholder,
          readOnly = props.readOnly,
          renderSuffix = props.renderSuffix,
          rows = props.rows,
          rowsMax = props.rowsMax,
          rowsMin = props.rowsMin,
          maxRows = props.maxRows,
          minRows = props.minRows,
          startAdornment = props.startAdornment,
          _props$type = props.type,
          type = _props$type === void 0 ? 'text' : _props$type,
          valueProp = props.value,
          other = _objectWithoutProperties(props, ["aria-describedby", "autoComplete", "autoFocus", "classes", "className", "color", "defaultValue", "disabled", "endAdornment", "error", "fullWidth", "id", "inputComponent", "inputProps", "inputRef", "margin", "multiline", "name", "onBlur", "onChange", "onClick", "onFocus", "onKeyDown", "onKeyUp", "placeholder", "readOnly", "renderSuffix", "rows", "rowsMax", "rowsMin", "maxRows", "minRows", "startAdornment", "type", "value"]);

      var value = inputPropsProp.value != null ? inputPropsProp.value : valueProp;

      var _React$useRef = React__namespace.useRef(value != null),
          isControlled = _React$useRef.current;

      var inputRef = React__namespace.useRef();
      var handleInputRefWarning = React__namespace.useCallback(function (instance) {
        if (process.env.NODE_ENV !== 'production') {
          if (instance && instance.nodeName !== 'INPUT' && !instance.focus) {
            console.error(['Material-UI: You have provided a `inputComponent` to the input component', 'that does not correctly handle the `inputRef` prop.', 'Make sure the `inputRef` prop is called with a HTMLInputElement.'].join('\n'));
          }
        }
      }, []);
      var handleInputPropsRefProp = useForkRef(inputPropsProp.ref, handleInputRefWarning);
      var handleInputRefProp = useForkRef(inputRefProp, handleInputPropsRefProp);
      var handleInputRef = useForkRef(inputRef, handleInputRefProp);

      var _React$useState = React__namespace.useState(false),
          focused = _React$useState[0],
          setFocused = _React$useState[1];

      var muiFormControl = useFormControl$1();

      if (process.env.NODE_ENV !== 'production') {
        // eslint-disable-next-line react-hooks/rules-of-hooks
        React__namespace.useEffect(function () {
          if (muiFormControl) {
            return muiFormControl.registerEffect();
          }

          return undefined;
        }, [muiFormControl]);
      }

      var fcs = formControlState({
        props: props,
        muiFormControl: muiFormControl,
        states: ['color', 'disabled', 'error', 'hiddenLabel', 'margin', 'required', 'filled']
      });
      fcs.focused = muiFormControl ? muiFormControl.focused : focused; // The blur won't fire when the disabled state is set on a focused input.
      // We need to book keep the focused state manually.

      React__namespace.useEffect(function () {
        if (!muiFormControl && disabled && focused) {
          setFocused(false);

          if (onBlur) {
            onBlur();
          }
        }
      }, [muiFormControl, disabled, focused, onBlur]);
      var onFilled = muiFormControl && muiFormControl.onFilled;
      var onEmpty = muiFormControl && muiFormControl.onEmpty;
      var checkDirty = React__namespace.useCallback(function (obj) {
        if (isFilled(obj)) {
          if (onFilled) {
            onFilled();
          }
        } else if (onEmpty) {
          onEmpty();
        }
      }, [onFilled, onEmpty]);
      useEnhancedEffect$6(function () {
        if (isControlled) {
          checkDirty({
            value: value
          });
        }
      }, [value, checkDirty, isControlled]);

      var handleFocus = function handleFocus(event) {
        // Fix a bug with IE 11 where the focus/blur events are triggered
        // while the input is disabled.
        if (fcs.disabled) {
          event.stopPropagation();
          return;
        }

        if (onFocus) {
          onFocus(event);
        }

        if (inputPropsProp.onFocus) {
          inputPropsProp.onFocus(event);
        }

        if (muiFormControl && muiFormControl.onFocus) {
          muiFormControl.onFocus(event);
        } else {
          setFocused(true);
        }
      };

      var handleBlur = function handleBlur(event) {
        if (onBlur) {
          onBlur(event);
        }

        if (inputPropsProp.onBlur) {
          inputPropsProp.onBlur(event);
        }

        if (muiFormControl && muiFormControl.onBlur) {
          muiFormControl.onBlur(event);
        } else {
          setFocused(false);
        }
      };

      var handleChange = function handleChange(event) {
        if (!isControlled) {
          var element = event.target || inputRef.current;

          if (element == null) {
            throw new Error(process.env.NODE_ENV !== "production" ? "Material-UI: Expected valid input target. Did you use a custom `inputComponent` and forget to forward refs? See https://material-ui.com/r/input-component-ref-interface for more info." : formatMuiErrorMessage(1));
          }

          checkDirty({
            value: element.value
          });
        }

        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        if (inputPropsProp.onChange) {
          inputPropsProp.onChange.apply(inputPropsProp, [event].concat(args));
        } // Perform in the willUpdate


        if (onChange) {
          onChange.apply(void 0, [event].concat(args));
        }
      }; // Check the input state on mount, in case it was filled by the user
      // or auto filled by the browser before the hydration (for SSR).


      React__namespace.useEffect(function () {
        checkDirty(inputRef.current);
      }, []); // eslint-disable-line react-hooks/exhaustive-deps

      var handleClick = function handleClick(event) {
        if (inputRef.current && event.currentTarget === event.target) {
          inputRef.current.focus();
        }

        if (onClick) {
          onClick(event);
        }
      };

      var InputComponent = inputComponent;

      var inputProps = _extends$3({}, inputPropsProp, {
        ref: handleInputRef
      });

      if (typeof InputComponent !== 'string') {
        inputProps = _extends$3({
          // Rename ref to inputRef as we don't know the
          // provided `inputComponent` structure.
          inputRef: handleInputRef,
          type: type
        }, inputProps, {
          ref: null
        });
      } else if (multiline) {
        if (rows && !maxRows && !minRows && !rowsMax && !rowsMin) {
          InputComponent = 'textarea';
        } else {
          inputProps = _extends$3({
            minRows: rows || minRows,
            rowsMax: rowsMax,
            maxRows: maxRows
          }, inputProps);
          InputComponent = TextareaAutosize$1;
        }
      } else {
        inputProps = _extends$3({
          type: type
        }, inputProps);
      }

      var handleAutoFill = function handleAutoFill(event) {
        // Provide a fake value as Chrome might not let you access it for security reasons.
        checkDirty(event.animationName === 'mui-auto-fill-cancel' ? inputRef.current : {
          value: 'x'
        });
      };

      React__namespace.useEffect(function () {
        if (muiFormControl) {
          muiFormControl.setAdornedStart(Boolean(startAdornment));
        }
      }, [muiFormControl, startAdornment]);
      return /*#__PURE__*/React__namespace.createElement("div", _extends$3({
        className: r$1(classes.root, classes["color".concat(capitalize(fcs.color || 'primary'))], className, fcs.disabled && classes.disabled, fcs.error && classes.error, fullWidth && classes.fullWidth, fcs.focused && classes.focused, muiFormControl && classes.formControl, multiline && classes.multiline, startAdornment && classes.adornedStart, endAdornment && classes.adornedEnd, fcs.margin === 'dense' && classes.marginDense),
        onClick: handleClick,
        ref: ref
      }, other), startAdornment, /*#__PURE__*/React__namespace.createElement(FormControlContext$1.Provider, {
        value: null
      }, /*#__PURE__*/React__namespace.createElement(InputComponent, _extends$3({
        "aria-invalid": fcs.error,
        "aria-describedby": ariaDescribedby,
        autoComplete: autoComplete,
        autoFocus: autoFocus,
        defaultValue: defaultValue,
        disabled: fcs.disabled,
        id: id,
        onAnimationStart: handleAutoFill,
        name: name,
        placeholder: placeholder,
        readOnly: readOnly,
        required: fcs.required,
        rows: rows,
        value: value,
        onKeyDown: onKeyDown,
        onKeyUp: onKeyUp
      }, inputProps, {
        className: r$1(classes.input, inputPropsProp.className, fcs.disabled && classes.disabled, multiline && classes.inputMultiline, fcs.hiddenLabel && classes.inputHiddenLabel, startAdornment && classes.inputAdornedStart, endAdornment && classes.inputAdornedEnd, type === 'search' && classes.inputTypeSearch, fcs.margin === 'dense' && classes.inputMarginDense),
        onBlur: handleBlur,
        onChange: handleChange,
        onFocus: handleFocus
      }))), endAdornment, renderSuffix ? renderSuffix(_extends$3({}, fcs, {
        startAdornment: startAdornment
      })) : null);
    });
    process.env.NODE_ENV !== "production" ? InputBase$1.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * @ignore
       */
      'aria-describedby': re.string,

      /**
       * This prop helps users to fill forms faster, especially on mobile devices.
       * The name can be confusing, as it's more like an autofill.
       * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
       */
      autoComplete: re.string,

      /**
       * If `true`, the `input` element will be focused during the first mount.
       */
      autoFocus: re.bool,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * The color of the component. It supports those theme colors that make sense for this component.
       */
      color: re.oneOf(['primary', 'secondary']),

      /**
       * The default `input` element value. Use when the component is not controlled.
       */
      defaultValue: re.any,

      /**
       * If `true`, the `input` element will be disabled.
       */
      disabled: re.bool,

      /**
       * End `InputAdornment` for this component.
       */
      endAdornment: re.node,

      /**
       * If `true`, the input will indicate an error. This is normally obtained via context from
       * FormControl.
       */
      error: re.bool,

      /**
       * If `true`, the input will take up the full width of its container.
       */
      fullWidth: re.bool,

      /**
       * The id of the `input` element.
       */
      id: re.string,

      /**
       * The component used for the `input` element.
       * Either a string to use a HTML element or a component.
       */
      inputComponent: re.elementType,

      /**
       * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
       */
      inputProps: re.object,

      /**
       * Pass a ref to the `input` element.
       */
      inputRef: refType$1,

      /**
       * If `dense`, will adjust vertical spacing. This is normally obtained via context from
       * FormControl.
       */
      margin: re.oneOf(['dense', 'none']),

      /**
       * Maximum number of rows to display when multiline option is set to true.
       */
      maxRows: re.oneOfType([re.number, re.string]),

      /**
       * Minimum number of rows to display when multiline option is set to true.
       */
      minRows: re.oneOfType([re.number, re.string]),

      /**
       * If `true`, a textarea element will be rendered.
       */
      multiline: re.bool,

      /**
       * Name attribute of the `input` element.
       */
      name: re.string,

      /**
       * Callback fired when the input is blurred.
       *
       * Notice that the first argument (event) might be undefined.
       */
      onBlur: re.func,

      /**
       * Callback fired when the value is changed.
       *
       * @param {object} event The event source of the callback.
       * You can pull out the new value by accessing `event.target.value` (string).
       */
      onChange: re.func,

      /**
       * @ignore
       */
      onClick: re.func,

      /**
       * @ignore
       */
      onFocus: re.func,

      /**
       * @ignore
       */
      onKeyDown: re.func,

      /**
       * @ignore
       */
      onKeyUp: re.func,

      /**
       * The short hint displayed in the input before the user enters a value.
       */
      placeholder: re.string,

      /**
       * It prevents the user from changing the value of the field
       * (not from interacting with the field).
       */
      readOnly: re.bool,

      /**
       * @ignore
       */
      renderSuffix: re.func,

      /**
       * If `true`, the `input` element will be required.
       */
      required: re.bool,

      /**
       * Number of rows to display when multiline option is set to true.
       */
      rows: re.oneOfType([re.number, re.string]),

      /**
       * Maximum number of rows to display.
       * @deprecated Use `maxRows` instead.
       */
      rowsMax: re.oneOfType([re.number, re.string]),

      /**
       * Minimum number of rows to display.
       * @deprecated Use `minRows` instead.
       */
      rowsMin: re.oneOfType([re.number, re.string]),

      /**
       * Start `InputAdornment` for this component.
       */
      startAdornment: re.node,

      /**
       * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
       */
      type: re.string,

      /**
       * The value of the `input` element, required for a controlled component.
       */
      value: re.any
    } : void 0;
    var v = withStyles(styles$1s, {
      name: 'MuiInputBase'
    })(InputBase$1);

    var InputBase = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': v
    });

    var styles$1r = function styles(theme) {
      var light = theme.palette.type === 'light';
      var bottomLineColor = light ? 'rgba(0, 0, 0, 0.42)' : 'rgba(255, 255, 255, 0.7)';
      var backgroundColor = light ? 'rgba(0, 0, 0, 0.09)' : 'rgba(255, 255, 255, 0.09)';
      return {
        /* Styles applied to the root element. */
        root: {
          position: 'relative',
          backgroundColor: backgroundColor,
          borderTopLeftRadius: theme.shape.borderRadius,
          borderTopRightRadius: theme.shape.borderRadius,
          transition: theme.transitions.create('background-color', {
            duration: theme.transitions.duration.shorter,
            easing: theme.transitions.easing.easeOut
          }),
          '&:hover': {
            backgroundColor: light ? 'rgba(0, 0, 0, 0.13)' : 'rgba(255, 255, 255, 0.13)',
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
              backgroundColor: backgroundColor
            }
          },
          '&$focused': {
            backgroundColor: light ? 'rgba(0, 0, 0, 0.09)' : 'rgba(255, 255, 255, 0.09)'
          },
          '&$disabled': {
            backgroundColor: light ? 'rgba(0, 0, 0, 0.12)' : 'rgba(255, 255, 255, 0.12)'
          }
        },

        /* Styles applied to the root element if color secondary. */
        colorSecondary: {
          '&$underline:after': {
            borderBottomColor: theme.palette.secondary.main
          }
        },

        /* Styles applied to the root element if `disableUnderline={false}`. */
        underline: {
          '&:after': {
            borderBottom: "2px solid ".concat(theme.palette.primary.main),
            left: 0,
            bottom: 0,
            // Doing the other way around crash on IE 11 "''" https://github.com/cssinjs/jss/issues/242
            content: '""',
            position: 'absolute',
            right: 0,
            transform: 'scaleX(0)',
            transition: theme.transitions.create('transform', {
              duration: theme.transitions.duration.shorter,
              easing: theme.transitions.easing.easeOut
            }),
            pointerEvents: 'none' // Transparent to the hover style.

          },
          '&$focused:after': {
            transform: 'scaleX(1)'
          },
          '&$error:after': {
            borderBottomColor: theme.palette.error.main,
            transform: 'scaleX(1)' // error is always underlined in red

          },
          '&:before': {
            borderBottom: "1px solid ".concat(bottomLineColor),
            left: 0,
            bottom: 0,
            // Doing the other way around crash on IE 11 "''" https://github.com/cssinjs/jss/issues/242
            content: '"\\00a0"',
            position: 'absolute',
            right: 0,
            transition: theme.transitions.create('border-bottom-color', {
              duration: theme.transitions.duration.shorter
            }),
            pointerEvents: 'none' // Transparent to the hover style.

          },
          '&:hover:before': {
            borderBottom: "1px solid ".concat(theme.palette.text.primary)
          },
          '&$disabled:before': {
            borderBottomStyle: 'dotted'
          }
        },

        /* Pseudo-class applied to the root element if the component is focused. */
        focused: {},

        /* Pseudo-class applied to the root element if `disabled={true}`. */
        disabled: {},

        /* Styles applied to the root element if `startAdornment` is provided. */
        adornedStart: {
          paddingLeft: 12
        },

        /* Styles applied to the root element if `endAdornment` is provided. */
        adornedEnd: {
          paddingRight: 12
        },

        /* Pseudo-class applied to the root element if `error={true}`. */
        error: {},

        /* Styles applied to the `input` element if `margin="dense"`. */
        marginDense: {},

        /* Styles applied to the root element if `multiline={true}`. */
        multiline: {
          padding: '27px 12px 10px',
          '&$marginDense': {
            paddingTop: 23,
            paddingBottom: 6
          }
        },

        /* Styles applied to the `input` element. */
        input: {
          padding: '27px 12px 10px',
          '&:-webkit-autofill': {
            WebkitBoxShadow: theme.palette.type === 'light' ? null : '0 0 0 100px #266798 inset',
            WebkitTextFillColor: theme.palette.type === 'light' ? null : '#fff',
            caretColor: theme.palette.type === 'light' ? null : '#fff',
            borderTopLeftRadius: 'inherit',
            borderTopRightRadius: 'inherit'
          }
        },

        /* Styles applied to the `input` element if `margin="dense"`. */
        inputMarginDense: {
          paddingTop: 23,
          paddingBottom: 6
        },

        /* Styles applied to the `input` if in `<FormControl hiddenLabel />`. */
        inputHiddenLabel: {
          paddingTop: 18,
          paddingBottom: 19,
          '&$inputMarginDense': {
            paddingTop: 10,
            paddingBottom: 11
          }
        },

        /* Styles applied to the `input` element if `multiline={true}`. */
        inputMultiline: {
          padding: 0
        },

        /* Styles applied to the `input` element if `startAdornment` is provided. */
        inputAdornedStart: {
          paddingLeft: 0
        },

        /* Styles applied to the `input` element if `endAdornment` is provided. */
        inputAdornedEnd: {
          paddingRight: 0
        }
      };
    };
    var FilledInput = /*#__PURE__*/React__namespace.forwardRef(function FilledInput(props, ref) {
      var disableUnderline = props.disableUnderline,
          classes = props.classes,
          _props$fullWidth = props.fullWidth,
          fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,
          _props$inputComponent = props.inputComponent,
          inputComponent = _props$inputComponent === void 0 ? 'input' : _props$inputComponent,
          _props$multiline = props.multiline,
          multiline = _props$multiline === void 0 ? false : _props$multiline,
          _props$type = props.type,
          type = _props$type === void 0 ? 'text' : _props$type,
          other = _objectWithoutProperties(props, ["disableUnderline", "classes", "fullWidth", "inputComponent", "multiline", "type"]);

      return /*#__PURE__*/React__namespace.createElement(v, _extends$3({
        classes: _extends$3({}, classes, {
          root: r$1(classes.root, !disableUnderline && classes.underline),
          underline: null
        }),
        fullWidth: fullWidth,
        inputComponent: inputComponent,
        multiline: multiline,
        ref: ref,
        type: type
      }, other));
    });
    process.env.NODE_ENV !== "production" ? FilledInput.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * This prop helps users to fill forms faster, especially on mobile devices.
       * The name can be confusing, as it's more like an autofill.
       * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
       */
      autoComplete: re.string,

      /**
       * If `true`, the `input` element will be focused during the first mount.
       */
      autoFocus: re.bool,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * The color of the component. It supports those theme colors that make sense for this component.
       */
      color: re.oneOf(['primary', 'secondary']),

      /**
       * The default `input` element value. Use when the component is not controlled.
       */
      defaultValue: re.any,

      /**
       * If `true`, the `input` element will be disabled.
       */
      disabled: re.bool,

      /**
       * If `true`, the input will not have an underline.
       */
      disableUnderline: re.bool,

      /**
       * End `InputAdornment` for this component.
       */
      endAdornment: re.node,

      /**
       * If `true`, the input will indicate an error. This is normally obtained via context from
       * FormControl.
       */
      error: re.bool,

      /**
       * If `true`, the input will take up the full width of its container.
       */
      fullWidth: re.bool,

      /**
       * The id of the `input` element.
       */
      id: re.string,

      /**
       * The component used for the `input` element.
       * Either a string to use a HTML element or a component.
       */
      inputComponent: re.elementType,

      /**
       * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
       */
      inputProps: re.object,

      /**
       * Pass a ref to the `input` element.
       */
      inputRef: refType$1,

      /**
       * If `dense`, will adjust vertical spacing. This is normally obtained via context from
       * FormControl.
       */
      margin: re.oneOf(['dense', 'none']),

      /**
       * Maximum number of rows to display when multiline option is set to true.
       */
      maxRows: re.oneOfType([re.number, re.string]),

      /**
       * If `true`, a textarea element will be rendered.
       */
      multiline: re.bool,

      /**
       * Name attribute of the `input` element.
       */
      name: re.string,

      /**
       * Callback fired when the value is changed.
       *
       * @param {object} event The event source of the callback.
       * You can pull out the new value by accessing `event.target.value` (string).
       */
      onChange: re.func,

      /**
       * The short hint displayed in the input before the user enters a value.
       */
      placeholder: re.string,

      /**
       * It prevents the user from changing the value of the field
       * (not from interacting with the field).
       */
      readOnly: re.bool,

      /**
       * If `true`, the `input` element will be required.
       */
      required: re.bool,

      /**
       * Number of rows to display when multiline option is set to true.
       */
      rows: re.oneOfType([re.number, re.string]),

      /**
       * Start `InputAdornment` for this component.
       */
      startAdornment: re.node,

      /**
       * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
       */
      type: re.string,

      /**
       * The value of the `input` element, required for a controlled component.
       */
      value: re.any
    } : void 0;
    FilledInput.muiName = 'Input';
    var FilledInput$1 = withStyles(styles$1r, {
      name: 'MuiFilledInput'
    })(FilledInput);

    var styles$1q = {
      /* Styles applied to the root element. */
      root: {
        display: 'inline-flex',
        flexDirection: 'column',
        position: 'relative',
        // Reset fieldset default style.
        minWidth: 0,
        padding: 0,
        margin: 0,
        border: 0,
        verticalAlign: 'top' // Fix alignment issue on Safari.

      },

      /* Styles applied to the root element if `margin="normal"`. */
      marginNormal: {
        marginTop: 16,
        marginBottom: 8
      },

      /* Styles applied to the root element if `margin="dense"`. */
      marginDense: {
        marginTop: 8,
        marginBottom: 4
      },

      /* Styles applied to the root element if `fullWidth={true}`. */
      fullWidth: {
        width: '100%'
      }
    };
    /**
     * Provides context such as filled/focused/error/required for form inputs.
     * Relying on the context provides high flexibility and ensures that the state always stays
     * consistent across the children of the `FormControl`.
     * This context is used by the following components:
     *
     *  - FormLabel
     *  - FormHelperText
     *  - Input
     *  - InputLabel
     *
     * You can find one composition example below and more going to [the demos](/components/text-fields/#components).
     *
     * ```jsx
     * <FormControl>
     *   <InputLabel htmlFor="my-input">Email address</InputLabel>
     *   <Input id="my-input" aria-describedby="my-helper-text" />
     *   <FormHelperText id="my-helper-text">We'll never share your email.</FormHelperText>
     * </FormControl>
     * ```
     *
     * ⚠️Only one input can be used within a FormControl.
     */

    var FormControl = /*#__PURE__*/React__namespace.forwardRef(function FormControl(props, ref) {
      var children = props.children,
          classes = props.classes,
          className = props.className,
          _props$color = props.color,
          color = _props$color === void 0 ? 'primary' : _props$color,
          _props$component = props.component,
          Component = _props$component === void 0 ? 'div' : _props$component,
          _props$disabled = props.disabled,
          disabled = _props$disabled === void 0 ? false : _props$disabled,
          _props$error = props.error,
          error = _props$error === void 0 ? false : _props$error,
          _props$fullWidth = props.fullWidth,
          fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,
          visuallyFocused = props.focused,
          _props$hiddenLabel = props.hiddenLabel,
          hiddenLabel = _props$hiddenLabel === void 0 ? false : _props$hiddenLabel,
          _props$margin = props.margin,
          margin = _props$margin === void 0 ? 'none' : _props$margin,
          _props$required = props.required,
          required = _props$required === void 0 ? false : _props$required,
          size = props.size,
          _props$variant = props.variant,
          variant = _props$variant === void 0 ? 'standard' : _props$variant,
          other = _objectWithoutProperties(props, ["children", "classes", "className", "color", "component", "disabled", "error", "fullWidth", "focused", "hiddenLabel", "margin", "required", "size", "variant"]);

      var _React$useState = React__namespace.useState(function () {
        // We need to iterate through the children and find the Input in order
        // to fully support server-side rendering.
        var initialAdornedStart = false;

        if (children) {
          React__namespace.Children.forEach(children, function (child) {
            if (!isMuiElement(child, ['Input', 'Select'])) {
              return;
            }

            var input = isMuiElement(child, ['Select']) ? child.props.input : child;

            if (input && isAdornedStart(input.props)) {
              initialAdornedStart = true;
            }
          });
        }

        return initialAdornedStart;
      }),
          adornedStart = _React$useState[0],
          setAdornedStart = _React$useState[1];

      var _React$useState2 = React__namespace.useState(function () {
        // We need to iterate through the children and find the Input in order
        // to fully support server-side rendering.
        var initialFilled = false;

        if (children) {
          React__namespace.Children.forEach(children, function (child) {
            if (!isMuiElement(child, ['Input', 'Select'])) {
              return;
            }

            if (isFilled(child.props, true)) {
              initialFilled = true;
            }
          });
        }

        return initialFilled;
      }),
          filled = _React$useState2[0],
          setFilled = _React$useState2[1];

      var _React$useState3 = React__namespace.useState(false),
          _focused = _React$useState3[0],
          setFocused = _React$useState3[1];

      var focused = visuallyFocused !== undefined ? visuallyFocused : _focused;

      if (disabled && focused) {
        setFocused(false);
      }

      var registerEffect;

      if (process.env.NODE_ENV !== 'production') {
        // eslint-disable-next-line react-hooks/rules-of-hooks
        var registeredInput = React__namespace.useRef(false);

        registerEffect = function registerEffect() {
          if (registeredInput.current) {
            console.error(['Material-UI: There are multiple InputBase components inside a FormControl.', 'This is not supported. It might cause infinite rendering loops.', 'Only use one InputBase.'].join('\n'));
          }

          registeredInput.current = true;
          return function () {
            registeredInput.current = false;
          };
        };
      }

      var onFilled = React__namespace.useCallback(function () {
        setFilled(true);
      }, []);
      var onEmpty = React__namespace.useCallback(function () {
        setFilled(false);
      }, []);
      var childContext = {
        adornedStart: adornedStart,
        setAdornedStart: setAdornedStart,
        color: color,
        disabled: disabled,
        error: error,
        filled: filled,
        focused: focused,
        fullWidth: fullWidth,
        hiddenLabel: hiddenLabel,
        margin: (size === 'small' ? 'dense' : undefined) || margin,
        onBlur: function onBlur() {
          setFocused(false);
        },
        onEmpty: onEmpty,
        onFilled: onFilled,
        onFocus: function onFocus() {
          setFocused(true);
        },
        registerEffect: registerEffect,
        required: required,
        variant: variant
      };
      return /*#__PURE__*/React__namespace.createElement(FormControlContext$1.Provider, {
        value: childContext
      }, /*#__PURE__*/React__namespace.createElement(Component, _extends$3({
        className: r$1(classes.root, className, margin !== 'none' && classes["margin".concat(capitalize(margin))], fullWidth && classes.fullWidth),
        ref: ref
      }, other), children));
    });
    process.env.NODE_ENV !== "production" ? FormControl.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * The contents of the form control.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * The color of the component. It supports those theme colors that make sense for this component.
       */
      color: re.oneOf(['primary', 'secondary']),

      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: re
      /* @typescript-to-proptypes-ignore */
      .elementType,

      /**
       * If `true`, the label, input and helper text should be displayed in a disabled state.
       */
      disabled: re.bool,

      /**
       * If `true`, the label should be displayed in an error state.
       */
      error: re.bool,

      /**
       * If `true`, the component will be displayed in focused state.
       */
      focused: re.bool,

      /**
       * If `true`, the component will take up the full width of its container.
       */
      fullWidth: re.bool,

      /**
       * If `true`, the label will be hidden.
       * This is used to increase density for a `FilledInput`.
       * Be sure to add `aria-label` to the `input` element.
       */
      hiddenLabel: re.bool,

      /**
       * If `dense` or `normal`, will adjust vertical spacing of this and contained components.
       */
      margin: re.oneOf(['dense', 'none', 'normal']),

      /**
       * If `true`, the label will indicate that the input is required.
       */
      required: re.bool,

      /**
       * The size of the text field.
       */
      size: re.oneOf(['medium', 'small']),

      /**
       * The variant to use.
       */
      variant: re.oneOf(['filled', 'outlined', 'standard'])
    } : void 0;
    var T = withStyles(styles$1q, {
      name: 'MuiFormControl'
    })(FormControl);

    var styles$1p = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          display: 'inline-flex',
          alignItems: 'center',
          cursor: 'pointer',
          // For correct alignment with the text.
          verticalAlign: 'middle',
          WebkitTapHighlightColor: 'transparent',
          marginLeft: -11,
          marginRight: 16,
          // used for row presentation of radio/checkbox
          '&$disabled': {
            cursor: 'default'
          }
        },

        /* Styles applied to the root element if `labelPlacement="start"`. */
        labelPlacementStart: {
          flexDirection: 'row-reverse',
          marginLeft: 16,
          // used for row presentation of radio/checkbox
          marginRight: -11
        },

        /* Styles applied to the root element if `labelPlacement="top"`. */
        labelPlacementTop: {
          flexDirection: 'column-reverse',
          marginLeft: 16
        },

        /* Styles applied to the root element if `labelPlacement="bottom"`. */
        labelPlacementBottom: {
          flexDirection: 'column',
          marginLeft: 16
        },

        /* Pseudo-class applied to the root element if `disabled={true}`. */
        disabled: {},

        /* Styles applied to the label's Typography component. */
        label: {
          '&$disabled': {
            color: theme.palette.text.disabled
          }
        }
      };
    };
    /**
     * Drop in replacement of the `Radio`, `Switch` and `Checkbox` component.
     * Use this component if you want to display an extra label.
     */

    var FormControlLabel = /*#__PURE__*/React__namespace.forwardRef(function FormControlLabel(props, ref) {
      props.checked;
          var classes = props.classes,
          className = props.className,
          control = props.control,
          disabledProp = props.disabled;
          props.inputRef;
          var label = props.label,
          _props$labelPlacement = props.labelPlacement,
          labelPlacement = _props$labelPlacement === void 0 ? 'end' : _props$labelPlacement;
          props.name;
          props.onChange;
          props.value;
          var other = _objectWithoutProperties(props, ["checked", "classes", "className", "control", "disabled", "inputRef", "label", "labelPlacement", "name", "onChange", "value"]);

      var muiFormControl = useFormControl();
      var disabled = disabledProp;

      if (typeof disabled === 'undefined' && typeof control.props.disabled !== 'undefined') {
        disabled = control.props.disabled;
      }

      if (typeof disabled === 'undefined' && muiFormControl) {
        disabled = muiFormControl.disabled;
      }

      var controlProps = {
        disabled: disabled
      };
      ['checked', 'name', 'onChange', 'value', 'inputRef'].forEach(function (key) {
        if (typeof control.props[key] === 'undefined' && typeof props[key] !== 'undefined') {
          controlProps[key] = props[key];
        }
      });
      return /*#__PURE__*/React__namespace.createElement("label", _extends$3({
        className: r$1(classes.root, className, labelPlacement !== 'end' && classes["labelPlacement".concat(capitalize(labelPlacement))], disabled && classes.disabled),
        ref: ref
      }, other), /*#__PURE__*/React__namespace.cloneElement(control, controlProps), /*#__PURE__*/React__namespace.createElement(Typography$2, {
        component: "span",
        className: r$1(classes.label, disabled && classes.disabled)
      }, label));
    });
    process.env.NODE_ENV !== "production" ? FormControlLabel.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * If `true`, the component appears selected.
       */
      checked: re.bool,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * A control element. For instance, it can be be a `Radio`, a `Switch` or a `Checkbox`.
       */
      control: re.element.isRequired,

      /**
       * If `true`, the control will be disabled.
       */
      disabled: re.bool,

      /**
       * Pass a ref to the `input` element.
       */
      inputRef: refType$1,

      /**
       * The text to be used in an enclosing label element.
       */
      label: re.node,

      /**
       * The position of the label.
       */
      labelPlacement: re.oneOf(['bottom', 'end', 'start', 'top']),

      /**
       * @ignore
       */
      name: re.string,

      /**
       * Callback fired when the state is changed.
       *
       * @param {object} event The event source of the callback.
       * You can pull out the new checked state by accessing `event.target.checked` (boolean).
       */
      onChange: re.func,

      /**
       * The value of the component.
       */
      value: re.any
    } : void 0;
    var FormControlLabel$1 = withStyles(styles$1p, {
      name: 'MuiFormControlLabel'
    })(FormControlLabel);

    var styles$1o = {
      /* Styles applied to the root element. */
      root: {
        display: 'flex',
        flexDirection: 'column',
        flexWrap: 'wrap'
      },

      /* Styles applied to the root element if `row={true}`. */
      row: {
        flexDirection: 'row'
      }
    };
    /**
     * `FormGroup` wraps controls such as `Checkbox` and `Switch`.
     * It provides compact row layout.
     * For the `Radio`, you should be using the `RadioGroup` component instead of this one.
     */

    var FormGroup = /*#__PURE__*/React__namespace.forwardRef(function FormGroup(props, ref) {
      var classes = props.classes,
          className = props.className,
          _props$row = props.row,
          row = _props$row === void 0 ? false : _props$row,
          other = _objectWithoutProperties(props, ["classes", "className", "row"]);

      return /*#__PURE__*/React__namespace.createElement("div", _extends$3({
        className: r$1(classes.root, className, row && classes.row),
        ref: ref
      }, other));
    });
    process.env.NODE_ENV !== "production" ? FormGroup.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * The content of the component.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * Display group of elements in a compact row.
       */
      row: re.bool
    } : void 0;
    var FormGroup$1 = withStyles(styles$1o, {
      name: 'MuiFormGroup'
    })(FormGroup);

    var styles$1n = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: _extends$3({
          color: theme.palette.text.secondary
        }, theme.typography.caption, {
          textAlign: 'left',
          marginTop: 3,
          margin: 0,
          '&$disabled': {
            color: theme.palette.text.disabled
          },
          '&$error': {
            color: theme.palette.error.main
          }
        }),

        /* Pseudo-class applied to the root element if `error={true}`. */
        error: {},

        /* Pseudo-class applied to the root element if `disabled={true}`. */
        disabled: {},

        /* Styles applied to the root element if `margin="dense"`. */
        marginDense: {
          marginTop: 4
        },

        /* Styles applied to the root element if `variant="filled"` or `variant="outlined"`. */
        contained: {
          marginLeft: 14,
          marginRight: 14
        },

        /* Pseudo-class applied to the root element if `focused={true}`. */
        focused: {},

        /* Pseudo-class applied to the root element if `filled={true}`. */
        filled: {},

        /* Pseudo-class applied to the root element if `required={true}`. */
        required: {}
      };
    };
    var FormHelperText = /*#__PURE__*/React__namespace.forwardRef(function FormHelperText(props, ref) {
      var children = props.children,
          classes = props.classes,
          className = props.className,
          _props$component = props.component,
          Component = _props$component === void 0 ? 'p' : _props$component;
          props.disabled;
          props.error;
          props.filled;
          props.focused;
          props.margin;
          props.required;
          props.variant;
          var other = _objectWithoutProperties(props, ["children", "classes", "className", "component", "disabled", "error", "filled", "focused", "margin", "required", "variant"]);

      var muiFormControl = useFormControl();
      var fcs = formControlState({
        props: props,
        muiFormControl: muiFormControl,
        states: ['variant', 'margin', 'disabled', 'error', 'filled', 'focused', 'required']
      });
      return /*#__PURE__*/React__namespace.createElement(Component, _extends$3({
        className: r$1(classes.root, (fcs.variant === 'filled' || fcs.variant === 'outlined') && classes.contained, className, fcs.disabled && classes.disabled, fcs.error && classes.error, fcs.filled && classes.filled, fcs.focused && classes.focused, fcs.required && classes.required, fcs.margin === 'dense' && classes.marginDense),
        ref: ref
      }, other), children === ' ' ?
      /*#__PURE__*/
      // eslint-disable-next-line react/no-danger
      React__namespace.createElement("span", {
        dangerouslySetInnerHTML: {
          __html: '&#8203;'
        }
      }) : children);
    });
    process.env.NODE_ENV !== "production" ? FormHelperText.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * The content of the component.
       *
       * If `' '` is provided, the component reserves one line height for displaying a future message.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: re
      /* @typescript-to-proptypes-ignore */
      .elementType,

      /**
       * If `true`, the helper text should be displayed in a disabled state.
       */
      disabled: re.bool,

      /**
       * If `true`, helper text should be displayed in an error state.
       */
      error: re.bool,

      /**
       * If `true`, the helper text should use filled classes key.
       */
      filled: re.bool,

      /**
       * If `true`, the helper text should use focused classes key.
       */
      focused: re.bool,

      /**
       * If `dense`, will adjust vertical spacing. This is normally obtained via context from
       * FormControl.
       */
      margin: re.oneOf(['dense']),

      /**
       * If `true`, the helper text should use required classes key.
       */
      required: re.bool,

      /**
       * The variant to use.
       */
      variant: re.oneOf(['filled', 'outlined', 'standard'])
    } : void 0;
    var FormHelperText$1 = withStyles(styles$1n, {
      name: 'MuiFormHelperText'
    })(FormHelperText);

    var styles$1m = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: _extends$3({
          color: theme.palette.text.secondary
        }, theme.typography.body1, {
          lineHeight: 1,
          padding: 0,
          '&$focused': {
            color: theme.palette.primary.main
          },
          '&$disabled': {
            color: theme.palette.text.disabled
          },
          '&$error': {
            color: theme.palette.error.main
          }
        }),

        /* Styles applied to the root element if the color is secondary. */
        colorSecondary: {
          '&$focused': {
            color: theme.palette.secondary.main
          }
        },

        /* Pseudo-class applied to the root element if `focused={true}`. */
        focused: {},

        /* Pseudo-class applied to the root element if `disabled={true}`. */
        disabled: {},

        /* Pseudo-class applied to the root element if `error={true}`. */
        error: {},

        /* Pseudo-class applied to the root element if `filled={true}`. */
        filled: {},

        /* Pseudo-class applied to the root element if `required={true}`. */
        required: {},

        /* Styles applied to the asterisk element. */
        asterisk: {
          '&$error': {
            color: theme.palette.error.main
          }
        }
      };
    };
    var FormLabel = /*#__PURE__*/React__namespace.forwardRef(function FormLabel(props, ref) {
      var children = props.children,
          classes = props.classes,
          className = props.className;
          props.color;
          var _props$component = props.component,
          Component = _props$component === void 0 ? 'label' : _props$component;
          props.disabled;
          props.error;
          props.filled;
          props.focused;
          props.required;
          var other = _objectWithoutProperties(props, ["children", "classes", "className", "color", "component", "disabled", "error", "filled", "focused", "required"]);

      var muiFormControl = useFormControl();
      var fcs = formControlState({
        props: props,
        muiFormControl: muiFormControl,
        states: ['color', 'required', 'focused', 'disabled', 'error', 'filled']
      });
      return /*#__PURE__*/React__namespace.createElement(Component, _extends$3({
        className: r$1(classes.root, classes["color".concat(capitalize(fcs.color || 'primary'))], className, fcs.disabled && classes.disabled, fcs.error && classes.error, fcs.filled && classes.filled, fcs.focused && classes.focused, fcs.required && classes.required),
        ref: ref
      }, other), children, fcs.required && /*#__PURE__*/React__namespace.createElement("span", {
        "aria-hidden": true,
        className: r$1(classes.asterisk, fcs.error && classes.error)
      }, "\u2009", '*'));
    });
    process.env.NODE_ENV !== "production" ? FormLabel.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * The content of the component.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * The color of the component. It supports those theme colors that make sense for this component.
       */
      color: re.oneOf(['primary', 'secondary']),

      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: re
      /* @typescript-to-proptypes-ignore */
      .elementType,

      /**
       * If `true`, the label should be displayed in a disabled state.
       */
      disabled: re.bool,

      /**
       * If `true`, the label should be displayed in an error state.
       */
      error: re.bool,

      /**
       * If `true`, the label should use filled classes key.
       */
      filled: re.bool,

      /**
       * If `true`, the input of this label is focused (used by `FormGroup` components).
       */
      focused: re.bool,

      /**
       * If `true`, the label will indicate that the input is required.
       */
      required: re.bool
    } : void 0;
    var FormLabel$1 = withStyles(styles$1m, {
      name: 'MuiFormLabel'
    })(FormLabel);

    var SPACINGS$1 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
    var GRID_SIZES = ['auto', true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];

    function generateGrid(globalStyles, theme, breakpoint) {
      var styles = {};
      GRID_SIZES.forEach(function (size) {
        var key = "grid-".concat(breakpoint, "-").concat(size);

        if (size === true) {
          // For the auto layouting
          styles[key] = {
            flexBasis: 0,
            flexGrow: 1,
            maxWidth: '100%'
          };
          return;
        }

        if (size === 'auto') {
          styles[key] = {
            flexBasis: 'auto',
            flexGrow: 0,
            maxWidth: 'none'
          };
          return;
        } // Keep 7 significant numbers.


        var width = "".concat(Math.round(size / 12 * 10e7) / 10e5, "%"); // Close to the bootstrap implementation:
        // https://github.com/twbs/bootstrap/blob/8fccaa2439e97ec72a4b7dc42ccc1f649790adb0/scss/mixins/_grid.scss#L41

        styles[key] = {
          flexBasis: width,
          flexGrow: 0,
          maxWidth: width
        };
      }); // No need for a media query for the first size.

      if (breakpoint === 'xs') {
        _extends$3(globalStyles, styles);
      } else {
        globalStyles[theme.breakpoints.up(breakpoint)] = styles;
      }
    }

    function getOffset(val) {
      var div = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      var parse = parseFloat(val);
      return "".concat(parse / div).concat(String(val).replace(String(parse), '') || 'px');
    }

    function generateGutter(theme, breakpoint) {
      var styles = {};
      SPACINGS$1.forEach(function (spacing) {
        var themeSpacing = theme.spacing(spacing);

        if (themeSpacing === 0) {
          return;
        }

        styles["spacing-".concat(breakpoint, "-").concat(spacing)] = {
          margin: "-".concat(getOffset(themeSpacing, 2)),
          width: "calc(100% + ".concat(getOffset(themeSpacing), ")"),
          '& > $item': {
            padding: getOffset(themeSpacing, 2)
          }
        };
      });
      return styles;
    } // Default CSS values
    // flex: '0 1 auto',
    // flexDirection: 'row',
    // alignItems: 'flex-start',
    // flexWrap: 'nowrap',
    // justifyContent: 'flex-start',


    var styles$1l = function styles(theme) {
      return _extends$3({
        /* Styles applied to the root element. */
        root: {},

        /* Styles applied to the root element if `container={true}`. */
        container: {
          boxSizing: 'border-box',
          display: 'flex',
          flexWrap: 'wrap',
          width: '100%'
        },

        /* Styles applied to the root element if `item={true}`. */
        item: {
          boxSizing: 'border-box',
          margin: '0' // For instance, it's useful when used with a `figure` element.

        },

        /* Styles applied to the root element if `zeroMinWidth={true}`. */
        zeroMinWidth: {
          minWidth: 0
        },

        /* Styles applied to the root element if `direction="column"`. */
        'direction-xs-column': {
          flexDirection: 'column'
        },

        /* Styles applied to the root element if `direction="column-reverse"`. */
        'direction-xs-column-reverse': {
          flexDirection: 'column-reverse'
        },

        /* Styles applied to the root element if `direction="row-reverse"`. */
        'direction-xs-row-reverse': {
          flexDirection: 'row-reverse'
        },

        /* Styles applied to the root element if `wrap="nowrap"`. */
        'wrap-xs-nowrap': {
          flexWrap: 'nowrap'
        },

        /* Styles applied to the root element if `wrap="reverse"`. */
        'wrap-xs-wrap-reverse': {
          flexWrap: 'wrap-reverse'
        },

        /* Styles applied to the root element if `alignItems="center"`. */
        'align-items-xs-center': {
          alignItems: 'center'
        },

        /* Styles applied to the root element if `alignItems="flex-start"`. */
        'align-items-xs-flex-start': {
          alignItems: 'flex-start'
        },

        /* Styles applied to the root element if `alignItems="flex-end"`. */
        'align-items-xs-flex-end': {
          alignItems: 'flex-end'
        },

        /* Styles applied to the root element if `alignItems="baseline"`. */
        'align-items-xs-baseline': {
          alignItems: 'baseline'
        },

        /* Styles applied to the root element if `alignContent="center"`. */
        'align-content-xs-center': {
          alignContent: 'center'
        },

        /* Styles applied to the root element if `alignContent="flex-start"`. */
        'align-content-xs-flex-start': {
          alignContent: 'flex-start'
        },

        /* Styles applied to the root element if `alignContent="flex-end"`. */
        'align-content-xs-flex-end': {
          alignContent: 'flex-end'
        },

        /* Styles applied to the root element if `alignContent="space-between"`. */
        'align-content-xs-space-between': {
          alignContent: 'space-between'
        },

        /* Styles applied to the root element if `alignContent="space-around"`. */
        'align-content-xs-space-around': {
          alignContent: 'space-around'
        },

        /* Styles applied to the root element if `justifyContent="center"`. */
        'justify-content-xs-center': {
          justifyContent: 'center'
        },

        /* Styles applied to the root element if `justifyContent="flex-end"`. */
        'justify-content-xs-flex-end': {
          justifyContent: 'flex-end'
        },

        /* Styles applied to the root element if `justifyContent="space-between"`. */
        'justify-content-xs-space-between': {
          justifyContent: 'space-between'
        },

        /* Styles applied to the root element if `justifyContent="space-around"`. */
        'justify-content-xs-space-around': {
          justifyContent: 'space-around'
        },

        /* Styles applied to the root element if `justifyContent="space-evenly"`. */
        'justify-content-xs-space-evenly': {
          justifyContent: 'space-evenly'
        }
      }, generateGutter(theme, 'xs'), theme.breakpoints.keys.reduce(function (accumulator, key) {
        // Use side effect over immutability for better performance.
        generateGrid(accumulator, theme, key);
        return accumulator;
      }, {}));
    };
    var Grid = /*#__PURE__*/React__namespace.forwardRef(function Grid(props, ref) {
      var _props$alignContent = props.alignContent,
          alignContent = _props$alignContent === void 0 ? 'stretch' : _props$alignContent,
          _props$alignItems = props.alignItems,
          alignItems = _props$alignItems === void 0 ? 'stretch' : _props$alignItems,
          classes = props.classes,
          classNameProp = props.className,
          _props$component = props.component,
          Component = _props$component === void 0 ? 'div' : _props$component,
          _props$container = props.container,
          container = _props$container === void 0 ? false : _props$container,
          _props$direction = props.direction,
          direction = _props$direction === void 0 ? 'row' : _props$direction,
          _props$item = props.item,
          item = _props$item === void 0 ? false : _props$item,
          justify = props.justify,
          _props$justifyContent = props.justifyContent,
          justifyContent = _props$justifyContent === void 0 ? 'flex-start' : _props$justifyContent,
          _props$lg = props.lg,
          lg = _props$lg === void 0 ? false : _props$lg,
          _props$md = props.md,
          md = _props$md === void 0 ? false : _props$md,
          _props$sm = props.sm,
          sm = _props$sm === void 0 ? false : _props$sm,
          _props$spacing = props.spacing,
          spacing = _props$spacing === void 0 ? 0 : _props$spacing,
          _props$wrap = props.wrap,
          wrap = _props$wrap === void 0 ? 'wrap' : _props$wrap,
          _props$xl = props.xl,
          xl = _props$xl === void 0 ? false : _props$xl,
          _props$xs = props.xs,
          xs = _props$xs === void 0 ? false : _props$xs,
          _props$zeroMinWidth = props.zeroMinWidth,
          zeroMinWidth = _props$zeroMinWidth === void 0 ? false : _props$zeroMinWidth,
          other = _objectWithoutProperties(props, ["alignContent", "alignItems", "classes", "className", "component", "container", "direction", "item", "justify", "justifyContent", "lg", "md", "sm", "spacing", "wrap", "xl", "xs", "zeroMinWidth"]);

      var className = r$1(classes.root, classNameProp, container && [classes.container, spacing !== 0 && classes["spacing-xs-".concat(String(spacing))]], item && classes.item, zeroMinWidth && classes.zeroMinWidth, direction !== 'row' && classes["direction-xs-".concat(String(direction))], wrap !== 'wrap' && classes["wrap-xs-".concat(String(wrap))], alignItems !== 'stretch' && classes["align-items-xs-".concat(String(alignItems))], alignContent !== 'stretch' && classes["align-content-xs-".concat(String(alignContent))], (justify || justifyContent) !== 'flex-start' && classes["justify-content-xs-".concat(String(justify || justifyContent))], xs !== false && classes["grid-xs-".concat(String(xs))], sm !== false && classes["grid-sm-".concat(String(sm))], md !== false && classes["grid-md-".concat(String(md))], lg !== false && classes["grid-lg-".concat(String(lg))], xl !== false && classes["grid-xl-".concat(String(xl))]);
      return /*#__PURE__*/React__namespace.createElement(Component, _extends$3({
        className: className,
        ref: ref
      }, other));
    });
    process.env.NODE_ENV !== "production" ? Grid.propTypes = {
      /**
       * Defines the `align-content` style property.
       * It's applied for all screen sizes.
       */
      alignContent: re.oneOf(['stretch', 'center', 'flex-start', 'flex-end', 'space-between', 'space-around']),

      /**
       * Defines the `align-items` style property.
       * It's applied for all screen sizes.
       */
      alignItems: re.oneOf(['flex-start', 'center', 'flex-end', 'stretch', 'baseline']),

      /**
       * The content of the component.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object.isRequired,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: re
      /* @typescript-to-proptypes-ignore */
      .elementType,

      /**
       * If `true`, the component will have the flex *container* behavior.
       * You should be wrapping *items* with a *container*.
       */
      container: re.bool,

      /**
       * Defines the `flex-direction` style property.
       * It is applied for all screen sizes.
       */
      direction: re.oneOf(['row', 'row-reverse', 'column', 'column-reverse']),

      /**
       * If `true`, the component will have the flex *item* behavior.
       * You should be wrapping *items* with a *container*.
       */
      item: re.bool,

      /**
       * Defines the `justify-content` style property.
       * It is applied for all screen sizes.
       * @deprecated Use `justifyContent` instead, the prop was renamed
       */
      justify: deprecatedPropType(re.oneOf(['flex-start', 'center', 'flex-end', 'space-between', 'space-around', 'space-evenly']), 'Use `justifyContent` instead, the prop was renamed.'),

      /**
       * Defines the `justify-content` style property.
       * It is applied for all screen sizes.
       */
      justifyContent: re.oneOf(['flex-start', 'center', 'flex-end', 'space-between', 'space-around', 'space-evenly']),

      /**
       * Defines the number of grids the component is going to use.
       * It's applied for the `lg` breakpoint and wider screens if not overridden.
       */
      lg: re.oneOf([false, 'auto', true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]),

      /**
       * Defines the number of grids the component is going to use.
       * It's applied for the `md` breakpoint and wider screens if not overridden.
       */
      md: re.oneOf([false, 'auto', true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]),

      /**
       * Defines the number of grids the component is going to use.
       * It's applied for the `sm` breakpoint and wider screens if not overridden.
       */
      sm: re.oneOf([false, 'auto', true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]),

      /**
       * Defines the space between the type `item` component.
       * It can only be used on a type `container` component.
       */
      spacing: re.oneOf(SPACINGS$1),

      /**
       * Defines the `flex-wrap` style property.
       * It's applied for all screen sizes.
       */
      wrap: re.oneOf(['nowrap', 'wrap', 'wrap-reverse']),

      /**
       * Defines the number of grids the component is going to use.
       * It's applied for the `xl` breakpoint and wider screens.
       */
      xl: re.oneOf([false, 'auto', true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]),

      /**
       * Defines the number of grids the component is going to use.
       * It's applied for all the screen sizes with the lowest priority.
       */
      xs: re.oneOf([false, 'auto', true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]),

      /**
       * If `true`, it sets `min-width: 0` on the item.
       * Refer to the limitations section of the documentation to better understand the use case.
       */
      zeroMinWidth: re.bool
    } : void 0;
    var StyledGrid = withStyles(styles$1l, {
      name: 'MuiGrid'
    })(Grid);

    if (process.env.NODE_ENV !== 'production') {
      var requireProp = requirePropFactory('Grid');
      StyledGrid.propTypes = _extends$3({}, StyledGrid.propTypes, {
        alignContent: requireProp('container'),
        alignItems: requireProp('container'),
        direction: requireProp('container'),
        justifyContent: requireProp('container'),
        lg: requireProp('item'),
        md: requireProp('item'),
        sm: requireProp('item'),
        spacing: requireProp('container'),
        wrap: requireProp('container'),
        xs: requireProp('item'),
        zeroMinWidth: requireProp('item')
      });
    }

    var Grid$1 = StyledGrid;

    var styles$1k = {
      /* Styles applied to the root element. */
      root: {
        display: 'flex',
        flexWrap: 'wrap',
        overflowY: 'auto',
        listStyle: 'none',
        padding: 0,
        WebkitOverflowScrolling: 'touch' // Add iOS momentum scrolling.

      }
    };
    var warnedOnce$4 = false;
    /**
     * ⚠️ The GridList component was renamed to ImageList to align with the current Material Design naming.
     *
     * You should use `import { ImageList } from '@material-ui/core'`
     * or `import ImageList from '@material-ui/core/ImageList'`.
     */

    var GridList = /*#__PURE__*/React__namespace.forwardRef(function GridList(props, ref) {
      if (process.env.NODE_ENV !== 'production') {
        if (!warnedOnce$4) {
          warnedOnce$4 = true;
          console.error(['Material-UI: The GridList component was renamed to ImageList to align with the current Material Design naming.', '', "You should use `import { ImageList } from '@material-ui/core'`", "or `import ImageList from '@material-ui/core/ImageList'`."].join('\n'));
        }
      }

      var _props$cellHeight = props.cellHeight,
          cellHeight = _props$cellHeight === void 0 ? 180 : _props$cellHeight,
          children = props.children,
          classes = props.classes,
          className = props.className,
          _props$cols = props.cols,
          cols = _props$cols === void 0 ? 2 : _props$cols,
          _props$component = props.component,
          Component = _props$component === void 0 ? 'ul' : _props$component,
          _props$spacing = props.spacing,
          spacing = _props$spacing === void 0 ? 4 : _props$spacing,
          style = props.style,
          other = _objectWithoutProperties(props, ["cellHeight", "children", "classes", "className", "cols", "component", "spacing", "style"]);

      return /*#__PURE__*/React__namespace.createElement(Component, _extends$3({
        className: r$1(classes.root, className),
        ref: ref,
        style: _extends$3({
          margin: -spacing / 2
        }, style)
      }, other), React__namespace.Children.map(children, function (child) {
        if (! /*#__PURE__*/React__namespace.isValidElement(child)) {
          return null;
        }

        if (process.env.NODE_ENV !== 'production') {
          if (reactIs$2.exports.isFragment(child)) {
            console.error(["Material-UI: The GridList component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n'));
          }
        }

        var childCols = child.props.cols || 1;
        var childRows = child.props.rows || 1;
        return /*#__PURE__*/React__namespace.cloneElement(child, {
          style: _extends$3({
            width: "".concat(100 / cols * childCols, "%"),
            height: cellHeight === 'auto' ? 'auto' : cellHeight * childRows + spacing,
            padding: spacing / 2
          }, child.props.style)
        });
      }));
    });
    process.env.NODE_ENV !== "production" ? GridList.propTypes = {
      /**
       * Number of px for one cell height.
       * You can set `'auto'` if you want to let the children determine the height.
       */
      cellHeight: re.oneOfType([re.number, re.oneOf(['auto'])]),

      /**
       * Grid Tiles that will be in Grid List.
       */
      children: re.node.isRequired,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object.isRequired,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * Number of columns.
       */
      cols: re.number,

      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: re
      /* @typescript-to-proptypes-ignore */
      .elementType,

      /**
       * Number of px for the spacing between tiles.
       */
      spacing: re.number,

      /**
       * @ignore
       */
      style: re.object
    } : void 0;
    var GridList$1 = withStyles(styles$1k, {
      name: 'MuiGridList'
    })(GridList);

    var styles$1j = {
      /* Styles applied to the root element. */
      root: {
        boxSizing: 'border-box',
        flexShrink: 0
      },

      /* Styles applied to the `div` element that wraps the children. */
      tile: {
        position: 'relative',
        display: 'block',
        // In case it's not rendered with a div.
        height: '100%',
        overflow: 'hidden'
      },

      /* Styles applied to an `img` element child, if needed to ensure it covers the tile. */
      imgFullHeight: {
        height: '100%',
        transform: 'translateX(-50%)',
        position: 'relative',
        left: '50%'
      },

      /* Styles applied to an `img` element child, if needed to ensure it covers the tile. */
      imgFullWidth: {
        width: '100%',
        position: 'relative',
        transform: 'translateY(-50%)',
        top: '50%'
      }
    };

    var fit$1 = function fit(imgEl, classes) {
      if (!imgEl || !imgEl.complete) {
        return;
      }

      if (imgEl.width / imgEl.height > imgEl.parentElement.offsetWidth / imgEl.parentElement.offsetHeight) {
        var _imgEl$classList, _imgEl$classList2;

        (_imgEl$classList = imgEl.classList).remove.apply(_imgEl$classList, _toConsumableArray(classes.imgFullWidth.split(' ')));

        (_imgEl$classList2 = imgEl.classList).add.apply(_imgEl$classList2, _toConsumableArray(classes.imgFullHeight.split(' ')));
      } else {
        var _imgEl$classList3, _imgEl$classList4;

        (_imgEl$classList3 = imgEl.classList).remove.apply(_imgEl$classList3, _toConsumableArray(classes.imgFullHeight.split(' ')));

        (_imgEl$classList4 = imgEl.classList).add.apply(_imgEl$classList4, _toConsumableArray(classes.imgFullWidth.split(' ')));
      }
    };

    function ensureImageCover$1(imgEl, classes) {
      if (!imgEl) {
        return;
      }

      if (imgEl.complete) {
        fit$1(imgEl, classes);
      } else {
        imgEl.addEventListener('load', function () {
          fit$1(imgEl, classes);
        });
      }
    }

    var warnedOnce$3 = false;
    /**
     * ⚠️ The GridList component was renamed to ImageList to align with the current Material Design naming.
     *
     * You should use `import { ImageListItem } from '@material-ui/core'`
     * or `import ImageListItem from '@material-ui/core/ImageListItem'`.
     */

    var GridListTile = /*#__PURE__*/React__namespace.forwardRef(function GridListTile(props, ref) {
      if (process.env.NODE_ENV !== 'production') {
        if (!warnedOnce$3) {
          warnedOnce$3 = true;
          console.error(['Material-UI: The GridListTile component was renamed to ImageListItem to align with the current Material Design naming.', '', "You should use `import { ImageListItem } from '@material-ui/core'`", "or `import ImageListItem from '@material-ui/core/ImageListItem'`."].join('\n'));
        }
      } // cols rows default values are for docs only


      var children = props.children,
          classes = props.classes,
          className = props.className;
          props.cols;
          var _props$component = props.component,
          Component = _props$component === void 0 ? 'li' : _props$component;
          props.rows;
          var other = _objectWithoutProperties(props, ["children", "classes", "className", "cols", "component", "rows"]);

      var imgRef = React__namespace.useRef(null);
      React__namespace.useEffect(function () {
        ensureImageCover$1(imgRef.current, classes);
      });
      React__namespace.useEffect(function () {
        var handleResize = debounce$1(function () {
          fit$1(imgRef.current, classes);
        });
        window.addEventListener('resize', handleResize);
        return function () {
          handleResize.clear();
          window.removeEventListener('resize', handleResize);
        };
      }, [classes]);
      return /*#__PURE__*/React__namespace.createElement(Component, _extends$3({
        className: r$1(classes.root, className),
        ref: ref
      }, other), /*#__PURE__*/React__namespace.createElement("div", {
        className: classes.tile
      }, React__namespace.Children.map(children, function (child) {
        if (! /*#__PURE__*/React__namespace.isValidElement(child)) {
          return null;
        }

        if (child.type === 'img' || isMuiElement(child, ['Image'])) {
          return /*#__PURE__*/React__namespace.cloneElement(child, {
            ref: imgRef
          });
        }

        return child;
      })));
    });
    process.env.NODE_ENV !== "production" ? GridListTile.propTypes = {
      /**
       * Theoretically you can pass any node as children, but the main use case is to pass an img,
       * in which case GridListTile takes care of making the image "cover" available space
       * (similar to `background-size: cover` or to `object-fit: cover`).
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object.isRequired,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * Width of the tile in number of grid cells.
       */
      cols: re.number,

      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: re
      /* @typescript-to-proptypes-ignore */
      .elementType,

      /**
       * Height of the tile in number of grid cells.
       */
      rows: re.number
    } : void 0;
    var GridListTile$1 = withStyles(styles$1j, {
      name: 'MuiGridListTile'
    })(GridListTile);

    var styles$1i = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          position: 'absolute',
          left: 0,
          right: 0,
          height: 48,
          background: 'rgba(0, 0, 0, 0.5)',
          display: 'flex',
          alignItems: 'center',
          fontFamily: theme.typography.fontFamily
        },

        /* Styles applied to the root element if `titlePosition="bottom"`. */
        titlePositionBottom: {
          bottom: 0
        },

        /* Styles applied to the root element if `titlePosition="top"`. */
        titlePositionTop: {
          top: 0
        },

        /* Styles applied to the root element if a `subtitle` is provided. */
        rootSubtitle: {
          height: 68
        },

        /* Styles applied to the title and subtitle container element. */
        titleWrap: {
          flexGrow: 1,
          marginLeft: 16,
          marginRight: 16,
          color: theme.palette.common.white,
          overflow: 'hidden'
        },

        /* Styles applied to the container element if `actionPosition="left"`. */
        titleWrapActionPosLeft: {
          marginLeft: 0
        },

        /* Styles applied to the container element if `actionPosition="right"`. */
        titleWrapActionPosRight: {
          marginRight: 0
        },

        /* Styles applied to the title container element. */
        title: {
          fontSize: theme.typography.pxToRem(16),
          lineHeight: '24px',
          textOverflow: 'ellipsis',
          overflow: 'hidden',
          whiteSpace: 'nowrap'
        },

        /* Styles applied to the subtitle container element. */
        subtitle: {
          fontSize: theme.typography.pxToRem(12),
          lineHeight: 1,
          textOverflow: 'ellipsis',
          overflow: 'hidden',
          whiteSpace: 'nowrap'
        },

        /* Styles applied to the actionIcon if supplied. */
        actionIcon: {},

        /* Styles applied to the actionIcon if `actionPosition="left"`. */
        actionIconActionPosLeft: {
          order: -1
        }
      };
    };
    var warnedOnce$2 = false;
    /**
     * ⚠️ The GridListTileBar component was renamed to ImageListItemBar to align with the current Material Design naming.
     *
     * You should use `import { ImageListItemBar } from '@material-ui/core'`
     * or `import ImageListItemBar from '@material-ui/core/ImageListItemBar'`.
     */

    var GridListTileBar = /*#__PURE__*/React__namespace.forwardRef(function GridListTileBar(props, ref) {
      if (process.env.NODE_ENV !== 'production') {
        if (!warnedOnce$2) {
          warnedOnce$2 = true;
          console.error(['Material-UI: The GridListTileBar component was renamed to ImageListItemBar to align with the current Material Design naming.', '', "You should use `import { ImageListItemBar } from '@material-ui/core'`", "or `import ImageListItemBar from '@material-ui/core/ImageListItemBar'`."].join('\n'));
        }
      }

      var actionIcon = props.actionIcon,
          _props$actionPosition = props.actionPosition,
          actionPosition = _props$actionPosition === void 0 ? 'right' : _props$actionPosition,
          classes = props.classes,
          className = props.className,
          subtitle = props.subtitle,
          title = props.title,
          _props$titlePosition = props.titlePosition,
          titlePosition = _props$titlePosition === void 0 ? 'bottom' : _props$titlePosition,
          other = _objectWithoutProperties(props, ["actionIcon", "actionPosition", "classes", "className", "subtitle", "title", "titlePosition"]);

      var actionPos = actionIcon && actionPosition;
      return /*#__PURE__*/React__namespace.createElement("div", _extends$3({
        className: r$1(classes.root, className, titlePosition === 'top' ? classes.titlePositionTop : classes.titlePositionBottom, subtitle && classes.rootSubtitle),
        ref: ref
      }, other), /*#__PURE__*/React__namespace.createElement("div", {
        className: r$1(classes.titleWrap, {
          'left': classes.titleWrapActionPosLeft,
          'right': classes.titleWrapActionPosRight
        }[actionPos])
      }, /*#__PURE__*/React__namespace.createElement("div", {
        className: classes.title
      }, title), subtitle ? /*#__PURE__*/React__namespace.createElement("div", {
        className: classes.subtitle
      }, subtitle) : null), actionIcon ? /*#__PURE__*/React__namespace.createElement("div", {
        className: r$1(classes.actionIcon, actionPos === 'left' && classes.actionIconActionPosLeft)
      }, actionIcon) : null);
    });
    process.env.NODE_ENV !== "production" ? GridListTileBar.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * An IconButton element to be used as secondary action target
       * (primary action target is the tile itself).
       */
      actionIcon: re.node,

      /**
       * Position of secondary action IconButton.
       */
      actionPosition: re.oneOf(['left', 'right']),

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * String or element serving as subtitle (support text).
       */
      subtitle: re.node,

      /**
       * Title to be displayed on tile.
       */
      title: re.node,

      /**
       * Position of the title bar.
       */
      titlePosition: re.oneOf(['bottom', 'top'])
    } : void 0;
    var GridListTileBar$1 = withStyles(styles$1i, {
      name: 'MuiGridListTileBar'
    })(GridListTileBar);

    function getScale(value) {
      return "scale(".concat(value, ", ").concat(Math.pow(value, 2), ")");
    }

    var styles$1h = {
      entering: {
        opacity: 1,
        transform: getScale(1)
      },
      entered: {
        opacity: 1,
        transform: 'none'
      }
    };
    /**
     * The Grow transition is used by the [Tooltip](/components/tooltips/) and
     * [Popover](/components/popover/) components.
     * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.
     */

    var Grow = /*#__PURE__*/React__namespace.forwardRef(function Grow(props, ref) {
      var children = props.children,
          _props$disableStrictM = props.disableStrictModeCompat,
          disableStrictModeCompat = _props$disableStrictM === void 0 ? false : _props$disableStrictM,
          inProp = props.in,
          onEnter = props.onEnter,
          onEntered = props.onEntered,
          onEntering = props.onEntering,
          onExit = props.onExit,
          onExited = props.onExited,
          onExiting = props.onExiting,
          style = props.style,
          _props$timeout = props.timeout,
          timeout = _props$timeout === void 0 ? 'auto' : _props$timeout,
          _props$TransitionComp = props.TransitionComponent,
          TransitionComponent = _props$TransitionComp === void 0 ? Transition$1 : _props$TransitionComp,
          other = _objectWithoutProperties(props, ["children", "disableStrictModeCompat", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"]);

      var timer = React__namespace.useRef();
      var autoTimeout = React__namespace.useRef();
      var theme = useTheme();
      var enableStrictModeCompat = theme.unstable_strictMode && !disableStrictModeCompat;
      var nodeRef = React__namespace.useRef(null);
      var foreignRef = useForkRef(children.ref, ref);
      var handleRef = useForkRef(enableStrictModeCompat ? nodeRef : undefined, foreignRef);

      var normalizedTransitionCallback = function normalizedTransitionCallback(callback) {
        return function (nodeOrAppearing, maybeAppearing) {
          if (callback) {
            var _ref = enableStrictModeCompat ? [nodeRef.current, nodeOrAppearing] : [nodeOrAppearing, maybeAppearing],
                _ref2 = _slicedToArray(_ref, 2),
                node = _ref2[0],
                isAppearing = _ref2[1]; // onEnterXxx and onExitXxx callbacks have a different arguments.length value.


            if (isAppearing === undefined) {
              callback(node);
            } else {
              callback(node, isAppearing);
            }
          }
        };
      };

      var handleEntering = normalizedTransitionCallback(onEntering);
      var handleEnter = normalizedTransitionCallback(function (node, isAppearing) {
        reflow(node); // So the animation always start from the start.

        var _getTransitionProps = getTransitionProps({
          style: style,
          timeout: timeout
        }, {
          mode: 'enter'
        }),
            transitionDuration = _getTransitionProps.duration,
            delay = _getTransitionProps.delay;

        var duration;

        if (timeout === 'auto') {
          duration = theme.transitions.getAutoHeightDuration(node.clientHeight);
          autoTimeout.current = duration;
        } else {
          duration = transitionDuration;
        }

        node.style.transition = [theme.transitions.create('opacity', {
          duration: duration,
          delay: delay
        }), theme.transitions.create('transform', {
          duration: duration * 0.666,
          delay: delay
        })].join(',');

        if (onEnter) {
          onEnter(node, isAppearing);
        }
      });
      var handleEntered = normalizedTransitionCallback(onEntered);
      var handleExiting = normalizedTransitionCallback(onExiting);
      var handleExit = normalizedTransitionCallback(function (node) {
        var _getTransitionProps2 = getTransitionProps({
          style: style,
          timeout: timeout
        }, {
          mode: 'exit'
        }),
            transitionDuration = _getTransitionProps2.duration,
            delay = _getTransitionProps2.delay;

        var duration;

        if (timeout === 'auto') {
          duration = theme.transitions.getAutoHeightDuration(node.clientHeight);
          autoTimeout.current = duration;
        } else {
          duration = transitionDuration;
        }

        node.style.transition = [theme.transitions.create('opacity', {
          duration: duration,
          delay: delay
        }), theme.transitions.create('transform', {
          duration: duration * 0.666,
          delay: delay || duration * 0.333
        })].join(',');
        node.style.opacity = '0';
        node.style.transform = getScale(0.75);

        if (onExit) {
          onExit(node);
        }
      });
      var handleExited = normalizedTransitionCallback(onExited);

      var addEndListener = function addEndListener(nodeOrNext, maybeNext) {
        var next = enableStrictModeCompat ? nodeOrNext : maybeNext;

        if (timeout === 'auto') {
          timer.current = setTimeout(next, autoTimeout.current || 0);
        }
      };

      React__namespace.useEffect(function () {
        return function () {
          clearTimeout(timer.current);
        };
      }, []);
      return /*#__PURE__*/React__namespace.createElement(TransitionComponent, _extends$3({
        appear: true,
        in: inProp,
        nodeRef: enableStrictModeCompat ? nodeRef : undefined,
        onEnter: handleEnter,
        onEntered: handleEntered,
        onEntering: handleEntering,
        onExit: handleExit,
        onExited: handleExited,
        onExiting: handleExiting,
        addEndListener: addEndListener,
        timeout: timeout === 'auto' ? null : timeout
      }, other), function (state, childProps) {
        return /*#__PURE__*/React__namespace.cloneElement(children, _extends$3({
          style: _extends$3({
            opacity: 0,
            transform: getScale(0.75),
            visibility: state === 'exited' && !inProp ? 'hidden' : undefined
          }, styles$1h[state], style, children.props.style),
          ref: handleRef
        }, childProps));
      });
    });
    process.env.NODE_ENV !== "production" ? Grow.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * A single child content element.
       */
      children: re.element,

      /**
       * Enable this prop if you encounter 'Function components cannot be given refs',
       * use `unstable_createStrictModeTheme`,
       * and can't forward the ref in the child component.
       */
      disableStrictModeCompat: re.bool,

      /**
       * If `true`, show the component; triggers the enter or exit animation.
       */
      in: re.bool,

      /**
       * @ignore
       */
      onEnter: re.func,

      /**
       * @ignore
       */
      onEntered: re.func,

      /**
       * @ignore
       */
      onEntering: re.func,

      /**
       * @ignore
       */
      onExit: re.func,

      /**
       * @ignore
       */
      onExited: re.func,

      /**
       * @ignore
       */
      onExiting: re.func,

      /**
       * @ignore
       */
      style: re.object,

      /**
       * The duration for the transition, in milliseconds.
       * You may specify a single timeout for all transitions, or individually with an object.
       *
       * Set to 'auto' to automatically calculate transition time based on height.
       */
      timeout: re.oneOfType([re.oneOf(['auto']), re.number, re.shape({
        appear: re.number,
        enter: re.number,
        exit: re.number
      })])
    } : void 0;
    Grow.muiSupportAuto = true;
    var k = Grow;

    function useMediaQuery(queryInput) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var theme = useTheme$1();
      var props = getThemeProps({
        theme: theme,
        name: 'MuiUseMediaQuery',
        props: {}
      });

      if (process.env.NODE_ENV !== 'production') {
        if (typeof queryInput === 'function' && theme === null) {
          console.error(['Material-UI: The `query` argument provided is invalid.', 'You are providing a function without a theme in the context.', 'One of the parent elements needs to use a ThemeProvider.'].join('\n'));
        }
      }

      var query = typeof queryInput === 'function' ? queryInput(theme) : queryInput;
      query = query.replace(/^@media( ?)/m, ''); // Wait for jsdom to support the match media feature.
      // All the browsers Material-UI support have this built-in.
      // This defensive check is here for simplicity.
      // Most of the time, the match media logic isn't central to people tests.

      var supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia !== 'undefined';

      var _props$options = _extends$3({}, props, options),
          _props$options$defaul = _props$options.defaultMatches,
          defaultMatches = _props$options$defaul === void 0 ? false : _props$options$defaul,
          _props$options$matchM = _props$options.matchMedia,
          matchMedia = _props$options$matchM === void 0 ? supportMatchMedia ? window.matchMedia : null : _props$options$matchM,
          _props$options$noSsr = _props$options.noSsr,
          noSsr = _props$options$noSsr === void 0 ? false : _props$options$noSsr,
          _props$options$ssrMat = _props$options.ssrMatchMedia,
          ssrMatchMedia = _props$options$ssrMat === void 0 ? null : _props$options$ssrMat;

      var _React$useState = React__namespace.useState(function () {
        if (noSsr && supportMatchMedia) {
          return matchMedia(query).matches;
        }

        if (ssrMatchMedia) {
          return ssrMatchMedia(query).matches;
        } // Once the component is mounted, we rely on the
        // event listeners to return the correct matches value.


        return defaultMatches;
      }),
          match = _React$useState[0],
          setMatch = _React$useState[1];

      React__namespace.useEffect(function () {
        var active = true;

        if (!supportMatchMedia) {
          return undefined;
        }

        var queryList = matchMedia(query);

        var updateMatch = function updateMatch() {
          // Workaround Safari wrong implementation of matchMedia
          // TODO can we remove it?
          // https://github.com/mui-org/material-ui/pull/17315#issuecomment-528286677
          if (active) {
            setMatch(queryList.matches);
          }
        };

        updateMatch();
        queryList.addListener(updateMatch);
        return function () {
          active = false;
          queryList.removeListener(updateMatch);
        };
      }, [query, matchMedia, supportMatchMedia]);

      if (process.env.NODE_ENV !== 'production') {
        // eslint-disable-next-line react-hooks/rules-of-hooks
        React__namespace.useDebugValue({
          query: query,
          match: match
        });
      }

      return match;
    }

    var isWidthUp = function isWidthUp(breakpoint, width) {
      var inclusive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

      if (inclusive) {
        return keys$1.indexOf(breakpoint) <= keys$1.indexOf(width);
      }

      return keys$1.indexOf(breakpoint) < keys$1.indexOf(width);
    }; // By default, returns true if screen width is the same or less than the given breakpoint.

    var isWidthDown = function isWidthDown(breakpoint, width) {
      var inclusive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

      if (inclusive) {
        return keys$1.indexOf(width) <= keys$1.indexOf(breakpoint);
      }

      return keys$1.indexOf(width) < keys$1.indexOf(breakpoint);
    };
    var useEnhancedEffect$5 = typeof window === 'undefined' ? React__namespace.useEffect : React__namespace.useLayoutEffect;

    var withWidth = function withWidth() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return function (Component) {
        var _options$withTheme = options.withTheme,
            withThemeOption = _options$withTheme === void 0 ? false : _options$withTheme,
            _options$noSSR = options.noSSR,
            noSSR = _options$noSSR === void 0 ? false : _options$noSSR,
            initialWidthOption = options.initialWidth;

        function WithWidth(props) {
          var contextTheme = useTheme();
          var theme = props.theme || contextTheme;

          var _getThemeProps = getThemeProps({
            theme: theme,
            name: 'MuiWithWidth',
            props: _extends$3({}, props)
          }),
              initialWidth = _getThemeProps.initialWidth,
              width = _getThemeProps.width,
              other = _objectWithoutProperties(_getThemeProps, ["initialWidth", "width"]);

          var _React$useState = React__namespace.useState(false),
              mountedState = _React$useState[0],
              setMountedState = _React$useState[1];

          useEnhancedEffect$5(function () {
            setMountedState(true);
          }, []);
          /**
           * innerWidth |xs      sm      md      lg      xl
           *            |-------|-------|-------|-------|------>
           * width      |  xs   |  sm   |  md   |  lg   |  xl
           */

          var keys = theme.breakpoints.keys.slice().reverse();
          var widthComputed = keys.reduce(function (output, key) {
            // eslint-disable-next-line react-hooks/rules-of-hooks
            var matches = useMediaQuery(theme.breakpoints.up(key));
            return !output && matches ? key : output;
          }, null);

          var more = _extends$3({
            width: width || (mountedState || noSSR ? widthComputed : undefined) || initialWidth || initialWidthOption
          }, withThemeOption ? {
            theme: theme
          } : {}, other); // When rendering the component on the server,
          // we have no idea about the client browser screen width.
          // In order to prevent blinks and help the reconciliation of the React tree
          // we are not rendering the child component.
          //
          // An alternative is to use the `initialWidth` property.


          if (more.width === undefined) {
            return null;
          }

          return /*#__PURE__*/React__namespace.createElement(Component, more);
        }

        process.env.NODE_ENV !== "production" ? WithWidth.propTypes = {
          /**
           * As `window.innerWidth` is unavailable on the server,
           * we default to rendering an empty component during the first mount.
           * You might want to use an heuristic to approximate
           * the screen width of the client browser screen width.
           *
           * For instance, you could be using the user-agent or the client-hints.
           * https://caniuse.com/#search=client%20hint
           */
          initialWidth: re.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),

          /**
           * @ignore
           */
          theme: re.object,

          /**
           * Bypass the width calculation logic.
           */
          width: re.oneOf(['xs', 'sm', 'md', 'lg', 'xl'])
        } : void 0;

        if (process.env.NODE_ENV !== 'production') {
          WithWidth.displayName = "WithWidth(".concat(getDisplayName(Component), ")");
        }

        hoistNonReactStatics_cjs(WithWidth, Component);
        return WithWidth;
      };
    };

    var withWidth$1 = withWidth;

    /**
     * @ignore - internal component.
     */

    function HiddenJs(props) {
      var children = props.children,
          only = props.only,
          width = props.width;
      var theme = useTheme();
      var visible = true; // `only` check is faster to get out sooner if used.

      if (only) {
        if (Array.isArray(only)) {
          for (var i = 0; i < only.length; i += 1) {
            var breakpoint = only[i];

            if (width === breakpoint) {
              visible = false;
              break;
            }
          }
        } else if (only && width === only) {
          visible = false;
        }
      } // Allow `only` to be combined with other props. If already hidden, no need to check others.


      if (visible) {
        // determine visibility based on the smallest size up
        for (var _i = 0; _i < theme.breakpoints.keys.length; _i += 1) {
          var _breakpoint = theme.breakpoints.keys[_i];
          var breakpointUp = props["".concat(_breakpoint, "Up")];
          var breakpointDown = props["".concat(_breakpoint, "Down")];

          if (breakpointUp && isWidthUp(_breakpoint, width) || breakpointDown && isWidthDown(_breakpoint, width)) {
            visible = false;
            break;
          }
        }
      }

      if (!visible) {
        return null;
      }

      return children;
    }

    HiddenJs.propTypes = {
      /**
       * The content of the component.
       */
      children: re.node,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * Specify which implementation to use.  'js' is the default, 'css' works better for
       * server-side rendering.
       */
      implementation: re.oneOf(['js', 'css']),

      /**
       * You can use this prop when choosing the `js` implementation with server-side rendering.
       *
       * As `window.innerWidth` is unavailable on the server,
       * we default to rendering an empty component during the first mount.
       * You might want to use an heuristic to approximate
       * the screen width of the client browser screen width.
       *
       * For instance, you could be using the user-agent or the client-hints.
       * https://caniuse.com/#search=client%20hint
       */
      initialWidth: re.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),

      /**
       * If `true`, screens this size and down will be hidden.
       */
      lgDown: re.bool,

      /**
       * If `true`, screens this size and up will be hidden.
       */
      lgUp: re.bool,

      /**
       * If `true`, screens this size and down will be hidden.
       */
      mdDown: re.bool,

      /**
       * If `true`, screens this size and up will be hidden.
       */
      mdUp: re.bool,

      /**
       * Hide the given breakpoint(s).
       */
      only: re.oneOfType([re.oneOf(['xs', 'sm', 'md', 'lg', 'xl']), re.arrayOf(re.oneOf(['xs', 'sm', 'md', 'lg', 'xl']))]),

      /**
       * If `true`, screens this size and down will be hidden.
       */
      smDown: re.bool,

      /**
       * If `true`, screens this size and up will be hidden.
       */
      smUp: re.bool,

      /**
       * @ignore
       * width prop provided by withWidth decorator.
       */
      width: re.string.isRequired,

      /**
       * If `true`, screens this size and down will be hidden.
       */
      xlDown: re.bool,

      /**
       * If `true`, screens this size and up will be hidden.
       */
      xlUp: re.bool,

      /**
       * If `true`, screens this size and down will be hidden.
       */
      xsDown: re.bool,

      /**
       * If `true`, screens this size and up will be hidden.
       */
      xsUp: re.bool
    };

    if (process.env.NODE_ENV !== 'production') {
      HiddenJs.propTypes = exactProp(HiddenJs.propTypes);
    }

    var HiddenJs$1 = withWidth$1()(HiddenJs);

    var styles$1g = function styles(theme) {
      var hidden = {
        display: 'none'
      };
      return theme.breakpoints.keys.reduce(function (acc, key) {
        acc["only".concat(capitalize(key))] = _defineProperty({}, theme.breakpoints.only(key), hidden);
        acc["".concat(key, "Up")] = _defineProperty({}, theme.breakpoints.up(key), hidden);
        acc["".concat(key, "Down")] = _defineProperty({}, theme.breakpoints.down(key), hidden);
        return acc;
      }, {});
    };
    /**
     * @ignore - internal component.
     */


    function HiddenCss(props) {
      var children = props.children,
          classes = props.classes,
          className = props.className,
          only = props.only,
          other = _objectWithoutProperties(props, ["children", "classes", "className", "only"]);

      var theme = useTheme();

      if (process.env.NODE_ENV !== 'production') {
        var unknownProps = Object.keys(other).filter(function (propName) {
          var isUndeclaredBreakpoint = !theme.breakpoints.keys.some(function (breakpoint) {
            return "".concat(breakpoint, "Up") === propName || "".concat(breakpoint, "Down") === propName;
          });
          return isUndeclaredBreakpoint;
        });

        if (unknownProps.length > 0) {
          console.error("Material-UI: Unsupported props received by `<Hidden implementation=\"css\" />`: ".concat(unknownProps.join(', '), ". Did you forget to wrap this component in a ThemeProvider declaring these breakpoints?"));
        }
      }

      var clsx = [];

      if (className) {
        clsx.push(className);
      }

      for (var i = 0; i < theme.breakpoints.keys.length; i += 1) {
        var breakpoint = theme.breakpoints.keys[i];
        var breakpointUp = props["".concat(breakpoint, "Up")];
        var breakpointDown = props["".concat(breakpoint, "Down")];

        if (breakpointUp) {
          clsx.push(classes["".concat(breakpoint, "Up")]);
        }

        if (breakpointDown) {
          clsx.push(classes["".concat(breakpoint, "Down")]);
        }
      }

      if (only) {
        var onlyBreakpoints = Array.isArray(only) ? only : [only];
        onlyBreakpoints.forEach(function (breakpoint) {
          clsx.push(classes["only".concat(capitalize(breakpoint))]);
        });
      }

      return /*#__PURE__*/React__namespace.createElement("div", {
        className: clsx.join(' ')
      }, children);
    }

    process.env.NODE_ENV !== "production" ? HiddenCss.propTypes = {
      /**
       * The content of the component.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object.isRequired,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * Specify which implementation to use.  'js' is the default, 'css' works better for
       * server-side rendering.
       */
      implementation: re.oneOf(['js', 'css']),

      /**
       * If `true`, screens this size and down will be hidden.
       */
      lgDown: re.bool,

      /**
       * If `true`, screens this size and up will be hidden.
       */
      lgUp: re.bool,

      /**
       * If `true`, screens this size and down will be hidden.
       */
      mdDown: re.bool,

      /**
       * If `true`, screens this size and up will be hidden.
       */
      mdUp: re.bool,

      /**
       * Hide the given breakpoint(s).
       */
      only: re.oneOfType([re.oneOf(['xs', 'sm', 'md', 'lg', 'xl']), re.arrayOf(re.oneOf(['xs', 'sm', 'md', 'lg', 'xl']))]),

      /**
       * If `true`, screens this size and down will be hidden.
       */
      smDown: re.bool,

      /**
       * If `true`, screens this size and up will be hidden.
       */
      smUp: re.bool,

      /**
       * If `true`, screens this size and down will be hidden.
       */
      xlDown: re.bool,

      /**
       * If `true`, screens this size and up will be hidden.
       */
      xlUp: re.bool,

      /**
       * If `true`, screens this size and down will be hidden.
       */
      xsDown: re.bool,

      /**
       * If `true`, screens this size and up will be hidden.
       */
      xsUp: re.bool
    } : void 0;
    var HiddenCss$1 = withStyles(styles$1g, {
      name: 'PrivateHiddenCss'
    })(HiddenCss);

    /**
     * Responsively hides children based on the selected implementation.
     */

    function Hidden(props) {
      var _props$implementation = props.implementation,
          implementation = _props$implementation === void 0 ? 'js' : _props$implementation,
          _props$lgDown = props.lgDown,
          lgDown = _props$lgDown === void 0 ? false : _props$lgDown,
          _props$lgUp = props.lgUp,
          lgUp = _props$lgUp === void 0 ? false : _props$lgUp,
          _props$mdDown = props.mdDown,
          mdDown = _props$mdDown === void 0 ? false : _props$mdDown,
          _props$mdUp = props.mdUp,
          mdUp = _props$mdUp === void 0 ? false : _props$mdUp,
          _props$smDown = props.smDown,
          smDown = _props$smDown === void 0 ? false : _props$smDown,
          _props$smUp = props.smUp,
          smUp = _props$smUp === void 0 ? false : _props$smUp,
          _props$xlDown = props.xlDown,
          xlDown = _props$xlDown === void 0 ? false : _props$xlDown,
          _props$xlUp = props.xlUp,
          xlUp = _props$xlUp === void 0 ? false : _props$xlUp,
          _props$xsDown = props.xsDown,
          xsDown = _props$xsDown === void 0 ? false : _props$xsDown,
          _props$xsUp = props.xsUp,
          xsUp = _props$xsUp === void 0 ? false : _props$xsUp,
          other = _objectWithoutProperties(props, ["implementation", "lgDown", "lgUp", "mdDown", "mdUp", "smDown", "smUp", "xlDown", "xlUp", "xsDown", "xsUp"]);

      if (implementation === 'js') {
        return /*#__PURE__*/React__namespace.createElement(HiddenJs$1, _extends$3({
          lgDown: lgDown,
          lgUp: lgUp,
          mdDown: mdDown,
          mdUp: mdUp,
          smDown: smDown,
          smUp: smUp,
          xlDown: xlDown,
          xlUp: xlUp,
          xsDown: xsDown,
          xsUp: xsUp
        }, other));
      }

      return /*#__PURE__*/React__namespace.createElement(HiddenCss$1, _extends$3({
        lgDown: lgDown,
        lgUp: lgUp,
        mdDown: mdDown,
        mdUp: mdUp,
        smDown: smDown,
        smUp: smUp,
        xlDown: xlDown,
        xlUp: xlUp,
        xsDown: xsDown,
        xsUp: xsUp
      }, other));
    }

    process.env.NODE_ENV !== "production" ? Hidden.propTypes = {
      /**
       * The content of the component.
       */
      children: re.node,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * Specify which implementation to use.  'js' is the default, 'css' works better for
       * server-side rendering.
       */
      implementation: re.oneOf(['js', 'css']),

      /**
       * You can use this prop when choosing the `js` implementation with server-side rendering.
       *
       * As `window.innerWidth` is unavailable on the server,
       * we default to rendering an empty component during the first mount.
       * You might want to use an heuristic to approximate
       * the screen width of the client browser screen width.
       *
       * For instance, you could be using the user-agent or the client-hints.
       * https://caniuse.com/#search=client%20hint
       */
      initialWidth: re.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),

      /**
       * If `true`, screens this size and down will be hidden.
       */
      lgDown: re.bool,

      /**
       * If `true`, screens this size and up will be hidden.
       */
      lgUp: re.bool,

      /**
       * If `true`, screens this size and down will be hidden.
       */
      mdDown: re.bool,

      /**
       * If `true`, screens this size and up will be hidden.
       */
      mdUp: re.bool,

      /**
       * Hide the given breakpoint(s).
       */
      only: re.oneOfType([re.oneOf(['xs', 'sm', 'md', 'lg', 'xl']), re.arrayOf(re.oneOf(['xs', 'sm', 'md', 'lg', 'xl']))]),

      /**
       * If `true`, screens this size and down will be hidden.
       */
      smDown: re.bool,

      /**
       * If `true`, screens this size and up will be hidden.
       */
      smUp: re.bool,

      /**
       * If `true`, screens this size and down will be hidden.
       */
      xlDown: re.bool,

      /**
       * If `true`, screens this size and up will be hidden.
       */
      xlUp: re.bool,

      /**
       * If `true`, screens this size and down will be hidden.
       */
      xsDown: re.bool,

      /**
       * If `true`, screens this size and up will be hidden.
       */
      xsUp: re.bool
    } : void 0;

    var styles$1f = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          userSelect: 'none',
          fontSize: theme.typography.pxToRem(24),
          width: '1em',
          height: '1em',
          // Chrome fix for https://bugs.chromium.org/p/chromium/issues/detail?id=820541
          // To remove at some point.
          overflow: 'hidden',
          flexShrink: 0
        },

        /* Styles applied to the root element if `color="primary"`. */
        colorPrimary: {
          color: theme.palette.primary.main
        },

        /* Styles applied to the root element if `color="secondary"`. */
        colorSecondary: {
          color: theme.palette.secondary.main
        },

        /* Styles applied to the root element if `color="action"`. */
        colorAction: {
          color: theme.palette.action.active
        },

        /* Styles applied to the root element if `color="error"`. */
        colorError: {
          color: theme.palette.error.main
        },

        /* Styles applied to the root element if `color="disabled"`. */
        colorDisabled: {
          color: theme.palette.action.disabled
        },

        /* Styles applied to the root element if `fontSize="inherit"`. */
        fontSizeInherit: {
          fontSize: 'inherit'
        },

        /* Styles applied to the root element if `fontSize="small"`. */
        fontSizeSmall: {
          fontSize: theme.typography.pxToRem(20)
        },

        /* Styles applied to the root element if `fontSize="large"`. */
        fontSizeLarge: {
          fontSize: theme.typography.pxToRem(36)
        }
      };
    };
    var Icon$1 = /*#__PURE__*/React__namespace.forwardRef(function Icon(props, ref) {
      var classes = props.classes,
          className = props.className,
          _props$color = props.color,
          color = _props$color === void 0 ? 'inherit' : _props$color,
          _props$component = props.component,
          Component = _props$component === void 0 ? 'span' : _props$component,
          _props$fontSize = props.fontSize,
          fontSize = _props$fontSize === void 0 ? 'medium' : _props$fontSize,
          other = _objectWithoutProperties(props, ["classes", "className", "color", "component", "fontSize"]);

      return /*#__PURE__*/React__namespace.createElement(Component, _extends$3({
        className: r$1('material-icons', classes.root, className, color !== 'inherit' && classes["color".concat(capitalize(color))], fontSize !== 'default' && fontSize !== 'medium' && classes["fontSize".concat(capitalize(fontSize))]),
        "aria-hidden": true,
        ref: ref
      }, other));
    });
    process.env.NODE_ENV !== "production" ? Icon$1.propTypes = {
      /**
       * The name of the icon font ligature.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object.isRequired,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * The color of the component. It supports those theme colors that make sense for this component.
       */
      color: re.oneOf(['inherit', 'primary', 'secondary', 'action', 'error', 'disabled']),

      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: re
      /* @typescript-to-proptypes-ignore */
      .elementType,

      /**
       * The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.
       */
      fontSize: chainPropTypes$1(re.oneOf(['default', 'inherit', 'large', 'medium', 'small']), function (props) {
        var fontSize = props.fontSize;

        if (fontSize === 'default') {
          throw new Error('Material-UI: `fontSize="default"` is deprecated. Use `fontSize="medium"` instead.');
        }

        return null;
      })
    } : void 0;
    Icon$1.muiName = 'Icon';
    var Icon$2 = withStyles(styles$1f, {
      name: 'MuiIcon'
    })(Icon$1);

    var styles$1e = {
      /* Styles applied to the root element. */
      root: {
        display: 'flex',
        flexWrap: 'wrap',
        overflowY: 'auto',
        listStyle: 'none',
        padding: 0,
        WebkitOverflowScrolling: 'touch' // Add iOS momentum scrolling.

      }
    };
    var ImageList = /*#__PURE__*/React__namespace.forwardRef(function ImageList(props, ref) {
      var cellHeight = props.cellHeight,
          children = props.children,
          classes = props.classes,
          className = props.className,
          _props$cols = props.cols,
          cols = _props$cols === void 0 ? 2 : _props$cols,
          _props$component = props.component,
          Component = _props$component === void 0 ? 'ul' : _props$component,
          _props$gap = props.gap,
          gapProp = _props$gap === void 0 ? 4 : _props$gap,
          _props$rowHeight = props.rowHeight,
          rowHeightProp = _props$rowHeight === void 0 ? 180 : _props$rowHeight,
          spacing = props.spacing,
          style = props.style,
          other = _objectWithoutProperties(props, ["cellHeight", "children", "classes", "className", "cols", "component", "gap", "rowHeight", "spacing", "style"]);

      var gap = spacing || gapProp;
      var rowHeight = cellHeight || rowHeightProp;
      return /*#__PURE__*/React__namespace.createElement(Component, _extends$3({
        className: r$1(classes.root, className),
        ref: ref,
        style: _extends$3({
          margin: -gap / 2
        }, style)
      }, other), React__namespace.Children.map(children, function (child) {
        if (! /*#__PURE__*/React__namespace.isValidElement(child)) {
          return null;
        }

        if (process.env.NODE_ENV !== 'production') {
          if (reactIs$2.exports.isFragment(child)) {
            console.error(["Material-UI: The ImageList component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n'));
          }
        }

        var childCols = child.props.cols || 1;
        var childRows = child.props.rows || 1;
        return /*#__PURE__*/React__namespace.cloneElement(child, {
          style: _extends$3({
            width: "".concat(100 / cols * childCols, "%"),
            height: rowHeight === 'auto' ? 'auto' : rowHeight * childRows + gap,
            padding: gap / 2
          }, child.props.style)
        });
      }));
    });
    process.env.NODE_ENV !== "production" ? ImageList.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * Cell height in `px`.
       * Set to `'auto'` to let the children determine the height.
       * @deprecated Use rowHeight instead.
       */
      cellHeight: deprecatedPropType(re.oneOfType([re.number, re.oneOf(['auto'])]), 'Use the `rowHeight` prop instead.'),

      /**
       * Items that will be in the image list.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * Number of columns.
       */
      cols: re.number,

      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: re
      /* @typescript-to-proptypes-ignore */
      .elementType,

      /**
       * The gap between items in `px`.
       */
      gap: re.number,

      /**
       * The height of one row in `px`.
       */
      rowHeight: re.oneOfType([re.oneOf(['auto']), re.number]),

      /**
       * The spacing between items in `px`.
       * @deprecated Use gap instead.
       */
      spacing: deprecatedPropType(re.number, 'Use the `gap` prop instead.'),

      /**
       * @ignore
       */
      style: re.object
    } : void 0;
    var ImageList$1 = withStyles(styles$1e, {
      name: 'MuiImageList'
    })(ImageList);

    var styles$1d = {
      /* Styles applied to the root element. */
      root: {
        boxSizing: 'border-box',
        flexShrink: 0
      },

      /* Styles applied to the `div` element that wraps the children. */
      item: {
        position: 'relative',
        display: 'block',
        // In case it's not rendered with a div.
        height: '100%',
        overflow: 'hidden'
      },

      /* Styles applied to an `img` element child, if needed to ensure it covers the item. */
      imgFullHeight: {
        height: '100%',
        transform: 'translateX(-50%)',
        position: 'relative',
        left: '50%'
      },

      /* Styles applied to an `img` element child, if needed to ensure it covers the item. */
      imgFullWidth: {
        width: '100%',
        position: 'relative',
        transform: 'translateY(-50%)',
        top: '50%'
      }
    };

    var fit = function fit(imgEl, classes) {
      if (!imgEl || !imgEl.complete) {
        return;
      }

      if (imgEl.width / imgEl.height > imgEl.parentElement.offsetWidth / imgEl.parentElement.offsetHeight) {
        var _imgEl$classList, _imgEl$classList2;

        (_imgEl$classList = imgEl.classList).remove.apply(_imgEl$classList, _toConsumableArray(classes.imgFullWidth.split(' ')));

        (_imgEl$classList2 = imgEl.classList).add.apply(_imgEl$classList2, _toConsumableArray(classes.imgFullHeight.split(' ')));
      } else {
        var _imgEl$classList3, _imgEl$classList4;

        (_imgEl$classList3 = imgEl.classList).remove.apply(_imgEl$classList3, _toConsumableArray(classes.imgFullHeight.split(' ')));

        (_imgEl$classList4 = imgEl.classList).add.apply(_imgEl$classList4, _toConsumableArray(classes.imgFullWidth.split(' ')));
      }
    };

    function ensureImageCover(imgEl, classes) {
      if (!imgEl) {
        return;
      }

      if (imgEl.complete) {
        fit(imgEl, classes);
      } else {
        imgEl.addEventListener('load', function () {
          fit(imgEl, classes);
        });
      }
    }

    var ImageListItem = /*#__PURE__*/React__namespace.forwardRef(function ImageListItem(props, ref) {
      // cols rows default values are for docs only
      var children = props.children,
          classes = props.classes,
          className = props.className;
          props.cols;
          var _props$component = props.component,
          Component = _props$component === void 0 ? 'li' : _props$component;
          props.rows;
          var other = _objectWithoutProperties(props, ["children", "classes", "className", "cols", "component", "rows"]);

      var imgRef = React__namespace.useRef(null);
      React__namespace.useEffect(function () {
        ensureImageCover(imgRef.current, classes);
      });
      React__namespace.useEffect(function () {
        var handleResize = debounce$1(function () {
          fit(imgRef.current, classes);
        });
        window.addEventListener('resize', handleResize);
        return function () {
          handleResize.clear();
          window.removeEventListener('resize', handleResize);
        };
      }, [classes]);
      return /*#__PURE__*/React__namespace.createElement(Component, _extends$3({
        className: r$1(classes.root, className),
        ref: ref
      }, other), /*#__PURE__*/React__namespace.createElement("div", {
        className: classes.item
      }, React__namespace.Children.map(children, function (child) {
        if (! /*#__PURE__*/React__namespace.isValidElement(child)) {
          return null;
        }

        if (child.type === 'img' || isMuiElement(child, ['Image'])) {
          return /*#__PURE__*/React__namespace.cloneElement(child, {
            ref: imgRef
          });
        }

        return child;
      })));
    });
    process.env.NODE_ENV !== "production" ? ImageListItem.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * While you can pass any node as children, the main use case is for an img.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * Width of the item in number of grid columns.
       */
      cols: re.number,

      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: re
      /* @typescript-to-proptypes-ignore */
      .elementType,

      /**
       * Height of the item in number of grid rows.
       */
      rows: re.number
    } : void 0;
    var ImageListItem$1 = withStyles(styles$1d, {
      name: 'MuiImageListItem'
    })(ImageListItem);

    var styles$1c = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          position: 'absolute',
          left: 0,
          right: 0,
          height: 48,
          background: 'rgba(0, 0, 0, 0.5)',
          display: 'flex',
          alignItems: 'center',
          fontFamily: theme.typography.fontFamily
        },

        /* Styles applied to the root element if `position="bottom"`. */
        positionBottom: {
          bottom: 0
        },

        /* Styles applied to the root element if `position="top"`. */
        positionTop: {
          top: 0
        },

        /* Styles applied to the root element if a `subtitle` is provided. */
        rootSubtitle: {
          height: 68
        },

        /* Styles applied to the title and subtitle container element. */
        titleWrap: {
          flexGrow: 1,
          marginLeft: 16,
          marginRight: 16,
          color: theme.palette.common.white,
          overflow: 'hidden'
        },

        /* Styles applied to the container element if `actionPosition="left"`. */
        titleWrapActionPosLeft: {
          marginLeft: 0
        },

        /* Styles applied to the container element if `actionPosition="right"`. */
        titleWrapActionPosRight: {
          marginRight: 0
        },

        /* Styles applied to the title container element. */
        title: {
          fontSize: theme.typography.pxToRem(16),
          lineHeight: '24px',
          textOverflow: 'ellipsis',
          overflow: 'hidden',
          whiteSpace: 'nowrap'
        },

        /* Styles applied to the subtitle container element. */
        subtitle: {
          fontSize: theme.typography.pxToRem(12),
          lineHeight: 1,
          textOverflow: 'ellipsis',
          overflow: 'hidden',
          whiteSpace: 'nowrap'
        },

        /* Styles applied to the actionIcon if supplied. */
        actionIcon: {},

        /* Styles applied to the actionIcon if `actionPosition="left"`. */
        actionIconActionPosLeft: {
          order: -1
        }
      };
    };
    var ImageListItemBar = /*#__PURE__*/React__namespace.forwardRef(function ImageListItemBar(props, ref) {
      var actionIcon = props.actionIcon,
          _props$actionPosition = props.actionPosition,
          actionPosition = _props$actionPosition === void 0 ? 'right' : _props$actionPosition,
          classes = props.classes,
          className = props.className,
          subtitle = props.subtitle,
          title = props.title,
          _props$position = props.position,
          positionProp = _props$position === void 0 ? 'bottom' : _props$position,
          titlePosition = props.titlePosition,
          other = _objectWithoutProperties(props, ["actionIcon", "actionPosition", "classes", "className", "subtitle", "title", "position", "titlePosition"]);

      var position = titlePosition || positionProp;
      var actionPos = actionIcon && actionPosition;
      return /*#__PURE__*/React__namespace.createElement("div", _extends$3({
        className: r$1(classes.root, className, subtitle && classes.rootSubtitle, {
          'bottom': classes.positionBottom,
          'top': classes.positionTop
        }[position]),
        ref: ref
      }, other), /*#__PURE__*/React__namespace.createElement("div", {
        className: r$1(classes.titleWrap, {
          'left': classes.titleWrapActionPosLeft,
          'right': classes.titleWrapActionPosRight
        }[actionPos])
      }, /*#__PURE__*/React__namespace.createElement("div", {
        className: classes.title
      }, title), subtitle ? /*#__PURE__*/React__namespace.createElement("div", {
        className: classes.subtitle
      }, subtitle) : null), actionIcon ? /*#__PURE__*/React__namespace.createElement("div", {
        className: r$1(classes.actionIcon, actionPos === 'left' && classes.actionIconActionPosLeft)
      }, actionIcon) : null);
    });
    process.env.NODE_ENV !== "production" ? ImageListItemBar.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * An IconButton element to be used as secondary action target
       * (primary action target is the item itself).
       */
      actionIcon: re.node,

      /**
       * Position of secondary action IconButton.
       */
      actionPosition: re.oneOf(['left', 'right']),

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * Position of the title bar.
       */
      position: re.oneOf(['bottom', 'top']),

      /**
       * String or element serving as subtitle (support text).
       */
      subtitle: re.node,

      /**
       * Title to be displayed on item.
       */
      title: re.node,

      /**
       * Position of the title bar.
       * @deprecated Use position instead.
       */
      titlePosition: deprecatedPropType(re.oneOf(['bottom', 'top']), 'Use the `position` prop instead.')
    } : void 0;
    var ImageListItemBar$1 = withStyles(styles$1c, {
      name: 'MuiImageListItemBar'
    })(ImageListItemBar);

    var styles$1b = function styles(theme) {
      var light = theme.palette.type === 'light';
      var bottomLineColor = light ? 'rgba(0, 0, 0, 0.42)' : 'rgba(255, 255, 255, 0.7)';
      return {
        /* Styles applied to the root element. */
        root: {
          position: 'relative'
        },

        /* Styles applied to the root element if the component is a descendant of `FormControl`. */
        formControl: {
          'label + &': {
            marginTop: 16
          }
        },

        /* Styles applied to the root element if the component is focused. */
        focused: {},

        /* Styles applied to the root element if `disabled={true}`. */
        disabled: {},

        /* Styles applied to the root element if color secondary. */
        colorSecondary: {
          '&$underline:after': {
            borderBottomColor: theme.palette.secondary.main
          }
        },

        /* Styles applied to the root element if `disableUnderline={false}`. */
        underline: {
          '&:after': {
            borderBottom: "2px solid ".concat(theme.palette.primary.main),
            left: 0,
            bottom: 0,
            // Doing the other way around crash on IE 11 "''" https://github.com/cssinjs/jss/issues/242
            content: '""',
            position: 'absolute',
            right: 0,
            transform: 'scaleX(0)',
            transition: theme.transitions.create('transform', {
              duration: theme.transitions.duration.shorter,
              easing: theme.transitions.easing.easeOut
            }),
            pointerEvents: 'none' // Transparent to the hover style.

          },
          '&$focused:after': {
            transform: 'scaleX(1)'
          },
          '&$error:after': {
            borderBottomColor: theme.palette.error.main,
            transform: 'scaleX(1)' // error is always underlined in red

          },
          '&:before': {
            borderBottom: "1px solid ".concat(bottomLineColor),
            left: 0,
            bottom: 0,
            // Doing the other way around crash on IE 11 "''" https://github.com/cssinjs/jss/issues/242
            content: '"\\00a0"',
            position: 'absolute',
            right: 0,
            transition: theme.transitions.create('border-bottom-color', {
              duration: theme.transitions.duration.shorter
            }),
            pointerEvents: 'none' // Transparent to the hover style.

          },
          '&:hover:not($disabled):before': {
            borderBottom: "2px solid ".concat(theme.palette.text.primary),
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
              borderBottom: "1px solid ".concat(bottomLineColor)
            }
          },
          '&$disabled:before': {
            borderBottomStyle: 'dotted'
          }
        },

        /* Pseudo-class applied to the root element if `error={true}`. */
        error: {},

        /* Styles applied to the `input` element if `margin="dense"`. */
        marginDense: {},

        /* Styles applied to the root element if `multiline={true}`. */
        multiline: {},

        /* Styles applied to the root element if `fullWidth={true}`. */
        fullWidth: {},

        /* Styles applied to the `input` element. */
        input: {},

        /* Styles applied to the `input` element if `margin="dense"`. */
        inputMarginDense: {},

        /* Styles applied to the `input` element if `multiline={true}`. */
        inputMultiline: {},

        /* Styles applied to the `input` element if `type="search"`. */
        inputTypeSearch: {}
      };
    };
    var Input = /*#__PURE__*/React__namespace.forwardRef(function Input(props, ref) {
      var disableUnderline = props.disableUnderline,
          classes = props.classes,
          _props$fullWidth = props.fullWidth,
          fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,
          _props$inputComponent = props.inputComponent,
          inputComponent = _props$inputComponent === void 0 ? 'input' : _props$inputComponent,
          _props$multiline = props.multiline,
          multiline = _props$multiline === void 0 ? false : _props$multiline,
          _props$type = props.type,
          type = _props$type === void 0 ? 'text' : _props$type,
          other = _objectWithoutProperties(props, ["disableUnderline", "classes", "fullWidth", "inputComponent", "multiline", "type"]);

      return /*#__PURE__*/React__namespace.createElement(v, _extends$3({
        classes: _extends$3({}, classes, {
          root: r$1(classes.root, !disableUnderline && classes.underline),
          underline: null
        }),
        fullWidth: fullWidth,
        inputComponent: inputComponent,
        multiline: multiline,
        ref: ref,
        type: type
      }, other));
    });
    process.env.NODE_ENV !== "production" ? Input.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * This prop helps users to fill forms faster, especially on mobile devices.
       * The name can be confusing, as it's more like an autofill.
       * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
       */
      autoComplete: re.string,

      /**
       * If `true`, the `input` element will be focused during the first mount.
       */
      autoFocus: re.bool,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * The color of the component. It supports those theme colors that make sense for this component.
       */
      color: re.oneOf(['primary', 'secondary']),

      /**
       * The default `input` element value. Use when the component is not controlled.
       */
      defaultValue: re.any,

      /**
       * If `true`, the `input` element will be disabled.
       */
      disabled: re.bool,

      /**
       * If `true`, the input will not have an underline.
       */
      disableUnderline: re.bool,

      /**
       * End `InputAdornment` for this component.
       */
      endAdornment: re.node,

      /**
       * If `true`, the input will indicate an error. This is normally obtained via context from
       * FormControl.
       */
      error: re.bool,

      /**
       * If `true`, the input will take up the full width of its container.
       */
      fullWidth: re.bool,

      /**
       * The id of the `input` element.
       */
      id: re.string,

      /**
       * The component used for the `input` element.
       * Either a string to use a HTML element or a component.
       */
      inputComponent: re.elementType,

      /**
       * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
       */
      inputProps: re.object,

      /**
       * Pass a ref to the `input` element.
       */
      inputRef: refType$1,

      /**
       * If `dense`, will adjust vertical spacing. This is normally obtained via context from
       * FormControl.
       */
      margin: re.oneOf(['dense', 'none']),

      /**
       * Maximum number of rows to display when multiline option is set to true.
       */
      maxRows: re.oneOfType([re.number, re.string]),

      /**
       * If `true`, a textarea element will be rendered.
       */
      multiline: re.bool,

      /**
       * Name attribute of the `input` element.
       */
      name: re.string,

      /**
       * Callback fired when the value is changed.
       *
       * @param {object} event The event source of the callback.
       * You can pull out the new value by accessing `event.target.value` (string).
       */
      onChange: re.func,

      /**
       * The short hint displayed in the input before the user enters a value.
       */
      placeholder: re.string,

      /**
       * It prevents the user from changing the value of the field
       * (not from interacting with the field).
       */
      readOnly: re.bool,

      /**
       * If `true`, the `input` element will be required.
       */
      required: re.bool,

      /**
       * Number of rows to display when multiline option is set to true.
       */
      rows: re.oneOfType([re.number, re.string]),

      /**
       * Start `InputAdornment` for this component.
       */
      startAdornment: re.node,

      /**
       * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
       */
      type: re.string,

      /**
       * The value of the `input` element, required for a controlled component.
       */
      value: re.any
    } : void 0;
    Input.muiName = 'Input';
    var Input$1 = withStyles(styles$1b, {
      name: 'MuiInput'
    })(Input);

    var styles$1a = {
      /* Styles applied to the root element. */
      root: {
        display: 'flex',
        height: '0.01em',
        // Fix IE 11 flexbox alignment. To remove at some point.
        maxHeight: '2em',
        alignItems: 'center',
        whiteSpace: 'nowrap'
      },

      /* Styles applied to the root element if `variant="filled"`. */
      filled: {
        '&$positionStart:not($hiddenLabel)': {
          marginTop: 16
        }
      },

      /* Styles applied to the root element if `position="start"`. */
      positionStart: {
        marginRight: 8
      },

      /* Styles applied to the root element if `position="end"`. */
      positionEnd: {
        marginLeft: 8
      },

      /* Styles applied to the root element if `disablePointerEvents=true`. */
      disablePointerEvents: {
        pointerEvents: 'none'
      },

      /* Styles applied if the adornment is used inside <FormControl hiddenLabel />. */
      hiddenLabel: {},

      /* Styles applied if the adornment is used inside <FormControl margin="dense" />. */
      marginDense: {}
    };
    var InputAdornment = /*#__PURE__*/React__namespace.forwardRef(function InputAdornment(props, ref) {
      var children = props.children,
          classes = props.classes,
          className = props.className,
          _props$component = props.component,
          Component = _props$component === void 0 ? 'div' : _props$component,
          _props$disablePointer = props.disablePointerEvents,
          disablePointerEvents = _props$disablePointer === void 0 ? false : _props$disablePointer,
          _props$disableTypogra = props.disableTypography,
          disableTypography = _props$disableTypogra === void 0 ? false : _props$disableTypogra,
          position = props.position,
          variantProp = props.variant,
          other = _objectWithoutProperties(props, ["children", "classes", "className", "component", "disablePointerEvents", "disableTypography", "position", "variant"]);

      var muiFormControl = useFormControl$1() || {};
      var variant = variantProp;

      if (variantProp && muiFormControl.variant) {
        if (process.env.NODE_ENV !== 'production') {
          if (variantProp === muiFormControl.variant) {
            console.error('Material-UI: The `InputAdornment` variant infers the variant prop ' + 'you do not have to provide one.');
          }
        }
      }

      if (muiFormControl && !variant) {
        variant = muiFormControl.variant;
      }

      return /*#__PURE__*/React__namespace.createElement(FormControlContext$1.Provider, {
        value: null
      }, /*#__PURE__*/React__namespace.createElement(Component, _extends$3({
        className: r$1(classes.root, className, position === 'end' ? classes.positionEnd : classes.positionStart, disablePointerEvents && classes.disablePointerEvents, muiFormControl.hiddenLabel && classes.hiddenLabel, variant === 'filled' && classes.filled, muiFormControl.margin === 'dense' && classes.marginDense),
        ref: ref
      }, other), typeof children === 'string' && !disableTypography ? /*#__PURE__*/React__namespace.createElement(Typography$2, {
        color: "textSecondary"
      }, children) : children));
    });
    process.env.NODE_ENV !== "production" ? InputAdornment.propTypes = {
      /**
       * The content of the component, normally an `IconButton` or string.
       */
      children: re.node.isRequired,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object.isRequired,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: re
      /* @typescript-to-proptypes-ignore */
      .elementType,

      /**
       * Disable pointer events on the root.
       * This allows for the content of the adornment to focus the input on click.
       */
      disablePointerEvents: re.bool,

      /**
       * If children is a string then disable wrapping in a Typography component.
       */
      disableTypography: re.bool,

      /**
       * @ignore
       */
      muiFormControl: re.object,

      /**
       * The position this adornment should appear relative to the `Input`.
       */
      position: re.oneOf(['start', 'end']).isRequired,

      /**
       * The variant to use.
       * Note: If you are using the `TextField` component or the `FormControl` component
       * you do not have to set this manually.
       */
      variant: re.oneOf(['standard', 'outlined', 'filled'])
    } : void 0;
    var InputAdornment$1 = withStyles(styles$1a, {
      name: 'MuiInputAdornment'
    })(InputAdornment);

    var styles$19 = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          display: 'block',
          transformOrigin: 'top left'
        },

        /* Pseudo-class applied to the root element if `focused={true}`. */
        focused: {},

        /* Pseudo-class applied to the root element if `disabled={true}`. */
        disabled: {},

        /* Pseudo-class applied to the root element if `error={true}`. */
        error: {},

        /* Pseudo-class applied to the root element if `required={true}`. */
        required: {},

        /* Pseudo-class applied to the asterisk element. */
        asterisk: {},

        /* Styles applied to the root element if the component is a descendant of `FormControl`. */
        formControl: {
          position: 'absolute',
          left: 0,
          top: 0,
          // slight alteration to spec spacing to match visual spec result
          transform: 'translate(0, 24px) scale(1)'
        },

        /* Styles applied to the root element if `margin="dense"`. */
        marginDense: {
          // Compensation for the `Input.inputDense` style.
          transform: 'translate(0, 21px) scale(1)'
        },

        /* Styles applied to the `input` element if `shrink={true}`. */
        shrink: {
          transform: 'translate(0, 1.5px) scale(0.75)',
          transformOrigin: 'top left'
        },

        /* Styles applied to the `input` element if `disableAnimation={false}`. */
        animated: {
          transition: theme.transitions.create(['color', 'transform'], {
            duration: theme.transitions.duration.shorter,
            easing: theme.transitions.easing.easeOut
          })
        },

        /* Styles applied to the root element if `variant="filled"`. */
        filled: {
          // Chrome's autofill feature gives the input field a yellow background.
          // Since the input field is behind the label in the HTML tree,
          // the input field is drawn last and hides the label with an opaque background color.
          // zIndex: 1 will raise the label above opaque background-colors of input.
          zIndex: 1,
          pointerEvents: 'none',
          transform: 'translate(12px, 20px) scale(1)',
          '&$marginDense': {
            transform: 'translate(12px, 17px) scale(1)'
          },
          '&$shrink': {
            transform: 'translate(12px, 10px) scale(0.75)',
            '&$marginDense': {
              transform: 'translate(12px, 7px) scale(0.75)'
            }
          }
        },

        /* Styles applied to the root element if `variant="outlined"`. */
        outlined: {
          // see comment above on filled.zIndex
          zIndex: 1,
          pointerEvents: 'none',
          transform: 'translate(14px, 20px) scale(1)',
          '&$marginDense': {
            transform: 'translate(14px, 12px) scale(1)'
          },
          '&$shrink': {
            transform: 'translate(14px, -6px) scale(0.75)'
          }
        }
      };
    };
    var InputLabel = /*#__PURE__*/React__namespace.forwardRef(function InputLabel(props, ref) {
      var classes = props.classes,
          className = props.className,
          _props$disableAnimati = props.disableAnimation,
          disableAnimation = _props$disableAnimati === void 0 ? false : _props$disableAnimati;
          props.margin;
          var shrinkProp = props.shrink;
          props.variant;
          var other = _objectWithoutProperties(props, ["classes", "className", "disableAnimation", "margin", "shrink", "variant"]);

      var muiFormControl = useFormControl();
      var shrink = shrinkProp;

      if (typeof shrink === 'undefined' && muiFormControl) {
        shrink = muiFormControl.filled || muiFormControl.focused || muiFormControl.adornedStart;
      }

      var fcs = formControlState({
        props: props,
        muiFormControl: muiFormControl,
        states: ['margin', 'variant']
      });
      return /*#__PURE__*/React__namespace.createElement(FormLabel$1, _extends$3({
        "data-shrink": shrink,
        className: r$1(classes.root, className, muiFormControl && classes.formControl, !disableAnimation && classes.animated, shrink && classes.shrink, fcs.margin === 'dense' && classes.marginDense, {
          'filled': classes.filled,
          'outlined': classes.outlined
        }[fcs.variant]),
        classes: {
          focused: classes.focused,
          disabled: classes.disabled,
          error: classes.error,
          required: classes.required,
          asterisk: classes.asterisk
        },
        ref: ref
      }, other));
    });
    process.env.NODE_ENV !== "production" ? InputLabel.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * The contents of the `InputLabel`.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * The color of the component. It supports those theme colors that make sense for this component.
       */
      color: re.oneOf(['primary', 'secondary']),

      /**
       * If `true`, the transition animation is disabled.
       */
      disableAnimation: re.bool,

      /**
       * If `true`, apply disabled class.
       */
      disabled: re.bool,

      /**
       * If `true`, the label will be displayed in an error state.
       */
      error: re.bool,

      /**
       * If `true`, the input of this label is focused.
       */
      focused: re.bool,

      /**
       * If `dense`, will adjust vertical spacing. This is normally obtained via context from
       * FormControl.
       */
      margin: re.oneOf(['dense']),

      /**
       * if `true`, the label will indicate that the input is required.
       */
      required: re.bool,

      /**
       * If `true`, the label is shrunk.
       */
      shrink: re.bool,

      /**
       * The variant to use.
       */
      variant: re.oneOf(['filled', 'outlined', 'standard'])
    } : void 0;
    var H = withStyles(styles$19, {
      name: 'MuiInputLabel'
    })(InputLabel);

    var TRANSITION_DURATION = 4; // seconds

    var styles$18 = function styles(theme) {
      var getColor = function getColor(color) {
        return theme.palette.type === 'light' ? lighten(color, 0.62) : darken(color, 0.5);
      };

      var backgroundPrimary = getColor(theme.palette.primary.main);
      var backgroundSecondary = getColor(theme.palette.secondary.main);
      return {
        /* Styles applied to the root element. */
        root: {
          position: 'relative',
          overflow: 'hidden',
          height: 4,
          '@media print': {
            colorAdjust: 'exact'
          }
        },

        /* Styles applied to the root and bar2 element if `color="primary"`; bar2 if `variant="buffer"`. */
        colorPrimary: {
          backgroundColor: backgroundPrimary
        },

        /* Styles applied to the root and bar2 elements if `color="secondary"`; bar2 if `variant="buffer"`. */
        colorSecondary: {
          backgroundColor: backgroundSecondary
        },

        /* Styles applied to the root element if `variant="determinate"`. */
        determinate: {},

        /* Styles applied to the root element if `variant="indeterminate"`. */
        indeterminate: {},

        /* Styles applied to the root element if `variant="buffer"`. */
        buffer: {
          backgroundColor: 'transparent'
        },

        /* Styles applied to the root element if `variant="query"`. */
        query: {
          transform: 'rotate(180deg)'
        },

        /* Styles applied to the additional bar element if `variant="buffer"`. */
        dashed: {
          position: 'absolute',
          marginTop: 0,
          height: '100%',
          width: '100%',
          animation: '$buffer 3s infinite linear'
        },

        /* Styles applied to the additional bar element if `variant="buffer"` and `color="primary"`. */
        dashedColorPrimary: {
          backgroundImage: "radial-gradient(".concat(backgroundPrimary, " 0%, ").concat(backgroundPrimary, " 16%, transparent 42%)"),
          backgroundSize: '10px 10px',
          backgroundPosition: '0 -23px'
        },

        /* Styles applied to the additional bar element if `variant="buffer"` and `color="secondary"`. */
        dashedColorSecondary: {
          backgroundImage: "radial-gradient(".concat(backgroundSecondary, " 0%, ").concat(backgroundSecondary, " 16%, transparent 42%)"),
          backgroundSize: '10px 10px',
          backgroundPosition: '0 -23px'
        },

        /* Styles applied to the layered bar1 and bar2 elements. */
        bar: {
          width: '100%',
          position: 'absolute',
          left: 0,
          bottom: 0,
          top: 0,
          transition: 'transform 0.2s linear',
          transformOrigin: 'left'
        },

        /* Styles applied to the bar elements if `color="primary"`; bar2 if `variant` not "buffer". */
        barColorPrimary: {
          backgroundColor: theme.palette.primary.main
        },

        /* Styles applied to the bar elements if `color="secondary"`; bar2 if `variant` not "buffer". */
        barColorSecondary: {
          backgroundColor: theme.palette.secondary.main
        },

        /* Styles applied to the bar1 element if `variant="indeterminate or query"`. */
        bar1Indeterminate: {
          width: 'auto',
          animation: '$indeterminate1 2.1s cubic-bezier(0.65, 0.815, 0.735, 0.395) infinite'
        },

        /* Styles applied to the bar1 element if `variant="determinate"`. */
        bar1Determinate: {
          transition: "transform .".concat(TRANSITION_DURATION, "s linear")
        },

        /* Styles applied to the bar1 element if `variant="buffer"`. */
        bar1Buffer: {
          zIndex: 1,
          transition: "transform .".concat(TRANSITION_DURATION, "s linear")
        },

        /* Styles applied to the bar2 element if `variant="indeterminate or query"`. */
        bar2Indeterminate: {
          width: 'auto',
          animation: '$indeterminate2 2.1s cubic-bezier(0.165, 0.84, 0.44, 1) 1.15s infinite'
        },

        /* Styles applied to the bar2 element if `variant="buffer"`. */
        bar2Buffer: {
          transition: "transform .".concat(TRANSITION_DURATION, "s linear")
        },
        // Legends:
        // || represents the viewport
        // -  represents a light background
        // x  represents a dark background
        '@keyframes indeterminate1': {
          //  |-----|---x-||-----||-----|
          '0%': {
            left: '-35%',
            right: '100%'
          },
          //  |-----|-----||-----||xxxx-|
          '60%': {
            left: '100%',
            right: '-90%'
          },
          '100%': {
            left: '100%',
            right: '-90%'
          }
        },
        '@keyframes indeterminate2': {
          //  |xxxxx|xxxxx||-----||-----|
          '0%': {
            left: '-200%',
            right: '100%'
          },
          //  |-----|-----||-----||-x----|
          '60%': {
            left: '107%',
            right: '-8%'
          },
          '100%': {
            left: '107%',
            right: '-8%'
          }
        },
        '@keyframes buffer': {
          '0%': {
            opacity: 1,
            backgroundPosition: '0 -23px'
          },
          '50%': {
            opacity: 0,
            backgroundPosition: '0 -23px'
          },
          '100%': {
            opacity: 1,
            backgroundPosition: '-200px -23px'
          }
        }
      };
    };
    /**
     * ## ARIA
     *
     * If the progress bar is describing the loading progress of a particular region of a page,
     * you should use `aria-describedby` to point to the progress bar, and set the `aria-busy`
     * attribute to `true` on that region until it has finished loading.
     */

    var LinearProgress = /*#__PURE__*/React__namespace.forwardRef(function LinearProgress(props, ref) {
      var classes = props.classes,
          className = props.className,
          _props$color = props.color,
          color = _props$color === void 0 ? 'primary' : _props$color,
          value = props.value,
          valueBuffer = props.valueBuffer,
          _props$variant = props.variant,
          variant = _props$variant === void 0 ? 'indeterminate' : _props$variant,
          other = _objectWithoutProperties(props, ["classes", "className", "color", "value", "valueBuffer", "variant"]);

      var theme = useTheme();
      var rootProps = {};
      var inlineStyles = {
        bar1: {},
        bar2: {}
      };

      if (variant === 'determinate' || variant === 'buffer') {
        if (value !== undefined) {
          rootProps['aria-valuenow'] = Math.round(value);
          rootProps['aria-valuemin'] = 0;
          rootProps['aria-valuemax'] = 100;
          var transform = value - 100;

          if (theme.direction === 'rtl') {
            transform = -transform;
          }

          inlineStyles.bar1.transform = "translateX(".concat(transform, "%)");
        } else if (process.env.NODE_ENV !== 'production') {
          console.error('Material-UI: You need to provide a value prop ' + 'when using the determinate or buffer variant of LinearProgress .');
        }
      }

      if (variant === 'buffer') {
        if (valueBuffer !== undefined) {
          var _transform = (valueBuffer || 0) - 100;

          if (theme.direction === 'rtl') {
            _transform = -_transform;
          }

          inlineStyles.bar2.transform = "translateX(".concat(_transform, "%)");
        } else if (process.env.NODE_ENV !== 'production') {
          console.error('Material-UI: You need to provide a valueBuffer prop ' + 'when using the buffer variant of LinearProgress.');
        }
      }

      return /*#__PURE__*/React__namespace.createElement("div", _extends$3({
        className: r$1(classes.root, classes["color".concat(capitalize(color))], className, {
          'determinate': classes.determinate,
          'indeterminate': classes.indeterminate,
          'buffer': classes.buffer,
          'query': classes.query
        }[variant]),
        role: "progressbar"
      }, rootProps, {
        ref: ref
      }, other), variant === 'buffer' ? /*#__PURE__*/React__namespace.createElement("div", {
        className: r$1(classes.dashed, classes["dashedColor".concat(capitalize(color))])
      }) : null, /*#__PURE__*/React__namespace.createElement("div", {
        className: r$1(classes.bar, classes["barColor".concat(capitalize(color))], (variant === 'indeterminate' || variant === 'query') && classes.bar1Indeterminate, {
          'determinate': classes.bar1Determinate,
          'buffer': classes.bar1Buffer
        }[variant]),
        style: inlineStyles.bar1
      }), variant === 'determinate' ? null : /*#__PURE__*/React__namespace.createElement("div", {
        className: r$1(classes.bar, (variant === 'indeterminate' || variant === 'query') && classes.bar2Indeterminate, variant === 'buffer' ? [classes["color".concat(capitalize(color))], classes.bar2Buffer] : classes["barColor".concat(capitalize(color))]),
        style: inlineStyles.bar2
      }));
    });
    process.env.NODE_ENV !== "production" ? LinearProgress.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * The color of the component. It supports those theme colors that make sense for this component.
       */
      color: re.oneOf(['primary', 'secondary']),

      /**
       * The value of the progress indicator for the determinate and buffer variants.
       * Value between 0 and 100.
       */
      value: re.number,

      /**
       * The value for the buffer variant.
       * Value between 0 and 100.
       */
      valueBuffer: re.number,

      /**
       * The variant to use.
       * Use indeterminate or query when there is no progress value.
       */
      variant: re.oneOf(['buffer', 'determinate', 'indeterminate', 'query'])
    } : void 0;
    var LinearProgress$1 = withStyles(styles$18, {
      name: 'MuiLinearProgress'
    })(LinearProgress);

    var styles$17 = {
      /* Styles applied to the root element. */
      root: {},

      /* Styles applied to the root element if `underline="none"`. */
      underlineNone: {
        textDecoration: 'none'
      },

      /* Styles applied to the root element if `underline="hover"`. */
      underlineHover: {
        textDecoration: 'none',
        '&:hover': {
          textDecoration: 'underline'
        }
      },

      /* Styles applied to the root element if `underline="always"`. */
      underlineAlways: {
        textDecoration: 'underline'
      },
      // Same reset as ButtonBase.root

      /* Styles applied to the root element if `component="button"`. */
      button: {
        position: 'relative',
        WebkitTapHighlightColor: 'transparent',
        backgroundColor: 'transparent',
        // Reset default value
        // We disable the focus ring for mouse, touch and keyboard users.
        outline: 0,
        border: 0,
        margin: 0,
        // Remove the margin in Safari
        borderRadius: 0,
        padding: 0,
        // Remove the padding in Firefox
        cursor: 'pointer',
        userSelect: 'none',
        verticalAlign: 'middle',
        '-moz-appearance': 'none',
        // Reset
        '-webkit-appearance': 'none',
        // Reset
        '&::-moz-focus-inner': {
          borderStyle: 'none' // Remove Firefox dotted outline.

        },
        '&$focusVisible': {
          outline: 'auto'
        }
      },

      /* Pseudo-class applied to the root element if the link is keyboard focused. */
      focusVisible: {}
    };
    var Link = /*#__PURE__*/React__namespace.forwardRef(function Link(props, ref) {
      var classes = props.classes,
          className = props.className,
          _props$color = props.color,
          color = _props$color === void 0 ? 'primary' : _props$color,
          _props$component = props.component,
          component = _props$component === void 0 ? 'a' : _props$component,
          onBlur = props.onBlur,
          onFocus = props.onFocus,
          TypographyClasses = props.TypographyClasses,
          _props$underline = props.underline,
          underline = _props$underline === void 0 ? 'hover' : _props$underline,
          _props$variant = props.variant,
          variant = _props$variant === void 0 ? 'inherit' : _props$variant,
          other = _objectWithoutProperties(props, ["classes", "className", "color", "component", "onBlur", "onFocus", "TypographyClasses", "underline", "variant"]);

      var _useIsFocusVisible = useIsFocusVisible(),
          isFocusVisible = _useIsFocusVisible.isFocusVisible,
          onBlurVisible = _useIsFocusVisible.onBlurVisible,
          focusVisibleRef = _useIsFocusVisible.ref;

      var _React$useState = React__namespace.useState(false),
          focusVisible = _React$useState[0],
          setFocusVisible = _React$useState[1];

      var handlerRef = useForkRef(ref, focusVisibleRef);

      var handleBlur = function handleBlur(event) {
        if (focusVisible) {
          onBlurVisible();
          setFocusVisible(false);
        }

        if (onBlur) {
          onBlur(event);
        }
      };

      var handleFocus = function handleFocus(event) {
        if (isFocusVisible(event)) {
          setFocusVisible(true);
        }

        if (onFocus) {
          onFocus(event);
        }
      };

      return /*#__PURE__*/React__namespace.createElement(Typography$2, _extends$3({
        className: r$1(classes.root, classes["underline".concat(capitalize(underline))], className, focusVisible && classes.focusVisible, component === 'button' && classes.button),
        classes: TypographyClasses,
        color: color,
        component: component,
        onBlur: handleBlur,
        onFocus: handleFocus,
        ref: handlerRef,
        variant: variant
      }, other));
    });
    process.env.NODE_ENV !== "production" ? Link.propTypes = {
      /**
       * The content of the link.
       */
      children: re.node.isRequired,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object.isRequired,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * The color of the link.
       */
      color: re.oneOf(['initial', 'inherit', 'primary', 'secondary', 'textPrimary', 'textSecondary', 'error']),

      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: elementTypeAcceptingRef$1,

      /**
       * @ignore
       */
      onBlur: re.func,

      /**
       * @ignore
       */
      onFocus: re.func,

      /**
       * `classes` prop applied to the [`Typography`](/api/typography/) element.
       */
      TypographyClasses: re.object,

      /**
       * Controls when the link should have an underline.
       */
      underline: re.oneOf(['none', 'hover', 'always']),

      /**
       * Applies the theme typography styles.
       */
      variant: re.string
    } : void 0;
    var Link$1 = withStyles(styles$17, {
      name: 'MuiLink'
    })(Link);

    /**
     * @ignore - internal component.
     */

    var ListContext = React__namespace.createContext({});

    if (process.env.NODE_ENV !== 'production') {
      ListContext.displayName = 'ListContext';
    }

    var ListContext$1 = ListContext;

    var styles$16 = {
      /* Styles applied to the root element. */
      root: {
        listStyle: 'none',
        margin: 0,
        padding: 0,
        position: 'relative'
      },

      /* Styles applied to the root element if `disablePadding={false}`. */
      padding: {
        paddingTop: 8,
        paddingBottom: 8
      },

      /* Styles applied to the root element if dense. */
      dense: {},

      /* Styles applied to the root element if a `subheader` is provided. */
      subheader: {
        paddingTop: 0
      }
    };
    var List$1 = /*#__PURE__*/React__namespace.forwardRef(function List(props, ref) {
      var children = props.children,
          classes = props.classes,
          className = props.className,
          _props$component = props.component,
          Component = _props$component === void 0 ? 'ul' : _props$component,
          _props$dense = props.dense,
          dense = _props$dense === void 0 ? false : _props$dense,
          _props$disablePadding = props.disablePadding,
          disablePadding = _props$disablePadding === void 0 ? false : _props$disablePadding,
          subheader = props.subheader,
          other = _objectWithoutProperties(props, ["children", "classes", "className", "component", "dense", "disablePadding", "subheader"]);

      var context = React__namespace.useMemo(function () {
        return {
          dense: dense
        };
      }, [dense]);
      return /*#__PURE__*/React__namespace.createElement(ListContext$1.Provider, {
        value: context
      }, /*#__PURE__*/React__namespace.createElement(Component, _extends$3({
        className: r$1(classes.root, className, dense && classes.dense, !disablePadding && classes.padding, subheader && classes.subheader),
        ref: ref
      }, other), subheader, children));
    });
    process.env.NODE_ENV !== "production" ? List$1.propTypes = {
      /**
       * The content of the component.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object.isRequired,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: re
      /* @typescript-to-proptypes-ignore */
      .elementType,

      /**
       * If `true`, compact vertical padding designed for keyboard and mouse input will be used for
       * the list and list items.
       * The prop is available to descendant components as the `dense` context.
       */
      dense: re.bool,

      /**
       * If `true`, vertical padding will be removed from the list.
       */
      disablePadding: re.bool,

      /**
       * The content of the subheader, normally `ListSubheader`.
       */
      subheader: re.node
    } : void 0;
    var List$2 = withStyles(styles$16, {
      name: 'MuiList'
    })(List$1);

    var styles$15 = function styles(theme) {
      return {
        /* Styles applied to the (normally root) `component` element. May be wrapped by a `container`. */
        root: {
          display: 'flex',
          justifyContent: 'flex-start',
          alignItems: 'center',
          position: 'relative',
          textDecoration: 'none',
          width: '100%',
          boxSizing: 'border-box',
          textAlign: 'left',
          paddingTop: 8,
          paddingBottom: 8,
          '&$focusVisible': {
            backgroundColor: theme.palette.action.selected
          },
          '&$selected, &$selected:hover': {
            backgroundColor: theme.palette.action.selected
          },
          '&$disabled': {
            opacity: 0.5
          }
        },

        /* Styles applied to the `container` element if `children` includes `ListItemSecondaryAction`. */
        container: {
          position: 'relative'
        },

        /* Pseudo-class applied to the `component`'s `focusVisibleClassName` prop if `button={true}`. */
        focusVisible: {},

        /* Styles applied to the `component` element if dense. */
        dense: {
          paddingTop: 4,
          paddingBottom: 4
        },

        /* Styles applied to the `component` element if `alignItems="flex-start"`. */
        alignItemsFlexStart: {
          alignItems: 'flex-start'
        },

        /* Pseudo-class applied to the inner `component` element if `disabled={true}`. */
        disabled: {},

        /* Styles applied to the inner `component` element if `divider={true}`. */
        divider: {
          borderBottom: "1px solid ".concat(theme.palette.divider),
          backgroundClip: 'padding-box'
        },

        /* Styles applied to the inner `component` element if `disableGutters={false}`. */
        gutters: {
          paddingLeft: 16,
          paddingRight: 16
        },

        /* Styles applied to the inner `component` element if `button={true}`. */
        button: {
          transition: theme.transitions.create('background-color', {
            duration: theme.transitions.duration.shortest
          }),
          '&:hover': {
            textDecoration: 'none',
            backgroundColor: theme.palette.action.hover,
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
              backgroundColor: 'transparent'
            }
          }
        },

        /* Styles applied to the `component` element if `children` includes `ListItemSecondaryAction`. */
        secondaryAction: {
          // Add some space to avoid collision as `ListItemSecondaryAction`
          // is absolutely positioned.
          paddingRight: 48
        },

        /* Pseudo-class applied to the root element if `selected={true}`. */
        selected: {}
      };
    };
    var useEnhancedEffect$4 = typeof window === 'undefined' ? React__namespace.useEffect : React__namespace.useLayoutEffect;
    /**
     * Uses an additional container component if `ListItemSecondaryAction` is the last child.
     */

    var ListItem$1 = /*#__PURE__*/React__namespace.forwardRef(function ListItem(props, ref) {
      var _props$alignItems = props.alignItems,
          alignItems = _props$alignItems === void 0 ? 'center' : _props$alignItems,
          _props$autoFocus = props.autoFocus,
          autoFocus = _props$autoFocus === void 0 ? false : _props$autoFocus,
          _props$button = props.button,
          button = _props$button === void 0 ? false : _props$button,
          childrenProp = props.children,
          classes = props.classes,
          className = props.className,
          componentProp = props.component,
          _props$ContainerCompo = props.ContainerComponent,
          ContainerComponent = _props$ContainerCompo === void 0 ? 'li' : _props$ContainerCompo,
          _props$ContainerProps = props.ContainerProps;
      _props$ContainerProps = _props$ContainerProps === void 0 ? {} : _props$ContainerProps;

      var ContainerClassName = _props$ContainerProps.className,
          ContainerProps = _objectWithoutProperties(_props$ContainerProps, ["className"]),
          _props$dense = props.dense,
          dense = _props$dense === void 0 ? false : _props$dense,
          _props$disabled = props.disabled,
          disabled = _props$disabled === void 0 ? false : _props$disabled,
          _props$disableGutters = props.disableGutters,
          disableGutters = _props$disableGutters === void 0 ? false : _props$disableGutters,
          _props$divider = props.divider,
          divider = _props$divider === void 0 ? false : _props$divider,
          focusVisibleClassName = props.focusVisibleClassName,
          _props$selected = props.selected,
          selected = _props$selected === void 0 ? false : _props$selected,
          other = _objectWithoutProperties(props, ["alignItems", "autoFocus", "button", "children", "classes", "className", "component", "ContainerComponent", "ContainerProps", "dense", "disabled", "disableGutters", "divider", "focusVisibleClassName", "selected"]);

      var context = React__namespace.useContext(ListContext$1);
      var childContext = {
        dense: dense || context.dense || false,
        alignItems: alignItems
      };
      var listItemRef = React__namespace.useRef(null);
      useEnhancedEffect$4(function () {
        if (autoFocus) {
          if (listItemRef.current) {
            listItemRef.current.focus();
          } else if (process.env.NODE_ENV !== 'production') {
            console.error('Material-UI: Unable to set focus to a ListItem whose component has not been rendered.');
          }
        }
      }, [autoFocus]);
      var children = React__namespace.Children.toArray(childrenProp);
      var hasSecondaryAction = children.length && isMuiElement(children[children.length - 1], ['ListItemSecondaryAction']);
      var handleOwnRef = React__namespace.useCallback(function (instance) {
        // #StrictMode ready
        listItemRef.current = ReactDOM__namespace.findDOMNode(instance);
      }, []);
      var handleRef = useForkRef(handleOwnRef, ref);

      var componentProps = _extends$3({
        className: r$1(classes.root, className, childContext.dense && classes.dense, !disableGutters && classes.gutters, divider && classes.divider, disabled && classes.disabled, button && classes.button, alignItems !== "center" && classes.alignItemsFlexStart, hasSecondaryAction && classes.secondaryAction, selected && classes.selected),
        disabled: disabled
      }, other);

      var Component = componentProp || 'li';

      if (button) {
        componentProps.component = componentProp || 'div';
        componentProps.focusVisibleClassName = r$1(classes.focusVisible, focusVisibleClassName);
        Component = ButtonBase$1;
      }

      if (hasSecondaryAction) {
        // Use div by default.
        Component = !componentProps.component && !componentProp ? 'div' : Component; // Avoid nesting of li > li.

        if (ContainerComponent === 'li') {
          if (Component === 'li') {
            Component = 'div';
          } else if (componentProps.component === 'li') {
            componentProps.component = 'div';
          }
        }

        return /*#__PURE__*/React__namespace.createElement(ListContext$1.Provider, {
          value: childContext
        }, /*#__PURE__*/React__namespace.createElement(ContainerComponent, _extends$3({
          className: r$1(classes.container, ContainerClassName),
          ref: handleRef
        }, ContainerProps), /*#__PURE__*/React__namespace.createElement(Component, componentProps, children), children.pop()));
      }

      return /*#__PURE__*/React__namespace.createElement(ListContext$1.Provider, {
        value: childContext
      }, /*#__PURE__*/React__namespace.createElement(Component, _extends$3({
        ref: handleRef
      }, componentProps), children));
    });
    process.env.NODE_ENV !== "production" ? ListItem$1.propTypes = {
      /**
       * Defines the `align-items` style property.
       */
      alignItems: re.oneOf(['flex-start', 'center']),

      /**
       * If `true`, the list item will be focused during the first mount.
       * Focus will also be triggered if the value changes from false to true.
       */
      autoFocus: re.bool,

      /**
       * If `true`, the list item will be a button (using `ButtonBase`). Props intended
       * for `ButtonBase` can then be applied to `ListItem`.
       */
      button: re.bool,

      /**
       * The content of the component. If a `ListItemSecondaryAction` is used it must
       * be the last child.
       */
      children: chainPropTypes$1(re.node, function (props) {
        var children = React__namespace.Children.toArray(props.children); // React.Children.toArray(props.children).findLastIndex(isListItemSecondaryAction)

        var secondaryActionIndex = -1;

        for (var i = children.length - 1; i >= 0; i -= 1) {
          var child = children[i];

          if (isMuiElement(child, ['ListItemSecondaryAction'])) {
            secondaryActionIndex = i;
            break;
          }
        } //  is ListItemSecondaryAction the last child of ListItem


        if (secondaryActionIndex !== -1 && secondaryActionIndex !== children.length - 1) {
          return new Error('Material-UI: You used an element after ListItemSecondaryAction. ' + 'For ListItem to detect that it has a secondary action ' + 'you must pass it as the last child to ListItem.');
        }

        return null;
      }),

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object.isRequired,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       * By default, it's a `li` when `button` is `false` and a `div` when `button` is `true`.
       */
      component: re
      /* @typescript-to-proptypes-ignore */
      .elementType,

      /**
       * The container component used when a `ListItemSecondaryAction` is the last child.
       */
      ContainerComponent: re.elementType,

      /**
       * Props applied to the container component if used.
       */
      ContainerProps: re.object,

      /**
       * If `true`, compact vertical padding designed for keyboard and mouse input will be used.
       */
      dense: re.bool,

      /**
       * If `true`, the list item will be disabled.
       */
      disabled: re.bool,

      /**
       * If `true`, the left and right padding is removed.
       */
      disableGutters: re.bool,

      /**
       * If `true`, a 1px light border is added to the bottom of the list item.
       */
      divider: re.bool,

      /**
       * @ignore
       */
      focusVisibleClassName: re.string,

      /**
       * Use to apply selected styling.
       */
      selected: re.bool
    } : void 0;
    var ListItem$2 = withStyles(styles$15, {
      name: 'MuiListItem'
    })(ListItem$1);

    var styles$14 = {
      /* Styles applied to the root element. */
      root: {
        minWidth: 56,
        flexShrink: 0
      },

      /* Styles applied to the root element when the parent `ListItem` uses `alignItems="flex-start"`. */
      alignItemsFlexStart: {
        marginTop: 8
      }
    };
    /**
     * A simple wrapper to apply `List` styles to an `Avatar`.
     */

    var ListItemAvatar = /*#__PURE__*/React__namespace.forwardRef(function ListItemAvatar(props, ref) {
      var classes = props.classes,
          className = props.className,
          other = _objectWithoutProperties(props, ["classes", "className"]);

      var context = React__namespace.useContext(ListContext$1);
      return /*#__PURE__*/React__namespace.createElement("div", _extends$3({
        className: r$1(classes.root, className, context.alignItems === 'flex-start' && classes.alignItemsFlexStart),
        ref: ref
      }, other));
    });
    process.env.NODE_ENV !== "production" ? ListItemAvatar.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * The content of the component – normally `Avatar`.
       */
      children: re.element.isRequired,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string
    } : void 0;
    var ListItemAvatar$1 = withStyles(styles$14, {
      name: 'MuiListItemAvatar'
    })(ListItemAvatar);

    var styles$13 = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          minWidth: 56,
          color: theme.palette.action.active,
          flexShrink: 0,
          display: 'inline-flex'
        },

        /* Styles applied to the root element when the parent `ListItem` uses `alignItems="flex-start"`. */
        alignItemsFlexStart: {
          marginTop: 8
        }
      };
    };
    /**
     * A simple wrapper to apply `List` styles to an `Icon` or `SvgIcon`.
     */

    var ListItemIcon = /*#__PURE__*/React__namespace.forwardRef(function ListItemIcon(props, ref) {
      var classes = props.classes,
          className = props.className,
          other = _objectWithoutProperties(props, ["classes", "className"]);

      var context = React__namespace.useContext(ListContext$1);
      return /*#__PURE__*/React__namespace.createElement("div", _extends$3({
        className: r$1(classes.root, className, context.alignItems === 'flex-start' && classes.alignItemsFlexStart),
        ref: ref
      }, other));
    });
    process.env.NODE_ENV !== "production" ? ListItemIcon.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * The content of the component, normally `Icon`, `SvgIcon`,
       * or a `@material-ui/icons` SVG icon element.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string
    } : void 0;
    var A = withStyles(styles$13, {
      name: 'MuiListItemIcon'
    })(ListItemIcon);

    var styles$12 = {
      /* Styles applied to the root element. */
      root: {
        position: 'absolute',
        right: 16,
        top: '50%',
        transform: 'translateY(-50%)'
      }
    };
    /**
     * Must be used as the last child of ListItem to function properly.
     */

    var ListItemSecondaryAction = /*#__PURE__*/React__namespace.forwardRef(function ListItemSecondaryAction(props, ref) {
      var classes = props.classes,
          className = props.className,
          other = _objectWithoutProperties(props, ["classes", "className"]);

      return /*#__PURE__*/React__namespace.createElement("div", _extends$3({
        className: r$1(classes.root, className),
        ref: ref
      }, other));
    });
    process.env.NODE_ENV !== "production" ? ListItemSecondaryAction.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * The content of the component, normally an `IconButton` or selection control.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string
    } : void 0;
    ListItemSecondaryAction.muiName = 'ListItemSecondaryAction';
    var ListItemSecondaryAction$1 = withStyles(styles$12, {
      name: 'MuiListItemSecondaryAction'
    })(ListItemSecondaryAction);

    var styles$11 = {
      /* Styles applied to the root element. */
      root: {
        flex: '1 1 auto',
        minWidth: 0,
        marginTop: 4,
        marginBottom: 4
      },

      /* Styles applied to the `Typography` components if primary and secondary are set. */
      multiline: {
        marginTop: 6,
        marginBottom: 6
      },

      /* Styles applied to the `Typography` components if dense. */
      dense: {},

      /* Styles applied to the root element if `inset={true}`. */
      inset: {
        paddingLeft: 56
      },

      /* Styles applied to the primary `Typography` component. */
      primary: {},

      /* Styles applied to the secondary `Typography` component. */
      secondary: {}
    };
    var ListItemText = /*#__PURE__*/React__namespace.forwardRef(function ListItemText(props, ref) {
      var children = props.children,
          classes = props.classes,
          className = props.className,
          _props$disableTypogra = props.disableTypography,
          disableTypography = _props$disableTypogra === void 0 ? false : _props$disableTypogra,
          _props$inset = props.inset,
          inset = _props$inset === void 0 ? false : _props$inset,
          primaryProp = props.primary,
          primaryTypographyProps = props.primaryTypographyProps,
          secondaryProp = props.secondary,
          secondaryTypographyProps = props.secondaryTypographyProps,
          other = _objectWithoutProperties(props, ["children", "classes", "className", "disableTypography", "inset", "primary", "primaryTypographyProps", "secondary", "secondaryTypographyProps"]);

      var _React$useContext = React__namespace.useContext(ListContext$1),
          dense = _React$useContext.dense;

      var primary = primaryProp != null ? primaryProp : children;

      if (primary != null && primary.type !== Typography$2 && !disableTypography) {
        primary = /*#__PURE__*/React__namespace.createElement(Typography$2, _extends$3({
          variant: dense ? 'body2' : 'body1',
          className: classes.primary,
          component: "span",
          display: "block"
        }, primaryTypographyProps), primary);
      }

      var secondary = secondaryProp;

      if (secondary != null && secondary.type !== Typography$2 && !disableTypography) {
        secondary = /*#__PURE__*/React__namespace.createElement(Typography$2, _extends$3({
          variant: "body2",
          className: classes.secondary,
          color: "textSecondary",
          display: "block"
        }, secondaryTypographyProps), secondary);
      }

      return /*#__PURE__*/React__namespace.createElement("div", _extends$3({
        className: r$1(classes.root, className, dense && classes.dense, inset && classes.inset, primary && secondary && classes.multiline),
        ref: ref
      }, other), primary, secondary);
    });
    process.env.NODE_ENV !== "production" ? ListItemText.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * Alias for the `primary` prop.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * If `true`, the children won't be wrapped by a Typography component.
       * This can be useful to render an alternative Typography variant by wrapping
       * the `children` (or `primary`) text, and optional `secondary` text
       * with the Typography component.
       */
      disableTypography: re.bool,

      /**
       * If `true`, the children will be indented.
       * This should be used if there is no left avatar or left icon.
       */
      inset: re.bool,

      /**
       * The main content element.
       */
      primary: re.node,

      /**
       * These props will be forwarded to the primary typography component
       * (as long as disableTypography is not `true`).
       */
      primaryTypographyProps: re.object,

      /**
       * The secondary content element.
       */
      secondary: re.node,

      /**
       * These props will be forwarded to the secondary typography component
       * (as long as disableTypography is not `true`).
       */
      secondaryTypographyProps: re.object
    } : void 0;
    var ListItemText$1 = withStyles(styles$11, {
      name: 'MuiListItemText'
    })(ListItemText);

    var styles$10 = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          boxSizing: 'border-box',
          lineHeight: '48px',
          listStyle: 'none',
          color: theme.palette.text.secondary,
          fontFamily: theme.typography.fontFamily,
          fontWeight: theme.typography.fontWeightMedium,
          fontSize: theme.typography.pxToRem(14)
        },

        /* Styles applied to the root element if `color="primary"`. */
        colorPrimary: {
          color: theme.palette.primary.main
        },

        /* Styles applied to the root element if `color="inherit"`. */
        colorInherit: {
          color: 'inherit'
        },

        /* Styles applied to the inner `component` element if `disableGutters={false}`. */
        gutters: {
          paddingLeft: 16,
          paddingRight: 16
        },

        /* Styles applied to the root element if `inset={true}`. */
        inset: {
          paddingLeft: 72
        },

        /* Styles applied to the root element if `disableSticky={false}`. */
        sticky: {
          position: 'sticky',
          top: 0,
          zIndex: 1,
          backgroundColor: 'inherit'
        }
      };
    };
    var ListSubheader = /*#__PURE__*/React__namespace.forwardRef(function ListSubheader(props, ref) {
      var classes = props.classes,
          className = props.className,
          _props$color = props.color,
          color = _props$color === void 0 ? 'default' : _props$color,
          _props$component = props.component,
          Component = _props$component === void 0 ? 'li' : _props$component,
          _props$disableGutters = props.disableGutters,
          disableGutters = _props$disableGutters === void 0 ? false : _props$disableGutters,
          _props$disableSticky = props.disableSticky,
          disableSticky = _props$disableSticky === void 0 ? false : _props$disableSticky,
          _props$inset = props.inset,
          inset = _props$inset === void 0 ? false : _props$inset,
          other = _objectWithoutProperties(props, ["classes", "className", "color", "component", "disableGutters", "disableSticky", "inset"]);

      return /*#__PURE__*/React__namespace.createElement(Component, _extends$3({
        className: r$1(classes.root, className, color !== 'default' && classes["color".concat(capitalize(color))], inset && classes.inset, !disableSticky && classes.sticky, !disableGutters && classes.gutters),
        ref: ref
      }, other));
    });
    process.env.NODE_ENV !== "production" ? ListSubheader.propTypes = {
      /**
       * The content of the component.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object.isRequired,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * The color of the component. It supports those theme colors that make sense for this component.
       */
      color: re.oneOf(['default', 'primary', 'inherit']),

      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: re
      /* @typescript-to-proptypes-ignore */
      .elementType,

      /**
       * If `true`, the List Subheader will not have gutters.
       */
      disableGutters: re.bool,

      /**
       * If `true`, the List Subheader will not stick to the top during scroll.
       */
      disableSticky: re.bool,

      /**
       * If `true`, the List Subheader will be indented.
       */
      inset: re.bool
    } : void 0;
    var ListSubheader$1 = withStyles(styles$10, {
      name: 'MuiListSubheader'
    })(ListSubheader);

    function getOffsetTop(rect, vertical) {
      var offset = 0;

      if (typeof vertical === 'number') {
        offset = vertical;
      } else if (vertical === 'center') {
        offset = rect.height / 2;
      } else if (vertical === 'bottom') {
        offset = rect.height;
      }

      return offset;
    }
    function getOffsetLeft(rect, horizontal) {
      var offset = 0;

      if (typeof horizontal === 'number') {
        offset = horizontal;
      } else if (horizontal === 'center') {
        offset = rect.width / 2;
      } else if (horizontal === 'right') {
        offset = rect.width;
      }

      return offset;
    }

    function getTransformOriginValue(transformOrigin) {
      return [transformOrigin.horizontal, transformOrigin.vertical].map(function (n) {
        return typeof n === 'number' ? "".concat(n, "px") : n;
      }).join(' ');
    } // Sum the scrollTop between two elements.


    function getScrollParent$1(parent, child) {
      var element = child;
      var scrollTop = 0;

      while (element && element !== parent) {
        element = element.parentElement;
        scrollTop += element.scrollTop;
      }

      return scrollTop;
    }

    function getAnchorEl$1(anchorEl) {
      return typeof anchorEl === 'function' ? anchorEl() : anchorEl;
    }

    var styles$$ = {
      /* Styles applied to the root element. */
      root: {},

      /* Styles applied to the `Paper` component. */
      paper: {
        position: 'absolute',
        overflowY: 'auto',
        overflowX: 'hidden',
        // So we see the popover when it's empty.
        // It's most likely on issue on userland.
        minWidth: 16,
        minHeight: 16,
        maxWidth: 'calc(100% - 32px)',
        maxHeight: 'calc(100% - 32px)',
        // We disable the focus ring for mouse, touch and keyboard users.
        outline: 0
      }
    };
    var Popover = /*#__PURE__*/React__namespace.forwardRef(function Popover(props, ref) {
      var action = props.action,
          anchorEl = props.anchorEl,
          _props$anchorOrigin = props.anchorOrigin,
          anchorOrigin = _props$anchorOrigin === void 0 ? {
        vertical: 'top',
        horizontal: 'left'
      } : _props$anchorOrigin,
          anchorPosition = props.anchorPosition,
          _props$anchorReferenc = props.anchorReference,
          anchorReference = _props$anchorReferenc === void 0 ? 'anchorEl' : _props$anchorReferenc,
          children = props.children,
          classes = props.classes,
          className = props.className,
          containerProp = props.container,
          _props$elevation = props.elevation,
          elevation = _props$elevation === void 0 ? 8 : _props$elevation,
          getContentAnchorEl = props.getContentAnchorEl,
          _props$marginThreshol = props.marginThreshold,
          marginThreshold = _props$marginThreshol === void 0 ? 16 : _props$marginThreshol,
          onEnter = props.onEnter,
          onEntered = props.onEntered,
          onEntering = props.onEntering,
          onExit = props.onExit,
          onExited = props.onExited,
          onExiting = props.onExiting,
          open = props.open,
          _props$PaperProps = props.PaperProps,
          PaperProps = _props$PaperProps === void 0 ? {} : _props$PaperProps,
          _props$transformOrigi = props.transformOrigin,
          transformOrigin = _props$transformOrigi === void 0 ? {
        vertical: 'top',
        horizontal: 'left'
      } : _props$transformOrigi,
          _props$TransitionComp = props.TransitionComponent,
          TransitionComponent = _props$TransitionComp === void 0 ? k : _props$TransitionComp,
          _props$transitionDura = props.transitionDuration,
          transitionDurationProp = _props$transitionDura === void 0 ? 'auto' : _props$transitionDura,
          _props$TransitionProp = props.TransitionProps,
          TransitionProps = _props$TransitionProp === void 0 ? {} : _props$TransitionProp,
          other = _objectWithoutProperties(props, ["action", "anchorEl", "anchorOrigin", "anchorPosition", "anchorReference", "children", "classes", "className", "container", "elevation", "getContentAnchorEl", "marginThreshold", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "open", "PaperProps", "transformOrigin", "TransitionComponent", "transitionDuration", "TransitionProps"]);

      var paperRef = React__namespace.useRef(); // Returns the top/left offset of the position
      // to attach to on the anchor element (or body if none is provided)

      var getAnchorOffset = React__namespace.useCallback(function (contentAnchorOffset) {
        if (anchorReference === 'anchorPosition') {
          if (process.env.NODE_ENV !== 'production') {
            if (!anchorPosition) {
              console.error('Material-UI: You need to provide a `anchorPosition` prop when using ' + '<Popover anchorReference="anchorPosition" />.');
            }
          }

          return anchorPosition;
        }

        var resolvedAnchorEl = getAnchorEl$1(anchorEl); // If an anchor element wasn't provided, just use the parent body element of this Popover

        var anchorElement = resolvedAnchorEl && resolvedAnchorEl.nodeType === 1 ? resolvedAnchorEl : ownerDocument(paperRef.current).body;
        var anchorRect = anchorElement.getBoundingClientRect();

        if (process.env.NODE_ENV !== 'production') {
          var box = anchorElement.getBoundingClientRect();

          if (process.env.NODE_ENV !== 'test' && box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
            console.warn(['Material-UI: The `anchorEl` prop provided to the component is invalid.', 'The anchor element should be part of the document layout.', "Make sure the element is present in the document or that it's not display none."].join('\n'));
          }
        }

        var anchorVertical = contentAnchorOffset === 0 ? anchorOrigin.vertical : 'center';
        return {
          top: anchorRect.top + getOffsetTop(anchorRect, anchorVertical),
          left: anchorRect.left + getOffsetLeft(anchorRect, anchorOrigin.horizontal)
        };
      }, [anchorEl, anchorOrigin.horizontal, anchorOrigin.vertical, anchorPosition, anchorReference]); // Returns the vertical offset of inner content to anchor the transform on if provided

      var getContentAnchorOffset = React__namespace.useCallback(function (element) {
        var contentAnchorOffset = 0;

        if (getContentAnchorEl && anchorReference === 'anchorEl') {
          var contentAnchorEl = getContentAnchorEl(element);

          if (contentAnchorEl && element.contains(contentAnchorEl)) {
            var scrollTop = getScrollParent$1(element, contentAnchorEl);
            contentAnchorOffset = contentAnchorEl.offsetTop + contentAnchorEl.clientHeight / 2 - scrollTop || 0;
          } // != the default value


          if (process.env.NODE_ENV !== 'production') {
            if (anchorOrigin.vertical !== 'top') {
              console.error(['Material-UI: You can not change the default `anchorOrigin.vertical` value ', 'when also providing the `getContentAnchorEl` prop to the popover component.', 'Only use one of the two props.', 'Set `getContentAnchorEl` to `null | undefined`' + ' or leave `anchorOrigin.vertical` unchanged.'].join('\n'));
            }
          }
        }

        return contentAnchorOffset;
      }, [anchorOrigin.vertical, anchorReference, getContentAnchorEl]); // Return the base transform origin using the element
      // and taking the content anchor offset into account if in use

      var getTransformOrigin = React__namespace.useCallback(function (elemRect) {
        var contentAnchorOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        return {
          vertical: getOffsetTop(elemRect, transformOrigin.vertical) + contentAnchorOffset,
          horizontal: getOffsetLeft(elemRect, transformOrigin.horizontal)
        };
      }, [transformOrigin.horizontal, transformOrigin.vertical]);
      var getPositioningStyle = React__namespace.useCallback(function (element) {
        // Check if the parent has requested anchoring on an inner content node
        var contentAnchorOffset = getContentAnchorOffset(element);
        var elemRect = {
          width: element.offsetWidth,
          height: element.offsetHeight
        }; // Get the transform origin point on the element itself

        var elemTransformOrigin = getTransformOrigin(elemRect, contentAnchorOffset);

        if (anchorReference === 'none') {
          return {
            top: null,
            left: null,
            transformOrigin: getTransformOriginValue(elemTransformOrigin)
          };
        } // Get the offset of of the anchoring element


        var anchorOffset = getAnchorOffset(contentAnchorOffset); // Calculate element positioning

        var top = anchorOffset.top - elemTransformOrigin.vertical;
        var left = anchorOffset.left - elemTransformOrigin.horizontal;
        var bottom = top + elemRect.height;
        var right = left + elemRect.width; // Use the parent window of the anchorEl if provided

        var containerWindow = ownerWindow(getAnchorEl$1(anchorEl)); // Window thresholds taking required margin into account

        var heightThreshold = containerWindow.innerHeight - marginThreshold;
        var widthThreshold = containerWindow.innerWidth - marginThreshold; // Check if the vertical axis needs shifting

        if (top < marginThreshold) {
          var diff = top - marginThreshold;
          top -= diff;
          elemTransformOrigin.vertical += diff;
        } else if (bottom > heightThreshold) {
          var _diff = bottom - heightThreshold;

          top -= _diff;
          elemTransformOrigin.vertical += _diff;
        }

        if (process.env.NODE_ENV !== 'production') {
          if (elemRect.height > heightThreshold && elemRect.height && heightThreshold) {
            console.error(['Material-UI: The popover component is too tall.', "Some part of it can not be seen on the screen (".concat(elemRect.height - heightThreshold, "px)."), 'Please consider adding a `max-height` to improve the user-experience.'].join('\n'));
          }
        } // Check if the horizontal axis needs shifting


        if (left < marginThreshold) {
          var _diff2 = left - marginThreshold;

          left -= _diff2;
          elemTransformOrigin.horizontal += _diff2;
        } else if (right > widthThreshold) {
          var _diff3 = right - widthThreshold;

          left -= _diff3;
          elemTransformOrigin.horizontal += _diff3;
        }

        return {
          top: "".concat(Math.round(top), "px"),
          left: "".concat(Math.round(left), "px"),
          transformOrigin: getTransformOriginValue(elemTransformOrigin)
        };
      }, [anchorEl, anchorReference, getAnchorOffset, getContentAnchorOffset, getTransformOrigin, marginThreshold]);
      var setPositioningStyles = React__namespace.useCallback(function () {
        var element = paperRef.current;

        if (!element) {
          return;
        }

        var positioning = getPositioningStyle(element);

        if (positioning.top !== null) {
          element.style.top = positioning.top;
        }

        if (positioning.left !== null) {
          element.style.left = positioning.left;
        }

        element.style.transformOrigin = positioning.transformOrigin;
      }, [getPositioningStyle]);

      var handleEntering = function handleEntering(element, isAppearing) {
        if (onEntering) {
          onEntering(element, isAppearing);
        }

        setPositioningStyles();
      };

      var handlePaperRef = React__namespace.useCallback(function (instance) {
        // #StrictMode ready
        paperRef.current = ReactDOM__namespace.findDOMNode(instance);
      }, []);
      React__namespace.useEffect(function () {
        if (open) {
          setPositioningStyles();
        }
      });
      React__namespace.useImperativeHandle(action, function () {
        return open ? {
          updatePosition: function updatePosition() {
            setPositioningStyles();
          }
        } : null;
      }, [open, setPositioningStyles]);
      React__namespace.useEffect(function () {
        if (!open) {
          return undefined;
        }

        var handleResize = debounce$1(function () {
          setPositioningStyles();
        });
        window.addEventListener('resize', handleResize);
        return function () {
          handleResize.clear();
          window.removeEventListener('resize', handleResize);
        };
      }, [open, setPositioningStyles]);
      var transitionDuration = transitionDurationProp;

      if (transitionDurationProp === 'auto' && !TransitionComponent.muiSupportAuto) {
        transitionDuration = undefined;
      } // If the container prop is provided, use that
      // If the anchorEl prop is provided, use its parent body element as the container
      // If neither are provided let the Modal take care of choosing the container


      var container = containerProp || (anchorEl ? ownerDocument(getAnchorEl$1(anchorEl)).body : undefined);
      return /*#__PURE__*/React__namespace.createElement(Modal$1, _extends$3({
        container: container,
        open: open,
        ref: ref,
        BackdropProps: {
          invisible: true
        },
        className: r$1(classes.root, className)
      }, other), /*#__PURE__*/React__namespace.createElement(TransitionComponent, _extends$3({
        appear: true,
        in: open,
        onEnter: onEnter,
        onEntered: onEntered,
        onExit: onExit,
        onExited: onExited,
        onExiting: onExiting,
        timeout: transitionDuration
      }, TransitionProps, {
        onEntering: createChainedFunction(handleEntering, TransitionProps.onEntering)
      }), /*#__PURE__*/React__namespace.createElement(M, _extends$3({
        elevation: elevation,
        ref: handlePaperRef
      }, PaperProps, {
        className: r$1(classes.paper, PaperProps.className)
      }), children)));
    });
    process.env.NODE_ENV !== "production" ? Popover.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * A ref for imperative actions.
       * It currently only supports updatePosition() action.
       */
      action: refType$1,

      /**
       * A HTML element, or a function that returns it.
       * It's used to set the position of the popover.
       */
      anchorEl: chainPropTypes$1(re.oneOfType([HTMLElementType, re.func]), function (props) {
        if (props.open && (!props.anchorReference || props.anchorReference === 'anchorEl')) {
          var resolvedAnchorEl = getAnchorEl$1(props.anchorEl);

          if (resolvedAnchorEl && resolvedAnchorEl.nodeType === 1) {
            var box = resolvedAnchorEl.getBoundingClientRect();

            if (process.env.NODE_ENV !== 'test' && box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
              return new Error(['Material-UI: The `anchorEl` prop provided to the component is invalid.', 'The anchor element should be part of the document layout.', "Make sure the element is present in the document or that it's not display none."].join('\n'));
            }
          } else {
            return new Error(['Material-UI: The `anchorEl` prop provided to the component is invalid.', "It should be an Element instance but it's `".concat(resolvedAnchorEl, "` instead.")].join('\n'));
          }
        }

        return null;
      }),

      /**
       * This is the point on the anchor where the popover's
       * `anchorEl` will attach to. This is not used when the
       * anchorReference is 'anchorPosition'.
       *
       * Options:
       * vertical: [top, center, bottom];
       * horizontal: [left, center, right].
       */
      anchorOrigin: re.shape({
        horizontal: re.oneOfType([re.oneOf(['center', 'left', 'right']), re.number]).isRequired,
        vertical: re.oneOfType([re.oneOf(['bottom', 'center', 'top']), re.number]).isRequired
      }),

      /**
       * This is the position that may be used
       * to set the position of the popover.
       * The coordinates are relative to
       * the application's client area.
       */
      anchorPosition: re.shape({
        left: re.number.isRequired,
        top: re.number.isRequired
      }),

      /**
       * This determines which anchor prop to refer to to set
       * the position of the popover.
       */
      anchorReference: re.oneOf(['anchorEl', 'anchorPosition', 'none']),

      /**
       * The content of the component.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * A HTML element, component instance, or function that returns either.
       * The `container` will passed to the Modal component.
       *
       * By default, it uses the body of the anchorEl's top-level document object,
       * so it's simply `document.body` most of the time.
       */
      container: re
      /* @typescript-to-proptypes-ignore */
      .oneOfType([HTMLElementType, re.instanceOf(React__namespace.Component), re.func]),

      /**
       * The elevation of the popover.
       */
      elevation: re.number,

      /**
       * This function is called in order to retrieve the content anchor element.
       * It's the opposite of the `anchorEl` prop.
       * The content anchor element should be an element inside the popover.
       * It's used to correctly scroll and set the position of the popover.
       * The positioning strategy tries to make the content anchor element just above the
       * anchor element.
       */
      getContentAnchorEl: re.func,

      /**
       * Specifies how close to the edge of the window the popover can appear.
       */
      marginThreshold: re.number,

      /**
       * Callback fired when the component requests to be closed.
       */
      onClose: re.func,

      /**
       * Callback fired before the component is entering.
       * @deprecated Use the `TransitionProps` prop instead.
       */
      onEnter: deprecatedPropType(re.func, 'Use the `TransitionProps` prop instead.'),

      /**
       * Callback fired when the component has entered.
       * @deprecated Use the `TransitionProps` prop instead.
       */
      onEntered: deprecatedPropType(re.func, 'Use the `TransitionProps` prop instead.'),

      /**
       * Callback fired when the component is entering.
       * @deprecated Use the `TransitionProps` prop instead.
       */
      onEntering: deprecatedPropType(re.func, 'Use the `TransitionProps` prop instead.'),

      /**
       * Callback fired before the component is exiting.
       * @deprecated Use the `TransitionProps` prop instead.
       */
      onExit: deprecatedPropType(re.func, 'Use the `TransitionProps` prop instead.'),

      /**
       * Callback fired when the component has exited.
       * @deprecated Use the `TransitionProps` prop instead.
       */
      onExited: deprecatedPropType(re.func, 'Use the `TransitionProps` prop instead.'),

      /**
       * Callback fired when the component is exiting.
       * @deprecated Use the `TransitionProps` prop instead.
       */
      onExiting: deprecatedPropType(re.func, 'Use the `TransitionProps` prop instead.'),

      /**
       * If `true`, the popover is visible.
       */
      open: re.bool.isRequired,

      /**
       * Props applied to the [`Paper`](/api/paper/) element.
       */
      PaperProps: re
      /* @typescript-to-proptypes-ignore */
      .shape({
        component: elementTypeAcceptingRef$1
      }),

      /**
       * This is the point on the popover which
       * will attach to the anchor's origin.
       *
       * Options:
       * vertical: [top, center, bottom, x(px)];
       * horizontal: [left, center, right, x(px)].
       */
      transformOrigin: re.shape({
        horizontal: re.oneOfType([re.oneOf(['center', 'left', 'right']), re.number]).isRequired,
        vertical: re.oneOfType([re.oneOf(['bottom', 'center', 'top']), re.number]).isRequired
      }),

      /**
       * The component used for the transition.
       * [Follow this guide](/components/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
       */
      TransitionComponent: re.elementType,

      /**
       * Set to 'auto' to automatically calculate transition time based on height.
       */
      transitionDuration: re.oneOfType([re.oneOf(['auto']), re.number, re.shape({
        appear: re.number,
        enter: re.number,
        exit: re.number
      })]),

      /**
       * Props applied to the [`Transition`](http://reactcommunity.org/react-transition-group/transition#Transition-props) element.
       */
      TransitionProps: re.object
    } : void 0;
    var Popover$1 = withStyles(styles$$, {
      name: 'MuiPopover'
    })(Popover);

    function nextItem(list, item, disableListWrap) {
      if (list === item) {
        return list.firstChild;
      }

      if (item && item.nextElementSibling) {
        return item.nextElementSibling;
      }

      return disableListWrap ? null : list.firstChild;
    }

    function previousItem(list, item, disableListWrap) {
      if (list === item) {
        return disableListWrap ? list.firstChild : list.lastChild;
      }

      if (item && item.previousElementSibling) {
        return item.previousElementSibling;
      }

      return disableListWrap ? null : list.lastChild;
    }

    function textCriteriaMatches(nextFocus, textCriteria) {
      if (textCriteria === undefined) {
        return true;
      }

      var text = nextFocus.innerText;

      if (text === undefined) {
        // jsdom doesn't support innerText
        text = nextFocus.textContent;
      }

      text = text.trim().toLowerCase();

      if (text.length === 0) {
        return false;
      }

      if (textCriteria.repeating) {
        return text[0] === textCriteria.keys[0];
      }

      return text.indexOf(textCriteria.keys.join('')) === 0;
    }

    function moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, traversalFunction, textCriteria) {
      var wrappedOnce = false;
      var nextFocus = traversalFunction(list, currentFocus, currentFocus ? disableListWrap : false);

      while (nextFocus) {
        // Prevent infinite loop.
        if (nextFocus === list.firstChild) {
          if (wrappedOnce) {
            return;
          }

          wrappedOnce = true;
        } // Same logic as useAutocomplete.js


        var nextFocusDisabled = disabledItemsFocusable ? false : nextFocus.disabled || nextFocus.getAttribute('aria-disabled') === 'true';

        if (!nextFocus.hasAttribute('tabindex') || !textCriteriaMatches(nextFocus, textCriteria) || nextFocusDisabled) {
          // Move to the next element.
          nextFocus = traversalFunction(list, nextFocus, disableListWrap);
        } else {
          nextFocus.focus();
          return;
        }
      }
    }

    var useEnhancedEffect$3 = typeof window === 'undefined' ? React__namespace.useEffect : React__namespace.useLayoutEffect;
    /**
     * A permanently displayed menu following https://www.w3.org/TR/wai-aria-practices/#menubutton.
     * It's exposed to help customization of the [`Menu`](/api/menu/) component. If you
     * use it separately you need to move focus into the component manually. Once
     * the focus is placed inside the component it is fully keyboard accessible.
     */

    var MenuList = /*#__PURE__*/React__namespace.forwardRef(function MenuList(props, ref) {
      var actions = props.actions,
          _props$autoFocus = props.autoFocus,
          autoFocus = _props$autoFocus === void 0 ? false : _props$autoFocus,
          _props$autoFocusItem = props.autoFocusItem,
          autoFocusItem = _props$autoFocusItem === void 0 ? false : _props$autoFocusItem,
          children = props.children,
          className = props.className,
          _props$disabledItemsF = props.disabledItemsFocusable,
          disabledItemsFocusable = _props$disabledItemsF === void 0 ? false : _props$disabledItemsF,
          _props$disableListWra = props.disableListWrap,
          disableListWrap = _props$disableListWra === void 0 ? false : _props$disableListWra,
          onKeyDown = props.onKeyDown,
          _props$variant = props.variant,
          variant = _props$variant === void 0 ? 'selectedMenu' : _props$variant,
          other = _objectWithoutProperties(props, ["actions", "autoFocus", "autoFocusItem", "children", "className", "disabledItemsFocusable", "disableListWrap", "onKeyDown", "variant"]);

      var listRef = React__namespace.useRef(null);
      var textCriteriaRef = React__namespace.useRef({
        keys: [],
        repeating: true,
        previousKeyMatched: true,
        lastTime: null
      });
      useEnhancedEffect$3(function () {
        if (autoFocus) {
          listRef.current.focus();
        }
      }, [autoFocus]);
      React__namespace.useImperativeHandle(actions, function () {
        return {
          adjustStyleForScrollbar: function adjustStyleForScrollbar(containerElement, theme) {
            // Let's ignore that piece of logic if users are already overriding the width
            // of the menu.
            var noExplicitWidth = !listRef.current.style.width;

            if (containerElement.clientHeight < listRef.current.clientHeight && noExplicitWidth) {
              var scrollbarSize = "".concat(getScrollbarSize(), "px");
              listRef.current.style[theme.direction === 'rtl' ? 'paddingLeft' : 'paddingRight'] = scrollbarSize;
              listRef.current.style.width = "calc(100% + ".concat(scrollbarSize, ")");
            }

            return listRef.current;
          }
        };
      }, []);

      var handleKeyDown = function handleKeyDown(event) {
        var list = listRef.current;
        var key = event.key;
        /**
         * @type {Element} - will always be defined since we are in a keydown handler
         * attached to an element. A keydown event is either dispatched to the activeElement
         * or document.body or document.documentElement. Only the first case will
         * trigger this specific handler.
         */

        var currentFocus = ownerDocument(list).activeElement;

        if (key === 'ArrowDown') {
          // Prevent scroll of the page
          event.preventDefault();
          moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, nextItem);
        } else if (key === 'ArrowUp') {
          event.preventDefault();
          moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, previousItem);
        } else if (key === 'Home') {
          event.preventDefault();
          moveFocus(list, null, disableListWrap, disabledItemsFocusable, nextItem);
        } else if (key === 'End') {
          event.preventDefault();
          moveFocus(list, null, disableListWrap, disabledItemsFocusable, previousItem);
        } else if (key.length === 1) {
          var criteria = textCriteriaRef.current;
          var lowerKey = key.toLowerCase();
          var currTime = performance.now();

          if (criteria.keys.length > 0) {
            // Reset
            if (currTime - criteria.lastTime > 500) {
              criteria.keys = [];
              criteria.repeating = true;
              criteria.previousKeyMatched = true;
            } else if (criteria.repeating && lowerKey !== criteria.keys[0]) {
              criteria.repeating = false;
            }
          }

          criteria.lastTime = currTime;
          criteria.keys.push(lowerKey);
          var keepFocusOnCurrent = currentFocus && !criteria.repeating && textCriteriaMatches(currentFocus, criteria);

          if (criteria.previousKeyMatched && (keepFocusOnCurrent || moveFocus(list, currentFocus, false, disabledItemsFocusable, nextItem, criteria))) {
            event.preventDefault();
          } else {
            criteria.previousKeyMatched = false;
          }
        }

        if (onKeyDown) {
          onKeyDown(event);
        }
      };

      var handleOwnRef = React__namespace.useCallback(function (instance) {
        // #StrictMode ready
        listRef.current = ReactDOM__namespace.findDOMNode(instance);
      }, []);
      var handleRef = useForkRef(handleOwnRef, ref);
      /**
       * the index of the item should receive focus
       * in a `variant="selectedMenu"` it's the first `selected` item
       * otherwise it's the very first item.
       */

      var activeItemIndex = -1; // since we inject focus related props into children we have to do a lookahead
      // to check if there is a `selected` item. We're looking for the last `selected`
      // item and use the first valid item as a fallback

      React__namespace.Children.forEach(children, function (child, index) {
        if (! /*#__PURE__*/React__namespace.isValidElement(child)) {
          return;
        }

        if (process.env.NODE_ENV !== 'production') {
          if (reactIs$2.exports.isFragment(child)) {
            console.error(["Material-UI: The Menu component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n'));
          }
        }

        if (!child.props.disabled) {
          if (variant === 'selectedMenu' && child.props.selected) {
            activeItemIndex = index;
          } else if (activeItemIndex === -1) {
            activeItemIndex = index;
          }
        }
      });
      var items = React__namespace.Children.map(children, function (child, index) {
        if (index === activeItemIndex) {
          var newChildProps = {};

          if (autoFocusItem) {
            newChildProps.autoFocus = true;
          }

          if (child.props.tabIndex === undefined && variant === 'selectedMenu') {
            newChildProps.tabIndex = 0;
          }

          return /*#__PURE__*/React__namespace.cloneElement(child, newChildProps);
        }

        return child;
      });
      return /*#__PURE__*/React__namespace.createElement(List$2, _extends$3({
        role: "menu",
        ref: handleRef,
        className: className,
        onKeyDown: handleKeyDown,
        tabIndex: autoFocus ? 0 : -1
      }, other), items);
    });
    process.env.NODE_ENV !== "production" ? MenuList.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * If `true`, will focus the `[role="menu"]` container and move into tab order.
       */
      autoFocus: re.bool,

      /**
       * If `true`, will focus the first menuitem if `variant="menu"` or selected item
       * if `variant="selectedMenu"`.
       */
      autoFocusItem: re.bool,

      /**
       * MenuList contents, normally `MenuItem`s.
       */
      children: re.node,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * If `true`, will allow focus on disabled items.
       */
      disabledItemsFocusable: re.bool,

      /**
       * If `true`, the menu items will not wrap focus.
       */
      disableListWrap: re.bool,

      /**
       * @ignore
       */
      onKeyDown: re.func,

      /**
       * The variant to use. Use `menu` to prevent selected items from impacting the initial focus
       * and the vertical alignment relative to the anchor element.
       */
      variant: re.oneOf(['menu', 'selectedMenu'])
    } : void 0;
    var L = MenuList;

    var RTL_ORIGIN = {
      vertical: 'top',
      horizontal: 'right'
    };
    var LTR_ORIGIN = {
      vertical: 'top',
      horizontal: 'left'
    };
    var styles$_ = {
      /* Styles applied to the `Paper` component. */
      paper: {
        // specZ: The maximum height of a simple menu should be one or more rows less than the view
        // height. This ensures a tapable area outside of the simple menu with which to dismiss
        // the menu.
        maxHeight: 'calc(100% - 96px)',
        // Add iOS momentum scrolling.
        WebkitOverflowScrolling: 'touch'
      },

      /* Styles applied to the `List` component via `MenuList`. */
      list: {
        // We disable the focus ring for mouse, touch and keyboard users.
        outline: 0
      }
    };
    var Menu$3 = /*#__PURE__*/React__namespace.forwardRef(function Menu(props, ref) {
      var _props$autoFocus = props.autoFocus,
          autoFocus = _props$autoFocus === void 0 ? true : _props$autoFocus,
          children = props.children,
          classes = props.classes,
          _props$disableAutoFoc = props.disableAutoFocusItem,
          disableAutoFocusItem = _props$disableAutoFoc === void 0 ? false : _props$disableAutoFoc,
          _props$MenuListProps = props.MenuListProps,
          MenuListProps = _props$MenuListProps === void 0 ? {} : _props$MenuListProps,
          onClose = props.onClose,
          onEnteringProp = props.onEntering,
          open = props.open,
          _props$PaperProps = props.PaperProps,
          PaperProps = _props$PaperProps === void 0 ? {} : _props$PaperProps,
          PopoverClasses = props.PopoverClasses,
          _props$transitionDura = props.transitionDuration,
          transitionDuration = _props$transitionDura === void 0 ? 'auto' : _props$transitionDura,
          _props$TransitionProp = props.TransitionProps;
      _props$TransitionProp = _props$TransitionProp === void 0 ? {} : _props$TransitionProp;

      var onEntering = _props$TransitionProp.onEntering,
          TransitionProps = _objectWithoutProperties(_props$TransitionProp, ["onEntering"]),
          _props$variant = props.variant,
          variant = _props$variant === void 0 ? 'selectedMenu' : _props$variant,
          other = _objectWithoutProperties(props, ["autoFocus", "children", "classes", "disableAutoFocusItem", "MenuListProps", "onClose", "onEntering", "open", "PaperProps", "PopoverClasses", "transitionDuration", "TransitionProps", "variant"]);

      var theme = useTheme();
      var autoFocusItem = autoFocus && !disableAutoFocusItem && open;
      var menuListActionsRef = React__namespace.useRef(null);
      var contentAnchorRef = React__namespace.useRef(null);

      var getContentAnchorEl = function getContentAnchorEl() {
        return contentAnchorRef.current;
      };

      var handleEntering = function handleEntering(element, isAppearing) {
        if (menuListActionsRef.current) {
          menuListActionsRef.current.adjustStyleForScrollbar(element, theme);
        }

        if (onEnteringProp) {
          onEnteringProp(element, isAppearing);
        }

        if (onEntering) {
          onEntering(element, isAppearing);
        }
      };

      var handleListKeyDown = function handleListKeyDown(event) {
        if (event.key === 'Tab') {
          event.preventDefault();

          if (onClose) {
            onClose(event, 'tabKeyDown');
          }
        }
      };
      /**
       * the index of the item should receive focus
       * in a `variant="selectedMenu"` it's the first `selected` item
       * otherwise it's the very first item.
       */


      var activeItemIndex = -1; // since we inject focus related props into children we have to do a lookahead
      // to check if there is a `selected` item. We're looking for the last `selected`
      // item and use the first valid item as a fallback

      React__namespace.Children.map(children, function (child, index) {
        if (! /*#__PURE__*/React__namespace.isValidElement(child)) {
          return;
        }

        if (process.env.NODE_ENV !== 'production') {
          if (reactIs$2.exports.isFragment(child)) {
            console.error(["Material-UI: The Menu component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n'));
          }
        }

        if (!child.props.disabled) {
          if (variant !== "menu" && child.props.selected) {
            activeItemIndex = index;
          } else if (activeItemIndex === -1) {
            activeItemIndex = index;
          }
        }
      });
      var items = React__namespace.Children.map(children, function (child, index) {
        if (index === activeItemIndex) {
          return /*#__PURE__*/React__namespace.cloneElement(child, {
            ref: function ref(instance) {
              // #StrictMode ready
              contentAnchorRef.current = ReactDOM__namespace.findDOMNode(instance);
              setRef(child.ref, instance);
            }
          });
        }

        return child;
      });
      return /*#__PURE__*/React__namespace.createElement(Popover$1, _extends$3({
        getContentAnchorEl: getContentAnchorEl,
        classes: PopoverClasses,
        onClose: onClose,
        TransitionProps: _extends$3({
          onEntering: handleEntering
        }, TransitionProps),
        anchorOrigin: theme.direction === 'rtl' ? RTL_ORIGIN : LTR_ORIGIN,
        transformOrigin: theme.direction === 'rtl' ? RTL_ORIGIN : LTR_ORIGIN,
        PaperProps: _extends$3({}, PaperProps, {
          classes: _extends$3({}, PaperProps.classes, {
            root: classes.paper
          })
        }),
        open: open,
        ref: ref,
        transitionDuration: transitionDuration
      }, other), /*#__PURE__*/React__namespace.createElement(L, _extends$3({
        onKeyDown: handleListKeyDown,
        actions: menuListActionsRef,
        autoFocus: autoFocus && (activeItemIndex === -1 || disableAutoFocusItem),
        autoFocusItem: autoFocusItem,
        variant: variant
      }, MenuListProps, {
        className: r$1(classes.list, MenuListProps.className)
      }), items));
    });
    process.env.NODE_ENV !== "production" ? Menu$3.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * A HTML element, or a function that returns it.
       * It's used to set the position of the menu.
       */
      anchorEl: re
      /* @typescript-to-proptypes-ignore */
      .oneOfType([HTMLElementType, re.func]),

      /**
       * If `true` (Default) will focus the `[role="menu"]` if no focusable child is found. Disabled
       * children are not focusable. If you set this prop to `false` focus will be placed
       * on the parent modal container. This has severe accessibility implications
       * and should only be considered if you manage focus otherwise.
       */
      autoFocus: re.bool,

      /**
       * Menu contents, normally `MenuItem`s.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * When opening the menu will not focus the active item but the `[role="menu"]`
       * unless `autoFocus` is also set to `false`. Not using the default means not
       * following WAI-ARIA authoring practices. Please be considerate about possible
       * accessibility implications.
       */
      disableAutoFocusItem: re.bool,

      /**
       * Props applied to the [`MenuList`](/api/menu-list/) element.
       */
      MenuListProps: re.object,

      /**
       * Callback fired when the component requests to be closed.
       *
       * @param {object} event The event source of the callback.
       * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`, `"tabKeyDown"`.
       */
      onClose: re.func,

      /**
       * Callback fired before the Menu enters.
       * @deprecated Use the `TransitionProps` prop instead.
       */
      onEnter: deprecatedPropType(re.func, 'Use the `TransitionProps` prop instead.'),

      /**
       * Callback fired when the Menu has entered.
       * @deprecated Use the `TransitionProps` prop instead.
       */
      onEntered: deprecatedPropType(re.func, 'Use the `TransitionProps` prop instead.'),

      /**
       * Callback fired when the Menu is entering.
       * @deprecated Use the `TransitionProps` prop instead.
       */
      onEntering: deprecatedPropType(re.func, 'Use the `TransitionProps` prop instead.'),

      /**
       * Callback fired before the Menu exits.
       * @deprecated Use the `TransitionProps` prop instead.
       */
      onExit: deprecatedPropType(re.func, 'Use the `TransitionProps` prop instead.'),

      /**
       * Callback fired when the Menu has exited.
       * @deprecated Use the `TransitionProps` prop instead.
       */
      onExited: deprecatedPropType(re.func, 'Use the `TransitionProps` prop instead.'),

      /**
       * Callback fired when the Menu is exiting.
       * @deprecated Use the `TransitionProps` prop instead.
       */
      onExiting: deprecatedPropType(re.func, 'Use the `TransitionProps` prop instead.'),

      /**
       * If `true`, the menu is visible.
       */
      open: re.bool.isRequired,

      /**
       * @ignore
       */
      PaperProps: re.object,

      /**
       * `classes` prop applied to the [`Popover`](/api/popover/) element.
       */
      PopoverClasses: re.object,

      /**
       * The length of the transition in `ms`, or 'auto'
       */
      transitionDuration: re.oneOfType([re.oneOf(['auto']), re.number, re.shape({
        appear: re.number,
        enter: re.number,
        exit: re.number
      })]),

      /**
       * Props applied to the transition element.
       * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition) component.
       */
      TransitionProps: re.object,

      /**
       * The variant to use. Use `menu` to prevent selected items from impacting the initial focus
       * and the vertical alignment relative to the anchor element.
       */
      variant: re.oneOf(['menu', 'selectedMenu'])
    } : void 0;
    var Menu$4 = withStyles(styles$_, {
      name: 'MuiMenu'
    })(Menu$3);

    var styles$Z = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: _extends$3({}, theme.typography.body1, _defineProperty({
          minHeight: 48,
          paddingTop: 6,
          paddingBottom: 6,
          boxSizing: 'border-box',
          width: 'auto',
          overflow: 'hidden',
          whiteSpace: 'nowrap'
        }, theme.breakpoints.up('sm'), {
          minHeight: 'auto'
        })),
        // TODO v5: remove

        /* Styles applied to the root element if `disableGutters={false}`. */
        gutters: {},

        /* Styles applied to the root element if `selected={true}`. */
        selected: {},

        /* Styles applied to the root element if dense. */
        dense: _extends$3({}, theme.typography.body2, {
          minHeight: 'auto'
        })
      };
    };
    var MenuItem = /*#__PURE__*/React__namespace.forwardRef(function MenuItem(props, ref) {
      var classes = props.classes,
          className = props.className,
          _props$component = props.component,
          component = _props$component === void 0 ? 'li' : _props$component,
          _props$disableGutters = props.disableGutters,
          disableGutters = _props$disableGutters === void 0 ? false : _props$disableGutters,
          ListItemClasses = props.ListItemClasses,
          _props$role = props.role,
          role = _props$role === void 0 ? 'menuitem' : _props$role,
          selected = props.selected,
          tabIndexProp = props.tabIndex,
          other = _objectWithoutProperties(props, ["classes", "className", "component", "disableGutters", "ListItemClasses", "role", "selected", "tabIndex"]);

      var tabIndex;

      if (!props.disabled) {
        tabIndex = tabIndexProp !== undefined ? tabIndexProp : -1;
      }

      return /*#__PURE__*/React__namespace.createElement(ListItem$2, _extends$3({
        button: true,
        role: role,
        tabIndex: tabIndex,
        component: component,
        selected: selected,
        disableGutters: disableGutters,
        classes: _extends$3({
          dense: classes.dense
        }, ListItemClasses),
        className: r$1(classes.root, className, selected && classes.selected, !disableGutters && classes.gutters),
        ref: ref
      }, other));
    });
    process.env.NODE_ENV !== "production" ? MenuItem.propTypes = {
      /**
       * Menu item contents.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object.isRequired,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: re
      /* @typescript-to-proptypes-ignore */
      .elementType,

      /**
       * If `true`, compact vertical padding designed for keyboard and mouse input will be used.
       */
      dense: re.bool,

      /**
       * @ignore
       */
      disabled: re.bool,

      /**
       * If `true`, the left and right padding is removed.
       */
      disableGutters: re.bool,

      /**
       * `classes` prop applied to the [`ListItem`](/api/list-item/) element.
       */
      ListItemClasses: re.object,

      /**
       * @ignore
       */
      role: re.string,

      /**
       * @ignore
       */
      selected: re.bool,

      /**
       * @ignore
       */
      tabIndex: re.number
    } : void 0;
    var MenuItem$1 = withStyles(styles$Z, {
      name: 'MuiMenuItem'
    })(MenuItem);

    var styles$Y = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          display: 'flex',
          flexDirection: 'row',
          justifyContent: 'space-between',
          alignItems: 'center',
          background: theme.palette.background.default,
          padding: 8
        },

        /* Styles applied to the root element if `position="bottom"`. */
        positionBottom: {
          position: 'fixed',
          bottom: 0,
          left: 0,
          right: 0,
          zIndex: theme.zIndex.mobileStepper
        },

        /* Styles applied to the root element if `position="top"`. */
        positionTop: {
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          zIndex: theme.zIndex.mobileStepper
        },

        /* Styles applied to the root element if `position="static"`. */
        positionStatic: {},

        /* Styles applied to the dots container if `variant="dots"`. */
        dots: {
          display: 'flex',
          flexDirection: 'row'
        },

        /* Styles applied to each dot if `variant="dots"`. */
        dot: {
          backgroundColor: theme.palette.action.disabled,
          borderRadius: '50%',
          width: 8,
          height: 8,
          margin: '0 2px'
        },

        /* Styles applied to a dot if `variant="dots"` and this is the active step. */
        dotActive: {
          backgroundColor: theme.palette.primary.main
        },

        /* Styles applied to the Linear Progress component if `variant="progress"`. */
        progress: {
          width: '50%'
        }
      };
    };
    var MobileStepper = /*#__PURE__*/React__namespace.forwardRef(function MobileStepper(props, ref) {
      var _props$activeStep = props.activeStep,
          activeStep = _props$activeStep === void 0 ? 0 : _props$activeStep,
          backButton = props.backButton,
          classes = props.classes,
          className = props.className,
          LinearProgressProps = props.LinearProgressProps,
          nextButton = props.nextButton,
          _props$position = props.position,
          position = _props$position === void 0 ? 'bottom' : _props$position,
          steps = props.steps,
          _props$variant = props.variant,
          variant = _props$variant === void 0 ? 'dots' : _props$variant,
          other = _objectWithoutProperties(props, ["activeStep", "backButton", "classes", "className", "LinearProgressProps", "nextButton", "position", "steps", "variant"]);

      return /*#__PURE__*/React__namespace.createElement(M, _extends$3({
        square: true,
        elevation: 0,
        className: r$1(classes.root, classes["position".concat(capitalize(position))], className),
        ref: ref
      }, other), backButton, variant === 'text' && /*#__PURE__*/React__namespace.createElement(React__namespace.Fragment, null, activeStep + 1, " / ", steps), variant === 'dots' && /*#__PURE__*/React__namespace.createElement("div", {
        className: classes.dots
      }, _toConsumableArray(new Array(steps)).map(function (_, index) {
        return /*#__PURE__*/React__namespace.createElement("div", {
          key: index,
          className: r$1(classes.dot, index === activeStep && classes.dotActive)
        });
      })), variant === 'progress' && /*#__PURE__*/React__namespace.createElement(LinearProgress$1, _extends$3({
        className: classes.progress,
        variant: "determinate",
        value: Math.ceil(activeStep / (steps - 1) * 100)
      }, LinearProgressProps)), nextButton);
    });
    process.env.NODE_ENV !== "production" ? MobileStepper.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * Set the active step (zero based index).
       * Defines which dot is highlighted when the variant is 'dots'.
       */
      activeStep: re.number,

      /**
       * A back button element. For instance, it can be a `Button` or an `IconButton`.
       */
      backButton: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * Props applied to the `LinearProgress` element.
       */
      LinearProgressProps: re.object,

      /**
       * A next button element. For instance, it can be a `Button` or an `IconButton`.
       */
      nextButton: re.node,

      /**
       * Set the positioning type.
       */
      position: re.oneOf(['bottom', 'static', 'top']),

      /**
       * The total steps.
       */
      steps: re.number.isRequired,

      /**
       * The variant to use.
       */
      variant: re.oneOf(['dots', 'progress', 'text'])
    } : void 0;
    var MobileStepper$1 = withStyles(styles$Y, {
      name: 'MuiMobileStepper'
    })(MobileStepper);

    /**
     * @ignore - internal component.
     */

    var NativeSelectInput = /*#__PURE__*/React__namespace.forwardRef(function NativeSelectInput(props, ref) {
      var classes = props.classes,
          className = props.className,
          disabled = props.disabled,
          IconComponent = props.IconComponent,
          inputRef = props.inputRef,
          _props$variant = props.variant,
          variant = _props$variant === void 0 ? 'standard' : _props$variant,
          other = _objectWithoutProperties(props, ["classes", "className", "disabled", "IconComponent", "inputRef", "variant"]);

      return /*#__PURE__*/React__namespace.createElement(React__namespace.Fragment, null, /*#__PURE__*/React__namespace.createElement("select", _extends$3({
        className: r$1(classes.root, // TODO v5: merge root and select
        classes.select, classes[variant], className, disabled && classes.disabled),
        disabled: disabled,
        ref: inputRef || ref
      }, other)), props.multiple ? null : /*#__PURE__*/React__namespace.createElement(IconComponent, {
        className: r$1(classes.icon, classes["icon".concat(capitalize(variant))], disabled && classes.disabled)
      }));
    });
    process.env.NODE_ENV !== "production" ? NativeSelectInput.propTypes = {
      /**
       * The option elements to populate the select with.
       * Can be some `<option>` elements.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object.isRequired,

      /**
       * The CSS class name of the select element.
       */
      className: re.string,

      /**
       * If `true`, the select will be disabled.
       */
      disabled: re.bool,

      /**
       * The icon that displays the arrow.
       */
      IconComponent: re.elementType.isRequired,

      /**
       * Use that prop to pass a ref to the native select element.
       * @deprecated
       */
      inputRef: refType$1,

      /**
       * @ignore
       */
      multiple: re.bool,

      /**
       * Name attribute of the `select` or hidden `input` element.
       */
      name: re.string,

      /**
       * Callback function fired when a menu item is selected.
       *
       * @param {object} event The event source of the callback.
       * You can pull out the new value by accessing `event.target.value` (string).
       */
      onChange: re.func,

      /**
       * The input value.
       */
      value: re.any,

      /**
       * The variant to use.
       */
      variant: re.oneOf(['standard', 'outlined', 'filled'])
    } : void 0;
    var NativeSelectInput$1 = NativeSelectInput;

    /**
     * @ignore - internal component.
     */

    var ArrowDropDownIcon$1 = createSvgIcon$1( /*#__PURE__*/React__namespace.createElement("path", {
      d: "M7 10l5 5 5-5z"
    }), 'ArrowDropDown');

    var styles$X = function styles(theme) {
      return {
        /* Styles applied to the select component `root` class. */
        root: {},

        /* Styles applied to the select component `select` class. */
        select: {
          '-moz-appearance': 'none',
          // Reset
          '-webkit-appearance': 'none',
          // Reset
          // When interacting quickly, the text can end up selected.
          // Native select can't be selected either.
          userSelect: 'none',
          borderRadius: 0,
          // Reset
          minWidth: 16,
          // So it doesn't collapse.
          cursor: 'pointer',
          '&:focus': {
            // Show that it's not an text input
            backgroundColor: theme.palette.type === 'light' ? 'rgba(0, 0, 0, 0.05)' : 'rgba(255, 255, 255, 0.05)',
            borderRadius: 0 // Reset Chrome style

          },
          // Remove IE 11 arrow
          '&::-ms-expand': {
            display: 'none'
          },
          '&$disabled': {
            cursor: 'default'
          },
          '&[multiple]': {
            height: 'auto'
          },
          '&:not([multiple]) option, &:not([multiple]) optgroup': {
            backgroundColor: theme.palette.background.paper
          },
          '&&': {
            paddingRight: 24
          }
        },

        /* Styles applied to the select component if `variant="filled"`. */
        filled: {
          '&&': {
            paddingRight: 32
          }
        },

        /* Styles applied to the select component if `variant="outlined"`. */
        outlined: {
          borderRadius: theme.shape.borderRadius,
          '&&': {
            paddingRight: 32
          }
        },

        /* Styles applied to the select component `selectMenu` class. */
        selectMenu: {
          height: 'auto',
          // Resets for multpile select with chips
          minHeight: '1.1876em',
          // Required for select\text-field height consistency
          textOverflow: 'ellipsis',
          whiteSpace: 'nowrap',
          overflow: 'hidden'
        },

        /* Pseudo-class applied to the select component `disabled` class. */
        disabled: {},

        /* Styles applied to the icon component. */
        icon: {
          // We use a position absolute over a flexbox in order to forward the pointer events
          // to the input and to support wrapping tags..
          position: 'absolute',
          right: 0,
          top: 'calc(50% - 12px)',
          // Center vertically
          pointerEvents: 'none',
          // Don't block pointer events on the select under the icon.
          color: theme.palette.action.active,
          '&$disabled': {
            color: theme.palette.action.disabled
          }
        },

        /* Styles applied to the icon component if the popup is open. */
        iconOpen: {
          transform: 'rotate(180deg)'
        },

        /* Styles applied to the icon component if `variant="filled"`. */
        iconFilled: {
          right: 7
        },

        /* Styles applied to the icon component if `variant="outlined"`. */
        iconOutlined: {
          right: 7
        },

        /* Styles applied to the underlying native input component. */
        nativeInput: {
          bottom: 0,
          left: 0,
          position: 'absolute',
          opacity: 0,
          pointerEvents: 'none',
          width: '100%'
        }
      };
    };
    var defaultInput = /*#__PURE__*/React__namespace.createElement(Input$1, null);
    /**
     * An alternative to `<Select native />` with a much smaller bundle size footprint.
     */

    var NativeSelect = /*#__PURE__*/React__namespace.forwardRef(function NativeSelect(props, ref) {
      var children = props.children,
          classes = props.classes,
          _props$IconComponent = props.IconComponent,
          IconComponent = _props$IconComponent === void 0 ? ArrowDropDownIcon$1 : _props$IconComponent,
          _props$input = props.input,
          input = _props$input === void 0 ? defaultInput : _props$input,
          inputProps = props.inputProps;
          props.variant;
          var other = _objectWithoutProperties(props, ["children", "classes", "IconComponent", "input", "inputProps", "variant"]);

      var muiFormControl = useFormControl();
      var fcs = formControlState({
        props: props,
        muiFormControl: muiFormControl,
        states: ['variant']
      });
      return /*#__PURE__*/React__namespace.cloneElement(input, _extends$3({
        // Most of the logic is implemented in `NativeSelectInput`.
        // The `Select` component is a simple API wrapper to expose something better to play with.
        inputComponent: NativeSelectInput$1,
        inputProps: _extends$3({
          children: children,
          classes: classes,
          IconComponent: IconComponent,
          variant: fcs.variant,
          type: undefined
        }, inputProps, input ? input.props.inputProps : {}),
        ref: ref
      }, other));
    });
    process.env.NODE_ENV !== "production" ? NativeSelect.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * The option elements to populate the select with.
       * Can be some `<option>` elements.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * The icon that displays the arrow.
       */
      IconComponent: re.elementType,

      /**
       * An `Input` element; does not have to be a material-ui specific `Input`.
       */
      input: re.element,

      /**
       * Attributes applied to the `select` element.
       */
      inputProps: re.object,

      /**
       * Callback function fired when a menu item is selected.
       *
       * @param {object} event The event source of the callback.
       * You can pull out the new value by accessing `event.target.value` (string).
       */
      onChange: re.func,

      /**
       * The input value. The DOM API casts this to a string.
       */
      value: re.any,

      /**
       * The variant to use.
       */
      variant: re.oneOf(['filled', 'outlined', 'standard'])
    } : void 0;
    NativeSelect.muiName = 'Select';
    var NativeSelect$1 = withStyles(styles$X, {
      name: 'MuiNativeSelect'
    })(NativeSelect);

    var useEnhancedEffect$2 = typeof window !== 'undefined' && process.env.NODE_ENV !== 'test' ? React__namespace.useLayoutEffect : React__namespace.useEffect;
    /**
     * NoSsr purposely removes components from the subject of Server Side Rendering (SSR).
     *
     * This component can be useful in a variety of situations:
     * - Escape hatch for broken dependencies not supporting SSR.
     * - Improve the time-to-first paint on the client by only rendering above the fold.
     * - Reduce the rendering time on the server.
     * - Under too heavy server load, you can turn on service degradation.
     */

    function NoSsr(props) {
      var children = props.children,
          _props$defer = props.defer,
          defer = _props$defer === void 0 ? false : _props$defer,
          _props$fallback = props.fallback,
          fallback = _props$fallback === void 0 ? null : _props$fallback;

      var _React$useState = React__namespace.useState(false),
          mountedState = _React$useState[0],
          setMountedState = _React$useState[1];

      useEnhancedEffect$2(function () {
        if (!defer) {
          setMountedState(true);
        }
      }, [defer]);
      React__namespace.useEffect(function () {
        if (defer) {
          setMountedState(true);
        }
      }, [defer]); // We need the Fragment here to force react-docgen to recognise NoSsr as a component.

      return /*#__PURE__*/React__namespace.createElement(React__namespace.Fragment, null, mountedState ? children : fallback);
    }

    process.env.NODE_ENV !== "production" ? NoSsr.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * You can wrap a node.
       */
      children: re.node,

      /**
       * If `true`, the component will not only prevent server-side rendering.
       * It will also defer the rendering of the children into a different screen frame.
       */
      defer: re.bool,

      /**
       * The fallback content to display.
       */
      fallback: re.node
    } : void 0;

    if (process.env.NODE_ENV !== 'production') {
      // eslint-disable-next-line
      NoSsr['propTypes' + ''] = exactProp(NoSsr.propTypes);
    }

    var styles$W = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          position: 'absolute',
          bottom: 0,
          right: 0,
          top: -5,
          left: 0,
          margin: 0,
          padding: '0 8px',
          pointerEvents: 'none',
          borderRadius: 'inherit',
          borderStyle: 'solid',
          borderWidth: 1,
          overflow: 'hidden'
        },

        /* Styles applied to the legend element when `labelWidth` is provided. */
        legend: {
          textAlign: 'left',
          padding: 0,
          lineHeight: '11px',
          // sync with `height` in `legend` styles
          transition: theme.transitions.create('width', {
            duration: 150,
            easing: theme.transitions.easing.easeOut
          })
        },

        /* Styles applied to the legend element. */
        legendLabelled: {
          display: 'block',
          width: 'auto',
          textAlign: 'left',
          padding: 0,
          height: 11,
          // sync with `lineHeight` in `legend` styles
          fontSize: '0.75em',
          visibility: 'hidden',
          maxWidth: 0.01,
          transition: theme.transitions.create('max-width', {
            duration: 50,
            easing: theme.transitions.easing.easeOut
          }),
          '& > span': {
            paddingLeft: 5,
            paddingRight: 5,
            display: 'inline-block'
          }
        },

        /* Styles applied to the legend element is notched. */
        legendNotched: {
          maxWidth: 1000,
          transition: theme.transitions.create('max-width', {
            duration: 100,
            easing: theme.transitions.easing.easeOut,
            delay: 50
          })
        }
      };
    };
    /**
     * @ignore - internal component.
     */

    var NotchedOutline = /*#__PURE__*/React__namespace.forwardRef(function NotchedOutline(props, ref) {
      props.children;
          var classes = props.classes,
          className = props.className,
          label = props.label,
          labelWidthProp = props.labelWidth,
          notched = props.notched,
          style = props.style,
          other = _objectWithoutProperties(props, ["children", "classes", "className", "label", "labelWidth", "notched", "style"]);

      var theme = useTheme();
      var align = theme.direction === 'rtl' ? 'right' : 'left';

      if (label !== undefined) {
        return /*#__PURE__*/React__namespace.createElement("fieldset", _extends$3({
          "aria-hidden": true,
          className: r$1(classes.root, className),
          ref: ref,
          style: style
        }, other), /*#__PURE__*/React__namespace.createElement("legend", {
          className: r$1(classes.legendLabelled, notched && classes.legendNotched)
        }, label ? /*#__PURE__*/React__namespace.createElement("span", null, label) : /*#__PURE__*/React__namespace.createElement("span", {
          dangerouslySetInnerHTML: {
            __html: '&#8203;'
          }
        })));
      }

      var labelWidth = labelWidthProp > 0 ? labelWidthProp * 0.75 + 8 : 0.01;
      return /*#__PURE__*/React__namespace.createElement("fieldset", _extends$3({
        "aria-hidden": true,
        style: _extends$3(_defineProperty({}, "padding".concat(capitalize(align)), 8), style),
        className: r$1(classes.root, className),
        ref: ref
      }, other), /*#__PURE__*/React__namespace.createElement("legend", {
        className: classes.legend,
        style: {
          // IE 11: fieldset with legend does not render
          // a border radius. This maintains consistency
          // by always having a legend rendered
          width: notched ? labelWidth : 0.01
        }
      }, /*#__PURE__*/React__namespace.createElement("span", {
        dangerouslySetInnerHTML: {
          __html: '&#8203;'
        }
      })));
    });
    process.env.NODE_ENV !== "production" ? NotchedOutline.propTypes = {
      /**
       * The content of the component.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * The label.
       */
      label: re.node,

      /**
       * The width of the label.
       */
      labelWidth: re.number.isRequired,

      /**
       * If `true`, the outline is notched to accommodate the label.
       */
      notched: re.bool.isRequired,

      /**
       * @ignore
       */
      style: re.object
    } : void 0;
    var NotchedOutline$1 = withStyles(styles$W, {
      name: 'PrivateNotchedOutline'
    })(NotchedOutline);

    var styles$V = function styles(theme) {
      var borderColor = theme.palette.type === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)';
      return {
        /* Styles applied to the root element. */
        root: {
          position: 'relative',
          borderRadius: theme.shape.borderRadius,
          '&:hover $notchedOutline': {
            borderColor: theme.palette.text.primary
          },
          // Reset on touch devices, it doesn't add specificity
          '@media (hover: none)': {
            '&:hover $notchedOutline': {
              borderColor: borderColor
            }
          },
          '&$focused $notchedOutline': {
            borderColor: theme.palette.primary.main,
            borderWidth: 2
          },
          '&$error $notchedOutline': {
            borderColor: theme.palette.error.main
          },
          '&$disabled $notchedOutline': {
            borderColor: theme.palette.action.disabled
          }
        },

        /* Styles applied to the root element if the color is secondary. */
        colorSecondary: {
          '&$focused $notchedOutline': {
            borderColor: theme.palette.secondary.main
          }
        },

        /* Styles applied to the root element if the component is focused. */
        focused: {},

        /* Styles applied to the root element if `disabled={true}`. */
        disabled: {},

        /* Styles applied to the root element if `startAdornment` is provided. */
        adornedStart: {
          paddingLeft: 14
        },

        /* Styles applied to the root element if `endAdornment` is provided. */
        adornedEnd: {
          paddingRight: 14
        },

        /* Pseudo-class applied to the root element if `error={true}`. */
        error: {},

        /* Styles applied to the `input` element if `margin="dense"`. */
        marginDense: {},

        /* Styles applied to the root element if `multiline={true}`. */
        multiline: {
          padding: '18.5px 14px',
          '&$marginDense': {
            paddingTop: 10.5,
            paddingBottom: 10.5
          }
        },

        /* Styles applied to the `NotchedOutline` element. */
        notchedOutline: {
          borderColor: borderColor
        },

        /* Styles applied to the `input` element. */
        input: {
          padding: '18.5px 14px',
          '&:-webkit-autofill': {
            WebkitBoxShadow: theme.palette.type === 'light' ? null : '0 0 0 100px #266798 inset',
            WebkitTextFillColor: theme.palette.type === 'light' ? null : '#fff',
            caretColor: theme.palette.type === 'light' ? null : '#fff',
            borderRadius: 'inherit'
          }
        },

        /* Styles applied to the `input` element if `margin="dense"`. */
        inputMarginDense: {
          paddingTop: 10.5,
          paddingBottom: 10.5
        },

        /* Styles applied to the `input` element if `multiline={true}`. */
        inputMultiline: {
          padding: 0
        },

        /* Styles applied to the `input` element if `startAdornment` is provided. */
        inputAdornedStart: {
          paddingLeft: 0
        },

        /* Styles applied to the `input` element if `endAdornment` is provided. */
        inputAdornedEnd: {
          paddingRight: 0
        }
      };
    };
    var OutlinedInput = /*#__PURE__*/React__namespace.forwardRef(function OutlinedInput(props, ref) {
      var classes = props.classes,
          _props$fullWidth = props.fullWidth,
          fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,
          _props$inputComponent = props.inputComponent,
          inputComponent = _props$inputComponent === void 0 ? 'input' : _props$inputComponent,
          label = props.label,
          _props$labelWidth = props.labelWidth,
          labelWidth = _props$labelWidth === void 0 ? 0 : _props$labelWidth,
          _props$multiline = props.multiline,
          multiline = _props$multiline === void 0 ? false : _props$multiline,
          notched = props.notched,
          _props$type = props.type,
          type = _props$type === void 0 ? 'text' : _props$type,
          other = _objectWithoutProperties(props, ["classes", "fullWidth", "inputComponent", "label", "labelWidth", "multiline", "notched", "type"]);

      return /*#__PURE__*/React__namespace.createElement(v, _extends$3({
        renderSuffix: function renderSuffix(state) {
          return /*#__PURE__*/React__namespace.createElement(NotchedOutline$1, {
            className: classes.notchedOutline,
            label: label,
            labelWidth: labelWidth,
            notched: typeof notched !== 'undefined' ? notched : Boolean(state.startAdornment || state.filled || state.focused)
          });
        },
        classes: _extends$3({}, classes, {
          root: r$1(classes.root, classes.underline),
          notchedOutline: null
        }),
        fullWidth: fullWidth,
        inputComponent: inputComponent,
        multiline: multiline,
        ref: ref,
        type: type
      }, other));
    });
    process.env.NODE_ENV !== "production" ? OutlinedInput.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * This prop helps users to fill forms faster, especially on mobile devices.
       * The name can be confusing, as it's more like an autofill.
       * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
       */
      autoComplete: re.string,

      /**
       * If `true`, the `input` element will be focused during the first mount.
       */
      autoFocus: re.bool,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * The color of the component. It supports those theme colors that make sense for this component.
       */
      color: re.oneOf(['primary', 'secondary']),

      /**
       * The default `input` element value. Use when the component is not controlled.
       */
      defaultValue: re.any,

      /**
       * If `true`, the `input` element will be disabled.
       */
      disabled: re.bool,

      /**
       * End `InputAdornment` for this component.
       */
      endAdornment: re.node,

      /**
       * If `true`, the input will indicate an error. This is normally obtained via context from
       * FormControl.
       */
      error: re.bool,

      /**
       * If `true`, the input will take up the full width of its container.
       */
      fullWidth: re.bool,

      /**
       * The id of the `input` element.
       */
      id: re.string,

      /**
       * The component used for the `input` element.
       * Either a string to use a HTML element or a component.
       */
      inputComponent: re.elementType,

      /**
       * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
       */
      inputProps: re.object,

      /**
       * Pass a ref to the `input` element.
       */
      inputRef: refType$1,

      /**
       * The label of the input. It is only used for layout. The actual labelling
       * is handled by `InputLabel`. If specified `labelWidth` is ignored.
       */
      label: re.node,

      /**
       * The width of the label. Is ignored if `label` is provided. Prefer `label`
       * if the input label appears with a strike through.
       */
      labelWidth: re.number,

      /**
       * If `dense`, will adjust vertical spacing. This is normally obtained via context from
       * FormControl.
       */
      margin: re.oneOf(['dense', 'none']),

      /**
       * Maximum number of rows to display when multiline option is set to true.
       */
      maxRows: re.oneOfType([re.number, re.string]),

      /**
       * If `true`, a textarea element will be rendered.
       */
      multiline: re.bool,

      /**
       * Name attribute of the `input` element.
       */
      name: re.string,

      /**
       * If `true`, the outline is notched to accommodate the label.
       */
      notched: re.bool,

      /**
       * Callback fired when the value is changed.
       *
       * @param {object} event The event source of the callback.
       * You can pull out the new value by accessing `event.target.value` (string).
       */
      onChange: re.func,

      /**
       * The short hint displayed in the input before the user enters a value.
       */
      placeholder: re.string,

      /**
       * It prevents the user from changing the value of the field
       * (not from interacting with the field).
       */
      readOnly: re.bool,

      /**
       * If `true`, the `input` element will be required.
       */
      required: re.bool,

      /**
       * Number of rows to display when multiline option is set to true.
       */
      rows: re.oneOfType([re.number, re.string]),

      /**
       * Start `InputAdornment` for this component.
       */
      startAdornment: re.node,

      /**
       * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
       */
      type: re.string,

      /**
       * The value of the `input` element, required for a controlled component.
       */
      value: re.any
    } : void 0;
    OutlinedInput.muiName = 'Input';
    var OutlinedInput$1 = withStyles(styles$V, {
      name: 'MuiOutlinedInput'
    })(OutlinedInput);

    /**!
     * @fileOverview Kickass library to create and place poppers near their reference elements.
     * @version 1.16.1-lts
     * @license
     * Copyright (c) 2016 Federico Zivolo and contributors
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in all
     * copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
     * SOFTWARE.
     */
    var isBrowser$1 = typeof window !== 'undefined' && typeof document !== 'undefined' && typeof navigator !== 'undefined';

    var timeoutDuration = function () {
      var longerTimeoutBrowsers = ['Edge', 'Trident', 'Firefox'];
      for (var i = 0; i < longerTimeoutBrowsers.length; i += 1) {
        if (isBrowser$1 && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {
          return 1;
        }
      }
      return 0;
    }();

    function microtaskDebounce(fn) {
      var called = false;
      return function () {
        if (called) {
          return;
        }
        called = true;
        window.Promise.resolve().then(function () {
          called = false;
          fn();
        });
      };
    }

    function taskDebounce(fn) {
      var scheduled = false;
      return function () {
        if (!scheduled) {
          scheduled = true;
          setTimeout(function () {
            scheduled = false;
            fn();
          }, timeoutDuration);
        }
      };
    }

    var supportsMicroTasks = isBrowser$1 && window.Promise;

    /**
    * Create a debounced version of a method, that's asynchronously deferred
    * but called in the minimum time possible.
    *
    * @method
    * @memberof Popper.Utils
    * @argument {Function} fn
    * @returns {Function}
    */
    var debounce = supportsMicroTasks ? microtaskDebounce : taskDebounce;

    /**
     * Check if the given variable is a function
     * @method
     * @memberof Popper.Utils
     * @argument {Any} functionToCheck - variable to check
     * @returns {Boolean} answer to: is a function?
     */
    function isFunction$2(functionToCheck) {
      var getType = {};
      return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';
    }

    /**
     * Get CSS computed property of the given element
     * @method
     * @memberof Popper.Utils
     * @argument {Eement} element
     * @argument {String} property
     */
    function getStyleComputedProperty(element, property) {
      if (element.nodeType !== 1) {
        return [];
      }
      // NOTE: 1 DOM access here
      var window = element.ownerDocument.defaultView;
      var css = window.getComputedStyle(element, null);
      return property ? css[property] : css;
    }

    /**
     * Returns the parentNode or the host of the element
     * @method
     * @memberof Popper.Utils
     * @argument {Element} element
     * @returns {Element} parent
     */
    function getParentNode(element) {
      if (element.nodeName === 'HTML') {
        return element;
      }
      return element.parentNode || element.host;
    }

    /**
     * Returns the scrolling parent of the given element
     * @method
     * @memberof Popper.Utils
     * @argument {Element} element
     * @returns {Element} scroll parent
     */
    function getScrollParent(element) {
      // Return body, `getScroll` will take care to get the correct `scrollTop` from it
      if (!element) {
        return document.body;
      }

      switch (element.nodeName) {
        case 'HTML':
        case 'BODY':
          return element.ownerDocument.body;
        case '#document':
          return element.body;
      }

      // Firefox want us to check `-x` and `-y` variations as well

      var _getStyleComputedProp = getStyleComputedProperty(element),
          overflow = _getStyleComputedProp.overflow,
          overflowX = _getStyleComputedProp.overflowX,
          overflowY = _getStyleComputedProp.overflowY;

      if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) {
        return element;
      }

      return getScrollParent(getParentNode(element));
    }

    /**
     * Returns the reference node of the reference object, or the reference object itself.
     * @method
     * @memberof Popper.Utils
     * @param {Element|Object} reference - the reference element (the popper will be relative to this)
     * @returns {Element} parent
     */
    function getReferenceNode(reference) {
      return reference && reference.referenceNode ? reference.referenceNode : reference;
    }

    var isIE11 = isBrowser$1 && !!(window.MSInputMethodContext && document.documentMode);
    var isIE10 = isBrowser$1 && /MSIE 10/.test(navigator.userAgent);

    /**
     * Determines if the browser is Internet Explorer
     * @method
     * @memberof Popper.Utils
     * @param {Number} version to check
     * @returns {Boolean} isIE
     */
    function isIE(version) {
      if (version === 11) {
        return isIE11;
      }
      if (version === 10) {
        return isIE10;
      }
      return isIE11 || isIE10;
    }

    /**
     * Returns the offset parent of the given element
     * @method
     * @memberof Popper.Utils
     * @argument {Element} element
     * @returns {Element} offset parent
     */
    function getOffsetParent(element) {
      if (!element) {
        return document.documentElement;
      }

      var noOffsetParent = isIE(10) ? document.body : null;

      // NOTE: 1 DOM access here
      var offsetParent = element.offsetParent || null;
      // Skip hidden elements which don't have an offsetParent
      while (offsetParent === noOffsetParent && element.nextElementSibling) {
        offsetParent = (element = element.nextElementSibling).offsetParent;
      }

      var nodeName = offsetParent && offsetParent.nodeName;

      if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {
        return element ? element.ownerDocument.documentElement : document.documentElement;
      }

      // .offsetParent will return the closest TH, TD or TABLE in case
      // no offsetParent is present, I hate this job...
      if (['TH', 'TD', 'TABLE'].indexOf(offsetParent.nodeName) !== -1 && getStyleComputedProperty(offsetParent, 'position') === 'static') {
        return getOffsetParent(offsetParent);
      }

      return offsetParent;
    }

    function isOffsetContainer(element) {
      var nodeName = element.nodeName;

      if (nodeName === 'BODY') {
        return false;
      }
      return nodeName === 'HTML' || getOffsetParent(element.firstElementChild) === element;
    }

    /**
     * Finds the root node (document, shadowDOM root) of the given element
     * @method
     * @memberof Popper.Utils
     * @argument {Element} node
     * @returns {Element} root node
     */
    function getRoot$1(node) {
      if (node.parentNode !== null) {
        return getRoot$1(node.parentNode);
      }

      return node;
    }

    /**
     * Finds the offset parent common to the two provided nodes
     * @method
     * @memberof Popper.Utils
     * @argument {Element} element1
     * @argument {Element} element2
     * @returns {Element} common offset parent
     */
    function findCommonOffsetParent(element1, element2) {
      // This check is needed to avoid errors in case one of the elements isn't defined for any reason
      if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {
        return document.documentElement;
      }

      // Here we make sure to give as "start" the element that comes first in the DOM
      var order = element1.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_FOLLOWING;
      var start = order ? element1 : element2;
      var end = order ? element2 : element1;

      // Get common ancestor container
      var range = document.createRange();
      range.setStart(start, 0);
      range.setEnd(end, 0);
      var commonAncestorContainer = range.commonAncestorContainer;

      // Both nodes are inside #document

      if (element1 !== commonAncestorContainer && element2 !== commonAncestorContainer || start.contains(end)) {
        if (isOffsetContainer(commonAncestorContainer)) {
          return commonAncestorContainer;
        }

        return getOffsetParent(commonAncestorContainer);
      }

      // one of the nodes is inside shadowDOM, find which one
      var element1root = getRoot$1(element1);
      if (element1root.host) {
        return findCommonOffsetParent(element1root.host, element2);
      } else {
        return findCommonOffsetParent(element1, getRoot$1(element2).host);
      }
    }

    /**
     * Gets the scroll value of the given element in the given side (top and left)
     * @method
     * @memberof Popper.Utils
     * @argument {Element} element
     * @argument {String} side `top` or `left`
     * @returns {number} amount of scrolled pixels
     */
    function getScroll(element) {
      var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'top';

      var upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';
      var nodeName = element.nodeName;

      if (nodeName === 'BODY' || nodeName === 'HTML') {
        var html = element.ownerDocument.documentElement;
        var scrollingElement = element.ownerDocument.scrollingElement || html;
        return scrollingElement[upperSide];
      }

      return element[upperSide];
    }

    /*
     * Sum or subtract the element scroll values (left and top) from a given rect object
     * @method
     * @memberof Popper.Utils
     * @param {Object} rect - Rect object you want to change
     * @param {HTMLElement} element - The element from the function reads the scroll values
     * @param {Boolean} subtract - set to true if you want to subtract the scroll values
     * @return {Object} rect - The modifier rect object
     */
    function includeScroll(rect, element) {
      var subtract = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

      var scrollTop = getScroll(element, 'top');
      var scrollLeft = getScroll(element, 'left');
      var modifier = subtract ? -1 : 1;
      rect.top += scrollTop * modifier;
      rect.bottom += scrollTop * modifier;
      rect.left += scrollLeft * modifier;
      rect.right += scrollLeft * modifier;
      return rect;
    }

    /*
     * Helper to detect borders of a given element
     * @method
     * @memberof Popper.Utils
     * @param {CSSStyleDeclaration} styles
     * Result of `getStyleComputedProperty` on the given element
     * @param {String} axis - `x` or `y`
     * @return {number} borders - The borders size of the given axis
     */

    function getBordersSize$1(styles, axis) {
      var sideA = axis === 'x' ? 'Left' : 'Top';
      var sideB = sideA === 'Left' ? 'Right' : 'Bottom';

      return parseFloat(styles['border' + sideA + 'Width']) + parseFloat(styles['border' + sideB + 'Width']);
    }

    function getSize(axis, body, html, computedStyle) {
      return Math.max(body['offset' + axis], body['scroll' + axis], html['client' + axis], html['offset' + axis], html['scroll' + axis], isIE(10) ? parseInt(html['offset' + axis]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Top' : 'Left')]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Bottom' : 'Right')]) : 0);
    }

    function getWindowSizes(document) {
      var body = document.body;
      var html = document.documentElement;
      var computedStyle = isIE(10) && getComputedStyle(html);

      return {
        height: getSize('Height', body, html, computedStyle),
        width: getSize('Width', body, html, computedStyle)
      };
    }

    var classCallCheck$1 = function (instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    };

    var createClass$1 = function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();





    var defineProperty$2 = function (obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }

      return obj;
    };

    var _extends$2 = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    /**
     * Given element offsets, generate an output similar to getBoundingClientRect
     * @method
     * @memberof Popper.Utils
     * @argument {Object} offsets
     * @returns {Object} ClientRect like output
     */
    function getClientRect(offsets) {
      return _extends$2({}, offsets, {
        right: offsets.left + offsets.width,
        bottom: offsets.top + offsets.height
      });
    }

    /**
     * Get bounding client rect of given element
     * @method
     * @memberof Popper.Utils
     * @param {HTMLElement} element
     * @return {Object} client rect
     */
    function getBoundingClientRect(element) {
      var rect = {};

      // IE10 10 FIX: Please, don't ask, the element isn't
      // considered in DOM in some circumstances...
      // This isn't reproducible in IE10 compatibility mode of IE11
      try {
        if (isIE(10)) {
          rect = element.getBoundingClientRect();
          var scrollTop = getScroll(element, 'top');
          var scrollLeft = getScroll(element, 'left');
          rect.top += scrollTop;
          rect.left += scrollLeft;
          rect.bottom += scrollTop;
          rect.right += scrollLeft;
        } else {
          rect = element.getBoundingClientRect();
        }
      } catch (e) {}

      var result = {
        left: rect.left,
        top: rect.top,
        width: rect.right - rect.left,
        height: rect.bottom - rect.top
      };

      // subtract scrollbar size from sizes
      var sizes = element.nodeName === 'HTML' ? getWindowSizes(element.ownerDocument) : {};
      var width = sizes.width || element.clientWidth || result.width;
      var height = sizes.height || element.clientHeight || result.height;

      var horizScrollbar = element.offsetWidth - width;
      var vertScrollbar = element.offsetHeight - height;

      // if an hypothetical scrollbar is detected, we must be sure it's not a `border`
      // we make this check conditional for performance reasons
      if (horizScrollbar || vertScrollbar) {
        var styles = getStyleComputedProperty(element);
        horizScrollbar -= getBordersSize$1(styles, 'x');
        vertScrollbar -= getBordersSize$1(styles, 'y');

        result.width -= horizScrollbar;
        result.height -= vertScrollbar;
      }

      return getClientRect(result);
    }

    function getOffsetRectRelativeToArbitraryNode(children, parent) {
      var fixedPosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

      var isIE10 = isIE(10);
      var isHTML = parent.nodeName === 'HTML';
      var childrenRect = getBoundingClientRect(children);
      var parentRect = getBoundingClientRect(parent);
      var scrollParent = getScrollParent(children);

      var styles = getStyleComputedProperty(parent);
      var borderTopWidth = parseFloat(styles.borderTopWidth);
      var borderLeftWidth = parseFloat(styles.borderLeftWidth);

      // In cases where the parent is fixed, we must ignore negative scroll in offset calc
      if (fixedPosition && isHTML) {
        parentRect.top = Math.max(parentRect.top, 0);
        parentRect.left = Math.max(parentRect.left, 0);
      }
      var offsets = getClientRect({
        top: childrenRect.top - parentRect.top - borderTopWidth,
        left: childrenRect.left - parentRect.left - borderLeftWidth,
        width: childrenRect.width,
        height: childrenRect.height
      });
      offsets.marginTop = 0;
      offsets.marginLeft = 0;

      // Subtract margins of documentElement in case it's being used as parent
      // we do this only on HTML because it's the only element that behaves
      // differently when margins are applied to it. The margins are included in
      // the box of the documentElement, in the other cases not.
      if (!isIE10 && isHTML) {
        var marginTop = parseFloat(styles.marginTop);
        var marginLeft = parseFloat(styles.marginLeft);

        offsets.top -= borderTopWidth - marginTop;
        offsets.bottom -= borderTopWidth - marginTop;
        offsets.left -= borderLeftWidth - marginLeft;
        offsets.right -= borderLeftWidth - marginLeft;

        // Attach marginTop and marginLeft because in some circumstances we may need them
        offsets.marginTop = marginTop;
        offsets.marginLeft = marginLeft;
      }

      if (isIE10 && !fixedPosition ? parent.contains(scrollParent) : parent === scrollParent && scrollParent.nodeName !== 'BODY') {
        offsets = includeScroll(offsets, parent);
      }

      return offsets;
    }

    function getViewportOffsetRectRelativeToArtbitraryNode(element) {
      var excludeScroll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      var html = element.ownerDocument.documentElement;
      var relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);
      var width = Math.max(html.clientWidth, window.innerWidth || 0);
      var height = Math.max(html.clientHeight, window.innerHeight || 0);

      var scrollTop = !excludeScroll ? getScroll(html) : 0;
      var scrollLeft = !excludeScroll ? getScroll(html, 'left') : 0;

      var offset = {
        top: scrollTop - relativeOffset.top + relativeOffset.marginTop,
        left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,
        width: width,
        height: height
      };

      return getClientRect(offset);
    }

    /**
     * Check if the given element is fixed or is inside a fixed parent
     * @method
     * @memberof Popper.Utils
     * @argument {Element} element
     * @argument {Element} customContainer
     * @returns {Boolean} answer to "isFixed?"
     */
    function isFixed(element) {
      var nodeName = element.nodeName;
      if (nodeName === 'BODY' || nodeName === 'HTML') {
        return false;
      }
      if (getStyleComputedProperty(element, 'position') === 'fixed') {
        return true;
      }
      var parentNode = getParentNode(element);
      if (!parentNode) {
        return false;
      }
      return isFixed(parentNode);
    }

    /**
     * Finds the first parent of an element that has a transformed property defined
     * @method
     * @memberof Popper.Utils
     * @argument {Element} element
     * @returns {Element} first transformed parent or documentElement
     */

    function getFixedPositionOffsetParent(element) {
      // This check is needed to avoid errors in case one of the elements isn't defined for any reason
      if (!element || !element.parentElement || isIE()) {
        return document.documentElement;
      }
      var el = element.parentElement;
      while (el && getStyleComputedProperty(el, 'transform') === 'none') {
        el = el.parentElement;
      }
      return el || document.documentElement;
    }

    /**
     * Computed the boundaries limits and return them
     * @method
     * @memberof Popper.Utils
     * @param {HTMLElement} popper
     * @param {HTMLElement} reference
     * @param {number} padding
     * @param {HTMLElement} boundariesElement - Element used to define the boundaries
     * @param {Boolean} fixedPosition - Is in fixed position mode
     * @returns {Object} Coordinates of the boundaries
     */
    function getBoundaries(popper, reference, padding, boundariesElement) {
      var fixedPosition = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

      // NOTE: 1 DOM access here

      var boundaries = { top: 0, left: 0 };
      var offsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference));

      // Handle viewport case
      if (boundariesElement === 'viewport') {
        boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent, fixedPosition);
      } else {
        // Handle other cases based on DOM element used as boundaries
        var boundariesNode = void 0;
        if (boundariesElement === 'scrollParent') {
          boundariesNode = getScrollParent(getParentNode(reference));
          if (boundariesNode.nodeName === 'BODY') {
            boundariesNode = popper.ownerDocument.documentElement;
          }
        } else if (boundariesElement === 'window') {
          boundariesNode = popper.ownerDocument.documentElement;
        } else {
          boundariesNode = boundariesElement;
        }

        var offsets = getOffsetRectRelativeToArbitraryNode(boundariesNode, offsetParent, fixedPosition);

        // In case of HTML, we need a different computation
        if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {
          var _getWindowSizes = getWindowSizes(popper.ownerDocument),
              height = _getWindowSizes.height,
              width = _getWindowSizes.width;

          boundaries.top += offsets.top - offsets.marginTop;
          boundaries.bottom = height + offsets.top;
          boundaries.left += offsets.left - offsets.marginLeft;
          boundaries.right = width + offsets.left;
        } else {
          // for all the other DOM elements, this one is good
          boundaries = offsets;
        }
      }

      // Add paddings
      padding = padding || 0;
      var isPaddingNumber = typeof padding === 'number';
      boundaries.left += isPaddingNumber ? padding : padding.left || 0;
      boundaries.top += isPaddingNumber ? padding : padding.top || 0;
      boundaries.right -= isPaddingNumber ? padding : padding.right || 0;
      boundaries.bottom -= isPaddingNumber ? padding : padding.bottom || 0;

      return boundaries;
    }

    function getArea(_ref) {
      var width = _ref.width,
          height = _ref.height;

      return width * height;
    }

    /**
     * Utility used to transform the `auto` placement to the placement with more
     * available space.
     * @method
     * @memberof Popper.Utils
     * @argument {Object} data - The data object generated by update method
     * @argument {Object} options - Modifiers configuration and options
     * @returns {Object} The data object, properly modified
     */
    function computeAutoPlacement(placement, refRect, popper, reference, boundariesElement) {
      var padding = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;

      if (placement.indexOf('auto') === -1) {
        return placement;
      }

      var boundaries = getBoundaries(popper, reference, padding, boundariesElement);

      var rects = {
        top: {
          width: boundaries.width,
          height: refRect.top - boundaries.top
        },
        right: {
          width: boundaries.right - refRect.right,
          height: boundaries.height
        },
        bottom: {
          width: boundaries.width,
          height: boundaries.bottom - refRect.bottom
        },
        left: {
          width: refRect.left - boundaries.left,
          height: boundaries.height
        }
      };

      var sortedAreas = Object.keys(rects).map(function (key) {
        return _extends$2({
          key: key
        }, rects[key], {
          area: getArea(rects[key])
        });
      }).sort(function (a, b) {
        return b.area - a.area;
      });

      var filteredAreas = sortedAreas.filter(function (_ref2) {
        var width = _ref2.width,
            height = _ref2.height;
        return width >= popper.clientWidth && height >= popper.clientHeight;
      });

      var computedPlacement = filteredAreas.length > 0 ? filteredAreas[0].key : sortedAreas[0].key;

      var variation = placement.split('-')[1];

      return computedPlacement + (variation ? '-' + variation : '');
    }

    /**
     * Get offsets to the reference element
     * @method
     * @memberof Popper.Utils
     * @param {Object} state
     * @param {Element} popper - the popper element
     * @param {Element} reference - the reference element (the popper will be relative to this)
     * @param {Element} fixedPosition - is in fixed position mode
     * @returns {Object} An object containing the offsets which will be applied to the popper
     */
    function getReferenceOffsets(state, popper, reference) {
      var fixedPosition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

      var commonOffsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference));
      return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent, fixedPosition);
    }

    /**
     * Get the outer sizes of the given element (offset size + margins)
     * @method
     * @memberof Popper.Utils
     * @argument {Element} element
     * @returns {Object} object containing width and height properties
     */
    function getOuterSizes(element) {
      var window = element.ownerDocument.defaultView;
      var styles = window.getComputedStyle(element);
      var x = parseFloat(styles.marginTop || 0) + parseFloat(styles.marginBottom || 0);
      var y = parseFloat(styles.marginLeft || 0) + parseFloat(styles.marginRight || 0);
      var result = {
        width: element.offsetWidth + y,
        height: element.offsetHeight + x
      };
      return result;
    }

    /**
     * Get the opposite placement of the given one
     * @method
     * @memberof Popper.Utils
     * @argument {String} placement
     * @returns {String} flipped placement
     */
    function getOppositePlacement(placement) {
      var hash = { left: 'right', right: 'left', bottom: 'top', top: 'bottom' };
      return placement.replace(/left|right|bottom|top/g, function (matched) {
        return hash[matched];
      });
    }

    /**
     * Get offsets to the popper
     * @method
     * @memberof Popper.Utils
     * @param {Object} position - CSS position the Popper will get applied
     * @param {HTMLElement} popper - the popper element
     * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)
     * @param {String} placement - one of the valid placement options
     * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper
     */
    function getPopperOffsets(popper, referenceOffsets, placement) {
      placement = placement.split('-')[0];

      // Get popper node sizes
      var popperRect = getOuterSizes(popper);

      // Add position, width and height to our offsets object
      var popperOffsets = {
        width: popperRect.width,
        height: popperRect.height
      };

      // depending by the popper placement we have to compute its offsets slightly differently
      var isHoriz = ['right', 'left'].indexOf(placement) !== -1;
      var mainSide = isHoriz ? 'top' : 'left';
      var secondarySide = isHoriz ? 'left' : 'top';
      var measurement = isHoriz ? 'height' : 'width';
      var secondaryMeasurement = !isHoriz ? 'height' : 'width';

      popperOffsets[mainSide] = referenceOffsets[mainSide] + referenceOffsets[measurement] / 2 - popperRect[measurement] / 2;
      if (placement === secondarySide) {
        popperOffsets[secondarySide] = referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];
      } else {
        popperOffsets[secondarySide] = referenceOffsets[getOppositePlacement(secondarySide)];
      }

      return popperOffsets;
    }

    /**
     * Mimics the `find` method of Array
     * @method
     * @memberof Popper.Utils
     * @argument {Array} arr
     * @argument prop
     * @argument value
     * @returns index or -1
     */
    function find(arr, check) {
      // use native find if supported
      if (Array.prototype.find) {
        return arr.find(check);
      }

      // use `filter` to obtain the same behavior of `find`
      return arr.filter(check)[0];
    }

    /**
     * Return the index of the matching object
     * @method
     * @memberof Popper.Utils
     * @argument {Array} arr
     * @argument prop
     * @argument value
     * @returns index or -1
     */
    function findIndex$1(arr, prop, value) {
      // use native findIndex if supported
      if (Array.prototype.findIndex) {
        return arr.findIndex(function (cur) {
          return cur[prop] === value;
        });
      }

      // use `find` + `indexOf` if `findIndex` isn't supported
      var match = find(arr, function (obj) {
        return obj[prop] === value;
      });
      return arr.indexOf(match);
    }

    /**
     * Loop trough the list of modifiers and run them in order,
     * each of them will then edit the data object.
     * @method
     * @memberof Popper.Utils
     * @param {dataObject} data
     * @param {Array} modifiers
     * @param {String} ends - Optional modifier name used as stopper
     * @returns {dataObject}
     */
    function runModifiers(modifiers, data, ends) {
      var modifiersToRun = ends === undefined ? modifiers : modifiers.slice(0, findIndex$1(modifiers, 'name', ends));

      modifiersToRun.forEach(function (modifier) {
        if (modifier['function']) {
          // eslint-disable-line dot-notation
          console.warn('`modifier.function` is deprecated, use `modifier.fn`!');
        }
        var fn = modifier['function'] || modifier.fn; // eslint-disable-line dot-notation
        if (modifier.enabled && isFunction$2(fn)) {
          // Add properties to offsets to make them a complete clientRect object
          // we do this before each modifier to make sure the previous one doesn't
          // mess with these values
          data.offsets.popper = getClientRect(data.offsets.popper);
          data.offsets.reference = getClientRect(data.offsets.reference);

          data = fn(data, modifier);
        }
      });

      return data;
    }

    /**
     * Updates the position of the popper, computing the new offsets and applying
     * the new style.<br />
     * Prefer `scheduleUpdate` over `update` because of performance reasons.
     * @method
     * @memberof Popper
     */
    function update() {
      // if popper is destroyed, don't perform any further update
      if (this.state.isDestroyed) {
        return;
      }

      var data = {
        instance: this,
        styles: {},
        arrowStyles: {},
        attributes: {},
        flipped: false,
        offsets: {}
      };

      // compute reference element offsets
      data.offsets.reference = getReferenceOffsets(this.state, this.popper, this.reference, this.options.positionFixed);

      // compute auto placement, store placement inside the data object,
      // modifiers will be able to edit `placement` if needed
      // and refer to originalPlacement to know the original value
      data.placement = computeAutoPlacement(this.options.placement, data.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding);

      // store the computed placement inside `originalPlacement`
      data.originalPlacement = data.placement;

      data.positionFixed = this.options.positionFixed;

      // compute the popper offsets
      data.offsets.popper = getPopperOffsets(this.popper, data.offsets.reference, data.placement);

      data.offsets.popper.position = this.options.positionFixed ? 'fixed' : 'absolute';

      // run the modifiers
      data = runModifiers(this.modifiers, data);

      // the first `update` will call `onCreate` callback
      // the other ones will call `onUpdate` callback
      if (!this.state.isCreated) {
        this.state.isCreated = true;
        this.options.onCreate(data);
      } else {
        this.options.onUpdate(data);
      }
    }

    /**
     * Helper used to know if the given modifier is enabled.
     * @method
     * @memberof Popper.Utils
     * @returns {Boolean}
     */
    function isModifierEnabled(modifiers, modifierName) {
      return modifiers.some(function (_ref) {
        var name = _ref.name,
            enabled = _ref.enabled;
        return enabled && name === modifierName;
      });
    }

    /**
     * Get the prefixed supported property name
     * @method
     * @memberof Popper.Utils
     * @argument {String} property (camelCase)
     * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)
     */
    function getSupportedPropertyName(property) {
      var prefixes = [false, 'ms', 'Webkit', 'Moz', 'O'];
      var upperProp = property.charAt(0).toUpperCase() + property.slice(1);

      for (var i = 0; i < prefixes.length; i++) {
        var prefix = prefixes[i];
        var toCheck = prefix ? '' + prefix + upperProp : property;
        if (typeof document.body.style[toCheck] !== 'undefined') {
          return toCheck;
        }
      }
      return null;
    }

    /**
     * Destroys the popper.
     * @method
     * @memberof Popper
     */
    function destroy$1() {
      this.state.isDestroyed = true;

      // touch DOM only if `applyStyle` modifier is enabled
      if (isModifierEnabled(this.modifiers, 'applyStyle')) {
        this.popper.removeAttribute('x-placement');
        this.popper.style.position = '';
        this.popper.style.top = '';
        this.popper.style.left = '';
        this.popper.style.right = '';
        this.popper.style.bottom = '';
        this.popper.style.willChange = '';
        this.popper.style[getSupportedPropertyName('transform')] = '';
      }

      this.disableEventListeners();

      // remove the popper if user explicitly asked for the deletion on destroy
      // do not use `remove` because IE11 doesn't support it
      if (this.options.removeOnDestroy) {
        this.popper.parentNode.removeChild(this.popper);
      }
      return this;
    }

    /**
     * Get the window associated with the element
     * @argument {Element} element
     * @returns {Window}
     */
    function getWindow(element) {
      var ownerDocument = element.ownerDocument;
      return ownerDocument ? ownerDocument.defaultView : window;
    }

    function attachToScrollParents(scrollParent, event, callback, scrollParents) {
      var isBody = scrollParent.nodeName === 'BODY';
      var target = isBody ? scrollParent.ownerDocument.defaultView : scrollParent;
      target.addEventListener(event, callback, { passive: true });

      if (!isBody) {
        attachToScrollParents(getScrollParent(target.parentNode), event, callback, scrollParents);
      }
      scrollParents.push(target);
    }

    /**
     * Setup needed event listeners used to update the popper position
     * @method
     * @memberof Popper.Utils
     * @private
     */
    function setupEventListeners(reference, options, state, updateBound) {
      // Resize event listener on window
      state.updateBound = updateBound;
      getWindow(reference).addEventListener('resize', state.updateBound, { passive: true });

      // Scroll event listener on scroll parents
      var scrollElement = getScrollParent(reference);
      attachToScrollParents(scrollElement, 'scroll', state.updateBound, state.scrollParents);
      state.scrollElement = scrollElement;
      state.eventsEnabled = true;

      return state;
    }

    /**
     * It will add resize/scroll events and start recalculating
     * position of the popper element when they are triggered.
     * @method
     * @memberof Popper
     */
    function enableEventListeners() {
      if (!this.state.eventsEnabled) {
        this.state = setupEventListeners(this.reference, this.options, this.state, this.scheduleUpdate);
      }
    }

    /**
     * Remove event listeners used to update the popper position
     * @method
     * @memberof Popper.Utils
     * @private
     */
    function removeEventListeners(reference, state) {
      // Remove resize event listener on window
      getWindow(reference).removeEventListener('resize', state.updateBound);

      // Remove scroll event listener on scroll parents
      state.scrollParents.forEach(function (target) {
        target.removeEventListener('scroll', state.updateBound);
      });

      // Reset state
      state.updateBound = null;
      state.scrollParents = [];
      state.scrollElement = null;
      state.eventsEnabled = false;
      return state;
    }

    /**
     * It will remove resize/scroll events and won't recalculate popper position
     * when they are triggered. It also won't trigger `onUpdate` callback anymore,
     * unless you call `update` method manually.
     * @method
     * @memberof Popper
     */
    function disableEventListeners() {
      if (this.state.eventsEnabled) {
        cancelAnimationFrame(this.scheduleUpdate);
        this.state = removeEventListeners(this.reference, this.state);
      }
    }

    /**
     * Tells if a given input is a number
     * @method
     * @memberof Popper.Utils
     * @param {*} input to check
     * @return {Boolean}
     */
    function isNumeric$1(n) {
      return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);
    }

    /**
     * Set the style to the given popper
     * @method
     * @memberof Popper.Utils
     * @argument {Element} element - Element to apply the style to
     * @argument {Object} styles
     * Object with a list of properties and values which will be applied to the element
     */
    function setStyles(element, styles) {
      Object.keys(styles).forEach(function (prop) {
        var unit = '';
        // add unit if the value is numeric and is one of the following
        if (['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !== -1 && isNumeric$1(styles[prop])) {
          unit = 'px';
        }
        element.style[prop] = styles[prop] + unit;
      });
    }

    /**
     * Set the attributes to the given popper
     * @method
     * @memberof Popper.Utils
     * @argument {Element} element - Element to apply the attributes to
     * @argument {Object} styles
     * Object with a list of properties and values which will be applied to the element
     */
    function setAttributes(element, attributes) {
      Object.keys(attributes).forEach(function (prop) {
        var value = attributes[prop];
        if (value !== false) {
          element.setAttribute(prop, attributes[prop]);
        } else {
          element.removeAttribute(prop);
        }
      });
    }

    /**
     * @function
     * @memberof Modifiers
     * @argument {Object} data - The data object generated by `update` method
     * @argument {Object} data.styles - List of style properties - values to apply to popper element
     * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element
     * @argument {Object} options - Modifiers configuration and options
     * @returns {Object} The same data object
     */
    function applyStyle(data) {
      // any property present in `data.styles` will be applied to the popper,
      // in this way we can make the 3rd party modifiers add custom styles to it
      // Be aware, modifiers could override the properties defined in the previous
      // lines of this modifier!
      setStyles(data.instance.popper, data.styles);

      // any property present in `data.attributes` will be applied to the popper,
      // they will be set as HTML attributes of the element
      setAttributes(data.instance.popper, data.attributes);

      // if arrowElement is defined and arrowStyles has some properties
      if (data.arrowElement && Object.keys(data.arrowStyles).length) {
        setStyles(data.arrowElement, data.arrowStyles);
      }

      return data;
    }

    /**
     * Set the x-placement attribute before everything else because it could be used
     * to add margins to the popper margins needs to be calculated to get the
     * correct popper offsets.
     * @method
     * @memberof Popper.modifiers
     * @param {HTMLElement} reference - The reference element used to position the popper
     * @param {HTMLElement} popper - The HTML element used as popper
     * @param {Object} options - Popper.js options
     */
    function applyStyleOnLoad(reference, popper, options, modifierOptions, state) {
      // compute reference element offsets
      var referenceOffsets = getReferenceOffsets(state, popper, reference, options.positionFixed);

      // compute auto placement, store placement inside the data object,
      // modifiers will be able to edit `placement` if needed
      // and refer to originalPlacement to know the original value
      var placement = computeAutoPlacement(options.placement, referenceOffsets, popper, reference, options.modifiers.flip.boundariesElement, options.modifiers.flip.padding);

      popper.setAttribute('x-placement', placement);

      // Apply `position` to popper before anything else because
      // without the position applied we can't guarantee correct computations
      setStyles(popper, { position: options.positionFixed ? 'fixed' : 'absolute' });

      return options;
    }

    /**
     * @function
     * @memberof Popper.Utils
     * @argument {Object} data - The data object generated by `update` method
     * @argument {Boolean} shouldRound - If the offsets should be rounded at all
     * @returns {Object} The popper's position offsets rounded
     *
     * The tale of pixel-perfect positioning. It's still not 100% perfect, but as
     * good as it can be within reason.
     * Discussion here: https://github.com/FezVrasta/popper.js/pull/715
     *
     * Low DPI screens cause a popper to be blurry if not using full pixels (Safari
     * as well on High DPI screens).
     *
     * Firefox prefers no rounding for positioning and does not have blurriness on
     * high DPI screens.
     *
     * Only horizontal placement and left/right values need to be considered.
     */
    function getRoundedOffsets(data, shouldRound) {
      var _data$offsets = data.offsets,
          popper = _data$offsets.popper,
          reference = _data$offsets.reference;
      var round = Math.round,
          floor = Math.floor;

      var noRound = function noRound(v) {
        return v;
      };

      var referenceWidth = round(reference.width);
      var popperWidth = round(popper.width);

      var isVertical = ['left', 'right'].indexOf(data.placement) !== -1;
      var isVariation = data.placement.indexOf('-') !== -1;
      var sameWidthParity = referenceWidth % 2 === popperWidth % 2;
      var bothOddWidth = referenceWidth % 2 === 1 && popperWidth % 2 === 1;

      var horizontalToInteger = !shouldRound ? noRound : isVertical || isVariation || sameWidthParity ? round : floor;
      var verticalToInteger = !shouldRound ? noRound : round;

      return {
        left: horizontalToInteger(bothOddWidth && !isVariation && shouldRound ? popper.left - 1 : popper.left),
        top: verticalToInteger(popper.top),
        bottom: verticalToInteger(popper.bottom),
        right: horizontalToInteger(popper.right)
      };
    }

    var isFirefox = isBrowser$1 && /Firefox/i.test(navigator.userAgent);

    /**
     * @function
     * @memberof Modifiers
     * @argument {Object} data - The data object generated by `update` method
     * @argument {Object} options - Modifiers configuration and options
     * @returns {Object} The data object, properly modified
     */
    function computeStyle(data, options) {
      var x = options.x,
          y = options.y;
      var popper = data.offsets.popper;

      // Remove this legacy support in Popper.js v2

      var legacyGpuAccelerationOption = find(data.instance.modifiers, function (modifier) {
        return modifier.name === 'applyStyle';
      }).gpuAcceleration;
      if (legacyGpuAccelerationOption !== undefined) {
        console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!');
      }
      var gpuAcceleration = legacyGpuAccelerationOption !== undefined ? legacyGpuAccelerationOption : options.gpuAcceleration;

      var offsetParent = getOffsetParent(data.instance.popper);
      var offsetParentRect = getBoundingClientRect(offsetParent);

      // Styles
      var styles = {
        position: popper.position
      };

      var offsets = getRoundedOffsets(data, window.devicePixelRatio < 2 || !isFirefox);

      var sideA = x === 'bottom' ? 'top' : 'bottom';
      var sideB = y === 'right' ? 'left' : 'right';

      // if gpuAcceleration is set to `true` and transform is supported,
      //  we use `translate3d` to apply the position to the popper we
      // automatically use the supported prefixed version if needed
      var prefixedProperty = getSupportedPropertyName('transform');

      // now, let's make a step back and look at this code closely (wtf?)
      // If the content of the popper grows once it's been positioned, it
      // may happen that the popper gets misplaced because of the new content
      // overflowing its reference element
      // To avoid this problem, we provide two options (x and y), which allow
      // the consumer to define the offset origin.
      // If we position a popper on top of a reference element, we can set
      // `x` to `top` to make the popper grow towards its top instead of
      // its bottom.
      var left = void 0,
          top = void 0;
      if (sideA === 'bottom') {
        // when offsetParent is <html> the positioning is relative to the bottom of the screen (excluding the scrollbar)
        // and not the bottom of the html element
        if (offsetParent.nodeName === 'HTML') {
          top = -offsetParent.clientHeight + offsets.bottom;
        } else {
          top = -offsetParentRect.height + offsets.bottom;
        }
      } else {
        top = offsets.top;
      }
      if (sideB === 'right') {
        if (offsetParent.nodeName === 'HTML') {
          left = -offsetParent.clientWidth + offsets.right;
        } else {
          left = -offsetParentRect.width + offsets.right;
        }
      } else {
        left = offsets.left;
      }
      if (gpuAcceleration && prefixedProperty) {
        styles[prefixedProperty] = 'translate3d(' + left + 'px, ' + top + 'px, 0)';
        styles[sideA] = 0;
        styles[sideB] = 0;
        styles.willChange = 'transform';
      } else {
        // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties
        var invertTop = sideA === 'bottom' ? -1 : 1;
        var invertLeft = sideB === 'right' ? -1 : 1;
        styles[sideA] = top * invertTop;
        styles[sideB] = left * invertLeft;
        styles.willChange = sideA + ', ' + sideB;
      }

      // Attributes
      var attributes = {
        'x-placement': data.placement
      };

      // Update `data` attributes, styles and arrowStyles
      data.attributes = _extends$2({}, attributes, data.attributes);
      data.styles = _extends$2({}, styles, data.styles);
      data.arrowStyles = _extends$2({}, data.offsets.arrow, data.arrowStyles);

      return data;
    }

    /**
     * Helper used to know if the given modifier depends from another one.<br />
     * It checks if the needed modifier is listed and enabled.
     * @method
     * @memberof Popper.Utils
     * @param {Array} modifiers - list of modifiers
     * @param {String} requestingName - name of requesting modifier
     * @param {String} requestedName - name of requested modifier
     * @returns {Boolean}
     */
    function isModifierRequired(modifiers, requestingName, requestedName) {
      var requesting = find(modifiers, function (_ref) {
        var name = _ref.name;
        return name === requestingName;
      });

      var isRequired = !!requesting && modifiers.some(function (modifier) {
        return modifier.name === requestedName && modifier.enabled && modifier.order < requesting.order;
      });

      if (!isRequired) {
        var _requesting = '`' + requestingName + '`';
        var requested = '`' + requestedName + '`';
        console.warn(requested + ' modifier is required by ' + _requesting + ' modifier in order to work, be sure to include it before ' + _requesting + '!');
      }
      return isRequired;
    }

    /**
     * @function
     * @memberof Modifiers
     * @argument {Object} data - The data object generated by update method
     * @argument {Object} options - Modifiers configuration and options
     * @returns {Object} The data object, properly modified
     */
    function arrow(data, options) {
      var _data$offsets$arrow;

      // arrow depends on keepTogether in order to work
      if (!isModifierRequired(data.instance.modifiers, 'arrow', 'keepTogether')) {
        return data;
      }

      var arrowElement = options.element;

      // if arrowElement is a string, suppose it's a CSS selector
      if (typeof arrowElement === 'string') {
        arrowElement = data.instance.popper.querySelector(arrowElement);

        // if arrowElement is not found, don't run the modifier
        if (!arrowElement) {
          return data;
        }
      } else {
        // if the arrowElement isn't a query selector we must check that the
        // provided DOM node is child of its popper node
        if (!data.instance.popper.contains(arrowElement)) {
          console.warn('WARNING: `arrow.element` must be child of its popper element!');
          return data;
        }
      }

      var placement = data.placement.split('-')[0];
      var _data$offsets = data.offsets,
          popper = _data$offsets.popper,
          reference = _data$offsets.reference;

      var isVertical = ['left', 'right'].indexOf(placement) !== -1;

      var len = isVertical ? 'height' : 'width';
      var sideCapitalized = isVertical ? 'Top' : 'Left';
      var side = sideCapitalized.toLowerCase();
      var altSide = isVertical ? 'left' : 'top';
      var opSide = isVertical ? 'bottom' : 'right';
      var arrowElementSize = getOuterSizes(arrowElement)[len];

      //
      // extends keepTogether behavior making sure the popper and its
      // reference have enough pixels in conjunction
      //

      // top/left side
      if (reference[opSide] - arrowElementSize < popper[side]) {
        data.offsets.popper[side] -= popper[side] - (reference[opSide] - arrowElementSize);
      }
      // bottom/right side
      if (reference[side] + arrowElementSize > popper[opSide]) {
        data.offsets.popper[side] += reference[side] + arrowElementSize - popper[opSide];
      }
      data.offsets.popper = getClientRect(data.offsets.popper);

      // compute center of the popper
      var center = reference[side] + reference[len] / 2 - arrowElementSize / 2;

      // Compute the sideValue using the updated popper offsets
      // take popper margin in account because we don't have this info available
      var css = getStyleComputedProperty(data.instance.popper);
      var popperMarginSide = parseFloat(css['margin' + sideCapitalized]);
      var popperBorderSide = parseFloat(css['border' + sideCapitalized + 'Width']);
      var sideValue = center - data.offsets.popper[side] - popperMarginSide - popperBorderSide;

      // prevent arrowElement from being placed not contiguously to its popper
      sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);

      data.arrowElement = arrowElement;
      data.offsets.arrow = (_data$offsets$arrow = {}, defineProperty$2(_data$offsets$arrow, side, Math.round(sideValue)), defineProperty$2(_data$offsets$arrow, altSide, ''), _data$offsets$arrow);

      return data;
    }

    /**
     * Get the opposite placement variation of the given one
     * @method
     * @memberof Popper.Utils
     * @argument {String} placement variation
     * @returns {String} flipped placement variation
     */
    function getOppositeVariation(variation) {
      if (variation === 'end') {
        return 'start';
      } else if (variation === 'start') {
        return 'end';
      }
      return variation;
    }

    /**
     * List of accepted placements to use as values of the `placement` option.<br />
     * Valid placements are:
     * - `auto`
     * - `top`
     * - `right`
     * - `bottom`
     * - `left`
     *
     * Each placement can have a variation from this list:
     * - `-start`
     * - `-end`
     *
     * Variations are interpreted easily if you think of them as the left to right
     * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`
     * is right.<br />
     * Vertically (`left` and `right`), `start` is top and `end` is bottom.
     *
     * Some valid examples are:
     * - `top-end` (on top of reference, right aligned)
     * - `right-start` (on right of reference, top aligned)
     * - `bottom` (on bottom, centered)
     * - `auto-end` (on the side with more space available, alignment depends by placement)
     *
     * @static
     * @type {Array}
     * @enum {String}
     * @readonly
     * @method placements
     * @memberof Popper
     */
    var placements = ['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start'];

    // Get rid of `auto` `auto-start` and `auto-end`
    var validPlacements = placements.slice(3);

    /**
     * Given an initial placement, returns all the subsequent placements
     * clockwise (or counter-clockwise).
     *
     * @method
     * @memberof Popper.Utils
     * @argument {String} placement - A valid placement (it accepts variations)
     * @argument {Boolean} counter - Set to true to walk the placements counterclockwise
     * @returns {Array} placements including their variations
     */
    function clockwise(placement) {
      var counter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      var index = validPlacements.indexOf(placement);
      var arr = validPlacements.slice(index + 1).concat(validPlacements.slice(0, index));
      return counter ? arr.reverse() : arr;
    }

    var BEHAVIORS = {
      FLIP: 'flip',
      CLOCKWISE: 'clockwise',
      COUNTERCLOCKWISE: 'counterclockwise'
    };

    /**
     * @function
     * @memberof Modifiers
     * @argument {Object} data - The data object generated by update method
     * @argument {Object} options - Modifiers configuration and options
     * @returns {Object} The data object, properly modified
     */
    function flip(data, options) {
      // if `inner` modifier is enabled, we can't use the `flip` modifier
      if (isModifierEnabled(data.instance.modifiers, 'inner')) {
        return data;
      }

      if (data.flipped && data.placement === data.originalPlacement) {
        // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides
        return data;
      }

      var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, options.boundariesElement, data.positionFixed);

      var placement = data.placement.split('-')[0];
      var placementOpposite = getOppositePlacement(placement);
      var variation = data.placement.split('-')[1] || '';

      var flipOrder = [];

      switch (options.behavior) {
        case BEHAVIORS.FLIP:
          flipOrder = [placement, placementOpposite];
          break;
        case BEHAVIORS.CLOCKWISE:
          flipOrder = clockwise(placement);
          break;
        case BEHAVIORS.COUNTERCLOCKWISE:
          flipOrder = clockwise(placement, true);
          break;
        default:
          flipOrder = options.behavior;
      }

      flipOrder.forEach(function (step, index) {
        if (placement !== step || flipOrder.length === index + 1) {
          return data;
        }

        placement = data.placement.split('-')[0];
        placementOpposite = getOppositePlacement(placement);

        var popperOffsets = data.offsets.popper;
        var refOffsets = data.offsets.reference;

        // using floor because the reference offsets may contain decimals we are not going to consider here
        var floor = Math.floor;
        var overlapsRef = placement === 'left' && floor(popperOffsets.right) > floor(refOffsets.left) || placement === 'right' && floor(popperOffsets.left) < floor(refOffsets.right) || placement === 'top' && floor(popperOffsets.bottom) > floor(refOffsets.top) || placement === 'bottom' && floor(popperOffsets.top) < floor(refOffsets.bottom);

        var overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);
        var overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);
        var overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);
        var overflowsBottom = floor(popperOffsets.bottom) > floor(boundaries.bottom);

        var overflowsBoundaries = placement === 'left' && overflowsLeft || placement === 'right' && overflowsRight || placement === 'top' && overflowsTop || placement === 'bottom' && overflowsBottom;

        // flip the variation if required
        var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;

        // flips variation if reference element overflows boundaries
        var flippedVariationByRef = !!options.flipVariations && (isVertical && variation === 'start' && overflowsLeft || isVertical && variation === 'end' && overflowsRight || !isVertical && variation === 'start' && overflowsTop || !isVertical && variation === 'end' && overflowsBottom);

        // flips variation if popper content overflows boundaries
        var flippedVariationByContent = !!options.flipVariationsByContent && (isVertical && variation === 'start' && overflowsRight || isVertical && variation === 'end' && overflowsLeft || !isVertical && variation === 'start' && overflowsBottom || !isVertical && variation === 'end' && overflowsTop);

        var flippedVariation = flippedVariationByRef || flippedVariationByContent;

        if (overlapsRef || overflowsBoundaries || flippedVariation) {
          // this boolean to detect any flip loop
          data.flipped = true;

          if (overlapsRef || overflowsBoundaries) {
            placement = flipOrder[index + 1];
          }

          if (flippedVariation) {
            variation = getOppositeVariation(variation);
          }

          data.placement = placement + (variation ? '-' + variation : '');

          // this object contains `position`, we want to preserve it along with
          // any additional property we may add in the future
          data.offsets.popper = _extends$2({}, data.offsets.popper, getPopperOffsets(data.instance.popper, data.offsets.reference, data.placement));

          data = runModifiers(data.instance.modifiers, data, 'flip');
        }
      });
      return data;
    }

    /**
     * @function
     * @memberof Modifiers
     * @argument {Object} data - The data object generated by update method
     * @argument {Object} options - Modifiers configuration and options
     * @returns {Object} The data object, properly modified
     */
    function keepTogether(data) {
      var _data$offsets = data.offsets,
          popper = _data$offsets.popper,
          reference = _data$offsets.reference;

      var placement = data.placement.split('-')[0];
      var floor = Math.floor;
      var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;
      var side = isVertical ? 'right' : 'bottom';
      var opSide = isVertical ? 'left' : 'top';
      var measurement = isVertical ? 'width' : 'height';

      if (popper[side] < floor(reference[opSide])) {
        data.offsets.popper[opSide] = floor(reference[opSide]) - popper[measurement];
      }
      if (popper[opSide] > floor(reference[side])) {
        data.offsets.popper[opSide] = floor(reference[side]);
      }

      return data;
    }

    /**
     * Converts a string containing value + unit into a px value number
     * @function
     * @memberof {modifiers~offset}
     * @private
     * @argument {String} str - Value + unit string
     * @argument {String} measurement - `height` or `width`
     * @argument {Object} popperOffsets
     * @argument {Object} referenceOffsets
     * @returns {Number|String}
     * Value in pixels, or original string if no values were extracted
     */
    function toValue(str, measurement, popperOffsets, referenceOffsets) {
      // separate value from unit
      var split = str.match(/((?:\-|\+)?\d*\.?\d*)(.*)/);
      var value = +split[1];
      var unit = split[2];

      // If it's not a number it's an operator, I guess
      if (!value) {
        return str;
      }

      if (unit.indexOf('%') === 0) {
        var element = void 0;
        switch (unit) {
          case '%p':
            element = popperOffsets;
            break;
          case '%':
          case '%r':
          default:
            element = referenceOffsets;
        }

        var rect = getClientRect(element);
        return rect[measurement] / 100 * value;
      } else if (unit === 'vh' || unit === 'vw') {
        // if is a vh or vw, we calculate the size based on the viewport
        var size = void 0;
        if (unit === 'vh') {
          size = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
        } else {
          size = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
        }
        return size / 100 * value;
      } else {
        // if is an explicit pixel unit, we get rid of the unit and keep the value
        // if is an implicit unit, it's px, and we return just the value
        return value;
      }
    }

    /**
     * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.
     * @function
     * @memberof {modifiers~offset}
     * @private
     * @argument {String} offset
     * @argument {Object} popperOffsets
     * @argument {Object} referenceOffsets
     * @argument {String} basePlacement
     * @returns {Array} a two cells array with x and y offsets in numbers
     */
    function parseOffset(offset, popperOffsets, referenceOffsets, basePlacement) {
      var offsets = [0, 0];

      // Use height if placement is left or right and index is 0 otherwise use width
      // in this way the first offset will use an axis and the second one
      // will use the other one
      var useHeight = ['right', 'left'].indexOf(basePlacement) !== -1;

      // Split the offset string to obtain a list of values and operands
      // The regex addresses values with the plus or minus sign in front (+10, -20, etc)
      var fragments = offset.split(/(\+|\-)/).map(function (frag) {
        return frag.trim();
      });

      // Detect if the offset string contains a pair of values or a single one
      // they could be separated by comma or space
      var divider = fragments.indexOf(find(fragments, function (frag) {
        return frag.search(/,|\s/) !== -1;
      }));

      if (fragments[divider] && fragments[divider].indexOf(',') === -1) {
        console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.');
      }

      // If divider is found, we divide the list of values and operands to divide
      // them by ofset X and Y.
      var splitRegex = /\s*,\s*|\s+/;
      var ops = divider !== -1 ? [fragments.slice(0, divider).concat([fragments[divider].split(splitRegex)[0]]), [fragments[divider].split(splitRegex)[1]].concat(fragments.slice(divider + 1))] : [fragments];

      // Convert the values with units to absolute pixels to allow our computations
      ops = ops.map(function (op, index) {
        // Most of the units rely on the orientation of the popper
        var measurement = (index === 1 ? !useHeight : useHeight) ? 'height' : 'width';
        var mergeWithPrevious = false;
        return op
        // This aggregates any `+` or `-` sign that aren't considered operators
        // e.g.: 10 + +5 => [10, +, +5]
        .reduce(function (a, b) {
          if (a[a.length - 1] === '' && ['+', '-'].indexOf(b) !== -1) {
            a[a.length - 1] = b;
            mergeWithPrevious = true;
            return a;
          } else if (mergeWithPrevious) {
            a[a.length - 1] += b;
            mergeWithPrevious = false;
            return a;
          } else {
            return a.concat(b);
          }
        }, [])
        // Here we convert the string values into number values (in px)
        .map(function (str) {
          return toValue(str, measurement, popperOffsets, referenceOffsets);
        });
      });

      // Loop trough the offsets arrays and execute the operations
      ops.forEach(function (op, index) {
        op.forEach(function (frag, index2) {
          if (isNumeric$1(frag)) {
            offsets[index] += frag * (op[index2 - 1] === '-' ? -1 : 1);
          }
        });
      });
      return offsets;
    }

    /**
     * @function
     * @memberof Modifiers
     * @argument {Object} data - The data object generated by update method
     * @argument {Object} options - Modifiers configuration and options
     * @argument {Number|String} options.offset=0
     * The offset value as described in the modifier description
     * @returns {Object} The data object, properly modified
     */
    function offset(data, _ref) {
      var offset = _ref.offset;
      var placement = data.placement,
          _data$offsets = data.offsets,
          popper = _data$offsets.popper,
          reference = _data$offsets.reference;

      var basePlacement = placement.split('-')[0];

      var offsets = void 0;
      if (isNumeric$1(+offset)) {
        offsets = [+offset, 0];
      } else {
        offsets = parseOffset(offset, popper, reference, basePlacement);
      }

      if (basePlacement === 'left') {
        popper.top += offsets[0];
        popper.left -= offsets[1];
      } else if (basePlacement === 'right') {
        popper.top += offsets[0];
        popper.left += offsets[1];
      } else if (basePlacement === 'top') {
        popper.left += offsets[0];
        popper.top -= offsets[1];
      } else if (basePlacement === 'bottom') {
        popper.left += offsets[0];
        popper.top += offsets[1];
      }

      data.popper = popper;
      return data;
    }

    /**
     * @function
     * @memberof Modifiers
     * @argument {Object} data - The data object generated by `update` method
     * @argument {Object} options - Modifiers configuration and options
     * @returns {Object} The data object, properly modified
     */
    function preventOverflow(data, options) {
      var boundariesElement = options.boundariesElement || getOffsetParent(data.instance.popper);

      // If offsetParent is the reference element, we really want to
      // go one step up and use the next offsetParent as reference to
      // avoid to make this modifier completely useless and look like broken
      if (data.instance.reference === boundariesElement) {
        boundariesElement = getOffsetParent(boundariesElement);
      }

      // NOTE: DOM access here
      // resets the popper's position so that the document size can be calculated excluding
      // the size of the popper element itself
      var transformProp = getSupportedPropertyName('transform');
      var popperStyles = data.instance.popper.style; // assignment to help minification
      var top = popperStyles.top,
          left = popperStyles.left,
          transform = popperStyles[transformProp];

      popperStyles.top = '';
      popperStyles.left = '';
      popperStyles[transformProp] = '';

      var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, boundariesElement, data.positionFixed);

      // NOTE: DOM access here
      // restores the original style properties after the offsets have been computed
      popperStyles.top = top;
      popperStyles.left = left;
      popperStyles[transformProp] = transform;

      options.boundaries = boundaries;

      var order = options.priority;
      var popper = data.offsets.popper;

      var check = {
        primary: function primary(placement) {
          var value = popper[placement];
          if (popper[placement] < boundaries[placement] && !options.escapeWithReference) {
            value = Math.max(popper[placement], boundaries[placement]);
          }
          return defineProperty$2({}, placement, value);
        },
        secondary: function secondary(placement) {
          var mainSide = placement === 'right' ? 'left' : 'top';
          var value = popper[mainSide];
          if (popper[placement] > boundaries[placement] && !options.escapeWithReference) {
            value = Math.min(popper[mainSide], boundaries[placement] - (placement === 'right' ? popper.width : popper.height));
          }
          return defineProperty$2({}, mainSide, value);
        }
      };

      order.forEach(function (placement) {
        var side = ['left', 'top'].indexOf(placement) !== -1 ? 'primary' : 'secondary';
        popper = _extends$2({}, popper, check[side](placement));
      });

      data.offsets.popper = popper;

      return data;
    }

    /**
     * @function
     * @memberof Modifiers
     * @argument {Object} data - The data object generated by `update` method
     * @argument {Object} options - Modifiers configuration and options
     * @returns {Object} The data object, properly modified
     */
    function shift(data) {
      var placement = data.placement;
      var basePlacement = placement.split('-')[0];
      var shiftvariation = placement.split('-')[1];

      // if shift shiftvariation is specified, run the modifier
      if (shiftvariation) {
        var _data$offsets = data.offsets,
            reference = _data$offsets.reference,
            popper = _data$offsets.popper;

        var isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1;
        var side = isVertical ? 'left' : 'top';
        var measurement = isVertical ? 'width' : 'height';

        var shiftOffsets = {
          start: defineProperty$2({}, side, reference[side]),
          end: defineProperty$2({}, side, reference[side] + reference[measurement] - popper[measurement])
        };

        data.offsets.popper = _extends$2({}, popper, shiftOffsets[shiftvariation]);
      }

      return data;
    }

    /**
     * @function
     * @memberof Modifiers
     * @argument {Object} data - The data object generated by update method
     * @argument {Object} options - Modifiers configuration and options
     * @returns {Object} The data object, properly modified
     */
    function hide(data) {
      if (!isModifierRequired(data.instance.modifiers, 'hide', 'preventOverflow')) {
        return data;
      }

      var refRect = data.offsets.reference;
      var bound = find(data.instance.modifiers, function (modifier) {
        return modifier.name === 'preventOverflow';
      }).boundaries;

      if (refRect.bottom < bound.top || refRect.left > bound.right || refRect.top > bound.bottom || refRect.right < bound.left) {
        // Avoid unnecessary DOM access if visibility hasn't changed
        if (data.hide === true) {
          return data;
        }

        data.hide = true;
        data.attributes['x-out-of-boundaries'] = '';
      } else {
        // Avoid unnecessary DOM access if visibility hasn't changed
        if (data.hide === false) {
          return data;
        }

        data.hide = false;
        data.attributes['x-out-of-boundaries'] = false;
      }

      return data;
    }

    /**
     * @function
     * @memberof Modifiers
     * @argument {Object} data - The data object generated by `update` method
     * @argument {Object} options - Modifiers configuration and options
     * @returns {Object} The data object, properly modified
     */
    function inner(data) {
      var placement = data.placement;
      var basePlacement = placement.split('-')[0];
      var _data$offsets = data.offsets,
          popper = _data$offsets.popper,
          reference = _data$offsets.reference;

      var isHoriz = ['left', 'right'].indexOf(basePlacement) !== -1;

      var subtractLength = ['top', 'left'].indexOf(basePlacement) === -1;

      popper[isHoriz ? 'left' : 'top'] = reference[basePlacement] - (subtractLength ? popper[isHoriz ? 'width' : 'height'] : 0);

      data.placement = getOppositePlacement(placement);
      data.offsets.popper = getClientRect(popper);

      return data;
    }

    /**
     * Modifier function, each modifier can have a function of this type assigned
     * to its `fn` property.<br />
     * These functions will be called on each update, this means that you must
     * make sure they are performant enough to avoid performance bottlenecks.
     *
     * @function ModifierFn
     * @argument {dataObject} data - The data object generated by `update` method
     * @argument {Object} options - Modifiers configuration and options
     * @returns {dataObject} The data object, properly modified
     */

    /**
     * Modifiers are plugins used to alter the behavior of your poppers.<br />
     * Popper.js uses a set of 9 modifiers to provide all the basic functionalities
     * needed by the library.
     *
     * Usually you don't want to override the `order`, `fn` and `onLoad` props.
     * All the other properties are configurations that could be tweaked.
     * @namespace modifiers
     */
    var modifiers = {
      /**
       * Modifier used to shift the popper on the start or end of its reference
       * element.<br />
       * It will read the variation of the `placement` property.<br />
       * It can be one either `-end` or `-start`.
       * @memberof modifiers
       * @inner
       */
      shift: {
        /** @prop {number} order=100 - Index used to define the order of execution */
        order: 100,
        /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
        enabled: true,
        /** @prop {ModifierFn} */
        fn: shift
      },

      /**
       * The `offset` modifier can shift your popper on both its axis.
       *
       * It accepts the following units:
       * - `px` or unit-less, interpreted as pixels
       * - `%` or `%r`, percentage relative to the length of the reference element
       * - `%p`, percentage relative to the length of the popper element
       * - `vw`, CSS viewport width unit
       * - `vh`, CSS viewport height unit
       *
       * For length is intended the main axis relative to the placement of the popper.<br />
       * This means that if the placement is `top` or `bottom`, the length will be the
       * `width`. In case of `left` or `right`, it will be the `height`.
       *
       * You can provide a single value (as `Number` or `String`), or a pair of values
       * as `String` divided by a comma or one (or more) white spaces.<br />
       * The latter is a deprecated method because it leads to confusion and will be
       * removed in v2.<br />
       * Additionally, it accepts additions and subtractions between different units.
       * Note that multiplications and divisions aren't supported.
       *
       * Valid examples are:
       * ```
       * 10
       * '10%'
       * '10, 10'
       * '10%, 10'
       * '10 + 10%'
       * '10 - 5vh + 3%'
       * '-10px + 5vh, 5px - 6%'
       * ```
       * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap
       * > with their reference element, unfortunately, you will have to disable the `flip` modifier.
       * > You can read more on this at this [issue](https://github.com/FezVrasta/popper.js/issues/373).
       *
       * @memberof modifiers
       * @inner
       */
      offset: {
        /** @prop {number} order=200 - Index used to define the order of execution */
        order: 200,
        /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
        enabled: true,
        /** @prop {ModifierFn} */
        fn: offset,
        /** @prop {Number|String} offset=0
         * The offset value as described in the modifier description
         */
        offset: 0
      },

      /**
       * Modifier used to prevent the popper from being positioned outside the boundary.
       *
       * A scenario exists where the reference itself is not within the boundaries.<br />
       * We can say it has "escaped the boundaries" — or just "escaped".<br />
       * In this case we need to decide whether the popper should either:
       *
       * - detach from the reference and remain "trapped" in the boundaries, or
       * - if it should ignore the boundary and "escape with its reference"
       *
       * When `escapeWithReference` is set to`true` and reference is completely
       * outside its boundaries, the popper will overflow (or completely leave)
       * the boundaries in order to remain attached to the edge of the reference.
       *
       * @memberof modifiers
       * @inner
       */
      preventOverflow: {
        /** @prop {number} order=300 - Index used to define the order of execution */
        order: 300,
        /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
        enabled: true,
        /** @prop {ModifierFn} */
        fn: preventOverflow,
        /**
         * @prop {Array} [priority=['left','right','top','bottom']]
         * Popper will try to prevent overflow following these priorities by default,
         * then, it could overflow on the left and on top of the `boundariesElement`
         */
        priority: ['left', 'right', 'top', 'bottom'],
        /**
         * @prop {number} padding=5
         * Amount of pixel used to define a minimum distance between the boundaries
         * and the popper. This makes sure the popper always has a little padding
         * between the edges of its container
         */
        padding: 5,
        /**
         * @prop {String|HTMLElement} boundariesElement='scrollParent'
         * Boundaries used by the modifier. Can be `scrollParent`, `window`,
         * `viewport` or any DOM element.
         */
        boundariesElement: 'scrollParent'
      },

      /**
       * Modifier used to make sure the reference and its popper stay near each other
       * without leaving any gap between the two. Especially useful when the arrow is
       * enabled and you want to ensure that it points to its reference element.
       * It cares only about the first axis. You can still have poppers with margin
       * between the popper and its reference element.
       * @memberof modifiers
       * @inner
       */
      keepTogether: {
        /** @prop {number} order=400 - Index used to define the order of execution */
        order: 400,
        /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
        enabled: true,
        /** @prop {ModifierFn} */
        fn: keepTogether
      },

      /**
       * This modifier is used to move the `arrowElement` of the popper to make
       * sure it is positioned between the reference element and its popper element.
       * It will read the outer size of the `arrowElement` node to detect how many
       * pixels of conjunction are needed.
       *
       * It has no effect if no `arrowElement` is provided.
       * @memberof modifiers
       * @inner
       */
      arrow: {
        /** @prop {number} order=500 - Index used to define the order of execution */
        order: 500,
        /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
        enabled: true,
        /** @prop {ModifierFn} */
        fn: arrow,
        /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */
        element: '[x-arrow]'
      },

      /**
       * Modifier used to flip the popper's placement when it starts to overlap its
       * reference element.
       *
       * Requires the `preventOverflow` modifier before it in order to work.
       *
       * **NOTE:** this modifier will interrupt the current update cycle and will
       * restart it if it detects the need to flip the placement.
       * @memberof modifiers
       * @inner
       */
      flip: {
        /** @prop {number} order=600 - Index used to define the order of execution */
        order: 600,
        /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
        enabled: true,
        /** @prop {ModifierFn} */
        fn: flip,
        /**
         * @prop {String|Array} behavior='flip'
         * The behavior used to change the popper's placement. It can be one of
         * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid
         * placements (with optional variations)
         */
        behavior: 'flip',
        /**
         * @prop {number} padding=5
         * The popper will flip if it hits the edges of the `boundariesElement`
         */
        padding: 5,
        /**
         * @prop {String|HTMLElement} boundariesElement='viewport'
         * The element which will define the boundaries of the popper position.
         * The popper will never be placed outside of the defined boundaries
         * (except if `keepTogether` is enabled)
         */
        boundariesElement: 'viewport',
        /**
         * @prop {Boolean} flipVariations=false
         * The popper will switch placement variation between `-start` and `-end` when
         * the reference element overlaps its boundaries.
         *
         * The original placement should have a set variation.
         */
        flipVariations: false,
        /**
         * @prop {Boolean} flipVariationsByContent=false
         * The popper will switch placement variation between `-start` and `-end` when
         * the popper element overlaps its reference boundaries.
         *
         * The original placement should have a set variation.
         */
        flipVariationsByContent: false
      },

      /**
       * Modifier used to make the popper flow toward the inner of the reference element.
       * By default, when this modifier is disabled, the popper will be placed outside
       * the reference element.
       * @memberof modifiers
       * @inner
       */
      inner: {
        /** @prop {number} order=700 - Index used to define the order of execution */
        order: 700,
        /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */
        enabled: false,
        /** @prop {ModifierFn} */
        fn: inner
      },

      /**
       * Modifier used to hide the popper when its reference element is outside of the
       * popper boundaries. It will set a `x-out-of-boundaries` attribute which can
       * be used to hide with a CSS selector the popper when its reference is
       * out of boundaries.
       *
       * Requires the `preventOverflow` modifier before it in order to work.
       * @memberof modifiers
       * @inner
       */
      hide: {
        /** @prop {number} order=800 - Index used to define the order of execution */
        order: 800,
        /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
        enabled: true,
        /** @prop {ModifierFn} */
        fn: hide
      },

      /**
       * Computes the style that will be applied to the popper element to gets
       * properly positioned.
       *
       * Note that this modifier will not touch the DOM, it just prepares the styles
       * so that `applyStyle` modifier can apply it. This separation is useful
       * in case you need to replace `applyStyle` with a custom implementation.
       *
       * This modifier has `850` as `order` value to maintain backward compatibility
       * with previous versions of Popper.js. Expect the modifiers ordering method
       * to change in future major versions of the library.
       *
       * @memberof modifiers
       * @inner
       */
      computeStyle: {
        /** @prop {number} order=850 - Index used to define the order of execution */
        order: 850,
        /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
        enabled: true,
        /** @prop {ModifierFn} */
        fn: computeStyle,
        /**
         * @prop {Boolean} gpuAcceleration=true
         * If true, it uses the CSS 3D transformation to position the popper.
         * Otherwise, it will use the `top` and `left` properties
         */
        gpuAcceleration: true,
        /**
         * @prop {string} [x='bottom']
         * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.
         * Change this if your popper should grow in a direction different from `bottom`
         */
        x: 'bottom',
        /**
         * @prop {string} [x='left']
         * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.
         * Change this if your popper should grow in a direction different from `right`
         */
        y: 'right'
      },

      /**
       * Applies the computed styles to the popper element.
       *
       * All the DOM manipulations are limited to this modifier. This is useful in case
       * you want to integrate Popper.js inside a framework or view library and you
       * want to delegate all the DOM manipulations to it.
       *
       * Note that if you disable this modifier, you must make sure the popper element
       * has its position set to `absolute` before Popper.js can do its work!
       *
       * Just disable this modifier and define your own to achieve the desired effect.
       *
       * @memberof modifiers
       * @inner
       */
      applyStyle: {
        /** @prop {number} order=900 - Index used to define the order of execution */
        order: 900,
        /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
        enabled: true,
        /** @prop {ModifierFn} */
        fn: applyStyle,
        /** @prop {Function} */
        onLoad: applyStyleOnLoad,
        /**
         * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier
         * @prop {Boolean} gpuAcceleration=true
         * If true, it uses the CSS 3D transformation to position the popper.
         * Otherwise, it will use the `top` and `left` properties
         */
        gpuAcceleration: undefined
      }
    };

    /**
     * The `dataObject` is an object containing all the information used by Popper.js.
     * This object is passed to modifiers and to the `onCreate` and `onUpdate` callbacks.
     * @name dataObject
     * @property {Object} data.instance The Popper.js instance
     * @property {String} data.placement Placement applied to popper
     * @property {String} data.originalPlacement Placement originally defined on init
     * @property {Boolean} data.flipped True if popper has been flipped by flip modifier
     * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper
     * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier
     * @property {Object} data.styles Any CSS property defined here will be applied to the popper. It expects the JavaScript nomenclature (eg. `marginBottom`)
     * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow. It expects the JavaScript nomenclature (eg. `marginBottom`)
     * @property {Object} data.boundaries Offsets of the popper boundaries
     * @property {Object} data.offsets The measurements of popper, reference and arrow elements
     * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values
     * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values
     * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0
     */

    /**
     * Default options provided to Popper.js constructor.<br />
     * These can be overridden using the `options` argument of Popper.js.<br />
     * To override an option, simply pass an object with the same
     * structure of the `options` object, as the 3rd argument. For example:
     * ```
     * new Popper(ref, pop, {
     *   modifiers: {
     *     preventOverflow: { enabled: false }
     *   }
     * })
     * ```
     * @type {Object}
     * @static
     * @memberof Popper
     */
    var Defaults = {
      /**
       * Popper's placement.
       * @prop {Popper.placements} placement='bottom'
       */
      placement: 'bottom',

      /**
       * Set this to true if you want popper to position it self in 'fixed' mode
       * @prop {Boolean} positionFixed=false
       */
      positionFixed: false,

      /**
       * Whether events (resize, scroll) are initially enabled.
       * @prop {Boolean} eventsEnabled=true
       */
      eventsEnabled: true,

      /**
       * Set to true if you want to automatically remove the popper when
       * you call the `destroy` method.
       * @prop {Boolean} removeOnDestroy=false
       */
      removeOnDestroy: false,

      /**
       * Callback called when the popper is created.<br />
       * By default, it is set to no-op.<br />
       * Access Popper.js instance with `data.instance`.
       * @prop {onCreate}
       */
      onCreate: function onCreate() {},

      /**
       * Callback called when the popper is updated. This callback is not called
       * on the initialization/creation of the popper, but only on subsequent
       * updates.<br />
       * By default, it is set to no-op.<br />
       * Access Popper.js instance with `data.instance`.
       * @prop {onUpdate}
       */
      onUpdate: function onUpdate() {},

      /**
       * List of modifiers used to modify the offsets before they are applied to the popper.
       * They provide most of the functionalities of Popper.js.
       * @prop {modifiers}
       */
      modifiers: modifiers
    };

    /**
     * @callback onCreate
     * @param {dataObject} data
     */

    /**
     * @callback onUpdate
     * @param {dataObject} data
     */

    // Utils
    // Methods
    var Popper$1 = function () {
      /**
       * Creates a new Popper.js instance.
       * @class Popper
       * @param {Element|referenceObject} reference - The reference element used to position the popper
       * @param {Element} popper - The HTML / XML element used as the popper
       * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)
       * @return {Object} instance - The generated Popper.js instance
       */
      function Popper(reference, popper) {
        var _this = this;

        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        classCallCheck$1(this, Popper);

        this.scheduleUpdate = function () {
          return requestAnimationFrame(_this.update);
        };

        // make update() debounced, so that it only runs at most once-per-tick
        this.update = debounce(this.update.bind(this));

        // with {} we create a new object with the options inside it
        this.options = _extends$2({}, Popper.Defaults, options);

        // init state
        this.state = {
          isDestroyed: false,
          isCreated: false,
          scrollParents: []
        };

        // get reference and popper elements (allow jQuery wrappers)
        this.reference = reference && reference.jquery ? reference[0] : reference;
        this.popper = popper && popper.jquery ? popper[0] : popper;

        // Deep merge modifiers options
        this.options.modifiers = {};
        Object.keys(_extends$2({}, Popper.Defaults.modifiers, options.modifiers)).forEach(function (name) {
          _this.options.modifiers[name] = _extends$2({}, Popper.Defaults.modifiers[name] || {}, options.modifiers ? options.modifiers[name] : {});
        });

        // Refactoring modifiers' list (Object => Array)
        this.modifiers = Object.keys(this.options.modifiers).map(function (name) {
          return _extends$2({
            name: name
          }, _this.options.modifiers[name]);
        })
        // sort the modifiers by order
        .sort(function (a, b) {
          return a.order - b.order;
        });

        // modifiers have the ability to execute arbitrary code when Popper.js get inited
        // such code is executed in the same order of its modifier
        // they could add new properties to their options configuration
        // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!
        this.modifiers.forEach(function (modifierOptions) {
          if (modifierOptions.enabled && isFunction$2(modifierOptions.onLoad)) {
            modifierOptions.onLoad(_this.reference, _this.popper, _this.options, modifierOptions, _this.state);
          }
        });

        // fire the first update to position the popper in the right place
        this.update();

        var eventsEnabled = this.options.eventsEnabled;
        if (eventsEnabled) {
          // setup event listeners, they will take care of update the position in specific situations
          this.enableEventListeners();
        }

        this.state.eventsEnabled = eventsEnabled;
      }

      // We can't use class properties because they don't get listed in the
      // class prototype and break stuff like Sinon stubs


      createClass$1(Popper, [{
        key: 'update',
        value: function update$$1() {
          return update.call(this);
        }
      }, {
        key: 'destroy',
        value: function destroy$$1() {
          return destroy$1.call(this);
        }
      }, {
        key: 'enableEventListeners',
        value: function enableEventListeners$$1() {
          return enableEventListeners.call(this);
        }
      }, {
        key: 'disableEventListeners',
        value: function disableEventListeners$$1() {
          return disableEventListeners.call(this);
        }

        /**
         * Schedules an update. It will run on the next UI update available.
         * @method scheduleUpdate
         * @memberof Popper
         */


        /**
         * Collection of utilities useful when writing custom modifiers.
         * Starting from version 1.7, this method is available only if you
         * include `popper-utils.js` before `popper.js`.
         *
         * **DEPRECATION**: This way to access PopperUtils is deprecated
         * and will be removed in v2! Use the PopperUtils module directly instead.
         * Due to the high instability of the methods contained in Utils, we can't
         * guarantee them to follow semver. Use them at your own risk!
         * @static
         * @private
         * @type {Object}
         * @deprecated since version 1.8
         * @member Utils
         * @memberof Popper
         */

      }]);
      return Popper;
    }();

    /**
     * The `referenceObject` is an object that provides an interface compatible with Popper.js
     * and lets you use it as replacement of a real DOM node.<br />
     * You can use this method to position a popper relatively to a set of coordinates
     * in case you don't have a DOM node to use as reference.
     *
     * ```
     * new Popper(referenceObject, popperNode);
     * ```
     *
     * NB: This feature isn't supported in Internet Explorer 10.
     * @name referenceObject
     * @property {Function} data.getBoundingClientRect
     * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.
     * @property {number} data.clientWidth
     * An ES6 getter that will return the width of the virtual reference element.
     * @property {number} data.clientHeight
     * An ES6 getter that will return the height of the virtual reference element.
     */


    Popper$1.Utils = (typeof window !== 'undefined' ? window : global).PopperUtils;
    Popper$1.placements = placements;
    Popper$1.Defaults = Defaults;

    var PopperJs = Popper$1;

    function flipPlacement(placement, theme) {
      var direction = theme && theme.direction || 'ltr';

      if (direction === 'ltr') {
        return placement;
      }

      switch (placement) {
        case 'bottom-end':
          return 'bottom-start';

        case 'bottom-start':
          return 'bottom-end';

        case 'top-end':
          return 'top-start';

        case 'top-start':
          return 'top-end';

        default:
          return placement;
      }
    }

    function getAnchorEl(anchorEl) {
      return typeof anchorEl === 'function' ? anchorEl() : anchorEl;
    }

    var useEnhancedEffect$1 = typeof window !== 'undefined' ? React__namespace.useLayoutEffect : React__namespace.useEffect;
    var defaultPopperOptions = {};
    /**
     * Poppers rely on the 3rd party library [Popper.js](https://popper.js.org/docs/v1/) for positioning.
     */

    var Popper = /*#__PURE__*/React__namespace.forwardRef(function Popper(props, ref) {
      var anchorEl = props.anchorEl,
          children = props.children,
          container = props.container,
          _props$disablePortal = props.disablePortal,
          disablePortal = _props$disablePortal === void 0 ? false : _props$disablePortal,
          _props$keepMounted = props.keepMounted,
          keepMounted = _props$keepMounted === void 0 ? false : _props$keepMounted,
          modifiers = props.modifiers,
          open = props.open,
          _props$placement = props.placement,
          initialPlacement = _props$placement === void 0 ? 'bottom' : _props$placement,
          _props$popperOptions = props.popperOptions,
          popperOptions = _props$popperOptions === void 0 ? defaultPopperOptions : _props$popperOptions,
          popperRefProp = props.popperRef,
          style = props.style,
          _props$transition = props.transition,
          transition = _props$transition === void 0 ? false : _props$transition,
          other = _objectWithoutProperties(props, ["anchorEl", "children", "container", "disablePortal", "keepMounted", "modifiers", "open", "placement", "popperOptions", "popperRef", "style", "transition"]);

      var tooltipRef = React__namespace.useRef(null);
      var ownRef = useForkRef(tooltipRef, ref);
      var popperRef = React__namespace.useRef(null);
      var handlePopperRef = useForkRef(popperRef, popperRefProp);
      var handlePopperRefRef = React__namespace.useRef(handlePopperRef);
      useEnhancedEffect$1(function () {
        handlePopperRefRef.current = handlePopperRef;
      }, [handlePopperRef]);
      React__namespace.useImperativeHandle(popperRefProp, function () {
        return popperRef.current;
      }, []);

      var _React$useState = React__namespace.useState(true),
          exited = _React$useState[0],
          setExited = _React$useState[1];

      var theme = useTheme$1();
      var rtlPlacement = flipPlacement(initialPlacement, theme);
      /**
       * placement initialized from prop but can change during lifetime if modifiers.flip.
       * modifiers.flip is essentially a flip for controlled/uncontrolled behavior
       */

      var _React$useState2 = React__namespace.useState(rtlPlacement),
          placement = _React$useState2[0],
          setPlacement = _React$useState2[1];

      React__namespace.useEffect(function () {
        if (popperRef.current) {
          popperRef.current.update();
        }
      });
      var handleOpen = React__namespace.useCallback(function () {
        if (!tooltipRef.current || !anchorEl || !open) {
          return;
        }

        if (popperRef.current) {
          popperRef.current.destroy();
          handlePopperRefRef.current(null);
        }

        var handlePopperUpdate = function handlePopperUpdate(data) {
          setPlacement(data.placement);
        };

        var resolvedAnchorEl = getAnchorEl(anchorEl);

        if (process.env.NODE_ENV !== 'production') {
          if (resolvedAnchorEl && resolvedAnchorEl.nodeType === 1) {
            var box = resolvedAnchorEl.getBoundingClientRect();

            if (process.env.NODE_ENV !== 'test' && box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
              console.warn(['Material-UI: The `anchorEl` prop provided to the component is invalid.', 'The anchor element should be part of the document layout.', "Make sure the element is present in the document or that it's not display none."].join('\n'));
            }
          }
        }

        var popper = new PopperJs(getAnchorEl(anchorEl), tooltipRef.current, _extends$3({
          placement: rtlPlacement
        }, popperOptions, {
          modifiers: _extends$3({}, disablePortal ? {} : {
            // It's using scrollParent by default, we can use the viewport when using a portal.
            preventOverflow: {
              boundariesElement: 'window'
            }
          }, modifiers, popperOptions.modifiers),
          // We could have been using a custom modifier like react-popper is doing.
          // But it seems this is the best public API for this use case.
          onCreate: createChainedFunction(handlePopperUpdate, popperOptions.onCreate),
          onUpdate: createChainedFunction(handlePopperUpdate, popperOptions.onUpdate)
        }));
        handlePopperRefRef.current(popper);
      }, [anchorEl, disablePortal, modifiers, open, rtlPlacement, popperOptions]);
      var handleRef = React__namespace.useCallback(function (node) {
        setRef(ownRef, node);
        handleOpen();
      }, [ownRef, handleOpen]);

      var handleEnter = function handleEnter() {
        setExited(false);
      };

      var handleClose = function handleClose() {
        if (!popperRef.current) {
          return;
        }

        popperRef.current.destroy();
        handlePopperRefRef.current(null);
      };

      var handleExited = function handleExited() {
        setExited(true);
        handleClose();
      };

      React__namespace.useEffect(function () {
        return function () {
          handleClose();
        };
      }, []);
      React__namespace.useEffect(function () {
        if (!open && !transition) {
          // Otherwise handleExited will call this.
          handleClose();
        }
      }, [open, transition]);

      if (!keepMounted && !open && (!transition || exited)) {
        return null;
      }

      var childProps = {
        placement: placement
      };

      if (transition) {
        childProps.TransitionProps = {
          in: open,
          onEnter: handleEnter,
          onExited: handleExited
        };
      }

      return /*#__PURE__*/React__namespace.createElement(Portal$1, {
        disablePortal: disablePortal,
        container: container
      }, /*#__PURE__*/React__namespace.createElement("div", _extends$3({
        ref: handleRef,
        role: "tooltip"
      }, other, {
        style: _extends$3({
          // Prevents scroll issue, waiting for Popper.js to add this style once initiated.
          position: 'fixed',
          // Fix Popper.js display issue
          top: 0,
          left: 0,
          display: !open && keepMounted && !transition ? 'none' : null
        }, style)
      }), typeof children === 'function' ? children(childProps) : children));
    });
    process.env.NODE_ENV !== "production" ? Popper.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * A HTML element, [referenceObject](https://popper.js.org/docs/v1/#referenceObject),
       * or a function that returns either.
       * It's used to set the position of the popper.
       * The return value will passed as the reference object of the Popper instance.
       */
      anchorEl: chainPropTypes$1(re.oneOfType([HTMLElementType, re.object, re.func]), function (props) {
        if (props.open) {
          var resolvedAnchorEl = getAnchorEl(props.anchorEl);

          if (resolvedAnchorEl && resolvedAnchorEl.nodeType === 1) {
            var box = resolvedAnchorEl.getBoundingClientRect();

            if (process.env.NODE_ENV !== 'test' && box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
              return new Error(['Material-UI: The `anchorEl` prop provided to the component is invalid.', 'The anchor element should be part of the document layout.', "Make sure the element is present in the document or that it's not display none."].join('\n'));
            }
          } else if (!resolvedAnchorEl || typeof resolvedAnchorEl.clientWidth !== 'number' || typeof resolvedAnchorEl.clientHeight !== 'number' || typeof resolvedAnchorEl.getBoundingClientRect !== 'function') {
            return new Error(['Material-UI: The `anchorEl` prop provided to the component is invalid.', 'It should be an HTML element instance or a referenceObject ', '(https://popper.js.org/docs/v1/#referenceObject).'].join('\n'));
          }
        }

        return null;
      }),

      /**
       * Popper render function or node.
       */
      children: re
      /* @typescript-to-proptypes-ignore */
      .oneOfType([re.node, re.func]).isRequired,

      /**
       * A HTML element, component instance, or function that returns either.
       * The `container` will have the portal children appended to it.
       *
       * By default, it uses the body of the top-level document object,
       * so it's simply `document.body` most of the time.
       */
      container: re
      /* @typescript-to-proptypes-ignore */
      .oneOfType([HTMLElementType, re.instanceOf(React__namespace.Component), re.func]),

      /**
       * Disable the portal behavior.
       * The children stay within it's parent DOM hierarchy.
       */
      disablePortal: re.bool,

      /**
       * Always keep the children in the DOM.
       * This prop can be useful in SEO situation or
       * when you want to maximize the responsiveness of the Popper.
       */
      keepMounted: re.bool,

      /**
       * Popper.js is based on a "plugin-like" architecture,
       * most of its features are fully encapsulated "modifiers".
       *
       * A modifier is a function that is called each time Popper.js needs to
       * compute the position of the popper.
       * For this reason, modifiers should be very performant to avoid bottlenecks.
       * To learn how to create a modifier, [read the modifiers documentation](https://popper.js.org/docs/v1/#modifiers).
       */
      modifiers: re.object,

      /**
       * If `true`, the popper is visible.
       */
      open: re.bool.isRequired,

      /**
       * Popper placement.
       */
      placement: re.oneOf(['bottom-end', 'bottom-start', 'bottom', 'left-end', 'left-start', 'left', 'right-end', 'right-start', 'right', 'top-end', 'top-start', 'top']),

      /**
       * Options provided to the [`popper.js`](https://popper.js.org/docs/v1/) instance.
       */
      popperOptions: re.object,

      /**
       * A ref that points to the used popper instance.
       */
      popperRef: refType$1,

      /**
       * @ignore
       */
      style: re.object,

      /**
       * Help supporting a react-transition-group/Transition component.
       */
      transition: re.bool
    } : void 0;
    var P = Popper;

    /**
     * @ignore - internal component.
     */

    var RadioButtonUncheckedIcon = createSvgIcon$1( /*#__PURE__*/React__namespace.createElement("path", {
      d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
    }), 'RadioButtonUnchecked');

    /**
     * @ignore - internal component.
     */

    var RadioButtonCheckedIcon = createSvgIcon$1( /*#__PURE__*/React__namespace.createElement("path", {
      d: "M8.465 8.465C9.37 7.56 10.62 7 12 7C14.76 7 17 9.24 17 12C17 13.38 16.44 14.63 15.535 15.535C14.63 16.44 13.38 17 12 17C9.24 17 7 14.76 7 12C7 10.62 7.56 9.37 8.465 8.465Z"
    }), 'RadioButtonChecked');

    var styles$U = function styles(theme) {
      return {
        root: {
          position: 'relative',
          display: 'flex',
          '&$checked $layer': {
            transform: 'scale(1)',
            transition: theme.transitions.create('transform', {
              easing: theme.transitions.easing.easeOut,
              duration: theme.transitions.duration.shortest
            })
          }
        },
        layer: {
          left: 0,
          position: 'absolute',
          transform: 'scale(0)',
          transition: theme.transitions.create('transform', {
            easing: theme.transitions.easing.easeIn,
            duration: theme.transitions.duration.shortest
          })
        },
        checked: {}
      };
    };
    /**
     * @ignore - internal component.
     */

    function RadioButtonIcon(props) {
      var checked = props.checked,
          classes = props.classes,
          fontSize = props.fontSize;
      return /*#__PURE__*/React__namespace.createElement("div", {
        className: r$1(classes.root, checked && classes.checked)
      }, /*#__PURE__*/React__namespace.createElement(RadioButtonUncheckedIcon, {
        fontSize: fontSize
      }), /*#__PURE__*/React__namespace.createElement(RadioButtonCheckedIcon, {
        fontSize: fontSize,
        className: classes.layer
      }));
    }

    process.env.NODE_ENV !== "production" ? RadioButtonIcon.propTypes = {
      /**
       * If `true`, the component is checked.
       */
      checked: re.bool,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object.isRequired,

      /**
       * The size of the radio.
       * `small` is equivalent to the dense radio styling.
       */
      fontSize: re.oneOf(['small', 'medium'])
    } : void 0;
    var RadioButtonIcon$1 = withStyles(styles$U, {
      name: 'PrivateRadioButtonIcon'
    })(RadioButtonIcon);

    /**
     * @ignore - internal component.
     */

    var RadioGroupContext = React__namespace.createContext();

    if (process.env.NODE_ENV !== 'production') {
      RadioGroupContext.displayName = 'RadioGroupContext';
    }

    var RadioGroupContext$1 = RadioGroupContext;

    function useRadioGroup() {
      return React__namespace.useContext(RadioGroupContext$1);
    }

    var styles$T = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          color: theme.palette.text.secondary
        },

        /* Pseudo-class applied to the root element if `checked={true}`. */
        checked: {},

        /* Pseudo-class applied to the root element if `disabled={true}`. */
        disabled: {},

        /* Styles applied to the root element if `color="primary"`. */
        colorPrimary: {
          '&$checked': {
            color: theme.palette.primary.main,
            '&:hover': {
              backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.hoverOpacity),
              // Reset on touch devices, it doesn't add specificity
              '@media (hover: none)': {
                backgroundColor: 'transparent'
              }
            }
          },
          '&$disabled': {
            color: theme.palette.action.disabled
          }
        },

        /* Styles applied to the root element if `color="secondary"`. */
        colorSecondary: {
          '&$checked': {
            color: theme.palette.secondary.main,
            '&:hover': {
              backgroundColor: alpha(theme.palette.secondary.main, theme.palette.action.hoverOpacity),
              // Reset on touch devices, it doesn't add specificity
              '@media (hover: none)': {
                backgroundColor: 'transparent'
              }
            }
          },
          '&$disabled': {
            color: theme.palette.action.disabled
          }
        }
      };
    };
    var defaultCheckedIcon = /*#__PURE__*/React__namespace.createElement(RadioButtonIcon$1, {
      checked: true
    });
    var defaultIcon$1 = /*#__PURE__*/React__namespace.createElement(RadioButtonIcon$1, null);
    var Radio = /*#__PURE__*/React__namespace.forwardRef(function Radio(props, ref) {
      var checkedProp = props.checked,
          classes = props.classes,
          _props$color = props.color,
          color = _props$color === void 0 ? 'secondary' : _props$color,
          nameProp = props.name,
          onChangeProp = props.onChange,
          _props$size = props.size,
          size = _props$size === void 0 ? 'medium' : _props$size,
          other = _objectWithoutProperties(props, ["checked", "classes", "color", "name", "onChange", "size"]);

      var radioGroup = useRadioGroup();
      var checked = checkedProp;
      var onChange = createChainedFunction(onChangeProp, radioGroup && radioGroup.onChange);
      var name = nameProp;

      if (radioGroup) {
        if (typeof checked === 'undefined') {
          checked = radioGroup.value === props.value;
        }

        if (typeof name === 'undefined') {
          name = radioGroup.name;
        }
      }

      return /*#__PURE__*/React__namespace.createElement(SwitchBase$1, _extends$3({
        color: color,
        type: "radio",
        icon: /*#__PURE__*/React__namespace.cloneElement(defaultIcon$1, {
          fontSize: size === 'small' ? 'small' : 'medium'
        }),
        checkedIcon: /*#__PURE__*/React__namespace.cloneElement(defaultCheckedIcon, {
          fontSize: size === 'small' ? 'small' : 'medium'
        }),
        classes: {
          root: r$1(classes.root, classes["color".concat(capitalize(color))]),
          checked: classes.checked,
          disabled: classes.disabled
        },
        name: name,
        checked: checked,
        onChange: onChange,
        ref: ref
      }, other));
    });
    process.env.NODE_ENV !== "production" ? Radio.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * If `true`, the component is checked.
       */
      checked: re.bool,

      /**
       * The icon to display when the component is checked.
       */
      checkedIcon: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * The color of the component. It supports those theme colors that make sense for this component.
       */
      color: re.oneOf(['default', 'primary', 'secondary']),

      /**
       * If `true`, the radio will be disabled.
       */
      disabled: re.bool,

      /**
       * If `true`, the ripple effect will be disabled.
       */
      disableRipple: re.bool,

      /**
       * The icon to display when the component is unchecked.
       */
      icon: re.node,

      /**
       * The id of the `input` element.
       */
      id: re.string,

      /**
       * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
       */
      inputProps: re.object,

      /**
       * Pass a ref to the `input` element.
       */
      inputRef: refType$1,

      /**
       * Name attribute of the `input` element.
       */
      name: re.string,

      /**
       * Callback fired when the state is changed.
       *
       * @param {object} event The event source of the callback.
       * You can pull out the new value by accessing `event.target.value` (string).
       * You can pull out the new checked state by accessing `event.target.checked` (boolean).
       */
      onChange: re.func,

      /**
       * If `true`, the `input` element will be required.
       */
      required: re.bool,

      /**
       * The size of the radio.
       * `small` is equivalent to the dense radio styling.
       */
      size: re.oneOf(['medium', 'small']),

      /**
       * The value of the component. The DOM API casts this to a string.
       */
      value: re.any
    } : void 0;
    var Radio$1 = withStyles(styles$T, {
      name: 'MuiRadio'
    })(Radio);

    var RadioGroup = /*#__PURE__*/React__namespace.forwardRef(function RadioGroup(props, ref) {
      var actions = props.actions,
          children = props.children,
          nameProp = props.name,
          valueProp = props.value,
          onChange = props.onChange,
          other = _objectWithoutProperties(props, ["actions", "children", "name", "value", "onChange"]);

      var rootRef = React__namespace.useRef(null);

      var _useControlled = useControlled({
        controlled: valueProp,
        default: props.defaultValue,
        name: 'RadioGroup'
      }),
          _useControlled2 = _slicedToArray(_useControlled, 2),
          value = _useControlled2[0],
          setValue = _useControlled2[1];

      React__namespace.useImperativeHandle(actions, function () {
        return {
          focus: function focus() {
            var input = rootRef.current.querySelector('input:not(:disabled):checked');

            if (!input) {
              input = rootRef.current.querySelector('input:not(:disabled)');
            }

            if (input) {
              input.focus();
            }
          }
        };
      }, []);
      var handleRef = useForkRef(ref, rootRef);

      var handleChange = function handleChange(event) {
        setValue(event.target.value);

        if (onChange) {
          onChange(event, event.target.value);
        }
      };

      var name = useId(nameProp);
      return /*#__PURE__*/React__namespace.createElement(RadioGroupContext$1.Provider, {
        value: {
          name: name,
          onChange: handleChange,
          value: value
        }
      }, /*#__PURE__*/React__namespace.createElement(FormGroup$1, _extends$3({
        role: "radiogroup",
        ref: handleRef
      }, other), children));
    });
    process.env.NODE_ENV !== "production" ? RadioGroup.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * The content of the component.
       */
      children: re.node,

      /**
       * The default `input` element value. Use when the component is not controlled.
       */
      defaultValue: re.oneOfType([re.arrayOf(re.string), re.number, re.string]),

      /**
       * The name used to reference the value of the control.
       * If you don't provide this prop, it falls back to a randomly generated name.
       */
      name: re.string,

      /**
       * Callback fired when a radio button is selected.
       *
       * @param {object} event The event source of the callback.
       * You can pull out the new value by accessing `event.target.value` (string).
       */
      onChange: re.func,

      /**
       * Value of the selected radio button. The DOM API casts this to a string.
       */
      value: re.any
    } : void 0;
    var RadioGroup$1 = RadioGroup;

    function _inherits$1(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }

      Object.defineProperty(subClass, "prototype", {
        value: Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            writable: true,
            configurable: true
          }
        }),
        writable: false
      });
      if (superClass) _setPrototypeOf$2(subClass, superClass);
    }

    function _possibleConstructorReturn$1(self, call) {
      if (call && (_typeof$g(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }

      return _assertThisInitialized$1(self);
    }

    function _getPrototypeOf$1(o) {
      _getPrototypeOf$1 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
      };
      return _getPrototypeOf$1(o);
    }

    function _createSuper$3(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$3(); return function _createSuperInternal() { var Super = _getPrototypeOf$1(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf$1(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn$1(this, result); }; }

    function _isNativeReflectConstruct$3() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
    var warnedOnce$1 = false;
    /**
     * ⚠️⚠️⚠️
     * If you want the DOM element of a Material-UI component check out
     * [FAQ: How can I access the DOM element?](/getting-started/faq/#how-can-i-access-the-dom-element)
     * first.
     *
     * This component uses `findDOMNode` which is deprecated in React.StrictMode.
     *
     * Helper component to allow attaching a ref to a
     * wrapped element to access the underlying DOM element.
     *
     * It's highly inspired by https://github.com/facebook/react/issues/11401#issuecomment-340543801.
     * For example:
     * ```jsx
     * import React from 'react';
     * import RootRef from '@material-ui/core/RootRef';
     *
     * function MyComponent() {
     *   const domRef = React.useRef();
     *
     *   React.useEffect(() => {
     *     console.log(domRef.current); // DOM node
     *   }, []);
     *
     *   return (
     *     <RootRef rootRef={domRef}>
     *       <SomeChildComponent />
     *     </RootRef>
     *   );
     * }
     * ```
     *
     * @deprecated
     */

    var RootRef = /*#__PURE__*/function (_React$Component) {
      _inherits$1(RootRef, _React$Component);

      var _super = _createSuper$3(RootRef);

      function RootRef() {
        _classCallCheck$1(this, RootRef);

        return _super.apply(this, arguments);
      }

      _createClass$1(RootRef, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.ref = ReactDOM__namespace.findDOMNode(this);
          setRef(this.props.rootRef, this.ref);
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate(prevProps) {
          var ref = ReactDOM__namespace.findDOMNode(this);

          if (prevProps.rootRef !== this.props.rootRef || this.ref !== ref) {
            if (prevProps.rootRef !== this.props.rootRef) {
              setRef(prevProps.rootRef, null);
            }

            this.ref = ref;
            setRef(this.props.rootRef, this.ref);
          }
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this.ref = null;
          setRef(this.props.rootRef, null);
        }
      }, {
        key: "render",
        value: function render() {
          if (process.env.NODE_ENV !== 'production') {
            if (!warnedOnce$1) {
              warnedOnce$1 = true;
              console.warn(['Material-UI: The RootRef component is deprecated.', 'The component relies on the ReactDOM.findDOMNode API which is deprecated in React.StrictMode.', 'Instead, you can get a reference to the underlying DOM node of the components via the `ref` prop.'].join('/n'));
            }
          }

          return this.props.children;
        }
      }]);

      return RootRef;
    }(React__namespace.Component);

    process.env.NODE_ENV !== "production" ? RootRef.propTypes = {
      /**
       * The wrapped element.
       */
      children: re.element.isRequired,

      /**
       * A ref that points to the first DOM node of the wrapped element.
       */
      rootRef: refType$1.isRequired
    } : void 0;

    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== "production" ? RootRef.propTypes = exactProp(RootRef.propTypes) : void 0;
    }

    var RootRef$1 = RootRef;

    function areEqualValues(a, b) {
      if (_typeof$g(b) === 'object' && b !== null) {
        return a === b;
      }

      return String(a) === String(b);
    }

    function isEmpty$1(display) {
      return display == null || typeof display === 'string' && !display.trim();
    }
    /**
     * @ignore - internal component.
     */


    var SelectInput = /*#__PURE__*/React__namespace.forwardRef(function SelectInput(props, ref) {
      var ariaLabel = props['aria-label'],
          autoFocus = props.autoFocus,
          autoWidth = props.autoWidth,
          children = props.children,
          classes = props.classes,
          className = props.className,
          defaultValue = props.defaultValue,
          disabled = props.disabled,
          displayEmpty = props.displayEmpty,
          IconComponent = props.IconComponent,
          inputRefProp = props.inputRef,
          labelId = props.labelId,
          _props$MenuProps = props.MenuProps,
          MenuProps = _props$MenuProps === void 0 ? {} : _props$MenuProps,
          multiple = props.multiple,
          name = props.name,
          onBlur = props.onBlur,
          onChange = props.onChange,
          onClose = props.onClose,
          onFocus = props.onFocus,
          onOpen = props.onOpen,
          openProp = props.open,
          readOnly = props.readOnly,
          renderValue = props.renderValue,
          _props$SelectDisplayP = props.SelectDisplayProps,
          SelectDisplayProps = _props$SelectDisplayP === void 0 ? {} : _props$SelectDisplayP,
          tabIndexProp = props.tabIndex;
          props.type;
          var valueProp = props.value,
          _props$variant = props.variant,
          variant = _props$variant === void 0 ? 'standard' : _props$variant,
          other = _objectWithoutProperties(props, ["aria-label", "autoFocus", "autoWidth", "children", "classes", "className", "defaultValue", "disabled", "displayEmpty", "IconComponent", "inputRef", "labelId", "MenuProps", "multiple", "name", "onBlur", "onChange", "onClose", "onFocus", "onOpen", "open", "readOnly", "renderValue", "SelectDisplayProps", "tabIndex", "type", "value", "variant"]);

      var _useControlled = useControlled({
        controlled: valueProp,
        default: defaultValue,
        name: 'Select'
      }),
          _useControlled2 = _slicedToArray(_useControlled, 2),
          value = _useControlled2[0],
          setValue = _useControlled2[1];

      var inputRef = React__namespace.useRef(null);

      var _React$useState = React__namespace.useState(null),
          displayNode = _React$useState[0],
          setDisplayNode = _React$useState[1];

      var _React$useRef = React__namespace.useRef(openProp != null),
          isOpenControlled = _React$useRef.current;

      var _React$useState2 = React__namespace.useState(),
          menuMinWidthState = _React$useState2[0],
          setMenuMinWidthState = _React$useState2[1];

      var _React$useState3 = React__namespace.useState(false),
          openState = _React$useState3[0],
          setOpenState = _React$useState3[1];

      var handleRef = useForkRef(ref, inputRefProp);
      React__namespace.useImperativeHandle(handleRef, function () {
        return {
          focus: function focus() {
            displayNode.focus();
          },
          node: inputRef.current,
          value: value
        };
      }, [displayNode, value]);
      React__namespace.useEffect(function () {
        if (autoFocus && displayNode) {
          displayNode.focus();
        }
      }, [autoFocus, displayNode]);
      React__namespace.useEffect(function () {
        if (displayNode) {
          var label = ownerDocument(displayNode).getElementById(labelId);

          if (label) {
            var handler = function handler() {
              if (getSelection().isCollapsed) {
                displayNode.focus();
              }
            };

            label.addEventListener('click', handler);
            return function () {
              label.removeEventListener('click', handler);
            };
          }
        }

        return undefined;
      }, [labelId, displayNode]);

      var update = function update(open, event) {
        if (open) {
          if (onOpen) {
            onOpen(event);
          }
        } else if (onClose) {
          onClose(event);
        }

        if (!isOpenControlled) {
          setMenuMinWidthState(autoWidth ? null : displayNode.clientWidth);
          setOpenState(open);
        }
      };

      var handleMouseDown = function handleMouseDown(event) {
        // Ignore everything but left-click
        if (event.button !== 0) {
          return;
        } // Hijack the default focus behavior.


        event.preventDefault();
        displayNode.focus();
        update(true, event);
      };

      var handleClose = function handleClose(event) {
        update(false, event);
      };

      var childrenArray = React__namespace.Children.toArray(children); // Support autofill.

      var handleChange = function handleChange(event) {
        var index = childrenArray.map(function (child) {
          return child.props.value;
        }).indexOf(event.target.value);

        if (index === -1) {
          return;
        }

        var child = childrenArray[index];
        setValue(child.props.value);

        if (onChange) {
          onChange(event, child);
        }
      };

      var handleItemClick = function handleItemClick(child) {
        return function (event) {
          if (!multiple) {
            update(false, event);
          }

          var newValue;

          if (multiple) {
            newValue = Array.isArray(value) ? value.slice() : [];
            var itemIndex = value.indexOf(child.props.value);

            if (itemIndex === -1) {
              newValue.push(child.props.value);
            } else {
              newValue.splice(itemIndex, 1);
            }
          } else {
            newValue = child.props.value;
          }

          if (child.props.onClick) {
            child.props.onClick(event);
          }

          if (value === newValue) {
            return;
          }

          setValue(newValue);

          if (onChange) {
            event.persist(); // Preact support, target is read only property on a native event.

            Object.defineProperty(event, 'target', {
              writable: true,
              value: {
                value: newValue,
                name: name
              }
            });
            onChange(event, child);
          }
        };
      };

      var handleKeyDown = function handleKeyDown(event) {
        if (!readOnly) {
          var validKeys = [' ', 'ArrowUp', 'ArrowDown', // The native select doesn't respond to enter on MacOS, but it's recommended by
          // https://www.w3.org/TR/wai-aria-practices/examples/listbox/listbox-collapsible.html
          'Enter'];

          if (validKeys.indexOf(event.key) !== -1) {
            event.preventDefault();
            update(true, event);
          }
        }
      };

      var open = displayNode !== null && (isOpenControlled ? openProp : openState);

      var handleBlur = function handleBlur(event) {
        // if open event.stopImmediatePropagation
        if (!open && onBlur) {
          event.persist(); // Preact support, target is read only property on a native event.

          Object.defineProperty(event, 'target', {
            writable: true,
            value: {
              value: value,
              name: name
            }
          });
          onBlur(event);
        }
      };

      delete other['aria-invalid'];
      var display;
      var displaySingle;
      var displayMultiple = [];
      var computeDisplay = false;
      var foundMatch = false; // No need to display any value if the field is empty.

      if (isFilled({
        value: value
      }) || displayEmpty) {
        if (renderValue) {
          display = renderValue(value);
        } else {
          computeDisplay = true;
        }
      }

      var items = childrenArray.map(function (child) {
        if (! /*#__PURE__*/React__namespace.isValidElement(child)) {
          return null;
        }

        if (process.env.NODE_ENV !== 'production') {
          if (reactIs$2.exports.isFragment(child)) {
            console.error(["Material-UI: The Select component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n'));
          }
        }

        var selected;

        if (multiple) {
          if (!Array.isArray(value)) {
            throw new Error(process.env.NODE_ENV !== "production" ? "Material-UI: The `value` prop must be an array when using the `Select` component with `multiple`." : formatMuiErrorMessage(2));
          }

          selected = value.some(function (v) {
            return areEqualValues(v, child.props.value);
          });

          if (selected && computeDisplay) {
            displayMultiple.push(child.props.children);
          }
        } else {
          selected = areEqualValues(value, child.props.value);

          if (selected && computeDisplay) {
            displaySingle = child.props.children;
          }
        }

        if (selected) {
          foundMatch = true;
        }

        return /*#__PURE__*/React__namespace.cloneElement(child, {
          'aria-selected': selected ? 'true' : undefined,
          onClick: handleItemClick(child),
          onKeyUp: function onKeyUp(event) {
            if (event.key === ' ') {
              // otherwise our MenuItems dispatches a click event
              // it's not behavior of the native <option> and causes
              // the select to close immediately since we open on space keydown
              event.preventDefault();
            }

            if (child.props.onKeyUp) {
              child.props.onKeyUp(event);
            }
          },
          role: 'option',
          selected: selected,
          value: undefined,
          // The value is most likely not a valid HTML attribute.
          'data-value': child.props.value // Instead, we provide it as a data attribute.

        });
      });

      if (process.env.NODE_ENV !== 'production') {
        // eslint-disable-next-line react-hooks/rules-of-hooks
        React__namespace.useEffect(function () {
          if (!foundMatch && !multiple && value !== '') {
            var values = childrenArray.map(function (child) {
              return child.props.value;
            });
            console.warn(["Material-UI: You have provided an out-of-range value `".concat(value, "` for the select ").concat(name ? "(name=\"".concat(name, "\") ") : '', "component."), "Consider providing a value that matches one of the available options or ''.", "The available values are ".concat(values.filter(function (x) {
              return x != null;
            }).map(function (x) {
              return "`".concat(x, "`");
            }).join(', ') || '""', ".")].join('\n'));
          }
        }, [foundMatch, childrenArray, multiple, name, value]);
      }

      if (computeDisplay) {
        display = multiple ? displayMultiple.join(', ') : displaySingle;
      } // Avoid performing a layout computation in the render method.


      var menuMinWidth = menuMinWidthState;

      if (!autoWidth && isOpenControlled && displayNode) {
        menuMinWidth = displayNode.clientWidth;
      }

      var tabIndex;

      if (typeof tabIndexProp !== 'undefined') {
        tabIndex = tabIndexProp;
      } else {
        tabIndex = disabled ? null : 0;
      }

      var buttonId = SelectDisplayProps.id || (name ? "mui-component-select-".concat(name) : undefined);
      return /*#__PURE__*/React__namespace.createElement(React__namespace.Fragment, null, /*#__PURE__*/React__namespace.createElement("div", _extends$3({
        className: r$1(classes.root, // TODO v5: merge root and select
        classes.select, classes.selectMenu, classes[variant], className, disabled && classes.disabled),
        ref: setDisplayNode,
        tabIndex: tabIndex,
        role: "button",
        "aria-disabled": disabled ? 'true' : undefined,
        "aria-expanded": open ? 'true' : undefined,
        "aria-haspopup": "listbox",
        "aria-label": ariaLabel,
        "aria-labelledby": [labelId, buttonId].filter(Boolean).join(' ') || undefined,
        onKeyDown: handleKeyDown,
        onMouseDown: disabled || readOnly ? null : handleMouseDown,
        onBlur: handleBlur,
        onFocus: onFocus
      }, SelectDisplayProps, {
        // The id is required for proper a11y
        id: buttonId
      }), isEmpty$1(display) ?
      /*#__PURE__*/
      // eslint-disable-next-line react/no-danger
      React__namespace.createElement("span", {
        dangerouslySetInnerHTML: {
          __html: '&#8203;'
        }
      }) : display), /*#__PURE__*/React__namespace.createElement("input", _extends$3({
        value: Array.isArray(value) ? value.join(',') : value,
        name: name,
        ref: inputRef,
        "aria-hidden": true,
        onChange: handleChange,
        tabIndex: -1,
        className: classes.nativeInput,
        autoFocus: autoFocus
      }, other)), /*#__PURE__*/React__namespace.createElement(IconComponent, {
        className: r$1(classes.icon, classes["icon".concat(capitalize(variant))], open && classes.iconOpen, disabled && classes.disabled)
      }), /*#__PURE__*/React__namespace.createElement(Menu$4, _extends$3({
        id: "menu-".concat(name || ''),
        anchorEl: displayNode,
        open: open,
        onClose: handleClose
      }, MenuProps, {
        MenuListProps: _extends$3({
          'aria-labelledby': labelId,
          role: 'listbox',
          disableListWrap: true
        }, MenuProps.MenuListProps),
        PaperProps: _extends$3({}, MenuProps.PaperProps, {
          style: _extends$3({
            minWidth: menuMinWidth
          }, MenuProps.PaperProps != null ? MenuProps.PaperProps.style : null)
        })
      }), items));
    });
    process.env.NODE_ENV !== "production" ? SelectInput.propTypes = {
      /**
       * @ignore
       */
      'aria-label': re.string,

      /**
       * @ignore
       */
      autoFocus: re.bool,

      /**
       * If `true`, the width of the popover will automatically be set according to the items inside the
       * menu, otherwise it will be at least the width of the select input.
       */
      autoWidth: re.bool,

      /**
       * The option elements to populate the select with.
       * Can be some `<MenuItem>` elements.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object.isRequired,

      /**
       * The CSS class name of the select element.
       */
      className: re.string,

      /**
       * The default element value. Use when the component is not controlled.
       */
      defaultValue: re.any,

      /**
       * If `true`, the select will be disabled.
       */
      disabled: re.bool,

      /**
       * If `true`, the selected item is displayed even if its value is empty.
       */
      displayEmpty: re.bool,

      /**
       * The icon that displays the arrow.
       */
      IconComponent: re.elementType.isRequired,

      /**
       * Imperative handle implementing `{ value: T, node: HTMLElement, focus(): void }`
       * Equivalent to `ref`
       */
      inputRef: refType$1,

      /**
       * The ID of an element that acts as an additional label. The Select will
       * be labelled by the additional label and the selected value.
       */
      labelId: re.string,

      /**
       * Props applied to the [`Menu`](/api/menu/) element.
       */
      MenuProps: re.object,

      /**
       * If `true`, `value` must be an array and the menu will support multiple selections.
       */
      multiple: re.bool,

      /**
       * Name attribute of the `select` or hidden `input` element.
       */
      name: re.string,

      /**
       * @ignore
       */
      onBlur: re.func,

      /**
       * Callback function fired when a menu item is selected.
       *
       * @param {object} event The event source of the callback.
       * You can pull out the new value by accessing `event.target.value` (any).
       * @param {object} [child] The react element that was selected.
       */
      onChange: re.func,

      /**
       * Callback fired when the component requests to be closed.
       * Use in controlled mode (see open).
       *
       * @param {object} event The event source of the callback.
       */
      onClose: re.func,

      /**
       * @ignore
       */
      onFocus: re.func,

      /**
       * Callback fired when the component requests to be opened.
       * Use in controlled mode (see open).
       *
       * @param {object} event The event source of the callback.
       */
      onOpen: re.func,

      /**
       * Control `select` open state.
       */
      open: re.bool,

      /**
       * @ignore
       */
      readOnly: re.bool,

      /**
       * Render the selected value.
       *
       * @param {any} value The `value` provided to the component.
       * @returns {ReactNode}
       */
      renderValue: re.func,

      /**
       * Props applied to the clickable div element.
       */
      SelectDisplayProps: re.object,

      /**
       * @ignore
       */
      tabIndex: re.oneOfType([re.number, re.string]),

      /**
       * @ignore
       */
      type: re.any,

      /**
       * The input value.
       */
      value: re.any,

      /**
       * The variant to use.
       */
      variant: re.oneOf(['standard', 'outlined', 'filled'])
    } : void 0;
    var SelectInput$1 = SelectInput;

    var styles$S = styles$X;

    var _ref$5 = /*#__PURE__*/React__namespace.createElement(Input$1, null);

    var _ref2$3 = /*#__PURE__*/React__namespace.createElement(FilledInput$1, null);

    var Select = /*#__PURE__*/React__namespace.forwardRef(function Select(props, ref) {
      var _props$autoWidth = props.autoWidth,
          autoWidth = _props$autoWidth === void 0 ? false : _props$autoWidth,
          children = props.children,
          classes = props.classes,
          _props$displayEmpty = props.displayEmpty,
          displayEmpty = _props$displayEmpty === void 0 ? false : _props$displayEmpty,
          _props$IconComponent = props.IconComponent,
          IconComponent = _props$IconComponent === void 0 ? ArrowDropDownIcon$1 : _props$IconComponent,
          id = props.id,
          input = props.input,
          inputProps = props.inputProps,
          label = props.label,
          labelId = props.labelId,
          _props$labelWidth = props.labelWidth,
          labelWidth = _props$labelWidth === void 0 ? 0 : _props$labelWidth,
          MenuProps = props.MenuProps,
          _props$multiple = props.multiple,
          multiple = _props$multiple === void 0 ? false : _props$multiple,
          _props$native = props.native,
          native = _props$native === void 0 ? false : _props$native,
          onClose = props.onClose,
          onOpen = props.onOpen,
          open = props.open,
          renderValue = props.renderValue,
          SelectDisplayProps = props.SelectDisplayProps,
          _props$variant = props.variant,
          variantProps = _props$variant === void 0 ? 'standard' : _props$variant,
          other = _objectWithoutProperties(props, ["autoWidth", "children", "classes", "displayEmpty", "IconComponent", "id", "input", "inputProps", "label", "labelId", "labelWidth", "MenuProps", "multiple", "native", "onClose", "onOpen", "open", "renderValue", "SelectDisplayProps", "variant"]);

      var inputComponent = native ? NativeSelectInput$1 : SelectInput$1;
      var muiFormControl = useFormControl();
      var fcs = formControlState({
        props: props,
        muiFormControl: muiFormControl,
        states: ['variant']
      });
      var variant = fcs.variant || variantProps;
      var InputComponent = input || {
        standard: _ref$5,
        outlined: /*#__PURE__*/React__namespace.createElement(OutlinedInput$1, {
          label: label,
          labelWidth: labelWidth
        }),
        filled: _ref2$3
      }[variant];
      return /*#__PURE__*/React__namespace.cloneElement(InputComponent, _extends$3({
        // Most of the logic is implemented in `SelectInput`.
        // The `Select` component is a simple API wrapper to expose something better to play with.
        inputComponent: inputComponent,
        inputProps: _extends$3({
          children: children,
          IconComponent: IconComponent,
          variant: variant,
          type: undefined,
          // We render a select. We can ignore the type provided by the `Input`.
          multiple: multiple
        }, native ? {
          id: id
        } : {
          autoWidth: autoWidth,
          displayEmpty: displayEmpty,
          labelId: labelId,
          MenuProps: MenuProps,
          onClose: onClose,
          onOpen: onOpen,
          open: open,
          renderValue: renderValue,
          SelectDisplayProps: _extends$3({
            id: id
          }, SelectDisplayProps)
        }, inputProps, {
          classes: inputProps ? mergeClasses({
            baseClasses: classes,
            newClasses: inputProps.classes,
            Component: Select
          }) : classes
        }, input ? input.props.inputProps : {}),
        ref: ref
      }, other));
    });
    process.env.NODE_ENV !== "production" ? Select.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * If `true`, the width of the popover will automatically be set according to the items inside the
       * menu, otherwise it will be at least the width of the select input.
       */
      autoWidth: re.bool,

      /**
       * The option elements to populate the select with.
       * Can be some `MenuItem` when `native` is false and `option` when `native` is true.
       *
       * ⚠️The `MenuItem` elements **must** be direct descendants when `native` is false.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * The default element value. Use when the component is not controlled.
       */
      defaultValue: re.any,

      /**
       * If `true`, a value is displayed even if no items are selected.
       *
       * In order to display a meaningful value, a function should be passed to the `renderValue` prop which returns the value to be displayed when no items are selected.
       * You can only use it when the `native` prop is `false` (default).
       */
      displayEmpty: re.bool,

      /**
       * The icon that displays the arrow.
       */
      IconComponent: re.elementType,

      /**
       * The `id` of the wrapper element or the `select` element when `native`.
       */
      id: re.string,

      /**
       * An `Input` element; does not have to be a material-ui specific `Input`.
       */
      input: re.element,

      /**
       * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
       * When `native` is `true`, the attributes are applied on the `select` element.
       */
      inputProps: re.object,

      /**
       * See [OutlinedInput#label](/api/outlined-input/#props)
       */
      label: re.node,

      /**
       * The ID of an element that acts as an additional label. The Select will
       * be labelled by the additional label and the selected value.
       */
      labelId: re.string,

      /**
       * See [OutlinedInput#label](/api/outlined-input/#props)
       */
      labelWidth: re.number,

      /**
       * Props applied to the [`Menu`](/api/menu/) element.
       */
      MenuProps: re.object,

      /**
       * If `true`, `value` must be an array and the menu will support multiple selections.
       */
      multiple: re.bool,

      /**
       * If `true`, the component will be using a native `select` element.
       */
      native: re.bool,

      /**
       * Callback function fired when a menu item is selected.
       *
       * @param {object} event The event source of the callback.
       * You can pull out the new value by accessing `event.target.value` (any).
       * @param {object} [child] The react element that was selected when `native` is `false` (default).
       */
      onChange: re.func,

      /**
       * Callback fired when the component requests to be closed.
       * Use in controlled mode (see open).
       *
       * @param {object} event The event source of the callback.
       */
      onClose: re.func,

      /**
       * Callback fired when the component requests to be opened.
       * Use in controlled mode (see open).
       *
       * @param {object} event The event source of the callback.
       */
      onOpen: re.func,

      /**
       * Control `select` open state.
       * You can only use it when the `native` prop is `false` (default).
       */
      open: re.bool,

      /**
       * Render the selected value.
       * You can only use it when the `native` prop is `false` (default).
       *
       * @param {any} value The `value` provided to the component.
       * @returns {ReactNode}
       */
      renderValue: re.func,

      /**
       * Props applied to the clickable div element.
       */
      SelectDisplayProps: re.object,

      /**
       * The input value. Providing an empty string will select no options.
       * This prop is required when the `native` prop is `false` (default).
       * Set to an empty string `''` if you don't want any of the available options to be selected.
       *
       * If the value is an object it must have reference equality with the option in order to be selected.
       * If the value is not an object, the string representation must match with the string representation of the option in order to be selected.
       */
      value: re.any,

      /**
       * The variant to use.
       */
      variant: re.oneOf(['filled', 'outlined', 'standard'])
    } : void 0;
    Select.muiName = 'Select';
    var Select$1 = withStyles(styles$S, {
      name: 'MuiSelect'
    })(Select);

    var styles$R = function styles(theme) {
      return {
        thumb: {
          '&$open': {
            '& $offset': {
              transform: 'scale(1) translateY(-10px)'
            }
          }
        },
        open: {},
        offset: _extends$3({
          zIndex: 1
        }, theme.typography.body2, {
          fontSize: theme.typography.pxToRem(12),
          lineHeight: 1.2,
          transition: theme.transitions.create(['transform'], {
            duration: theme.transitions.duration.shortest
          }),
          top: -34,
          transformOrigin: 'bottom center',
          transform: 'scale(0)',
          position: 'absolute'
        }),
        circle: {
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          width: 32,
          height: 32,
          borderRadius: '50% 50% 50% 0',
          backgroundColor: 'currentColor',
          transform: 'rotate(-45deg)'
        },
        label: {
          color: theme.palette.primary.contrastText,
          transform: 'rotate(45deg)'
        }
      };
    };
    /**
     * @ignore - internal component.
     */


    function ValueLabel(props) {
      var children = props.children,
          classes = props.classes,
          className = props.className,
          open = props.open,
          value = props.value,
          valueLabelDisplay = props.valueLabelDisplay;

      if (valueLabelDisplay === 'off') {
        return children;
      }

      return /*#__PURE__*/React__namespace.cloneElement(children, {
        className: r$1(children.props.className, (open || valueLabelDisplay === 'on') && classes.open, classes.thumb)
      }, /*#__PURE__*/React__namespace.createElement("span", {
        className: r$1(classes.offset, className)
      }, /*#__PURE__*/React__namespace.createElement("span", {
        className: classes.circle
      }, /*#__PURE__*/React__namespace.createElement("span", {
        className: classes.label
      }, value))));
    }

    var ValueLabel$1 = withStyles(styles$R, {
      name: 'PrivateValueLabel'
    })(ValueLabel);

    function asc(a, b) {
      return a - b;
    }

    function clamp$4(value, min, max) {
      return Math.min(Math.max(min, value), max);
    }

    function findClosest(values, currentValue) {
      var _values$reduce = values.reduce(function (acc, value, index) {
        var distance = Math.abs(currentValue - value);

        if (acc === null || distance < acc.distance || distance === acc.distance) {
          return {
            distance: distance,
            index: index
          };
        }

        return acc;
      }, null),
          closestIndex = _values$reduce.index;

      return closestIndex;
    }

    function trackFinger(event, touchId) {
      if (touchId.current !== undefined && event.changedTouches) {
        for (var i = 0; i < event.changedTouches.length; i += 1) {
          var touch = event.changedTouches[i];

          if (touch.identifier === touchId.current) {
            return {
              x: touch.clientX,
              y: touch.clientY
            };
          }
        }

        return false;
      }

      return {
        x: event.clientX,
        y: event.clientY
      };
    }

    function valueToPercent(value, min, max) {
      return (value - min) * 100 / (max - min);
    }

    function percentToValue(percent, min, max) {
      return (max - min) * percent + min;
    }

    function getDecimalPrecision$1(num) {
      // This handles the case when num is very small (0.00000001), js will turn this into 1e-8.
      // When num is bigger than 1 or less than -1 it won't get converted to this notation so it's fine.
      if (Math.abs(num) < 1) {
        var parts = num.toExponential().split('e-');
        var matissaDecimalPart = parts[0].split('.')[1];
        return (matissaDecimalPart ? matissaDecimalPart.length : 0) + parseInt(parts[1], 10);
      }

      var decimalPart = num.toString().split('.')[1];
      return decimalPart ? decimalPart.length : 0;
    }

    function roundValueToStep(value, step, min) {
      var nearest = Math.round((value - min) / step) * step + min;
      return Number(nearest.toFixed(getDecimalPrecision$1(step)));
    }

    function setValueIndex(_ref) {
      var values = _ref.values,
          source = _ref.source,
          newValue = _ref.newValue,
          index = _ref.index;

      // Performance shortcut
      if (values[index] === newValue) {
        return source;
      }

      var output = values.slice();
      output[index] = newValue;
      return output;
    }

    function focusThumb(_ref2) {
      var sliderRef = _ref2.sliderRef,
          activeIndex = _ref2.activeIndex,
          setActive = _ref2.setActive;

      if (!sliderRef.current.contains(document.activeElement) || Number(document.activeElement.getAttribute('data-index')) !== activeIndex) {
        sliderRef.current.querySelector("[role=\"slider\"][data-index=\"".concat(activeIndex, "\"]")).focus();
      }

      if (setActive) {
        setActive(activeIndex);
      }
    }

    var axisProps = {
      horizontal: {
        offset: function offset(percent) {
          return {
            left: "".concat(percent, "%")
          };
        },
        leap: function leap(percent) {
          return {
            width: "".concat(percent, "%")
          };
        }
      },
      'horizontal-reverse': {
        offset: function offset(percent) {
          return {
            right: "".concat(percent, "%")
          };
        },
        leap: function leap(percent) {
          return {
            width: "".concat(percent, "%")
          };
        }
      },
      vertical: {
        offset: function offset(percent) {
          return {
            bottom: "".concat(percent, "%")
          };
        },
        leap: function leap(percent) {
          return {
            height: "".concat(percent, "%")
          };
        }
      }
    };

    var Identity = function Identity(x) {
      return x;
    };

    var styles$Q = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          height: 2,
          width: '100%',
          boxSizing: 'content-box',
          padding: '13px 0',
          display: 'inline-block',
          position: 'relative',
          cursor: 'pointer',
          touchAction: 'none',
          color: theme.palette.primary.main,
          WebkitTapHighlightColor: 'transparent',
          '&$disabled': {
            pointerEvents: 'none',
            cursor: 'default',
            color: theme.palette.grey[400]
          },
          '&$vertical': {
            width: 2,
            height: '100%',
            padding: '0 13px'
          },
          // The primary input mechanism of the device includes a pointing device of limited accuracy.
          '@media (pointer: coarse)': {
            // Reach 42px touch target, about ~8mm on screen.
            padding: '20px 0',
            '&$vertical': {
              padding: '0 20px'
            }
          },
          '@media print': {
            colorAdjust: 'exact'
          }
        },

        /* Styles applied to the root element if `color="primary"`. */
        colorPrimary: {// TODO v5: move the style here
        },

        /* Styles applied to the root element if `color="secondary"`. */
        colorSecondary: {
          color: theme.palette.secondary.main
        },

        /* Styles applied to the root element if `marks` is provided with at least one label. */
        marked: {
          marginBottom: 20,
          '&$vertical': {
            marginBottom: 'auto',
            marginRight: 20
          }
        },

        /* Pseudo-class applied to the root element if `orientation="vertical"`. */
        vertical: {},

        /* Pseudo-class applied to the root and thumb element if `disabled={true}`. */
        disabled: {},

        /* Styles applied to the rail element. */
        rail: {
          display: 'block',
          position: 'absolute',
          width: '100%',
          height: 2,
          borderRadius: 1,
          backgroundColor: 'currentColor',
          opacity: 0.38,
          '$vertical &': {
            height: '100%',
            width: 2
          }
        },

        /* Styles applied to the track element. */
        track: {
          display: 'block',
          position: 'absolute',
          height: 2,
          borderRadius: 1,
          backgroundColor: 'currentColor',
          '$vertical &': {
            width: 2
          }
        },

        /* Styles applied to the track element if `track={false}`. */
        trackFalse: {
          '& $track': {
            display: 'none'
          }
        },

        /* Styles applied to the track element if `track="inverted"`. */
        trackInverted: {
          '& $track': {
            backgroundColor: // Same logic as the LinearProgress track color
            theme.palette.type === 'light' ? lighten(theme.palette.primary.main, 0.62) : darken(theme.palette.primary.main, 0.5)
          },
          '& $rail': {
            opacity: 1
          }
        },

        /* Styles applied to the thumb element. */
        thumb: {
          position: 'absolute',
          width: 12,
          height: 12,
          marginLeft: -6,
          marginTop: -5,
          boxSizing: 'border-box',
          borderRadius: '50%',
          outline: 0,
          backgroundColor: 'currentColor',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          transition: theme.transitions.create(['box-shadow'], {
            duration: theme.transitions.duration.shortest
          }),
          '&::after': {
            position: 'absolute',
            content: '""',
            borderRadius: '50%',
            // reach 42px hit target (2 * 15 + thumb diameter)
            left: -15,
            top: -15,
            right: -15,
            bottom: -15
          },
          '&$focusVisible,&:hover': {
            boxShadow: "0px 0px 0px 8px ".concat(alpha(theme.palette.primary.main, 0.16)),
            '@media (hover: none)': {
              boxShadow: 'none'
            }
          },
          '&$active': {
            boxShadow: "0px 0px 0px 14px ".concat(alpha(theme.palette.primary.main, 0.16))
          },
          '&$disabled': {
            width: 8,
            height: 8,
            marginLeft: -4,
            marginTop: -3,
            '&:hover': {
              boxShadow: 'none'
            }
          },
          '$vertical &': {
            marginLeft: -5,
            marginBottom: -6
          },
          '$vertical &$disabled': {
            marginLeft: -3,
            marginBottom: -4
          }
        },

        /* Styles applied to the thumb element if `color="primary"`. */
        thumbColorPrimary: {// TODO v5: move the style here
        },

        /* Styles applied to the thumb element if `color="secondary"`. */
        thumbColorSecondary: {
          '&$focusVisible,&:hover': {
            boxShadow: "0px 0px 0px 8px ".concat(alpha(theme.palette.secondary.main, 0.16))
          },
          '&$active': {
            boxShadow: "0px 0px 0px 14px ".concat(alpha(theme.palette.secondary.main, 0.16))
          }
        },

        /* Pseudo-class applied to the thumb element if it's active. */
        active: {},

        /* Pseudo-class applied to the thumb element if keyboard focused. */
        focusVisible: {},

        /* Styles applied to the thumb label element. */
        valueLabel: {
          // IE 11 centering bug, to remove from the customization demos once no longer supported
          left: 'calc(-50% - 4px)'
        },

        /* Styles applied to the mark element. */
        mark: {
          position: 'absolute',
          width: 2,
          height: 2,
          borderRadius: 1,
          backgroundColor: 'currentColor'
        },

        /* Styles applied to the mark element if active (depending on the value). */
        markActive: {
          backgroundColor: theme.palette.background.paper,
          opacity: 0.8
        },

        /* Styles applied to the mark label element. */
        markLabel: _extends$3({}, theme.typography.body2, {
          color: theme.palette.text.secondary,
          position: 'absolute',
          top: 26,
          transform: 'translateX(-50%)',
          whiteSpace: 'nowrap',
          '$vertical &': {
            top: 'auto',
            left: 26,
            transform: 'translateY(50%)'
          },
          '@media (pointer: coarse)': {
            top: 40,
            '$vertical &': {
              left: 31
            }
          }
        }),

        /* Styles applied to the mark label element if active (depending on the value). */
        markLabelActive: {
          color: theme.palette.text.primary
        }
      };
    };
    var Slider = /*#__PURE__*/React__namespace.forwardRef(function Slider(props, ref) {
      var ariaLabel = props['aria-label'],
          ariaLabelledby = props['aria-labelledby'],
          ariaValuetext = props['aria-valuetext'],
          classes = props.classes,
          className = props.className,
          _props$color = props.color,
          color = _props$color === void 0 ? 'primary' : _props$color,
          _props$component = props.component,
          Component = _props$component === void 0 ? 'span' : _props$component,
          defaultValue = props.defaultValue,
          _props$disabled = props.disabled,
          disabled = _props$disabled === void 0 ? false : _props$disabled,
          getAriaLabel = props.getAriaLabel,
          getAriaValueText = props.getAriaValueText,
          _props$marks = props.marks,
          marksProp = _props$marks === void 0 ? false : _props$marks,
          _props$max = props.max,
          max = _props$max === void 0 ? 100 : _props$max,
          _props$min = props.min,
          min = _props$min === void 0 ? 0 : _props$min,
          name = props.name,
          onChange = props.onChange,
          onChangeCommitted = props.onChangeCommitted,
          onMouseDown = props.onMouseDown,
          _props$orientation = props.orientation,
          orientation = _props$orientation === void 0 ? 'horizontal' : _props$orientation,
          _props$scale = props.scale,
          scale = _props$scale === void 0 ? Identity : _props$scale,
          _props$step = props.step,
          step = _props$step === void 0 ? 1 : _props$step,
          _props$ThumbComponent = props.ThumbComponent,
          ThumbComponent = _props$ThumbComponent === void 0 ? 'span' : _props$ThumbComponent,
          _props$track = props.track,
          track = _props$track === void 0 ? 'normal' : _props$track,
          valueProp = props.value,
          _props$ValueLabelComp = props.ValueLabelComponent,
          ValueLabelComponent = _props$ValueLabelComp === void 0 ? ValueLabel$1 : _props$ValueLabelComp,
          _props$valueLabelDisp = props.valueLabelDisplay,
          valueLabelDisplay = _props$valueLabelDisp === void 0 ? 'off' : _props$valueLabelDisp,
          _props$valueLabelForm = props.valueLabelFormat,
          valueLabelFormat = _props$valueLabelForm === void 0 ? Identity : _props$valueLabelForm,
          other = _objectWithoutProperties(props, ["aria-label", "aria-labelledby", "aria-valuetext", "classes", "className", "color", "component", "defaultValue", "disabled", "getAriaLabel", "getAriaValueText", "marks", "max", "min", "name", "onChange", "onChangeCommitted", "onMouseDown", "orientation", "scale", "step", "ThumbComponent", "track", "value", "ValueLabelComponent", "valueLabelDisplay", "valueLabelFormat"]);

      var theme = useTheme();
      var touchId = React__namespace.useRef(); // We can't use the :active browser pseudo-classes.
      // - The active state isn't triggered when clicking on the rail.
      // - The active state isn't transfered when inversing a range slider.

      var _React$useState = React__namespace.useState(-1),
          active = _React$useState[0],
          setActive = _React$useState[1];

      var _React$useState2 = React__namespace.useState(-1),
          open = _React$useState2[0],
          setOpen = _React$useState2[1];

      var _useControlled = useControlled({
        controlled: valueProp,
        default: defaultValue,
        name: 'Slider'
      }),
          _useControlled2 = _slicedToArray(_useControlled, 2),
          valueDerived = _useControlled2[0],
          setValueState = _useControlled2[1];

      var range = Array.isArray(valueDerived);
      var values = range ? valueDerived.slice().sort(asc) : [valueDerived];
      values = values.map(function (value) {
        return clamp$4(value, min, max);
      });
      var marks = marksProp === true && step !== null ? _toConsumableArray(Array(Math.floor((max - min) / step) + 1)).map(function (_, index) {
        return {
          value: min + step * index
        };
      }) : marksProp || [];

      var _useIsFocusVisible = useIsFocusVisible(),
          isFocusVisible = _useIsFocusVisible.isFocusVisible,
          onBlurVisible = _useIsFocusVisible.onBlurVisible,
          focusVisibleRef = _useIsFocusVisible.ref;

      var _React$useState3 = React__namespace.useState(-1),
          focusVisible = _React$useState3[0],
          setFocusVisible = _React$useState3[1];

      var sliderRef = React__namespace.useRef();
      var handleFocusRef = useForkRef(focusVisibleRef, sliderRef);
      var handleRef = useForkRef(ref, handleFocusRef);
      var handleFocus = useEventCallback(function (event) {
        var index = Number(event.currentTarget.getAttribute('data-index'));

        if (isFocusVisible(event)) {
          setFocusVisible(index);
        }

        setOpen(index);
      });
      var handleBlur = useEventCallback(function () {
        if (focusVisible !== -1) {
          setFocusVisible(-1);
          onBlurVisible();
        }

        setOpen(-1);
      });
      var handleMouseOver = useEventCallback(function (event) {
        var index = Number(event.currentTarget.getAttribute('data-index'));
        setOpen(index);
      });
      var handleMouseLeave = useEventCallback(function () {
        setOpen(-1);
      });
      var isRtl = theme.direction === 'rtl';
      var handleKeyDown = useEventCallback(function (event) {
        var index = Number(event.currentTarget.getAttribute('data-index'));
        var value = values[index];
        var tenPercents = (max - min) / 10;
        var marksValues = marks.map(function (mark) {
          return mark.value;
        });
        var marksIndex = marksValues.indexOf(value);
        var newValue;
        var increaseKey = isRtl ? 'ArrowLeft' : 'ArrowRight';
        var decreaseKey = isRtl ? 'ArrowRight' : 'ArrowLeft';

        switch (event.key) {
          case 'Home':
            newValue = min;
            break;

          case 'End':
            newValue = max;
            break;

          case 'PageUp':
            if (step) {
              newValue = value + tenPercents;
            }

            break;

          case 'PageDown':
            if (step) {
              newValue = value - tenPercents;
            }

            break;

          case increaseKey:
          case 'ArrowUp':
            if (step) {
              newValue = value + step;
            } else {
              newValue = marksValues[marksIndex + 1] || marksValues[marksValues.length - 1];
            }

            break;

          case decreaseKey:
          case 'ArrowDown':
            if (step) {
              newValue = value - step;
            } else {
              newValue = marksValues[marksIndex - 1] || marksValues[0];
            }

            break;

          default:
            return;
        } // Prevent scroll of the page


        event.preventDefault();

        if (step) {
          newValue = roundValueToStep(newValue, step, min);
        }

        newValue = clamp$4(newValue, min, max);

        if (range) {
          var previousValue = newValue;
          newValue = setValueIndex({
            values: values,
            source: valueDerived,
            newValue: newValue,
            index: index
          }).sort(asc);
          focusThumb({
            sliderRef: sliderRef,
            activeIndex: newValue.indexOf(previousValue)
          });
        }

        setValueState(newValue);
        setFocusVisible(index);

        if (onChange) {
          onChange(event, newValue);
        }

        if (onChangeCommitted) {
          onChangeCommitted(event, newValue);
        }
      });
      var previousIndex = React__namespace.useRef();
      var axis = orientation;

      if (isRtl && orientation !== "vertical") {
        axis += '-reverse';
      }

      var getFingerNewValue = function getFingerNewValue(_ref3) {
        var finger = _ref3.finger,
            _ref3$move = _ref3.move,
            move = _ref3$move === void 0 ? false : _ref3$move,
            values2 = _ref3.values,
            source = _ref3.source;
        var slider = sliderRef.current;

        var _slider$getBoundingCl = slider.getBoundingClientRect(),
            width = _slider$getBoundingCl.width,
            height = _slider$getBoundingCl.height,
            bottom = _slider$getBoundingCl.bottom,
            left = _slider$getBoundingCl.left;

        var percent;

        if (axis.indexOf('vertical') === 0) {
          percent = (bottom - finger.y) / height;
        } else {
          percent = (finger.x - left) / width;
        }

        if (axis.indexOf('-reverse') !== -1) {
          percent = 1 - percent;
        }

        var newValue;
        newValue = percentToValue(percent, min, max);

        if (step) {
          newValue = roundValueToStep(newValue, step, min);
        } else {
          var marksValues = marks.map(function (mark) {
            return mark.value;
          });
          var closestIndex = findClosest(marksValues, newValue);
          newValue = marksValues[closestIndex];
        }

        newValue = clamp$4(newValue, min, max);
        var activeIndex = 0;

        if (range) {
          if (!move) {
            activeIndex = findClosest(values2, newValue);
          } else {
            activeIndex = previousIndex.current;
          }

          var previousValue = newValue;
          newValue = setValueIndex({
            values: values2,
            source: source,
            newValue: newValue,
            index: activeIndex
          }).sort(asc);
          activeIndex = newValue.indexOf(previousValue);
          previousIndex.current = activeIndex;
        }

        return {
          newValue: newValue,
          activeIndex: activeIndex
        };
      };

      var handleTouchMove = useEventCallback(function (event) {
        var finger = trackFinger(event, touchId);

        if (!finger) {
          return;
        }

        var _getFingerNewValue = getFingerNewValue({
          finger: finger,
          move: true,
          values: values,
          source: valueDerived
        }),
            newValue = _getFingerNewValue.newValue,
            activeIndex = _getFingerNewValue.activeIndex;

        focusThumb({
          sliderRef: sliderRef,
          activeIndex: activeIndex,
          setActive: setActive
        });
        setValueState(newValue);

        if (onChange) {
          onChange(event, newValue);
        }
      });
      var handleTouchEnd = useEventCallback(function (event) {
        var finger = trackFinger(event, touchId);

        if (!finger) {
          return;
        }

        var _getFingerNewValue2 = getFingerNewValue({
          finger: finger,
          values: values,
          source: valueDerived
        }),
            newValue = _getFingerNewValue2.newValue;

        setActive(-1);

        if (event.type === 'touchend') {
          setOpen(-1);
        }

        if (onChangeCommitted) {
          onChangeCommitted(event, newValue);
        }

        touchId.current = undefined;
        var doc = ownerDocument(sliderRef.current);
        doc.removeEventListener('mousemove', handleTouchMove);
        doc.removeEventListener('mouseup', handleTouchEnd);
        doc.removeEventListener('touchmove', handleTouchMove);
        doc.removeEventListener('touchend', handleTouchEnd);
      });
      var handleTouchStart = useEventCallback(function (event) {
        // Workaround as Safari has partial support for touchAction: 'none'.
        event.preventDefault();
        var touch = event.changedTouches[0];

        if (touch != null) {
          // A number that uniquely identifies the current finger in the touch session.
          touchId.current = touch.identifier;
        }

        var finger = trackFinger(event, touchId);

        var _getFingerNewValue3 = getFingerNewValue({
          finger: finger,
          values: values,
          source: valueDerived
        }),
            newValue = _getFingerNewValue3.newValue,
            activeIndex = _getFingerNewValue3.activeIndex;

        focusThumb({
          sliderRef: sliderRef,
          activeIndex: activeIndex,
          setActive: setActive
        });
        setValueState(newValue);

        if (onChange) {
          onChange(event, newValue);
        }

        var doc = ownerDocument(sliderRef.current);
        doc.addEventListener('touchmove', handleTouchMove);
        doc.addEventListener('touchend', handleTouchEnd);
      });
      React__namespace.useEffect(function () {
        var slider = sliderRef.current;
        slider.addEventListener('touchstart', handleTouchStart);
        var doc = ownerDocument(slider);
        return function () {
          slider.removeEventListener('touchstart', handleTouchStart);
          doc.removeEventListener('mousemove', handleTouchMove);
          doc.removeEventListener('mouseup', handleTouchEnd);
          doc.removeEventListener('touchmove', handleTouchMove);
          doc.removeEventListener('touchend', handleTouchEnd);
        };
      }, [handleTouchEnd, handleTouchMove, handleTouchStart]);
      var handleMouseDown = useEventCallback(function (event) {
        if (onMouseDown) {
          onMouseDown(event);
        }

        event.preventDefault();
        var finger = trackFinger(event, touchId);

        var _getFingerNewValue4 = getFingerNewValue({
          finger: finger,
          values: values,
          source: valueDerived
        }),
            newValue = _getFingerNewValue4.newValue,
            activeIndex = _getFingerNewValue4.activeIndex;

        focusThumb({
          sliderRef: sliderRef,
          activeIndex: activeIndex,
          setActive: setActive
        });
        setValueState(newValue);

        if (onChange) {
          onChange(event, newValue);
        }

        var doc = ownerDocument(sliderRef.current);
        doc.addEventListener('mousemove', handleTouchMove);
        doc.addEventListener('mouseup', handleTouchEnd);
      });
      var trackOffset = valueToPercent(range ? values[0] : min, min, max);
      var trackLeap = valueToPercent(values[values.length - 1], min, max) - trackOffset;

      var trackStyle = _extends$3({}, axisProps[axis].offset(trackOffset), axisProps[axis].leap(trackLeap));

      return /*#__PURE__*/React__namespace.createElement(Component, _extends$3({
        ref: handleRef,
        className: r$1(classes.root, classes["color".concat(capitalize(color))], className, disabled && classes.disabled, marks.length > 0 && marks.some(function (mark) {
          return mark.label;
        }) && classes.marked, track === false && classes.trackFalse, orientation === 'vertical' && classes.vertical, track === 'inverted' && classes.trackInverted),
        onMouseDown: handleMouseDown
      }, other), /*#__PURE__*/React__namespace.createElement("span", {
        className: classes.rail
      }), /*#__PURE__*/React__namespace.createElement("span", {
        className: classes.track,
        style: trackStyle
      }), /*#__PURE__*/React__namespace.createElement("input", {
        value: values.join(','),
        name: name,
        type: "hidden"
      }), marks.map(function (mark, index) {
        var percent = valueToPercent(mark.value, min, max);
        var style = axisProps[axis].offset(percent);
        var markActive;

        if (track === false) {
          markActive = values.indexOf(mark.value) !== -1;
        } else {
          markActive = track === 'normal' && (range ? mark.value >= values[0] && mark.value <= values[values.length - 1] : mark.value <= values[0]) || track === 'inverted' && (range ? mark.value <= values[0] || mark.value >= values[values.length - 1] : mark.value >= values[0]);
        }

        return /*#__PURE__*/React__namespace.createElement(React__namespace.Fragment, {
          key: mark.value
        }, /*#__PURE__*/React__namespace.createElement("span", {
          style: style,
          "data-index": index,
          className: r$1(classes.mark, markActive && classes.markActive)
        }), mark.label != null ? /*#__PURE__*/React__namespace.createElement("span", {
          "aria-hidden": true,
          "data-index": index,
          style: style,
          className: r$1(classes.markLabel, markActive && classes.markLabelActive)
        }, mark.label) : null);
      }), values.map(function (value, index) {
        var percent = valueToPercent(value, min, max);
        var style = axisProps[axis].offset(percent);
        return /*#__PURE__*/React__namespace.createElement(ValueLabelComponent, {
          key: index,
          valueLabelFormat: valueLabelFormat,
          valueLabelDisplay: valueLabelDisplay,
          className: classes.valueLabel,
          value: typeof valueLabelFormat === 'function' ? valueLabelFormat(scale(value), index) : valueLabelFormat,
          index: index,
          open: open === index || active === index || valueLabelDisplay === 'on',
          disabled: disabled
        }, /*#__PURE__*/React__namespace.createElement(ThumbComponent, {
          className: r$1(classes.thumb, classes["thumbColor".concat(capitalize(color))], active === index && classes.active, disabled && classes.disabled, focusVisible === index && classes.focusVisible),
          tabIndex: disabled ? null : 0,
          role: "slider",
          style: style,
          "data-index": index,
          "aria-label": getAriaLabel ? getAriaLabel(index) : ariaLabel,
          "aria-labelledby": ariaLabelledby,
          "aria-orientation": orientation,
          "aria-valuemax": scale(max),
          "aria-valuemin": scale(min),
          "aria-valuenow": scale(value),
          "aria-valuetext": getAriaValueText ? getAriaValueText(scale(value), index) : ariaValuetext,
          onKeyDown: handleKeyDown,
          onFocus: handleFocus,
          onBlur: handleBlur,
          onMouseOver: handleMouseOver,
          onMouseLeave: handleMouseLeave
        }));
      }));
    });
    process.env.NODE_ENV !== "production" ? Slider.propTypes = {
      /**
       * The label of the slider.
       */
      'aria-label': chainPropTypes$1(re.string, function (props) {
        var range = Array.isArray(props.value || props.defaultValue);

        if (range && props['aria-label'] != null) {
          return new Error('Material-UI: You need to use the `getAriaLabel` prop instead of `aria-label` when using a range slider.');
        }

        return null;
      }),

      /**
       * The id of the element containing a label for the slider.
       */
      'aria-labelledby': re.string,

      /**
       * A string value that provides a user-friendly name for the current value of the slider.
       */
      'aria-valuetext': chainPropTypes$1(re.string, function (props) {
        var range = Array.isArray(props.value || props.defaultValue);

        if (range && props['aria-valuetext'] != null) {
          return new Error('Material-UI: You need to use the `getAriaValueText` prop instead of `aria-valuetext` when using a range slider.');
        }

        return null;
      }),

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object.isRequired,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * The color of the component. It supports those theme colors that make sense for this component.
       */
      color: re.oneOf(['primary', 'secondary']),

      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: re
      /* @typescript-to-proptypes-ignore */
      .elementType,

      /**
       * The default element value. Use when the component is not controlled.
       */
      defaultValue: re.oneOfType([re.number, re.arrayOf(re.number)]),

      /**
       * If `true`, the slider will be disabled.
       */
      disabled: re.bool,

      /**
       * Accepts a function which returns a string value that provides a user-friendly name for the thumb labels of the slider.
       *
       * @param {number} index The thumb label's index to format.
       * @returns {string}
       */
      getAriaLabel: re.func,

      /**
       * Accepts a function which returns a string value that provides a user-friendly name for the current value of the slider.
       *
       * @param {number} value The thumb label's value to format.
       * @param {number} index The thumb label's index to format.
       * @returns {string}
       */
      getAriaValueText: re.func,

      /**
       * Marks indicate predetermined values to which the user can move the slider.
       * If `true` the marks will be spaced according the value of the `step` prop.
       * If an array, it should contain objects with `value` and an optional `label` keys.
       */
      marks: re.oneOfType([re.bool, re.array]),

      /**
       * The maximum allowed value of the slider.
       * Should not be equal to min.
       */
      max: re.number,

      /**
       * The minimum allowed value of the slider.
       * Should not be equal to max.
       */
      min: re.number,

      /**
       * Name attribute of the hidden `input` element.
       */
      name: re.string,

      /**
       * Callback function that is fired when the slider's value changed.
       *
       * @param {object} event The event source of the callback.
       * @param {number | number[]} value The new value.
       */
      onChange: re.func,

      /**
       * Callback function that is fired when the `mouseup` is triggered.
       *
       * @param {object} event The event source of the callback.
       * @param {number | number[]} value The new value.
       */
      onChangeCommitted: re.func,

      /**
       * @ignore
       */
      onMouseDown: re.func,

      /**
       * The slider orientation.
       */
      orientation: re.oneOf(['horizontal', 'vertical']),

      /**
       * A transformation function, to change the scale of the slider.
       */
      scale: re.func,

      /**
       * The granularity with which the slider can step through values. (A "discrete" slider.)
       * The `min` prop serves as the origin for the valid values.
       * We recommend (max - min) to be evenly divisible by the step.
       *
       * When step is `null`, the thumb can only be slid onto marks provided with the `marks` prop.
       */
      step: re.number,

      /**
       * The component used to display the value label.
       */
      ThumbComponent: re.elementType,

      /**
       * The track presentation:
       *
       * - `normal` the track will render a bar representing the slider value.
       * - `inverted` the track will render a bar representing the remaining slider value.
       * - `false` the track will render without a bar.
       */
      track: re.oneOf(['normal', false, 'inverted']),

      /**
       * The value of the slider.
       * For ranged sliders, provide an array with two values.
       */
      value: re.oneOfType([re.number, re.arrayOf(re.number)]),

      /**
       * The value label component.
       */
      ValueLabelComponent: re.elementType,

      /**
       * Controls when the value label is displayed:
       *
       * - `auto` the value label will display when the thumb is hovered or focused.
       * - `on` will display persistently.
       * - `off` will never display.
       */
      valueLabelDisplay: re.oneOf(['on', 'auto', 'off']),

      /**
       * The format function the value label's value.
       *
       * When a function is provided, it should have the following signature:
       *
       * - {number} value The value label's value to format
       * - {number} index The value label's index to format
       */
      valueLabelFormat: re.oneOfType([re.string, re.func])
    } : void 0;
    var Slider$1 = withStyles(styles$Q, {
      name: 'MuiSlider'
    })(Slider);

    var styles$P = function styles(theme) {
      var emphasis = theme.palette.type === 'light' ? 0.8 : 0.98;
      var backgroundColor = emphasize(theme.palette.background.default, emphasis);
      return {
        /* Styles applied to the root element. */
        root: _extends$3({}, theme.typography.body2, _defineProperty({
          color: theme.palette.getContrastText(backgroundColor),
          backgroundColor: backgroundColor,
          display: 'flex',
          alignItems: 'center',
          flexWrap: 'wrap',
          padding: '6px 16px',
          borderRadius: theme.shape.borderRadius,
          flexGrow: 1
        }, theme.breakpoints.up('sm'), {
          flexGrow: 'initial',
          minWidth: 288
        })),

        /* Styles applied to the message wrapper element. */
        message: {
          padding: '8px 0'
        },

        /* Styles applied to the action wrapper element if `action` is provided. */
        action: {
          display: 'flex',
          alignItems: 'center',
          marginLeft: 'auto',
          paddingLeft: 16,
          marginRight: -8
        }
      };
    };
    var SnackbarContent = /*#__PURE__*/React__namespace.forwardRef(function SnackbarContent(props, ref) {
      var action = props.action,
          classes = props.classes,
          className = props.className,
          message = props.message,
          _props$role = props.role,
          role = _props$role === void 0 ? 'alert' : _props$role,
          other = _objectWithoutProperties(props, ["action", "classes", "className", "message", "role"]);

      return /*#__PURE__*/React__namespace.createElement(M, _extends$3({
        role: role,
        square: true,
        elevation: 6,
        className: r$1(classes.root, className),
        ref: ref
      }, other), /*#__PURE__*/React__namespace.createElement("div", {
        className: classes.message
      }, message), action ? /*#__PURE__*/React__namespace.createElement("div", {
        className: classes.action
      }, action) : null);
    });
    process.env.NODE_ENV !== "production" ? SnackbarContent.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * The action to display. It renders after the message, at the end of the snackbar.
       */
      action: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * The message to display.
       */
      message: re.node,

      /**
       * The ARIA role attribute of the element.
       */
      role: re.string
    } : void 0;
    var SnackbarContent$1 = withStyles(styles$P, {
      name: 'MuiSnackbarContent'
    })(SnackbarContent);

    var styles$O = function styles(theme) {
      var top1 = {
        top: 8
      };
      var bottom1 = {
        bottom: 8
      };
      var right = {
        justifyContent: 'flex-end'
      };
      var left = {
        justifyContent: 'flex-start'
      };
      var top3 = {
        top: 24
      };
      var bottom3 = {
        bottom: 24
      };
      var right3 = {
        right: 24
      };
      var left3 = {
        left: 24
      };
      var center = {
        left: '50%',
        right: 'auto',
        transform: 'translateX(-50%)'
      };
      return {
        /* Styles applied to the root element. */
        root: {
          zIndex: theme.zIndex.snackbar,
          position: 'fixed',
          display: 'flex',
          left: 8,
          right: 8,
          justifyContent: 'center',
          alignItems: 'center'
        },

        /* Styles applied to the root element if `anchorOrigin={{ 'top', 'center' }}`. */
        anchorOriginTopCenter: _extends$3({}, top1, _defineProperty({}, theme.breakpoints.up('sm'), _extends$3({}, top3, center))),

        /* Styles applied to the root element if `anchorOrigin={{ 'bottom', 'center' }}`. */
        anchorOriginBottomCenter: _extends$3({}, bottom1, _defineProperty({}, theme.breakpoints.up('sm'), _extends$3({}, bottom3, center))),

        /* Styles applied to the root element if `anchorOrigin={{ 'top', 'right' }}`. */
        anchorOriginTopRight: _extends$3({}, top1, right, _defineProperty({}, theme.breakpoints.up('sm'), _extends$3({
          left: 'auto'
        }, top3, right3))),

        /* Styles applied to the root element if `anchorOrigin={{ 'bottom', 'right' }}`. */
        anchorOriginBottomRight: _extends$3({}, bottom1, right, _defineProperty({}, theme.breakpoints.up('sm'), _extends$3({
          left: 'auto'
        }, bottom3, right3))),

        /* Styles applied to the root element if `anchorOrigin={{ 'top', 'left' }}`. */
        anchorOriginTopLeft: _extends$3({}, top1, left, _defineProperty({}, theme.breakpoints.up('sm'), _extends$3({
          right: 'auto'
        }, top3, left3))),

        /* Styles applied to the root element if `anchorOrigin={{ 'bottom', 'left' }}`. */
        anchorOriginBottomLeft: _extends$3({}, bottom1, left, _defineProperty({}, theme.breakpoints.up('sm'), _extends$3({
          right: 'auto'
        }, bottom3, left3)))
      };
    };
    var Snackbar$1 = /*#__PURE__*/React__namespace.forwardRef(function Snackbar(props, ref) {
      var action = props.action,
          _props$anchorOrigin = props.anchorOrigin;
      _props$anchorOrigin = _props$anchorOrigin === void 0 ? {
        vertical: 'bottom',
        horizontal: 'center'
      } : _props$anchorOrigin;

      var vertical = _props$anchorOrigin.vertical,
          horizontal = _props$anchorOrigin.horizontal,
          _props$autoHideDurati = props.autoHideDuration,
          autoHideDuration = _props$autoHideDurati === void 0 ? null : _props$autoHideDurati,
          children = props.children,
          classes = props.classes,
          className = props.className,
          ClickAwayListenerProps = props.ClickAwayListenerProps,
          ContentProps = props.ContentProps,
          _props$disableWindowB = props.disableWindowBlurListener,
          disableWindowBlurListener = _props$disableWindowB === void 0 ? false : _props$disableWindowB,
          message = props.message,
          onClose = props.onClose,
          onEnter = props.onEnter,
          onEntered = props.onEntered,
          onEntering = props.onEntering,
          onExit = props.onExit,
          onExited = props.onExited,
          onExiting = props.onExiting,
          onMouseEnter = props.onMouseEnter,
          onMouseLeave = props.onMouseLeave,
          open = props.open,
          resumeHideDuration = props.resumeHideDuration,
          _props$TransitionComp = props.TransitionComponent,
          TransitionComponent = _props$TransitionComp === void 0 ? k : _props$TransitionComp,
          _props$transitionDura = props.transitionDuration,
          transitionDuration = _props$transitionDura === void 0 ? {
        enter: duration.enteringScreen,
        exit: duration.leavingScreen
      } : _props$transitionDura,
          TransitionProps = props.TransitionProps,
          other = _objectWithoutProperties(props, ["action", "anchorOrigin", "autoHideDuration", "children", "classes", "className", "ClickAwayListenerProps", "ContentProps", "disableWindowBlurListener", "message", "onClose", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "onMouseEnter", "onMouseLeave", "open", "resumeHideDuration", "TransitionComponent", "transitionDuration", "TransitionProps"]);

      var timerAutoHide = React__namespace.useRef();

      var _React$useState = React__namespace.useState(true),
          exited = _React$useState[0],
          setExited = _React$useState[1];

      var handleClose = useEventCallback(function () {
        if (onClose) {
          onClose.apply(void 0, arguments);
        }
      });
      var setAutoHideTimer = useEventCallback(function (autoHideDurationParam) {
        if (!onClose || autoHideDurationParam == null) {
          return;
        }

        clearTimeout(timerAutoHide.current);
        timerAutoHide.current = setTimeout(function () {
          handleClose(null, 'timeout');
        }, autoHideDurationParam);
      });
      React__namespace.useEffect(function () {
        if (open) {
          setAutoHideTimer(autoHideDuration);
        }

        return function () {
          clearTimeout(timerAutoHide.current);
        };
      }, [open, autoHideDuration, setAutoHideTimer]); // Pause the timer when the user is interacting with the Snackbar
      // or when the user hide the window.

      var handlePause = function handlePause() {
        clearTimeout(timerAutoHide.current);
      }; // Restart the timer when the user is no longer interacting with the Snackbar
      // or when the window is shown back.


      var handleResume = React__namespace.useCallback(function () {
        if (autoHideDuration != null) {
          setAutoHideTimer(resumeHideDuration != null ? resumeHideDuration : autoHideDuration * 0.5);
        }
      }, [autoHideDuration, resumeHideDuration, setAutoHideTimer]);

      var handleMouseEnter = function handleMouseEnter(event) {
        if (onMouseEnter) {
          onMouseEnter(event);
        }

        handlePause();
      };

      var handleMouseLeave = function handleMouseLeave(event) {
        if (onMouseLeave) {
          onMouseLeave(event);
        }

        handleResume();
      };

      var handleClickAway = function handleClickAway(event) {
        if (onClose) {
          onClose(event, 'clickaway');
        }
      };

      var handleExited = function handleExited() {
        setExited(true);
      };

      var handleEnter = function handleEnter() {
        setExited(false);
      };

      React__namespace.useEffect(function () {
        if (!disableWindowBlurListener && open) {
          window.addEventListener('focus', handleResume);
          window.addEventListener('blur', handlePause);
          return function () {
            window.removeEventListener('focus', handleResume);
            window.removeEventListener('blur', handlePause);
          };
        }

        return undefined;
      }, [disableWindowBlurListener, handleResume, open]); // So we only render active snackbars.

      if (!open && exited) {
        return null;
      }

      return /*#__PURE__*/React__namespace.createElement(ClickAwayListener, _extends$3({
        onClickAway: handleClickAway
      }, ClickAwayListenerProps), /*#__PURE__*/React__namespace.createElement("div", _extends$3({
        className: r$1(classes.root, classes["anchorOrigin".concat(capitalize(vertical)).concat(capitalize(horizontal))], className),
        onMouseEnter: handleMouseEnter,
        onMouseLeave: handleMouseLeave,
        ref: ref
      }, other), /*#__PURE__*/React__namespace.createElement(TransitionComponent, _extends$3({
        appear: true,
        in: open,
        onEnter: createChainedFunction(handleEnter, onEnter),
        onEntered: onEntered,
        onEntering: onEntering,
        onExit: onExit,
        onExited: createChainedFunction(handleExited, onExited),
        onExiting: onExiting,
        timeout: transitionDuration,
        direction: vertical === 'top' ? 'down' : 'up'
      }, TransitionProps), children || /*#__PURE__*/React__namespace.createElement(SnackbarContent$1, _extends$3({
        message: message,
        action: action
      }, ContentProps)))));
    });
    process.env.NODE_ENV !== "production" ? Snackbar$1.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * The action to display. It renders after the message, at the end of the snackbar.
       */
      action: re.node,

      /**
       * The anchor of the `Snackbar`.
       */
      anchorOrigin: re.shape({
        horizontal: re.oneOf(['center', 'left', 'right']).isRequired,
        vertical: re.oneOf(['bottom', 'top']).isRequired
      }),

      /**
       * The number of milliseconds to wait before automatically calling the
       * `onClose` function. `onClose` should then set the state of the `open`
       * prop to hide the Snackbar. This behavior is disabled by default with
       * the `null` value.
       */
      autoHideDuration: re.number,

      /**
       * Replace the `SnackbarContent` component.
       */
      children: re.element,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * Props applied to the `ClickAwayListener` element.
       */
      ClickAwayListenerProps: re.object,

      /**
       * Props applied to the [`SnackbarContent`](/api/snackbar-content/) element.
       */
      ContentProps: re.object,

      /**
       * If `true`, the `autoHideDuration` timer will expire even if the window is not focused.
       */
      disableWindowBlurListener: re.bool,

      /**
       * When displaying multiple consecutive Snackbars from a parent rendering a single
       * <Snackbar/>, add the key prop to ensure independent treatment of each message.
       * e.g. <Snackbar key={message} />, otherwise, the message may update-in-place and
       * features such as autoHideDuration may be canceled.
       */
      key: re.any,

      /**
       * The message to display.
       */
      message: re.node,

      /**
       * Callback fired when the component requests to be closed.
       * Typically `onClose` is used to set state in the parent component,
       * which is used to control the `Snackbar` `open` prop.
       * The `reason` parameter can optionally be used to control the response to `onClose`,
       * for example ignoring `clickaway`.
       *
       * @param {object} event The event source of the callback.
       * @param {string} reason Can be: `"timeout"` (`autoHideDuration` expired), `"clickaway"`.
       */
      onClose: re.func,

      /**
       * Callback fired before the transition is entering.
       * @deprecated Use the `TransitionProps` prop instead.
       */
      onEnter: deprecatedPropType(re.func, 'Use the `TransitionProps` prop instead.'),

      /**
       * Callback fired when the transition has entered.
       * @deprecated Use the `TransitionProps` prop instead.
       */
      onEntered: deprecatedPropType(re.func, 'Use the `TransitionProps` prop instead.'),

      /**
       * Callback fired when the transition is entering.
       * @deprecated Use the `TransitionProps` prop instead.
       */
      onEntering: deprecatedPropType(re.func, 'Use the `TransitionProps` prop instead.'),

      /**
       * Callback fired before the transition is exiting.
       * @deprecated Use the `TransitionProps` prop instead.
       */
      onExit: deprecatedPropType(re.func, 'Use the `TransitionProps` prop instead.'),

      /**
       * Callback fired when the transition has exited.
       * @deprecated Use the `TransitionProps` prop instead.
       */
      onExited: deprecatedPropType(re.func, 'Use the `TransitionProps` prop instead.'),

      /**
       * Callback fired when the transition is exiting.
       * @deprecated Use the `TransitionProps` prop instead.
       */
      onExiting: deprecatedPropType(re.func, 'Use the `TransitionProps` prop instead.'),

      /**
       * @ignore
       */
      onMouseEnter: re.func,

      /**
       * @ignore
       */
      onMouseLeave: re.func,

      /**
       * If `true`, `Snackbar` is open.
       */
      open: re.bool,

      /**
       * The number of milliseconds to wait before dismissing after user interaction.
       * If `autoHideDuration` prop isn't specified, it does nothing.
       * If `autoHideDuration` prop is specified but `resumeHideDuration` isn't,
       * we default to `autoHideDuration / 2` ms.
       */
      resumeHideDuration: re.number,

      /**
       * The component used for the transition.
       * [Follow this guide](/components/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
       */
      TransitionComponent: re.elementType,

      /**
       * The duration for the transition, in milliseconds.
       * You may specify a single timeout for all transitions, or individually with an object.
       */
      transitionDuration: re.oneOfType([re.number, re.shape({
        appear: re.number,
        enter: re.number,
        exit: re.number
      })]),

      /**
       * Props applied to the [`Transition`](http://reactcommunity.org/react-transition-group/transition#Transition-props) element.
       */
      TransitionProps: re.object
    } : void 0;
    var Snackbar$2 = withStyles(styles$O, {
      flip: false,
      name: 'MuiSnackbar'
    })(Snackbar$1);

    var styles$N = {
      /* Styles applied to the root element. */
      root: {},

      /* Styles applied to the root element if `orientation="horizontal"`. */
      horizontal: {
        paddingLeft: 8,
        paddingRight: 8
      },

      /* Styles applied to the root element if `orientation="vertical"`. */
      vertical: {},

      /* Styles applied to the root element if `alternativeLabel={true}`. */
      alternativeLabel: {
        flex: 1,
        position: 'relative'
      },

      /* Pseudo-class applied to the root element if `completed={true}`. */
      completed: {}
    };
    var Step = /*#__PURE__*/React__namespace.forwardRef(function Step(props, ref) {
      var _props$active = props.active,
          active = _props$active === void 0 ? false : _props$active,
          alternativeLabel = props.alternativeLabel,
          children = props.children,
          classes = props.classes,
          className = props.className,
          _props$completed = props.completed,
          completed = _props$completed === void 0 ? false : _props$completed,
          connectorProp = props.connector,
          _props$disabled = props.disabled,
          disabled = _props$disabled === void 0 ? false : _props$disabled,
          _props$expanded = props.expanded,
          expanded = _props$expanded === void 0 ? false : _props$expanded,
          index = props.index,
          last = props.last,
          orientation = props.orientation,
          other = _objectWithoutProperties(props, ["active", "alternativeLabel", "children", "classes", "className", "completed", "connector", "disabled", "expanded", "index", "last", "orientation"]);

      var connector = connectorProp ? /*#__PURE__*/React__namespace.cloneElement(connectorProp, {
        orientation: orientation,
        alternativeLabel: alternativeLabel,
        index: index,
        active: active,
        completed: completed,
        disabled: disabled
      }) : null;
      var newChildren = /*#__PURE__*/React__namespace.createElement("div", _extends$3({
        className: r$1(classes.root, classes[orientation], className, alternativeLabel && classes.alternativeLabel, completed && classes.completed),
        ref: ref
      }, other), connector && alternativeLabel && index !== 0 ? connector : null, React__namespace.Children.map(children, function (child) {
        if (! /*#__PURE__*/React__namespace.isValidElement(child)) {
          return null;
        }

        if (process.env.NODE_ENV !== 'production') {
          if (reactIs$2.exports.isFragment(child)) {
            console.error(["Material-UI: The Step component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n'));
          }
        }

        return /*#__PURE__*/React__namespace.cloneElement(child, _extends$3({
          active: active,
          alternativeLabel: alternativeLabel,
          completed: completed,
          disabled: disabled,
          expanded: expanded,
          last: last,
          icon: index + 1,
          orientation: orientation
        }, child.props));
      }));

      if (connector && !alternativeLabel && index !== 0) {
        return /*#__PURE__*/React__namespace.createElement(React__namespace.Fragment, null, connector, newChildren);
      }

      return newChildren;
    });
    process.env.NODE_ENV !== "production" ? Step.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * Sets the step as active. Is passed to child components.
       */
      active: re.bool,

      /**
       * Should be `Step` sub-components such as `StepLabel`, `StepContent`.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * Mark the step as completed. Is passed to child components.
       */
      completed: re.bool,

      /**
       * Mark the step as disabled, will also disable the button if
       * `StepButton` is a child of `Step`. Is passed to child components.
       */
      disabled: re.bool,

      /**
       * Expand the step.
       */
      expanded: re.bool
    } : void 0;
    var Step$1 = withStyles(styles$N, {
      name: 'MuiStep'
    })(Step);

    /**
     * @ignore - internal component.
     */

    var CheckCircle = createSvgIcon$1( /*#__PURE__*/React__namespace.createElement("path", {
      d: "M12 0a12 12 0 1 0 0 24 12 12 0 0 0 0-24zm-2 17l-5-5 1.4-1.4 3.6 3.6 7.6-7.6L19 8l-9 9z"
    }), 'CheckCircle');

    /**
     * @ignore - internal component.
     */

    var Warning = createSvgIcon$1( /*#__PURE__*/React__namespace.createElement("path", {
      d: "M1 21h22L12 2 1 21zm12-3h-2v-2h2v2zm0-4h-2v-4h2v4z"
    }), 'Warning');

    var styles$M = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          display: 'block',
          color: theme.palette.text.disabled,
          '&$completed': {
            color: theme.palette.primary.main
          },
          '&$active': {
            color: theme.palette.primary.main
          },
          '&$error': {
            color: theme.palette.error.main
          }
        },

        /* Styles applied to the SVG text element. */
        text: {
          fill: theme.palette.primary.contrastText,
          fontSize: theme.typography.caption.fontSize,
          fontFamily: theme.typography.fontFamily
        },

        /* Pseudo-class applied to the root element if `active={true}`. */
        active: {},

        /* Pseudo-class applied to the root element if `completed={true}`. */
        completed: {},

        /* Pseudo-class applied to the root element if `error={true}`. */
        error: {}
      };
    };

    var _ref$4 = /*#__PURE__*/React__namespace.createElement("circle", {
      cx: "12",
      cy: "12",
      r: "12"
    });

    var StepIcon = /*#__PURE__*/React__namespace.forwardRef(function StepIcon(props, ref) {
      var _props$completed = props.completed,
          completed = _props$completed === void 0 ? false : _props$completed,
          icon = props.icon,
          _props$active = props.active,
          active = _props$active === void 0 ? false : _props$active,
          _props$error = props.error,
          error = _props$error === void 0 ? false : _props$error,
          classes = props.classes;

      if (typeof icon === 'number' || typeof icon === 'string') {
        var className = r$1(classes.root, active && classes.active, error && classes.error, completed && classes.completed);

        if (error) {
          return /*#__PURE__*/React__namespace.createElement(Warning, {
            className: className,
            ref: ref
          });
        }

        if (completed) {
          return /*#__PURE__*/React__namespace.createElement(CheckCircle, {
            className: className,
            ref: ref
          });
        }

        return /*#__PURE__*/React__namespace.createElement(SvgIcon$1, {
          className: className,
          ref: ref
        }, _ref$4, /*#__PURE__*/React__namespace.createElement("text", {
          className: classes.text,
          x: "12",
          y: "16",
          textAnchor: "middle"
        }, icon));
      }

      return icon;
    });
    process.env.NODE_ENV !== "production" ? StepIcon.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * Whether this step is active.
       */
      active: re.bool,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * Mark the step as completed. Is passed to child components.
       */
      completed: re.bool,

      /**
       * Mark the step as failed.
       */
      error: re.bool,

      /**
       * The label displayed in the step icon.
       */
      icon: re.node
    } : void 0;
    var StepIcon$1 = withStyles(styles$M, {
      name: 'MuiStepIcon'
    })(StepIcon);

    var styles$L = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          display: 'flex',
          alignItems: 'center',
          '&$alternativeLabel': {
            flexDirection: 'column'
          },
          '&$disabled': {
            cursor: 'default'
          }
        },

        /* Styles applied to the root element if `orientation="horizontal"`. */
        horizontal: {},

        /* Styles applied to the root element if `orientation="vertical"`. */
        vertical: {},

        /* Styles applied to the `Typography` component which wraps `children`. */
        label: {
          color: theme.palette.text.secondary,
          '&$active': {
            color: theme.palette.text.primary,
            fontWeight: 500
          },
          '&$completed': {
            color: theme.palette.text.primary,
            fontWeight: 500
          },
          '&$alternativeLabel': {
            textAlign: 'center',
            marginTop: 16
          },
          '&$error': {
            color: theme.palette.error.main
          }
        },

        /* Pseudo-class applied to the `Typography` component if `active={true}`. */
        active: {},

        /* Pseudo-class applied to the `Typography` component if `completed={true}`. */
        completed: {},

        /* Pseudo-class applied to the root element and `Typography` component if `error={true}`. */
        error: {},

        /* Pseudo-class applied to the root element and `Typography` component if `disabled={true}`. */
        disabled: {},

        /* Styles applied to the `icon` container element. */
        iconContainer: {
          flexShrink: 0,
          // Fix IE 11 issue
          display: 'flex',
          paddingRight: 8,
          '&$alternativeLabel': {
            paddingRight: 0
          }
        },

        /* Pseudo-class applied to the root and icon container and `Typography` if `alternativeLabel={true}`. */
        alternativeLabel: {},

        /* Styles applied to the container element which wraps `Typography` and `optional`. */
        labelContainer: {
          width: '100%'
        }
      };
    };
    var StepLabel = /*#__PURE__*/React__namespace.forwardRef(function StepLabel(props, ref) {
      var _props$active = props.active,
          active = _props$active === void 0 ? false : _props$active,
          _props$alternativeLab = props.alternativeLabel,
          alternativeLabel = _props$alternativeLab === void 0 ? false : _props$alternativeLab,
          children = props.children,
          classes = props.classes,
          className = props.className,
          _props$completed = props.completed,
          completed = _props$completed === void 0 ? false : _props$completed,
          _props$disabled = props.disabled,
          disabled = _props$disabled === void 0 ? false : _props$disabled,
          _props$error = props.error,
          error = _props$error === void 0 ? false : _props$error;
          props.expanded;
          var icon = props.icon;
          props.last;
          var optional = props.optional,
          _props$orientation = props.orientation,
          orientation = _props$orientation === void 0 ? 'horizontal' : _props$orientation,
          StepIconComponentProp = props.StepIconComponent,
          StepIconProps = props.StepIconProps,
          other = _objectWithoutProperties(props, ["active", "alternativeLabel", "children", "classes", "className", "completed", "disabled", "error", "expanded", "icon", "last", "optional", "orientation", "StepIconComponent", "StepIconProps"]);

      var StepIconComponent = StepIconComponentProp;

      if (icon && !StepIconComponent) {
        StepIconComponent = StepIcon$1;
      }

      return /*#__PURE__*/React__namespace.createElement("span", _extends$3({
        className: r$1(classes.root, classes[orientation], className, disabled && classes.disabled, alternativeLabel && classes.alternativeLabel, error && classes.error),
        ref: ref
      }, other), icon || StepIconComponent ? /*#__PURE__*/React__namespace.createElement("span", {
        className: r$1(classes.iconContainer, alternativeLabel && classes.alternativeLabel)
      }, /*#__PURE__*/React__namespace.createElement(StepIconComponent, _extends$3({
        completed: completed,
        active: active,
        error: error,
        icon: icon
      }, StepIconProps))) : null, /*#__PURE__*/React__namespace.createElement("span", {
        className: classes.labelContainer
      }, children ? /*#__PURE__*/React__namespace.createElement(Typography$2, {
        variant: "body2",
        component: "span",
        display: "block",
        className: r$1(classes.label, alternativeLabel && classes.alternativeLabel, completed && classes.completed, active && classes.active, error && classes.error)
      }, children) : null, optional));
    });
    process.env.NODE_ENV !== "production" ? StepLabel.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * In most cases will simply be a string containing a title for the label.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * Mark the step as disabled, will also disable the button if
       * `StepLabelButton` is a child of `StepLabel`. Is passed to child components.
       */
      disabled: re.bool,

      /**
       * Mark the step as failed.
       */
      error: re.bool,

      /**
       * Override the default label of the step icon.
       */
      icon: re.node,

      /**
       * The optional node to display.
       */
      optional: re.node,

      /**
       * The component to render in place of the [`StepIcon`](/api/step-icon/).
       */
      StepIconComponent: re.elementType,

      /**
       * Props applied to the [`StepIcon`](/api/step-icon/) element.
       */
      StepIconProps: re.object
    } : void 0;
    StepLabel.muiName = 'StepLabel';
    var StepLabel$1 = withStyles(styles$L, {
      name: 'MuiStepLabel'
    })(StepLabel);

    var styles$K = {
      /* Styles applied to the root element. */
      root: {
        width: '100%',
        padding: '24px 16px',
        margin: '-24px -16px',
        boxSizing: 'content-box'
      },

      /* Styles applied to the root element if `orientation="horizontal"`. */
      horizontal: {},

      /* Styles applied to the root element if `orientation="vertical"`. */
      vertical: {
        justifyContent: 'flex-start',
        padding: '8px',
        margin: '-8px'
      },

      /* Styles applied to the `ButtonBase` touch-ripple. */
      touchRipple: {
        color: 'rgba(0, 0, 0, 0.3)'
      }
    };
    var StepButton = /*#__PURE__*/React__namespace.forwardRef(function StepButton(props, ref) {
      var active = props.active,
          alternativeLabel = props.alternativeLabel,
          children = props.children,
          classes = props.classes,
          className = props.className,
          completed = props.completed,
          disabled = props.disabled;
          props.expanded;
          var icon = props.icon;
          props.last;
          var optional = props.optional,
          orientation = props.orientation,
          other = _objectWithoutProperties(props, ["active", "alternativeLabel", "children", "classes", "className", "completed", "disabled", "expanded", "icon", "last", "optional", "orientation"]);

      var childProps = {
        active: active,
        alternativeLabel: alternativeLabel,
        completed: completed,
        disabled: disabled,
        icon: icon,
        optional: optional,
        orientation: orientation
      };
      var child = isMuiElement(children, ['StepLabel']) ? /*#__PURE__*/React__namespace.cloneElement(children, childProps) : /*#__PURE__*/React__namespace.createElement(StepLabel$1, childProps, children);
      return /*#__PURE__*/React__namespace.createElement(ButtonBase$1, _extends$3({
        focusRipple: true,
        disabled: disabled,
        TouchRippleProps: {
          className: classes.touchRipple
        },
        className: r$1(classes.root, classes[orientation], className),
        ref: ref
      }, other), child);
    });
    process.env.NODE_ENV !== "production" ? StepButton.propTypes = {
      /**
       * @ignore
       * Passed in via `Step` - passed through to `StepLabel`.
       */
      active: re.bool,

      /**
       * @ignore
       * Set internally by Stepper when it's supplied with the alternativeLabel property.
       */
      alternativeLabel: re.bool,

      /**
       * Can be a `StepLabel` or a node to place inside `StepLabel` as children.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object.isRequired,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * @ignore
       * Sets completed styling. Is passed to StepLabel.
       */
      completed: re.bool,

      /**
       * @ignore
       * Disables the button and sets disabled styling. Is passed to StepLabel.
       */
      disabled: re.bool,

      /**
       * @ignore
       * potentially passed from parent `Step`
       */
      expanded: re.bool,

      /**
       * The icon displayed by the step label.
       */
      icon: re.node,

      /**
       * @ignore
       */
      last: re.bool,

      /**
       * The optional node to display.
       */
      optional: re.node,

      /**
       * @ignore
       */
      orientation: re.oneOf(['horizontal', 'vertical'])
    } : void 0;
    var StepButton$1 = withStyles(styles$K, {
      name: 'MuiStepButton'
    })(StepButton);

    var styles$J = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          flex: '1 1 auto'
        },

        /* Styles applied to the root element if `orientation="horizontal"`. */
        horizontal: {},

        /* Styles applied to the root element if `orientation="vertical"`. */
        vertical: {
          marginLeft: 12,
          // half icon
          padding: '0 0 8px'
        },

        /* Styles applied to the root element if `alternativeLabel={true}`. */
        alternativeLabel: {
          position: 'absolute',
          top: 8 + 4,
          left: 'calc(-50% + 20px)',
          right: 'calc(50% + 20px)'
        },

        /* Pseudo-class applied to the root element if `active={true}`. */
        active: {},

        /* Pseudo-class applied to the root element if `completed={true}`. */
        completed: {},

        /* Pseudo-class applied to the root element if `disabled={true}`. */
        disabled: {},

        /* Styles applied to the line element. */
        line: {
          display: 'block',
          borderColor: theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[600]
        },

        /* Styles applied to the root element if `orientation="horizontal"`. */
        lineHorizontal: {
          borderTopStyle: 'solid',
          borderTopWidth: 1
        },

        /* Styles applied to the root element if `orientation="vertical"`. */
        lineVertical: {
          borderLeftStyle: 'solid',
          borderLeftWidth: 1,
          minHeight: 24
        }
      };
    };
    var StepConnector = /*#__PURE__*/React__namespace.forwardRef(function StepConnector(props, ref) {
      var active = props.active,
          _props$alternativeLab = props.alternativeLabel,
          alternativeLabel = _props$alternativeLab === void 0 ? false : _props$alternativeLab,
          classes = props.classes,
          className = props.className,
          completed = props.completed,
          disabled = props.disabled;
          props.index;
          var _props$orientation = props.orientation,
          orientation = _props$orientation === void 0 ? 'horizontal' : _props$orientation,
          other = _objectWithoutProperties(props, ["active", "alternativeLabel", "classes", "className", "completed", "disabled", "index", "orientation"]);

      return /*#__PURE__*/React__namespace.createElement("div", _extends$3({
        className: r$1(classes.root, classes[orientation], className, alternativeLabel && classes.alternativeLabel, active && classes.active, completed && classes.completed, disabled && classes.disabled),
        ref: ref
      }, other), /*#__PURE__*/React__namespace.createElement("span", {
        className: r$1(classes.line, {
          'horizontal': classes.lineHorizontal,
          'vertical': classes.lineVertical
        }[orientation])
      }));
    });
    process.env.NODE_ENV !== "production" ? StepConnector.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string
    } : void 0;
    var StepConnector$1 = withStyles(styles$J, {
      name: 'MuiStepConnector'
    })(StepConnector);

    var styles$I = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          marginTop: 8,
          marginLeft: 12,
          // half icon
          paddingLeft: 8 + 12,
          // margin + half icon
          paddingRight: 8,
          borderLeft: "1px solid ".concat(theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[600])
        },

        /* Styles applied to the root element if `last={true}` (controlled by `Step`). */
        last: {
          borderLeft: 'none'
        },

        /* Styles applied to the Transition component. */
        transition: {}
      };
    };
    var StepContent = /*#__PURE__*/React__namespace.forwardRef(function StepContent(props, ref) {
      var active = props.active;
          props.alternativeLabel;
          var children = props.children,
          classes = props.classes,
          className = props.className;
          props.completed;
          var expanded = props.expanded,
          last = props.last;
          props.optional;
          var orientation = props.orientation,
          _props$TransitionComp = props.TransitionComponent,
          TransitionComponent = _props$TransitionComp === void 0 ? Collapse$1 : _props$TransitionComp,
          _props$transitionDura = props.transitionDuration,
          transitionDurationProp = _props$transitionDura === void 0 ? 'auto' : _props$transitionDura,
          TransitionProps = props.TransitionProps,
          other = _objectWithoutProperties(props, ["active", "alternativeLabel", "children", "classes", "className", "completed", "expanded", "last", "optional", "orientation", "TransitionComponent", "transitionDuration", "TransitionProps"]);

      if (process.env.NODE_ENV !== 'production') {
        if (orientation !== 'vertical') {
          console.error('Material-UI: <StepContent /> is only designed for use with the vertical stepper.');
        }
      }

      var transitionDuration = transitionDurationProp;

      if (transitionDurationProp === 'auto' && !TransitionComponent.muiSupportAuto) {
        transitionDuration = undefined;
      }

      return /*#__PURE__*/React__namespace.createElement("div", _extends$3({
        className: r$1(classes.root, className, last && classes.last),
        ref: ref
      }, other), /*#__PURE__*/React__namespace.createElement(TransitionComponent, _extends$3({
        in: active || expanded,
        className: classes.transition,
        timeout: transitionDuration,
        unmountOnExit: true
      }, TransitionProps), children));
    });
    process.env.NODE_ENV !== "production" ? StepContent.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * Step content.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * The component used for the transition.
       * [Follow this guide](/components/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
       */
      TransitionComponent: re.elementType,

      /**
       * Adjust the duration of the content expand transition.
       * Passed as a prop to the transition component.
       *
       * Set to 'auto' to automatically calculate transition time based on height.
       */
      transitionDuration: re.oneOfType([re.oneOf(['auto']), re.number, re.shape({
        appear: re.number,
        enter: re.number,
        exit: re.number
      })]),

      /**
       * Props applied to the [`Transition`](http://reactcommunity.org/react-transition-group/transition#Transition-props) element.
       */
      TransitionProps: re.object
    } : void 0;
    var StepContent$1 = withStyles(styles$I, {
      name: 'MuiStepContent'
    })(StepContent);

    var styles$H = {
      /* Styles applied to the root element. */
      root: {
        display: 'flex',
        padding: 24
      },

      /* Styles applied to the root element if `orientation="horizontal"`. */
      horizontal: {
        flexDirection: 'row',
        alignItems: 'center'
      },

      /* Styles applied to the root element if `orientation="vertical"`. */
      vertical: {
        flexDirection: 'column'
      },

      /* Styles applied to the root element if `alternativeLabel={true}`. */
      alternativeLabel: {
        alignItems: 'flex-start'
      }
    };
    var defaultConnector = /*#__PURE__*/React__namespace.createElement(StepConnector$1, null);
    var Stepper = /*#__PURE__*/React__namespace.forwardRef(function Stepper(props, ref) {
      var _props$activeStep = props.activeStep,
          activeStep = _props$activeStep === void 0 ? 0 : _props$activeStep,
          _props$alternativeLab = props.alternativeLabel,
          alternativeLabel = _props$alternativeLab === void 0 ? false : _props$alternativeLab,
          children = props.children,
          classes = props.classes,
          className = props.className,
          _props$connector = props.connector,
          connectorProp = _props$connector === void 0 ? defaultConnector : _props$connector,
          _props$nonLinear = props.nonLinear,
          nonLinear = _props$nonLinear === void 0 ? false : _props$nonLinear,
          _props$orientation = props.orientation,
          orientation = _props$orientation === void 0 ? 'horizontal' : _props$orientation,
          other = _objectWithoutProperties(props, ["activeStep", "alternativeLabel", "children", "classes", "className", "connector", "nonLinear", "orientation"]);

      var connector = /*#__PURE__*/React__namespace.isValidElement(connectorProp) ? /*#__PURE__*/React__namespace.cloneElement(connectorProp, {
        orientation: orientation
      }) : null;
      var childrenArray = React__namespace.Children.toArray(children);
      var steps = childrenArray.map(function (step, index) {
        var state = {
          index: index,
          active: false,
          completed: false,
          disabled: false
        };

        if (activeStep === index) {
          state.active = true;
        } else if (!nonLinear && activeStep > index) {
          state.completed = true;
        } else if (!nonLinear && activeStep < index) {
          state.disabled = true;
        }

        return /*#__PURE__*/React__namespace.cloneElement(step, _extends$3({
          alternativeLabel: alternativeLabel,
          connector: connector,
          last: index + 1 === childrenArray.length,
          orientation: orientation
        }, state, step.props));
      });
      return /*#__PURE__*/React__namespace.createElement(M, _extends$3({
        square: true,
        elevation: 0,
        className: r$1(classes.root, classes[orientation], className, alternativeLabel && classes.alternativeLabel),
        ref: ref
      }, other), steps);
    });
    process.env.NODE_ENV !== "production" ? Stepper.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * Set the active step (zero based index).
       * Set to -1 to disable all the steps.
       */
      activeStep: re.number,

      /**
       * If set to 'true' and orientation is horizontal,
       * then the step label will be positioned under the icon.
       */
      alternativeLabel: re.bool,

      /**
       * Two or more `<Step />` components.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * An element to be placed between each step.
       */
      connector: re.element,

      /**
       * If set the `Stepper` will not assist in controlling steps for linear flow.
       */
      nonLinear: re.bool,

      /**
       * The stepper orientation (layout flow direction).
       */
      orientation: re.oneOf(['horizontal', 'vertical'])
    } : void 0;
    var Stepper$1 = withStyles(styles$H, {
      name: 'MuiStepper'
    })(Stepper);

    var styles$G = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          position: 'fixed',
          top: 0,
          left: 0,
          bottom: 0,
          zIndex: theme.zIndex.drawer - 1
        },
        anchorLeft: {
          right: 'auto'
        },
        anchorRight: {
          left: 'auto',
          right: 0
        },
        anchorTop: {
          bottom: 'auto',
          right: 0
        },
        anchorBottom: {
          top: 'auto',
          bottom: 0,
          right: 0
        }
      };
    };
    /**
     * @ignore - internal component.
     */

    var SwipeArea = /*#__PURE__*/React__namespace.forwardRef(function SwipeArea(props, ref) {
      var anchor = props.anchor,
          classes = props.classes,
          className = props.className,
          width = props.width,
          other = _objectWithoutProperties(props, ["anchor", "classes", "className", "width"]);

      return /*#__PURE__*/React__namespace.createElement("div", _extends$3({
        className: r$1(classes.root, classes["anchor".concat(capitalize(anchor))], className),
        ref: ref,
        style: _defineProperty({}, isHorizontal(anchor) ? 'width' : 'height', width)
      }, other));
    });
    process.env.NODE_ENV !== "production" ? SwipeArea.propTypes = {
      /**
       * Side on which to attach the discovery area.
       */
      anchor: re.oneOf(['left', 'top', 'right', 'bottom']).isRequired,

      /**
       * @ignore
       */
      classes: re.object.isRequired,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * The width of the left most (or right most) area in pixels where the
       * drawer can be swiped open from.
       */
      width: re.number.isRequired
    } : void 0;
    var SwipeArea$1 = withStyles(styles$G, {
      name: 'PrivateSwipeArea'
    })(SwipeArea);

    // trigger a native scroll.

    var UNCERTAINTY_THRESHOLD = 3; // px
    // We can only have one node at the time claiming ownership for handling the swipe.
    // Otherwise, the UX would be confusing.
    // That's why we use a singleton here.

    var nodeThatClaimedTheSwipe = null; // Exported for test purposes.

    function calculateCurrentX(anchor, touches) {
      return anchor === 'right' ? document.body.offsetWidth - touches[0].pageX : touches[0].pageX;
    }

    function calculateCurrentY(anchor, touches) {
      return anchor === 'bottom' ? window.innerHeight - touches[0].clientY : touches[0].clientY;
    }

    function getMaxTranslate(horizontalSwipe, paperInstance) {
      return horizontalSwipe ? paperInstance.clientWidth : paperInstance.clientHeight;
    }

    function getTranslate(currentTranslate, startLocation, open, maxTranslate) {
      return Math.min(Math.max(open ? startLocation - currentTranslate : maxTranslate + startLocation - currentTranslate, 0), maxTranslate);
    }

    function getDomTreeShapes(element, rootNode) {
      // Adapted from https://github.com/oliviertassinari/react-swipeable-views/blob/7666de1dba253b896911adf2790ce51467670856/packages/react-swipeable-views/src/SwipeableViews.js#L129
      var domTreeShapes = [];

      while (element && element !== rootNode) {
        var style = window.getComputedStyle(element);

        if ( // Ignore the scroll children if the element is absolute positioned.
        style.getPropertyValue('position') === 'absolute' || // Ignore the scroll children if the element has an overflowX hidden
        style.getPropertyValue('overflow-x') === 'hidden') {
          domTreeShapes = [];
        } else if (element.clientWidth > 0 && element.scrollWidth > element.clientWidth || element.clientHeight > 0 && element.scrollHeight > element.clientHeight) {
          // Ignore the nodes that have no width.
          // Keep elements with a scroll
          domTreeShapes.push(element);
        }

        element = element.parentElement;
      }

      return domTreeShapes;
    }

    function findNativeHandler(_ref) {
      var domTreeShapes = _ref.domTreeShapes,
          start = _ref.start,
          current = _ref.current,
          anchor = _ref.anchor;
      // Adapted from https://github.com/oliviertassinari/react-swipeable-views/blob/7666de1dba253b896911adf2790ce51467670856/packages/react-swipeable-views/src/SwipeableViews.js#L175
      var axisProperties = {
        scrollPosition: {
          x: 'scrollLeft',
          y: 'scrollTop'
        },
        scrollLength: {
          x: 'scrollWidth',
          y: 'scrollHeight'
        },
        clientLength: {
          x: 'clientWidth',
          y: 'clientHeight'
        }
      };
      return domTreeShapes.some(function (shape) {
        // Determine if we are going backward or forward.
        var goingForward = current >= start;

        if (anchor === 'top' || anchor === 'left') {
          goingForward = !goingForward;
        }

        var axis = anchor === 'left' || anchor === 'right' ? 'x' : 'y';
        var scrollPosition = shape[axisProperties.scrollPosition[axis]];
        var areNotAtStart = scrollPosition > 0;
        var areNotAtEnd = scrollPosition + shape[axisProperties.clientLength[axis]] < shape[axisProperties.scrollLength[axis]];

        if (goingForward && areNotAtEnd || !goingForward && areNotAtStart) {
          return shape;
        }

        return null;
      });
    }

    var iOS = typeof navigator !== 'undefined' && /iPad|iPhone|iPod/.test(navigator.userAgent);
    var transitionDurationDefault = {
      enter: duration.enteringScreen,
      exit: duration.leavingScreen
    };
    var useEnhancedEffect = typeof window !== 'undefined' ? React__namespace.useLayoutEffect : React__namespace.useEffect;
    var SwipeableDrawer = /*#__PURE__*/React__namespace.forwardRef(function SwipeableDrawer(inProps, ref) {
      var theme = useTheme();
      var props = getThemeProps({
        name: 'MuiSwipeableDrawer',
        props: _extends$3({}, inProps),
        theme: theme
      });
      var _props$anchor = props.anchor,
          anchor = _props$anchor === void 0 ? 'left' : _props$anchor,
          _props$disableBackdro = props.disableBackdropTransition,
          disableBackdropTransition = _props$disableBackdro === void 0 ? false : _props$disableBackdro,
          _props$disableDiscove = props.disableDiscovery,
          disableDiscovery = _props$disableDiscove === void 0 ? false : _props$disableDiscove,
          _props$disableSwipeTo = props.disableSwipeToOpen,
          disableSwipeToOpen = _props$disableSwipeTo === void 0 ? iOS : _props$disableSwipeTo,
          hideBackdrop = props.hideBackdrop,
          _props$hysteresis = props.hysteresis,
          hysteresis = _props$hysteresis === void 0 ? 0.52 : _props$hysteresis,
          _props$minFlingVeloci = props.minFlingVelocity,
          minFlingVelocity = _props$minFlingVeloci === void 0 ? 450 : _props$minFlingVeloci,
          _props$ModalProps = props.ModalProps;
      _props$ModalProps = _props$ModalProps === void 0 ? {} : _props$ModalProps;

      var BackdropProps = _props$ModalProps.BackdropProps,
          ModalPropsProp = _objectWithoutProperties(_props$ModalProps, ["BackdropProps"]),
          onClose = props.onClose,
          onOpen = props.onOpen,
          open = props.open,
          _props$PaperProps = props.PaperProps,
          PaperProps = _props$PaperProps === void 0 ? {} : _props$PaperProps,
          SwipeAreaProps = props.SwipeAreaProps,
          _props$swipeAreaWidth = props.swipeAreaWidth,
          swipeAreaWidth = _props$swipeAreaWidth === void 0 ? 20 : _props$swipeAreaWidth,
          _props$transitionDura = props.transitionDuration,
          transitionDuration = _props$transitionDura === void 0 ? transitionDurationDefault : _props$transitionDura,
          _props$variant = props.variant,
          variant = _props$variant === void 0 ? 'temporary' : _props$variant,
          other = _objectWithoutProperties(props, ["anchor", "disableBackdropTransition", "disableDiscovery", "disableSwipeToOpen", "hideBackdrop", "hysteresis", "minFlingVelocity", "ModalProps", "onClose", "onOpen", "open", "PaperProps", "SwipeAreaProps", "swipeAreaWidth", "transitionDuration", "variant"]);

      var _React$useState = React__namespace.useState(false),
          maybeSwiping = _React$useState[0],
          setMaybeSwiping = _React$useState[1];

      var swipeInstance = React__namespace.useRef({
        isSwiping: null
      });
      var swipeAreaRef = React__namespace.useRef();
      var backdropRef = React__namespace.useRef();
      var paperRef = React__namespace.useRef();
      var touchDetected = React__namespace.useRef(false); // Ref for transition duration based on / to match swipe speed

      var calculatedDurationRef = React__namespace.useRef(); // Use a ref so the open value used is always up to date inside useCallback.

      useEnhancedEffect(function () {
        calculatedDurationRef.current = null;
      }, [open]);
      var setPosition = React__namespace.useCallback(function (translate) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var _options$mode = options.mode,
            mode = _options$mode === void 0 ? null : _options$mode,
            _options$changeTransi = options.changeTransition,
            changeTransition = _options$changeTransi === void 0 ? true : _options$changeTransi;
        var anchorRtl = getAnchor(theme, anchor);
        var rtlTranslateMultiplier = ['right', 'bottom'].indexOf(anchorRtl) !== -1 ? 1 : -1;
        var horizontalSwipe = isHorizontal(anchor);
        var transform = horizontalSwipe ? "translate(".concat(rtlTranslateMultiplier * translate, "px, 0)") : "translate(0, ".concat(rtlTranslateMultiplier * translate, "px)");
        var drawerStyle = paperRef.current.style;
        drawerStyle.webkitTransform = transform;
        drawerStyle.transform = transform;
        var transition = '';

        if (mode) {
          transition = theme.transitions.create('all', getTransitionProps({
            timeout: transitionDuration
          }, {
            mode: mode
          }));
        }

        if (changeTransition) {
          drawerStyle.webkitTransition = transition;
          drawerStyle.transition = transition;
        }

        if (!disableBackdropTransition && !hideBackdrop) {
          var backdropStyle = backdropRef.current.style;
          backdropStyle.opacity = 1 - translate / getMaxTranslate(horizontalSwipe, paperRef.current);

          if (changeTransition) {
            backdropStyle.webkitTransition = transition;
            backdropStyle.transition = transition;
          }
        }
      }, [anchor, disableBackdropTransition, hideBackdrop, theme, transitionDuration]);
      var handleBodyTouchEnd = useEventCallback(function (event) {
        if (!touchDetected.current) {
          return;
        }

        nodeThatClaimedTheSwipe = null;
        touchDetected.current = false;
        setMaybeSwiping(false); // The swipe wasn't started.

        if (!swipeInstance.current.isSwiping) {
          swipeInstance.current.isSwiping = null;
          return;
        }

        swipeInstance.current.isSwiping = null;
        var anchorRtl = getAnchor(theme, anchor);
        var horizontal = isHorizontal(anchor);
        var current;

        if (horizontal) {
          current = calculateCurrentX(anchorRtl, event.changedTouches);
        } else {
          current = calculateCurrentY(anchorRtl, event.changedTouches);
        }

        var startLocation = horizontal ? swipeInstance.current.startX : swipeInstance.current.startY;
        var maxTranslate = getMaxTranslate(horizontal, paperRef.current);
        var currentTranslate = getTranslate(current, startLocation, open, maxTranslate);
        var translateRatio = currentTranslate / maxTranslate;

        if (Math.abs(swipeInstance.current.velocity) > minFlingVelocity) {
          // Calculate transition duration to match swipe speed
          calculatedDurationRef.current = Math.abs((maxTranslate - currentTranslate) / swipeInstance.current.velocity) * 1000;
        }

        if (open) {
          if (swipeInstance.current.velocity > minFlingVelocity || translateRatio > hysteresis) {
            onClose();
          } else {
            // Reset the position, the swipe was aborted.
            setPosition(0, {
              mode: 'exit'
            });
          }

          return;
        }

        if (swipeInstance.current.velocity < -minFlingVelocity || 1 - translateRatio > hysteresis) {
          onOpen();
        } else {
          // Reset the position, the swipe was aborted.
          setPosition(getMaxTranslate(horizontal, paperRef.current), {
            mode: 'enter'
          });
        }
      });
      var handleBodyTouchMove = useEventCallback(function (event) {
        // the ref may be null when a parent component updates while swiping
        if (!paperRef.current || !touchDetected.current) {
          return;
        } // We are not supposed to handle this touch move because the swipe was started in a scrollable container in the drawer


        if (nodeThatClaimedTheSwipe != null && nodeThatClaimedTheSwipe !== swipeInstance.current) {
          return;
        }

        var anchorRtl = getAnchor(theme, anchor);
        var horizontalSwipe = isHorizontal(anchor);
        var currentX = calculateCurrentX(anchorRtl, event.touches);
        var currentY = calculateCurrentY(anchorRtl, event.touches);

        if (open && paperRef.current.contains(event.target) && nodeThatClaimedTheSwipe == null) {
          var domTreeShapes = getDomTreeShapes(event.target, paperRef.current);
          var nativeHandler = findNativeHandler({
            domTreeShapes: domTreeShapes,
            start: horizontalSwipe ? swipeInstance.current.startX : swipeInstance.current.startY,
            current: horizontalSwipe ? currentX : currentY,
            anchor: anchor
          });

          if (nativeHandler) {
            nodeThatClaimedTheSwipe = nativeHandler;
            return;
          }

          nodeThatClaimedTheSwipe = swipeInstance.current;
        } // We don't know yet.


        if (swipeInstance.current.isSwiping == null) {
          var dx = Math.abs(currentX - swipeInstance.current.startX);
          var dy = Math.abs(currentY - swipeInstance.current.startY); // We are likely to be swiping, let's prevent the scroll event on iOS.

          if (dx > dy) {
            if (event.cancelable) {
              event.preventDefault();
            }
          }

          var definitelySwiping = horizontalSwipe ? dx > dy && dx > UNCERTAINTY_THRESHOLD : dy > dx && dy > UNCERTAINTY_THRESHOLD;

          if (definitelySwiping === true || (horizontalSwipe ? dy > UNCERTAINTY_THRESHOLD : dx > UNCERTAINTY_THRESHOLD)) {
            swipeInstance.current.isSwiping = definitelySwiping;

            if (!definitelySwiping) {
              handleBodyTouchEnd(event);
              return;
            } // Shift the starting point.


            swipeInstance.current.startX = currentX;
            swipeInstance.current.startY = currentY; // Compensate for the part of the drawer displayed on touch start.

            if (!disableDiscovery && !open) {
              if (horizontalSwipe) {
                swipeInstance.current.startX -= swipeAreaWidth;
              } else {
                swipeInstance.current.startY -= swipeAreaWidth;
              }
            }
          }
        }

        if (!swipeInstance.current.isSwiping) {
          return;
        }

        var maxTranslate = getMaxTranslate(horizontalSwipe, paperRef.current);
        var startLocation = horizontalSwipe ? swipeInstance.current.startX : swipeInstance.current.startY;

        if (open && !swipeInstance.current.paperHit) {
          startLocation = Math.min(startLocation, maxTranslate);
        }

        var translate = getTranslate(horizontalSwipe ? currentX : currentY, startLocation, open, maxTranslate);

        if (open) {
          if (!swipeInstance.current.paperHit) {
            var paperHit = horizontalSwipe ? currentX < maxTranslate : currentY < maxTranslate;

            if (paperHit) {
              swipeInstance.current.paperHit = true;
              swipeInstance.current.startX = currentX;
              swipeInstance.current.startY = currentY;
            } else {
              return;
            }
          } else if (translate === 0) {
            swipeInstance.current.startX = currentX;
            swipeInstance.current.startY = currentY;
          }
        }

        if (swipeInstance.current.lastTranslate === null) {
          swipeInstance.current.lastTranslate = translate;
          swipeInstance.current.lastTime = performance.now() + 1;
        }

        var velocity = (translate - swipeInstance.current.lastTranslate) / (performance.now() - swipeInstance.current.lastTime) * 1e3; // Low Pass filter.

        swipeInstance.current.velocity = swipeInstance.current.velocity * 0.4 + velocity * 0.6;
        swipeInstance.current.lastTranslate = translate;
        swipeInstance.current.lastTime = performance.now(); // We are swiping, let's prevent the scroll event on iOS.

        if (event.cancelable) {
          event.preventDefault();
        }

        setPosition(translate);
      });
      var handleBodyTouchStart = useEventCallback(function (event) {
        // We are not supposed to handle this touch move.
        // Example of use case: ignore the event if there is a Slider.
        if (event.defaultPrevented) {
          return;
        } // We can only have one node at the time claiming ownership for handling the swipe.


        if (event.muiHandled) {
          return;
        } // At least one element clogs the drawer interaction zone.


        if (open && !backdropRef.current.contains(event.target) && !paperRef.current.contains(event.target)) {
          return;
        }

        var anchorRtl = getAnchor(theme, anchor);
        var horizontalSwipe = isHorizontal(anchor);
        var currentX = calculateCurrentX(anchorRtl, event.touches);
        var currentY = calculateCurrentY(anchorRtl, event.touches);

        if (!open) {
          if (disableSwipeToOpen || event.target !== swipeAreaRef.current) {
            return;
          }

          if (horizontalSwipe) {
            if (currentX > swipeAreaWidth) {
              return;
            }
          } else if (currentY > swipeAreaWidth) {
            return;
          }
        }

        event.muiHandled = true;
        nodeThatClaimedTheSwipe = null;
        swipeInstance.current.startX = currentX;
        swipeInstance.current.startY = currentY;
        setMaybeSwiping(true);

        if (!open && paperRef.current) {
          // The ref may be null when a parent component updates while swiping.
          setPosition(getMaxTranslate(horizontalSwipe, paperRef.current) + (disableDiscovery ? 20 : -swipeAreaWidth), {
            changeTransition: false
          });
        }

        swipeInstance.current.velocity = 0;
        swipeInstance.current.lastTime = null;
        swipeInstance.current.lastTranslate = null;
        swipeInstance.current.paperHit = false;
        touchDetected.current = true;
      });
      React__namespace.useEffect(function () {
        if (variant === 'temporary') {
          var doc = ownerDocument(paperRef.current);
          doc.addEventListener('touchstart', handleBodyTouchStart);
          doc.addEventListener('touchmove', handleBodyTouchMove, {
            passive: false
          });
          doc.addEventListener('touchend', handleBodyTouchEnd);
          return function () {
            doc.removeEventListener('touchstart', handleBodyTouchStart);
            doc.removeEventListener('touchmove', handleBodyTouchMove, {
              passive: false
            });
            doc.removeEventListener('touchend', handleBodyTouchEnd);
          };
        }

        return undefined;
      }, [variant, handleBodyTouchStart, handleBodyTouchMove, handleBodyTouchEnd]);
      React__namespace.useEffect(function () {
        return function () {
          // We need to release the lock.
          if (nodeThatClaimedTheSwipe === swipeInstance.current) {
            nodeThatClaimedTheSwipe = null;
          }
        };
      }, []);
      React__namespace.useEffect(function () {
        if (!open) {
          setMaybeSwiping(false);
        }
      }, [open]);
      var handleBackdropRef = React__namespace.useCallback(function (instance) {
        // #StrictMode ready
        backdropRef.current = ReactDOM__namespace.findDOMNode(instance);
      }, []);
      return /*#__PURE__*/React__namespace.createElement(React__namespace.Fragment, null, /*#__PURE__*/React__namespace.createElement(Drawer$3, _extends$3({
        open: variant === 'temporary' && maybeSwiping ? true : open,
        variant: variant,
        ModalProps: _extends$3({
          BackdropProps: _extends$3({}, BackdropProps, {
            ref: handleBackdropRef
          })
        }, ModalPropsProp),
        PaperProps: _extends$3({}, PaperProps, {
          style: _extends$3({
            pointerEvents: variant === 'temporary' && !open ? 'none' : ''
          }, PaperProps.style),
          ref: paperRef
        }),
        anchor: anchor,
        transitionDuration: calculatedDurationRef.current || transitionDuration,
        onClose: onClose,
        ref: ref
      }, other)), !disableSwipeToOpen && variant === 'temporary' && /*#__PURE__*/React__namespace.createElement(NoSsr, null, /*#__PURE__*/React__namespace.createElement(SwipeArea$1, _extends$3({
        anchor: anchor,
        ref: swipeAreaRef,
        width: swipeAreaWidth
      }, SwipeAreaProps))));
    });
    process.env.NODE_ENV !== "production" ? SwipeableDrawer.propTypes = {
      /**
       * @ignore
       */
      anchor: re.oneOf(['left', 'top', 'right', 'bottom']),

      /**
       * The content of the component.
       */
      children: re.node,

      /**
       * Disable the backdrop transition.
       * This can improve the FPS on low-end devices.
       */
      disableBackdropTransition: re.bool,

      /**
       * If `true`, touching the screen near the edge of the drawer will not slide in the drawer a bit
       * to promote accidental discovery of the swipe gesture.
       */
      disableDiscovery: re.bool,

      /**
       * If `true`, swipe to open is disabled. This is useful in browsers where swiping triggers
       * navigation actions. Swipe to open is disabled on iOS browsers by default.
       */
      disableSwipeToOpen: re.bool,

      /**
       * @ignore
       */
      hideBackdrop: re.bool,

      /**
       * Affects how far the drawer must be opened/closed to change his state.
       * Specified as percent (0-1) of the width of the drawer
       */
      hysteresis: re.number,

      /**
       * Defines, from which (average) velocity on, the swipe is
       * defined as complete although hysteresis isn't reached.
       * Good threshold is between 250 - 1000 px/s
       */
      minFlingVelocity: re.number,

      /**
       * @ignore
       */
      ModalProps: re.shape({
        BackdropProps: re.shape({
          component: elementTypeAcceptingRef$1
        })
      }),

      /**
       * Callback fired when the component requests to be closed.
       *
       * @param {object} event The event source of the callback.
       */
      onClose: re.func.isRequired,

      /**
       * Callback fired when the component requests to be opened.
       *
       * @param {object} event The event source of the callback.
       */
      onOpen: re.func.isRequired,

      /**
       * If `true`, the drawer is open.
       */
      open: re.bool.isRequired,

      /**
       * @ignore
       */
      PaperProps: re.shape({
        component: elementTypeAcceptingRef$1,
        style: re.object
      }),

      /**
       * The element is used to intercept the touch events on the edge.
       */
      SwipeAreaProps: re.object,

      /**
       * The width of the left most (or right most) area in pixels where the
       * drawer can be swiped open from.
       */
      swipeAreaWidth: re.number,

      /**
       * The duration for the transition, in milliseconds.
       * You may specify a single timeout for all transitions, or individually with an object.
       */
      transitionDuration: re.oneOfType([re.number, re.shape({
        enter: re.number,
        exit: re.number
      })]),

      /**
       * @ignore
       */
      variant: re.oneOf(['permanent', 'persistent', 'temporary'])
    } : void 0;
    var SwipeableDrawer$1 = SwipeableDrawer;

    var styles$F = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          display: 'inline-flex',
          width: 34 + 12 * 2,
          height: 14 + 12 * 2,
          overflow: 'hidden',
          padding: 12,
          boxSizing: 'border-box',
          position: 'relative',
          flexShrink: 0,
          zIndex: 0,
          // Reset the stacking context.
          verticalAlign: 'middle',
          // For correct alignment with the text.
          '@media print': {
            colorAdjust: 'exact'
          }
        },

        /* Styles applied to the root element if `edge="start"`. */
        edgeStart: {
          marginLeft: -8
        },

        /* Styles applied to the root element if `edge="end"`. */
        edgeEnd: {
          marginRight: -8
        },

        /* Styles applied to the internal `SwitchBase` component's `root` class. */
        switchBase: {
          position: 'absolute',
          top: 0,
          left: 0,
          zIndex: 1,
          // Render above the focus ripple.
          color: theme.palette.type === 'light' ? theme.palette.grey[50] : theme.palette.grey[400],
          transition: theme.transitions.create(['left', 'transform'], {
            duration: theme.transitions.duration.shortest
          }),
          '&$checked': {
            transform: 'translateX(20px)'
          },
          '&$disabled': {
            color: theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[800]
          },
          '&$checked + $track': {
            opacity: 0.5
          },
          '&$disabled + $track': {
            opacity: theme.palette.type === 'light' ? 0.12 : 0.1
          }
        },

        /* Styles applied to the internal SwitchBase component's root element if `color="primary"`. */
        colorPrimary: {
          '&$checked': {
            color: theme.palette.primary.main,
            '&:hover': {
              backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.hoverOpacity),
              '@media (hover: none)': {
                backgroundColor: 'transparent'
              }
            }
          },
          '&$disabled': {
            color: theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[800]
          },
          '&$checked + $track': {
            backgroundColor: theme.palette.primary.main
          },
          '&$disabled + $track': {
            backgroundColor: theme.palette.type === 'light' ? theme.palette.common.black : theme.palette.common.white
          }
        },

        /* Styles applied to the internal SwitchBase component's root element if `color="secondary"`. */
        colorSecondary: {
          '&$checked': {
            color: theme.palette.secondary.main,
            '&:hover': {
              backgroundColor: alpha(theme.palette.secondary.main, theme.palette.action.hoverOpacity),
              '@media (hover: none)': {
                backgroundColor: 'transparent'
              }
            }
          },
          '&$disabled': {
            color: theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[800]
          },
          '&$checked + $track': {
            backgroundColor: theme.palette.secondary.main
          },
          '&$disabled + $track': {
            backgroundColor: theme.palette.type === 'light' ? theme.palette.common.black : theme.palette.common.white
          }
        },

        /* Styles applied to the root element if `size="small"`. */
        sizeSmall: {
          width: 40,
          height: 24,
          padding: 7,
          '& $thumb': {
            width: 16,
            height: 16
          },
          '& $switchBase': {
            padding: 4,
            '&$checked': {
              transform: 'translateX(16px)'
            }
          }
        },

        /* Pseudo-class applied to the internal `SwitchBase` component's `checked` class. */
        checked: {},

        /* Pseudo-class applied to the internal SwitchBase component's disabled class. */
        disabled: {},

        /* Styles applied to the internal SwitchBase component's input element. */
        input: {
          left: '-100%',
          width: '300%'
        },

        /* Styles used to create the thumb passed to the internal `SwitchBase` component `icon` prop. */
        thumb: {
          boxShadow: theme.shadows[1],
          backgroundColor: 'currentColor',
          width: 20,
          height: 20,
          borderRadius: '50%'
        },

        /* Styles applied to the track element. */
        track: {
          height: '100%',
          width: '100%',
          borderRadius: 14 / 2,
          zIndex: -1,
          transition: theme.transitions.create(['opacity', 'background-color'], {
            duration: theme.transitions.duration.shortest
          }),
          backgroundColor: theme.palette.type === 'light' ? theme.palette.common.black : theme.palette.common.white,
          opacity: theme.palette.type === 'light' ? 0.38 : 0.3
        }
      };
    };
    var Switch = /*#__PURE__*/React__namespace.forwardRef(function Switch(props, ref) {
      var classes = props.classes,
          className = props.className,
          _props$color = props.color,
          color = _props$color === void 0 ? 'secondary' : _props$color,
          _props$edge = props.edge,
          edge = _props$edge === void 0 ? false : _props$edge,
          _props$size = props.size,
          size = _props$size === void 0 ? 'medium' : _props$size,
          other = _objectWithoutProperties(props, ["classes", "className", "color", "edge", "size"]);

      var icon = /*#__PURE__*/React__namespace.createElement("span", {
        className: classes.thumb
      });
      return /*#__PURE__*/React__namespace.createElement("span", {
        className: r$1(classes.root, className, {
          'start': classes.edgeStart,
          'end': classes.edgeEnd
        }[edge], size === "small" && classes["size".concat(capitalize(size))])
      }, /*#__PURE__*/React__namespace.createElement(SwitchBase$1, _extends$3({
        type: "checkbox",
        icon: icon,
        checkedIcon: icon,
        classes: {
          root: r$1(classes.switchBase, classes["color".concat(capitalize(color))]),
          input: classes.input,
          checked: classes.checked,
          disabled: classes.disabled
        },
        ref: ref
      }, other)), /*#__PURE__*/React__namespace.createElement("span", {
        className: classes.track
      }));
    });
    process.env.NODE_ENV !== "production" ? Switch.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * If `true`, the component is checked.
       */
      checked: re.bool,

      /**
       * The icon to display when the component is checked.
       */
      checkedIcon: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * The color of the component. It supports those theme colors that make sense for this component.
       */
      color: re.oneOf(['default', 'primary', 'secondary']),

      /**
       * @ignore
       */
      defaultChecked: re.bool,

      /**
       * If `true`, the switch will be disabled.
       */
      disabled: re.bool,

      /**
       * If `true`, the ripple effect will be disabled.
       */
      disableRipple: re.bool,

      /**
       * If given, uses a negative margin to counteract the padding on one
       * side (this is often helpful for aligning the left or right
       * side of the icon with content above or below, without ruining the border
       * size and shape).
       */
      edge: re.oneOf(['end', 'start', false]),

      /**
       * The icon to display when the component is unchecked.
       */
      icon: re.node,

      /**
       * The id of the `input` element.
       */
      id: re.string,

      /**
       * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
       */
      inputProps: re.object,

      /**
       * Pass a ref to the `input` element.
       */
      inputRef: refType$1,

      /**
       * Callback fired when the state is changed.
       *
       * @param {object} event The event source of the callback.
       * You can pull out the new value by accessing `event.target.value` (string).
       * You can pull out the new checked state by accessing `event.target.checked` (boolean).
       */
      onChange: re.func,

      /**
       * If `true`, the `input` element will be required.
       */
      required: re.bool,

      /**
       * The size of the switch.
       * `small` is equivalent to the dense switch styling.
       */
      size: re.oneOf(['medium', 'small']),

      /**
       * The value of the component. The DOM API casts this to a string.
       * The browser uses "on" as the default value.
       */
      value: re.any
    } : void 0;
    var j = withStyles(styles$F, {
      name: 'MuiSwitch'
    })(Switch);

    var styles$E = function styles(theme) {
      var _extends2;

      return {
        /* Styles applied to the root element. */
        root: _extends$3({}, theme.typography.button, (_extends2 = {
          maxWidth: 264,
          minWidth: 72,
          position: 'relative',
          boxSizing: 'border-box',
          minHeight: 48,
          flexShrink: 0,
          padding: '6px 12px'
        }, _defineProperty(_extends2, theme.breakpoints.up('sm'), {
          padding: '6px 24px'
        }), _defineProperty(_extends2, "overflow", 'hidden'), _defineProperty(_extends2, "whiteSpace", 'normal'), _defineProperty(_extends2, "textAlign", 'center'), _defineProperty(_extends2, theme.breakpoints.up('sm'), {
          minWidth: 160
        }), _extends2)),

        /* Styles applied to the root element if both `icon` and `label` are provided. */
        labelIcon: {
          minHeight: 72,
          paddingTop: 9,
          '& $wrapper > *:first-child': {
            marginBottom: 6
          }
        },

        /* Styles applied to the root element if the parent [`Tabs`](/api/tabs/) has `textColor="inherit"`. */
        textColorInherit: {
          color: 'inherit',
          opacity: 0.7,
          '&$selected': {
            opacity: 1
          },
          '&$disabled': {
            opacity: 0.5
          }
        },

        /* Styles applied to the root element if the parent [`Tabs`](/api/tabs/) has `textColor="primary"`. */
        textColorPrimary: {
          color: theme.palette.text.secondary,
          '&$selected': {
            color: theme.palette.primary.main
          },
          '&$disabled': {
            color: theme.palette.text.disabled
          }
        },

        /* Styles applied to the root element if the parent [`Tabs`](/api/tabs/) has `textColor="secondary"`. */
        textColorSecondary: {
          color: theme.palette.text.secondary,
          '&$selected': {
            color: theme.palette.secondary.main
          },
          '&$disabled': {
            color: theme.palette.text.disabled
          }
        },

        /* Pseudo-class applied to the root element if `selected={true}` (controlled by the Tabs component). */
        selected: {},

        /* Pseudo-class applied to the root element if `disabled={true}` (controlled by the Tabs component). */
        disabled: {},

        /* Styles applied to the root element if `fullWidth={true}` (controlled by the Tabs component). */
        fullWidth: {
          flexShrink: 1,
          flexGrow: 1,
          flexBasis: 0,
          maxWidth: 'none'
        },

        /* Styles applied to the root element if `wrapped={true}`. */
        wrapped: {
          fontSize: theme.typography.pxToRem(12),
          lineHeight: 1.5
        },

        /* Styles applied to the `icon` and `label`'s wrapper element. */
        wrapper: {
          display: 'inline-flex',
          alignItems: 'center',
          justifyContent: 'center',
          width: '100%',
          flexDirection: 'column'
        }
      };
    };
    var Tab = /*#__PURE__*/React__namespace.forwardRef(function Tab(props, ref) {
      var classes = props.classes,
          className = props.className,
          _props$disabled = props.disabled,
          disabled = _props$disabled === void 0 ? false : _props$disabled,
          _props$disableFocusRi = props.disableFocusRipple,
          disableFocusRipple = _props$disableFocusRi === void 0 ? false : _props$disableFocusRi,
          fullWidth = props.fullWidth,
          icon = props.icon,
          indicator = props.indicator,
          label = props.label,
          onChange = props.onChange,
          onClick = props.onClick,
          onFocus = props.onFocus,
          selected = props.selected,
          selectionFollowsFocus = props.selectionFollowsFocus,
          _props$textColor = props.textColor,
          textColor = _props$textColor === void 0 ? 'inherit' : _props$textColor,
          value = props.value,
          _props$wrapped = props.wrapped,
          wrapped = _props$wrapped === void 0 ? false : _props$wrapped,
          other = _objectWithoutProperties(props, ["classes", "className", "disabled", "disableFocusRipple", "fullWidth", "icon", "indicator", "label", "onChange", "onClick", "onFocus", "selected", "selectionFollowsFocus", "textColor", "value", "wrapped"]);

      var handleClick = function handleClick(event) {
        if (onChange) {
          onChange(event, value);
        }

        if (onClick) {
          onClick(event);
        }
      };

      var handleFocus = function handleFocus(event) {
        if (selectionFollowsFocus && !selected && onChange) {
          onChange(event, value);
        }

        if (onFocus) {
          onFocus(event);
        }
      };

      return /*#__PURE__*/React__namespace.createElement(ButtonBase$1, _extends$3({
        focusRipple: !disableFocusRipple,
        className: r$1(classes.root, classes["textColor".concat(capitalize(textColor))], className, disabled && classes.disabled, selected && classes.selected, label && icon && classes.labelIcon, fullWidth && classes.fullWidth, wrapped && classes.wrapped),
        ref: ref,
        role: "tab",
        "aria-selected": selected,
        disabled: disabled,
        onClick: handleClick,
        onFocus: handleFocus,
        tabIndex: selected ? 0 : -1
      }, other), /*#__PURE__*/React__namespace.createElement("span", {
        className: classes.wrapper
      }, icon, label), indicator);
    });
    process.env.NODE_ENV !== "production" ? Tab.propTypes = {
      /**
       * This prop isn't supported.
       * Use the `component` prop if you need to change the children structure.
       */
      children: unsupportedProp,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object.isRequired,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * If `true`, the tab will be disabled.
       */
      disabled: re.bool,

      /**
       * If `true`, the  keyboard focus ripple will be disabled.
       */
      disableFocusRipple: re.bool,

      /**
       * If `true`, the ripple effect will be disabled.
       */
      disableRipple: re.bool,

      /**
       * @ignore
       */
      fullWidth: re.bool,

      /**
       * The icon element.
       */
      icon: re.node,

      /**
       * @ignore
       * For server-side rendering consideration, we let the selected tab
       * render the indicator.
       */
      indicator: re.node,

      /**
       * The label element.
       */
      label: re.node,

      /**
       * @ignore
       */
      onChange: re.func,

      /**
       * @ignore
       */
      onClick: re.func,

      /**
       * @ignore
       */
      onFocus: re.func,

      /**
       * @ignore
       */
      selected: re.bool,

      /**
       * @ignore
       */
      selectionFollowsFocus: re.bool,

      /**
       * @ignore
       */
      textColor: re.oneOf(['secondary', 'primary', 'inherit']),

      /**
       * You can provide your own value. Otherwise, we fallback to the child position index.
       */
      value: re.any,

      /**
       * Tab labels appear in a single row.
       * They can use a second line if needed.
       */
      wrapped: re.bool
    } : void 0;
    var Tab$1 = withStyles(styles$E, {
      name: 'MuiTab'
    })(Tab);

    /**
     * @ignore - internal component.
     */

    var TableContext = React__namespace.createContext();

    if (process.env.NODE_ENV !== 'production') {
      TableContext.displayName = 'TableContext';
    }

    var TableContext$1 = TableContext;

    var styles$D = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          display: 'table',
          width: '100%',
          borderCollapse: 'collapse',
          borderSpacing: 0,
          '& caption': _extends$3({}, theme.typography.body2, {
            padding: theme.spacing(2),
            color: theme.palette.text.secondary,
            textAlign: 'left',
            captionSide: 'bottom'
          })
        },

        /* Styles applied to the root element if `stickyHeader={true}`. */
        stickyHeader: {
          borderCollapse: 'separate'
        }
      };
    };
    var defaultComponent$4 = 'table';
    var Table = /*#__PURE__*/React__namespace.forwardRef(function Table(props, ref) {
      var classes = props.classes,
          className = props.className,
          _props$component = props.component,
          Component = _props$component === void 0 ? defaultComponent$4 : _props$component,
          _props$padding = props.padding,
          padding = _props$padding === void 0 ? 'normal' : _props$padding,
          _props$size = props.size,
          size = _props$size === void 0 ? 'medium' : _props$size,
          _props$stickyHeader = props.stickyHeader,
          stickyHeader = _props$stickyHeader === void 0 ? false : _props$stickyHeader,
          other = _objectWithoutProperties(props, ["classes", "className", "component", "padding", "size", "stickyHeader"]);

      var table = React__namespace.useMemo(function () {
        return {
          padding: padding,
          size: size,
          stickyHeader: stickyHeader
        };
      }, [padding, size, stickyHeader]);
      return /*#__PURE__*/React__namespace.createElement(TableContext$1.Provider, {
        value: table
      }, /*#__PURE__*/React__namespace.createElement(Component, _extends$3({
        role: Component === defaultComponent$4 ? null : 'table',
        ref: ref,
        className: r$1(classes.root, className, stickyHeader && classes.stickyHeader)
      }, other)));
    });
    process.env.NODE_ENV !== "production" ? Table.propTypes = {
      /**
       * The content of the table, normally `TableHead` and `TableBody`.
       */
      children: re.node.isRequired,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object.isRequired,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: re
      /* @typescript-to-proptypes-ignore */
      .elementType,

      /**
       * Allows TableCells to inherit padding of the Table.
       * `default` is deprecated, use `normal` instead.
       */
      padding: chainPropTypes$1(re.oneOf(['normal', 'checkbox', 'none', 'default']), function (props) {
        if (props.padding === 'default') {
          return new Error('Material-UI: padding="default" was renamed to padding="normal" for consistency.');
        }

        return null;
      }),

      /**
       * Allows TableCells to inherit size of the Table.
       */
      size: re.oneOf(['small', 'medium']),

      /**
       * Set the header sticky.
       *
       * ⚠️ It doesn't work with IE 11.
       */
      stickyHeader: re.bool
    } : void 0;
    var Table$1 = withStyles(styles$D, {
      name: 'MuiTable'
    })(Table);

    /**
     * @ignore - internal component.
     */

    var Tablelvl2Context = React__namespace.createContext();

    if (process.env.NODE_ENV !== 'production') {
      Tablelvl2Context.displayName = 'Tablelvl2Context';
    }

    var Tablelvl2Context$1 = Tablelvl2Context;

    var styles$C = {
      /* Styles applied to the root element. */
      root: {
        display: 'table-row-group'
      }
    };
    var tablelvl2$2 = {
      variant: 'body'
    };
    var defaultComponent$3 = 'tbody';
    var TableBody = /*#__PURE__*/React__namespace.forwardRef(function TableBody(props, ref) {
      var classes = props.classes,
          className = props.className,
          _props$component = props.component,
          Component = _props$component === void 0 ? defaultComponent$3 : _props$component,
          other = _objectWithoutProperties(props, ["classes", "className", "component"]);

      return /*#__PURE__*/React__namespace.createElement(Tablelvl2Context$1.Provider, {
        value: tablelvl2$2
      }, /*#__PURE__*/React__namespace.createElement(Component, _extends$3({
        className: r$1(classes.root, className),
        ref: ref,
        role: Component === defaultComponent$3 ? null : 'rowgroup'
      }, other)));
    });
    process.env.NODE_ENV !== "production" ? TableBody.propTypes = {
      /**
       * The content of the component, normally `TableRow`.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object.isRequired,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: re
      /* @typescript-to-proptypes-ignore */
      .elementType
    } : void 0;
    var TableBody$1 = withStyles(styles$C, {
      name: 'MuiTableBody'
    })(TableBody);

    var styles$B = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: _extends$3({}, theme.typography.body2, {
          display: 'table-cell',
          verticalAlign: 'inherit',
          // Workaround for a rendering bug with spanned columns in Chrome 62.0.
          // Removes the alpha (sets it to 1), and lightens or darkens the theme color.
          borderBottom: "1px solid\n    ".concat(theme.palette.type === 'light' ? lighten(alpha(theme.palette.divider, 1), 0.88) : darken(alpha(theme.palette.divider, 1), 0.68)),
          textAlign: 'left',
          padding: 16
        }),

        /* Styles applied to the root element if `variant="head"` or `context.table.head`. */
        head: {
          color: theme.palette.text.primary,
          lineHeight: theme.typography.pxToRem(24),
          fontWeight: theme.typography.fontWeightMedium
        },

        /* Styles applied to the root element if `variant="body"` or `context.table.body`. */
        body: {
          color: theme.palette.text.primary
        },

        /* Styles applied to the root element if `variant="footer"` or `context.table.footer`. */
        footer: {
          color: theme.palette.text.secondary,
          lineHeight: theme.typography.pxToRem(21),
          fontSize: theme.typography.pxToRem(12)
        },

        /* Styles applied to the root element if `size="small"`. */
        sizeSmall: {
          padding: '6px 24px 6px 16px',
          '&:last-child': {
            paddingRight: 16
          },
          '&$paddingCheckbox': {
            width: 24,
            // prevent the checkbox column from growing
            padding: '0 12px 0 16px',
            '&:last-child': {
              paddingLeft: 12,
              paddingRight: 16
            },
            '& > *': {
              padding: 0
            }
          }
        },

        /* Styles applied to the root element if `padding="checkbox"`. */
        paddingCheckbox: {
          width: 48,
          // prevent the checkbox column from growing
          padding: '0 0 0 4px',
          '&:last-child': {
            paddingLeft: 0,
            paddingRight: 4
          }
        },

        /* Styles applied to the root element if `padding="none"`. */
        paddingNone: {
          padding: 0,
          '&:last-child': {
            padding: 0
          }
        },

        /* Styles applied to the root element if `align="left"`. */
        alignLeft: {
          textAlign: 'left'
        },

        /* Styles applied to the root element if `align="center"`. */
        alignCenter: {
          textAlign: 'center'
        },

        /* Styles applied to the root element if `align="right"`. */
        alignRight: {
          textAlign: 'right',
          flexDirection: 'row-reverse'
        },

        /* Styles applied to the root element if `align="justify"`. */
        alignJustify: {
          textAlign: 'justify'
        },

        /* Styles applied to the root element if `context.table.stickyHeader={true}`. */
        stickyHeader: {
          position: 'sticky',
          top: 0,
          left: 0,
          zIndex: 2,
          backgroundColor: theme.palette.background.default
        }
      };
    };
    /**
     * The component renders a `<th>` element when the parent context is a header
     * or otherwise a `<td>` element.
     */

    var TableCell = /*#__PURE__*/React__namespace.forwardRef(function TableCell(props, ref) {
      var _props$align = props.align,
          align = _props$align === void 0 ? 'inherit' : _props$align,
          classes = props.classes,
          className = props.className,
          component = props.component,
          paddingProp = props.padding,
          scopeProp = props.scope,
          sizeProp = props.size,
          sortDirection = props.sortDirection,
          variantProp = props.variant,
          other = _objectWithoutProperties(props, ["align", "classes", "className", "component", "padding", "scope", "size", "sortDirection", "variant"]);

      var table = React__namespace.useContext(TableContext$1);
      var tablelvl2 = React__namespace.useContext(Tablelvl2Context$1);
      var isHeadCell = tablelvl2 && tablelvl2.variant === 'head';
      var role;
      var Component;

      if (component) {
        Component = component;
        role = isHeadCell ? 'columnheader' : 'cell';
      } else {
        Component = isHeadCell ? 'th' : 'td';
      }

      var scope = scopeProp;

      if (!scope && isHeadCell) {
        scope = 'col';
      }

      var padding = paddingProp || (table && table.padding ? table.padding : 'normal');
      var size = sizeProp || (table && table.size ? table.size : 'medium');
      var variant = variantProp || tablelvl2 && tablelvl2.variant;
      var ariaSort = null;

      if (sortDirection) {
        ariaSort = sortDirection === 'asc' ? 'ascending' : 'descending';
      }

      return /*#__PURE__*/React__namespace.createElement(Component, _extends$3({
        ref: ref,
        className: r$1(classes.root, classes[variant], className, align !== 'inherit' && classes["align".concat(capitalize(align))], padding !== 'normal' && classes["padding".concat(capitalize(padding))], size !== 'medium' && classes["size".concat(capitalize(size))], variant === 'head' && table && table.stickyHeader && classes.stickyHeader),
        "aria-sort": ariaSort,
        role: role,
        scope: scope
      }, other));
    });
    process.env.NODE_ENV !== "production" ? TableCell.propTypes = {
      /**
       * Set the text-align on the table cell content.
       *
       * Monetary or generally number fields **should be right aligned** as that allows
       * you to add them up quickly in your head without having to worry about decimals.
       */
      align: re.oneOf(['center', 'inherit', 'justify', 'left', 'right']),

      /**
       * The table cell contents.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: re
      /* @typescript-to-proptypes-ignore */
      .elementType,

      /**
       * Sets the padding applied to the cell.
       * By default, the Table parent component set the value (`normal`).
       * `default` is deprecated, use `normal` instead.
       */
      padding: chainPropTypes$1(re.oneOf(['normal', 'checkbox', 'none', 'default']), function (props) {
        if (props.padding === 'default') {
          return new Error('Material-UI: padding="default" was renamed to padding="normal" for consistency.');
        }

        return null;
      }),

      /**
       * Set scope attribute.
       */
      scope: re.string,

      /**
       * Specify the size of the cell.
       * By default, the Table parent component set the value (`medium`).
       */
      size: re.oneOf(['medium', 'small']),

      /**
       * Set aria-sort direction.
       */
      sortDirection: re.oneOf(['asc', 'desc', false]),

      /**
       * Specify the cell type.
       * By default, the TableHead, TableBody or TableFooter parent component set the value.
       */
      variant: re.oneOf(['body', 'footer', 'head'])
    } : void 0;
    var TableCell$1 = withStyles(styles$B, {
      name: 'MuiTableCell'
    })(TableCell);

    var styles$A = {
      /* Styles applied to the root element. */
      root: {
        width: '100%',
        overflowX: 'auto'
      }
    };
    var TableContainer = /*#__PURE__*/React__namespace.forwardRef(function TableContainer(props, ref) {
      var classes = props.classes,
          className = props.className,
          _props$component = props.component,
          Component = _props$component === void 0 ? 'div' : _props$component,
          other = _objectWithoutProperties(props, ["classes", "className", "component"]);

      return /*#__PURE__*/React__namespace.createElement(Component, _extends$3({
        ref: ref,
        className: r$1(classes.root, className)
      }, other));
    });
    process.env.NODE_ENV !== "production" ? TableContainer.propTypes = {
      /**
       * The table itself, normally `<Table />`
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object.isRequired,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: re
      /* @typescript-to-proptypes-ignore */
      .elementType
    } : void 0;
    var TableContainer$1 = withStyles(styles$A, {
      name: 'MuiTableContainer'
    })(TableContainer);

    var styles$z = {
      /* Styles applied to the root element. */
      root: {
        display: 'table-footer-group'
      }
    };
    var tablelvl2$1 = {
      variant: 'footer'
    };
    var defaultComponent$2 = 'tfoot';
    var TableFooter = /*#__PURE__*/React__namespace.forwardRef(function TableFooter(props, ref) {
      var classes = props.classes,
          className = props.className,
          _props$component = props.component,
          Component = _props$component === void 0 ? defaultComponent$2 : _props$component,
          other = _objectWithoutProperties(props, ["classes", "className", "component"]);

      return /*#__PURE__*/React__namespace.createElement(Tablelvl2Context$1.Provider, {
        value: tablelvl2$1
      }, /*#__PURE__*/React__namespace.createElement(Component, _extends$3({
        className: r$1(classes.root, className),
        ref: ref,
        role: Component === defaultComponent$2 ? null : 'rowgroup'
      }, other)));
    });
    process.env.NODE_ENV !== "production" ? TableFooter.propTypes = {
      /**
       * The content of the component, normally `TableRow`.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object.isRequired,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: re
      /* @typescript-to-proptypes-ignore */
      .elementType
    } : void 0;
    var TableFooter$1 = withStyles(styles$z, {
      name: 'MuiTableFooter'
    })(TableFooter);

    var styles$y = {
      /* Styles applied to the root element. */
      root: {
        display: 'table-header-group'
      }
    };
    var tablelvl2 = {
      variant: 'head'
    };
    var defaultComponent$1 = 'thead';
    var TableHead = /*#__PURE__*/React__namespace.forwardRef(function TableHead(props, ref) {
      var classes = props.classes,
          className = props.className,
          _props$component = props.component,
          Component = _props$component === void 0 ? defaultComponent$1 : _props$component,
          other = _objectWithoutProperties(props, ["classes", "className", "component"]);

      return /*#__PURE__*/React__namespace.createElement(Tablelvl2Context$1.Provider, {
        value: tablelvl2
      }, /*#__PURE__*/React__namespace.createElement(Component, _extends$3({
        className: r$1(classes.root, className),
        ref: ref,
        role: Component === defaultComponent$1 ? null : 'rowgroup'
      }, other)));
    });
    process.env.NODE_ENV !== "production" ? TableHead.propTypes = {
      /**
       * The content of the component, normally `TableRow`.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object.isRequired,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: re
      /* @typescript-to-proptypes-ignore */
      .elementType
    } : void 0;
    var TableHead$1 = withStyles(styles$y, {
      name: 'MuiTableHead'
    })(TableHead);

    var styles$x = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          position: 'relative',
          display: 'flex',
          alignItems: 'center'
        },

        /* Styles applied to the root element if `disableGutters={false}`. */
        gutters: _defineProperty({
          paddingLeft: theme.spacing(2),
          paddingRight: theme.spacing(2)
        }, theme.breakpoints.up('sm'), {
          paddingLeft: theme.spacing(3),
          paddingRight: theme.spacing(3)
        }),

        /* Styles applied to the root element if `variant="regular"`. */
        regular: theme.mixins.toolbar,

        /* Styles applied to the root element if `variant="dense"`. */
        dense: {
          minHeight: 48
        }
      };
    };
    var Toolbar = /*#__PURE__*/React__namespace.forwardRef(function Toolbar(props, ref) {
      var classes = props.classes,
          className = props.className,
          _props$component = props.component,
          Component = _props$component === void 0 ? 'div' : _props$component,
          _props$disableGutters = props.disableGutters,
          disableGutters = _props$disableGutters === void 0 ? false : _props$disableGutters,
          _props$variant = props.variant,
          variant = _props$variant === void 0 ? 'regular' : _props$variant,
          other = _objectWithoutProperties(props, ["classes", "className", "component", "disableGutters", "variant"]);

      return /*#__PURE__*/React__namespace.createElement(Component, _extends$3({
        className: r$1(classes.root, classes[variant], className, !disableGutters && classes.gutters),
        ref: ref
      }, other));
    });
    process.env.NODE_ENV !== "production" ? Toolbar.propTypes = {
      /**
       * Toolbar children, usually a mixture of `IconButton`, `Button` and `Typography`.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object.isRequired,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: re
      /* @typescript-to-proptypes-ignore */
      .elementType,

      /**
       * If `true`, disables gutter padding.
       */
      disableGutters: re.bool,

      /**
       * The variant to use.
       */
      variant: re.oneOf(['regular', 'dense'])
    } : void 0;
    var Toolbar$1 = withStyles(styles$x, {
      name: 'MuiToolbar'
    })(Toolbar);

    /**
     * @ignore - internal component.
     */

    var KeyboardArrowLeft = createSvgIcon$1( /*#__PURE__*/React__namespace.createElement("path", {
      d: "M15.41 16.09l-4.58-4.59 4.58-4.59L14 5.5l-6 6 6 6z"
    }), 'KeyboardArrowLeft');

    /**
     * @ignore - internal component.
     */

    var KeyboardArrowRight = createSvgIcon$1( /*#__PURE__*/React__namespace.createElement("path", {
      d: "M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"
    }), 'KeyboardArrowRight');

    /**
     * @ignore - internal component.
     */

    var _ref$3 = /*#__PURE__*/React__namespace.createElement(KeyboardArrowRight, null);

    var _ref2$2 = /*#__PURE__*/React__namespace.createElement(KeyboardArrowLeft, null);

    var _ref3 = /*#__PURE__*/React__namespace.createElement(KeyboardArrowLeft, null);

    var _ref4 = /*#__PURE__*/React__namespace.createElement(KeyboardArrowRight, null);

    var TablePaginationActions = /*#__PURE__*/React__namespace.forwardRef(function TablePaginationActions(props, ref) {
      var backIconButtonProps = props.backIconButtonProps,
          count = props.count,
          nextIconButtonProps = props.nextIconButtonProps,
          _props$onChangePage = props.onChangePage,
          onChangePage = _props$onChangePage === void 0 ? function () {} : _props$onChangePage,
          _props$onPageChange = props.onPageChange,
          onPageChange = _props$onPageChange === void 0 ? function () {} : _props$onPageChange,
          page = props.page,
          rowsPerPage = props.rowsPerPage,
          other = _objectWithoutProperties(props, ["backIconButtonProps", "count", "nextIconButtonProps", "onChangePage", "onPageChange", "page", "rowsPerPage"]);

      var theme = useTheme();

      var handleBackButtonClick = function handleBackButtonClick(event) {
        onChangePage(event, page - 1);
        onPageChange(event, page - 1);
      };

      var handleNextButtonClick = function handleNextButtonClick(event) {
        onChangePage(event, page + 1);
        onPageChange(event, page + 1);
      };

      return /*#__PURE__*/React__namespace.createElement("div", _extends$3({
        ref: ref
      }, other), /*#__PURE__*/React__namespace.createElement(IconButton$1, _extends$3({
        onClick: handleBackButtonClick,
        disabled: page === 0,
        color: "inherit"
      }, backIconButtonProps), theme.direction === 'rtl' ? _ref$3 : _ref2$2), /*#__PURE__*/React__namespace.createElement(IconButton$1, _extends$3({
        onClick: handleNextButtonClick,
        disabled: count !== -1 ? page >= Math.ceil(count / rowsPerPage) - 1 : false,
        color: "inherit"
      }, nextIconButtonProps), theme.direction === 'rtl' ? _ref3 : _ref4));
    });
    process.env.NODE_ENV !== "production" ? TablePaginationActions.propTypes = {
      /**
       * Props applied to the back arrow [`IconButton`](/api/icon-button/) element.
       */
      backIconButtonProps: re.object,

      /**
       * The total number of rows.
       */
      count: re.number.isRequired,

      /**
       * Props applied to the next arrow [`IconButton`](/api/icon-button/) element.
       */
      nextIconButtonProps: re.object,

      /**
       * Callback fired when the page is changed.
       *
       * @param {object} event The event source of the callback.
       * @param {number} page The page selected.
       */
      onChangePage: re.func,

      /**
       * Callback fired when the page is changed.
       *
       * @param {object} event The event source of the callback.
       * @param {number} page The page selected.
       */
      onPageChange: re.func,

      /**
       * The zero-based index of the current page.
       */
      page: re.number.isRequired,

      /**
       * The number of rows per page.
       */
      rowsPerPage: re.number.isRequired
    } : void 0;
    var TablePaginationActions$1 = TablePaginationActions;

    var styles$w = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          color: theme.palette.text.primary,
          fontSize: theme.typography.pxToRem(14),
          overflow: 'auto',
          // Increase the specificity to override TableCell.
          '&:last-child': {
            padding: 0
          }
        },

        /* Styles applied to the Toolbar component. */
        toolbar: {
          minHeight: 52,
          paddingRight: 2
        },

        /* Styles applied to the spacer element. */
        spacer: {
          flex: '1 1 100%'
        },

        /* Styles applied to the caption Typography components if `variant="caption"`. */
        caption: {
          flexShrink: 0
        },
        // TODO v5: `.selectRoot` should be merged with `.input`

        /* Styles applied to the Select component root element. */
        selectRoot: {
          marginRight: 32,
          marginLeft: 8
        },

        /* Styles applied to the Select component `select` class. */
        select: {
          paddingLeft: 8,
          paddingRight: 24,
          textAlign: 'right',
          textAlignLast: 'right' // Align <select> on Chrome.

        },
        // TODO v5: remove

        /* Styles applied to the Select component `icon` class. */
        selectIcon: {},

        /* Styles applied to the `InputBase` component. */
        input: {
          color: 'inherit',
          fontSize: 'inherit',
          flexShrink: 0
        },

        /* Styles applied to the MenuItem component. */
        menuItem: {},

        /* Styles applied to the internal `TablePaginationActions` component. */
        actions: {
          flexShrink: 0,
          marginLeft: 20
        }
      };
    };

    var defaultLabelDisplayedRows = function defaultLabelDisplayedRows(_ref) {
      var from = _ref.from,
          to = _ref.to,
          count = _ref.count;
      return "".concat(from, "-").concat(to, " of ").concat(count !== -1 ? count : "more than ".concat(to));
    };

    var defaultRowsPerPageOptions = [10, 25, 50, 100];
    /**
     * A `TableCell` based component for placing inside `TableFooter` for pagination.
     */

    var TablePagination = /*#__PURE__*/React__namespace.forwardRef(function TablePagination(props, ref) {
      var _props$ActionsCompone = props.ActionsComponent,
          ActionsComponent = _props$ActionsCompone === void 0 ? TablePaginationActions$1 : _props$ActionsCompone,
          backIconButtonProps = props.backIconButtonProps,
          _props$backIconButton = props.backIconButtonText,
          backIconButtonText = _props$backIconButton === void 0 ? 'Previous page' : _props$backIconButton,
          classes = props.classes,
          className = props.className,
          colSpanProp = props.colSpan,
          _props$component = props.component,
          Component = _props$component === void 0 ? TableCell$1 : _props$component,
          count = props.count,
          _props$labelDisplayed = props.labelDisplayedRows,
          labelDisplayedRows = _props$labelDisplayed === void 0 ? defaultLabelDisplayedRows : _props$labelDisplayed,
          _props$labelRowsPerPa = props.labelRowsPerPage,
          labelRowsPerPage = _props$labelRowsPerPa === void 0 ? 'Rows per page:' : _props$labelRowsPerPa,
          nextIconButtonProps = props.nextIconButtonProps,
          _props$nextIconButton = props.nextIconButtonText,
          nextIconButtonText = _props$nextIconButton === void 0 ? 'Next page' : _props$nextIconButton,
          onChangePage = props.onChangePage,
          onPageChange = props.onPageChange,
          onChangeRowsPerPageProp = props.onChangeRowsPerPage,
          onRowsPerPageChangeProp = props.onRowsPerPageChange,
          page = props.page,
          rowsPerPage = props.rowsPerPage,
          _props$rowsPerPageOpt = props.rowsPerPageOptions,
          rowsPerPageOptions = _props$rowsPerPageOpt === void 0 ? defaultRowsPerPageOptions : _props$rowsPerPageOpt,
          _props$SelectProps = props.SelectProps,
          SelectProps = _props$SelectProps === void 0 ? {} : _props$SelectProps,
          other = _objectWithoutProperties(props, ["ActionsComponent", "backIconButtonProps", "backIconButtonText", "classes", "className", "colSpan", "component", "count", "labelDisplayedRows", "labelRowsPerPage", "nextIconButtonProps", "nextIconButtonText", "onChangePage", "onPageChange", "onChangeRowsPerPage", "onRowsPerPageChange", "page", "rowsPerPage", "rowsPerPageOptions", "SelectProps"]);

      var onChangeRowsPerPage = onChangeRowsPerPageProp || onRowsPerPageChangeProp;
      var colSpan;

      if (Component === TableCell$1 || Component === 'td') {
        colSpan = colSpanProp || 1000; // col-span over everything
      }

      var selectId = useId();
      var labelId = useId();
      var MenuItemComponent = SelectProps.native ? 'option' : MenuItem$1;
      return /*#__PURE__*/React__namespace.createElement(Component, _extends$3({
        className: r$1(classes.root, className),
        colSpan: colSpan,
        ref: ref
      }, other), /*#__PURE__*/React__namespace.createElement(Toolbar$1, {
        className: classes.toolbar
      }, /*#__PURE__*/React__namespace.createElement("div", {
        className: classes.spacer
      }), rowsPerPageOptions.length > 1 && /*#__PURE__*/React__namespace.createElement(Typography$2, {
        color: "inherit",
        variant: "body2",
        className: classes.caption,
        id: labelId
      }, labelRowsPerPage), rowsPerPageOptions.length > 1 && /*#__PURE__*/React__namespace.createElement(Select$1, _extends$3({
        classes: {
          select: classes.select,
          icon: classes.selectIcon
        },
        input: /*#__PURE__*/React__namespace.createElement(v, {
          className: r$1(classes.input, classes.selectRoot)
        }),
        value: rowsPerPage,
        onChange: onChangeRowsPerPage,
        id: selectId,
        labelId: labelId
      }, SelectProps), rowsPerPageOptions.map(function (rowsPerPageOption) {
        return /*#__PURE__*/React__namespace.createElement(MenuItemComponent, {
          className: classes.menuItem,
          key: rowsPerPageOption.value ? rowsPerPageOption.value : rowsPerPageOption,
          value: rowsPerPageOption.value ? rowsPerPageOption.value : rowsPerPageOption
        }, rowsPerPageOption.label ? rowsPerPageOption.label : rowsPerPageOption);
      })), /*#__PURE__*/React__namespace.createElement(Typography$2, {
        color: "inherit",
        variant: "body2",
        className: classes.caption
      }, labelDisplayedRows({
        from: count === 0 ? 0 : page * rowsPerPage + 1,
        to: count !== -1 ? Math.min(count, (page + 1) * rowsPerPage) : (page + 1) * rowsPerPage,
        count: count === -1 ? -1 : count,
        page: page
      })), /*#__PURE__*/React__namespace.createElement(ActionsComponent, {
        className: classes.actions,
        backIconButtonProps: _extends$3({
          title: backIconButtonText,
          'aria-label': backIconButtonText
        }, backIconButtonProps),
        count: count,
        nextIconButtonProps: _extends$3({
          title: nextIconButtonText,
          'aria-label': nextIconButtonText
        }, nextIconButtonProps),
        onChangePage: onChangePage,
        onPageChange: onPageChange,
        page: page,
        rowsPerPage: rowsPerPage
      })));
    });
    process.env.NODE_ENV !== "production" ? TablePagination.propTypes = {
      /**
       * The component used for displaying the actions.
       * Either a string to use a HTML element or a component.
       */
      ActionsComponent: re.elementType,

      /**
       * Props applied to the back arrow [`IconButton`](/api/icon-button/) component.
       */
      backIconButtonProps: re.object,

      /**
       * Text label for the back arrow icon button.
       *
       * For localization purposes, you can use the provided [translations](/guides/localization/).
       */
      backIconButtonText: re.string,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object.isRequired,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * @ignore
       */
      colSpan: re.number,

      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: re
      /* @typescript-to-proptypes-ignore */
      .elementType,

      /**
       * The total number of rows.
       *
       * To enable server side pagination for an unknown number of items, provide -1.
       */
      count: re.number.isRequired,

      /**
       * Customize the displayed rows label. Invoked with a `{ from, to, count, page }`
       * object.
       *
       * For localization purposes, you can use the provided [translations](/guides/localization/).
       */
      labelDisplayedRows: re.func,

      /**
       * Customize the rows per page label.
       *
       * For localization purposes, you can use the provided [translations](/guides/localization/).
       */
      labelRowsPerPage: re.node,

      /**
       * Props applied to the next arrow [`IconButton`](/api/icon-button/) element.
       */
      nextIconButtonProps: re.object,

      /**
       * Text label for the next arrow icon button.
       *
       * For localization purposes, you can use the provided [translations](/guides/localization/).
       */
      nextIconButtonText: re.string,

      /**
       * Callback fired when the page is changed.
       *
       * @param {object} event The event source of the callback.
       * @param {number} page The page selected.
       * @deprecated Use the onPageChange prop instead.
       */
      onChangePage: deprecatedPropType(re.func, 'Use the `onPageChange` prop instead.'),

      /**
       * Callback fired when the number of rows per page is changed.
       *
       * @param {object} event The event source of the callback.
       * @deprecated Use the onRowsPerPageChange prop instead.
       */
      onChangeRowsPerPage: deprecatedPropType(re.func, 'Use the `onRowsPerPageChange` prop instead.'),

      /**
       * Callback fired when the page is changed.
       *
       * @param {object} event The event source of the callback.
       * @param {number} page The page selected.
       */
      onPageChange: re.func.isRequired,

      /**
       * Callback fired when the number of rows per page is changed.
       *
       * @param {object} event The event source of the callback.
       */
      onRowsPerPageChange: re.func,

      /**
       * The zero-based index of the current page.
       */
      page: chainPropTypes$1(re.number.isRequired, function (props) {
        var count = props.count,
            page = props.page,
            rowsPerPage = props.rowsPerPage;

        if (count === -1) {
          return null;
        }

        var newLastPage = Math.max(0, Math.ceil(count / rowsPerPage) - 1);

        if (page < 0 || page > newLastPage) {
          return new Error('Material-UI: The page prop of a TablePagination is out of range ' + "(0 to ".concat(newLastPage, ", but page is ").concat(page, ")."));
        }

        return null;
      }),

      /**
       * The number of rows per page.
       */
      rowsPerPage: re.number.isRequired,

      /**
       * Customizes the options of the rows per page select field. If less than two options are
       * available, no select field will be displayed.
       */
      rowsPerPageOptions: re.array,

      /**
       * Props applied to the rows per page [`Select`](/api/select/) element.
       */
      SelectProps: re.object
    } : void 0;
    var _$1 = withStyles(styles$w, {
      name: 'MuiTablePagination'
    })(TablePagination);

    var styles$v = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          color: 'inherit',
          display: 'table-row',
          verticalAlign: 'middle',
          // We disable the focus ring for mouse, touch and keyboard users.
          outline: 0,
          '&$hover:hover': {
            backgroundColor: theme.palette.action.hover
          },
          '&$selected, &$selected:hover': {
            backgroundColor: alpha(theme.palette.secondary.main, theme.palette.action.selectedOpacity)
          }
        },

        /* Pseudo-class applied to the root element if `selected={true}`. */
        selected: {},

        /* Pseudo-class applied to the root element if `hover={true}`. */
        hover: {},

        /* Styles applied to the root element if table variant="head". */
        head: {},

        /* Styles applied to the root element if table variant="footer". */
        footer: {}
      };
    };
    var defaultComponent = 'tr';
    /**
     * Will automatically set dynamic row height
     * based on the material table element parent (head, body, etc).
     */

    var TableRow = /*#__PURE__*/React__namespace.forwardRef(function TableRow(props, ref) {
      var classes = props.classes,
          className = props.className,
          _props$component = props.component,
          Component = _props$component === void 0 ? defaultComponent : _props$component,
          _props$hover = props.hover,
          hover = _props$hover === void 0 ? false : _props$hover,
          _props$selected = props.selected,
          selected = _props$selected === void 0 ? false : _props$selected,
          other = _objectWithoutProperties(props, ["classes", "className", "component", "hover", "selected"]);

      var tablelvl2 = React__namespace.useContext(Tablelvl2Context$1);
      return /*#__PURE__*/React__namespace.createElement(Component, _extends$3({
        ref: ref,
        className: r$1(classes.root, className, tablelvl2 && {
          'head': classes.head,
          'footer': classes.footer
        }[tablelvl2.variant], hover && classes.hover, selected && classes.selected),
        role: Component === defaultComponent ? null : 'row'
      }, other));
    });
    process.env.NODE_ENV !== "production" ? TableRow.propTypes = {
      /**
       * Should be valid <tr> children such as `TableCell`.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object.isRequired,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: re
      /* @typescript-to-proptypes-ignore */
      .elementType,

      /**
       * If `true`, the table row will shade on hover.
       */
      hover: re.bool,

      /**
       * If `true`, the table row will have the selected shading.
       */
      selected: re.bool
    } : void 0;
    var TableRow$1 = withStyles(styles$v, {
      name: 'MuiTableRow'
    })(TableRow);

    /**
     * @ignore - internal component.
     */

    var ArrowDownwardIcon = createSvgIcon$1( /*#__PURE__*/React__namespace.createElement("path", {
      d: "M20 12l-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z"
    }), 'ArrowDownward');

    var styles$u = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          cursor: 'pointer',
          display: 'inline-flex',
          justifyContent: 'flex-start',
          flexDirection: 'inherit',
          alignItems: 'center',
          '&:focus': {
            color: theme.palette.text.secondary
          },
          '&:hover': {
            color: theme.palette.text.secondary,
            '& $icon': {
              opacity: 0.5
            }
          },
          '&$active': {
            color: theme.palette.text.primary,
            // && instead of & is a workaround for https://github.com/cssinjs/jss/issues/1045
            '&& $icon': {
              opacity: 1,
              color: theme.palette.text.secondary
            }
          }
        },

        /* Pseudo-class applied to the root element if `active={true}`. */
        active: {},

        /* Styles applied to the icon component. */
        icon: {
          fontSize: 18,
          marginRight: 4,
          marginLeft: 4,
          opacity: 0,
          transition: theme.transitions.create(['opacity', 'transform'], {
            duration: theme.transitions.duration.shorter
          }),
          userSelect: 'none'
        },

        /* Styles applied to the icon component if `direction="desc"`. */
        iconDirectionDesc: {
          transform: 'rotate(0deg)'
        },

        /* Styles applied to the icon component if `direction="asc"`. */
        iconDirectionAsc: {
          transform: 'rotate(180deg)'
        }
      };
    };
    /**
     * A button based label for placing inside `TableCell` for column sorting.
     */

    var TableSortLabel = /*#__PURE__*/React__namespace.forwardRef(function TableSortLabel(props, ref) {
      var _props$active = props.active,
          active = _props$active === void 0 ? false : _props$active,
          children = props.children,
          classes = props.classes,
          className = props.className,
          _props$direction = props.direction,
          direction = _props$direction === void 0 ? 'asc' : _props$direction,
          _props$hideSortIcon = props.hideSortIcon,
          hideSortIcon = _props$hideSortIcon === void 0 ? false : _props$hideSortIcon,
          _props$IconComponent = props.IconComponent,
          IconComponent = _props$IconComponent === void 0 ? ArrowDownwardIcon : _props$IconComponent,
          other = _objectWithoutProperties(props, ["active", "children", "classes", "className", "direction", "hideSortIcon", "IconComponent"]);

      return /*#__PURE__*/React__namespace.createElement(ButtonBase$1, _extends$3({
        className: r$1(classes.root, className, active && classes.active),
        component: "span",
        disableRipple: true,
        ref: ref
      }, other), children, hideSortIcon && !active ? null : /*#__PURE__*/React__namespace.createElement(IconComponent, {
        className: r$1(classes.icon, classes["iconDirection".concat(capitalize(direction))])
      }));
    });
    process.env.NODE_ENV !== "production" ? TableSortLabel.propTypes = {
      /**
       * If `true`, the label will have the active styling (should be true for the sorted column).
       */
      active: re.bool,

      /**
       * Label contents, the arrow will be appended automatically.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object.isRequired,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * The current sort direction.
       */
      direction: re.oneOf(['asc', 'desc']),

      /**
       * Hide sort icon when active is false.
       */
      hideSortIcon: re.bool,

      /**
       * Sort icon to use.
       */
      IconComponent: re.elementType
    } : void 0;
    var TableSortLabel$1 = withStyles(styles$u, {
      name: 'MuiTableSortLabel'
    })(TableSortLabel);

    // Source from https://github.com/alitaheri/normalize-scroll-left
    var cachedType;
    /**
     * Based on the jquery plugin https://github.com/othree/jquery.rtl-scroll-type
     *
     * Types of scrollLeft, assuming scrollWidth=100 and direction is rtl.
     *
     * Type             | <- Most Left | Most Right -> | Initial
     * ---------------- | ------------ | ------------- | -------
     * default          | 0            | 100           | 100
     * negative (spec*) | -100         | 0             | 0
     * reverse          | 100          | 0             | 0
     *
     * Edge 85: default
     * Safari 14: negative
     * Chrome 85: negative
     * Firefox 81: negative
     * IE 11: reverse
     *
     * spec* https://drafts.csswg.org/cssom-view/#dom-window-scroll
     */

    function detectScrollType() {
      if (cachedType) {
        return cachedType;
      }

      var dummy = document.createElement('div');
      var container = document.createElement('div');
      container.style.width = '10px';
      container.style.height = '1px';
      dummy.appendChild(container);
      dummy.dir = 'rtl';
      dummy.style.fontSize = '14px';
      dummy.style.width = '4px';
      dummy.style.height = '1px';
      dummy.style.position = 'absolute';
      dummy.style.top = '-1000px';
      dummy.style.overflow = 'scroll';
      document.body.appendChild(dummy);
      cachedType = 'reverse';

      if (dummy.scrollLeft > 0) {
        cachedType = 'default';
      } else {
        dummy.scrollLeft = 1;

        if (dummy.scrollLeft === 0) {
          cachedType = 'negative';
        }
      }

      document.body.removeChild(dummy);
      return cachedType;
    } // Based on https://stackoverflow.com/a/24394376

    function getNormalizedScrollLeft(element, direction) {
      var scrollLeft = element.scrollLeft; // Perform the calculations only when direction is rtl to avoid messing up the ltr bahavior

      if (direction !== 'rtl') {
        return scrollLeft;
      }

      var type = detectScrollType();

      switch (type) {
        case 'negative':
          return element.scrollWidth - element.clientWidth + scrollLeft;

        case 'reverse':
          return element.scrollWidth - element.clientWidth - scrollLeft;

        default:
          return scrollLeft;
      }
    }

    function easeInOutSin(time) {
      return (1 + Math.sin(Math.PI * time - Math.PI / 2)) / 2;
    }

    function animate(property, element, to) {
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      var cb = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : function () {};
      var _options$ease = options.ease,
          ease = _options$ease === void 0 ? easeInOutSin : _options$ease,
          _options$duration = options.duration,
          duration = _options$duration === void 0 ? 300 : _options$duration;
      var start = null;
      var from = element[property];
      var cancelled = false;

      var cancel = function cancel() {
        cancelled = true;
      };

      var step = function step(timestamp) {
        if (cancelled) {
          cb(new Error('Animation cancelled'));
          return;
        }

        if (start === null) {
          start = timestamp;
        }

        var time = Math.min(1, (timestamp - start) / duration);
        element[property] = ease(time) * (to - from) + from;

        if (time >= 1) {
          requestAnimationFrame(function () {
            cb(null);
          });
          return;
        }

        requestAnimationFrame(step);
      };

      if (from === to) {
        cb(new Error('Element already at target position'));
        return cancel;
      }

      requestAnimationFrame(step);
      return cancel;
    }

    var styles$t = {
      width: 99,
      height: 99,
      position: 'absolute',
      top: -9999,
      overflow: 'scroll'
    };
    /**
     * @ignore - internal component.
     * The component originates from https://github.com/STORIS/react-scrollbar-size.
     * It has been moved into the core in order to minimize the bundle size.
     */

    function ScrollbarSize(props) {
      var onChange = props.onChange,
          other = _objectWithoutProperties(props, ["onChange"]);

      var scrollbarHeight = React__namespace.useRef();
      var nodeRef = React__namespace.useRef(null);

      var setMeasurements = function setMeasurements() {
        scrollbarHeight.current = nodeRef.current.offsetHeight - nodeRef.current.clientHeight;
      };

      React__namespace.useEffect(function () {
        var handleResize = debounce$1(function () {
          var prevHeight = scrollbarHeight.current;
          setMeasurements();

          if (prevHeight !== scrollbarHeight.current) {
            onChange(scrollbarHeight.current);
          }
        });
        window.addEventListener('resize', handleResize);
        return function () {
          handleResize.clear();
          window.removeEventListener('resize', handleResize);
        };
      }, [onChange]);
      React__namespace.useEffect(function () {
        setMeasurements();
        onChange(scrollbarHeight.current);
      }, [onChange]);
      return /*#__PURE__*/React__namespace.createElement("div", _extends$3({
        style: styles$t,
        ref: nodeRef
      }, other));
    }
    process.env.NODE_ENV !== "production" ? ScrollbarSize.propTypes = {
      onChange: re.func.isRequired
    } : void 0;

    var styles$s = function styles(theme) {
      return {
        root: {
          position: 'absolute',
          height: 2,
          bottom: 0,
          width: '100%',
          transition: theme.transitions.create()
        },
        colorPrimary: {
          backgroundColor: theme.palette.primary.main
        },
        colorSecondary: {
          backgroundColor: theme.palette.secondary.main
        },
        vertical: {
          height: '100%',
          width: 2,
          right: 0
        }
      };
    };
    /**
     * @ignore - internal component.
     */

    var TabIndicator = /*#__PURE__*/React__namespace.forwardRef(function TabIndicator(props, ref) {
      var classes = props.classes,
          className = props.className,
          color = props.color,
          orientation = props.orientation,
          other = _objectWithoutProperties(props, ["classes", "className", "color", "orientation"]);

      return /*#__PURE__*/React__namespace.createElement("span", _extends$3({
        className: r$1(classes.root, classes["color".concat(capitalize(color))], className, orientation === 'vertical' && classes.vertical),
        ref: ref
      }, other));
    });
    process.env.NODE_ENV !== "production" ? TabIndicator.propTypes = {
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object.isRequired,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * @ignore
       * The color of the tab indicator.
       */
      color: re.oneOf(['primary', 'secondary']).isRequired,

      /**
       * The tabs orientation (layout flow direction).
       */
      orientation: re.oneOf(['horizontal', 'vertical']).isRequired
    } : void 0;
    var TabIndicator$1 = withStyles(styles$s, {
      name: 'PrivateTabIndicator'
    })(TabIndicator);

    var styles$r = {
      /* Styles applied to the root element. */
      root: {
        width: 40,
        flexShrink: 0,
        opacity: 0.8,
        '&$disabled': {
          opacity: 0
        }
      },

      /* Styles applied to the root element if `orientation="vertical"`. */
      vertical: {
        width: '100%',
        height: 40,
        '& svg': {
          transform: 'rotate(90deg)'
        }
      },

      /* Pseudo-class applied to the root element if `disabled={true}`. */
      disabled: {}
    };

    var _ref$2 = /*#__PURE__*/React__namespace.createElement(KeyboardArrowLeft, {
      fontSize: "small"
    });

    var _ref2$1 = /*#__PURE__*/React__namespace.createElement(KeyboardArrowRight, {
      fontSize: "small"
    });

    var TabScrollButton = /*#__PURE__*/React__namespace.forwardRef(function TabScrollButton(props, ref) {
      var classes = props.classes,
          classNameProp = props.className,
          direction = props.direction,
          orientation = props.orientation,
          disabled = props.disabled,
          other = _objectWithoutProperties(props, ["classes", "className", "direction", "orientation", "disabled"]);

      return /*#__PURE__*/React__namespace.createElement(ButtonBase$1, _extends$3({
        component: "div",
        className: r$1(classes.root, classNameProp, disabled && classes.disabled, orientation === 'vertical' && classes.vertical),
        ref: ref,
        role: null,
        tabIndex: null
      }, other), direction === 'left' ? _ref$2 : _ref2$1);
    });
    process.env.NODE_ENV !== "production" ? TabScrollButton.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * The content of the component.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * Which direction should the button indicate?
       */
      direction: re.oneOf(['left', 'right']).isRequired,

      /**
       * If `true`, the element will be disabled.
       */
      disabled: re.bool,

      /**
       * The tabs orientation (layout flow direction).
       */
      orientation: re.oneOf(['horizontal', 'vertical']).isRequired
    } : void 0;
    var TabScrollButton$1 = withStyles(styles$r, {
      name: 'MuiTabScrollButton'
    })(TabScrollButton);

    var styles$q = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          overflow: 'hidden',
          minHeight: 48,
          WebkitOverflowScrolling: 'touch',
          // Add iOS momentum scrolling.
          display: 'flex'
        },

        /* Styles applied to the root element if `orientation="vertical"`. */
        vertical: {
          flexDirection: 'column'
        },

        /* Styles applied to the flex container element. */
        flexContainer: {
          display: 'flex'
        },

        /* Styles applied to the flex container element if `orientation="vertical"`. */
        flexContainerVertical: {
          flexDirection: 'column'
        },

        /* Styles applied to the flex container element if `centered={true}` & `!variant="scrollable"`. */
        centered: {
          justifyContent: 'center'
        },

        /* Styles applied to the tablist element. */
        scroller: {
          position: 'relative',
          display: 'inline-block',
          flex: '1 1 auto',
          whiteSpace: 'nowrap'
        },

        /* Styles applied to the tablist element if `!variant="scrollable"`. */
        fixed: {
          overflowX: 'hidden',
          width: '100%'
        },

        /* Styles applied to the tablist element if `variant="scrollable"`. */
        scrollable: {
          overflowX: 'scroll',
          // Hide dimensionless scrollbar on MacOS
          scrollbarWidth: 'none',
          // Firefox
          '&::-webkit-scrollbar': {
            display: 'none' // Safari + Chrome

          }
        },

        /* Styles applied to the `ScrollButtonComponent` component. */
        scrollButtons: {},

        /* Styles applied to the `ScrollButtonComponent` component if `scrollButtons="auto"` or scrollButtons="desktop"`. */
        scrollButtonsDesktop: _defineProperty({}, theme.breakpoints.down('xs'), {
          display: 'none'
        }),

        /* Styles applied to the `TabIndicator` component. */
        indicator: {}
      };
    };
    var Tabs = /*#__PURE__*/React__namespace.forwardRef(function Tabs(props, ref) {
      var ariaLabel = props['aria-label'],
          ariaLabelledBy = props['aria-labelledby'],
          action = props.action,
          _props$centered = props.centered,
          centered = _props$centered === void 0 ? false : _props$centered,
          childrenProp = props.children,
          classes = props.classes,
          className = props.className,
          _props$component = props.component,
          Component = _props$component === void 0 ? 'div' : _props$component,
          _props$indicatorColor = props.indicatorColor,
          indicatorColor = _props$indicatorColor === void 0 ? 'secondary' : _props$indicatorColor,
          onChange = props.onChange,
          _props$orientation = props.orientation,
          orientation = _props$orientation === void 0 ? 'horizontal' : _props$orientation,
          _props$ScrollButtonCo = props.ScrollButtonComponent,
          ScrollButtonComponent = _props$ScrollButtonCo === void 0 ? TabScrollButton$1 : _props$ScrollButtonCo,
          _props$scrollButtons = props.scrollButtons,
          scrollButtons = _props$scrollButtons === void 0 ? 'auto' : _props$scrollButtons,
          selectionFollowsFocus = props.selectionFollowsFocus,
          _props$TabIndicatorPr = props.TabIndicatorProps,
          TabIndicatorProps = _props$TabIndicatorPr === void 0 ? {} : _props$TabIndicatorPr,
          TabScrollButtonProps = props.TabScrollButtonProps,
          _props$textColor = props.textColor,
          textColor = _props$textColor === void 0 ? 'inherit' : _props$textColor,
          value = props.value,
          _props$variant = props.variant,
          variant = _props$variant === void 0 ? 'standard' : _props$variant,
          other = _objectWithoutProperties(props, ["aria-label", "aria-labelledby", "action", "centered", "children", "classes", "className", "component", "indicatorColor", "onChange", "orientation", "ScrollButtonComponent", "scrollButtons", "selectionFollowsFocus", "TabIndicatorProps", "TabScrollButtonProps", "textColor", "value", "variant"]);

      var theme = useTheme();
      var scrollable = variant === 'scrollable';
      var isRtl = theme.direction === 'rtl';
      var vertical = orientation === 'vertical';
      var scrollStart = vertical ? 'scrollTop' : 'scrollLeft';
      var start = vertical ? 'top' : 'left';
      var end = vertical ? 'bottom' : 'right';
      var clientSize = vertical ? 'clientHeight' : 'clientWidth';
      var size = vertical ? 'height' : 'width';

      if (process.env.NODE_ENV !== 'production') {
        if (centered && scrollable) {
          console.error('Material-UI: You can not use the `centered={true}` and `variant="scrollable"` properties ' + 'at the same time on a `Tabs` component.');
        }
      }

      var _React$useState = React__namespace.useState(false),
          mounted = _React$useState[0],
          setMounted = _React$useState[1];

      var _React$useState2 = React__namespace.useState({}),
          indicatorStyle = _React$useState2[0],
          setIndicatorStyle = _React$useState2[1];

      var _React$useState3 = React__namespace.useState({
        start: false,
        end: false
      }),
          displayScroll = _React$useState3[0],
          setDisplayScroll = _React$useState3[1];

      var _React$useState4 = React__namespace.useState({
        overflow: 'hidden',
        marginBottom: null
      }),
          scrollerStyle = _React$useState4[0],
          setScrollerStyle = _React$useState4[1];

      var valueToIndex = new Map();
      var tabsRef = React__namespace.useRef(null);
      var tabListRef = React__namespace.useRef(null);

      var getTabsMeta = function getTabsMeta() {
        var tabsNode = tabsRef.current;
        var tabsMeta;

        if (tabsNode) {
          var rect = tabsNode.getBoundingClientRect(); // create a new object with ClientRect class props + scrollLeft

          tabsMeta = {
            clientWidth: tabsNode.clientWidth,
            scrollLeft: tabsNode.scrollLeft,
            scrollTop: tabsNode.scrollTop,
            scrollLeftNormalized: getNormalizedScrollLeft(tabsNode, theme.direction),
            scrollWidth: tabsNode.scrollWidth,
            top: rect.top,
            bottom: rect.bottom,
            left: rect.left,
            right: rect.right
          };
        }

        var tabMeta;

        if (tabsNode && value !== false) {
          var _children = tabListRef.current.children;

          if (_children.length > 0) {
            var tab = _children[valueToIndex.get(value)];

            if (process.env.NODE_ENV !== 'production') {
              if (!tab) {
                console.error(["Material-UI: The value provided to the Tabs component is invalid.", "None of the Tabs' children match with `".concat(value, "`."), valueToIndex.keys ? "You can provide one of the following values: ".concat(Array.from(valueToIndex.keys()).join(', '), ".") : null].join('\n'));
              }
            }

            tabMeta = tab ? tab.getBoundingClientRect() : null;
          }
        }

        return {
          tabsMeta: tabsMeta,
          tabMeta: tabMeta
        };
      };

      var updateIndicatorState = useEventCallback(function () {
        var _newIndicatorStyle;

        var _getTabsMeta = getTabsMeta(),
            tabsMeta = _getTabsMeta.tabsMeta,
            tabMeta = _getTabsMeta.tabMeta;

        var startValue = 0;

        if (tabMeta && tabsMeta) {
          if (vertical) {
            startValue = tabMeta.top - tabsMeta.top + tabsMeta.scrollTop;
          } else {
            var correction = isRtl ? tabsMeta.scrollLeftNormalized + tabsMeta.clientWidth - tabsMeta.scrollWidth : tabsMeta.scrollLeft;
            startValue = tabMeta.left - tabsMeta.left + correction;
          }
        }

        var newIndicatorStyle = (_newIndicatorStyle = {}, _defineProperty(_newIndicatorStyle, start, startValue), _defineProperty(_newIndicatorStyle, size, tabMeta ? tabMeta[size] : 0), _newIndicatorStyle);

        if (isNaN(indicatorStyle[start]) || isNaN(indicatorStyle[size])) {
          setIndicatorStyle(newIndicatorStyle);
        } else {
          var dStart = Math.abs(indicatorStyle[start] - newIndicatorStyle[start]);
          var dSize = Math.abs(indicatorStyle[size] - newIndicatorStyle[size]);

          if (dStart >= 1 || dSize >= 1) {
            setIndicatorStyle(newIndicatorStyle);
          }
        }
      });

      var scroll = function scroll(scrollValue) {
        animate(scrollStart, tabsRef.current, scrollValue);
      };

      var moveTabsScroll = function moveTabsScroll(delta) {
        var scrollValue = tabsRef.current[scrollStart];

        if (vertical) {
          scrollValue += delta;
        } else {
          scrollValue += delta * (isRtl ? -1 : 1); // Fix for Edge

          scrollValue *= isRtl && detectScrollType() === 'reverse' ? -1 : 1;
        }

        scroll(scrollValue);
      };

      var handleStartScrollClick = function handleStartScrollClick() {
        moveTabsScroll(-tabsRef.current[clientSize]);
      };

      var handleEndScrollClick = function handleEndScrollClick() {
        moveTabsScroll(tabsRef.current[clientSize]);
      };

      var handleScrollbarSizeChange = React__namespace.useCallback(function (scrollbarHeight) {
        setScrollerStyle({
          overflow: null,
          marginBottom: -scrollbarHeight
        });
      }, []);

      var getConditionalElements = function getConditionalElements() {
        var conditionalElements = {};
        conditionalElements.scrollbarSizeListener = scrollable ? /*#__PURE__*/React__namespace.createElement(ScrollbarSize, {
          className: classes.scrollable,
          onChange: handleScrollbarSizeChange
        }) : null;
        var scrollButtonsActive = displayScroll.start || displayScroll.end;
        var showScrollButtons = scrollable && (scrollButtons === 'auto' && scrollButtonsActive || scrollButtons === 'desktop' || scrollButtons === 'on');
        conditionalElements.scrollButtonStart = showScrollButtons ? /*#__PURE__*/React__namespace.createElement(ScrollButtonComponent, _extends$3({
          orientation: orientation,
          direction: isRtl ? 'right' : 'left',
          onClick: handleStartScrollClick,
          disabled: !displayScroll.start,
          className: r$1(classes.scrollButtons, scrollButtons !== 'on' && classes.scrollButtonsDesktop)
        }, TabScrollButtonProps)) : null;
        conditionalElements.scrollButtonEnd = showScrollButtons ? /*#__PURE__*/React__namespace.createElement(ScrollButtonComponent, _extends$3({
          orientation: orientation,
          direction: isRtl ? 'left' : 'right',
          onClick: handleEndScrollClick,
          disabled: !displayScroll.end,
          className: r$1(classes.scrollButtons, scrollButtons !== 'on' && classes.scrollButtonsDesktop)
        }, TabScrollButtonProps)) : null;
        return conditionalElements;
      };

      var scrollSelectedIntoView = useEventCallback(function () {
        var _getTabsMeta2 = getTabsMeta(),
            tabsMeta = _getTabsMeta2.tabsMeta,
            tabMeta = _getTabsMeta2.tabMeta;

        if (!tabMeta || !tabsMeta) {
          return;
        }

        if (tabMeta[start] < tabsMeta[start]) {
          // left side of button is out of view
          var nextScrollStart = tabsMeta[scrollStart] + (tabMeta[start] - tabsMeta[start]);
          scroll(nextScrollStart);
        } else if (tabMeta[end] > tabsMeta[end]) {
          // right side of button is out of view
          var _nextScrollStart = tabsMeta[scrollStart] + (tabMeta[end] - tabsMeta[end]);

          scroll(_nextScrollStart);
        }
      });
      var updateScrollButtonState = useEventCallback(function () {
        if (scrollable && scrollButtons !== 'off') {
          var _tabsRef$current = tabsRef.current,
              scrollTop = _tabsRef$current.scrollTop,
              scrollHeight = _tabsRef$current.scrollHeight,
              clientHeight = _tabsRef$current.clientHeight,
              scrollWidth = _tabsRef$current.scrollWidth,
              clientWidth = _tabsRef$current.clientWidth;
          var showStartScroll;
          var showEndScroll;

          if (vertical) {
            showStartScroll = scrollTop > 1;
            showEndScroll = scrollTop < scrollHeight - clientHeight - 1;
          } else {
            var scrollLeft = getNormalizedScrollLeft(tabsRef.current, theme.direction); // use 1 for the potential rounding error with browser zooms.

            showStartScroll = isRtl ? scrollLeft < scrollWidth - clientWidth - 1 : scrollLeft > 1;
            showEndScroll = !isRtl ? scrollLeft < scrollWidth - clientWidth - 1 : scrollLeft > 1;
          }

          if (showStartScroll !== displayScroll.start || showEndScroll !== displayScroll.end) {
            setDisplayScroll({
              start: showStartScroll,
              end: showEndScroll
            });
          }
        }
      });
      React__namespace.useEffect(function () {
        var handleResize = debounce$1(function () {
          updateIndicatorState();
          updateScrollButtonState();
        });
        var win = ownerWindow(tabsRef.current);
        win.addEventListener('resize', handleResize);
        return function () {
          handleResize.clear();
          win.removeEventListener('resize', handleResize);
        };
      }, [updateIndicatorState, updateScrollButtonState]);
      var handleTabsScroll = React__namespace.useCallback(debounce$1(function () {
        updateScrollButtonState();
      }));
      React__namespace.useEffect(function () {
        return function () {
          handleTabsScroll.clear();
        };
      }, [handleTabsScroll]);
      React__namespace.useEffect(function () {
        setMounted(true);
      }, []);
      React__namespace.useEffect(function () {
        updateIndicatorState();
        updateScrollButtonState();
      });
      React__namespace.useEffect(function () {
        scrollSelectedIntoView();
      }, [scrollSelectedIntoView, indicatorStyle]);
      React__namespace.useImperativeHandle(action, function () {
        return {
          updateIndicator: updateIndicatorState,
          updateScrollButtons: updateScrollButtonState
        };
      }, [updateIndicatorState, updateScrollButtonState]);
      var indicator = /*#__PURE__*/React__namespace.createElement(TabIndicator$1, _extends$3({
        className: classes.indicator,
        orientation: orientation,
        color: indicatorColor
      }, TabIndicatorProps, {
        style: _extends$3({}, indicatorStyle, TabIndicatorProps.style)
      }));
      var childIndex = 0;
      var children = React__namespace.Children.map(childrenProp, function (child) {
        if (! /*#__PURE__*/React__namespace.isValidElement(child)) {
          return null;
        }

        if (process.env.NODE_ENV !== 'production') {
          if (reactIs$2.exports.isFragment(child)) {
            console.error(["Material-UI: The Tabs component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n'));
          }
        }

        var childValue = child.props.value === undefined ? childIndex : child.props.value;
        valueToIndex.set(childValue, childIndex);
        var selected = childValue === value;
        childIndex += 1;
        return /*#__PURE__*/React__namespace.cloneElement(child, {
          fullWidth: variant === 'fullWidth',
          indicator: selected && !mounted && indicator,
          selected: selected,
          selectionFollowsFocus: selectionFollowsFocus,
          onChange: onChange,
          textColor: textColor,
          value: childValue
        });
      });

      var handleKeyDown = function handleKeyDown(event) {
        var target = event.target; // Keyboard navigation assumes that [role="tab"] are siblings
        // though we might warn in the future about nested, interactive elements
        // as a a11y violation

        var role = target.getAttribute('role');

        if (role !== 'tab') {
          return;
        }

        var newFocusTarget = null;
        var previousItemKey = orientation !== "vertical" ? 'ArrowLeft' : 'ArrowUp';
        var nextItemKey = orientation !== "vertical" ? 'ArrowRight' : 'ArrowDown';

        if (orientation !== "vertical" && theme.direction === 'rtl') {
          // swap previousItemKey with nextItemKey
          previousItemKey = 'ArrowRight';
          nextItemKey = 'ArrowLeft';
        }

        switch (event.key) {
          case previousItemKey:
            newFocusTarget = target.previousElementSibling || tabListRef.current.lastChild;
            break;

          case nextItemKey:
            newFocusTarget = target.nextElementSibling || tabListRef.current.firstChild;
            break;

          case 'Home':
            newFocusTarget = tabListRef.current.firstChild;
            break;

          case 'End':
            newFocusTarget = tabListRef.current.lastChild;
            break;
        }

        if (newFocusTarget !== null) {
          newFocusTarget.focus();
          event.preventDefault();
        }
      };

      var conditionalElements = getConditionalElements();
      return /*#__PURE__*/React__namespace.createElement(Component, _extends$3({
        className: r$1(classes.root, className, vertical && classes.vertical),
        ref: ref
      }, other), conditionalElements.scrollButtonStart, conditionalElements.scrollbarSizeListener, /*#__PURE__*/React__namespace.createElement("div", {
        className: r$1(classes.scroller, scrollable ? classes.scrollable : classes.fixed),
        style: scrollerStyle,
        ref: tabsRef,
        onScroll: handleTabsScroll
      }, /*#__PURE__*/React__namespace.createElement("div", {
        "aria-label": ariaLabel,
        "aria-labelledby": ariaLabelledBy,
        className: r$1(classes.flexContainer, vertical && classes.flexContainerVertical, centered && !scrollable && classes.centered),
        onKeyDown: handleKeyDown,
        ref: tabListRef,
        role: "tablist"
      }, children), mounted && indicator), conditionalElements.scrollButtonEnd);
    });
    process.env.NODE_ENV !== "production" ? Tabs.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * Callback fired when the component mounts.
       * This is useful when you want to trigger an action programmatically.
       * It supports two actions: `updateIndicator()` and `updateScrollButtons()`
       *
       * @param {object} actions This object contains all possible actions
       * that can be triggered programmatically.
       */
      action: refType$1,

      /**
       * The label for the Tabs as a string.
       */
      'aria-label': re.string,

      /**
       * An id or list of ids separated by a space that label the Tabs.
       */
      'aria-labelledby': re.string,

      /**
       * If `true`, the tabs will be centered.
       * This property is intended for large views.
       */
      centered: re.bool,

      /**
       * The content of the component.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: re
      /* @typescript-to-proptypes-ignore */
      .elementType,

      /**
       * Determines the color of the indicator.
       */
      indicatorColor: re.oneOf(['primary', 'secondary']),

      /**
       * Callback fired when the value changes.
       *
       * @param {object} event The event source of the callback
       * @param {any} value We default to the index of the child (number)
       */
      onChange: re.func,

      /**
       * The tabs orientation (layout flow direction).
       */
      orientation: re.oneOf(['horizontal', 'vertical']),

      /**
       * The component used to render the scroll buttons.
       */
      ScrollButtonComponent: re.elementType,

      /**
       * Determine behavior of scroll buttons when tabs are set to scroll:
       *
       * - `auto` will only present them when not all the items are visible.
       * - `desktop` will only present them on medium and larger viewports.
       * - `on` will always present them.
       * - `off` will never present them.
       */
      scrollButtons: re.oneOf(['auto', 'desktop', 'off', 'on']),

      /**
       * If `true` the selected tab changes on focus. Otherwise it only
       * changes on activation.
       */
      selectionFollowsFocus: re.bool,

      /**
       * Props applied to the tab indicator element.
       */
      TabIndicatorProps: re.object,

      /**
       * Props applied to the [`TabScrollButton`](/api/tab-scroll-button/) element.
       */
      TabScrollButtonProps: re.object,

      /**
       * Determines the color of the `Tab`.
       */
      textColor: re.oneOf(['inherit', 'primary', 'secondary']),

      /**
       * The value of the currently selected `Tab`.
       * If you don't want any selected `Tab`, you can set this property to `false`.
       */
      value: re.any,

      /**
       * Determines additional display behavior of the tabs:
       *
       *  - `scrollable` will invoke scrolling properties and allow for horizontally
       *  scrolling (or swiping) of the tab bar.
       *  -`fullWidth` will make the tabs grow to use all the available space,
       *  which should be used for small views, like on mobile.
       *  - `standard` will render the default state.
       */
      variant: re.oneOf(['fullWidth', 'scrollable', 'standard'])
    } : void 0;
    var Tabs$1 = withStyles(styles$q, {
      name: 'MuiTabs'
    })(Tabs);

    var variantComponent = {
      standard: Input$1,
      filled: FilledInput$1,
      outlined: OutlinedInput$1
    };
    var styles$p = {
      /* Styles applied to the root element. */
      root: {}
    };
    /**
     * The `TextField` is a convenience wrapper for the most common cases (80%).
     * It cannot be all things to all people, otherwise the API would grow out of control.
     *
     * ## Advanced Configuration
     *
     * It's important to understand that the text field is a simple abstraction
     * on top of the following components:
     *
     * - [FormControl](/api/form-control/)
     * - [InputLabel](/api/input-label/)
     * - [FilledInput](/api/filled-input/)
     * - [OutlinedInput](/api/outlined-input/)
     * - [Input](/api/input/)
     * - [FormHelperText](/api/form-helper-text/)
     *
     * If you wish to alter the props applied to the `input` element, you can do so as follows:
     *
     * ```jsx
     * const inputProps = {
     *   step: 300,
     * };
     *
     * return <TextField id="time" type="time" inputProps={inputProps} />;
     * ```
     *
     * For advanced cases, please look at the source of TextField by clicking on the
     * "Edit this page" button above. Consider either:
     *
     * - using the upper case props for passing values directly to the components
     * - using the underlying components directly as shown in the demos
     */

    var TextField = /*#__PURE__*/React__namespace.forwardRef(function TextField(props, ref) {
      var autoComplete = props.autoComplete,
          _props$autoFocus = props.autoFocus,
          autoFocus = _props$autoFocus === void 0 ? false : _props$autoFocus,
          children = props.children,
          classes = props.classes,
          className = props.className,
          _props$color = props.color,
          color = _props$color === void 0 ? 'primary' : _props$color,
          defaultValue = props.defaultValue,
          _props$disabled = props.disabled,
          disabled = _props$disabled === void 0 ? false : _props$disabled,
          _props$error = props.error,
          error = _props$error === void 0 ? false : _props$error,
          FormHelperTextProps = props.FormHelperTextProps,
          _props$fullWidth = props.fullWidth,
          fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,
          helperText = props.helperText,
          hiddenLabel = props.hiddenLabel,
          id = props.id,
          InputLabelProps = props.InputLabelProps,
          inputProps = props.inputProps,
          InputProps = props.InputProps,
          inputRef = props.inputRef,
          label = props.label,
          _props$multiline = props.multiline,
          multiline = _props$multiline === void 0 ? false : _props$multiline,
          name = props.name,
          onBlur = props.onBlur,
          onChange = props.onChange,
          onFocus = props.onFocus,
          placeholder = props.placeholder,
          _props$required = props.required,
          required = _props$required === void 0 ? false : _props$required,
          rows = props.rows,
          rowsMax = props.rowsMax,
          maxRows = props.maxRows,
          minRows = props.minRows,
          _props$select = props.select,
          select = _props$select === void 0 ? false : _props$select,
          SelectProps = props.SelectProps,
          type = props.type,
          value = props.value,
          _props$variant = props.variant,
          variant = _props$variant === void 0 ? 'standard' : _props$variant,
          other = _objectWithoutProperties(props, ["autoComplete", "autoFocus", "children", "classes", "className", "color", "defaultValue", "disabled", "error", "FormHelperTextProps", "fullWidth", "helperText", "hiddenLabel", "id", "InputLabelProps", "inputProps", "InputProps", "inputRef", "label", "multiline", "name", "onBlur", "onChange", "onFocus", "placeholder", "required", "rows", "rowsMax", "maxRows", "minRows", "select", "SelectProps", "type", "value", "variant"]);

      if (process.env.NODE_ENV !== 'production') {
        if (select && !children) {
          console.error('Material-UI: `children` must be passed when using the `TextField` component with `select`.');
        }
      }

      var InputMore = {};

      if (variant === 'outlined') {
        if (InputLabelProps && typeof InputLabelProps.shrink !== 'undefined') {
          InputMore.notched = InputLabelProps.shrink;
        }

        if (label) {
          var _InputLabelProps$requ;

          var displayRequired = (_InputLabelProps$requ = InputLabelProps === null || InputLabelProps === void 0 ? void 0 : InputLabelProps.required) !== null && _InputLabelProps$requ !== void 0 ? _InputLabelProps$requ : required;
          InputMore.label = /*#__PURE__*/React__namespace.createElement(React__namespace.Fragment, null, label, displayRequired && "\xA0*");
        }
      }

      if (select) {
        // unset defaults from textbox inputs
        if (!SelectProps || !SelectProps.native) {
          InputMore.id = undefined;
        }

        InputMore['aria-describedby'] = undefined;
      }

      var helperTextId = helperText && id ? "".concat(id, "-helper-text") : undefined;
      var inputLabelId = label && id ? "".concat(id, "-label") : undefined;
      var InputComponent = variantComponent[variant];
      var InputElement = /*#__PURE__*/React__namespace.createElement(InputComponent, _extends$3({
        "aria-describedby": helperTextId,
        autoComplete: autoComplete,
        autoFocus: autoFocus,
        defaultValue: defaultValue,
        fullWidth: fullWidth,
        multiline: multiline,
        name: name,
        rows: rows,
        rowsMax: rowsMax,
        maxRows: maxRows,
        minRows: minRows,
        type: type,
        value: value,
        id: id,
        inputRef: inputRef,
        onBlur: onBlur,
        onChange: onChange,
        onFocus: onFocus,
        placeholder: placeholder,
        inputProps: inputProps
      }, InputMore, InputProps));
      return /*#__PURE__*/React__namespace.createElement(T, _extends$3({
        className: r$1(classes.root, className),
        disabled: disabled,
        error: error,
        fullWidth: fullWidth,
        hiddenLabel: hiddenLabel,
        ref: ref,
        required: required,
        color: color,
        variant: variant
      }, other), label && /*#__PURE__*/React__namespace.createElement(H, _extends$3({
        htmlFor: id,
        id: inputLabelId
      }, InputLabelProps), label), select ? /*#__PURE__*/React__namespace.createElement(Select$1, _extends$3({
        "aria-describedby": helperTextId,
        id: id,
        labelId: inputLabelId,
        value: value,
        input: InputElement
      }, SelectProps), children) : InputElement, helperText && /*#__PURE__*/React__namespace.createElement(FormHelperText$1, _extends$3({
        id: helperTextId
      }, FormHelperTextProps), helperText));
    });
    process.env.NODE_ENV !== "production" ? TextField.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * This prop helps users to fill forms faster, especially on mobile devices.
       * The name can be confusing, as it's more like an autofill.
       * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
       */
      autoComplete: re.string,

      /**
       * If `true`, the `input` element will be focused during the first mount.
       */
      autoFocus: re.bool,

      /**
       * @ignore
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * The color of the component. It supports those theme colors that make sense for this component.
       */
      color: re.oneOf(['primary', 'secondary']),

      /**
       * The default value of the `input` element.
       */
      defaultValue: re.any,

      /**
       * If `true`, the `input` element will be disabled.
       */
      disabled: re.bool,

      /**
       * If `true`, the label will be displayed in an error state.
       */
      error: re.bool,

      /**
       * Props applied to the [`FormHelperText`](/api/form-helper-text/) element.
       */
      FormHelperTextProps: re.object,

      /**
       * If `true`, the input will take up the full width of its container.
       */
      fullWidth: re.bool,

      /**
       * The helper text content.
       */
      helperText: re.node,

      /**
       * @ignore
       */
      hiddenLabel: re.bool,

      /**
       * The id of the `input` element.
       * Use this prop to make `label` and `helperText` accessible for screen readers.
       */
      id: re.string,

      /**
       * Props applied to the [`InputLabel`](/api/input-label/) element.
       */
      InputLabelProps: re.object,

      /**
       * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
       */
      inputProps: re.object,

      /**
       * Props applied to the Input element.
       * It will be a [`FilledInput`](/api/filled-input/),
       * [`OutlinedInput`](/api/outlined-input/) or [`Input`](/api/input/)
       * component depending on the `variant` prop value.
       */
      InputProps: re.object,

      /**
       * Pass a ref to the `input` element.
       */
      inputRef: refType$1,

      /**
       * The label content.
       */
      label: re.node,

      /**
       * If `dense` or `normal`, will adjust vertical spacing of this and contained components.
       */
      margin: re.oneOf(['dense', 'none', 'normal']),

      /**
       * Maximum number of rows to display when multiline option is set to true.
       */
      maxRows: re.oneOfType([re.number, re.string]),

      /**
       * Minimum number of rows to display.
       */
      minRows: re.oneOfType([re.number, re.string]),

      /**
       * If `true`, a textarea element will be rendered instead of an input.
       */
      multiline: re.bool,

      /**
       * Name attribute of the `input` element.
       */
      name: re.string,

      /**
       * @ignore
       */
      onBlur: re.func,

      /**
       * Callback fired when the value is changed.
       *
       * @param {object} event The event source of the callback.
       * You can pull out the new value by accessing `event.target.value` (string).
       */
      onChange: re.func,

      /**
       * @ignore
       */
      onFocus: re.func,

      /**
       * The short hint displayed in the input before the user enters a value.
       */
      placeholder: re.string,

      /**
       * If `true`, the label is displayed as required and the `input` element` will be required.
       */
      required: re.bool,

      /**
       * Number of rows to display when multiline option is set to true.
       * @deprecated Use `minRows` instead.
       */
      rows: re.oneOfType([re.number, re.string]),

      /**
       * Maximum number of rows to display.
       * @deprecated Use `maxRows` instead.
       */
      rowsMax: re.oneOfType([re.number, re.string]),

      /**
       * Render a [`Select`](/api/select/) element while passing the Input element to `Select` as `input` parameter.
       * If this option is set you must pass the options of the select as children.
       */
      select: re.bool,

      /**
       * Props applied to the [`Select`](/api/select/) element.
       */
      SelectProps: re.object,

      /**
       * The size of the text field.
       */
      size: re.oneOf(['medium', 'small']),

      /**
       * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
       */
      type: re.string,

      /**
       * The value of the `input` element, required for a controlled component.
       */
      value: re.any,

      /**
       * The variant to use.
       */
      variant: re.oneOf(['filled', 'outlined', 'standard'])
    } : void 0;
    var TextField$1 = withStyles(styles$p, {
      name: 'MuiTextField'
    })(TextField);

    function round(value) {
      return Math.round(value * 1e5) / 1e5;
    }

    function arrowGenerator() {
      return {
        '&[x-placement*="bottom"] $arrow': {
          top: 0,
          left: 0,
          marginTop: '-0.71em',
          marginLeft: 4,
          marginRight: 4,
          '&::before': {
            transformOrigin: '0 100%'
          }
        },
        '&[x-placement*="top"] $arrow': {
          bottom: 0,
          left: 0,
          marginBottom: '-0.71em',
          marginLeft: 4,
          marginRight: 4,
          '&::before': {
            transformOrigin: '100% 0'
          }
        },
        '&[x-placement*="right"] $arrow': {
          left: 0,
          marginLeft: '-0.71em',
          height: '1em',
          width: '0.71em',
          marginTop: 4,
          marginBottom: 4,
          '&::before': {
            transformOrigin: '100% 100%'
          }
        },
        '&[x-placement*="left"] $arrow': {
          right: 0,
          marginRight: '-0.71em',
          height: '1em',
          width: '0.71em',
          marginTop: 4,
          marginBottom: 4,
          '&::before': {
            transformOrigin: '0 0'
          }
        }
      };
    }

    var styles$o = function styles(theme) {
      return {
        /* Styles applied to the Popper component. */
        popper: {
          zIndex: theme.zIndex.tooltip,
          pointerEvents: 'none' // disable jss-rtl plugin

        },

        /* Styles applied to the Popper component if `interactive={true}`. */
        popperInteractive: {
          pointerEvents: 'auto'
        },

        /* Styles applied to the Popper component if `arrow={true}`. */
        popperArrow: arrowGenerator(),

        /* Styles applied to the tooltip (label wrapper) element. */
        tooltip: {
          backgroundColor: alpha(theme.palette.grey[700], 0.9),
          borderRadius: theme.shape.borderRadius,
          color: theme.palette.common.white,
          fontFamily: theme.typography.fontFamily,
          padding: '4px 8px',
          fontSize: theme.typography.pxToRem(10),
          lineHeight: "".concat(round(14 / 10), "em"),
          maxWidth: 300,
          wordWrap: 'break-word',
          fontWeight: theme.typography.fontWeightMedium
        },

        /* Styles applied to the tooltip (label wrapper) element if `arrow={true}`. */
        tooltipArrow: {
          position: 'relative',
          margin: '0'
        },

        /* Styles applied to the arrow element. */
        arrow: {
          overflow: 'hidden',
          position: 'absolute',
          width: '1em',
          height: '0.71em'
          /* = width / sqrt(2) = (length of the hypotenuse) */
          ,
          boxSizing: 'border-box',
          color: alpha(theme.palette.grey[700], 0.9),
          '&::before': {
            content: '""',
            margin: 'auto',
            display: 'block',
            width: '100%',
            height: '100%',
            backgroundColor: 'currentColor',
            transform: 'rotate(45deg)'
          }
        },

        /* Styles applied to the tooltip (label wrapper) element if the tooltip is opened by touch. */
        touch: {
          padding: '8px 16px',
          fontSize: theme.typography.pxToRem(14),
          lineHeight: "".concat(round(16 / 14), "em"),
          fontWeight: theme.typography.fontWeightRegular
        },

        /* Styles applied to the tooltip (label wrapper) element if `placement` contains "left". */
        tooltipPlacementLeft: _defineProperty({
          transformOrigin: 'right center',
          margin: '0 24px '
        }, theme.breakpoints.up('sm'), {
          margin: '0 14px'
        }),

        /* Styles applied to the tooltip (label wrapper) element if `placement` contains "right". */
        tooltipPlacementRight: _defineProperty({
          transformOrigin: 'left center',
          margin: '0 24px'
        }, theme.breakpoints.up('sm'), {
          margin: '0 14px'
        }),

        /* Styles applied to the tooltip (label wrapper) element if `placement` contains "top". */
        tooltipPlacementTop: _defineProperty({
          transformOrigin: 'center bottom',
          margin: '24px 0'
        }, theme.breakpoints.up('sm'), {
          margin: '14px 0'
        }),

        /* Styles applied to the tooltip (label wrapper) element if `placement` contains "bottom". */
        tooltipPlacementBottom: _defineProperty({
          transformOrigin: 'center top',
          margin: '24px 0'
        }, theme.breakpoints.up('sm'), {
          margin: '14px 0'
        })
      };
    };
    var hystersisOpen = false;
    var hystersisTimer = null;
    var Tooltip$2 = /*#__PURE__*/React__namespace.forwardRef(function Tooltip(props, ref) {
      var _props$arrow = props.arrow,
          arrow = _props$arrow === void 0 ? false : _props$arrow,
          children = props.children,
          classes = props.classes,
          _props$disableFocusLi = props.disableFocusListener,
          disableFocusListener = _props$disableFocusLi === void 0 ? false : _props$disableFocusLi,
          _props$disableHoverLi = props.disableHoverListener,
          disableHoverListener = _props$disableHoverLi === void 0 ? false : _props$disableHoverLi,
          _props$disableTouchLi = props.disableTouchListener,
          disableTouchListener = _props$disableTouchLi === void 0 ? false : _props$disableTouchLi,
          _props$enterDelay = props.enterDelay,
          enterDelay = _props$enterDelay === void 0 ? 100 : _props$enterDelay,
          _props$enterNextDelay = props.enterNextDelay,
          enterNextDelay = _props$enterNextDelay === void 0 ? 0 : _props$enterNextDelay,
          _props$enterTouchDela = props.enterTouchDelay,
          enterTouchDelay = _props$enterTouchDela === void 0 ? 700 : _props$enterTouchDela,
          idProp = props.id,
          _props$interactive = props.interactive,
          interactive = _props$interactive === void 0 ? false : _props$interactive,
          _props$leaveDelay = props.leaveDelay,
          leaveDelay = _props$leaveDelay === void 0 ? 0 : _props$leaveDelay,
          _props$leaveTouchDela = props.leaveTouchDelay,
          leaveTouchDelay = _props$leaveTouchDela === void 0 ? 1500 : _props$leaveTouchDela,
          onClose = props.onClose,
          onOpen = props.onOpen,
          openProp = props.open,
          _props$placement = props.placement,
          placement = _props$placement === void 0 ? 'bottom' : _props$placement,
          _props$PopperComponen = props.PopperComponent,
          PopperComponent = _props$PopperComponen === void 0 ? P : _props$PopperComponen,
          PopperProps = props.PopperProps,
          title = props.title,
          _props$TransitionComp = props.TransitionComponent,
          TransitionComponent = _props$TransitionComp === void 0 ? k : _props$TransitionComp,
          TransitionProps = props.TransitionProps,
          other = _objectWithoutProperties(props, ["arrow", "children", "classes", "disableFocusListener", "disableHoverListener", "disableTouchListener", "enterDelay", "enterNextDelay", "enterTouchDelay", "id", "interactive", "leaveDelay", "leaveTouchDelay", "onClose", "onOpen", "open", "placement", "PopperComponent", "PopperProps", "title", "TransitionComponent", "TransitionProps"]);

      var theme = useTheme();

      var _React$useState = React__namespace.useState(),
          childNode = _React$useState[0],
          setChildNode = _React$useState[1];

      var _React$useState2 = React__namespace.useState(null),
          arrowRef = _React$useState2[0],
          setArrowRef = _React$useState2[1];

      var ignoreNonTouchEvents = React__namespace.useRef(false);
      var closeTimer = React__namespace.useRef();
      var enterTimer = React__namespace.useRef();
      var leaveTimer = React__namespace.useRef();
      var touchTimer = React__namespace.useRef();

      var _useControlled = useControlled({
        controlled: openProp,
        default: false,
        name: 'Tooltip',
        state: 'open'
      }),
          _useControlled2 = _slicedToArray(_useControlled, 2),
          openState = _useControlled2[0],
          setOpenState = _useControlled2[1];

      var open = openState;

      if (process.env.NODE_ENV !== 'production') {
        // eslint-disable-next-line react-hooks/rules-of-hooks
        var _React$useRef = React__namespace.useRef(openProp !== undefined),
            isControlled = _React$useRef.current; // eslint-disable-next-line react-hooks/rules-of-hooks


        React__namespace.useEffect(function () {
          if (childNode && childNode.disabled && !isControlled && title !== '' && childNode.tagName.toLowerCase() === 'button') {
            console.error(['Material-UI: You are providing a disabled `button` child to the Tooltip component.', 'A disabled element does not fire events.', "Tooltip needs to listen to the child element's events to display the title.", '', 'Add a simple wrapper element, such as a `span`.'].join('\n'));
          }
        }, [title, childNode, isControlled]);
      }

      var id = useId(idProp);
      React__namespace.useEffect(function () {
        return function () {
          clearTimeout(closeTimer.current);
          clearTimeout(enterTimer.current);
          clearTimeout(leaveTimer.current);
          clearTimeout(touchTimer.current);
        };
      }, []);

      var handleOpen = function handleOpen(event) {
        clearTimeout(hystersisTimer);
        hystersisOpen = true; // The mouseover event will trigger for every nested element in the tooltip.
        // We can skip rerendering when the tooltip is already open.
        // We are using the mouseover event instead of the mouseenter event to fix a hide/show issue.

        setOpenState(true);

        if (onOpen) {
          onOpen(event);
        }
      };

      var handleEnter = function handleEnter() {
        var forward = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
        return function (event) {
          var childrenProps = children.props;

          if (event.type === 'mouseover' && childrenProps.onMouseOver && forward) {
            childrenProps.onMouseOver(event);
          }

          if (ignoreNonTouchEvents.current && event.type !== 'touchstart') {
            return;
          } // Remove the title ahead of time.
          // We don't want to wait for the next render commit.
          // We would risk displaying two tooltips at the same time (native + this one).


          if (childNode) {
            childNode.removeAttribute('title');
          }

          clearTimeout(enterTimer.current);
          clearTimeout(leaveTimer.current);

          if (enterDelay || hystersisOpen && enterNextDelay) {
            event.persist();
            enterTimer.current = setTimeout(function () {
              handleOpen(event);
            }, hystersisOpen ? enterNextDelay : enterDelay);
          } else {
            handleOpen(event);
          }
        };
      };

      var _useIsFocusVisible = useIsFocusVisible(),
          isFocusVisible = _useIsFocusVisible.isFocusVisible,
          onBlurVisible = _useIsFocusVisible.onBlurVisible,
          focusVisibleRef = _useIsFocusVisible.ref;

      var _React$useState3 = React__namespace.useState(false),
          childIsFocusVisible = _React$useState3[0],
          setChildIsFocusVisible = _React$useState3[1];

      var handleBlur = function handleBlur() {
        if (childIsFocusVisible) {
          setChildIsFocusVisible(false);
          onBlurVisible();
        }
      };

      var handleFocus = function handleFocus() {
        var forward = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
        return function (event) {
          // Workaround for https://github.com/facebook/react/issues/7769
          // The autoFocus of React might trigger the event before the componentDidMount.
          // We need to account for this eventuality.
          if (!childNode) {
            setChildNode(event.currentTarget);
          }

          if (isFocusVisible(event)) {
            setChildIsFocusVisible(true);
            handleEnter()(event);
          }

          var childrenProps = children.props;

          if (childrenProps.onFocus && forward) {
            childrenProps.onFocus(event);
          }
        };
      };

      var handleClose = function handleClose(event) {
        clearTimeout(hystersisTimer);
        hystersisTimer = setTimeout(function () {
          hystersisOpen = false;
        }, 800 + leaveDelay);
        setOpenState(false);

        if (onClose) {
          onClose(event);
        }

        clearTimeout(closeTimer.current);
        closeTimer.current = setTimeout(function () {
          ignoreNonTouchEvents.current = false;
        }, theme.transitions.duration.shortest);
      };

      var handleLeave = function handleLeave() {
        var forward = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
        return function (event) {
          var childrenProps = children.props;

          if (event.type === 'blur') {
            if (childrenProps.onBlur && forward) {
              childrenProps.onBlur(event);
            }

            handleBlur();
          }

          if (event.type === 'mouseleave' && childrenProps.onMouseLeave && event.currentTarget === childNode) {
            childrenProps.onMouseLeave(event);
          }

          clearTimeout(enterTimer.current);
          clearTimeout(leaveTimer.current);
          event.persist();
          leaveTimer.current = setTimeout(function () {
            handleClose(event);
          }, leaveDelay);
        };
      };

      var detectTouchStart = function detectTouchStart(event) {
        ignoreNonTouchEvents.current = true;
        var childrenProps = children.props;

        if (childrenProps.onTouchStart) {
          childrenProps.onTouchStart(event);
        }
      };

      var handleTouchStart = function handleTouchStart(event) {
        detectTouchStart(event);
        clearTimeout(leaveTimer.current);
        clearTimeout(closeTimer.current);
        clearTimeout(touchTimer.current);
        event.persist();
        touchTimer.current = setTimeout(function () {
          handleEnter()(event);
        }, enterTouchDelay);
      };

      var handleTouchEnd = function handleTouchEnd(event) {
        if (children.props.onTouchEnd) {
          children.props.onTouchEnd(event);
        }

        clearTimeout(touchTimer.current);
        clearTimeout(leaveTimer.current);
        event.persist();
        leaveTimer.current = setTimeout(function () {
          handleClose(event);
        }, leaveTouchDelay);
      };

      var handleUseRef = useForkRef(setChildNode, ref);
      var handleFocusRef = useForkRef(focusVisibleRef, handleUseRef); // can be removed once we drop support for non ref forwarding class components

      var handleOwnRef = React__namespace.useCallback(function (instance) {
        // #StrictMode ready
        setRef(handleFocusRef, ReactDOM__namespace.findDOMNode(instance));
      }, [handleFocusRef]);
      var handleRef = useForkRef(children.ref, handleOwnRef); // There is no point in displaying an empty tooltip.

      if (title === '') {
        open = false;
      } // For accessibility and SEO concerns, we render the title to the DOM node when
      // the tooltip is hidden. However, we have made a tradeoff when
      // `disableHoverListener` is set. This title logic is disabled.
      // It's allowing us to keep the implementation size minimal.
      // We are open to change the tradeoff.


      var shouldShowNativeTitle = !open && !disableHoverListener;

      var childrenProps = _extends$3({
        'aria-describedby': open ? id : null,
        title: shouldShowNativeTitle && typeof title === 'string' ? title : null
      }, other, children.props, {
        className: r$1(other.className, children.props.className),
        onTouchStart: detectTouchStart,
        ref: handleRef
      });

      var interactiveWrapperListeners = {};

      if (!disableTouchListener) {
        childrenProps.onTouchStart = handleTouchStart;
        childrenProps.onTouchEnd = handleTouchEnd;
      }

      if (!disableHoverListener) {
        childrenProps.onMouseOver = handleEnter();
        childrenProps.onMouseLeave = handleLeave();

        if (interactive) {
          interactiveWrapperListeners.onMouseOver = handleEnter(false);
          interactiveWrapperListeners.onMouseLeave = handleLeave(false);
        }
      }

      if (!disableFocusListener) {
        childrenProps.onFocus = handleFocus();
        childrenProps.onBlur = handleLeave();

        if (interactive) {
          interactiveWrapperListeners.onFocus = handleFocus(false);
          interactiveWrapperListeners.onBlur = handleLeave(false);
        }
      }

      if (process.env.NODE_ENV !== 'production') {
        if (children.props.title) {
          console.error(['Material-UI: You have provided a `title` prop to the child of <Tooltip />.', "Remove this title prop `".concat(children.props.title, "` or the Tooltip component.")].join('\n'));
        }
      }

      var mergedPopperProps = React__namespace.useMemo(function () {
        return deepmerge$1({
          popperOptions: {
            modifiers: {
              arrow: {
                enabled: Boolean(arrowRef),
                element: arrowRef
              }
            }
          }
        }, PopperProps);
      }, [arrowRef, PopperProps]);
      return /*#__PURE__*/React__namespace.createElement(React__namespace.Fragment, null, /*#__PURE__*/React__namespace.cloneElement(children, childrenProps), /*#__PURE__*/React__namespace.createElement(PopperComponent, _extends$3({
        className: r$1(classes.popper, interactive && classes.popperInteractive, arrow && classes.popperArrow),
        placement: placement,
        anchorEl: childNode,
        open: childNode ? open : false,
        id: childrenProps['aria-describedby'],
        transition: true
      }, interactiveWrapperListeners, mergedPopperProps), function (_ref) {
        var placementInner = _ref.placement,
            TransitionPropsInner = _ref.TransitionProps;
        return /*#__PURE__*/React__namespace.createElement(TransitionComponent, _extends$3({
          timeout: theme.transitions.duration.shorter
        }, TransitionPropsInner, TransitionProps), /*#__PURE__*/React__namespace.createElement("div", {
          className: r$1(classes.tooltip, classes["tooltipPlacement".concat(capitalize(placementInner.split('-')[0]))], ignoreNonTouchEvents.current && classes.touch, arrow && classes.tooltipArrow)
        }, title, arrow ? /*#__PURE__*/React__namespace.createElement("span", {
          className: classes.arrow,
          ref: setArrowRef
        }) : null));
      }));
    });
    process.env.NODE_ENV !== "production" ? Tooltip$2.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * If `true`, adds an arrow to the tooltip.
       */
      arrow: re.bool,

      /**
       * Tooltip reference element.
       */
      children: elementAcceptingRef$1.isRequired,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * Do not respond to focus events.
       */
      disableFocusListener: re.bool,

      /**
       * Do not respond to hover events.
       */
      disableHoverListener: re.bool,

      /**
       * Do not respond to long press touch events.
       */
      disableTouchListener: re.bool,

      /**
       * The number of milliseconds to wait before showing the tooltip.
       * This prop won't impact the enter touch delay (`enterTouchDelay`).
       */
      enterDelay: re.number,

      /**
       * The number of milliseconds to wait before showing the tooltip when one was already recently opened.
       */
      enterNextDelay: re.number,

      /**
       * The number of milliseconds a user must touch the element before showing the tooltip.
       */
      enterTouchDelay: re.number,

      /**
       * This prop is used to help implement the accessibility logic.
       * If you don't provide this prop. It falls back to a randomly generated id.
       */
      id: re.string,

      /**
       * Makes a tooltip interactive, i.e. will not close when the user
       * hovers over the tooltip before the `leaveDelay` is expired.
       */
      interactive: re.bool,

      /**
       * The number of milliseconds to wait before hiding the tooltip.
       * This prop won't impact the leave touch delay (`leaveTouchDelay`).
       */
      leaveDelay: re.number,

      /**
       * The number of milliseconds after the user stops touching an element before hiding the tooltip.
       */
      leaveTouchDelay: re.number,

      /**
       * Callback fired when the component requests to be closed.
       *
       * @param {object} event The event source of the callback.
       */
      onClose: re.func,

      /**
       * Callback fired when the component requests to be open.
       *
       * @param {object} event The event source of the callback.
       */
      onOpen: re.func,

      /**
       * If `true`, the tooltip is shown.
       */
      open: re.bool,

      /**
       * Tooltip placement.
       */
      placement: re.oneOf(['bottom-end', 'bottom-start', 'bottom', 'left-end', 'left-start', 'left', 'right-end', 'right-start', 'right', 'top-end', 'top-start', 'top']),

      /**
       * The component used for the popper.
       */
      PopperComponent: re.elementType,

      /**
       * Props applied to the [`Popper`](/api/popper/) element.
       */
      PopperProps: re.object,

      /**
       * Tooltip title. Zero-length titles string are never displayed.
       */
      title: re
      /* @typescript-to-proptypes-ignore */
      .node.isRequired,

      /**
       * The component used for the transition.
       * [Follow this guide](/components/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
       */
      TransitionComponent: re.elementType,

      /**
       * Props applied to the [`Transition`](http://reactcommunity.org/react-transition-group/transition#Transition-props) element.
       */
      TransitionProps: re.object
    } : void 0;
    var x = withStyles(styles$o, {
      name: 'MuiTooltip',
      flip: false
    })(Tooltip$2);

    function defaultTrigger(store, options) {
      var _options$disableHyste = options.disableHysteresis,
          disableHysteresis = _options$disableHyste === void 0 ? false : _options$disableHyste,
          _options$threshold = options.threshold,
          threshold = _options$threshold === void 0 ? 100 : _options$threshold,
          target = options.target;
      var previous = store.current;

      if (target) {
        // Get vertical scroll
        store.current = target.pageYOffset !== undefined ? target.pageYOffset : target.scrollTop;
      }

      if (!disableHysteresis && previous !== undefined) {
        if (store.current < previous) {
          return false;
        }
      }

      return store.current > threshold;
    }

    var defaultTarget = typeof window !== 'undefined' ? window : null;
    function useScrollTrigger() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var _options$getTrigger = options.getTrigger,
          getTrigger = _options$getTrigger === void 0 ? defaultTrigger : _options$getTrigger,
          _options$target = options.target,
          target = _options$target === void 0 ? defaultTarget : _options$target,
          other = _objectWithoutProperties(options, ["getTrigger", "target"]);

      var store = React__namespace.useRef();

      var _React$useState = React__namespace.useState(function () {
        return getTrigger(store, other);
      }),
          trigger = _React$useState[0],
          setTrigger = _React$useState[1];

      React__namespace.useEffect(function () {
        var handleScroll = function handleScroll() {
          setTrigger(getTrigger(store, _extends$3({
            target: target
          }, other)));
        };

        handleScroll(); // Re-evaluate trigger when dependencies change

        target.addEventListener('scroll', handleScroll);
        return function () {
          target.removeEventListener('scroll', handleScroll);
        }; // See Option 3. https://github.com/facebook/react/issues/14476#issuecomment-471199055
        // eslint-disable-next-line react-hooks/exhaustive-deps
      }, [target, getTrigger, JSON.stringify(other)]);
      return trigger;
    }

    var warnedOnce = false;
    /**
     * Dialog will responsively be full screen *at or below* the given breakpoint
     * (defaults to 'sm' for mobile devices).
     * Notice that this Higher-order Component is incompatible with server-side rendering.
     */

    var withMobileDialog = function withMobileDialog() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return function (Component) {
        if (process.env.NODE_ENV !== 'production') {
          if (!warnedOnce) {
            console.warn(['Material-UI: The `withMobileDialog` function is deprecated.', 'Head to https://material-ui.com/r/migration-v4/#dialog for a migration path.'].join('\n'));
            warnedOnce = true;
          }
        }

        var _options$breakpoint = options.breakpoint,
            breakpoint = _options$breakpoint === void 0 ? 'sm' : _options$breakpoint;

        function WithMobileDialog(props) {
          return /*#__PURE__*/React__namespace.createElement(Component, _extends$3({
            fullScreen: isWidthDown(breakpoint, props.width)
          }, props));
        }

        process.env.NODE_ENV !== "production" ? WithMobileDialog.propTypes = {
          width: re.oneOf(['xs', 'sm', 'md', 'lg', 'xl']).isRequired
        } : void 0;
        return withWidth$1()(WithMobileDialog);
      };
    };

    var withMobileDialog$1 = withMobileDialog;

    var styles$n = {
      entering: {
        transform: 'none'
      },
      entered: {
        transform: 'none'
      }
    };
    var defaultTimeout = {
      enter: duration.enteringScreen,
      exit: duration.leavingScreen
    };
    /**
     * The Zoom transition can be used for the floating variant of the
     * [Button](/components/buttons/#floating-action-buttons) component.
     * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.
     */

    var Zoom = /*#__PURE__*/React__namespace.forwardRef(function Zoom(props, ref) {
      var children = props.children,
          _props$disableStrictM = props.disableStrictModeCompat,
          disableStrictModeCompat = _props$disableStrictM === void 0 ? false : _props$disableStrictM,
          inProp = props.in,
          onEnter = props.onEnter,
          onEntered = props.onEntered,
          onEntering = props.onEntering,
          onExit = props.onExit,
          onExited = props.onExited,
          onExiting = props.onExiting,
          style = props.style,
          _props$timeout = props.timeout,
          timeout = _props$timeout === void 0 ? defaultTimeout : _props$timeout,
          _props$TransitionComp = props.TransitionComponent,
          TransitionComponent = _props$TransitionComp === void 0 ? Transition$1 : _props$TransitionComp,
          other = _objectWithoutProperties(props, ["children", "disableStrictModeCompat", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"]);

      var theme = useTheme();
      var enableStrictModeCompat = theme.unstable_strictMode && !disableStrictModeCompat;
      var nodeRef = React__namespace.useRef(null);
      var foreignRef = useForkRef(children.ref, ref);
      var handleRef = useForkRef(enableStrictModeCompat ? nodeRef : undefined, foreignRef);

      var normalizedTransitionCallback = function normalizedTransitionCallback(callback) {
        return function (nodeOrAppearing, maybeAppearing) {
          if (callback) {
            var _ref = enableStrictModeCompat ? [nodeRef.current, nodeOrAppearing] : [nodeOrAppearing, maybeAppearing],
                _ref2 = _slicedToArray(_ref, 2),
                node = _ref2[0],
                isAppearing = _ref2[1]; // onEnterXxx and onExitXxx callbacks have a different arguments.length value.


            if (isAppearing === undefined) {
              callback(node);
            } else {
              callback(node, isAppearing);
            }
          }
        };
      };

      var handleEntering = normalizedTransitionCallback(onEntering);
      var handleEnter = normalizedTransitionCallback(function (node, isAppearing) {
        reflow(node); // So the animation always start from the start.

        var transitionProps = getTransitionProps({
          style: style,
          timeout: timeout
        }, {
          mode: 'enter'
        });
        node.style.webkitTransition = theme.transitions.create('transform', transitionProps);
        node.style.transition = theme.transitions.create('transform', transitionProps);

        if (onEnter) {
          onEnter(node, isAppearing);
        }
      });
      var handleEntered = normalizedTransitionCallback(onEntered);
      var handleExiting = normalizedTransitionCallback(onExiting);
      var handleExit = normalizedTransitionCallback(function (node) {
        var transitionProps = getTransitionProps({
          style: style,
          timeout: timeout
        }, {
          mode: 'exit'
        });
        node.style.webkitTransition = theme.transitions.create('transform', transitionProps);
        node.style.transition = theme.transitions.create('transform', transitionProps);

        if (onExit) {
          onExit(node);
        }
      });
      var handleExited = normalizedTransitionCallback(onExited);
      return /*#__PURE__*/React__namespace.createElement(TransitionComponent, _extends$3({
        appear: true,
        in: inProp,
        nodeRef: enableStrictModeCompat ? nodeRef : undefined,
        onEnter: handleEnter,
        onEntered: handleEntered,
        onEntering: handleEntering,
        onExit: handleExit,
        onExited: handleExited,
        onExiting: handleExiting,
        timeout: timeout
      }, other), function (state, childProps) {
        return /*#__PURE__*/React__namespace.cloneElement(children, _extends$3({
          style: _extends$3({
            transform: 'scale(0)',
            visibility: state === 'exited' && !inProp ? 'hidden' : undefined
          }, styles$n[state], style, children.props.style),
          ref: handleRef
        }, childProps));
      });
    });
    process.env.NODE_ENV !== "production" ? Zoom.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * A single child content element.
       */
      children: re.element,

      /**
       * Enable this prop if you encounter 'Function components cannot be given refs',
       * use `unstable_createStrictModeTheme`,
       * and can't forward the ref in the child component.
       */
      disableStrictModeCompat: re.bool,

      /**
       * If `true`, the component will transition in.
       */
      in: re.bool,

      /**
       * @ignore
       */
      onEnter: re.func,

      /**
       * @ignore
       */
      onEntered: re.func,

      /**
       * @ignore
       */
      onEntering: re.func,

      /**
       * @ignore
       */
      onExit: re.func,

      /**
       * @ignore
       */
      onExited: re.func,

      /**
       * @ignore
       */
      onExiting: re.func,

      /**
       * @ignore
       */
      style: re.object,

      /**
       * The duration for the transition, in milliseconds.
       * You may specify a single timeout for all transitions, or individually with an object.
       */
      timeout: re.oneOfType([re.number, re.shape({
        appear: re.number,
        enter: re.number,
        exit: re.number
      })])
    } : void 0;
    var Zoom$1 = Zoom;

    /** @license Material-UI v4.12.3
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */

    var esm$2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        colors: colors,
        Accordion: Accordion$1,
        AccordionActions: AccordionActions$1,
        AccordionDetails: AccordionDetails$1,
        AccordionSummary: AccordionSummary$1,
        AppBar: AppBar$1,
        Avatar: Avatar$1,
        Backdrop: Backdrop$1,
        Badge: E,
        BottomNavigation: BottomNavigation$1,
        BottomNavigationAction: BottomNavigationAction$1,
        Box: Box$1,
        Breadcrumbs: Breadcrumbs$1,
        Button: Button$2,
        ButtonBase: ButtonBase$1,
        ButtonGroup: ButtonGroup$1,
        Card: Card$1,
        CardActionArea: CardActionArea$1,
        CardActions: CardActions$1,
        CardContent: CardContent$1,
        CardHeader: CardHeader$1,
        CardMedia: CardMedia$1,
        Checkbox: Checkbox$1,
        Chip: Chip$1,
        CircularProgress: CircularProgress$1,
        ClickAwayListener: ClickAwayListener,
        Collapse: Collapse$1,
        Container: Container$1,
        CssBaseline: CssBaseline$1,
        Dialog: Dialog$2,
        DialogActions: DialogActions$2,
        DialogContent: DialogContent$2,
        DialogContentText: DialogContentText$2,
        DialogTitle: DialogTitle$2,
        Divider: Divider$1,
        Drawer: Drawer$3,
        ExpansionPanel: ExpansionPanel$1,
        ExpansionPanelActions: ExpansionPanelActions$1,
        ExpansionPanelDetails: ExpansionPanelDetails$1,
        ExpansionPanelSummary: ExpansionPanelSummary$1,
        Fab: Fab$1,
        Fade: Fade$1,
        FilledInput: FilledInput$1,
        FormControl: T,
        FormControlLabel: FormControlLabel$1,
        FormGroup: FormGroup$1,
        FormHelperText: FormHelperText$1,
        FormLabel: FormLabel$1,
        Grid: Grid$1,
        GridList: GridList$1,
        GridListTile: GridListTile$1,
        GridListTileBar: GridListTileBar$1,
        Grow: k,
        Hidden: Hidden,
        Icon: Icon$2,
        IconButton: IconButton$1,
        ImageList: ImageList$1,
        ImageListItem: ImageListItem$1,
        ImageListItemBar: ImageListItemBar$1,
        Input: Input$1,
        InputAdornment: InputAdornment$1,
        InputBase: v,
        InputLabel: H,
        LinearProgress: LinearProgress$1,
        Link: Link$1,
        List: List$2,
        ListItem: ListItem$2,
        ListItemAvatar: ListItemAvatar$1,
        ListItemIcon: A,
        ListItemSecondaryAction: ListItemSecondaryAction$1,
        ListItemText: ListItemText$1,
        ListSubheader: ListSubheader$1,
        Menu: Menu$4,
        MenuItem: MenuItem$1,
        MenuList: L,
        MobileStepper: MobileStepper$1,
        Modal: Modal$1,
        NativeSelect: NativeSelect$1,
        NoSsr: NoSsr,
        OutlinedInput: OutlinedInput$1,
        Paper: M,
        Popover: Popover$1,
        Popper: P,
        Portal: Portal$1,
        Radio: Radio$1,
        RadioGroup: RadioGroup$1,
        RootRef: RootRef$1,
        Select: Select$1,
        Slide: Slide$1,
        Slider: Slider$1,
        Snackbar: Snackbar$2,
        SnackbarContent: SnackbarContent$1,
        Step: Step$1,
        StepButton: StepButton$1,
        StepConnector: StepConnector$1,
        StepContent: StepContent$1,
        StepIcon: StepIcon$1,
        StepLabel: StepLabel$1,
        Stepper: Stepper$1,
        SvgIcon: SvgIcon$1,
        SwipeableDrawer: SwipeableDrawer$1,
        Switch: j,
        Tab: Tab$1,
        Table: Table$1,
        TableBody: TableBody$1,
        TableCell: TableCell$1,
        TableContainer: TableContainer$1,
        TableFooter: TableFooter$1,
        TableHead: TableHead$1,
        TablePagination: _$1,
        TableRow: TableRow$1,
        TableSortLabel: TableSortLabel$1,
        Tabs: Tabs$1,
        TabScrollButton: TabScrollButton$1,
        TextField: TextField$1,
        TextareaAutosize: TextareaAutosize$1,
        Toolbar: Toolbar$1,
        Tooltip: x,
        Typography: Typography$2,
        Unstable_TrapFocus: Unstable_TrapFocus,
        useMediaQuery: useMediaQuery,
        useScrollTrigger: useScrollTrigger,
        withMobileDialog: withMobileDialog$1,
        withWidth: withWidth$1,
        Zoom: Zoom$1,
        createTheme: createTheme,
        createMuiTheme: createMuiTheme,
        unstable_createMuiStrictModeTheme: createMuiStrictModeTheme,
        createStyles: createStyles,
        makeStyles: makeStyles,
        responsiveFontSizes: responsiveFontSizes,
        styled: styled$1,
        useTheme: useTheme,
        withStyles: withStyles,
        withTheme: withTheme$1,
        createGenerateClassName: createGenerateClassName,
        jssPreset: jssPreset,
        ServerStyleSheets: ServerStyleSheets,
        StylesProvider: StylesProvider,
        MuiThemeProvider: ThemeProvider,
        ThemeProvider: ThemeProvider,
        hexToRgb: hexToRgb,
        rgbToHex: rgbToHex,
        hslToRgb: hslToRgb,
        decomposeColor: decomposeColor,
        recomposeColor: recomposeColor,
        getContrastRatio: getContrastRatio,
        getLuminance: getLuminance,
        emphasize: emphasize,
        fade: fade,
        alpha: alpha,
        darken: darken,
        lighten: lighten,
        easing: easing,
        duration: duration,
        capitalize: capitalize,
        createChainedFunction: createChainedFunction,
        createSvgIcon: createSvgIcon$1,
        debounce: debounce$1,
        deprecatedPropType: deprecatedPropType,
        isMuiElement: isMuiElement,
        ownerDocument: ownerDocument,
        ownerWindow: ownerWindow,
        requirePropFactory: requirePropFactory,
        setRef: setRef,
        unsupportedProp: unsupportedProp,
        useControlled: useControlled,
        useEventCallback: useEventCallback,
        useForkRef: useForkRef,
        unstable_useId: useId,
        useIsFocusVisible: useIsFocusVisible,
        styleFunction: styleFunction,
        useFormControl: useFormControl,
        ModalManager: ModalManager,
        useRadioGroup: useRadioGroup,
        isWidthUp: isWidthUp,
        isWidthDown: isWidthDown
    });

    var ui$1 = {};

    var interopRequireDefault = {exports: {}};

    (function (module) {
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }

    module.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }(interopRequireDefault));

    var _typeof$e = {exports: {}};

    (function (module) {
    function _typeof(obj) {
      "@babel/helpers - typeof";

      return (module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, module.exports.__esModule = true, module.exports["default"] = module.exports), _typeof(obj);
    }

    module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }(_typeof$e));

    var theme = {};

    var defineProperty$1 = {exports: {}};

    (function (module) {
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }

      return obj;
    }

    module.exports = _defineProperty, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }(defineProperty$1));

    var require$$2$1 = /*@__PURE__*/getAugmentedNamespace(colors);

    var require$$11 = /*@__PURE__*/getAugmentedNamespace(n);

    var _extends$1 = {exports: {}};

    (function (module) {
    function _extends() {
      module.exports = _extends = Object.assign || function (target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];

          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }

        return target;
      }, module.exports.__esModule = true, module.exports["default"] = module.exports;
      return _extends.apply(this, arguments);
    }

    module.exports = _extends, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }(_extends$1));

    var objectWithoutProperties = {exports: {}};

    var objectWithoutPropertiesLoose = {exports: {}};

    (function (module) {
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;

      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }

      return target;
    }

    module.exports = _objectWithoutPropertiesLoose, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }(objectWithoutPropertiesLoose));

    (function (module) {
    var objectWithoutPropertiesLoose$1 = objectWithoutPropertiesLoose.exports;

    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};
      var target = objectWithoutPropertiesLoose$1(source, excluded);
      var key, i;

      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }

      return target;
    }

    module.exports = _objectWithoutProperties, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }(objectWithoutProperties));

    var isMergeableObject = function isMergeableObject(value) {
    	return isNonNullObject(value)
    		&& !isSpecial(value)
    };

    function isNonNullObject(value) {
    	return !!value && typeof value === 'object'
    }

    function isSpecial(value) {
    	var stringValue = Object.prototype.toString.call(value);

    	return stringValue === '[object RegExp]'
    		|| stringValue === '[object Date]'
    		|| isReactElement(value)
    }

    // see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25
    var canUseSymbol = typeof Symbol === 'function' && Symbol.for;
    var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;

    function isReactElement(value) {
    	return value.$$typeof === REACT_ELEMENT_TYPE
    }

    function emptyTarget(val) {
    	return Array.isArray(val) ? [] : {}
    }

    function cloneUnlessOtherwiseSpecified(value, options) {
    	return (options.clone !== false && options.isMergeableObject(value))
    		? deepmerge(emptyTarget(value), value, options)
    		: value
    }

    function defaultArrayMerge(target, source, options) {
    	return target.concat(source).map(function(element) {
    		return cloneUnlessOtherwiseSpecified(element, options)
    	})
    }

    function getMergeFunction(key, options) {
    	if (!options.customMerge) {
    		return deepmerge
    	}
    	var customMerge = options.customMerge(key);
    	return typeof customMerge === 'function' ? customMerge : deepmerge
    }

    function getEnumerableOwnPropertySymbols(target) {
    	return Object.getOwnPropertySymbols
    		? Object.getOwnPropertySymbols(target).filter(function(symbol) {
    			return target.propertyIsEnumerable(symbol)
    		})
    		: []
    }

    function getKeys(target) {
    	return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target))
    }

    function propertyIsOnObject(object, property) {
    	try {
    		return property in object
    	} catch(_) {
    		return false
    	}
    }

    // Protects from prototype poisoning and unexpected merging up the prototype chain.
    function propertyIsUnsafe(target, key) {
    	return propertyIsOnObject(target, key) // Properties are safe to merge if they don't exist in the target yet,
    		&& !(Object.hasOwnProperty.call(target, key) // unsafe if they exist up the prototype chain,
    			&& Object.propertyIsEnumerable.call(target, key)) // and also unsafe if they're nonenumerable.
    }

    function mergeObject(target, source, options) {
    	var destination = {};
    	if (options.isMergeableObject(target)) {
    		getKeys(target).forEach(function(key) {
    			destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
    		});
    	}
    	getKeys(source).forEach(function(key) {
    		if (propertyIsUnsafe(target, key)) {
    			return
    		}

    		if (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {
    			destination[key] = getMergeFunction(key, options)(target[key], source[key], options);
    		} else {
    			destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
    		}
    	});
    	return destination
    }

    function deepmerge(target, source, options) {
    	options = options || {};
    	options.arrayMerge = options.arrayMerge || defaultArrayMerge;
    	options.isMergeableObject = options.isMergeableObject || isMergeableObject;
    	// cloneUnlessOtherwiseSpecified is added to `options` so that custom arrayMerge()
    	// implementations can use it. The caller may not replace it.
    	options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;

    	var sourceIsArray = Array.isArray(source);
    	var targetIsArray = Array.isArray(target);
    	var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;

    	if (!sourceAndTargetTypesMatch) {
    		return cloneUnlessOtherwiseSpecified(source, options)
    	} else if (sourceIsArray) {
    		return options.arrayMerge(target, source, options)
    	} else {
    		return mergeObject(target, source, options)
    	}
    }

    deepmerge.all = function deepmergeAll(array, options) {
    	if (!Array.isArray(array)) {
    		throw new Error('first argument should be an array')
    	}

    	return array.reduce(function(prev, next) {
    		return deepmerge(prev, next, options)
    	}, {})
    };

    var deepmerge_1 = deepmerge;

    var cjs = deepmerge_1;

    var _interopRequireDefault$_ = interopRequireDefault.exports;

    Object.defineProperty(theme, "__esModule", {
      value: true
    });
    theme.createJBrowseDefaultOverrides = createJBrowseDefaultOverrides;
    theme.createJBrowseDefaultProps = createJBrowseDefaultProps;
    theme.createJBrowseTheme = createJBrowseTheme;
    theme.jbrowseDefaultPalette = theme.jbrowseBaseTheme = void 0;

    var _defineProperty2$e = _interopRequireDefault$_(defineProperty$1.exports);

    var _colors = require$$2$1;

    var _styles$7 = require$$11;

    var _deepmerge = _interopRequireDefault$_(cjs);

    function ownKeys$c(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

    function _objectSpread$c(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$c(Object(source), true).forEach(function (key) { (0, _defineProperty2$e.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$c(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

    var midnight = '#0D233F';
    var grape = '#721E63';
    var forest = '#135560';
    var mandarin = '#FFB11D';
    var refTheme = (0, _styles$7.createTheme)();
    var jbrowseDefaultPalette = {
      // type: 'dark',
      primary: {
        main: midnight
      },
      secondary: {
        main: grape
      },
      tertiary: refTheme.palette.augmentColor({
        main: forest
      }),
      quaternary: refTheme.palette.augmentColor({
        main: mandarin
      }),
      stopCodon: '#e22',
      startCodon: '#3e3',
      bases: {
        A: refTheme.palette.augmentColor(_colors.green),
        C: refTheme.palette.augmentColor(_colors.blue),
        G: refTheme.palette.augmentColor(_colors.amber),
        T: refTheme.palette.augmentColor(_colors.red)
      }
    };
    theme.jbrowseDefaultPalette = jbrowseDefaultPalette;

    function
      /* palette: PaletteOptions = {} */
    createJBrowseDefaultProps() {
      return {
        MuiButton: {
          size: 'small'
        },
        MuiFilledInput: {
          margin: 'dense'
        },
        MuiFormControl: {
          margin: 'dense'
        },
        MuiFormHelperText: {
          margin: 'dense'
        },
        MuiIconButton: {
          size: 'small'
        },
        MuiInputBase: {
          margin: 'dense'
        },
        MuiList: {
          dense: true
        },
        MuiListItem: {
          dense: true
        },
        MuiOutlinedInput: {
          margin: 'dense'
        },
        MuiFab: {
          size: 'small'
        },
        MuiTable: {
          size: 'small'
        },
        MuiTextField: {
          margin: 'dense',
          size: 'small'
        },
        MuiToolbar: {
          variant: 'dense'
        },
        MuiSvgIcon: {
          fontSize: 'small'
        },
        MuiToggleButtonGroup: {
          size: 'small'
        },
        MuiCheckbox: {
          size: 'small'
        },
        MuiLink: {
          underline: 'always'
        }
      };
    }

    function createJBrowseDefaultOverrides() {
      var palette = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var generatedPalette = (0, _deepmerge.default)(jbrowseDefaultPalette, palette);
      return {
        MuiIconButton: {
          colorSecondary: {
            color: generatedPalette.tertiary.main
          }
        },
        MuiButton: {
          textSecondary: {
            color: generatedPalette.tertiary.main
          }
        },
        MuiFab: {
          secondary: {
            backgroundColor: generatedPalette.quaternary.main
          }
        },
        MuiLink: {
          root: {
            color: generatedPalette.tertiary.main
          }
        },
        MuiAccordionSummary: {
          root: {
            // !important needed to combat the MuiButton being applied to
            // accordions in mui4.12.2 having a background:'transparent' that
            // otherwise overrides this other
            backgroundColor: generatedPalette.tertiary.main + ' !important',
            // width:100% added in 4.12.2 also
            width: '100%',
            '&$expanded': {
              // overrides the subclass e.g. .MuiAccordionSummary-root-311.MuiAccordionSummary-expanded-312
              minHeight: 0,
              color: generatedPalette.tertiary.contrastText,
              backgroundColor: generatedPalette.tertiary.main
            },
            minHeight: 0
          },
          content: {
            '&$expanded': {
              margin: '8px 8px'
            },
            margin: '8px 8px',
            color: generatedPalette.tertiary.contrastText
          }
        },
        // makes menus more compact
        MuiMenuItem: {
          root: {
            paddingTop: 3,
            paddingBottom: 3
          }
        },
        // the below two are linked to make menus more compact
        MuiListItemIcon: {
          root: {
            minWidth: 32
          }
        },
        MuiListItemText: {
          inset: {
            paddingLeft: 32
          }
        }
      };
    }

    var jbrowseBaseTheme = {
      palette: jbrowseDefaultPalette,
      typography: {
        fontSize: 12
      },
      spacing: 4,
      props: createJBrowseDefaultProps(),
      overrides: createJBrowseDefaultOverrides()
    };
    theme.jbrowseBaseTheme = jbrowseBaseTheme;

    function createJBrowseTheme(theme) {
      var _theme$palette, _theme$palette2;

      if (!theme) {
        return (0, _styles$7.createTheme)(jbrowseBaseTheme);
      }

      if ((_theme$palette = theme.palette) !== null && _theme$palette !== void 0 && _theme$palette.tertiary) {
        theme = _objectSpread$c(_objectSpread$c({}, theme), {}, {
          palette: _objectSpread$c(_objectSpread$c({}, theme.palette), {}, {
            tertiary: refTheme.palette.augmentColor(theme.palette.tertiary)
          })
        });
      }

      if ((_theme$palette2 = theme.palette) !== null && _theme$palette2 !== void 0 && _theme$palette2.quaternary) {
        theme = _objectSpread$c(_objectSpread$c({}, theme), {}, {
          palette: _objectSpread$c(_objectSpread$c({}, theme.palette), {}, {
            quaternary: refTheme.palette.augmentColor(theme.palette.quaternary)
          })
        });
      }

      theme = _objectSpread$c(_objectSpread$c({}, theme), {}, {
        props: (0, _deepmerge.default)(createJBrowseDefaultProps(), theme.props || {}),
        overrides: (0, _deepmerge.default)(createJBrowseDefaultOverrides(theme.palette), theme.overrides || {})
      });
      return (0, _styles$7.createTheme)((0, _deepmerge.default)(jbrowseBaseTheme, theme));
    }

    var Logo$1 = {};

    var _interopRequireDefault$Z = interopRequireDefault.exports;

    Object.defineProperty(Logo$1, "__esModule", {
      value: true
    });
    Logo$1.LogoFull = LogoFull;
    Logo$1.Logomark = Logomark;

    var _react$l = _interopRequireDefault$Z(React__default["default"]);

    function getColors(variant) {
      if (variant === 'black') {
        return {
          midnight: '#808080',
          forrest: '#666666',
          grape: '#4d4d4d',
          mandarin: '#333333',
          gray: '#1a1a1a'
        };
      }

      if (variant === 'white') {
        return {
          midnight: '#ffffff',
          forrest: '#e6e6e6',
          grape: '#cccccc',
          mandarin: '#b3b3b3',
          gray: '#999999'
        };
      }

      return {
        midnight: '#0d233f',
        forrest: '#135560',
        grape: '#721e63',
        mandarin: '#ffb11d',
        gray: '#dadada'
      };
    }

    function Logomark(_ref) {
      var variant = _ref.variant;
      return /*#__PURE__*/_react$l.default.createElement("svg", {
        viewBox: "0 0 175 175"
      }, /*#__PURE__*/_react$l.default.createElement(Icon, {
        variant: variant
      }));
    }

    function LogoFull(_ref2) {
      var variant = _ref2.variant;
      return /*#__PURE__*/_react$l.default.createElement("svg", {
        viewBox: "0 0 641 175"
      }, /*#__PURE__*/_react$l.default.createElement(Text, {
        variant: variant
      }), /*#__PURE__*/_react$l.default.createElement(Icon, {
        variant: variant
      }));
    }

    function Icon(_ref3) {
      var variant = _ref3.variant;
      var colors = getColors(variant);
      return /*#__PURE__*/_react$l.default.createElement(_react$l.default.Fragment, null, /*#__PURE__*/_react$l.default.createElement("path", {
        style: {
          fill: colors.midnight
        },
        d: "M120.5,57.5c.168,0,.333.012.5.013V40.506c-.167,0-.333-.006-.5-.006a98.325,98.325,0,0,0-77.4,37.565q-2.664,3.378-5.023,6.994l14.206,9.327Q54.043,91.709,56,89.179A81.363,81.363,0,0,1,120.5,57.5Z"
      }), /*#__PURE__*/_react$l.default.createElement("path", {
        style: {
          fill: colors.forrest
        },
        d: "M148.668,86.223c.308.133.6.283.908.42l6.746-15.618c-.153-.067-.3-.143-.454-.21a81.36,81.36,0,0,0-71.777,3.5q-2.8,1.544-5.469,3.309l9.249,14.054A63.93,63.93,0,0,1,148.668,86.223Z"
      }), /*#__PURE__*/_react$l.default.createElement("path", {
        style: {
          fill: colors.grape
        },
        d: "M170.894,109.37A63.929,63.929,0,0,0,113.4,88.861l2.336,15.474a48.456,48.456,0,0,1,44.322,15.42c.111.125.214.255.324.381l11.16-10C171.323,109.879,171.118,109.62,170.894,109.37Z"
      }), /*#__PURE__*/_react$l.default.createElement("path", {
        style: {
          fill: colors.mandarin
        },
        d: "M150.921,150.314c.04.163.07.326.107.489l16.509-4.058c-.039-.163-.067-.326-.107-.489A48.457,48.457,0,0,0,135.575,111.8l-5.515,15.591A32.466,32.466,0,0,1,150.921,150.314Z"
      }), /*#__PURE__*/_react$l.default.createElement("path", {
        style: {
          fill: colors.gray
        },
        d: "M134.1,138.129l-9.779,13.213a32.486,32.486,0,0,1,7.823,14.463l15.147.852c.012-.166.032-.331.041-.5A32.464,32.464,0,0,0,134.1,138.129Z"
      }));
    }

    function Text(_ref4) {
      var variant = _ref4.variant;
      var colors = getColors(variant);
      return /*#__PURE__*/_react$l.default.createElement("g", {
        "aria-label": "JBrowse",
        transform: "translate(213.084 144.241)",
        style: {
          fill: colors.midnight
        }
      }, /*#__PURE__*/_react$l.default.createElement("path", {
        d: "m 26.355,-71.505 v 54.075 2.835 q 0,6.825 -0.42,10.185 -0.735,5.67 -2.835,9.135 -3.255,5.355 -8.505,8.4 -4.83,2.73 -11.55,3.57 L 1.47,11.76 Q 7.35,10.185 9.24,4.2 10.605,-0.105 10.605,-9.975 v -5.565 -55.965 q 1.785,0 4.62,0.315 2.835,0.21 3.255,0.21 1.785,0 2.94,-0.105 4.515,-0.42 4.935,-0.42 z"
      }), /*#__PURE__*/_react$l.default.createElement("path", {
        d: "m 60.68836,-65.415 v 24.78 h 3.255 q 2.94,0 4.935,-0.525 2.1,-0.525 3.885,-2.1 2.31,-1.995 3.36,-4.83 1.155,-2.835 1.155,-6.09 0,-5.565 -2.94,-8.61 -2.94,-3.045 -8.295,-3.045 -2.52,0 -5.355,0.42 z m 0,30.87 V -6.09 h 5.25 q 4.725,0 8.505,-3.675 3.885,-3.78 3.885,-10.08 0,-8.19 -4.62,-11.655 -4.095,-3.045 -13.02,-3.045 z M 44.93836,0 v -71.505 h 27.09 q 9.135,0 14.385,3.255 6.51,3.99 6.51,12.6 0,7.035 -5.25,11.655 -4.62,4.095 -11.97,5.145 v 0.945 q 7.56,0.735 12.285,3.99 6.615,4.62 6.615,13.335 0,10.185 -7.98,15.75 -6.93,4.83 -17.43,4.83 z"
      }), /*#__PURE__*/_react$l.default.createElement("path", {
        d: "M 109.44281,0.525 V -50.4 q 1.785,0.21 3.99,0.42 2.31,0.105 3.255,0.105 2.31,0 4.2,-0.21 1.89,-0.21 3.045,-0.315 v 13.02 q 1.89,-6.51 5.46,-9.87 4.41,-4.095 11.655,-4.095 -0.315,2.73 -0.42,6.825 -0.105,3.99 -0.105,7.455 l -0.945,0.84 q -0.945,-0.735 -2.415,-1.05 -1.47,-0.315 -2.94,-0.315 -3.57,0 -6.195,1.89 -2.52,1.785 -3.465,5.04 -0.42,1.155 -0.525,3.15 -0.105,1.89 -0.105,4.515 v 4.515 19.005 q -1.785,-0.21 -2.625,-0.21 -3.675,-0.315 -4.62,-0.315 -2.31,0 -4.2,0.21 -1.89,0.21 -3.045,0.315 z"
      }), /*#__PURE__*/_react$l.default.createElement("path", {
        d: "m 173.77337,1.47 q -11.655,0 -18.585,-6.825 -6.93,-6.825 -6.93,-18.48 0,-12.6 6.72,-20.055 6.825,-7.455 18.9,-7.455 11.97,0 18.9,6.72 6.93,6.72 6.93,18.48 0,12.285 -6.72,19.74 -7.14,7.875 -19.215,7.875 z m 0.735,-48.09 q -5.88,0 -8.505,6.51 -2.205,5.565 -2.205,15.96 0,8.19 1.47,12.915 2.415,7.98 8.505,7.98 5.565,0 8.19,-7.875 2.205,-6.51 2.205,-16.695 0,-8.505 -2.1,-13.23 -2.52,-5.565 -7.56,-5.565 z"
      }), /*#__PURE__*/_react$l.default.createElement("path", {
        d: "m 222.03563,-50.4 10.5,36.015 q 3.675,-11.235 5.67,-17.85 2.415,-8.085 5.04,-18.165 1.05,0.105 3.045,0.315 2.1,0.21 2.835,0.21 1.995,0 3.15,-0.105 1.26,-0.21 2.73,-0.42 l 10.71,36.015 q 5.88,-17.43 10.71,-36.015 l 4.2,0.315 4.095,-0.315 q -5.145,13.125 -9.135,24.57 -5.04,14.28 -8.505,26.355 -1.89,-0.21 -3.36,-0.42 -1.365,-0.105 -2.205,-0.105 -1.89,0 -3.36,0.21 -1.365,0.21 -2.31,0.315 l -10.605,-34.755 q -4.41,13.65 -6.72,21.105 -2.31,7.35 -4.095,13.65 -1.89,-0.21 -3.36,-0.42 -1.365,-0.105 -2.31,-0.105 -1.995,0 -3.465,0.21 -1.365,0.21 -2.31,0.315 -3.78,-12.81 -5.04,-17.01 -2.205,-7.245 -5.46,-17.01 -2.835,-8.4 -5.88,-16.905 1.575,0 4.305,0.315 2.73,0.21 3.36,0.21 1.47,0 4.305,-0.21 2.835,-0.315 3.465,-0.315 z"
      }), /*#__PURE__*/_react$l.default.createElement("path", {
        d: "m 292.84172,-12.81 h 2.625 q 1.47,4.095 4.62,6.51 3.15,2.415 7.35,2.415 2.94,0 5.46,-1.785 2.625,-1.89 2.625,-4.62 0,-3.885 -6.195,-6.615 -10.395,-4.62 -11.655,-5.46 -6.405,-4.515 -6.405,-12.285 0,-7.77 5.25,-12.18 5.25,-4.515 12.81,-4.515 3.99,0 8.085,1.365 4.095,1.26 7.14,3.57 l -2.52,9.24 h -2.94 q -0.63,-3.57 -3.57,-6.195 -2.835,-2.625 -6.405,-2.625 -3.15,0 -5.46,1.575 -2.31,1.47 -2.31,4.515 0,3.885 6.405,6.51 10.185,4.095 11.865,5.25 6.405,4.41 6.405,12.81 0,7.455 -5.46,12.18 -5.355,4.62 -14.805,4.62 -8.19,0 -14.49,-4.305 z"
      }), /*#__PURE__*/_react$l.default.createElement("path", {
        d: "m 349.61228,-29.925 h 15.54 q 0,-6.51 -1.05,-10.395 -1.68,-6.3 -5.88,-6.3 -5.04,0 -7.14,6.195 -1.47,4.305 -1.47,10.5 z m 30.03,5.04 h -30.03 q 0,9.135 3.045,13.86 3.57,5.67 11.55,5.67 3.255,0 6.405,-1.26 3.15,-1.26 5.88,-3.465 l 1.26,0.945 -2.31,5.88 q -6.72,4.725 -15.015,4.725 -12.915,0 -19.635,-7.245 -6.72,-7.245 -6.72,-20.37 0,-11.235 6.405,-18.165 6.51,-7.035 17.64,-7.035 11.655,0 16.905,7.56 4.62,6.615 4.62,18.9 z"
      }));
    }

    var App$1 = {};

    var slicedToArray = {exports: {}};

    var arrayWithHoles = {exports: {}};

    (function (module) {
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr)) return arr;
    }

    module.exports = _arrayWithHoles, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }(arrayWithHoles));

    var iterableToArrayLimit = {exports: {}};

    (function (module) {
    function _iterableToArrayLimit(arr, i) {
      var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

      if (_i == null) return;
      var _arr = [];
      var _n = true;
      var _d = false;

      var _s, _e;

      try {
        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);

          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }

      return _arr;
    }

    module.exports = _iterableToArrayLimit, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }(iterableToArrayLimit));

    var unsupportedIterableToArray = {exports: {}};

    var arrayLikeToArray = {exports: {}};

    (function (module) {
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;

      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    }

    module.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }(arrayLikeToArray));

    (function (module) {
    var arrayLikeToArray$1 = arrayLikeToArray.exports;

    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return arrayLikeToArray$1(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray$1(o, minLen);
    }

    module.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }(unsupportedIterableToArray));

    var nonIterableRest = {exports: {}};

    (function (module) {
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }

    module.exports = _nonIterableRest, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }(nonIterableRest));

    (function (module) {
    var arrayWithHoles$1 = arrayWithHoles.exports;

    var iterableToArrayLimit$1 = iterableToArrayLimit.exports;

    var unsupportedIterableToArray$1 = unsupportedIterableToArray.exports;

    var nonIterableRest$1 = nonIterableRest.exports;

    function _slicedToArray(arr, i) {
      return arrayWithHoles$1(arr) || iterableToArrayLimit$1(arr, i) || unsupportedIterableToArray$1(arr, i) || nonIterableRest$1();
    }

    module.exports = _slicedToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }(slicedToArray));

    var require$$9$2 = /*@__PURE__*/getAugmentedNamespace(esm$2);

    var Launch = {};

    var interopRequireWildcard = {exports: {}};

    (function (module) {
    var _typeof = _typeof$e.exports["default"];

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }

      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return {
          "default": obj
        };
      }

      var cache = _getRequireWildcardCache(nodeInterop);

      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }

      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }

      newObj["default"] = obj;

      if (cache) {
        cache.set(obj, newObj);
      }

      return newObj;
    }

    module.exports = _interopRequireWildcard, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }(interopRequireWildcard));

    var createSvgIcon = {};

    var require$$0$2 = /*@__PURE__*/getAugmentedNamespace(utils);

    (function (exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "default", {
      enumerable: true,
      get: function get() {
        return _utils.createSvgIcon;
      }
    });

    var _utils = require$$0$2;
    }(createSvgIcon));

    var _interopRequireDefault$Y = interopRequireDefault.exports;

    var _interopRequireWildcard$v = interopRequireWildcard.exports;

    Object.defineProperty(Launch, "__esModule", {
      value: true
    });
    Launch.default = void 0;

    var React$h = _interopRequireWildcard$v(React__default["default"]);

    var _createSvgIcon$h = _interopRequireDefault$Y(createSvgIcon);

    var _default$B = (0, _createSvgIcon$h.default)( /*#__PURE__*/React$h.createElement("path", {
      d: "M19 19H5V5h7V3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2v-7h-2v7zM14 3v2h3.59l-9.83 9.83 1.41 1.41L19 6.41V10h2V3h-7z"
    }), 'Launch');

    Launch.default = _default$B;

    var require$$13 = /*@__PURE__*/getAugmentedNamespace(mobxreact_esm);

    var livelinessChecking = "warn";
    /**
     * Defines what MST should do when running into reads / writes to objects that have died.
     * By default it will print a warning.
     * Use the `"error"` option to easy debugging to see where the error was thrown and when the offending read / write took place
     *
     * @param mode `"warn"`, `"error"` or `"ignore"`
     */
    function setLivelinessChecking(mode) {
        livelinessChecking = mode;
    }
    /**
     * Returns the current liveliness checking mode.
     *
     * @returns `"warn"`, `"error"` or `"ignore"`
     */
    function getLivelinessChecking() {
        return livelinessChecking;
    }
    /**
     * @deprecated use setLivelinessChecking instead
     * @hidden
     *
     * Defines what MST should do when running into reads / writes to objects that have died.
     * By default it will print a warning.
     * Use the `"error"` option to easy debugging to see where the error was thrown and when the offending read / write took place
     *
     * @param mode `"warn"`, `"error"` or `"ignore"`
     */
    function setLivelynessChecking(mode) {
        setLivelinessChecking(mode);
    }

    /**
     * @internal
     * @hidden
     */
    var Hook;
    (function (Hook) {
        Hook["afterCreate"] = "afterCreate";
        Hook["afterAttach"] = "afterAttach";
        Hook["afterCreationFinalization"] = "afterCreationFinalization";
        Hook["beforeDetach"] = "beforeDetach";
        Hook["beforeDestroy"] = "beforeDestroy";
    })(Hook || (Hook = {}));

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics$1 = function(d, b) {
        extendStatics$1 = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics$1(d, b);
    };

    function __extends$1(d, b) {
        extendStatics$1(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign$4 = function() {
        __assign$4 = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign$4.apply(this, arguments);
    };

    function __rest$2(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m) return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * Returns the _actual_ type of the given tree node. (Or throws)
     *
     * @param object
     * @returns
     */
    function getType(object) {
        assertIsStateTreeNode(object, 1);
        return getStateTreeNode(object).type;
    }
    /**
     * Returns the _declared_ type of the given sub property of an object, array or map.
     * In the case of arrays and maps the property name is optional and will be ignored.
     *
     * Example:
     * ```ts
     * const Box = types.model({ x: 0, y: 0 })
     * const box = Box.create()
     *
     * console.log(getChildType(box, "x").name) // 'number'
     * ```
     *
     * @param object
     * @param propertyName
     * @returns
     */
    function getChildType(object, propertyName) {
        assertIsStateTreeNode(object, 1);
        return getStateTreeNode(object).getChildType(propertyName);
    }
    /**
     * Registers a function that will be invoked for each mutation that is applied to the provided model instance, or to any of its children.
     * See [patches](https://github.com/mobxjs/mobx-state-tree#patches) for more details. onPatch events are emitted immediately and will not await the end of a transaction.
     * Patches can be used to deep observe a model tree.
     *
     * @param target the model instance from which to receive patches
     * @param callback the callback that is invoked for each patch. The reversePatch is a patch that would actually undo the emitted patch
     * @returns function to remove the listener
     */
    function onPatch(target, callback) {
        // check all arguments
        assertIsStateTreeNode(target, 1);
        assertIsFunction(callback, 2);
        return getStateTreeNode(target).onPatch(callback);
    }
    /**
     * Registers a function that is invoked whenever a new snapshot for the given model instance is available.
     * The listener will only be fire at the end of the current MobX (trans)action.
     * See [snapshots](https://github.com/mobxjs/mobx-state-tree#snapshots) for more details.
     *
     * @param target
     * @param callback
     * @returns
     */
    function onSnapshot(target, callback) {
        // check all arguments
        assertIsStateTreeNode(target, 1);
        assertIsFunction(callback, 2);
        return getStateTreeNode(target).onSnapshot(callback);
    }
    /**
     * Applies a JSON-patch to the given model instance or bails out if the patch couldn't be applied
     * See [patches](https://github.com/mobxjs/mobx-state-tree#patches) for more details.
     *
     * Can apply a single past, or an array of patches.
     *
     * @param target
     * @param patch
     * @returns
     */
    function applyPatch(target, patch) {
        // check all arguments
        assertIsStateTreeNode(target, 1);
        assertArg(patch, function (p) { return typeof p === "object"; }, "object or array", 2);
        getStateTreeNode(target).applyPatches(asArray(patch));
    }
    /**
     * Small abstraction around `onPatch` and `applyPatch`, attaches a patch listener to a tree and records all the patches.
     * Returns an recorder object with the following signature:
     *
     * Example:
     * ```ts
     * export interface IPatchRecorder {
     *      // the recorded patches
     *      patches: IJsonPatch[]
     *      // the inverse of the recorded patches
     *      inversePatches: IJsonPatch[]
     *      // true if currently recording
     *      recording: boolean
     *      // stop recording patches
     *      stop(): void
     *      // resume recording patches
     *      resume(): void
     *      // apply all the recorded patches on the given target (the original subject if omitted)
     *      replay(target?: IAnyStateTreeNode): void
     *      // reverse apply the recorded patches on the given target  (the original subject if omitted)
     *      // stops the recorder if not already stopped
     *      undo(): void
     * }
     * ```
     *
     * The optional filter function allows to skip recording certain patches.
     *
     * @param subject
     * @param filter
     * @returns
     */
    function recordPatches(subject, filter) {
        // check all arguments
        assertIsStateTreeNode(subject, 1);
        var data = {
            patches: [],
            reversedInversePatches: []
        };
        // we will generate the immutable copy of patches on demand for public consumption
        var publicData = {};
        var disposer;
        var recorder = {
            get recording() {
                return !!disposer;
            },
            get patches() {
                if (!publicData.patches) {
                    publicData.patches = data.patches.slice();
                }
                return publicData.patches;
            },
            get reversedInversePatches() {
                if (!publicData.reversedInversePatches) {
                    publicData.reversedInversePatches = data.reversedInversePatches.slice();
                }
                return publicData.reversedInversePatches;
            },
            get inversePatches() {
                if (!publicData.inversePatches) {
                    publicData.inversePatches = data.reversedInversePatches.slice().reverse();
                }
                return publicData.inversePatches;
            },
            stop: function () {
                if (disposer) {
                    disposer();
                    disposer = undefined;
                }
            },
            resume: function () {
                if (disposer)
                    return;
                disposer = onPatch(subject, function (patch, inversePatch) {
                    // skip patches that are asked to be filtered if there's a filter in place
                    if (filter && !filter(patch, inversePatch, getRunningActionContext())) {
                        return;
                    }
                    data.patches.push(patch);
                    data.reversedInversePatches.unshift(inversePatch);
                    // mark immutable public patches as dirty
                    publicData.patches = undefined;
                    publicData.inversePatches = undefined;
                    publicData.reversedInversePatches = undefined;
                });
            },
            replay: function (target) {
                applyPatch(target || subject, data.patches);
            },
            undo: function (target) {
                applyPatch(target || subject, data.reversedInversePatches);
            }
        };
        recorder.resume();
        return recorder;
    }
    /**
     * The inverse of `unprotect`.
     *
     * @param target
     */
    function protect(target) {
        // check all arguments
        assertIsStateTreeNode(target, 1);
        var node = getStateTreeNode(target);
        if (!node.isRoot)
            throw fail$1("`protect` can only be invoked on root nodes");
        node.isProtectionEnabled = true;
    }
    /**
     * By default it is not allowed to directly modify a model. Models can only be modified through actions.
     * However, in some cases you don't care about the advantages (like replayability, traceability, etc) this yields.
     * For example because you are building a PoC or don't have any middleware attached to your tree.
     *
     * In that case you can disable this protection by calling `unprotect` on the root of your tree.
     *
     * Example:
     * ```ts
     * const Todo = types.model({
     *     done: false
     * }).actions(self => ({
     *     toggle() {
     *         self.done = !self.done
     *     }
     * }))
     *
     * const todo = Todo.create()
     * todo.done = true // throws!
     * todo.toggle() // OK
     * unprotect(todo)
     * todo.done = false // OK
     * ```
     */
    function unprotect(target) {
        // check all arguments
        assertIsStateTreeNode(target, 1);
        var node = getStateTreeNode(target);
        if (!node.isRoot)
            throw fail$1("`unprotect` can only be invoked on root nodes");
        node.isProtectionEnabled = false;
    }
    /**
     * Returns true if the object is in protected mode, @see protect
     */
    function isProtected(target) {
        return getStateTreeNode(target).isProtected;
    }
    /**
     * Applies a snapshot to a given model instances. Patch and snapshot listeners will be invoked as usual.
     *
     * @param target
     * @param snapshot
     * @returns
     */
    function applySnapshot(target, snapshot) {
        // check all arguments
        assertIsStateTreeNode(target, 1);
        return getStateTreeNode(target).applySnapshot(snapshot);
    }
    /**
     * Calculates a snapshot from the given model instance. The snapshot will always reflect the latest state but use
     * structural sharing where possible. Doesn't require MobX transactions to be completed.
     *
     * @param target
     * @param applyPostProcess If true (the default) then postProcessSnapshot gets applied.
     * @returns
     */
    function getSnapshot(target, applyPostProcess) {
        if (applyPostProcess === void 0) { applyPostProcess = true; }
        // check all arguments
        assertIsStateTreeNode(target, 1);
        var node = getStateTreeNode(target);
        if (applyPostProcess)
            return node.snapshot;
        return freeze(node.type.getSnapshot(node, false));
    }
    /**
     * Given a model instance, returns `true` if the object has a parent, that is, is part of another object, map or array.
     *
     * @param target
     * @param depth How far should we look upward? 1 by default.
     * @returns
     */
    function hasParent(target, depth) {
        if (depth === void 0) { depth = 1; }
        // check all arguments
        assertIsStateTreeNode(target, 1);
        assertIsNumber(depth, 2, 0);
        var parent = getStateTreeNode(target).parent;
        while (parent) {
            if (--depth === 0)
                return true;
            parent = parent.parent;
        }
        return false;
    }
    /**
     * Returns the immediate parent of this object, or throws.
     *
     * Note that the immediate parent can be either an object, map or array, and
     * doesn't necessarily refer to the parent model.
     *
     * Please note that in child nodes access to the root is only possible
     * once the `afterAttach` hook has fired.
     *
     * @param target
     * @param depth How far should we look upward? 1 by default.
     * @returns
     */
    function getParent(target, depth) {
        if (depth === void 0) { depth = 1; }
        // check all arguments
        assertIsStateTreeNode(target, 1);
        assertIsNumber(depth, 2, 0);
        var d = depth;
        var parent = getStateTreeNode(target).parent;
        while (parent) {
            if (--d === 0)
                return parent.storedValue;
            parent = parent.parent;
        }
        throw fail$1("Failed to find the parent of " + getStateTreeNode(target) + " at depth " + depth);
    }
    /**
     * Given a model instance, returns `true` if the object has a parent of given type, that is, is part of another object, map or array
     *
     * @param target
     * @param type
     * @returns
     */
    function hasParentOfType(target, type) {
        // check all arguments
        assertIsStateTreeNode(target, 1);
        assertIsType(type, 2);
        var parent = getStateTreeNode(target).parent;
        while (parent) {
            if (type.is(parent.storedValue))
                return true;
            parent = parent.parent;
        }
        return false;
    }
    /**
     * Returns the target's parent of a given type, or throws.
     *
     * @param target
     * @param type
     * @returns
     */
    function getParentOfType(target, type) {
        // check all arguments
        assertIsStateTreeNode(target, 1);
        assertIsType(type, 2);
        var parent = getStateTreeNode(target).parent;
        while (parent) {
            if (type.is(parent.storedValue))
                return parent.storedValue;
            parent = parent.parent;
        }
        throw fail$1("Failed to find the parent of " + getStateTreeNode(target) + " of a given type");
    }
    /**
     * Given an object in a model tree, returns the root object of that tree.
     *
     * Please note that in child nodes access to the root is only possible
     * once the `afterAttach` hook has fired.
     *
     * @param target
     * @returns
     */
    function getRoot(target) {
        // check all arguments
        assertIsStateTreeNode(target, 1);
        return getStateTreeNode(target).root.storedValue;
    }
    /**
     * Returns the path of the given object in the model tree
     *
     * @param target
     * @returns
     */
    function getPath(target) {
        // check all arguments
        assertIsStateTreeNode(target, 1);
        return getStateTreeNode(target).path;
    }
    /**
     * Returns the path of the given object as unescaped string array.
     *
     * @param target
     * @returns
     */
    function getPathParts(target) {
        // check all arguments
        assertIsStateTreeNode(target, 1);
        return splitJsonPath(getStateTreeNode(target).path);
    }
    /**
     * Returns true if the given object is the root of a model tree.
     *
     * @param target
     * @returns
     */
    function isRoot(target) {
        // check all arguments
        assertIsStateTreeNode(target, 1);
        return getStateTreeNode(target).isRoot;
    }
    /**
     * Resolves a path relatively to a given object.
     * Returns undefined if no value can be found.
     *
     * @param target
     * @param path escaped json path
     * @returns
     */
    function resolvePath(target, path) {
        // check all arguments
        assertIsStateTreeNode(target, 1);
        assertIsString(path, 2);
        var node = resolveNodeByPath(getStateTreeNode(target), path);
        return node ? node.value : undefined;
    }
    /**
     * Resolves a model instance given a root target, the type and the identifier you are searching for.
     * Returns undefined if no value can be found.
     *
     * @param type
     * @param target
     * @param identifier
     * @returns
     */
    function resolveIdentifier(type, target, identifier) {
        // check all arguments
        assertIsType(type, 1);
        assertIsStateTreeNode(target, 2);
        assertIsValidIdentifier(identifier, 3);
        var node = getStateTreeNode(target).root.identifierCache.resolve(type, normalizeIdentifier(identifier));
        return node ? node.value : undefined;
    }
    /**
     * Returns the identifier of the target node.
     * This is the *string normalized* identifier, which might not match the type of the identifier attribute
     *
     * @param target
     * @returns
     */
    function getIdentifier(target) {
        // check all arguments
        assertIsStateTreeNode(target, 1);
        return getStateTreeNode(target).identifier;
    }
    /**
     * Tests if a reference is valid (pointing to an existing node and optionally if alive) and returns such reference if it the check passes,
     * else it returns undefined.
     *
     * @param getter Function to access the reference.
     * @param checkIfAlive true to also make sure the referenced node is alive (default), false to skip this check.
     * @returns
     */
    function tryReference(getter, checkIfAlive) {
        if (checkIfAlive === void 0) { checkIfAlive = true; }
        try {
            var node = getter();
            if (node === undefined || node === null) {
                return undefined;
            }
            else if (isStateTreeNode(node)) {
                if (!checkIfAlive) {
                    return node;
                }
                else {
                    return isAlive(node) ? node : undefined;
                }
            }
            else {
                throw fail$1("The reference to be checked is not one of node, null or undefined");
            }
        }
        catch (e) {
            if (e instanceof InvalidReferenceError) {
                return undefined;
            }
            throw e;
        }
    }
    /**
     * Tests if a reference is valid (pointing to an existing node and optionally if alive) and returns if the check passes or not.
     *
     * @param getter Function to access the reference.
     * @param checkIfAlive true to also make sure the referenced node is alive (default), false to skip this check.
     * @returns
     */
    function isValidReference(getter, checkIfAlive) {
        if (checkIfAlive === void 0) { checkIfAlive = true; }
        try {
            var node = getter();
            if (node === undefined || node === null) {
                return false;
            }
            else if (isStateTreeNode(node)) {
                return checkIfAlive ? isAlive(node) : true;
            }
            else {
                throw fail$1("The reference to be checked is not one of node, null or undefined");
            }
        }
        catch (e) {
            if (e instanceof InvalidReferenceError) {
                return false;
            }
            throw e;
        }
    }
    /**
     * Try to resolve a given path relative to a given node.
     *
     * @param target
     * @param path
     * @returns
     */
    function tryResolve(target, path) {
        // check all arguments
        assertIsStateTreeNode(target, 1);
        assertIsString(path, 2);
        var node = resolveNodeByPath(getStateTreeNode(target), path, false);
        if (node === undefined)
            return undefined;
        try {
            return node.value;
        }
        catch (e) {
            // For what ever reason not resolvable (e.g. totally not existing path, or value that cannot be fetched)
            // see test / issue: 'try resolve doesn't work #686'
            return undefined;
        }
    }
    /**
     * Given two state tree nodes that are part of the same tree,
     * returns the shortest jsonpath needed to navigate from the one to the other
     *
     * @param base
     * @param target
     * @returns
     */
    function getRelativePath(base, target) {
        // check all arguments
        assertIsStateTreeNode(base, 1);
        assertIsStateTreeNode(target, 2);
        return getRelativePathBetweenNodes(getStateTreeNode(base), getStateTreeNode(target));
    }
    /**
     * Returns a deep copy of the given state tree node as new tree.
     * Short hand for `snapshot(x) = getType(x).create(getSnapshot(x))`
     *
     * _Tip: clone will create a literal copy, including the same identifiers. To modify identifiers etc during cloning, don't use clone but take a snapshot of the tree, modify it, and create new instance_
     *
     * @param source
     * @param keepEnvironment indicates whether the clone should inherit the same environment (`true`, the default), or not have an environment (`false`). If an object is passed in as second argument, that will act as the environment for the cloned tree.
     * @returns
     */
    function clone(source, keepEnvironment) {
        if (keepEnvironment === void 0) { keepEnvironment = true; }
        // check all arguments
        assertIsStateTreeNode(source, 1);
        var node = getStateTreeNode(source);
        return node.type.create(node.snapshot, keepEnvironment === true
            ? node.root.environment
            : keepEnvironment === false
                ? undefined
                : keepEnvironment); // it's an object or something else
    }
    /**
     * Removes a model element from the state tree, and let it live on as a new state tree
     */
    function detach(target) {
        // check all arguments
        assertIsStateTreeNode(target, 1);
        getStateTreeNode(target).detach();
        return target;
    }
    /**
     * Removes a model element from the state tree, and mark it as end-of-life; the element should not be used anymore
     */
    function destroy(target) {
        // check all arguments
        assertIsStateTreeNode(target, 1);
        var node = getStateTreeNode(target);
        if (node.isRoot)
            node.die();
        else
            node.parent.removeChild(node.subpath);
    }
    /**
     * Returns true if the given state tree node is not killed yet.
     * This means that the node is still a part of a tree, and that `destroy`
     * has not been called. If a node is not alive anymore, the only thing one can do with it
     * is requesting it's last path and snapshot
     *
     * @param target
     * @returns
     */
    function isAlive(target) {
        // check all arguments
        assertIsStateTreeNode(target, 1);
        return getStateTreeNode(target).observableIsAlive;
    }
    /**
     * Use this utility to register a function that should be called whenever the
     * targeted state tree node is destroyed. This is a useful alternative to managing
     * cleanup methods yourself using the `beforeDestroy` hook.
     *
     * This methods returns the same disposer that was passed as argument.
     *
     * Example:
     * ```ts
     * const Todo = types.model({
     *   title: types.string
     * }).actions(self => ({
     *   afterCreate() {
     *     const autoSaveDisposer = reaction(
     *       () => getSnapshot(self),
     *       snapshot => sendSnapshotToServerSomehow(snapshot)
     *     )
     *     // stop sending updates to server if this
     *     // instance is destroyed
     *     addDisposer(self, autoSaveDisposer)
     *   }
     * }))
     * ```
     *
     * @param target
     * @param disposer
     * @returns The same disposer that was passed as argument
     */
    function addDisposer(target, disposer) {
        // check all arguments
        assertIsStateTreeNode(target, 1);
        assertIsFunction(disposer, 2);
        var node = getStateTreeNode(target);
        node.addDisposer(disposer);
        return disposer;
    }
    /**
     * Returns the environment of the current state tree. For more info on environments,
     * see [Dependency injection](https://github.com/mobxjs/mobx-state-tree#dependency-injection)
     *
     * Please note that in child nodes access to the root is only possible
     * once the `afterAttach` hook has fired
     *
     * Returns an empty environment if the tree wasn't initialized with an environment
     *
     * @param target
     * @returns
     */
    function getEnv(target) {
        // check all arguments
        assertIsStateTreeNode(target, 1);
        var node = getStateTreeNode(target);
        var env = node.root.environment;
        if (!env)
            return EMPTY_OBJECT;
        return env;
    }
    /**
     * Performs a depth first walk through a tree.
     */
    function walk(target, processor) {
        // check all arguments
        assertIsStateTreeNode(target, 1);
        assertIsFunction(processor, 2);
        var node = getStateTreeNode(target);
        // tslint:disable-next-line:no_unused-variable
        node.getChildren().forEach(function (child) {
            if (isStateTreeNode(child.storedValue))
                walk(child.storedValue, processor);
        });
        processor(node.storedValue);
    }
    /**
     * Returns a reflection of the model type properties and name for either a model type or model node.
     *
     * @param typeOrNode
     * @returns
     */
    function getPropertyMembers(typeOrNode) {
        var type;
        if (isStateTreeNode(typeOrNode)) {
            type = getType(typeOrNode);
        }
        else {
            type = typeOrNode;
        }
        assertArg(type, function (t) { return isModelType(t); }, "model type or model instance", 1);
        return {
            name: type.name,
            properties: __assign$4({}, type.properties)
        };
    }
    /**
     * Returns a reflection of the model node, including name, properties, views, volatile and actions.
     *
     * @param target
     * @returns
     */
    function getMembers(target) {
        var type = getStateTreeNode(target).type;
        var reflected = __assign$4({}, getPropertyMembers(type), { actions: [], volatile: [], views: [] });
        var props = Object.getOwnPropertyNames(target);
        props.forEach(function (key) {
            if (key in reflected.properties)
                return;
            var descriptor = Object.getOwnPropertyDescriptor(target, key);
            if (descriptor.get) {
                if (isComputedProp(target, key))
                    reflected.views.push(key);
                else
                    reflected.volatile.push(key);
                return;
            }
            if (descriptor.value._isMSTAction === true)
                reflected.actions.push(key);
            else if (isObservableProp(target, key))
                reflected.volatile.push(key);
            else
                reflected.views.push(key);
        });
        return reflected;
    }
    /**
     * Casts a node snapshot or instance type to an instance type so it can be assigned to a type instance.
     * Note that this is just a cast for the type system, this is, it won't actually convert a snapshot to an instance,
     * but just fool typescript into thinking so.
     * Either way, casting when outside an assignation operation won't compile.
     *
     * Example:
     * ```ts
     * const ModelA = types.model({
     *   n: types.number
     * }).actions(self => ({
     *   setN(aNumber: number) {
     *     self.n = aNumber
     *   }
     * }))
     *
     * const ModelB = types.model({
     *   innerModel: ModelA
     * }).actions(self => ({
     *   someAction() {
     *     // this will allow the compiler to assign a snapshot to the property
     *     self.innerModel = cast({ a: 5 })
     *   }
     * }))
     * ```
     *
     * @param snapshotOrInstance Snapshot or instance
     * @returns The same object casted as an instance
     */
    function cast(snapshotOrInstance) {
        return snapshotOrInstance;
    }
    /**
     * Casts a node instance type to an snapshot type so it can be assigned to a type snapshot (e.g. to be used inside a create call).
     * Note that this is just a cast for the type system, this is, it won't actually convert an instance to a snapshot,
     * but just fool typescript into thinking so.
     *
     * Example:
     * ```ts
     * const ModelA = types.model({
     *   n: types.number
     * }).actions(self => ({
     *   setN(aNumber: number) {
     *     self.n = aNumber
     *   }
     * }))
     *
     * const ModelB = types.model({
     *   innerModel: ModelA
     * })
     *
     * const a = ModelA.create({ n: 5 });
     * // this will allow the compiler to use a model as if it were a snapshot
     * const b = ModelB.create({ innerModel: castToSnapshot(a)})
     * ```
     *
     * @param snapshotOrInstance Snapshot or instance
     * @returns The same object casted as an input (creation) snapshot
     */
    function castToSnapshot(snapshotOrInstance) {
        return snapshotOrInstance;
    }
    /**
     * Casts a node instance type to a reference snapshot type so it can be assigned to a refernence snapshot (e.g. to be used inside a create call).
     * Note that this is just a cast for the type system, this is, it won't actually convert an instance to a refererence snapshot,
     * but just fool typescript into thinking so.
     *
     * Example:
     * ```ts
     * const ModelA = types.model({
     *   id: types.identifier,
     *   n: types.number
     * }).actions(self => ({
     *   setN(aNumber: number) {
     *     self.n = aNumber
     *   }
     * }))
     *
     * const ModelB = types.model({
     *   refA: types.reference(ModelA)
     * })
     *
     * const a = ModelA.create({ id: 'someId', n: 5 });
     * // this will allow the compiler to use a model as if it were a reference snapshot
     * const b = ModelB.create({ refA: castToReference(a)})
     * ```
     *
     * @param instance Instance
     * @returns The same object casted as an reference snapshot (string or number)
     */
    function castToReferenceSnapshot(instance) {
        return instance;
    }
    /**
     * Returns the unique node id (not to be confused with the instance identifier) for a
     * given instance.
     * This id is a number that is unique for each instance.
     *
     * @export
     * @param target
     * @returns
     */
    function getNodeId(target) {
        assertIsStateTreeNode(target, 1);
        return getStateTreeNode(target).nodeId;
    }

    /**
     * @internal
     * @hidden
     */
    var BaseNode = /** @class */ (function () {
        function BaseNode(type, parent, subpath, environment) {
            this.type = type;
            this.environment = environment;
            this._state = NodeLifeCycle.INITIALIZING;
            this.environment = environment;
            this.baseSetParent(parent, subpath);
        }
        Object.defineProperty(BaseNode.prototype, "subpath", {
            get: function () {
                return this._subpath;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BaseNode.prototype, "subpathUponDeath", {
            get: function () {
                return this._subpathUponDeath;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BaseNode.prototype, "pathUponDeath", {
            get: function () {
                return this._pathUponDeath;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BaseNode.prototype, "value", {
            get: function () {
                return this.type.getValue(this);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BaseNode.prototype, "state", {
            get: function () {
                return this._state;
            },
            set: function (val) {
                var wasAlive = this.isAlive;
                this._state = val;
                var isAlive = this.isAlive;
                if (this.aliveAtom && wasAlive !== isAlive) {
                    this.aliveAtom.reportChanged();
                }
            },
            enumerable: true,
            configurable: true
        });
        BaseNode.prototype.fireInternalHook = function (name) {
            if (this._hookSubscribers) {
                this._hookSubscribers.emit(name, this, name);
            }
        };
        BaseNode.prototype.registerHook = function (hook, hookHandler) {
            if (!this._hookSubscribers) {
                this._hookSubscribers = new EventHandlers();
            }
            return this._hookSubscribers.register(hook, hookHandler);
        };
        Object.defineProperty(BaseNode.prototype, "parent", {
            get: function () {
                return this._parent;
            },
            enumerable: true,
            configurable: true
        });
        BaseNode.prototype.baseSetParent = function (parent, subpath) {
            this._parent = parent;
            this._subpath = subpath;
            this._escapedSubpath = undefined; // regenerate when needed
            if (this.pathAtom) {
                this.pathAtom.reportChanged();
            }
        };
        Object.defineProperty(BaseNode.prototype, "path", {
            /*
             * Returns (escaped) path representation as string
             */
            get: function () {
                return this.getEscapedPath(true);
            },
            enumerable: true,
            configurable: true
        });
        BaseNode.prototype.getEscapedPath = function (reportObserved) {
            if (reportObserved) {
                if (!this.pathAtom) {
                    this.pathAtom = createAtom("path");
                }
                this.pathAtom.reportObserved();
            }
            if (!this.parent)
                return "";
            // regenerate escaped subpath if needed
            if (this._escapedSubpath === undefined) {
                this._escapedSubpath = !this._subpath ? "" : escapeJsonPath(this._subpath);
            }
            return this.parent.getEscapedPath(reportObserved) + "/" + this._escapedSubpath;
        };
        Object.defineProperty(BaseNode.prototype, "isRoot", {
            get: function () {
                return this.parent === null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BaseNode.prototype, "isAlive", {
            get: function () {
                return this.state !== NodeLifeCycle.DEAD;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BaseNode.prototype, "isDetaching", {
            get: function () {
                return this.state === NodeLifeCycle.DETACHING;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BaseNode.prototype, "observableIsAlive", {
            get: function () {
                if (!this.aliveAtom) {
                    this.aliveAtom = createAtom("alive");
                }
                this.aliveAtom.reportObserved();
                return this.isAlive;
            },
            enumerable: true,
            configurable: true
        });
        BaseNode.prototype.baseFinalizeCreation = function (whenFinalized) {
            if (devMode()) {
                if (!this.isAlive) {
                    // istanbul ignore next
                    throw fail("assertion failed: cannot finalize the creation of a node that is already dead");
                }
            }
            // goal: afterCreate hooks runs depth-first. After attach runs parent first, so on afterAttach the parent has completed already
            if (this.state === NodeLifeCycle.CREATED) {
                if (this.parent) {
                    if (this.parent.state !== NodeLifeCycle.FINALIZED) {
                        // parent not ready yet, postpone
                        return;
                    }
                    this.fireHook(Hook.afterAttach);
                }
                this.state = NodeLifeCycle.FINALIZED;
                if (whenFinalized) {
                    whenFinalized();
                }
            }
        };
        BaseNode.prototype.baseFinalizeDeath = function () {
            if (this._hookSubscribers) {
                this._hookSubscribers.clearAll();
            }
            this._subpathUponDeath = this._subpath;
            this._pathUponDeath = this.getEscapedPath(false);
            this.baseSetParent(null, "");
            this.state = NodeLifeCycle.DEAD;
        };
        BaseNode.prototype.baseAboutToDie = function () {
            this.fireHook(Hook.beforeDestroy);
        };
        return BaseNode;
    }());

    /**
     * @internal
     * @hidden
     */
    var ScalarNode = /** @class */ (function (_super) {
        __extends$1(ScalarNode, _super);
        function ScalarNode(simpleType, parent, subpath, environment, initialSnapshot) {
            var _this = _super.call(this, simpleType, parent, subpath, environment) || this;
            try {
                _this.storedValue = simpleType.createNewInstance(initialSnapshot);
            }
            catch (e) {
                // short-cut to die the instance, to avoid the snapshot computed starting to throw...
                _this.state = NodeLifeCycle.DEAD;
                throw e;
            }
            _this.state = NodeLifeCycle.CREATED;
            // for scalar nodes there's no point in firing this event since it would fire on the constructor, before
            // anybody can actually register for/listen to it
            // this.fireHook(Hook.AfterCreate)
            _this.finalizeCreation();
            return _this;
        }
        Object.defineProperty(ScalarNode.prototype, "root", {
            get: function () {
                // future optimization: store root ref in the node and maintain it
                if (!this.parent)
                    throw fail$1("This scalar node is not part of a tree");
                return this.parent.root;
            },
            enumerable: true,
            configurable: true
        });
        ScalarNode.prototype.setParent = function (newParent, subpath) {
            var parentChanged = this.parent !== newParent;
            var subpathChanged = this.subpath !== subpath;
            if (!parentChanged && !subpathChanged) {
                return;
            }
            if (devMode()) {
                if (!subpath) {
                    // istanbul ignore next
                    throw fail$1("assertion failed: subpath expected");
                }
                if (!newParent) {
                    // istanbul ignore next
                    throw fail$1("assertion failed: parent expected");
                }
                if (parentChanged) {
                    // istanbul ignore next
                    throw fail$1("assertion failed: scalar nodes cannot change their parent");
                }
            }
            this.environment = undefined; // use parent's
            this.baseSetParent(this.parent, subpath);
        };
        Object.defineProperty(ScalarNode.prototype, "snapshot", {
            get: function () {
                return freeze(this.getSnapshot());
            },
            enumerable: true,
            configurable: true
        });
        ScalarNode.prototype.getSnapshot = function () {
            return this.type.getSnapshot(this);
        };
        ScalarNode.prototype.toString = function () {
            var path = (this.isAlive ? this.path : this.pathUponDeath) || "<root>";
            return this.type.name + "@" + path + (this.isAlive ? "" : " [dead]");
        };
        ScalarNode.prototype.die = function () {
            if (!this.isAlive || this.state === NodeLifeCycle.DETACHING)
                return;
            this.aboutToDie();
            this.finalizeDeath();
        };
        ScalarNode.prototype.finalizeCreation = function () {
            this.baseFinalizeCreation();
        };
        ScalarNode.prototype.aboutToDie = function () {
            this.baseAboutToDie();
        };
        ScalarNode.prototype.finalizeDeath = function () {
            this.baseFinalizeDeath();
        };
        ScalarNode.prototype.fireHook = function (name) {
            this.fireInternalHook(name);
        };
        __decorate([
            action
        ], ScalarNode.prototype, "die", null);
        return ScalarNode;
    }(BaseNode));

    var nextNodeId = 1;
    var snapshotReactionOptions = {
        onError: function (e) {
            throw e;
        }
    };
    /**
     * @internal
     * @hidden
     */
    var ObjectNode = /** @class */ (function (_super) {
        __extends$1(ObjectNode, _super);
        function ObjectNode(complexType, parent, subpath, environment, initialValue) {
            var _this = _super.call(this, complexType, parent, subpath, environment) || this;
            _this.nodeId = ++nextNodeId;
            _this.isProtectionEnabled = true;
            _this._autoUnbox = true; // unboxing is disabled when reading child nodes
            _this._isRunningAction = false; // only relevant for root
            _this._hasSnapshotReaction = false;
            _this._observableInstanceState = 0 /* UNINITIALIZED */;
            _this._cachedInitialSnapshotCreated = false;
            _this.unbox = _this.unbox.bind(_this);
            _this._initialSnapshot = freeze(initialValue);
            _this.identifierAttribute = complexType.identifierAttribute;
            if (!parent) {
                _this.identifierCache = new IdentifierCache();
            }
            _this._childNodes = complexType.initializeChildNodes(_this, _this._initialSnapshot);
            // identifier can not be changed during lifecycle of a node
            // so we safely can read it from initial snapshot
            _this.identifier = null;
            _this.unnormalizedIdentifier = null;
            if (_this.identifierAttribute && _this._initialSnapshot) {
                var id = _this._initialSnapshot[_this.identifierAttribute];
                if (id === undefined) {
                    // try with the actual node if not (for optional identifiers)
                    var childNode = _this._childNodes[_this.identifierAttribute];
                    if (childNode) {
                        id = childNode.value;
                    }
                }
                if (typeof id !== "string" && typeof id !== "number") {
                    throw fail$1("Instance identifier '" + _this.identifierAttribute + "' for type '" + _this.type.name + "' must be a string or a number");
                }
                // normalize internal identifier to string
                _this.identifier = normalizeIdentifier(id);
                _this.unnormalizedIdentifier = id;
            }
            if (!parent) {
                _this.identifierCache.addNodeToCache(_this);
            }
            else {
                parent.root.identifierCache.addNodeToCache(_this);
            }
            return _this;
        }
        ObjectNode.prototype.applyPatches = function (patches) {
            this.createObservableInstanceIfNeeded();
            this._applyPatches(patches);
        };
        ObjectNode.prototype.applySnapshot = function (snapshot) {
            this.createObservableInstanceIfNeeded();
            this._applySnapshot(snapshot);
        };
        ObjectNode.prototype.createObservableInstanceIfNeeded = function () {
            var e_1, _a;
            if (this._observableInstanceState !== 0 /* UNINITIALIZED */) {
                return;
            }
            if (devMode()) {
                if (this.state !== NodeLifeCycle.INITIALIZING) {
                    // istanbul ignore next
                    throw fail$1("assertion failed: the creation of the observable instance must be done on the initializing phase");
                }
            }
            this._observableInstanceState = 1 /* CREATING */;
            // make sure the parent chain is created as well
            // array with parent chain from parent to child
            var parentChain = [];
            var parent = this.parent;
            // for performance reasons we never go back further than the most direct
            // uninitialized parent
            // this is done to avoid traversing the whole tree to the root when using
            // the same reference again
            while (parent &&
                parent._observableInstanceState === 0 /* UNINITIALIZED */) {
                parentChain.unshift(parent);
                parent = parent.parent;
            }
            try {
                // initialize the uninitialized parent chain from parent to child
                for (var parentChain_1 = __values(parentChain), parentChain_1_1 = parentChain_1.next(); !parentChain_1_1.done; parentChain_1_1 = parentChain_1.next()) {
                    var p = parentChain_1_1.value;
                    p.createObservableInstanceIfNeeded();
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (parentChain_1_1 && !parentChain_1_1.done && (_a = parentChain_1.return)) _a.call(parentChain_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            var type = this.type;
            try {
                this.storedValue = type.createNewInstance(this._childNodes);
                this.preboot();
                this._isRunningAction = true;
                type.finalizeNewInstance(this, this.storedValue);
            }
            catch (e) {
                // short-cut to die the instance, to avoid the snapshot computed starting to throw...
                this.state = NodeLifeCycle.DEAD;
                throw e;
            }
            finally {
                this._isRunningAction = false;
            }
            this._observableInstanceState = 2 /* CREATED */;
            // NOTE: we need to touch snapshot, because non-observable
            // "_observableInstanceState" field was touched
            invalidateComputed(this, "snapshot");
            if (this.isRoot)
                this._addSnapshotReaction();
            this._childNodes = EMPTY_OBJECT;
            this.state = NodeLifeCycle.CREATED;
            this.fireHook(Hook.afterCreate);
            this.finalizeCreation();
        };
        Object.defineProperty(ObjectNode.prototype, "root", {
            get: function () {
                var parent = this.parent;
                return parent ? parent.root : this;
            },
            enumerable: true,
            configurable: true
        });
        ObjectNode.prototype.clearParent = function () {
            if (!this.parent)
                return;
            // detach if attached
            this.fireHook(Hook.beforeDetach);
            var previousState = this.state;
            this.state = NodeLifeCycle.DETACHING;
            var root = this.root;
            var newEnv = root.environment;
            var newIdCache = root.identifierCache.splitCache(this);
            try {
                this.parent.removeChild(this.subpath);
                this.baseSetParent(null, "");
                this.environment = newEnv;
                this.identifierCache = newIdCache;
            }
            finally {
                this.state = previousState;
            }
        };
        ObjectNode.prototype.setParent = function (newParent, subpath) {
            var parentChanged = newParent !== this.parent;
            var subpathChanged = subpath !== this.subpath;
            if (!parentChanged && !subpathChanged) {
                return;
            }
            if (devMode()) {
                if (!subpath) {
                    // istanbul ignore next
                    throw fail$1("assertion failed: subpath expected");
                }
                if (!newParent) {
                    // istanbul ignore next
                    throw fail$1("assertion failed: new parent expected");
                }
                if (this.parent && parentChanged) {
                    throw fail$1("A node cannot exists twice in the state tree. Failed to add " + this + " to path '" + newParent.path + "/" + subpath + "'.");
                }
                if (!this.parent && newParent.root === this) {
                    throw fail$1("A state tree is not allowed to contain itself. Cannot assign " + this + " to path '" + newParent.path + "/" + subpath + "'");
                }
                if (!this.parent &&
                    !!this.environment &&
                    this.environment !== newParent.root.environment) {
                    throw fail$1("A state tree cannot be made part of another state tree as long as their environments are different.");
                }
            }
            if (parentChanged) {
                // attach to new parent
                this.environment = undefined; // will use root's
                newParent.root.identifierCache.mergeCache(this);
                this.baseSetParent(newParent, subpath);
                this.fireHook(Hook.afterAttach);
            }
            else if (subpathChanged) {
                // moving to a new subpath on the same parent
                this.baseSetParent(this.parent, subpath);
            }
        };
        ObjectNode.prototype.fireHook = function (name) {
            var _this = this;
            this.fireInternalHook(name);
            var fn = this.storedValue &&
                typeof this.storedValue === "object" &&
                this.storedValue[name];
            if (typeof fn === "function") {
                // we check for it to allow old mobx peer dependencies that don't have the method to work (even when still bugged)
                if (allowStateChangesInsideComputed) {
                    allowStateChangesInsideComputed(function () {
                        fn.apply(_this.storedValue);
                    });
                }
                else {
                    fn.apply(this.storedValue);
                }
            }
        };
        Object.defineProperty(ObjectNode.prototype, "snapshot", {
            // advantage of using computed for a snapshot is that nicely respects transactions etc.
            get: function () {
                return freeze(this.getSnapshot());
            },
            enumerable: true,
            configurable: true
        });
        // NOTE: we use this method to get snapshot without creating @computed overhead
        ObjectNode.prototype.getSnapshot = function () {
            if (!this.isAlive)
                return this._snapshotUponDeath;
            return this._observableInstanceState === 2 /* CREATED */
                ? this._getActualSnapshot()
                : this._getCachedInitialSnapshot();
        };
        ObjectNode.prototype._getActualSnapshot = function () {
            return this.type.getSnapshot(this);
        };
        ObjectNode.prototype._getCachedInitialSnapshot = function () {
            if (!this._cachedInitialSnapshotCreated) {
                var type = this.type;
                var childNodes = this._childNodes;
                var snapshot = this._initialSnapshot;
                this._cachedInitialSnapshot = type.processInitialSnapshot(childNodes, snapshot);
                this._cachedInitialSnapshotCreated = true;
            }
            return this._cachedInitialSnapshot;
        };
        ObjectNode.prototype.isRunningAction = function () {
            if (this._isRunningAction)
                return true;
            if (this.isRoot)
                return false;
            return this.parent.isRunningAction();
        };
        ObjectNode.prototype.assertAlive = function (context) {
            var livelinessChecking = getLivelinessChecking();
            if (!this.isAlive && livelinessChecking !== "ignore") {
                var error = this._getAssertAliveError(context);
                switch (livelinessChecking) {
                    case "error":
                        throw fail$1(error);
                    case "warn":
                        warnError(error);
                }
            }
        };
        ObjectNode.prototype._getAssertAliveError = function (context) {
            var escapedPath = this.getEscapedPath(false) || this.pathUponDeath || "";
            var subpath = (context.subpath && escapeJsonPath(context.subpath)) || "";
            var actionContext = context.actionContext || getCurrentActionContext();
            // try to use a real action context if possible since it includes the action name
            if (actionContext && actionContext.type !== "action" && actionContext.parentActionEvent) {
                actionContext = actionContext.parentActionEvent;
            }
            var actionFullPath = "";
            if (actionContext && actionContext.name != null) {
                // try to use the context, and if it not available use the node one
                var actionPath = (actionContext && actionContext.context && getPath(actionContext.context)) ||
                    escapedPath;
                actionFullPath = actionPath + "." + actionContext.name + "()";
            }
            return "You are trying to read or write to an object that is no longer part of a state tree. (Object type: '" + this.type.name + "', Path upon death: '" + escapedPath + "', Subpath: '" + subpath + "', Action: '" + actionFullPath + "'). Either detach nodes first, or don't use objects after removing / replacing them in the tree.";
        };
        ObjectNode.prototype.getChildNode = function (subpath) {
            this.assertAlive({
                subpath: subpath
            });
            this._autoUnbox = false;
            try {
                return this._observableInstanceState === 2 /* CREATED */
                    ? this.type.getChildNode(this, subpath)
                    : this._childNodes[subpath];
            }
            finally {
                this._autoUnbox = true;
            }
        };
        ObjectNode.prototype.getChildren = function () {
            this.assertAlive(EMPTY_OBJECT);
            this._autoUnbox = false;
            try {
                return this._observableInstanceState === 2 /* CREATED */
                    ? this.type.getChildren(this)
                    : convertChildNodesToArray(this._childNodes);
            }
            finally {
                this._autoUnbox = true;
            }
        };
        ObjectNode.prototype.getChildType = function (propertyName) {
            return this.type.getChildType(propertyName);
        };
        Object.defineProperty(ObjectNode.prototype, "isProtected", {
            get: function () {
                return this.root.isProtectionEnabled;
            },
            enumerable: true,
            configurable: true
        });
        ObjectNode.prototype.assertWritable = function (context) {
            this.assertAlive(context);
            if (!this.isRunningAction() && this.isProtected) {
                throw fail$1("Cannot modify '" + this + "', the object is protected and can only be modified by using an action.");
            }
        };
        ObjectNode.prototype.removeChild = function (subpath) {
            this.type.removeChild(this, subpath);
        };
        // bound on the constructor
        ObjectNode.prototype.unbox = function (childNode) {
            if (!childNode)
                return childNode;
            this.assertAlive({
                subpath: childNode.subpath || childNode.subpathUponDeath
            });
            return this._autoUnbox ? childNode.value : childNode;
        };
        ObjectNode.prototype.toString = function () {
            var path = (this.isAlive ? this.path : this.pathUponDeath) || "<root>";
            var identifier = this.identifier ? "(id: " + this.identifier + ")" : "";
            return this.type.name + "@" + path + identifier + (this.isAlive ? "" : " [dead]");
        };
        ObjectNode.prototype.finalizeCreation = function () {
            var _this = this;
            this.baseFinalizeCreation(function () {
                var e_2, _a;
                try {
                    for (var _b = __values(_this.getChildren()), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var child = _c.value;
                        child.finalizeCreation();
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
                _this.fireInternalHook(Hook.afterCreationFinalization);
            });
        };
        ObjectNode.prototype.detach = function () {
            if (!this.isAlive)
                throw fail$1("Error while detaching, node is not alive.");
            this.clearParent();
        };
        ObjectNode.prototype.preboot = function () {
            var self = this;
            this._applyPatches = createActionInvoker(this.storedValue, "@APPLY_PATCHES", function (patches) {
                patches.forEach(function (patch) {
                    var parts = splitJsonPath(patch.path);
                    var node = resolveNodeByPathParts(self, parts.slice(0, -1));
                    node.applyPatchLocally(parts[parts.length - 1], patch);
                });
            });
            this._applySnapshot = createActionInvoker(this.storedValue, "@APPLY_SNAPSHOT", function (snapshot) {
                // if the snapshot is the same as the current one, avoid performing a reconcile
                if (snapshot === self.snapshot)
                    return;
                // else, apply it by calling the type logic
                return self.type.applySnapshot(self, snapshot);
            });
            addHiddenFinalProp(this.storedValue, "$treenode", this);
            addHiddenFinalProp(this.storedValue, "toJSON", toJSON);
        };
        ObjectNode.prototype.die = function () {
            if (!this.isAlive || this.state === NodeLifeCycle.DETACHING)
                return;
            this.aboutToDie();
            this.finalizeDeath();
        };
        ObjectNode.prototype.aboutToDie = function () {
            if (this._observableInstanceState === 0 /* UNINITIALIZED */) {
                return;
            }
            this.getChildren().forEach(function (node) {
                node.aboutToDie();
            });
            // beforeDestroy should run before the disposers since else we could end up in a situation where
            // a disposer added with addDisposer at this stage (beforeDestroy) is actually never released
            this.baseAboutToDie();
            this._internalEventsEmit("dispose" /* Dispose */);
            this._internalEventsClear("dispose" /* Dispose */);
        };
        ObjectNode.prototype.finalizeDeath = function () {
            // invariant: not called directly but from "die"
            this.getChildren().forEach(function (node) {
                node.finalizeDeath();
            });
            this.root.identifierCache.notifyDied(this);
            // "kill" the computed prop and just store the last snapshot
            var snapshot = this.snapshot;
            this._snapshotUponDeath = snapshot;
            this._internalEventsClearAll();
            this.baseFinalizeDeath();
        };
        ObjectNode.prototype.onSnapshot = function (onChange) {
            this._addSnapshotReaction();
            return this._internalEventsRegister("snapshot" /* Snapshot */, onChange);
        };
        ObjectNode.prototype.emitSnapshot = function (snapshot) {
            this._internalEventsEmit("snapshot" /* Snapshot */, snapshot);
        };
        ObjectNode.prototype.onPatch = function (handler) {
            return this._internalEventsRegister("patch" /* Patch */, handler);
        };
        ObjectNode.prototype.emitPatch = function (basePatch, source) {
            if (this._internalEventsHasSubscribers("patch" /* Patch */)) {
                var localizedPatch = extend({}, basePatch, {
                    path: source.path.substr(this.path.length) + "/" + basePatch.path // calculate the relative path of the patch
                });
                var _a = __read(splitPatch(localizedPatch), 2), patch = _a[0], reversePatch = _a[1];
                this._internalEventsEmit("patch" /* Patch */, patch, reversePatch);
            }
            if (this.parent)
                this.parent.emitPatch(basePatch, source);
        };
        ObjectNode.prototype.hasDisposer = function (disposer) {
            return this._internalEventsHas("dispose" /* Dispose */, disposer);
        };
        ObjectNode.prototype.addDisposer = function (disposer) {
            if (!this.hasDisposer(disposer)) {
                this._internalEventsRegister("dispose" /* Dispose */, disposer, true);
                return;
            }
            throw fail$1("cannot add a disposer when it is already registered for execution");
        };
        ObjectNode.prototype.removeDisposer = function (disposer) {
            if (!this._internalEventsHas("dispose" /* Dispose */, disposer)) {
                throw fail$1("cannot remove a disposer which was never registered for execution");
            }
            this._internalEventsUnregister("dispose" /* Dispose */, disposer);
        };
        ObjectNode.prototype.removeMiddleware = function (middleware) {
            if (this.middlewares) {
                var index = this.middlewares.indexOf(middleware);
                if (index >= 0) {
                    this.middlewares.splice(index, 1);
                }
            }
        };
        ObjectNode.prototype.addMiddleWare = function (handler, includeHooks) {
            var _this = this;
            if (includeHooks === void 0) { includeHooks = true; }
            var middleware = { handler: handler, includeHooks: includeHooks };
            if (!this.middlewares)
                this.middlewares = [middleware];
            else
                this.middlewares.push(middleware);
            return function () {
                _this.removeMiddleware(middleware);
            };
        };
        ObjectNode.prototype.applyPatchLocally = function (subpath, patch) {
            this.assertWritable({
                subpath: subpath
            });
            this.createObservableInstanceIfNeeded();
            this.type.applyPatchLocally(this, subpath, patch);
        };
        ObjectNode.prototype._addSnapshotReaction = function () {
            var _this = this;
            if (!this._hasSnapshotReaction) {
                var snapshotDisposer = reaction(function () { return _this.snapshot; }, function (snapshot) { return _this.emitSnapshot(snapshot); }, snapshotReactionOptions);
                this.addDisposer(snapshotDisposer);
                this._hasSnapshotReaction = true;
            }
        };
        // we proxy the methods to avoid creating an EventHandlers instance when it is not needed
        ObjectNode.prototype._internalEventsHasSubscribers = function (event) {
            return !!this._internalEvents && this._internalEvents.hasSubscribers(event);
        };
        ObjectNode.prototype._internalEventsRegister = function (event, eventHandler, atTheBeginning) {
            if (atTheBeginning === void 0) { atTheBeginning = false; }
            if (!this._internalEvents) {
                this._internalEvents = new EventHandlers();
            }
            return this._internalEvents.register(event, eventHandler, atTheBeginning);
        };
        ObjectNode.prototype._internalEventsHas = function (event, eventHandler) {
            return !!this._internalEvents && this._internalEvents.has(event, eventHandler);
        };
        ObjectNode.prototype._internalEventsUnregister = function (event, eventHandler) {
            if (this._internalEvents) {
                this._internalEvents.unregister(event, eventHandler);
            }
        };
        ObjectNode.prototype._internalEventsEmit = function (event) {
            var _a;
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            if (this._internalEvents) {
                (_a = this._internalEvents).emit.apply(_a, __spread([event], args));
            }
        };
        ObjectNode.prototype._internalEventsClear = function (event) {
            if (this._internalEvents) {
                this._internalEvents.clear(event);
            }
        };
        ObjectNode.prototype._internalEventsClearAll = function () {
            if (this._internalEvents) {
                this._internalEvents.clearAll();
            }
        };
        __decorate([
            action
        ], ObjectNode.prototype, "createObservableInstanceIfNeeded", null);
        __decorate([
            computed$1
        ], ObjectNode.prototype, "snapshot", null);
        __decorate([
            action
        ], ObjectNode.prototype, "detach", null);
        __decorate([
            action
        ], ObjectNode.prototype, "die", null);
        return ObjectNode;
    }(BaseNode));

    /**
     * @internal
     * @hidden
     */
    var TypeFlags;
    (function (TypeFlags) {
        TypeFlags[TypeFlags["String"] = 1] = "String";
        TypeFlags[TypeFlags["Number"] = 2] = "Number";
        TypeFlags[TypeFlags["Boolean"] = 4] = "Boolean";
        TypeFlags[TypeFlags["Date"] = 8] = "Date";
        TypeFlags[TypeFlags["Literal"] = 16] = "Literal";
        TypeFlags[TypeFlags["Array"] = 32] = "Array";
        TypeFlags[TypeFlags["Map"] = 64] = "Map";
        TypeFlags[TypeFlags["Object"] = 128] = "Object";
        TypeFlags[TypeFlags["Frozen"] = 256] = "Frozen";
        TypeFlags[TypeFlags["Optional"] = 512] = "Optional";
        TypeFlags[TypeFlags["Reference"] = 1024] = "Reference";
        TypeFlags[TypeFlags["Identifier"] = 2048] = "Identifier";
        TypeFlags[TypeFlags["Late"] = 4096] = "Late";
        TypeFlags[TypeFlags["Refinement"] = 8192] = "Refinement";
        TypeFlags[TypeFlags["Union"] = 16384] = "Union";
        TypeFlags[TypeFlags["Null"] = 32768] = "Null";
        TypeFlags[TypeFlags["Undefined"] = 65536] = "Undefined";
        TypeFlags[TypeFlags["Integer"] = 131072] = "Integer";
        TypeFlags[TypeFlags["Custom"] = 262144] = "Custom";
        TypeFlags[TypeFlags["SnapshotProcessor"] = 524288] = "SnapshotProcessor";
    })(TypeFlags || (TypeFlags = {}));
    /**
     * @internal
     * @hidden
     */
    var cannotDetermineSubtype = "cannotDetermine";
    /**
     * A base type produces a MST node (Node in the state tree)
     *
     * @internal
     * @hidden
     */
    var BaseType = /** @class */ (function () {
        function BaseType(name) {
            this.isType = true;
            this.name = name;
        }
        BaseType.prototype.create = function (snapshot, environment) {
            typecheckInternal(this, snapshot);
            return this.instantiate(null, "", environment, snapshot).value;
        };
        BaseType.prototype.getSnapshot = function (node, applyPostProcess) {
            // istanbul ignore next
            throw fail$1("unimplemented method");
        };
        BaseType.prototype.isAssignableFrom = function (type) {
            return type === this;
        };
        BaseType.prototype.validate = function (value, context) {
            var node = getStateTreeNodeSafe(value);
            if (node) {
                var valueType = getType(value);
                return this.isAssignableFrom(valueType)
                    ? typeCheckSuccess()
                    : typeCheckFailure(context, value);
                // it is tempting to compare snapshots, but in that case we should always clone on assignments...
            }
            return this.isValidSnapshot(value, context);
        };
        BaseType.prototype.is = function (thing) {
            return this.validate(thing, [{ path: "", type: this }]).length === 0;
        };
        Object.defineProperty(BaseType.prototype, "Type", {
            get: function () {
                // istanbul ignore next
                throw fail$1("Factory.Type should not be actually called. It is just a Type signature that can be used at compile time with Typescript, by using `typeof type.Type`");
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BaseType.prototype, "TypeWithoutSTN", {
            get: function () {
                // istanbul ignore next
                throw fail$1("Factory.TypeWithoutSTN should not be actually called. It is just a Type signature that can be used at compile time with Typescript, by using `typeof type.TypeWithoutSTN`");
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BaseType.prototype, "SnapshotType", {
            get: function () {
                // istanbul ignore next
                throw fail$1("Factory.SnapshotType should not be actually called. It is just a Type signature that can be used at compile time with Typescript, by using `typeof type.SnapshotType`");
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BaseType.prototype, "CreationType", {
            get: function () {
                // istanbul ignore next
                throw fail$1("Factory.CreationType should not be actually called. It is just a Type signature that can be used at compile time with Typescript, by using `typeof type.CreationType`");
            },
            enumerable: true,
            configurable: true
        });
        __decorate([
            action
        ], BaseType.prototype, "create", null);
        return BaseType;
    }());
    /**
     * A complex type produces a MST node (Node in the state tree)
     *
     * @internal
     * @hidden
     */
    var ComplexType = /** @class */ (function (_super) {
        __extends$1(ComplexType, _super);
        function ComplexType(name) {
            return _super.call(this, name) || this;
        }
        ComplexType.prototype.create = function (snapshot, environment) {
            if (snapshot === void 0) { snapshot = this.getDefaultSnapshot(); }
            return _super.prototype.create.call(this, snapshot, environment);
        };
        ComplexType.prototype.getValue = function (node) {
            node.createObservableInstanceIfNeeded();
            return node.storedValue;
        };
        ComplexType.prototype.tryToReconcileNode = function (current, newValue) {
            if (current.isDetaching)
                return false;
            if (current.snapshot === newValue) {
                // newValue is the current snapshot of the node, noop
                return true;
            }
            if (isStateTreeNode(newValue) && getStateTreeNode(newValue) === current) {
                // the current node is the same as the new one
                return true;
            }
            if (current.type === this &&
                isMutable(newValue) &&
                !isStateTreeNode(newValue) &&
                (!current.identifierAttribute ||
                    current.identifier ===
                        normalizeIdentifier(newValue[current.identifierAttribute]))) {
                // the newValue has no node, so can be treated like a snapshot
                // we can reconcile
                current.applySnapshot(newValue);
                return true;
            }
            return false;
        };
        ComplexType.prototype.reconcile = function (current, newValue, parent, subpath) {
            var nodeReconciled = this.tryToReconcileNode(current, newValue);
            if (nodeReconciled) {
                current.setParent(parent, subpath);
                return current;
            }
            // current node cannot be recycled in any way
            current.die(); // noop if detaching
            // attempt to reuse the new one
            if (isStateTreeNode(newValue) && this.isAssignableFrom(getType(newValue))) {
                // newValue is a Node as well, move it here..
                var newNode = getStateTreeNode(newValue);
                newNode.setParent(parent, subpath);
                return newNode;
            }
            // nothing to do, we have to create a new node
            return this.instantiate(parent, subpath, undefined, newValue);
        };
        ComplexType.prototype.getSubTypes = function () {
            return null;
        };
        __decorate([
            action
        ], ComplexType.prototype, "create", null);
        return ComplexType;
    }(BaseType));
    /**
     * @internal
     * @hidden
     */
    var SimpleType = /** @class */ (function (_super) {
        __extends$1(SimpleType, _super);
        function SimpleType() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SimpleType.prototype.createNewInstance = function (snapshot) {
            return snapshot;
        };
        SimpleType.prototype.getValue = function (node) {
            // if we ever find a case where scalar nodes can be accessed without iterating through its parent
            // uncomment this to make sure the parent chain is created when this is accessed
            // if (node.parent) {
            //     node.parent.createObservableInstanceIfNeeded()
            // }
            return node.storedValue;
        };
        SimpleType.prototype.getSnapshot = function (node) {
            return node.storedValue;
        };
        SimpleType.prototype.reconcile = function (current, newValue, parent, subpath) {
            // reconcile only if type and value are still the same, and only if the node is not detaching
            if (!current.isDetaching && current.type === this && current.storedValue === newValue) {
                return current;
            }
            var res = this.instantiate(parent, subpath, undefined, newValue);
            current.die(); // noop if detaching
            return res;
        };
        SimpleType.prototype.getSubTypes = function () {
            return null;
        };
        return SimpleType;
    }(BaseType));
    /**
     * Returns if a given value represents a type.
     *
     * @param value Value to check.
     * @returns `true` if the value is a type.
     */
    function isType(value) {
        return typeof value === "object" && value && value.isType === true;
    }
    /**
     * @internal
     * @hidden
     */
    function assertIsType(type, argNumber) {
        assertArg(type, isType, "mobx-state-tree type", argNumber);
    }

    var runningActions = new Map();
    /**
     * Note: Consider migrating to `createActionTrackingMiddleware2`, it is easier to use.
     *
     * Convenience utility to create action based middleware that supports async processes more easily.
     * All hooks are called for both synchronous and asynchronous actions. Except that either `onSuccess` or `onFail` is called
     *
     * The create middleware tracks the process of an action (assuming it passes the `filter`).
     * `onResume` can return any value, which will be passed as second argument to any other hook. This makes it possible to keep state during a process.
     *
     * See the `atomic` middleware for an example
     *
     * @param hooks
     * @returns
     */
    function createActionTrackingMiddleware(hooks) {
        return function actionTrackingMiddleware(call, next, abort) {
            switch (call.type) {
                case "action": {
                    if (!hooks.filter || hooks.filter(call) === true) {
                        var context = hooks.onStart(call);
                        hooks.onResume(call, context);
                        runningActions.set(call.id, {
                            call: call,
                            context: context,
                            async: false
                        });
                        try {
                            var res = next(call);
                            hooks.onSuspend(call, context);
                            if (runningActions.get(call.id).async === false) {
                                runningActions.delete(call.id);
                                hooks.onSuccess(call, context, res);
                            }
                            return res;
                        }
                        catch (e) {
                            runningActions.delete(call.id);
                            hooks.onFail(call, context, e);
                            throw e;
                        }
                    }
                    else {
                        return next(call);
                    }
                }
                case "flow_spawn": {
                    var root = runningActions.get(call.rootId);
                    root.async = true;
                    return next(call);
                }
                case "flow_resume":
                case "flow_resume_error": {
                    var root = runningActions.get(call.rootId);
                    hooks.onResume(call, root.context);
                    try {
                        return next(call);
                    }
                    finally {
                        hooks.onSuspend(call, root.context);
                    }
                }
                case "flow_throw": {
                    var root = runningActions.get(call.rootId);
                    runningActions.delete(call.rootId);
                    hooks.onFail(call, root.context, call.args[0]);
                    return next(call);
                }
                case "flow_return": {
                    var root = runningActions.get(call.rootId);
                    runningActions.delete(call.rootId);
                    hooks.onSuccess(call, root.context, call.args[0]);
                    return next(call);
                }
            }
        };
    }

    var RunningAction = /** @class */ (function () {
        function RunningAction(hooks, call) {
            this.hooks = hooks;
            this.call = call;
            this.flowsPending = 0;
            this.running = true;
            if (hooks) {
                hooks.onStart(call);
            }
        }
        RunningAction.prototype.finish = function (error) {
            if (this.running) {
                this.running = false;
                if (this.hooks) {
                    this.hooks.onFinish(this.call, error);
                }
            }
        };
        RunningAction.prototype.incFlowsPending = function () {
            this.flowsPending++;
        };
        RunningAction.prototype.decFlowsPending = function () {
            this.flowsPending--;
        };
        Object.defineProperty(RunningAction.prototype, "hasFlowsPending", {
            get: function () {
                return this.flowsPending > 0;
            },
            enumerable: true,
            configurable: true
        });
        return RunningAction;
    }());
    /**
     * Convenience utility to create action based middleware that supports async processes more easily.
     * The flow is like this:
     * - for each action: if filter passes -> `onStart` -> (inner actions recursively) -> `onFinish`
     *
     * Example: if we had an action `a` that called inside an action `b1`, then `b2` the flow would be:
     * - `filter(a)`
     * - `onStart(a)`
     *   - `filter(b1)`
     *   - `onStart(b1)`
     *   - `onFinish(b1)`
     *   - `filter(b2)`
     *   - `onStart(b2)`
     *   - `onFinish(b2)`
     * - `onFinish(a)`
     *
     * The flow is the same no matter if the actions are sync or async.
     *
     * See the `atomic` middleware for an example
     *
     * @param hooks
     * @returns
     */
    function createActionTrackingMiddleware2(middlewareHooks) {
        var runningActions = new WeakMap();
        return function actionTrackingMiddleware(call, next) {
            // find parentRunningAction
            var parentRunningAction = call.parentActionEvent
                ? runningActions.get(call.parentActionEvent)
                : undefined;
            if (call.type === "action") {
                var newCall = __assign$4({}, call, { 
                    // make a shallow copy of the parent action env
                    env: parentRunningAction && parentRunningAction.call.env, parentCall: parentRunningAction && parentRunningAction.call });
                var passesFilter = !middlewareHooks.filter || middlewareHooks.filter(newCall);
                var hooks = passesFilter ? middlewareHooks : undefined;
                var runningAction = new RunningAction(hooks, newCall);
                runningActions.set(call, runningAction);
                var res = void 0;
                try {
                    res = next(call);
                }
                catch (e) {
                    runningAction.finish(e);
                    throw e;
                }
                if (!runningAction.hasFlowsPending) {
                    // sync action finished
                    runningAction.finish();
                }
                return res;
            }
            else {
                if (!parentRunningAction) {
                    return next(call);
                }
                switch (call.type) {
                    case "flow_spawn": {
                        parentRunningAction.incFlowsPending();
                        return next(call);
                    }
                    case "flow_resume":
                    case "flow_resume_error": {
                        return next(call);
                    }
                    case "flow_throw": {
                        var error = call.args[0];
                        try {
                            return next(call);
                        }
                        finally {
                            parentRunningAction.decFlowsPending();
                            if (!parentRunningAction.hasFlowsPending) {
                                parentRunningAction.finish(error);
                            }
                        }
                    }
                    case "flow_return": {
                        try {
                            return next(call);
                        }
                        finally {
                            parentRunningAction.decFlowsPending();
                            if (!parentRunningAction.hasFlowsPending) {
                                parentRunningAction.finish();
                            }
                        }
                    }
                }
            }
        };
    }

    function serializeArgument(node, actionName, index, arg) {
        if (arg instanceof Date)
            return { $MST_DATE: arg.getTime() };
        if (isPrimitive$4(arg))
            return arg;
        // We should not serialize MST nodes, even if we can, because we don't know if the receiving party can handle a raw snapshot instead of an
        // MST type instance. So if one wants to serialize a MST node that was pass in, either explitly pass: 1: an id, 2: a (relative) path, 3: a snapshot
        if (isStateTreeNode(arg))
            return serializeTheUnserializable("[MSTNode: " + getType(arg).name + "]");
        if (typeof arg === "function")
            return serializeTheUnserializable("[function]");
        if (typeof arg === "object" && !isPlainObject(arg) && !isArray$4(arg))
            return serializeTheUnserializable("[object " + ((arg && arg.constructor && arg.constructor.name) ||
                "Complex Object") + "]");
        try {
            // Check if serializable, cycle free etc...
            // MWE: there must be a better way....
            JSON.stringify(arg); // or throws
            return arg;
        }
        catch (e) {
            return serializeTheUnserializable("" + e);
        }
    }
    function deserializeArgument(adm, value) {
        if (value && typeof value === "object" && "$MST_DATE" in value)
            return new Date(value["$MST_DATE"]);
        return value;
    }
    function serializeTheUnserializable(baseType) {
        return {
            $MST_UNSERIALIZABLE: true,
            type: baseType
        };
    }
    /**
     * Applies an action or a series of actions in a single MobX transaction.
     * Does not return any value
     * Takes an action description as produced by the `onAction` middleware.
     *
     * @param target
     * @param actions
     */
    function applyAction(target, actions) {
        // check all arguments
        assertIsStateTreeNode(target, 1);
        assertArg(actions, function (a) { return typeof a === "object"; }, "object or array", 2);
        runInAction(function () {
            asArray(actions).forEach(function (action) { return baseApplyAction(target, action); });
        });
    }
    function baseApplyAction(target, action) {
        var resolvedTarget = tryResolve(target, action.path || "");
        if (!resolvedTarget)
            throw fail$1("Invalid action path: " + (action.path || ""));
        var node = getStateTreeNode(resolvedTarget);
        // Reserved functions
        if (action.name === "@APPLY_PATCHES") {
            return applyPatch.call(null, resolvedTarget, action.args[0]);
        }
        if (action.name === "@APPLY_SNAPSHOT") {
            return applySnapshot.call(null, resolvedTarget, action.args[0]);
        }
        if (!(typeof resolvedTarget[action.name] === "function"))
            throw fail$1("Action '" + action.name + "' does not exist in '" + node.path + "'");
        return resolvedTarget[action.name].apply(resolvedTarget, action.args ? action.args.map(function (v) { return deserializeArgument(node, v); }) : []);
    }
    /**
     * Small abstraction around `onAction` and `applyAction`, attaches an action listener to a tree and records all the actions emitted.
     * Returns an recorder object with the following signature:
     *
     * Example:
     * ```ts
     * export interface IActionRecorder {
     *      // the recorded actions
     *      actions: ISerializedActionCall[]
     *      // true if currently recording
     *      recording: boolean
     *      // stop recording actions
     *      stop(): void
     *      // resume recording actions
     *      resume(): void
     *      // apply all the recorded actions on the given object
     *      replay(target: IAnyStateTreeNode): void
     * }
     * ```
     *
     * The optional filter function allows to skip recording certain actions.
     *
     * @param subject
     * @returns
     */
    function recordActions(subject, filter) {
        // check all arguments
        assertIsStateTreeNode(subject, 1);
        var actions = [];
        var listener = function (call) {
            var recordThis = filter ? filter(call, getRunningActionContext()) : true;
            if (recordThis) {
                actions.push(call);
            }
        };
        var disposer;
        var recorder = {
            actions: actions,
            get recording() {
                return !!disposer;
            },
            stop: function () {
                if (disposer) {
                    disposer();
                    disposer = undefined;
                }
            },
            resume: function () {
                if (disposer)
                    return;
                disposer = onAction(subject, listener);
            },
            replay: function (target) {
                applyAction(target, actions);
            }
        };
        recorder.resume();
        return recorder;
    }
    /**
     * Registers a function that will be invoked for each action that is called on the provided model instance, or to any of its children.
     * See [actions](https://github.com/mobxjs/mobx-state-tree#actions) for more details. onAction events are emitted only for the outermost called action in the stack.
     * Action can also be intercepted by middleware using addMiddleware to change the function call before it will be run.
     *
     * Not all action arguments might be serializable. For unserializable arguments, a struct like `{ $MST_UNSERIALIZABLE: true, type: "someType" }` will be generated.
     * MST Nodes are considered non-serializable as well (they could be serialized as there snapshot, but it is uncertain whether an replaying party will be able to handle such a non-instantiated snapshot).
     * Rather, when using `onAction` middleware, one should consider in passing arguments which are 1: an id, 2: a (relative) path, or 3: a snapshot. Instead of a real MST node.
     *
     * Example:
     * ```ts
     * const Todo = types.model({
     *   task: types.string
     * })
     *
     * const TodoStore = types.model({
     *   todos: types.array(Todo)
     * }).actions(self => ({
     *   add(todo) {
     *     self.todos.push(todo);
     *   }
     * }))
     *
     * const s = TodoStore.create({ todos: [] })
     *
     * let disposer = onAction(s, (call) => {
     *   console.log(call);
     * })
     *
     * s.add({ task: "Grab a coffee" })
     * // Logs: { name: "add", path: "", args: [{ task: "Grab a coffee" }] }
     * ```
     *
     * @param target
     * @param listener
     * @param attachAfter (default false) fires the listener *after* the action has executed instead of before.
     * @returns
     */
    function onAction(target, listener, attachAfter) {
        if (attachAfter === void 0) { attachAfter = false; }
        // check all arguments
        assertIsStateTreeNode(target, 1);
        if (devMode()) {
            if (!isRoot(target))
                warnError("Warning: Attaching onAction listeners to non root nodes is dangerous: No events will be emitted for actions initiated higher up in the tree.");
            if (!isProtected(target))
                warnError("Warning: Attaching onAction listeners to non protected nodes is dangerous: No events will be emitted for direct modifications without action.");
        }
        return addMiddleware(target, function handler(rawCall, next) {
            if (rawCall.type === "action" && rawCall.id === rawCall.rootId) {
                var sourceNode_1 = getStateTreeNode(rawCall.context);
                var info = {
                    name: rawCall.name,
                    path: getRelativePathBetweenNodes(getStateTreeNode(target), sourceNode_1),
                    args: rawCall.args.map(function (arg, index) {
                        return serializeArgument(sourceNode_1, rawCall.name, index, arg);
                    })
                };
                if (attachAfter) {
                    var res = next(rawCall);
                    listener(info);
                    return res;
                }
                else {
                    listener(info);
                    return next(rawCall);
                }
            }
            else {
                return next(rawCall);
            }
        });
    }

    var nextActionId = 1;
    var currentActionContext;
    /**
     * @internal
     * @hidden
     */
    function getCurrentActionContext() {
        return currentActionContext;
    }
    /**
     * @internal
     * @hidden
     */
    function getNextActionId() {
        return nextActionId++;
    }
    // TODO: optimize away entire action context if there is no middleware in tree?
    /**
     * @internal
     * @hidden
     */
    function runWithActionContext(context, fn) {
        var node = getStateTreeNode(context.context);
        if (context.type === "action") {
            node.assertAlive({
                actionContext: context
            });
        }
        var baseIsRunningAction = node._isRunningAction;
        node._isRunningAction = true;
        var previousContext = currentActionContext;
        currentActionContext = context;
        try {
            return runMiddleWares(node, context, fn);
        }
        finally {
            currentActionContext = previousContext;
            node._isRunningAction = baseIsRunningAction;
        }
    }
    /**
     * @internal
     * @hidden
     */
    function getParentActionContext(parentContext) {
        if (!parentContext)
            return undefined;
        if (parentContext.type === "action")
            return parentContext;
        return parentContext.parentActionEvent;
    }
    /**
     * @internal
     * @hidden
     */
    function createActionInvoker(target, name, fn) {
        var res = function () {
            var id = getNextActionId();
            var parentContext = currentActionContext;
            var parentActionContext = getParentActionContext(parentContext);
            return runWithActionContext({
                type: "action",
                name: name,
                id: id,
                args: argsToArray(arguments),
                context: target,
                tree: getRoot(target),
                rootId: parentContext ? parentContext.rootId : id,
                parentId: parentContext ? parentContext.id : 0,
                allParentIds: parentContext
                    ? __spread(parentContext.allParentIds, [parentContext.id]) : [],
                parentEvent: parentContext,
                parentActionEvent: parentActionContext
            }, fn);
        };
        res._isMSTAction = true;
        return res;
    }
    /**
     * Middleware can be used to intercept any action is invoked on the subtree where it is attached.
     * If a tree is protected (by default), this means that any mutation of the tree will pass through your middleware.
     *
     * For more details, see the [middleware docs](../middleware.md)
     *
     * @param target Node to apply the middleware to.
     * @param middleware Middleware to apply.
     * @returns A callable function to dispose the middleware.
     */
    function addMiddleware(target, handler, includeHooks) {
        if (includeHooks === void 0) { includeHooks = true; }
        var node = getStateTreeNode(target);
        if (devMode()) {
            if (!node.isProtectionEnabled) {
                warnError("It is recommended to protect the state tree before attaching action middleware, as otherwise it cannot be guaranteed that all changes are passed through middleware. See `protect`");
            }
        }
        return node.addMiddleWare(handler, includeHooks);
    }
    /**
     * Binds middleware to a specific action.
     *
     * Example:
     * ```ts
     * type.actions(self => {
     *   function takeA____() {
     *       self.toilet.donate()
     *       self.wipe()
     *       self.wipe()
     *       self.toilet.flush()
     *   }
     *   return {
     *     takeA____: decorate(atomic, takeA____)
     *   }
     * })
     * ```
     *
     * @param handler
     * @param fn
     * @param includeHooks
     * @returns The original function
     */
    function decorate(handler, fn, includeHooks) {
        if (includeHooks === void 0) { includeHooks = true; }
        var middleware = { handler: handler, includeHooks: includeHooks };
        fn.$mst_middleware = fn.$mst_middleware || [];
        fn.$mst_middleware.push(middleware);
        return fn;
    }
    var CollectedMiddlewares = /** @class */ (function () {
        function CollectedMiddlewares(node, fn) {
            this.arrayIndex = 0;
            this.inArrayIndex = 0;
            this.middlewares = [];
            // we just push middleware arrays into an array of arrays to avoid making copies
            if (fn.$mst_middleware) {
                this.middlewares.push(fn.$mst_middleware);
            }
            var n = node;
            // Find all middlewares. Optimization: cache this?
            while (n) {
                if (n.middlewares)
                    this.middlewares.push(n.middlewares);
                n = n.parent;
            }
        }
        Object.defineProperty(CollectedMiddlewares.prototype, "isEmpty", {
            get: function () {
                return this.middlewares.length <= 0;
            },
            enumerable: true,
            configurable: true
        });
        CollectedMiddlewares.prototype.getNextMiddleware = function () {
            var array = this.middlewares[this.arrayIndex];
            if (!array)
                return undefined;
            var item = array[this.inArrayIndex++];
            if (!item) {
                this.arrayIndex++;
                this.inArrayIndex = 0;
                return this.getNextMiddleware();
            }
            return item;
        };
        return CollectedMiddlewares;
    }());
    function runMiddleWares(node, baseCall, originalFn) {
        var middlewares = new CollectedMiddlewares(node, originalFn);
        // Short circuit
        if (middlewares.isEmpty)
            return action(originalFn).apply(null, baseCall.args);
        var result = null;
        function runNextMiddleware(call) {
            var middleware = middlewares.getNextMiddleware();
            var handler = middleware && middleware.handler;
            if (!handler) {
                return action(originalFn).apply(null, call.args);
            }
            // skip hooks if asked to
            if (!middleware.includeHooks && Hook[call.name]) {
                return runNextMiddleware(call);
            }
            var nextInvoked = false;
            function next(call2, callback) {
                nextInvoked = true;
                // the result can contain
                // - the non manipulated return value from an action
                // - the non manipulated abort value
                // - one of the above but manipulated through the callback function
                result = runNextMiddleware(call2);
                if (callback) {
                    result = callback(result);
                }
            }
            var abortInvoked = false;
            function abort(value) {
                abortInvoked = true;
                // overwrite the result
                // can be manipulated through middlewares earlier in the queue using the callback fn
                result = value;
            }
            handler(call, next, abort);
            if (devMode()) {
                if (!nextInvoked && !abortInvoked) {
                    var node2 = getStateTreeNode(call.tree);
                    throw fail$1("Neither the next() nor the abort() callback within the middleware " + handler.name + " for the action: \"" + call.name + "\" on the node: " + node2.type.name + " was invoked.");
                }
                else if (nextInvoked && abortInvoked) {
                    var node2 = getStateTreeNode(call.tree);
                    throw fail$1("The next() and abort() callback within the middleware " + handler.name + " for the action: \"" + call.name + "\" on the node: " + node2.type.name + " were invoked.");
                }
            }
            return result;
        }
        return runNextMiddleware(baseCall);
    }

    /**
     * Returns the currently executing MST action context, or undefined if none.
     */
    function getRunningActionContext() {
        var current = getCurrentActionContext();
        while (current && current.type !== "action") {
            current = current.parentActionEvent;
        }
        return current;
    }
    function _isActionContextThisOrChildOf(actionContext, sameOrParent, includeSame) {
        var parentId = typeof sameOrParent === "number" ? sameOrParent : sameOrParent.id;
        var current = includeSame
            ? actionContext
            : actionContext.parentActionEvent;
        while (current) {
            if (current.id === parentId) {
                return true;
            }
            current = current.parentActionEvent;
        }
        return false;
    }
    /**
     * Returns if the given action context is a parent of this action context.
     */
    function isActionContextChildOf(actionContext, parent) {
        return _isActionContextThisOrChildOf(actionContext, parent, false);
    }
    /**
     * Returns if the given action context is this or a parent of this action context.
     */
    function isActionContextThisOrChildOf(actionContext, parentOrThis) {
        return _isActionContextThisOrChildOf(actionContext, parentOrThis, true);
    }

    function safeStringify(value) {
        try {
            return JSON.stringify(value);
        }
        catch (e) {
            // istanbul ignore next
            return "<Unserializable: " + e + ">";
        }
    }
    /**
     * @internal
     * @hidden
     */
    function prettyPrintValue(value) {
        return typeof value === "function"
            ? "<function" + (value.name ? " " + value.name : "") + ">"
            : isStateTreeNode(value)
                ? "<" + value + ">"
                : "`" + safeStringify(value) + "`";
    }
    function shortenPrintValue(valueInString) {
        return valueInString.length < 280
            ? valueInString
            : valueInString.substring(0, 272) + "......" + valueInString.substring(valueInString.length - 8);
    }
    function toErrorString(error) {
        var value = error.value;
        var type = error.context[error.context.length - 1].type;
        var fullPath = error.context
            .map(function (_a) {
            var path = _a.path;
            return path;
        })
            .filter(function (path) { return path.length > 0; })
            .join("/");
        var pathPrefix = fullPath.length > 0 ? "at path \"/" + fullPath + "\" " : "";
        var currentTypename = isStateTreeNode(value)
            ? "value of type " + getStateTreeNode(value).type.name + ":"
            : isPrimitive$4(value)
                ? "value"
                : "snapshot";
        var isSnapshotCompatible = type && isStateTreeNode(value) && type.is(getStateTreeNode(value).snapshot);
        return ("" + pathPrefix + currentTypename + " " + prettyPrintValue(value) + " is not assignable " + (type ? "to type: `" + type.name + "`" : "") +
            (error.message ? " (" + error.message + ")" : "") +
            (type
                ? isPrimitiveType(type) || isPrimitive$4(value)
                    ? "."
                    : ", expected an instance of `" + type.name + "` or a snapshot like `" + type.describe() + "` instead." +
                        (isSnapshotCompatible
                            ? " (Note that a snapshot of the provided value is compatible with the targeted type)"
                            : "")
                : "."));
    }
    /**
     * @internal
     * @hidden
     */
    function getContextForPath(context, path, type) {
        return context.concat([{ path: path, type: type }]);
    }
    /**
     * @internal
     * @hidden
     */
    function typeCheckSuccess() {
        return EMPTY_ARRAY;
    }
    /**
     * @internal
     * @hidden
     */
    function typeCheckFailure(context, value, message) {
        return [{ context: context, value: value, message: message }];
    }
    /**
     * @internal
     * @hidden
     */
    function flattenTypeErrors(errors) {
        return errors.reduce(function (a, i) { return a.concat(i); }, []);
    }
    // TODO; doublecheck: typecheck should only needed to be invoked from: type.create and array / map / value.property will change
    /**
     * @internal
     * @hidden
     */
    function typecheckInternal(type, value) {
        // runs typeChecking if it is in dev-mode or through a process.env.ENABLE_TYPE_CHECK flag
        if (isTypeCheckingEnabled()) {
            typecheck(type, value);
        }
    }
    /**
     * Run's the typechecker for the given type on the given value, which can be a snapshot or an instance.
     * Throws if the given value is not according the provided type specification.
     * Use this if you need typechecks even in a production build (by default all automatic runtime type checks will be skipped in production builds)
     *
     * @param type Type to check against.
     * @param value Value to be checked, either a snapshot or an instance.
     */
    function typecheck(type, value) {
        var errors = type.validate(value, [{ path: "", type: type }]);
        if (errors.length > 0) {
            throw fail$1(validationErrorsToString(type, value, errors));
        }
    }
    function validationErrorsToString(type, value, errors) {
        if (errors.length === 0) {
            return undefined;
        }
        return ("Error while converting " + shortenPrintValue(prettyPrintValue(value)) + " to `" + type.name + "`:\n\n    " + errors.map(toErrorString).join("\n    "));
    }

    var identifierCacheId = 0;
    /**
     * @internal
     * @hidden
     */
    var IdentifierCache = /** @class */ (function () {
        function IdentifierCache() {
            this.cacheId = identifierCacheId++;
            // n.b. in cache all identifiers are normalized to strings
            this.cache = observable$1.map();
            // last time the cache (array) for a given time changed
            // n.b. it is not really the time, but just an integer that gets increased after each modification to the array
            this.lastCacheModificationPerId = observable$1.map();
        }
        IdentifierCache.prototype.updateLastCacheModificationPerId = function (identifier) {
            var lcm = this.lastCacheModificationPerId.get(identifier);
            // we start at 1 since 0 means no update since cache creation
            this.lastCacheModificationPerId.set(identifier, lcm === undefined ? 1 : lcm + 1);
        };
        IdentifierCache.prototype.getLastCacheModificationPerId = function (identifier) {
            var modificationId = this.lastCacheModificationPerId.get(identifier) || 0;
            return this.cacheId + "-" + modificationId;
        };
        IdentifierCache.prototype.addNodeToCache = function (node, lastCacheUpdate) {
            if (lastCacheUpdate === void 0) { lastCacheUpdate = true; }
            if (node.identifierAttribute) {
                var identifier = node.identifier;
                if (!this.cache.has(identifier)) {
                    this.cache.set(identifier, observable$1.array([], mobxShallow));
                }
                var set = this.cache.get(identifier);
                if (set.indexOf(node) !== -1)
                    throw fail$1("Already registered");
                set.push(node);
                if (lastCacheUpdate) {
                    this.updateLastCacheModificationPerId(identifier);
                }
            }
        };
        IdentifierCache.prototype.mergeCache = function (node) {
            var _this = this;
            values$2(node.identifierCache.cache).forEach(function (nodes) {
                return nodes.forEach(function (child) {
                    _this.addNodeToCache(child);
                });
            });
        };
        IdentifierCache.prototype.notifyDied = function (node) {
            if (node.identifierAttribute) {
                var id = node.identifier;
                var set = this.cache.get(id);
                if (set) {
                    set.remove(node);
                    // remove empty sets from cache
                    if (!set.length) {
                        this.cache.delete(id);
                    }
                    this.updateLastCacheModificationPerId(node.identifier);
                }
            }
        };
        IdentifierCache.prototype.splitCache = function (node) {
            var _this = this;
            var res = new IdentifierCache();
            var basePath = node.path;
            entries$1(this.cache).forEach(function (_a) {
                var _b = __read(_a, 2), id = _b[0], nodes = _b[1];
                var modified = false;
                for (var i = nodes.length - 1; i >= 0; i--) {
                    if (nodes[i].path.indexOf(basePath) === 0) {
                        res.addNodeToCache(nodes[i], false); // no need to update lastUpdated since it is a whole new cache
                        nodes.splice(i, 1);
                        modified = true;
                    }
                }
                if (modified) {
                    _this.updateLastCacheModificationPerId(id);
                }
            });
            return res;
        };
        IdentifierCache.prototype.has = function (type, identifier) {
            var set = this.cache.get(identifier);
            if (!set)
                return false;
            return set.some(function (candidate) { return type.isAssignableFrom(candidate.type); });
        };
        IdentifierCache.prototype.resolve = function (type, identifier) {
            var set = this.cache.get(identifier);
            if (!set)
                return null;
            var matches = set.filter(function (candidate) { return type.isAssignableFrom(candidate.type); });
            switch (matches.length) {
                case 0:
                    return null;
                case 1:
                    return matches[0];
                default:
                    throw fail$1("Cannot resolve a reference to type '" + type.name + "' with id: '" + identifier + "' unambigously, there are multiple candidates: " + matches
                        .map(function (n) { return n.path; })
                        .join(", "));
            }
        };
        return IdentifierCache;
    }());

    /**
     * @internal
     * @hidden
     */
    function createObjectNode(type, parent, subpath, environment, initialValue) {
        var existingNode = getStateTreeNodeSafe(initialValue);
        if (existingNode) {
            if (existingNode.parent) {
                // istanbul ignore next
                throw fail$1("Cannot add an object to a state tree if it is already part of the same or another state tree. Tried to assign an object to '" + (parent ? parent.path : "") + "/" + subpath + "', but it lives already at '" + existingNode.path + "'");
            }
            if (parent) {
                existingNode.setParent(parent, subpath);
            }
            // else it already has no parent since it is a pre-requisite
            return existingNode;
        }
        // not a node, a snapshot
        return new ObjectNode(type, parent, subpath, environment, initialValue);
    }
    /**
     * @internal
     * @hidden
     */
    function createScalarNode(type, parent, subpath, environment, initialValue) {
        return new ScalarNode(type, parent, subpath, environment, initialValue);
    }
    /**
     * @internal
     * @hidden
     */
    function isNode(value) {
        return value instanceof ScalarNode || value instanceof ObjectNode;
    }

    /**
     * @internal
     * @hidden
     */
    var NodeLifeCycle;
    (function (NodeLifeCycle) {
        NodeLifeCycle[NodeLifeCycle["INITIALIZING"] = 0] = "INITIALIZING";
        NodeLifeCycle[NodeLifeCycle["CREATED"] = 1] = "CREATED";
        NodeLifeCycle[NodeLifeCycle["FINALIZED"] = 2] = "FINALIZED";
        NodeLifeCycle[NodeLifeCycle["DETACHING"] = 3] = "DETACHING";
        NodeLifeCycle[NodeLifeCycle["DEAD"] = 4] = "DEAD"; // no coming back from this one
    })(NodeLifeCycle || (NodeLifeCycle = {}));
    /**
     * Returns true if the given value is a node in a state tree.
     * More precisely, that is, if the value is an instance of a
     * `types.model`, `types.array` or `types.map`.
     *
     * @param value
     * @returns true if the value is a state tree node.
     */
    function isStateTreeNode(value) {
        return !!(value && value.$treenode);
    }
    /**
     * @internal
     * @hidden
     */
    function assertIsStateTreeNode(value, argNumber) {
        assertArg(value, isStateTreeNode, "mobx-state-tree node", argNumber);
    }
    /**
     * @internal
     * @hidden
     */
    function getStateTreeNode(value) {
        if (!isStateTreeNode(value)) {
            // istanbul ignore next
            throw fail$1("Value " + value + " is no MST Node");
        }
        return value.$treenode;
    }
    /**
     * @internal
     * @hidden
     */
    function getStateTreeNodeSafe(value) {
        return (value && value.$treenode) || null;
    }
    /**
     * @internal
     * @hidden
     */
    function toJSON() {
        return getStateTreeNode(this).snapshot;
    }
    var doubleDot = function (_) { return ".."; };
    /**
     * @internal
     * @hidden
     */
    function getRelativePathBetweenNodes(base, target) {
        // PRE condition target is (a child of) base!
        if (base.root !== target.root) {
            throw fail$1("Cannot calculate relative path: objects '" + base + "' and '" + target + "' are not part of the same object tree");
        }
        var baseParts = splitJsonPath(base.path);
        var targetParts = splitJsonPath(target.path);
        var common = 0;
        for (; common < baseParts.length; common++) {
            if (baseParts[common] !== targetParts[common])
                break;
        }
        // TODO: assert that no targetParts paths are "..", "." or ""!
        return (baseParts
            .slice(common)
            .map(doubleDot)
            .join("/") + joinJsonPath(targetParts.slice(common)));
    }
    /**
     * @internal
     * @hidden
     */
    function resolveNodeByPath(base, path, failIfResolveFails) {
        if (failIfResolveFails === void 0) { failIfResolveFails = true; }
        return resolveNodeByPathParts(base, splitJsonPath(path), failIfResolveFails);
    }
    /**
     * @internal
     * @hidden
     */
    function resolveNodeByPathParts(base, pathParts, failIfResolveFails) {
        if (failIfResolveFails === void 0) { failIfResolveFails = true; }
        var current = base;
        for (var i = 0; i < pathParts.length; i++) {
            var part = pathParts[i];
            if (part === "..") {
                current = current.parent;
                if (current)
                    continue; // not everything has a parent
            }
            else if (part === ".") {
                continue;
            }
            else if (current) {
                if (current instanceof ScalarNode) {
                    // check if the value of a scalar resolves to a state tree node (e.g. references)
                    // then we can continue resolving...
                    try {
                        var value = current.value;
                        if (isStateTreeNode(value)) {
                            current = getStateTreeNode(value);
                            // fall through
                        }
                    }
                    catch (e) {
                        if (!failIfResolveFails) {
                            return undefined;
                        }
                        throw e;
                    }
                }
                if (current instanceof ObjectNode) {
                    var subType = current.getChildType(part);
                    if (subType) {
                        current = current.getChildNode(part);
                        if (current)
                            continue;
                    }
                }
            }
            if (failIfResolveFails)
                throw fail$1("Could not resolve '" + part + "' in path '" + (joinJsonPath(pathParts.slice(0, i)) ||
                    "/") + "' while resolving '" + joinJsonPath(pathParts) + "'");
            else
                return undefined;
        }
        return current;
    }
    /**
     * @internal
     * @hidden
     */
    function convertChildNodesToArray(childNodes) {
        if (!childNodes)
            return EMPTY_ARRAY;
        var keys = Object.keys(childNodes);
        if (!keys.length)
            return EMPTY_ARRAY;
        var result = new Array(keys.length);
        keys.forEach(function (key, index) {
            result[index] = childNodes[key];
        });
        return result;
    }

    // based on: https://github.com/mobxjs/mobx-utils/blob/master/src/async-action.ts
    /*
        All contents of this file are deprecated.

        The term `process` has been replaced with `flow` to avoid conflicts with the
        global `process` object.

        Refer to `flow.ts` for any further changes to this implementation.
    */
    var DEPRECATION_MESSAGE = "See https://github.com/mobxjs/mobx-state-tree/issues/399 for more information. " +
        "Note that the middleware event types starting with `process` now start with `flow`.";
    /**
     * @hidden
     *
     * @deprecated has been renamed to `flow()`.
     * See https://github.com/mobxjs/mobx-state-tree/issues/399 for more information.
     * Note that the middleware event types starting with `process` now start with `flow`.
     *
     * @returns {Promise}
     */
    function process$1(asyncAction) {
        deprecated("process", "`process()` has been renamed to `flow()`. " + DEPRECATION_MESSAGE);
        return flow(asyncAction);
    }

    /**
     * @internal
     * @hidden
     */
    var EMPTY_ARRAY = Object.freeze([]);
    /**
     * @internal
     * @hidden
     */
    var EMPTY_OBJECT = Object.freeze({});
    /**
     * @internal
     * @hidden
     */
    var mobxShallow = typeof $mobx === "string" ? { deep: false } : { deep: false, proxy: false };
    Object.freeze(mobxShallow);
    /**
     * @internal
     * @hidden
     */
    function fail$1(message) {
        if (message === void 0) { message = "Illegal state"; }
        return new Error("[mobx-state-tree] " + message);
    }
    /**
     * @internal
     * @hidden
     */
    function identity$1(_) {
        return _;
    }
    /**
     * pollyfill (for IE) suggested in MDN:
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger
     * @internal
     * @hidden
     */
    var isInteger = Number.isInteger ||
        function (value) {
            return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
        };
    /**
     * @internal
     * @hidden
     */
    function isArray$4(val) {
        return Array.isArray(val) || isObservableArray(val);
    }
    /**
     * @internal
     * @hidden
     */
    function asArray(val) {
        if (!val)
            return EMPTY_ARRAY;
        if (isArray$4(val))
            return val;
        return [val];
    }
    /**
     * @internal
     * @hidden
     */
    function extend(a) {
        var b = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            b[_i - 1] = arguments[_i];
        }
        for (var i = 0; i < b.length; i++) {
            var current = b[i];
            for (var key in current)
                a[key] = current[key];
        }
        return a;
    }
    /**
     * @internal
     * @hidden
     */
    function isPlainObject(value) {
        if (value === null || typeof value !== "object")
            return false;
        var proto = Object.getPrototypeOf(value);
        return proto === Object.prototype || proto === null;
    }
    /**
     * @internal
     * @hidden
     */
    function isMutable(value) {
        return (value !== null &&
            typeof value === "object" &&
            !(value instanceof Date) &&
            !(value instanceof RegExp));
    }
    /**
     * @internal
     * @hidden
     */
    function isPrimitive$4(value, includeDate) {
        if (includeDate === void 0) { includeDate = true; }
        if (value === null || value === undefined)
            return true;
        if (typeof value === "string" ||
            typeof value === "number" ||
            typeof value === "boolean" ||
            (includeDate && value instanceof Date))
            return true;
        return false;
    }
    /**
     * @internal
     * @hidden
     * Freeze a value and return it (if not in production)
     */
    function freeze(value) {
        if (!devMode())
            return value;
        return isPrimitive$4(value) || isObservableArray(value) ? value : Object.freeze(value);
    }
    /**
     * @internal
     * @hidden
     * Recursively freeze a value (if not in production)
     */
    function deepFreeze(value) {
        if (!devMode())
            return value;
        freeze(value);
        if (isPlainObject(value)) {
            Object.keys(value).forEach(function (propKey) {
                if (!isPrimitive$4(value[propKey]) &&
                    !Object.isFrozen(value[propKey])) {
                    deepFreeze(value[propKey]);
                }
            });
        }
        return value;
    }
    /**
     * @internal
     * @hidden
     */
    function isSerializable(value) {
        return typeof value !== "function";
    }
    /**
     * @internal
     * @hidden
     */
    function addHiddenFinalProp(object, propName, value) {
        Object.defineProperty(object, propName, {
            enumerable: false,
            writable: false,
            configurable: true,
            value: value
        });
    }
    /**
     * @internal
     * @hidden
     */
    function addHiddenWritableProp(object, propName, value) {
        Object.defineProperty(object, propName, {
            enumerable: false,
            writable: true,
            configurable: true,
            value: value
        });
    }
    /**
     * @internal
     * @hidden
     */
    var EventHandler = /** @class */ (function () {
        function EventHandler() {
            this.handlers = [];
        }
        Object.defineProperty(EventHandler.prototype, "hasSubscribers", {
            get: function () {
                return this.handlers.length > 0;
            },
            enumerable: true,
            configurable: true
        });
        EventHandler.prototype.register = function (fn, atTheBeginning) {
            var _this = this;
            if (atTheBeginning === void 0) { atTheBeginning = false; }
            if (atTheBeginning) {
                this.handlers.unshift(fn);
            }
            else {
                this.handlers.push(fn);
            }
            return function () {
                _this.unregister(fn);
            };
        };
        EventHandler.prototype.has = function (fn) {
            return this.handlers.indexOf(fn) >= 0;
        };
        EventHandler.prototype.unregister = function (fn) {
            var index = this.handlers.indexOf(fn);
            if (index >= 0) {
                this.handlers.splice(index, 1);
            }
        };
        EventHandler.prototype.clear = function () {
            this.handlers.length = 0;
        };
        EventHandler.prototype.emit = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            // make a copy just in case it changes
            var handlers = this.handlers.slice();
            handlers.forEach(function (f) { return f.apply(void 0, __spread(args)); });
        };
        return EventHandler;
    }());
    /**
     * @internal
     * @hidden
     */
    var EventHandlers = /** @class */ (function () {
        function EventHandlers() {
        }
        EventHandlers.prototype.hasSubscribers = function (event) {
            var handler = this.eventHandlers && this.eventHandlers[event];
            return !!handler && handler.hasSubscribers;
        };
        EventHandlers.prototype.register = function (event, fn, atTheBeginning) {
            if (atTheBeginning === void 0) { atTheBeginning = false; }
            if (!this.eventHandlers) {
                this.eventHandlers = {};
            }
            var handler = this.eventHandlers[event];
            if (!handler) {
                handler = this.eventHandlers[event] = new EventHandler();
            }
            return handler.register(fn, atTheBeginning);
        };
        EventHandlers.prototype.has = function (event, fn) {
            var handler = this.eventHandlers && this.eventHandlers[event];
            return !!handler && handler.has(fn);
        };
        EventHandlers.prototype.unregister = function (event, fn) {
            var handler = this.eventHandlers && this.eventHandlers[event];
            if (handler) {
                handler.unregister(fn);
            }
        };
        EventHandlers.prototype.clear = function (event) {
            if (this.eventHandlers) {
                delete this.eventHandlers[event];
            }
        };
        EventHandlers.prototype.clearAll = function () {
            this.eventHandlers = undefined;
        };
        EventHandlers.prototype.emit = function (event) {
            var _a;
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            var handler = this.eventHandlers && this.eventHandlers[event];
            if (handler) {
                (_a = handler).emit.apply(_a, __spread(args));
            }
        };
        return EventHandlers;
    }());
    /**
     * @internal
     * @hidden
     */
    function argsToArray(args) {
        var res = new Array(args.length);
        for (var i = 0; i < args.length; i++)
            res[i] = args[i];
        return res;
    }
    /**
     * @internal
     * @hidden
     */
    function invalidateComputed(target, propName) {
        var atom = getAtom(target, propName);
        atom.trackAndCompute();
    }
    /**
     * @internal
     * @hidden
     */
    function stringStartsWith(str, beginning) {
        return str.indexOf(beginning) === 0;
    }
    /**
     * @internal
     * @hidden
     */
    var deprecated = function (id, message) {
        // skip if running production
        if (!devMode())
            return;
        // warn if hasn't been warned before
        if (deprecated.ids && !deprecated.ids.hasOwnProperty(id)) {
            warnError("Deprecation warning: " + message);
        }
        // mark as warned to avoid duplicate warn message
        if (deprecated.ids)
            deprecated.ids[id] = true;
    };
    deprecated.ids = {};
    /**
     * @internal
     * @hidden
     */
    function warnError(msg) {
        console.warn(new Error("[mobx-state-tree] " + msg));
    }
    /**
     * @internal
     * @hidden
     */
    function isTypeCheckingEnabled() {
        return (devMode() ||
            (typeof process !== "undefined" && process.env && process.env.ENABLE_TYPE_CHECK === "true"));
    }
    /**
     * @internal
     * @hidden
     */
    function devMode() {
        return process.env.NODE_ENV !== "production";
    }
    /**
     * @internal
     * @hidden
     */
    function assertArg(value, fn, typeName, argNumber) {
        if (devMode()) {
            if (!fn(value)) {
                // istanbul ignore next
                throw fail$1("expected " + typeName + " as argument " + asArray(argNumber).join(" or ") + ", got " + value + " instead");
            }
        }
    }
    /**
     * @internal
     * @hidden
     */
    function assertIsFunction(value, argNumber) {
        assertArg(value, function (fn) { return typeof fn === "function"; }, "function", argNumber);
    }
    /**
     * @internal
     * @hidden
     */
    function assertIsNumber(value, argNumber, min, max) {
        assertArg(value, function (n) { return typeof n === "number"; }, "number", argNumber);
        if (min !== undefined) {
            assertArg(value, function (n) { return n >= min; }, "number greater than " + min, argNumber);
        }
        if (max !== undefined) {
            assertArg(value, function (n) { return n <= max; }, "number lesser than " + max, argNumber);
        }
    }
    /**
     * @internal
     * @hidden
     */
    function assertIsString(value, argNumber, canBeEmpty) {
        if (canBeEmpty === void 0) { canBeEmpty = true; }
        assertArg(value, function (s) { return typeof s === "string"; }, "string", argNumber);
        if (!canBeEmpty) {
            assertArg(value, function (s) { return s !== ""; }, "not empty string", argNumber);
        }
    }

    /**
     * See [asynchronous actions](https://github.com/mobxjs/mobx-state-tree/blob/master/docs/async-actions.md).
     *
     * @returns The flow as a promise.
     */
    function flow(generator) {
        return createFlowSpawner(generator.name, generator);
    }
    /**
     *  Used for TypeScript to make flows that return a promise return the actual promise result.
     *
     * @param val
     * @returns
     */
    function castFlowReturn(val) {
        return val;
    }
    /**
     * @internal
     * @hidden
     */
    function createFlowSpawner(name, generator) {
        var spawner = function flowSpawner() {
            // Implementation based on https://github.com/tj/co/blob/master/index.js
            var runId = getNextActionId();
            var parentContext = getCurrentActionContext();
            if (!parentContext) {
                throw fail$1("a mst flow must always have a parent context");
            }
            var parentActionContext = getParentActionContext(parentContext);
            if (!parentActionContext) {
                throw fail$1("a mst flow must always have a parent action context");
            }
            var contextBase = {
                name: name,
                id: runId,
                tree: parentContext.tree,
                context: parentContext.context,
                parentId: parentContext.id,
                allParentIds: __spread(parentContext.allParentIds, [parentContext.id]),
                rootId: parentContext.rootId,
                parentEvent: parentContext,
                parentActionEvent: parentActionContext
            };
            var args = arguments;
            function wrap(fn, type, arg) {
                fn.$mst_middleware = spawner.$mst_middleware; // pick up any middleware attached to the flow
                runWithActionContext(__assign$4({}, contextBase, { type: type, args: [arg] }), fn);
            }
            return new Promise(function (resolve, reject) {
                var gen;
                var init = function asyncActionInit() {
                    gen = generator.apply(null, arguments);
                    onFulfilled(undefined); // kick off the flow
                };
                init.$mst_middleware = spawner.$mst_middleware;
                runWithActionContext(__assign$4({}, contextBase, { type: "flow_spawn", args: argsToArray(args) }), init);
                function onFulfilled(res) {
                    var ret;
                    try {
                        // prettier-ignore
                        wrap(function (r) { ret = gen.next(r); }, "flow_resume", res);
                    }
                    catch (e) {
                        // prettier-ignore
                        setImmediate(function () {
                            wrap(function (r) { reject(e); }, "flow_throw", e);
                        });
                        return;
                    }
                    next(ret);
                    return;
                }
                function onRejected(err) {
                    var ret;
                    try {
                        // prettier-ignore
                        wrap(function (r) { ret = gen.throw(r); }, "flow_resume_error", err); // or yieldError?
                    }
                    catch (e) {
                        // prettier-ignore
                        setImmediate(function () {
                            wrap(function (r) { reject(e); }, "flow_throw", e);
                        });
                        return;
                    }
                    next(ret);
                }
                function next(ret) {
                    if (ret.done) {
                        // prettier-ignore
                        setImmediate(function () {
                            wrap(function (r) { resolve(r); }, "flow_return", ret.value);
                        });
                        return;
                    }
                    // TODO: support more type of values? See https://github.com/tj/co/blob/249bbdc72da24ae44076afd716349d2089b31c4c/index.js#L100
                    if (!ret.value || typeof ret.value.then !== "function") {
                        // istanbul ignore next
                        throw fail$1("Only promises can be yielded to `async`, got: " + ret);
                    }
                    return ret.value.then(onFulfilled, onRejected);
                }
            });
        };
        return spawner;
    }

    /**
     * @internal
     * @hidden
     */
    function splitPatch(patch) {
        if (!("oldValue" in patch))
            throw fail$1("Patches without `oldValue` field cannot be inversed");
        return [stripPatch(patch), invertPatch(patch)];
    }
    /**
     * @internal
     * @hidden
     */
    function stripPatch(patch) {
        // strips `oldvalue` information from the patch, so that it becomes a patch conform the json-patch spec
        // this removes the ability to undo the patch
        switch (patch.op) {
            case "add":
                return { op: "add", path: patch.path, value: patch.value };
            case "remove":
                return { op: "remove", path: patch.path };
            case "replace":
                return { op: "replace", path: patch.path, value: patch.value };
        }
    }
    function invertPatch(patch) {
        switch (patch.op) {
            case "add":
                return {
                    op: "remove",
                    path: patch.path
                };
            case "remove":
                return {
                    op: "add",
                    path: patch.path,
                    value: patch.oldValue
                };
            case "replace":
                return {
                    op: "replace",
                    path: patch.path,
                    value: patch.oldValue
                };
        }
    }
    /**
     * Simple simple check to check it is a number.
     */
    function isNumber$1(x) {
        return typeof x === "number";
    }
    /**
     * Escape slashes and backslashes.
     *
     * http://tools.ietf.org/html/rfc6901
     */
    function escapeJsonPath(path) {
        if (isNumber$1(path) === true) {
            return "" + path;
        }
        if (path.indexOf("/") === -1 && path.indexOf("~") === -1)
            return path;
        return path.replace(/~/g, "~0").replace(/\//g, "~1");
    }
    /**
     * Unescape slashes and backslashes.
     */
    function unescapeJsonPath(path) {
        return path.replace(/~1/g, "/").replace(/~0/g, "~");
    }
    /**
     * Generates a json-path compliant json path from path parts.
     *
     * @param path
     * @returns
     */
    function joinJsonPath(path) {
        // `/` refers to property with an empty name, while `` refers to root itself!
        if (path.length === 0)
            return "";
        var getPathStr = function (p) { return p.map(escapeJsonPath).join("/"); };
        if (path[0] === "." || path[0] === "..") {
            // relative
            return getPathStr(path);
        }
        else {
            // absolute
            return "/" + getPathStr(path);
        }
    }
    /**
     * Splits and decodes a json path into several parts.
     *
     * @param path
     * @returns
     */
    function splitJsonPath(path) {
        // `/` refers to property with an empty name, while `` refers to root itself!
        var parts = path.split("/").map(unescapeJsonPath);
        var valid = path === "" ||
            path === "." ||
            path === ".." ||
            stringStartsWith(path, "/") ||
            stringStartsWith(path, "./") ||
            stringStartsWith(path, "../");
        if (!valid) {
            throw fail$1("a json path must be either rooted, empty or relative, but got '" + path + "'");
        }
        // '/a/b/c' -> ["a", "b", "c"]
        // '../../b/c' -> ["..", "..", "b", "c"]
        // '' -> []
        // '/' -> ['']
        // './a' -> [".", "a"]
        // /./a' -> [".", "a"] equivalent to './a'
        if (parts[0] === "") {
            parts.shift();
        }
        return parts;
    }

    var SnapshotProcessor = /** @class */ (function (_super) {
        __extends$1(SnapshotProcessor, _super);
        function SnapshotProcessor(_subtype, _processors, name) {
            var _this = _super.call(this, name || _subtype.name) || this;
            _this._subtype = _subtype;
            _this._processors = _processors;
            return _this;
        }
        Object.defineProperty(SnapshotProcessor.prototype, "flags", {
            get: function () {
                return this._subtype.flags | TypeFlags.SnapshotProcessor;
            },
            enumerable: true,
            configurable: true
        });
        SnapshotProcessor.prototype.describe = function () {
            return "snapshotProcessor(" + this._subtype.describe() + ")";
        };
        SnapshotProcessor.prototype.preProcessSnapshot = function (sn) {
            if (this._processors.preProcessor) {
                return this._processors.preProcessor.call(null, sn);
            }
            return sn;
        };
        SnapshotProcessor.prototype.postProcessSnapshot = function (sn) {
            if (this._processors.postProcessor) {
                return this._processors.postProcessor.call(null, sn);
            }
            return sn;
        };
        SnapshotProcessor.prototype._fixNode = function (node) {
            var _this = this;
            // the node has to use these methods rather than the original type ones
            proxyNodeTypeMethods(node.type, this, "isAssignableFrom", "create");
            var oldGetSnapshot = node.getSnapshot;
            node.getSnapshot = function () {
                return _this.postProcessSnapshot(oldGetSnapshot.call(node));
            };
        };
        SnapshotProcessor.prototype.instantiate = function (parent, subpath, environment, initialValue) {
            var processedInitialValue = isStateTreeNode(initialValue)
                ? initialValue
                : this.preProcessSnapshot(initialValue);
            var node = this._subtype.instantiate(parent, subpath, environment, processedInitialValue);
            this._fixNode(node);
            return node;
        };
        SnapshotProcessor.prototype.reconcile = function (current, newValue, parent, subpath) {
            var node = this._subtype.reconcile(current, isStateTreeNode(newValue) ? newValue : this.preProcessSnapshot(newValue), parent, subpath);
            if (node !== current) {
                this._fixNode(node);
            }
            return node;
        };
        SnapshotProcessor.prototype.getSnapshot = function (node, applyPostProcess) {
            if (applyPostProcess === void 0) { applyPostProcess = true; }
            var sn = this._subtype.getSnapshot(node);
            return applyPostProcess ? this.postProcessSnapshot(sn) : sn;
        };
        SnapshotProcessor.prototype.isValidSnapshot = function (value, context) {
            var processedSn = this.preProcessSnapshot(value);
            return this._subtype.validate(processedSn, context);
        };
        SnapshotProcessor.prototype.getSubTypes = function () {
            return this._subtype;
        };
        SnapshotProcessor.prototype.is = function (thing) {
            return (this._subtype.validate(isType(thing) ? this._subtype : this.preProcessSnapshot(thing), [
                { path: "", type: this._subtype }
            ]).length === 0);
        };
        return SnapshotProcessor;
    }(BaseType));
    function proxyNodeTypeMethods(nodeType, snapshotProcessorType) {
        var e_1, _a;
        var methods = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            methods[_i - 2] = arguments[_i];
        }
        try {
            for (var methods_1 = __values(methods), methods_1_1 = methods_1.next(); !methods_1_1.done; methods_1_1 = methods_1.next()) {
                var method = methods_1_1.value;
                nodeType[method] = snapshotProcessorType[method].bind(snapshotProcessorType);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (methods_1_1 && !methods_1_1.done && (_a = methods_1.return)) _a.call(methods_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }
    /**
     * `types.snapshotProcessor` - Runs a pre/post snapshot processor before/after serializing a given type.
     *
     * Example:
     * ```ts
     * const Todo1 = types.model({ text: types.string })
     * // in the backend the text type must be null when empty
     * interface BackendTodo {
     *     text: string | null
     * }
     * const Todo2 = types.snapshotProcessor(Todo1, {
     *     // from snapshot to instance
     *     preProcessor(sn: BackendTodo) {
     *         return {
     *             text: sn.text || "";
     *         }
     *     },
     *     // from instance to snapshot
     *     postProcessor(sn): BackendTodo {
     *         return {
     *             text: !sn.text ? null : sn.text
     *         }
     *     }
     * })
     * ```
     *
     * @param type Type to run the processors over.
     * @param processors Processors to run.
     * @param name Type name, or undefined to inherit the inner type one.
     * @returns
     */
    function snapshotProcessor(type, processors, name) {
        assertIsType(type, 1);
        if (devMode()) {
            if (processors.postProcessor && typeof processors.postProcessor !== "function") {
                // istanbul ignore next
                throw fail("postSnapshotProcessor must be a function");
            }
            if (processors.preProcessor && typeof processors.preProcessor !== "function") {
                // istanbul ignore next
                throw fail("preSnapshotProcessor must be a function");
            }
        }
        return new SnapshotProcessor(type, processors, name);
    }

    var needsIdentifierError = "Map.put can only be used to store complex values that have an identifier type attribute";
    function tryCollectModelTypes(type, modelTypes) {
        var e_1, _a;
        var subtypes = type.getSubTypes();
        if (subtypes === cannotDetermineSubtype) {
            return false;
        }
        if (subtypes) {
            var subtypesArray = asArray(subtypes);
            try {
                for (var subtypesArray_1 = __values(subtypesArray), subtypesArray_1_1 = subtypesArray_1.next(); !subtypesArray_1_1.done; subtypesArray_1_1 = subtypesArray_1.next()) {
                    var subtype = subtypesArray_1_1.value;
                    if (!tryCollectModelTypes(subtype, modelTypes))
                        return false;
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (subtypesArray_1_1 && !subtypesArray_1_1.done && (_a = subtypesArray_1.return)) _a.call(subtypesArray_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        if (type instanceof ModelType) {
            modelTypes.push(type);
        }
        return true;
    }
    /**
     * @internal
     * @hidden
     */
    var MapIdentifierMode;
    (function (MapIdentifierMode) {
        MapIdentifierMode[MapIdentifierMode["UNKNOWN"] = 0] = "UNKNOWN";
        MapIdentifierMode[MapIdentifierMode["YES"] = 1] = "YES";
        MapIdentifierMode[MapIdentifierMode["NO"] = 2] = "NO";
    })(MapIdentifierMode || (MapIdentifierMode = {}));
    var MSTMap = /** @class */ (function (_super) {
        __extends$1(MSTMap, _super);
        function MSTMap(initialData) {
            return _super.call(this, initialData, observable$1.ref.enhancer) || this;
        }
        MSTMap.prototype.get = function (key) {
            // maybe this is over-enthousiastic? normalize numeric keys to strings
            return _super.prototype.get.call(this, "" + key);
        };
        MSTMap.prototype.has = function (key) {
            return _super.prototype.has.call(this, "" + key);
        };
        MSTMap.prototype.delete = function (key) {
            return _super.prototype.delete.call(this, "" + key);
        };
        MSTMap.prototype.set = function (key, value) {
            return _super.prototype.set.call(this, "" + key, value);
        };
        MSTMap.prototype.put = function (value) {
            if (!value)
                throw fail$1("Map.put cannot be used to set empty values");
            if (isStateTreeNode(value)) {
                var node = getStateTreeNode(value);
                if (devMode()) {
                    if (!node.identifierAttribute) {
                        throw fail$1(needsIdentifierError);
                    }
                }
                if (node.identifier === null) {
                    throw fail$1(needsIdentifierError);
                }
                this.set(node.identifier, value);
                return value;
            }
            else if (!isMutable(value)) {
                throw fail$1("Map.put can only be used to store complex values");
            }
            else {
                var mapNode = getStateTreeNode(this);
                var mapType = mapNode.type;
                if (mapType.identifierMode !== MapIdentifierMode.YES) {
                    throw fail$1(needsIdentifierError);
                }
                var idAttr = mapType.mapIdentifierAttribute;
                var id = value[idAttr];
                if (!isValidIdentifier(id)) {
                    // try again but this time after creating a node for the value
                    // since it might be an optional identifier
                    var newNode = this.put(mapType.getChildType().create(value, mapNode.environment));
                    return this.put(getSnapshot(newNode));
                }
                var key = normalizeIdentifier(id);
                this.set(key, value);
                return this.get(key);
            }
        };
        return MSTMap;
    }(ObservableMap));
    /**
     * @internal
     * @hidden
     */
    var MapType = /** @class */ (function (_super) {
        __extends$1(MapType, _super);
        function MapType(name, _subType) {
            var _this = _super.call(this, name) || this;
            _this._subType = _subType;
            _this.identifierMode = MapIdentifierMode.UNKNOWN;
            _this.mapIdentifierAttribute = undefined;
            _this.flags = TypeFlags.Map;
            _this._determineIdentifierMode();
            return _this;
        }
        MapType.prototype.instantiate = function (parent, subpath, environment, initialValue) {
            this._determineIdentifierMode();
            return createObjectNode(this, parent, subpath, environment, initialValue);
        };
        MapType.prototype._determineIdentifierMode = function () {
            if (this.identifierMode !== MapIdentifierMode.UNKNOWN) {
                return;
            }
            var modelTypes = [];
            if (tryCollectModelTypes(this._subType, modelTypes)) {
                var identifierAttribute_1 = undefined;
                modelTypes.forEach(function (type) {
                    if (type.identifierAttribute) {
                        if (identifierAttribute_1 && identifierAttribute_1 !== type.identifierAttribute) {
                            throw fail$1("The objects in a map should all have the same identifier attribute, expected '" + identifierAttribute_1 + "', but child of type '" + type.name + "' declared attribute '" + type.identifierAttribute + "' as identifier");
                        }
                        identifierAttribute_1 = type.identifierAttribute;
                    }
                });
                if (identifierAttribute_1) {
                    this.identifierMode = MapIdentifierMode.YES;
                    this.mapIdentifierAttribute = identifierAttribute_1;
                }
                else {
                    this.identifierMode = MapIdentifierMode.NO;
                }
            }
        };
        MapType.prototype.initializeChildNodes = function (objNode, initialSnapshot) {
            if (initialSnapshot === void 0) { initialSnapshot = {}; }
            var subType = objNode.type._subType;
            var result = {};
            Object.keys(initialSnapshot).forEach(function (name) {
                result[name] = subType.instantiate(objNode, name, undefined, initialSnapshot[name]);
            });
            return result;
        };
        MapType.prototype.createNewInstance = function (childNodes) {
            return new MSTMap(childNodes);
        };
        MapType.prototype.finalizeNewInstance = function (node, instance) {
            interceptReads(instance, node.unbox);
            intercept(instance, this.willChange);
            observe$1(instance, this.didChange);
        };
        MapType.prototype.describe = function () {
            return "Map<string, " + this._subType.describe() + ">";
        };
        MapType.prototype.getChildren = function (node) {
            // return (node.storedValue as ObservableMap<any>).values()
            return values$2(node.storedValue);
        };
        MapType.prototype.getChildNode = function (node, key) {
            var childNode = node.storedValue.get("" + key);
            if (!childNode)
                throw fail$1("Not a child " + key);
            return childNode;
        };
        MapType.prototype.willChange = function (change) {
            var node = getStateTreeNode(change.object);
            var key = change.name;
            node.assertWritable({ subpath: key });
            var mapType = node.type;
            var subType = mapType._subType;
            switch (change.type) {
                case "update":
                    {
                        var newValue = change.newValue;
                        var oldValue = change.object.get(key);
                        if (newValue === oldValue)
                            return null;
                        typecheckInternal(subType, newValue);
                        change.newValue = subType.reconcile(node.getChildNode(key), change.newValue, node, key);
                        mapType.processIdentifier(key, change.newValue);
                    }
                    break;
                case "add":
                    {
                        typecheckInternal(subType, change.newValue);
                        change.newValue = subType.instantiate(node, key, undefined, change.newValue);
                        mapType.processIdentifier(key, change.newValue);
                    }
                    break;
            }
            return change;
        };
        MapType.prototype.processIdentifier = function (expected, node) {
            if (this.identifierMode === MapIdentifierMode.YES && node instanceof ObjectNode) {
                var identifier = node.identifier;
                if (identifier !== expected)
                    throw fail$1("A map of objects containing an identifier should always store the object under their own identifier. Trying to store key '" + identifier + "', but expected: '" + expected + "'");
            }
        };
        MapType.prototype.getSnapshot = function (node) {
            var res = {};
            node.getChildren().forEach(function (childNode) {
                res[childNode.subpath] = childNode.snapshot;
            });
            return res;
        };
        MapType.prototype.processInitialSnapshot = function (childNodes) {
            var processed = {};
            Object.keys(childNodes).forEach(function (key) {
                processed[key] = childNodes[key].getSnapshot();
            });
            return processed;
        };
        MapType.prototype.didChange = function (change) {
            var node = getStateTreeNode(change.object);
            switch (change.type) {
                case "update":
                    return void node.emitPatch({
                        op: "replace",
                        path: escapeJsonPath(change.name),
                        value: change.newValue.snapshot,
                        oldValue: change.oldValue ? change.oldValue.snapshot : undefined
                    }, node);
                case "add":
                    return void node.emitPatch({
                        op: "add",
                        path: escapeJsonPath(change.name),
                        value: change.newValue.snapshot,
                        oldValue: undefined
                    }, node);
                case "delete":
                    // a node got deleted, get the old snapshot and make the node die
                    var oldSnapshot = change.oldValue.snapshot;
                    change.oldValue.die();
                    // emit the patch
                    return void node.emitPatch({
                        op: "remove",
                        path: escapeJsonPath(change.name),
                        oldValue: oldSnapshot
                    }, node);
            }
        };
        MapType.prototype.applyPatchLocally = function (node, subpath, patch) {
            var target = node.storedValue;
            switch (patch.op) {
                case "add":
                case "replace":
                    target.set(subpath, patch.value);
                    break;
                case "remove":
                    target.delete(subpath);
                    break;
            }
        };
        MapType.prototype.applySnapshot = function (node, snapshot) {
            typecheckInternal(this, snapshot);
            var target = node.storedValue;
            var currentKeys = {};
            Array.from(target.keys()).forEach(function (key) {
                currentKeys[key] = false;
            });
            if (snapshot) {
                // Don't use target.replace, as it will throw away all existing items first
                for (var key in snapshot) {
                    target.set(key, snapshot[key]);
                    currentKeys["" + key] = true;
                }
            }
            Object.keys(currentKeys).forEach(function (key) {
                if (currentKeys[key] === false)
                    target.delete(key);
            });
        };
        MapType.prototype.getChildType = function () {
            return this._subType;
        };
        MapType.prototype.isValidSnapshot = function (value, context) {
            var _this = this;
            if (!isPlainObject(value)) {
                return typeCheckFailure(context, value, "Value is not a plain object");
            }
            return flattenTypeErrors(Object.keys(value).map(function (path) {
                return _this._subType.validate(value[path], getContextForPath(context, path, _this._subType));
            }));
        };
        MapType.prototype.getDefaultSnapshot = function () {
            return EMPTY_OBJECT;
        };
        MapType.prototype.removeChild = function (node, subpath) {
            node.storedValue.delete(subpath);
        };
        __decorate([
            action
        ], MapType.prototype, "applySnapshot", null);
        return MapType;
    }(ComplexType));
    /**
     * `types.map` - Creates a key based collection type who's children are all of a uniform declared type.
     * If the type stored in a map has an identifier, it is mandatory to store the child under that identifier in the map.
     *
     * This type will always produce [observable maps](https://mobx.js.org/refguide/map.html)
     *
     * Example:
     * ```ts
     * const Todo = types.model({
     *   id: types.identifier,
     *   task: types.string
     * })
     *
     * const TodoStore = types.model({
     *   todos: types.map(Todo)
     * })
     *
     * const s = TodoStore.create({ todos: {} })
     * unprotect(s)
     * s.todos.set(17, { task: "Grab coffee", id: 17 })
     * s.todos.put({ task: "Grab cookie", id: 18 }) // put will infer key from the identifier
     * console.log(s.todos.get(17).task) // prints: "Grab coffee"
     * ```
     *
     * @param subtype
     * @returns
     */
    function map$1(subtype) {
        return new MapType("map<string, " + subtype.name + ">", subtype);
    }
    /**
     * Returns if a given value represents a map type.
     *
     * @param type
     * @returns `true` if it is a map type.
     */
    function isMapType(type) {
        return isType(type) && (type.flags & TypeFlags.Map) > 0;
    }

    /**
     * @internal
     * @hidden
     */
    var ArrayType = /** @class */ (function (_super) {
        __extends$1(ArrayType, _super);
        function ArrayType(name, _subType) {
            var _this = _super.call(this, name) || this;
            _this._subType = _subType;
            _this.flags = TypeFlags.Array;
            return _this;
        }
        ArrayType.prototype.instantiate = function (parent, subpath, environment, initialValue) {
            return createObjectNode(this, parent, subpath, environment, initialValue);
        };
        ArrayType.prototype.initializeChildNodes = function (objNode, snapshot) {
            if (snapshot === void 0) { snapshot = []; }
            var subType = objNode.type._subType;
            var result = {};
            snapshot.forEach(function (item, index) {
                var subpath = "" + index;
                result[subpath] = subType.instantiate(objNode, subpath, undefined, item);
            });
            return result;
        };
        ArrayType.prototype.createNewInstance = function (childNodes) {
            return observable$1.array(convertChildNodesToArray(childNodes), mobxShallow);
        };
        ArrayType.prototype.finalizeNewInstance = function (node, instance) {
            getAdministration(instance).dehancer = node.unbox;
            intercept(instance, this.willChange);
            observe$1(instance, this.didChange);
        };
        ArrayType.prototype.describe = function () {
            return this._subType.describe() + "[]";
        };
        ArrayType.prototype.getChildren = function (node) {
            return node.storedValue.slice();
        };
        ArrayType.prototype.getChildNode = function (node, key) {
            var index = Number(key);
            if (index < node.storedValue.length)
                return node.storedValue[index];
            throw fail$1("Not a child: " + key);
        };
        ArrayType.prototype.willChange = function (change) {
            var node = getStateTreeNode(change.object);
            node.assertWritable({ subpath: "" + change.index });
            var subType = node.type._subType;
            var childNodes = node.getChildren();
            switch (change.type) {
                case "update":
                    {
                        if (change.newValue === change.object[change.index])
                            return null;
                        var updatedNodes = reconcileArrayChildren(node, subType, [childNodes[change.index]], [change.newValue], [change.index]);
                        if (!updatedNodes) {
                            return null;
                        }
                        change.newValue = updatedNodes[0];
                    }
                    break;
                case "splice":
                    {
                        var index_1 = change.index, removedCount = change.removedCount, added = change.added;
                        var addedNodes = reconcileArrayChildren(node, subType, childNodes.slice(index_1, index_1 + removedCount), added, added.map(function (_, i) { return index_1 + i; }));
                        if (!addedNodes) {
                            return null;
                        }
                        change.added = addedNodes;
                        // update paths of remaining items
                        for (var i = index_1 + removedCount; i < childNodes.length; i++) {
                            childNodes[i].setParent(node, "" + (i + added.length - removedCount));
                        }
                    }
                    break;
            }
            return change;
        };
        ArrayType.prototype.getSnapshot = function (node) {
            return node.getChildren().map(function (childNode) { return childNode.snapshot; });
        };
        ArrayType.prototype.processInitialSnapshot = function (childNodes) {
            var processed = [];
            Object.keys(childNodes).forEach(function (key) {
                processed.push(childNodes[key].getSnapshot());
            });
            return processed;
        };
        ArrayType.prototype.didChange = function (change) {
            var node = getStateTreeNode(change.object);
            switch (change.type) {
                case "update":
                    return void node.emitPatch({
                        op: "replace",
                        path: "" + change.index,
                        value: change.newValue.snapshot,
                        oldValue: change.oldValue ? change.oldValue.snapshot : undefined
                    }, node);
                case "splice":
                    for (var i = change.removedCount - 1; i >= 0; i--)
                        node.emitPatch({
                            op: "remove",
                            path: "" + (change.index + i),
                            oldValue: change.removed[i].snapshot
                        }, node);
                    for (var i = 0; i < change.addedCount; i++)
                        node.emitPatch({
                            op: "add",
                            path: "" + (change.index + i),
                            value: node.getChildNode("" + (change.index + i)).snapshot,
                            oldValue: undefined
                        }, node);
                    return;
            }
        };
        ArrayType.prototype.applyPatchLocally = function (node, subpath, patch) {
            var target = node.storedValue;
            var index = subpath === "-" ? target.length : Number(subpath);
            switch (patch.op) {
                case "replace":
                    target[index] = patch.value;
                    break;
                case "add":
                    target.splice(index, 0, patch.value);
                    break;
                case "remove":
                    target.splice(index, 1);
                    break;
            }
        };
        ArrayType.prototype.applySnapshot = function (node, snapshot) {
            typecheckInternal(this, snapshot);
            var target = node.storedValue;
            target.replace(snapshot);
        };
        ArrayType.prototype.getChildType = function () {
            return this._subType;
        };
        ArrayType.prototype.isValidSnapshot = function (value, context) {
            var _this = this;
            if (!isArray$4(value)) {
                return typeCheckFailure(context, value, "Value is not an array");
            }
            return flattenTypeErrors(value.map(function (item, index) {
                return _this._subType.validate(item, getContextForPath(context, "" + index, _this._subType));
            }));
        };
        ArrayType.prototype.getDefaultSnapshot = function () {
            return EMPTY_ARRAY;
        };
        ArrayType.prototype.removeChild = function (node, subpath) {
            node.storedValue.splice(Number(subpath), 1);
        };
        __decorate([
            action
        ], ArrayType.prototype, "applySnapshot", null);
        return ArrayType;
    }(ComplexType));
    /**
     * `types.array` - Creates an index based collection type who's children are all of a uniform declared type.
     *
     * This type will always produce [observable arrays](https://mobx.js.org/refguide/array.html)
     *
     * Example:
     * ```ts
     * const Todo = types.model({
     *   task: types.string
     * })
     *
     * const TodoStore = types.model({
     *   todos: types.array(Todo)
     * })
     *
     * const s = TodoStore.create({ todos: [] })
     * unprotect(s) // needed to allow modifying outside of an action
     * s.todos.push({ task: "Grab coffee" })
     * console.log(s.todos[0]) // prints: "Grab coffee"
     * ```
     *
     * @param subtype
     * @returns
     */
    function array(subtype) {
        assertIsType(subtype, 1);
        return new ArrayType(subtype.name + "[]", subtype);
    }
    function reconcileArrayChildren(parent, childType, oldNodes, newValues, newPaths) {
        var nothingChanged = true;
        for (var i = 0;; i++) {
            var hasNewNode = i <= newValues.length - 1;
            var oldNode = oldNodes[i];
            var newValue = hasNewNode ? newValues[i] : undefined;
            var newPath = "" + newPaths[i];
            // for some reason, instead of newValue we got a node, fallback to the storedValue
            // TODO: https://github.com/mobxjs/mobx-state-tree/issues/340#issuecomment-325581681
            if (isNode(newValue))
                newValue = newValue.storedValue;
            if (!oldNode && !hasNewNode) {
                // both are empty, end
                break;
            }
            else if (!hasNewNode) {
                // new one does not exists
                nothingChanged = false;
                oldNodes.splice(i, 1);
                if (oldNode instanceof ObjectNode) {
                    // since it is going to be returned by pop/splice/shift better create it before killing it
                    // so it doesn't end up in an undead state
                    oldNode.createObservableInstanceIfNeeded();
                }
                oldNode.die();
                i--;
            }
            else if (!oldNode) {
                // there is no old node, create it
                // check if already belongs to the same parent. if so, avoid pushing item in. only swapping can occur.
                if (isStateTreeNode(newValue) && getStateTreeNode(newValue).parent === parent) {
                    // this node is owned by this parent, but not in the reconcilable set, so it must be double
                    throw fail$1("Cannot add an object to a state tree if it is already part of the same or another state tree. Tried to assign an object to '" + parent.path + "/" + newPath + "', but it lives already at '" + getStateTreeNode(newValue).path + "'");
                }
                nothingChanged = false;
                var newNode = valueAsNode(childType, parent, newPath, newValue);
                oldNodes.splice(i, 0, newNode);
            }
            else if (areSame(oldNode, newValue)) {
                // both are the same, reconcile
                oldNodes[i] = valueAsNode(childType, parent, newPath, newValue, oldNode);
            }
            else {
                // nothing to do, try to reorder
                var oldMatch = undefined;
                // find a possible candidate to reuse
                for (var j = i; j < oldNodes.length; j++) {
                    if (areSame(oldNodes[j], newValue)) {
                        oldMatch = oldNodes.splice(j, 1)[0];
                        break;
                    }
                }
                nothingChanged = false;
                var newNode = valueAsNode(childType, parent, newPath, newValue, oldMatch);
                oldNodes.splice(i, 0, newNode);
            }
        }
        return nothingChanged ? null : oldNodes;
    }
    /**
     * Convert a value to a node at given parent and subpath. Attempts to reuse old node if possible and given.
     */
    function valueAsNode(childType, parent, subpath, newValue, oldNode) {
        // ensure the value is valid-ish
        typecheckInternal(childType, newValue);
        function getNewNode() {
            // the new value has a MST node
            if (isStateTreeNode(newValue)) {
                var childNode = getStateTreeNode(newValue);
                childNode.assertAlive(EMPTY_OBJECT);
                // the node lives here
                if (childNode.parent !== null && childNode.parent === parent) {
                    childNode.setParent(parent, subpath);
                    return childNode;
                }
            }
            // there is old node and new one is a value/snapshot
            if (oldNode) {
                return childType.reconcile(oldNode, newValue, parent, subpath);
            }
            // nothing to do, create from scratch
            return childType.instantiate(parent, subpath, undefined, newValue);
        }
        var newNode = getNewNode();
        if (oldNode && oldNode !== newNode) {
            if (oldNode instanceof ObjectNode) {
                // since it is going to be returned by pop/splice/shift better create it before killing it
                // so it doesn't end up in an undead state
                oldNode.createObservableInstanceIfNeeded();
            }
            oldNode.die();
        }
        return newNode;
    }
    /**
     * Check if a node holds a value.
     */
    function areSame(oldNode, newValue) {
        // never consider dead old nodes for reconciliation
        if (!oldNode.isAlive) {
            return false;
        }
        // the new value has the same node
        if (isStateTreeNode(newValue)) {
            var newNode = getStateTreeNode(newValue);
            return newNode.isAlive && newNode === oldNode;
        }
        // the provided value is the snapshot of the old node
        if (oldNode.snapshot === newValue) {
            return true;
        }
        // new value is a snapshot with the correct identifier
        return (oldNode instanceof ObjectNode &&
            oldNode.identifier !== null &&
            oldNode.identifierAttribute &&
            isPlainObject(newValue) &&
            oldNode.identifier === normalizeIdentifier(newValue[oldNode.identifierAttribute]) &&
            oldNode.type.is(newValue));
    }
    /**
     * Returns if a given value represents an array type.
     *
     * @param type
     * @returns `true` if the type is an array type.
     */
    function isArrayType(type) {
        return isType(type) && (type.flags & TypeFlags.Array) > 0;
    }

    var PRE_PROCESS_SNAPSHOT = "preProcessSnapshot";
    var POST_PROCESS_SNAPSHOT = "postProcessSnapshot";
    function objectTypeToString() {
        return getStateTreeNode(this).toString();
    }
    var defaultObjectOptions = {
        name: "AnonymousModel",
        properties: {},
        initializers: EMPTY_ARRAY
    };
    function toPropertiesObject(declaredProps) {
        // loop through properties and ensures that all items are types
        return Object.keys(declaredProps).reduce(function (props, key) {
            var _a, _b, _c;
            // warn if user intended a HOOK
            if (key in Hook)
                throw fail$1("Hook '" + key + "' was defined as property. Hooks should be defined as part of the actions");
            // the user intended to use a view
            var descriptor = Object.getOwnPropertyDescriptor(props, key);
            if ("get" in descriptor) {
                throw fail$1("Getters are not supported as properties. Please use views instead");
            }
            // undefined and null are not valid
            var value = descriptor.value;
            if (value === null || value === undefined) {
                throw fail$1("The default value of an attribute cannot be null or undefined as the type cannot be inferred. Did you mean `types.maybe(someType)`?");
                // its a primitive, convert to its type
            }
            else if (isPrimitive$4(value)) {
                return Object.assign({}, props, (_a = {},
                    _a[key] = optional(getPrimitiveFactoryFromValue(value), value),
                    _a));
                // map defaults to empty object automatically for models
            }
            else if (value instanceof MapType) {
                return Object.assign({}, props, (_b = {},
                    _b[key] = optional(value, {}),
                    _b));
            }
            else if (value instanceof ArrayType) {
                return Object.assign({}, props, (_c = {}, _c[key] = optional(value, []), _c));
                // its already a type
            }
            else if (isType(value)) {
                return props;
                // its a function, maybe the user wanted a view?
            }
            else if (devMode() && typeof value === "function") {
                throw fail$1("Invalid type definition for property '" + key + "', it looks like you passed a function. Did you forget to invoke it, or did you intend to declare a view / action?");
                // no other complex values
            }
            else if (devMode() && typeof value === "object") {
                throw fail$1("Invalid type definition for property '" + key + "', it looks like you passed an object. Try passing another model type or a types.frozen.");
                // WTF did you pass in mate?
            }
            else {
                throw fail$1("Invalid type definition for property '" + key + "', cannot infer a type from a value like '" + value + "' (" + typeof value + ")");
            }
        }, declaredProps);
    }
    /**
     * @internal
     * @hidden
     */
    var ModelType = /** @class */ (function (_super) {
        __extends$1(ModelType, _super);
        function ModelType(opts) {
            var _this = _super.call(this, opts.name || defaultObjectOptions.name) || this;
            _this.flags = TypeFlags.Object;
            _this.named = function (name) {
                return _this.cloneAndEnhance({ name: name });
            };
            _this.props = function (properties) {
                return _this.cloneAndEnhance({ properties: properties });
            };
            _this.preProcessSnapshot = function (preProcessor) {
                var currentPreprocessor = _this.preProcessor;
                if (!currentPreprocessor)
                    return _this.cloneAndEnhance({ preProcessor: preProcessor });
                else
                    return _this.cloneAndEnhance({
                        preProcessor: function (snapshot) { return currentPreprocessor(preProcessor(snapshot)); }
                    });
            };
            _this.postProcessSnapshot = function (postProcessor) {
                var currentPostprocessor = _this.postProcessor;
                if (!currentPostprocessor)
                    return _this.cloneAndEnhance({ postProcessor: postProcessor });
                else
                    return _this.cloneAndEnhance({
                        postProcessor: function (snapshot) { return postProcessor(currentPostprocessor(snapshot)); }
                    });
            };
            var name = opts.name || defaultObjectOptions.name;
            // TODO: this test still needed?
            if (!/^\w[\w\d_]*$/.test(name))
                throw fail$1("Typename should be a valid identifier: " + name);
            Object.assign(_this, defaultObjectOptions, opts);
            // ensures that any default value gets converted to its related type
            _this.properties = toPropertiesObject(_this.properties);
            freeze(_this.properties); // make sure nobody messes with it
            _this.propertyNames = Object.keys(_this.properties);
            _this.identifierAttribute = _this._getIdentifierAttribute();
            return _this;
        }
        ModelType.prototype._getIdentifierAttribute = function () {
            var identifierAttribute = undefined;
            this.forAllProps(function (propName, propType) {
                if (propType.flags & TypeFlags.Identifier) {
                    if (identifierAttribute)
                        throw fail$1("Cannot define property '" + propName + "' as object identifier, property '" + identifierAttribute + "' is already defined as identifier property");
                    identifierAttribute = propName;
                }
            });
            return identifierAttribute;
        };
        ModelType.prototype.cloneAndEnhance = function (opts) {
            return new ModelType({
                name: opts.name || this.name,
                properties: Object.assign({}, this.properties, opts.properties),
                initializers: this.initializers.concat(opts.initializers || []),
                preProcessor: opts.preProcessor || this.preProcessor,
                postProcessor: opts.postProcessor || this.postProcessor
            });
        };
        ModelType.prototype.actions = function (fn) {
            var _this = this;
            var actionInitializer = function (self) {
                _this.instantiateActions(self, fn(self));
                return self;
            };
            return this.cloneAndEnhance({ initializers: [actionInitializer] });
        };
        ModelType.prototype.instantiateActions = function (self, actions) {
            // check if return is correct
            if (!isPlainObject(actions))
                throw fail$1("actions initializer should return a plain object containing actions");
            // bind actions to the object created
            Object.keys(actions).forEach(function (name) {
                // warn if preprocessor was given
                if (name === PRE_PROCESS_SNAPSHOT)
                    throw fail$1("Cannot define action '" + PRE_PROCESS_SNAPSHOT + "', it should be defined using 'type.preProcessSnapshot(fn)' instead");
                // warn if postprocessor was given
                if (name === POST_PROCESS_SNAPSHOT)
                    throw fail$1("Cannot define action '" + POST_PROCESS_SNAPSHOT + "', it should be defined using 'type.postProcessSnapshot(fn)' instead");
                var action2 = actions[name];
                // apply hook composition
                var baseAction = self[name];
                if (name in Hook && baseAction) {
                    var specializedAction_1 = action2;
                    action2 = function () {
                        baseAction.apply(null, arguments);
                        specializedAction_1.apply(null, arguments);
                    };
                }
                // the goal of this is to make sure actions using "this" can call themselves,
                // while still allowing the middlewares to register them
                var middlewares = action2.$mst_middleware; // make sure middlewares are not lost
                var boundAction = action2.bind(actions);
                boundAction.$mst_middleware = middlewares;
                var actionInvoker = createActionInvoker(self, name, boundAction);
                actions[name] = actionInvoker;
                (!devMode() ? addHiddenFinalProp : addHiddenWritableProp)(self, name, actionInvoker);
            });
        };
        ModelType.prototype.volatile = function (fn) {
            var _this = this;
            var stateInitializer = function (self) {
                _this.instantiateVolatileState(self, fn(self));
                return self;
            };
            return this.cloneAndEnhance({ initializers: [stateInitializer] });
        };
        ModelType.prototype.instantiateVolatileState = function (self, state) {
            // check views return
            if (!isPlainObject(state))
                throw fail$1("volatile state initializer should return a plain object containing state");
            set(self, state);
        };
        ModelType.prototype.extend = function (fn) {
            var _this = this;
            var initializer = function (self) {
                var _a = fn(self), actions = _a.actions, views = _a.views, state = _a.state, rest = __rest$2(_a, ["actions", "views", "state"]);
                for (var key in rest)
                    throw fail$1("The `extend` function should return an object with a subset of the fields 'actions', 'views' and 'state'. Found invalid key '" + key + "'");
                if (state)
                    _this.instantiateVolatileState(self, state);
                if (views)
                    _this.instantiateViews(self, views);
                if (actions)
                    _this.instantiateActions(self, actions);
                return self;
            };
            return this.cloneAndEnhance({ initializers: [initializer] });
        };
        ModelType.prototype.views = function (fn) {
            var _this = this;
            var viewInitializer = function (self) {
                _this.instantiateViews(self, fn(self));
                return self;
            };
            return this.cloneAndEnhance({ initializers: [viewInitializer] });
        };
        ModelType.prototype.instantiateViews = function (self, views) {
            // check views return
            if (!isPlainObject(views))
                throw fail$1("views initializer should return a plain object containing views");
            Object.keys(views).forEach(function (key) {
                // is this a computed property?
                var descriptor = Object.getOwnPropertyDescriptor(views, key);
                if ("get" in descriptor) {
                    if (isComputedProp(self, key)) {
                        var computedValue = getAdministration(self, key);
                        // TODO: mobx currently does not allow redefining computes yet, pending #1121
                        // FIXME: this binds to the internals of mobx!
                        computedValue.derivation = descriptor.get;
                        computedValue.scope = self;
                        if (descriptor.set)
                            computedValue.setter = action(computedValue.name + "-setter", descriptor.set);
                    }
                    else {
                        computed$1(self, key, descriptor, true);
                    }
                }
                else if (typeof descriptor.value === "function") {
                    (!devMode() ? addHiddenFinalProp : addHiddenWritableProp)(self, key, descriptor.value);
                }
                else {
                    throw fail$1("A view member should either be a function or getter based property");
                }
            });
        };
        ModelType.prototype.instantiate = function (parent, subpath, environment, initialValue) {
            var value = isStateTreeNode(initialValue)
                ? initialValue
                : this.applySnapshotPreProcessor(initialValue);
            return createObjectNode(this, parent, subpath, environment, value);
            // Optimization: record all prop- view- and action names after first construction, and generate an optimal base class
            // that pre-reserves all these fields for fast object-member lookups
        };
        ModelType.prototype.initializeChildNodes = function (objNode, initialSnapshot) {
            if (initialSnapshot === void 0) { initialSnapshot = {}; }
            var type = objNode.type;
            var result = {};
            type.forAllProps(function (name, childType) {
                result[name] = childType.instantiate(objNode, name, undefined, initialSnapshot[name]);
            });
            return result;
        };
        ModelType.prototype.createNewInstance = function (childNodes) {
            return observable$1.object(childNodes, EMPTY_OBJECT, mobxShallow);
        };
        ModelType.prototype.finalizeNewInstance = function (node, instance) {
            addHiddenFinalProp(instance, "toString", objectTypeToString);
            this.forAllProps(function (name) {
                interceptReads(instance, name, node.unbox);
            });
            this.initializers.reduce(function (self, fn) { return fn(self); }, instance);
            intercept(instance, this.willChange);
            observe$1(instance, this.didChange);
        };
        ModelType.prototype.willChange = function (chg) {
            // TODO: mobx typings don't seem to take into account that newValue can be set even when removing a prop
            var change = chg;
            var node = getStateTreeNode(change.object);
            var subpath = change.name;
            node.assertWritable({ subpath: subpath });
            var childType = node.type.properties[subpath];
            // only properties are typed, state are stored as-is references
            if (childType) {
                typecheckInternal(childType, change.newValue);
                change.newValue = childType.reconcile(node.getChildNode(subpath), change.newValue, node, subpath);
            }
            return change;
        };
        ModelType.prototype.didChange = function (chg) {
            // TODO: mobx typings don't seem to take into account that newValue can be set even when removing a prop
            var change = chg;
            var childNode = getStateTreeNode(change.object);
            var childType = childNode.type.properties[change.name];
            if (!childType) {
                // don't emit patches for volatile state
                return;
            }
            var oldChildValue = change.oldValue ? change.oldValue.snapshot : undefined;
            childNode.emitPatch({
                op: "replace",
                path: escapeJsonPath(change.name),
                value: change.newValue.snapshot,
                oldValue: oldChildValue
            }, childNode);
        };
        ModelType.prototype.getChildren = function (node) {
            var _this = this;
            var res = [];
            this.forAllProps(function (name) {
                res.push(_this.getChildNode(node, name));
            });
            return res;
        };
        ModelType.prototype.getChildNode = function (node, key) {
            if (!(key in this.properties))
                throw fail$1("Not a value property: " + key);
            var childNode = getAdministration(node.storedValue, key).value; // TODO: blegh!
            if (!childNode)
                throw fail$1("Node not available for property " + key);
            return childNode;
        };
        ModelType.prototype.getSnapshot = function (node, applyPostProcess) {
            var _this = this;
            if (applyPostProcess === void 0) { applyPostProcess = true; }
            var res = {};
            this.forAllProps(function (name, type) {
                getAtom(node.storedValue, name).reportObserved();
                res[name] = _this.getChildNode(node, name).snapshot;
            });
            if (applyPostProcess) {
                return this.applySnapshotPostProcessor(res);
            }
            return res;
        };
        ModelType.prototype.processInitialSnapshot = function (childNodes) {
            var processed = {};
            Object.keys(childNodes).forEach(function (key) {
                processed[key] = childNodes[key].getSnapshot();
            });
            return this.applySnapshotPostProcessor(processed);
        };
        ModelType.prototype.applyPatchLocally = function (node, subpath, patch) {
            if (!(patch.op === "replace" || patch.op === "add")) {
                throw fail$1("object does not support operation " + patch.op);
            }
            node.storedValue[subpath] = patch.value;
        };
        ModelType.prototype.applySnapshot = function (node, snapshot) {
            var preProcessedSnapshot = this.applySnapshotPreProcessor(snapshot);
            typecheckInternal(this, preProcessedSnapshot);
            this.forAllProps(function (name) {
                node.storedValue[name] = preProcessedSnapshot[name];
            });
        };
        ModelType.prototype.applySnapshotPreProcessor = function (snapshot) {
            var processor = this.preProcessor;
            return processor ? processor.call(null, snapshot) : snapshot;
        };
        ModelType.prototype.applySnapshotPostProcessor = function (snapshot) {
            var postProcessor = this.postProcessor;
            if (postProcessor)
                return postProcessor.call(null, snapshot);
            return snapshot;
        };
        ModelType.prototype.getChildType = function (propertyName) {
            assertIsString(propertyName, 1);
            return this.properties[propertyName];
        };
        ModelType.prototype.isValidSnapshot = function (value, context) {
            var _this = this;
            var snapshot = this.applySnapshotPreProcessor(value);
            if (!isPlainObject(snapshot)) {
                return typeCheckFailure(context, snapshot, "Value is not a plain object");
            }
            return flattenTypeErrors(this.propertyNames.map(function (key) {
                return _this.properties[key].validate(snapshot[key], getContextForPath(context, key, _this.properties[key]));
            }));
        };
        ModelType.prototype.forAllProps = function (fn) {
            var _this = this;
            this.propertyNames.forEach(function (key) { return fn(key, _this.properties[key]); });
        };
        ModelType.prototype.describe = function () {
            var _this = this;
            // optimization: cache
            return ("{ " +
                this.propertyNames.map(function (key) { return key + ": " + _this.properties[key].describe(); }).join("; ") +
                " }");
        };
        ModelType.prototype.getDefaultSnapshot = function () {
            return EMPTY_OBJECT;
        };
        ModelType.prototype.removeChild = function (node, subpath) {
            node.storedValue[subpath] = undefined;
        };
        __decorate([
            action
        ], ModelType.prototype, "applySnapshot", null);
        return ModelType;
    }(ComplexType));
    /**
     * `types.model` - Creates a new model type by providing a name, properties, volatile state and actions.
     *
     * See the [model type](https://github.com/mobxjs/mobx-state-tree#creating-models) description or the [getting started](https://github.com/mobxjs/mobx-state-tree/blob/master/docs/getting-started.md#getting-started-1) tutorial.
     */
    function model$2() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var name = typeof args[0] === "string" ? args.shift() : "AnonymousModel";
        var properties = args.shift() || {};
        return new ModelType({ name: name, properties: properties });
    }
    /**
     * `types.compose` - Composes a new model from one or more existing model types.
     * This method can be invoked in two forms:
     * Given 2 or more model types, the types are composed into a new Type.
     * Given first parameter as a string and 2 or more model types,
     * the types are composed into a new Type with the given name
     */
    function compose() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        // TODO: just join the base type names if no name is provided
        var hasTypename = typeof args[0] === "string";
        var typeName = hasTypename ? args[0] : "AnonymousModel";
        if (hasTypename) {
            args.shift();
        }
        // check all parameters
        if (devMode()) {
            args.forEach(function (type, i) {
                assertArg(type, isModelType, "mobx-state-tree model type", hasTypename ? i + 2 : i + 1);
            });
        }
        return args
            .reduce(function (prev, cur) {
            return prev.cloneAndEnhance({
                name: prev.name + "_" + cur.name,
                properties: cur.properties,
                initializers: cur.initializers,
                preProcessor: function (snapshot) {
                    return cur.applySnapshotPreProcessor(prev.applySnapshotPreProcessor(snapshot));
                },
                postProcessor: function (snapshot) {
                    return cur.applySnapshotPostProcessor(prev.applySnapshotPostProcessor(snapshot));
                }
            });
        })
            .named(typeName);
    }
    /**
     * Returns if a given value represents a model type.
     *
     * @param type
     * @returns
     */
    function isModelType(type) {
        return isType(type) && (type.flags & TypeFlags.Object) > 0;
    }

    // TODO: implement CoreType using types.custom ?
    /**
     * @internal
     * @hidden
     */
    var CoreType = /** @class */ (function (_super) {
        __extends$1(CoreType, _super);
        function CoreType(name, flags, checker, initializer) {
            if (initializer === void 0) { initializer = identity$1; }
            var _this = _super.call(this, name) || this;
            _this.flags = flags;
            _this.checker = checker;
            _this.initializer = initializer;
            _this.flags = flags;
            return _this;
        }
        CoreType.prototype.describe = function () {
            return this.name;
        };
        CoreType.prototype.instantiate = function (parent, subpath, environment, initialValue) {
            return createScalarNode(this, parent, subpath, environment, initialValue);
        };
        CoreType.prototype.createNewInstance = function (snapshot) {
            return this.initializer(snapshot);
        };
        CoreType.prototype.isValidSnapshot = function (value, context) {
            if (isPrimitive$4(value) && this.checker(value)) {
                return typeCheckSuccess();
            }
            var typeName = this.name === "Date" ? "Date or a unix milliseconds timestamp" : this.name;
            return typeCheckFailure(context, value, "Value is not a " + typeName);
        };
        return CoreType;
    }(SimpleType));
    /**
     * `types.string` - Creates a type that can only contain a string value.
     * This type is used for string values by default
     *
     * Example:
     * ```ts
     * const Person = types.model({
     *   firstName: types.string,
     *   lastName: "Doe"
     * })
     * ```
     */
    // tslint:disable-next-line:variable-name
    var string = new CoreType("string", TypeFlags.String, function (v) { return typeof v === "string"; });
    /**
     * `types.number` - Creates a type that can only contain a numeric value.
     * This type is used for numeric values by default
     *
     * Example:
     * ```ts
     * const Vector = types.model({
     *   x: types.number,
     *   y: 1.5
     * })
     * ```
     */
    // tslint:disable-next-line:variable-name
    var number = new CoreType("number", TypeFlags.Number, function (v) { return typeof v === "number"; });
    /**
     * `types.integer` - Creates a type that can only contain an integer value.
     * This type is used for integer values by default
     *
     * Example:
     * ```ts
     * const Size = types.model({
     *   width: types.integer,
     *   height: 10
     * })
     * ```
     */
    // tslint:disable-next-line:variable-name
    var integer = new CoreType("integer", TypeFlags.Integer, function (v) { return isInteger(v); });
    /**
     * `types.boolean` - Creates a type that can only contain a boolean value.
     * This type is used for boolean values by default
     *
     * Example:
     * ```ts
     * const Thing = types.model({
     *   isCool: types.boolean,
     *   isAwesome: false
     * })
     * ```
     */
    // tslint:disable-next-line:variable-name
    var boolean = new CoreType("boolean", TypeFlags.Boolean, function (v) { return typeof v === "boolean"; });
    /**
     * `types.null` - The type of the value `null`
     */
    var nullType = new CoreType("null", TypeFlags.Null, function (v) { return v === null; });
    /**
     * `types.undefined` - The type of the value `undefined`
     */
    var undefinedType = new CoreType("undefined", TypeFlags.Undefined, function (v) { return v === undefined; });
    var _DatePrimitive = new CoreType("Date", TypeFlags.Date, function (v) { return typeof v === "number" || v instanceof Date; }, function (v) { return (v instanceof Date ? v : new Date(v)); });
    _DatePrimitive.getSnapshot = function (node) {
        return node.storedValue.getTime();
    };
    /**
     * `types.Date` - Creates a type that can only contain a javascript Date value.
     *
     * Example:
     * ```ts
     * const LogLine = types.model({
     *   timestamp: types.Date,
     * })
     *
     * LogLine.create({ timestamp: new Date() })
     * ```
     */
    var DatePrimitive = _DatePrimitive;
    /**
     * @internal
     * @hidden
     */
    function getPrimitiveFactoryFromValue(value) {
        switch (typeof value) {
            case "string":
                return string;
            case "number":
                return number; // In the future, isInteger(value) ? integer : number would be interesting, but would be too breaking for now
            case "boolean":
                return boolean;
            case "object":
                if (value instanceof Date)
                    return DatePrimitive;
        }
        throw fail$1("Cannot determine primitive type from value " + value);
    }
    /**
     * Returns if a given value represents a primitive type.
     *
     * @param type
     * @returns
     */
    function isPrimitiveType(type) {
        return (isType(type) &&
            (type.flags &
                (TypeFlags.String |
                    TypeFlags.Number |
                    TypeFlags.Integer |
                    TypeFlags.Boolean |
                    TypeFlags.Date)) >
                0);
    }

    /**
     * @internal
     * @hidden
     */
    var Literal = /** @class */ (function (_super) {
        __extends$1(Literal, _super);
        function Literal(value) {
            var _this = _super.call(this, JSON.stringify(value)) || this;
            _this.flags = TypeFlags.Literal;
            _this.value = value;
            return _this;
        }
        Literal.prototype.instantiate = function (parent, subpath, environment, initialValue) {
            return createScalarNode(this, parent, subpath, environment, initialValue);
        };
        Literal.prototype.describe = function () {
            return JSON.stringify(this.value);
        };
        Literal.prototype.isValidSnapshot = function (value, context) {
            if (isPrimitive$4(value) && value === this.value) {
                return typeCheckSuccess();
            }
            return typeCheckFailure(context, value, "Value is not a literal " + JSON.stringify(this.value));
        };
        return Literal;
    }(SimpleType));
    /**
     * `types.literal` - The literal type will return a type that will match only the exact given type.
     * The given value must be a primitive, in order to be serialized to a snapshot correctly.
     * You can use literal to match exact strings for example the exact male or female string.
     *
     * Example:
     * ```ts
     * const Person = types.model({
     *     name: types.string,
     *     gender: types.union(types.literal('male'), types.literal('female'))
     * })
     * ```
     *
     * @param value The value to use in the strict equal check
     * @returns
     */
    function literal(value) {
        // check that the given value is a primitive
        assertArg(value, isPrimitive$4, "primitive", 1);
        return new Literal(value);
    }
    /**
     * Returns if a given value represents a literal type.
     *
     * @param type
     * @returns
     */
    function isLiteralType(type) {
        return isType(type) && (type.flags & TypeFlags.Literal) > 0;
    }

    var Refinement = /** @class */ (function (_super) {
        __extends$1(Refinement, _super);
        function Refinement(name, _subtype, _predicate, _message) {
            var _this = _super.call(this, name) || this;
            _this._subtype = _subtype;
            _this._predicate = _predicate;
            _this._message = _message;
            return _this;
        }
        Object.defineProperty(Refinement.prototype, "flags", {
            get: function () {
                return this._subtype.flags | TypeFlags.Refinement;
            },
            enumerable: true,
            configurable: true
        });
        Refinement.prototype.describe = function () {
            return this.name;
        };
        Refinement.prototype.instantiate = function (parent, subpath, environment, initialValue) {
            // create the child type
            return this._subtype.instantiate(parent, subpath, environment, initialValue);
        };
        Refinement.prototype.isAssignableFrom = function (type) {
            return this._subtype.isAssignableFrom(type);
        };
        Refinement.prototype.isValidSnapshot = function (value, context) {
            var subtypeErrors = this._subtype.validate(value, context);
            if (subtypeErrors.length > 0)
                return subtypeErrors;
            var snapshot = isStateTreeNode(value) ? getStateTreeNode(value).snapshot : value;
            if (!this._predicate(snapshot)) {
                return typeCheckFailure(context, value, this._message(value));
            }
            return typeCheckSuccess();
        };
        Refinement.prototype.reconcile = function (current, newValue, parent, subpath) {
            return this._subtype.reconcile(current, newValue, parent, subpath);
        };
        Refinement.prototype.getSubTypes = function () {
            return this._subtype;
        };
        return Refinement;
    }(BaseType));
    /**
     * `types.refinement` - Creates a type that is more specific than the base type, e.g. `types.refinement(types.string, value => value.length > 5)` to create a type of strings that can only be longer then 5.
     *
     * @param name
     * @param type
     * @param predicate
     * @returns
     */
    function refinement() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var name = typeof args[0] === "string" ? args.shift() : isType(args[0]) ? args[0].name : null;
        var type = args[0];
        var predicate = args[1];
        var message = args[2]
            ? args[2]
            : function (v) { return "Value does not respect the refinement predicate"; };
        // ensures all parameters are correct
        assertIsType(type, [1, 2]);
        assertIsString(name, 1);
        assertIsFunction(predicate, [2, 3]);
        assertIsFunction(message, [3, 4]);
        return new Refinement(name, type, predicate, message);
    }
    /**
     * Returns if a given value is a refinement type.
     *
     * @param type
     * @returns
     */
    function isRefinementType(type) {
        return (type.flags & TypeFlags.Refinement) > 0;
    }

    /**
     * `types.enumeration` - Can be used to create an string based enumeration.
     * (note: this methods is just sugar for a union of string literals)
     *
     * Example:
     * ```ts
     * const TrafficLight = types.model({
     *   color: types.enumeration("Color", ["Red", "Orange", "Green"])
     * })
     * ```
     *
     * @param name descriptive name of the enumeration (optional)
     * @param options possible values this enumeration can have
     * @returns
     */
    function enumeration(name, options) {
        var realOptions = typeof name === "string" ? options : name;
        // check all options
        if (devMode()) {
            realOptions.forEach(function (option, i) {
                assertIsString(option, i + 1);
            });
        }
        var type = union.apply(void 0, __spread(realOptions.map(function (option) { return literal("" + option); })));
        if (typeof name === "string")
            type.name = name;
        return type;
    }

    /**
     * @internal
     * @hidden
     */
    var Union = /** @class */ (function (_super) {
        __extends$1(Union, _super);
        function Union(name, _types, options) {
            var _this = _super.call(this, name) || this;
            _this._types = _types;
            _this._eager = true;
            options = __assign$4({ eager: true, dispatcher: undefined }, options);
            _this._dispatcher = options.dispatcher;
            if (!options.eager)
                _this._eager = false;
            return _this;
        }
        Object.defineProperty(Union.prototype, "flags", {
            get: function () {
                var result = TypeFlags.Union;
                this._types.forEach(function (type) {
                    result |= type.flags;
                });
                return result;
            },
            enumerable: true,
            configurable: true
        });
        Union.prototype.isAssignableFrom = function (type) {
            return this._types.some(function (subType) { return subType.isAssignableFrom(type); });
        };
        Union.prototype.describe = function () {
            return "(" + this._types.map(function (factory) { return factory.describe(); }).join(" | ") + ")";
        };
        Union.prototype.instantiate = function (parent, subpath, environment, initialValue) {
            var type = this.determineType(initialValue, undefined);
            if (!type)
                throw fail$1("No matching type for union " + this.describe()); // can happen in prod builds
            return type.instantiate(parent, subpath, environment, initialValue);
        };
        Union.prototype.reconcile = function (current, newValue, parent, subpath) {
            var type = this.determineType(newValue, current.type);
            if (!type)
                throw fail$1("No matching type for union " + this.describe()); // can happen in prod builds
            return type.reconcile(current, newValue, parent, subpath);
        };
        Union.prototype.determineType = function (value, reconcileCurrentType) {
            // try the dispatcher, if defined
            if (this._dispatcher) {
                return this._dispatcher(value);
            }
            // find the most accomodating type
            // if we are using reconciliation try the current node type first (fix for #1045)
            if (reconcileCurrentType) {
                if (reconcileCurrentType.is(value)) {
                    return reconcileCurrentType;
                }
                return this._types.filter(function (t) { return t !== reconcileCurrentType; }).find(function (type) { return type.is(value); });
            }
            else {
                return this._types.find(function (type) { return type.is(value); });
            }
        };
        Union.prototype.isValidSnapshot = function (value, context) {
            if (this._dispatcher) {
                return this._dispatcher(value).validate(value, context);
            }
            var allErrors = [];
            var applicableTypes = 0;
            for (var i = 0; i < this._types.length; i++) {
                var type = this._types[i];
                var errors = type.validate(value, context);
                if (errors.length === 0) {
                    if (this._eager)
                        return typeCheckSuccess();
                    else
                        applicableTypes++;
                }
                else {
                    allErrors.push(errors);
                }
            }
            if (applicableTypes === 1)
                return typeCheckSuccess();
            return typeCheckFailure(context, value, "No type is applicable for the union").concat(flattenTypeErrors(allErrors));
        };
        Union.prototype.getSubTypes = function () {
            return this._types;
        };
        return Union;
    }(BaseType));
    /**
     * `types.union` - Create a union of multiple types. If the correct type cannot be inferred unambiguously from a snapshot, provide a dispatcher function of the form `(snapshot) => Type`.
     *
     * @param optionsOrType
     * @param otherTypes
     * @returns
     */
    function union(optionsOrType) {
        var otherTypes = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            otherTypes[_i - 1] = arguments[_i];
        }
        var options = isType(optionsOrType) ? undefined : optionsOrType;
        var types = isType(optionsOrType) ? __spread([optionsOrType], otherTypes) : otherTypes;
        var name = "(" + types.map(function (type) { return type.name; }).join(" | ") + ")";
        // check all options
        if (devMode()) {
            if (options) {
                assertArg(options, function (o) { return isPlainObject(o); }, "object { eager?: boolean, dispatcher?: Function }", 1);
            }
            types.forEach(function (type, i) {
                assertIsType(type, options ? i + 2 : i + 1);
            });
        }
        return new Union(name, types, options);
    }
    /**
     * Returns if a given value represents a union type.
     *
     * @param type
     * @returns
     */
    function isUnionType(type) {
        return (type.flags & TypeFlags.Union) > 0;
    }

    /**
     * @hidden
     * @internal
     */
    var OptionalValue = /** @class */ (function (_super) {
        __extends$1(OptionalValue, _super);
        function OptionalValue(_subtype, _defaultValue, optionalValues) {
            var _this = _super.call(this, _subtype.name) || this;
            _this._subtype = _subtype;
            _this._defaultValue = _defaultValue;
            _this.optionalValues = optionalValues;
            return _this;
        }
        Object.defineProperty(OptionalValue.prototype, "flags", {
            get: function () {
                return this._subtype.flags | TypeFlags.Optional;
            },
            enumerable: true,
            configurable: true
        });
        OptionalValue.prototype.describe = function () {
            return this._subtype.describe() + "?";
        };
        OptionalValue.prototype.instantiate = function (parent, subpath, environment, initialValue) {
            if (this.optionalValues.indexOf(initialValue) >= 0) {
                var defaultInstanceOrSnapshot = this.getDefaultInstanceOrSnapshot();
                return this._subtype.instantiate(parent, subpath, environment, defaultInstanceOrSnapshot);
            }
            return this._subtype.instantiate(parent, subpath, environment, initialValue);
        };
        OptionalValue.prototype.reconcile = function (current, newValue, parent, subpath) {
            return this._subtype.reconcile(current, this.optionalValues.indexOf(newValue) < 0 && this._subtype.is(newValue)
                ? newValue
                : this.getDefaultInstanceOrSnapshot(), parent, subpath);
        };
        OptionalValue.prototype.getDefaultInstanceOrSnapshot = function () {
            var defaultInstanceOrSnapshot = typeof this._defaultValue === "function"
                ? this._defaultValue()
                : this._defaultValue;
            // while static values are already snapshots and checked on types.optional
            // generator functions must always be rechecked just in case
            if (typeof this._defaultValue === "function") {
                typecheckInternal(this, defaultInstanceOrSnapshot);
            }
            return defaultInstanceOrSnapshot;
        };
        OptionalValue.prototype.isValidSnapshot = function (value, context) {
            // defaulted values can be skipped
            if (this.optionalValues.indexOf(value) >= 0) {
                return typeCheckSuccess();
            }
            // bounce validation to the sub-type
            return this._subtype.validate(value, context);
        };
        OptionalValue.prototype.isAssignableFrom = function (type) {
            return this._subtype.isAssignableFrom(type);
        };
        OptionalValue.prototype.getSubTypes = function () {
            return this._subtype;
        };
        return OptionalValue;
    }(BaseType));
    function checkOptionalPreconditions(type, defaultValueOrFunction) {
        // make sure we never pass direct instances
        if (typeof defaultValueOrFunction !== "function" && isStateTreeNode(defaultValueOrFunction)) {
            throw fail$1("default value cannot be an instance, pass a snapshot or a function that creates an instance/snapshot instead");
        }
        assertIsType(type, 1);
        if (devMode()) {
            // we only check default values if they are passed directly
            // if they are generator functions they will be checked once they are generated
            // we don't check generator function results here to avoid generating a node just for type-checking purposes
            // which might generate side-effects
            if (typeof defaultValueOrFunction !== "function") {
                typecheckInternal(type, defaultValueOrFunction);
            }
        }
    }
    /**
     * `types.optional` - Can be used to create a property with a default value.
     *
     * Depending on the third argument (`optionalValues`) there are two ways of operation:
     * - If the argument is not provided, then if a value is not provided in the snapshot (`undefined` or missing),
     *   it will default to the provided `defaultValue`
     * - If the argument is provided, then if the value in the snapshot matches one of the optional values inside the array then it will
     *   default to the provided `defaultValue`. Additionally, if one of the optional values inside the array is `undefined` then a missing
     *   property is also valid.
     *
     *   Note that it is also possible to include values of the same type as the intended subtype as optional values,
     *   in this case the optional value will be transformed into the `defaultValue` (e.g. `types.optional(types.string, "unnamed", [undefined, ""])`
     *   will transform the snapshot values `undefined` (and therefore missing) and empty strings into the string `"unnamed"` when it gets
     *   instantiated).
     *
     * If `defaultValue` is a function, the function will be invoked for every new instance.
     * Applying a snapshot in which the optional value is one of the optional values (or `undefined`/_not_ present if none are provided) causes the
     * value to be reset.
     *
     * Example:
     * ```ts
     * const Todo = types.model({
     *   title: types.string,
     *   subtitle1: types.optional(types.string, "", [null]),
     *   subtitle2: types.optional(types.string, "", [null, undefined]),
     *   done: types.optional(types.boolean, false),
     *   created: types.optional(types.Date, () => new Date()),
     * })
     *
     * // if done is missing / undefined it will become false
     * // if created is missing / undefined it will get a freshly generated timestamp
     * // if subtitle1 is null it will default to "", but it cannot be missing or undefined
     * // if subtitle2 is null or undefined it will default to ""; since it can be undefined it can also be missing
     * const todo = Todo.create({ title: "Get coffee", subtitle1: null })
     * ```
     *
     * @param type
     * @param defaultValueOrFunction
     * @param optionalValues an optional array with zero or more primitive values (string, number, boolean, null or undefined)
     *                       that will be converted into the default. `[ undefined ]` is assumed when none is provided
     * @returns
     */
    function optional(type, defaultValueOrFunction, optionalValues) {
        checkOptionalPreconditions(type, defaultValueOrFunction);
        return new OptionalValue(type, defaultValueOrFunction, optionalValues ? optionalValues : undefinedAsOptionalValues);
    }
    var undefinedAsOptionalValues = [undefined];
    /**
     * Returns if a value represents an optional type.
     *
     * @template IT
     * @param type
     * @returns
     */
    function isOptionalType(type) {
        return isType(type) && (type.flags & TypeFlags.Optional) > 0;
    }

    var optionalUndefinedType = optional(undefinedType, undefined);
    var optionalNullType = optional(nullType, null);
    /**
     * `types.maybe` - Maybe will make a type nullable, and also optional.
     * The value `undefined` will be used to represent nullability.
     *
     * @param type
     * @returns
     */
    function maybe(type) {
        assertIsType(type, 1);
        return union(type, optionalUndefinedType);
    }
    /**
     * `types.maybeNull` - Maybe will make a type nullable, and also optional.
     * The value `null` will be used to represent no value.
     *
     * @param type
     * @returns
     */
    function maybeNull(type) {
        assertIsType(type, 1);
        return union(type, optionalNullType);
    }

    var Late = /** @class */ (function (_super) {
        __extends$1(Late, _super);
        function Late(name, _definition) {
            var _this = _super.call(this, name) || this;
            _this._definition = _definition;
            return _this;
        }
        Object.defineProperty(Late.prototype, "flags", {
            get: function () {
                return (this._subType ? this._subType.flags : 0) | TypeFlags.Late;
            },
            enumerable: true,
            configurable: true
        });
        Late.prototype.getSubType = function (mustSucceed) {
            if (!this._subType) {
                var t = undefined;
                try {
                    t = this._definition();
                }
                catch (e) {
                    if (e instanceof ReferenceError)
                        // can happen in strict ES5 code when a definition is self refering
                        t = undefined;
                    else
                        throw e;
                }
                if (mustSucceed && t === undefined)
                    throw fail$1("Late type seems to be used too early, the definition (still) returns undefined");
                if (t) {
                    if (devMode() && !isType(t))
                        throw fail$1("Failed to determine subtype, make sure types.late returns a type definition.");
                    this._subType = t;
                }
            }
            return this._subType;
        };
        Late.prototype.instantiate = function (parent, subpath, environment, initialValue) {
            return this.getSubType(true).instantiate(parent, subpath, environment, initialValue);
        };
        Late.prototype.reconcile = function (current, newValue, parent, subpath) {
            return this.getSubType(true).reconcile(current, newValue, parent, subpath);
        };
        Late.prototype.describe = function () {
            var t = this.getSubType(false);
            return t ? t.name : "<uknown late type>";
        };
        Late.prototype.isValidSnapshot = function (value, context) {
            var t = this.getSubType(false);
            if (!t) {
                // See #916; the variable the definition closure is pointing to wasn't defined yet, so can't be evaluted yet here
                return typeCheckSuccess();
            }
            return t.validate(value, context);
        };
        Late.prototype.isAssignableFrom = function (type) {
            var t = this.getSubType(false);
            return t ? t.isAssignableFrom(type) : false;
        };
        Late.prototype.getSubTypes = function () {
            var subtype = this.getSubType(false);
            return subtype ? subtype : cannotDetermineSubtype;
        };
        return Late;
    }(BaseType));
    /**
     * `types.late` - Defines a type that gets implemented later. This is useful when you have to deal with circular dependencies.
     * Please notice that when defining circular dependencies TypeScript isn't smart enough to inference them.
     *
     * Example:
     * ```ts
     *   // TypeScript isn't smart enough to infer self referencing types.
     *  const Node = types.model({
     *       children: types.array(types.late((): IAnyModelType => Node)) // then typecast each array element to Instance<typeof Node>
     *  })
     * ```
     *
     * @param name The name to use for the type that will be returned.
     * @param type A function that returns the type that will be defined.
     * @returns
     */
    function late(nameOrType, maybeType) {
        var name = typeof nameOrType === "string" ? nameOrType : "late(" + nameOrType.toString() + ")";
        var type = typeof nameOrType === "string" ? maybeType : nameOrType;
        // checks that the type is actually a late type
        if (devMode()) {
            if (!(typeof type === "function" && type.length === 0))
                throw fail$1("Invalid late type, expected a function with zero arguments that returns a type, got: " +
                    type);
        }
        return new Late(name, type);
    }
    /**
     * Returns if a given value represents a late type.
     *
     * @param type
     * @returns
     */
    function isLateType(type) {
        return isType(type) && (type.flags & TypeFlags.Late) > 0;
    }

    /**
     * @internal
     * @hidden
     */
    var Frozen = /** @class */ (function (_super) {
        __extends$1(Frozen, _super);
        function Frozen(subType) {
            var _this = _super.call(this, subType ? "frozen(" + subType.name + ")" : "frozen") || this;
            _this.subType = subType;
            _this.flags = TypeFlags.Frozen;
            return _this;
        }
        Frozen.prototype.describe = function () {
            return "<any immutable value>";
        };
        Frozen.prototype.instantiate = function (parent, subpath, environment, value) {
            // create the node
            return createScalarNode(this, parent, subpath, environment, deepFreeze(value));
        };
        Frozen.prototype.isValidSnapshot = function (value, context) {
            if (!isSerializable(value)) {
                return typeCheckFailure(context, value, "Value is not serializable and cannot be frozen");
            }
            if (this.subType)
                return this.subType.validate(value, context);
            return typeCheckSuccess();
        };
        return Frozen;
    }(SimpleType));
    var untypedFrozenInstance = new Frozen();
    /**
     * `types.frozen` - Frozen can be used to store any value that is serializable in itself (that is valid JSON).
     * Frozen values need to be immutable or treated as if immutable. They need be serializable as well.
     * Values stored in frozen will snapshotted as-is by MST, and internal changes will not be tracked.
     *
     * This is useful to store complex, but immutable values like vectors etc. It can form a powerful bridge to parts of your application that should be immutable, or that assume data to be immutable.
     *
     * Note: if you want to store free-form state that is mutable, or not serializeable, consider using volatile state instead.
     *
     * Frozen properties can be defined in three different ways
     * 1. `types.frozen(SubType)` - provide a valid MST type and frozen will check if the provided data conforms the snapshot for that type
     * 2. `types.frozen({ someDefaultValue: true})` - provide a primitive value, object or array, and MST will infer the type from that object, and also make it the default value for the field
     * 3. `types.frozen<TypeScriptType>()` - provide a typescript type, to help in strongly typing the field (design time only)
     *
     * Example:
     * ```ts
     * const GameCharacter = types.model({
     *   name: string,
     *   location: types.frozen({ x: 0, y: 0})
     * })
     *
     * const hero = GameCharacter.create({
     *   name: "Mario",
     *   location: { x: 7, y: 4 }
     * })
     *
     * hero.location = { x: 10, y: 2 } // OK
     * hero.location.x = 7 // Not ok!
     * ```
     *
     * ```ts
     * type Point = { x: number, y: number }
     *    const Mouse = types.model({
     *         loc: types.frozen<Point>()
     *    })
     * ```
     *
     * @param defaultValueOrType
     * @returns
     */
    function frozen(arg) {
        if (arguments.length === 0)
            return untypedFrozenInstance;
        else if (isType(arg))
            return new Frozen(arg);
        else
            return optional(untypedFrozenInstance, arg);
    }
    /**
     * Returns if a given value represents a frozen type.
     *
     * @param type
     * @returns
     */
    function isFrozenType(type) {
        return isType(type) && (type.flags & TypeFlags.Frozen) > 0;
    }

    function getInvalidationCause(hook) {
        switch (hook) {
            case Hook.beforeDestroy:
                return "destroy";
            case Hook.beforeDetach:
                return "detach";
            default:
                return undefined;
        }
    }
    var StoredReference = /** @class */ (function () {
        function StoredReference(value, targetType) {
            this.targetType = targetType;
            if (isValidIdentifier(value)) {
                this.identifier = value;
            }
            else if (isStateTreeNode(value)) {
                var targetNode = getStateTreeNode(value);
                if (!targetNode.identifierAttribute)
                    throw fail$1("Can only store references with a defined identifier attribute.");
                var id = targetNode.unnormalizedIdentifier;
                if (id === null || id === undefined) {
                    throw fail$1("Can only store references to tree nodes with a defined identifier.");
                }
                this.identifier = id;
            }
            else {
                throw fail$1("Can only store references to tree nodes or identifiers, got: '" + value + "'");
            }
        }
        StoredReference.prototype.updateResolvedReference = function (node) {
            var normalizedId = normalizeIdentifier(this.identifier);
            var root = node.root;
            var lastCacheModification = root.identifierCache.getLastCacheModificationPerId(normalizedId);
            if (!this.resolvedReference ||
                this.resolvedReference.lastCacheModification !== lastCacheModification) {
                var targetType = this.targetType;
                // reference was initialized with the identifier of the target
                var target = root.identifierCache.resolve(targetType, normalizedId);
                if (!target) {
                    throw new InvalidReferenceError("[mobx-state-tree] Failed to resolve reference '" + this.identifier + "' to type '" + this.targetType.name + "' (from node: " + node.path + ")");
                }
                this.resolvedReference = {
                    node: target,
                    lastCacheModification: lastCacheModification
                };
            }
        };
        Object.defineProperty(StoredReference.prototype, "resolvedValue", {
            get: function () {
                this.updateResolvedReference(this.node);
                return this.resolvedReference.node.value;
            },
            enumerable: true,
            configurable: true
        });
        return StoredReference;
    }());
    /**
     * @internal
     * @hidden
     */
    var InvalidReferenceError = /** @class */ (function (_super) {
        __extends$1(InvalidReferenceError, _super);
        function InvalidReferenceError(m) {
            var _this = _super.call(this, m) || this;
            Object.setPrototypeOf(_this, InvalidReferenceError.prototype);
            return _this;
        }
        return InvalidReferenceError;
    }(Error));
    /**
     * @internal
     * @hidden
     */
    var BaseReferenceType = /** @class */ (function (_super) {
        __extends$1(BaseReferenceType, _super);
        function BaseReferenceType(targetType, onInvalidated) {
            var _this = _super.call(this, "reference(" + targetType.name + ")") || this;
            _this.targetType = targetType;
            _this.onInvalidated = onInvalidated;
            _this.flags = TypeFlags.Reference;
            return _this;
        }
        BaseReferenceType.prototype.describe = function () {
            return this.name;
        };
        BaseReferenceType.prototype.isAssignableFrom = function (type) {
            return this.targetType.isAssignableFrom(type);
        };
        BaseReferenceType.prototype.isValidSnapshot = function (value, context) {
            return isValidIdentifier(value)
                ? typeCheckSuccess()
                : typeCheckFailure(context, value, "Value is not a valid identifier, which is a string or a number");
        };
        BaseReferenceType.prototype.fireInvalidated = function (cause, storedRefNode, referenceId, refTargetNode) {
            // to actually invalidate a reference we need an alive parent,
            // since it is a scalar value (immutable-ish) and we need to change it
            // from the parent
            var storedRefParentNode = storedRefNode.parent;
            if (!storedRefParentNode || !storedRefParentNode.isAlive) {
                return;
            }
            var storedRefParentValue = storedRefParentNode.storedValue;
            if (!storedRefParentValue) {
                return;
            }
            this.onInvalidated({
                cause: cause,
                parent: storedRefParentValue,
                invalidTarget: refTargetNode ? refTargetNode.storedValue : undefined,
                invalidId: referenceId,
                replaceRef: function (newRef) {
                    applyPatch(storedRefNode.root.storedValue, {
                        op: "replace",
                        value: newRef,
                        path: storedRefNode.path
                    });
                },
                removeRef: function () {
                    if (isModelType(storedRefParentNode.type)) {
                        this.replaceRef(undefined);
                    }
                    else {
                        applyPatch(storedRefNode.root.storedValue, {
                            op: "remove",
                            path: storedRefNode.path
                        });
                    }
                }
            });
        };
        BaseReferenceType.prototype.addTargetNodeWatcher = function (storedRefNode, referenceId) {
            var _this = this;
            // this will make sure the target node becomes created
            var refTargetValue = this.getValue(storedRefNode);
            if (!refTargetValue) {
                return undefined;
            }
            var refTargetNode = getStateTreeNode(refTargetValue);
            var hookHandler = function (_, refTargetNodeHook) {
                var cause = getInvalidationCause(refTargetNodeHook);
                if (!cause) {
                    return;
                }
                _this.fireInvalidated(cause, storedRefNode, referenceId, refTargetNode);
            };
            var refTargetDetachHookDisposer = refTargetNode.registerHook(Hook.beforeDetach, hookHandler);
            var refTargetDestroyHookDisposer = refTargetNode.registerHook(Hook.beforeDestroy, hookHandler);
            return function () {
                refTargetDetachHookDisposer();
                refTargetDestroyHookDisposer();
            };
        };
        BaseReferenceType.prototype.watchTargetNodeForInvalidations = function (storedRefNode, identifier, customGetSet) {
            var _this = this;
            if (!this.onInvalidated) {
                return;
            }
            var onRefTargetDestroyedHookDisposer;
            // get rid of the watcher hook when the stored ref node is destroyed
            // detached is ignored since scalar nodes (where the reference resides) cannot be detached
            storedRefNode.registerHook(Hook.beforeDestroy, function () {
                if (onRefTargetDestroyedHookDisposer) {
                    onRefTargetDestroyedHookDisposer();
                }
            });
            var startWatching = function (sync) {
                // re-create hook in case the stored ref gets reattached
                if (onRefTargetDestroyedHookDisposer) {
                    onRefTargetDestroyedHookDisposer();
                }
                // make sure the target node is actually there and initialized
                var storedRefParentNode = storedRefNode.parent;
                var storedRefParentValue = storedRefParentNode && storedRefParentNode.storedValue;
                if (storedRefParentNode && storedRefParentNode.isAlive && storedRefParentValue) {
                    var refTargetNodeExists = void 0;
                    if (customGetSet) {
                        refTargetNodeExists = !!customGetSet.get(identifier, storedRefParentValue);
                    }
                    else {
                        refTargetNodeExists = storedRefNode.root.identifierCache.has(_this.targetType, normalizeIdentifier(identifier));
                    }
                    if (!refTargetNodeExists) {
                        // we cannot change the reference in sync mode
                        // since we are in the middle of a reconciliation/instantiation and the change would be overwritten
                        // for those cases just let the wrong reference be assigned and fail upon usage
                        // (like current references do)
                        // this means that effectively this code will only run when it is created from a snapshot
                        if (!sync) {
                            _this.fireInvalidated("invalidSnapshotReference", storedRefNode, identifier, null);
                        }
                    }
                    else {
                        onRefTargetDestroyedHookDisposer = _this.addTargetNodeWatcher(storedRefNode, identifier);
                    }
                }
            };
            if (storedRefNode.state === NodeLifeCycle.FINALIZED) {
                // already attached, so the whole tree is ready
                startWatching(true);
            }
            else {
                if (!storedRefNode.isRoot) {
                    // start watching once the whole tree is ready
                    storedRefNode.root.registerHook(Hook.afterCreationFinalization, function () {
                        // make sure to attach it so it can start listening
                        if (storedRefNode.parent) {
                            storedRefNode.parent.createObservableInstanceIfNeeded();
                        }
                    });
                }
                // start watching once the node is attached somewhere / parent changes
                storedRefNode.registerHook(Hook.afterAttach, function () {
                    startWatching(false);
                });
            }
        };
        return BaseReferenceType;
    }(SimpleType));
    /**
     * @internal
     * @hidden
     */
    var IdentifierReferenceType = /** @class */ (function (_super) {
        __extends$1(IdentifierReferenceType, _super);
        function IdentifierReferenceType(targetType, onInvalidated) {
            return _super.call(this, targetType, onInvalidated) || this;
        }
        IdentifierReferenceType.prototype.getValue = function (storedRefNode) {
            if (!storedRefNode.isAlive)
                return undefined;
            var storedRef = storedRefNode.storedValue;
            return storedRef.resolvedValue;
        };
        IdentifierReferenceType.prototype.getSnapshot = function (storedRefNode) {
            var ref = storedRefNode.storedValue;
            return ref.identifier;
        };
        IdentifierReferenceType.prototype.instantiate = function (parent, subpath, environment, initialValue) {
            var identifier = isStateTreeNode(initialValue)
                ? getIdentifier(initialValue)
                : initialValue;
            var storedRef = new StoredReference(initialValue, this.targetType);
            var storedRefNode = createScalarNode(this, parent, subpath, environment, storedRef);
            storedRef.node = storedRefNode;
            this.watchTargetNodeForInvalidations(storedRefNode, identifier, undefined);
            return storedRefNode;
        };
        IdentifierReferenceType.prototype.reconcile = function (current, newValue, parent, subpath) {
            if (!current.isDetaching && current.type === this) {
                var compareByValue = isStateTreeNode(newValue);
                var ref = current.storedValue;
                if ((!compareByValue && ref.identifier === newValue) ||
                    (compareByValue && ref.resolvedValue === newValue)) {
                    current.setParent(parent, subpath);
                    return current;
                }
            }
            var newNode = this.instantiate(parent, subpath, undefined, newValue);
            current.die(); // noop if detaching
            return newNode;
        };
        return IdentifierReferenceType;
    }(BaseReferenceType));
    /**
     * @internal
     * @hidden
     */
    var CustomReferenceType = /** @class */ (function (_super) {
        __extends$1(CustomReferenceType, _super);
        function CustomReferenceType(targetType, options, onInvalidated) {
            var _this = _super.call(this, targetType, onInvalidated) || this;
            _this.options = options;
            return _this;
        }
        CustomReferenceType.prototype.getValue = function (storedRefNode) {
            if (!storedRefNode.isAlive)
                return undefined;
            var referencedNode = this.options.get(storedRefNode.storedValue, storedRefNode.parent ? storedRefNode.parent.storedValue : null);
            return referencedNode;
        };
        CustomReferenceType.prototype.getSnapshot = function (storedRefNode) {
            return storedRefNode.storedValue;
        };
        CustomReferenceType.prototype.instantiate = function (parent, subpath, environment, newValue) {
            var identifier = isStateTreeNode(newValue)
                ? this.options.set(newValue, parent ? parent.storedValue : null)
                : newValue;
            var storedRefNode = createScalarNode(this, parent, subpath, environment, identifier);
            this.watchTargetNodeForInvalidations(storedRefNode, identifier, this.options);
            return storedRefNode;
        };
        CustomReferenceType.prototype.reconcile = function (current, newValue, parent, subpath) {
            var newIdentifier = isStateTreeNode(newValue)
                ? this.options.set(newValue, current ? current.storedValue : null)
                : newValue;
            if (!current.isDetaching &&
                current.type === this &&
                current.storedValue === newIdentifier) {
                current.setParent(parent, subpath);
                return current;
            }
            var newNode = this.instantiate(parent, subpath, undefined, newIdentifier);
            current.die(); // noop if detaching
            return newNode;
        };
        return CustomReferenceType;
    }(BaseReferenceType));
    /**
     * `types.reference` - Creates a reference to another type, which should have defined an identifier.
     * See also the [reference and identifiers](https://github.com/mobxjs/mobx-state-tree#references-and-identifiers) section.
     */
    function reference(subType, options) {
        assertIsType(subType, 1);
        if (devMode()) {
            if (arguments.length === 2 && typeof arguments[1] === "string") {
                // istanbul ignore next
                throw fail$1("References with base path are no longer supported. Please remove the base path.");
            }
        }
        var getSetOptions = options ? options : undefined;
        var onInvalidated = options
            ? options.onInvalidated
            : undefined;
        if (getSetOptions && (getSetOptions.get || getSetOptions.set)) {
            if (devMode()) {
                if (!getSetOptions.get || !getSetOptions.set) {
                    throw fail$1("reference options must either contain both a 'get' and a 'set' method or none of them");
                }
            }
            return new CustomReferenceType(subType, {
                get: getSetOptions.get,
                set: getSetOptions.set
            }, onInvalidated);
        }
        else {
            return new IdentifierReferenceType(subType, onInvalidated);
        }
    }
    /**
     * Returns if a given value represents a reference type.
     *
     * @param type
     * @returns
     */
    function isReferenceType(type) {
        return (type.flags & TypeFlags.Reference) > 0;
    }
    /**
     * `types.safeReference` - A safe reference is like a standard reference, except that it accepts the undefined value by default
     * and automatically sets itself to undefined (when the parent is a model) / removes itself from arrays and maps
     * when the reference it is pointing to gets detached/destroyed.
     *
     * The optional options parameter object accepts a parameter named `acceptsUndefined`, which is set to true by default, so it is suitable
     * for model properties.
     * When used inside collections (arrays/maps), it is recommended to set this option to false so it can't take undefined as value,
     * which is usually the desired in those cases.
     *
     * Strictly speaking it is a `types.maybe(types.reference(X))` (when `acceptsUndefined` is set to true, the default) and
     * `types.reference(X)` (when `acceptsUndefined` is set to false), both of them with a customized `onInvalidated` option.
     *
     * @param subType
     * @param options
     * @returns
     */
    function safeReference(subType, options) {
        var refType = reference(subType, __assign$4({}, options, { onInvalidated: function (ev) {
                ev.removeRef();
            } }));
        if (options && options.acceptsUndefined === false) {
            return refType;
        }
        else {
            return maybe(refType);
        }
    }

    var BaseIdentifierType = /** @class */ (function (_super) {
        __extends$1(BaseIdentifierType, _super);
        function BaseIdentifierType(name, validType) {
            var _this = _super.call(this, name) || this;
            _this.validType = validType;
            _this.flags = TypeFlags.Identifier;
            return _this;
        }
        BaseIdentifierType.prototype.instantiate = function (parent, subpath, environment, initialValue) {
            if (!parent || !(parent.type instanceof ModelType))
                throw fail$1("Identifier types can only be instantiated as direct child of a model type");
            return createScalarNode(this, parent, subpath, environment, initialValue);
        };
        BaseIdentifierType.prototype.reconcile = function (current, newValue, parent, subpath) {
            // we don't consider detaching here since identifier are scalar nodes, and scalar nodes cannot be detached
            if (current.storedValue !== newValue)
                throw fail$1("Tried to change identifier from '" + current.storedValue + "' to '" + newValue + "'. Changing identifiers is not allowed.");
            current.setParent(parent, subpath);
            return current;
        };
        BaseIdentifierType.prototype.isValidSnapshot = function (value, context) {
            if (typeof value !== this.validType) {
                return typeCheckFailure(context, value, "Value is not a valid " + this.describe() + ", expected a " + this.validType);
            }
            return typeCheckSuccess();
        };
        return BaseIdentifierType;
    }(SimpleType));
    /**
     * @internal
     * @hidden
     */
    var IdentifierType = /** @class */ (function (_super) {
        __extends$1(IdentifierType, _super);
        function IdentifierType() {
            var _this = _super.call(this, "identifier", "string") || this;
            _this.flags = TypeFlags.Identifier;
            return _this;
        }
        IdentifierType.prototype.describe = function () {
            return "identifier";
        };
        return IdentifierType;
    }(BaseIdentifierType));
    /**
     * @internal
     * @hidden
     */
    var IdentifierNumberType = /** @class */ (function (_super) {
        __extends$1(IdentifierNumberType, _super);
        function IdentifierNumberType() {
            return _super.call(this, "identifierNumber", "number") || this;
        }
        IdentifierNumberType.prototype.getSnapshot = function (node) {
            return node.storedValue;
        };
        IdentifierNumberType.prototype.describe = function () {
            return "identifierNumber";
        };
        return IdentifierNumberType;
    }(BaseIdentifierType));
    /**
     * `types.identifier` - Identifiers are used to make references, lifecycle events and reconciling works.
     * Inside a state tree, for each type can exist only one instance for each given identifier.
     * For example there couldn't be 2 instances of user with id 1. If you need more, consider using references.
     * Identifier can be used only as type property of a model.
     * This type accepts as parameter the value type of the identifier field that can be either string or number.
     *
     * Example:
     * ```ts
     *  const Todo = types.model("Todo", {
     *      id: types.identifier,
     *      title: types.string
     *  })
     * ```
     *
     * @returns
     */
    var identifier = new IdentifierType();
    /**
     * `types.identifierNumber` - Similar to `types.identifier`. This one will serialize from / to a number when applying snapshots
     *
     * Example:
     * ```ts
     *  const Todo = types.model("Todo", {
     *      id: types.identifierNumber,
     *      title: types.string
     *  })
     * ```
     *
     * @returns
     */
    var identifierNumber = new IdentifierNumberType();
    /**
     * Returns if a given value represents an identifier type.
     *
     * @param type
     * @returns
     */
    function isIdentifierType(type) {
        return isType(type) && (type.flags & TypeFlags.Identifier) > 0;
    }
    /**
     * @internal
     * @hidden
     */
    function normalizeIdentifier(id) {
        return "" + id;
    }
    /**
     * @internal
     * @hidden
     */
    function isValidIdentifier(id) {
        return typeof id === "string" || typeof id === "number";
    }
    /**
     * @internal
     * @hidden
     */
    function assertIsValidIdentifier(id, argNumber) {
        assertArg(id, isValidIdentifier, "string or number (identifier)", argNumber);
    }

    /**
     * `types.custom` - Creates a custom type. Custom types can be used for arbitrary immutable values, that have a serializable representation. For example, to create your own Date representation, Decimal type etc.
     *
     * The signature of the options is:
     * ```ts
     * export interface CustomTypeOptions<S, T> {
     *     // Friendly name
     *     name: string
     *     // given a serialized value, how to turn it into the target type
     *     fromSnapshot(snapshot: S): T
     *     // return the serialization of the current value
     *     toSnapshot(value: T): S
     *     // if true, this is a converted value, if false, it's a snapshot
     *     isTargetType(value: T | S): value is T
     *     // a non empty string is assumed to be a validation error
     *     getValidationMessage?(snapshot: S): string
     * }
     * ```
     *
     * Example:
     * ```ts
     * const DecimalPrimitive = types.custom<string, Decimal>({
     *     name: "Decimal",
     *     fromSnapshot(value: string) {
     *         return new Decimal(value)
     *     },
     *     toSnapshot(value: Decimal) {
     *         return value.toString()
     *     },
     *     isTargetType(value: string | Decimal): boolean {
     *         return value instanceof Decimal
     *     },
     *     getValidationMessage(value: string): string {
     *         if (/^-?\d+\.\d+$/.test(value)) return "" // OK
     *         return `'${value}' doesn't look like a valid decimal number`
     *     }
     * })
     *
     * const Wallet = types.model({
     *     balance: DecimalPrimitive
     * })
     * ```
     *
     * @param options
     * @returns
     */
    function custom(options) {
        return new CustomType(options);
    }
    /**
     * @internal
     * @hidden
     */
    var CustomType = /** @class */ (function (_super) {
        __extends$1(CustomType, _super);
        function CustomType(options) {
            var _this = _super.call(this, options.name) || this;
            _this.options = options;
            _this.flags = TypeFlags.Custom;
            return _this;
        }
        CustomType.prototype.describe = function () {
            return this.name;
        };
        CustomType.prototype.isValidSnapshot = function (value, context) {
            if (this.options.isTargetType(value))
                return typeCheckSuccess();
            var typeError = this.options.getValidationMessage(value);
            if (typeError) {
                return typeCheckFailure(context, value, "Invalid value for type '" + this.name + "': " + typeError);
            }
            return typeCheckSuccess();
        };
        CustomType.prototype.getSnapshot = function (node) {
            return this.options.toSnapshot(node.storedValue);
        };
        CustomType.prototype.instantiate = function (parent, subpath, environment, initialValue) {
            var valueToStore = this.options.isTargetType(initialValue)
                ? initialValue
                : this.options.fromSnapshot(initialValue);
            return createScalarNode(this, parent, subpath, environment, valueToStore);
        };
        CustomType.prototype.reconcile = function (current, value, parent, subpath) {
            var isSnapshot = !this.options.isTargetType(value);
            // in theory customs use scalar nodes which cannot be detached, but still...
            if (!current.isDetaching) {
                var unchanged = current.type === this &&
                    (isSnapshot ? value === current.snapshot : value === current.storedValue);
                if (unchanged) {
                    current.setParent(parent, subpath);
                    return current;
                }
            }
            var valueToStore = isSnapshot ? this.options.fromSnapshot(value) : value;
            var newNode = this.instantiate(parent, subpath, undefined, valueToStore);
            current.die(); // noop if detaching
            return newNode;
        };
        return CustomType;
    }(SimpleType));

    // we import the types to re-export them inside types.
    var types$2 = {
        enumeration: enumeration,
        model: model$2,
        compose: compose,
        custom: custom,
        reference: reference,
        safeReference: safeReference,
        union: union,
        optional: optional,
        literal: literal,
        maybe: maybe,
        maybeNull: maybeNull,
        refinement: refinement,
        string: string,
        boolean: boolean,
        number: number,
        integer: integer,
        Date: DatePrimitive,
        map: map$1,
        array: array,
        frozen: frozen,
        identifier: identifier,
        identifierNumber: identifierNumber,
        late: late,
        undefined: undefinedType,
        null: nullType,
        snapshotProcessor: snapshotProcessor
    };

    var mobxStateTree_module = /*#__PURE__*/Object.freeze({
        __proto__: null,
        addDisposer: addDisposer,
        addMiddleware: addMiddleware,
        applyAction: applyAction,
        applyPatch: applyPatch,
        applySnapshot: applySnapshot,
        cast: cast,
        castFlowReturn: castFlowReturn,
        castToReferenceSnapshot: castToReferenceSnapshot,
        castToSnapshot: castToSnapshot,
        clone: clone,
        createActionTrackingMiddleware: createActionTrackingMiddleware,
        createActionTrackingMiddleware2: createActionTrackingMiddleware2,
        decorate: decorate,
        destroy: destroy,
        detach: detach,
        escapeJsonPath: escapeJsonPath,
        flow: flow,
        getChildType: getChildType,
        getEnv: getEnv,
        getIdentifier: getIdentifier,
        getLivelinessChecking: getLivelinessChecking,
        getMembers: getMembers,
        getNodeId: getNodeId,
        getParent: getParent,
        getParentOfType: getParentOfType,
        getPath: getPath,
        getPathParts: getPathParts,
        getPropertyMembers: getPropertyMembers,
        getRelativePath: getRelativePath,
        getRoot: getRoot,
        getRunningActionContext: getRunningActionContext,
        getSnapshot: getSnapshot,
        getType: getType,
        hasParent: hasParent,
        hasParentOfType: hasParentOfType,
        isActionContextChildOf: isActionContextChildOf,
        isActionContextThisOrChildOf: isActionContextThisOrChildOf,
        isAlive: isAlive,
        isArrayType: isArrayType,
        isFrozenType: isFrozenType,
        isIdentifierType: isIdentifierType,
        isLateType: isLateType,
        isLiteralType: isLiteralType,
        isMapType: isMapType,
        isModelType: isModelType,
        isOptionalType: isOptionalType,
        isPrimitiveType: isPrimitiveType,
        isProtected: isProtected,
        isReferenceType: isReferenceType,
        isRefinementType: isRefinementType,
        isRoot: isRoot,
        isStateTreeNode: isStateTreeNode,
        isType: isType,
        isUnionType: isUnionType,
        isValidReference: isValidReference,
        joinJsonPath: joinJsonPath,
        onAction: onAction,
        onPatch: onPatch,
        onSnapshot: onSnapshot,
        process: process$1,
        protect: protect,
        recordActions: recordActions,
        recordPatches: recordPatches,
        resolveIdentifier: resolveIdentifier,
        resolvePath: resolvePath,
        setLivelinessChecking: setLivelinessChecking,
        setLivelynessChecking: setLivelynessChecking,
        splitJsonPath: splitJsonPath,
        tryReference: tryReference,
        tryResolve: tryResolve,
        typecheck: typecheck,
        types: types$2,
        unescapeJsonPath: unescapeJsonPath,
        unprotect: unprotect,
        walk: walk
    });

    var require$$0$1 = /*@__PURE__*/getAugmentedNamespace(mobxStateTree_module);

    var configuration = {};

    var configurationSchema = {};

    var mst = {};

    var lib = {exports: {}};

    // Found this seed-based random generator somewhere
    // Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)

    var seed = 1;

    /**
     * return a random number based on a seed
     * @param seed
     * @returns {number}
     */
    function getNextValue() {
        seed = (seed * 9301 + 49297) % 233280;
        return seed/(233280.0);
    }

    function setSeed$1(_seed_) {
        seed = _seed_;
    }

    var randomFromSeed$1 = {
        nextValue: getNextValue,
        seed: setSeed$1
    };

    var randomFromSeed = randomFromSeed$1;

    var ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';
    var alphabet$2;
    var previousSeed;

    var shuffled;

    function reset() {
        shuffled = false;
    }

    function setCharacters(_alphabet_) {
        if (!_alphabet_) {
            if (alphabet$2 !== ORIGINAL) {
                alphabet$2 = ORIGINAL;
                reset();
            }
            return;
        }

        if (_alphabet_ === alphabet$2) {
            return;
        }

        if (_alphabet_.length !== ORIGINAL.length) {
            throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);
        }

        var unique = _alphabet_.split('').filter(function(item, ind, arr){
           return ind !== arr.lastIndexOf(item);
        });

        if (unique.length) {
            throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));
        }

        alphabet$2 = _alphabet_;
        reset();
    }

    function characters(_alphabet_) {
        setCharacters(_alphabet_);
        return alphabet$2;
    }

    function setSeed(seed) {
        randomFromSeed.seed(seed);
        if (previousSeed !== seed) {
            reset();
            previousSeed = seed;
        }
    }

    function shuffle() {
        if (!alphabet$2) {
            setCharacters(ORIGINAL);
        }

        var sourceArray = alphabet$2.split('');
        var targetArray = [];
        var r = randomFromSeed.nextValue();
        var characterIndex;

        while (sourceArray.length > 0) {
            r = randomFromSeed.nextValue();
            characterIndex = Math.floor(r * sourceArray.length);
            targetArray.push(sourceArray.splice(characterIndex, 1)[0]);
        }
        return targetArray.join('');
    }

    function getShuffled() {
        if (shuffled) {
            return shuffled;
        }
        shuffled = shuffle();
        return shuffled;
    }

    /**
     * lookup shuffled letter
     * @param index
     * @returns {string}
     */
    function lookup$1(index) {
        var alphabetShuffled = getShuffled();
        return alphabetShuffled[index];
    }

    function get$1 () {
      return alphabet$2 || ORIGINAL;
    }

    var alphabet_1 = {
        get: get$1,
        characters: characters,
        seed: setSeed,
        lookup: lookup$1,
        shuffled: getShuffled
    };

    var crypto = typeof window === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto

    var randomByte;

    if (!crypto || !crypto.getRandomValues) {
        randomByte = function(size) {
            var bytes = [];
            for (var i = 0; i < size; i++) {
                bytes.push(Math.floor(Math.random() * 256));
            }
            return bytes;
        };
    } else {
        randomByte = function(size) {
            return crypto.getRandomValues(new Uint8Array(size));
        };
    }

    var randomByteBrowser = randomByte;

    // This file replaces `format.js` in bundlers like webpack or Rollup,
    // according to `browser` config in `package.json`.

    var format_browser = function (random, alphabet, size) {
      // We can’t use bytes bigger than the alphabet. To make bytes values closer
      // to the alphabet, we apply bitmask on them. We look for the closest
      // `2 ** x - 1` number, which will be bigger than alphabet size. If we have
      // 30 symbols in the alphabet, we will take 31 (00011111).
      // We do not use faster Math.clz32, because it is not available in browsers.
      var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1;
      // Bitmask is not a perfect solution (in our example it will pass 31 bytes,
      // which is bigger than the alphabet). As a result, we will need more bytes,
      // than ID size, because we will refuse bytes bigger than the alphabet.

      // Every hardware random generator call is costly,
      // because we need to wait for entropy collection. This is why often it will
      // be faster to ask for few extra bytes in advance, to avoid additional calls.

      // Here we calculate how many random bytes should we call in advance.
      // It depends on ID length, mask / alphabet size and magic number 1.6
      // (which was selected according benchmarks).

      // -~f => Math.ceil(f) if n is float number
      // -~i => i + 1 if n is integer number
      var step = -~(1.6 * mask * size / alphabet.length);
      var id = '';

      while (true) {
        var bytes = random(step);
        // Compact alternative for `for (var i = 0; i < step; i++)`
        var i = step;
        while (i--) {
          // If random byte is bigger than alphabet even after bitmask,
          // we refuse it by `|| ''`.
          id += alphabet[bytes[i] & mask] || '';
          // More compact than `id.length + 1 === size`
          if (id.length === +size) return id
        }
      }
    };

    var alphabet$1 = alphabet_1;
    var random = randomByteBrowser;
    var format$1 = format_browser;

    function generate$2(number) {
        var loopCounter = 0;
        var done;

        var str = '';

        while (!done) {
            str = str + format$1(random, alphabet$1.get(), 1);
            done = number < (Math.pow(16, loopCounter + 1 ) );
            loopCounter++;
        }
        return str;
    }

    var generate_1 = generate$2;

    var generate$1 = generate_1;

    // Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.
    // This number should be updated every year or so to keep the generated id short.
    // To regenerate `new Date() - 0` and bump the version. Always bump the version!
    var REDUCE_TIME = 1567752802062;

    // don't change unless we change the algos or REDUCE_TIME
    // must be an integer and less than 16
    var version$1 = 7;

    // Counter is used when shortid is called multiple times in one second.
    var counter;

    // Remember the last time shortid was called in case counter is needed.
    var previousSeconds;

    /**
     * Generate unique id
     * Returns string id
     */
    function build(clusterWorkerId) {
        var str = '';

        var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);

        if (seconds === previousSeconds) {
            counter++;
        } else {
            counter = 0;
            previousSeconds = seconds;
        }

        str = str + generate$1(version$1);
        str = str + generate$1(clusterWorkerId);
        if (counter > 0) {
            str = str + generate$1(counter);
        }
        str = str + generate$1(seconds);
        return str;
    }

    var build_1 = build;

    var alphabet = alphabet_1;

    function isShortId(id) {
        if (!id || typeof id !== 'string' || id.length < 6 ) {
            return false;
        }

        var nonAlphabetic = new RegExp('[^' +
          alphabet.get().replace(/[|\\{}()[\]^$+*?.-]/g, '\\$&') +
        ']');
        return !nonAlphabetic.test(id);
    }

    var isValid = isShortId;

    (function (module) {

    var alphabet = alphabet_1;
    var build = build_1;
    var isValid$1 = isValid;

    // if you are using cluster or multiple servers use this to make each instance
    // has a unique value for worker
    // Note: I don't know if this is automatically set when using third
    // party cluster solutions such as pm2.
    var clusterWorkerId = 0;

    /**
     * Set the seed.
     * Highly recommended if you don't want people to try to figure out your id schema.
     * exposed as shortid.seed(int)
     * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.
     */
    function seed(seedValue) {
        alphabet.seed(seedValue);
        return module.exports;
    }

    /**
     * Set the cluster worker or machine id
     * exposed as shortid.worker(int)
     * @param workerId worker must be positive integer.  Number less than 16 is recommended.
     * returns shortid module so it can be chained.
     */
    function worker(workerId) {
        clusterWorkerId = workerId;
        return module.exports;
    }

    /**
     *
     * sets new characters to use in the alphabet
     * returns the shuffled alphabet
     */
    function characters(newCharacters) {
        if (newCharacters !== undefined) {
            alphabet.characters(newCharacters);
        }

        return alphabet.shuffled();
    }

    /**
     * Generate unique id
     * Returns string id
     */
    function generate() {
      return build(clusterWorkerId);
    }

    // Export all other functions as properties of the generate function
    module.exports = generate;
    module.exports.generate = generate;
    module.exports.seed = seed;
    module.exports.worker = worker;
    module.exports.characters = characters;
    module.exports.isValid = isValid$1;
    }(lib));

    var shortid = lib.exports;

    var _interopRequireDefault$X = interopRequireDefault.exports;

    Object.defineProperty(mst, "__esModule", {
      value: true
    });
    mst.UriLocationRaw = mst.UriLocation = mst.Region = mst.PropTypes = mst.NoAssemblyRegion = mst.LocalPathLocation = FileLocation_1 = mst.FileLocation = ElementId_1 = mst.ElementId = mst.BlobLocation = void 0;

    var _defineProperty2$d = _interopRequireDefault$X(defineProperty$1.exports);

    var _objectWithoutProperties2$5 = _interopRequireDefault$X(objectWithoutProperties.exports);

    var _shortid = _interopRequireDefault$X(shortid);

    var _mobxStateTree$9 = require$$0$1;

    var _propTypes$3 = _interopRequireDefault$X(propTypes.exports);

    var _mobxReact$a = require$$13;

    var _excluded$6 = ["baseUri"],
        _excluded2 = ["locationType"];

    function ownKeys$b(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

    function _objectSpread$b(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$b(Object(source), true).forEach(function (key) { (0, _defineProperty2$d.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$b(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

    var ElementId = _mobxStateTree$9.types.optional(_mobxStateTree$9.types.identifier, _shortid.default.generate); // PropTypes that are useful when working with instances of these in react components


    var ElementId_1 = mst.ElementId = ElementId;
    var PropTypes = {
      Region: _propTypes$3.default.shape({
        refName: _propTypes$3.default.string.isRequired,
        start: _propTypes$3.default.number.isRequired,
        end: _propTypes$3.default.number.isRequired
      }),
      ConfigSchema: _mobxReact$a.PropTypes.objectOrObservableObject,
      Feature: _propTypes$3.default.shape({
        get: _propTypes$3.default.func.isRequired,
        id: _propTypes$3.default.func.isRequired
      })
    };
    mst.PropTypes = PropTypes;

    var NoAssemblyRegion = _mobxStateTree$9.types.model('NoAssemblyRegion', {
      refName: _mobxStateTree$9.types.string,
      start: _mobxStateTree$9.types.number,
      end: _mobxStateTree$9.types.number,
      reversed: _mobxStateTree$9.types.optional(_mobxStateTree$9.types.boolean, false)
    }).actions(function (self) {
      return {
        setRefName: function setRefName(newRefName) {
          self.refName = newRefName;
        }
      };
    });

    mst.NoAssemblyRegion = NoAssemblyRegion;

    var Region = _mobxStateTree$9.types.compose('Region', NoAssemblyRegion, _mobxStateTree$9.types.model({
      assemblyName: _mobxStateTree$9.types.string
    }));

    mst.Region = Region;

    var LocalPathLocation = _mobxStateTree$9.types.model('LocalPathLocation', {
      locationType: _mobxStateTree$9.types.literal('LocalPathLocation'),
      localPath: _mobxStateTree$9.types.string
    }); // like how blobId is used to get a blob map


    mst.LocalPathLocation = LocalPathLocation;

    var BlobLocation = _mobxStateTree$9.types.model('BlobLocation', {
      locationType: _mobxStateTree$9.types.literal('BlobLocation'),
      name: _mobxStateTree$9.types.string,
      blobId: _mobxStateTree$9.types.string
    });

    mst.BlobLocation = BlobLocation;

    var UriLocationRaw = _mobxStateTree$9.types.model('UriLocation', {
      locationType: _mobxStateTree$9.types.literal('UriLocation'),
      uri: _mobxStateTree$9.types.string,
      baseUri: _mobxStateTree$9.types.maybe(_mobxStateTree$9.types.string),
      internetAccountId: _mobxStateTree$9.types.maybe(_mobxStateTree$9.types.string),
      // auths information (such as tokens) needed for using this resource.
      // if provided, these must be completely sufficient for using it
      internetAccountPreAuthorization: _mobxStateTree$9.types.maybe(_mobxStateTree$9.types.model('InternetAccountPreAuthorization', {
        internetAccountType: _mobxStateTree$9.types.string,
        authInfo: _mobxStateTree$9.types.frozen()
      }))
    });

    mst.UriLocationRaw = UriLocationRaw;

    var UriLocation = _mobxStateTree$9.types.snapshotProcessor(UriLocationRaw, {
      postProcessor: function postProcessor(snap) {
        var baseUri = snap.baseUri,
            rest = (0, _objectWithoutProperties2$5.default)(snap, _excluded$6);

        if (!baseUri) {
          return rest;
        }

        return snap;
      }
    });

    mst.UriLocation = UriLocation;

    var FileLocation = _mobxStateTree$9.types.snapshotProcessor(_mobxStateTree$9.types.union(LocalPathLocation, UriLocation, BlobLocation), {
      // @ts-ignore
      preProcessor: function preProcessor(snapshot) {
        if (!snapshot) {
          return undefined;
        } // @ts-ignore


        var locationType = snapshot.locationType,
            rest = (0, _objectWithoutProperties2$5.default)(snapshot, _excluded2);

        if (!locationType) {
          // @ts-ignore
          var uri = rest.uri,
              localPath = rest.localPath,
              blob = rest.blob;
          var _locationType = '';

          if (uri !== undefined) {
            _locationType = 'UriLocation';
          } else if (localPath !== undefined) {
            _locationType = 'LocalPathLocation';
          } else if (blob !== undefined) {
            _locationType = 'BlobLocation';
          }

          return _objectSpread$b(_objectSpread$b({}, rest), {}, {
            locationType: _locationType
          });
        }

        return snapshot;
      }
    });

    var FileLocation_1 = mst.FileLocation = FileLocation;

    var configurationSlot = {};

    var jexlStrings = {};

    var jexl = {};

    var Jexl$1 = {exports: {}};

    var classCallCheck = {exports: {}};

    (function (module) {
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    module.exports = _classCallCheck, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }(classCallCheck));

    var createClass = {exports: {}};

    (function (module) {
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }

    module.exports = _createClass, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }(createClass));

    var handlers$3 = {};

    var toConsumableArray = {exports: {}};

    var arrayWithoutHoles = {exports: {}};

    (function (module) {
    var arrayLikeToArray$1 = arrayLikeToArray.exports;

    function _arrayWithoutHoles(arr) {
      if (Array.isArray(arr)) return arrayLikeToArray$1(arr);
    }

    module.exports = _arrayWithoutHoles, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }(arrayWithoutHoles));

    var iterableToArray = {exports: {}};

    (function (module) {
    function _iterableToArray(iter) {
      if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
    }

    module.exports = _iterableToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }(iterableToArray));

    var nonIterableSpread = {exports: {}};

    (function (module) {
    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }

    module.exports = _nonIterableSpread, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }(nonIterableSpread));

    (function (module) {
    var arrayWithoutHoles$1 = arrayWithoutHoles.exports;

    var iterableToArray$1 = iterableToArray.exports;

    var unsupportedIterableToArray$1 = unsupportedIterableToArray.exports;

    var nonIterableSpread$1 = nonIterableSpread.exports;

    function _toConsumableArray(arr) {
      return arrayWithoutHoles$1(arr) || iterableToArray$1(arr) || unsupportedIterableToArray$1(arr) || nonIterableSpread$1();
    }

    module.exports = _toConsumableArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }(toConsumableArray));

    var _interopRequireDefault$W = interopRequireDefault.exports;

    var _toConsumableArray2$8 = _interopRequireDefault$W(toConsumableArray.exports);

    /*
     * Jexl
     * Copyright 2020 Tom Shawver
     */
    var poolNames = {
      functions: 'Jexl Function',
      transforms: 'Transform'
    };
    /**
     * Evaluates an ArrayLiteral by returning its value, with each element
     * independently run through the evaluator.
     * @param {{type: 'ObjectLiteral', value: <{}>}} ast An expression tree with an
     *      ObjectLiteral as the top node
     * @returns {Promise.<[]>} resolves to a map contained evaluated values.
     * @private
     */

    handlers$3.ArrayLiteral = function (ast) {
      return this.evalArray(ast.value);
    };
    /**
     * Evaluates a BinaryExpression node by running the Grammar's evaluator for
     * the given operator. Note that binary expressions support two types of
     * evaluators: `eval` is called with the left and right operands pre-evaluated.
     * `evalOnDemand`, if it exists, will be called with the left and right operands
     * each individually wrapped in an object with an "eval" function that returns
     * a promise with the resulting value. This allows the binary expression to
     * evaluate the operands conditionally.
     * @param {{type: 'BinaryExpression', operator: <string>, left: {},
     *      right: {}}} ast An expression tree with a BinaryExpression as the top
     *      node
     * @returns {Promise<*>} resolves with the value of the BinaryExpression.
     * @private
     */


    handlers$3.BinaryExpression = function (ast) {
      var _this = this;

      var grammarOp = this._grammar.elements[ast.operator];

      if (grammarOp.evalOnDemand) {
        var wrap = function wrap(subAst) {
          return {
            eval: function _eval() {
              return _this.eval(subAst);
            }
          };
        };

        return grammarOp.evalOnDemand(wrap(ast.left), wrap(ast.right));
      }

      return this.Promise.all([this.eval(ast.left), this.eval(ast.right)]).then(function (arr) {
        return grammarOp.eval(arr[0], arr[1]);
      });
    };
    /**
     * Evaluates a ConditionalExpression node by first evaluating its test branch,
     * and resolving with the consequent branch if the test is truthy, or the
     * alternate branch if it is not. If there is no consequent branch, the test
     * result will be used instead.
     * @param {{type: 'ConditionalExpression', test: {}, consequent: {},
     *      alternate: {}}} ast An expression tree with a ConditionalExpression as
     *      the top node
     * @private
     */


    handlers$3.ConditionalExpression = function (ast) {
      var _this2 = this;

      return this.eval(ast.test).then(function (res) {
        if (res) {
          if (ast.consequent) {
            return _this2.eval(ast.consequent);
          }

          return res;
        }

        return _this2.eval(ast.alternate);
      });
    };
    /**
     * Evaluates a FilterExpression by applying it to the subject value.
     * @param {{type: 'FilterExpression', relative: <boolean>, expr: {},
     *      subject: {}}} ast An expression tree with a FilterExpression as the top
     *      node
     * @returns {Promise<*>} resolves with the value of the FilterExpression.
     * @private
     */


    handlers$3.FilterExpression = function (ast) {
      var _this3 = this;

      return this.eval(ast.subject).then(function (subject) {
        if (ast.relative) {
          return _this3._filterRelative(subject, ast.expr);
        }

        return _this3._filterStatic(subject, ast.expr);
      });
    };
    /**
     * Evaluates an Identifier by either stemming from the evaluated 'from'
     * expression tree or accessing the context provided when this Evaluator was
     * constructed.
     * @param {{type: 'Identifier', value: <string>, [from]: {}}} ast An expression
     *      tree with an Identifier as the top node
     * @returns {Promise<*>|*} either the identifier's value, or a Promise that
     *      will resolve with the identifier's value.
     * @private
     */


    handlers$3.Identifier = function (ast) {
      if (!ast.from) {
        return ast.relative ? this._relContext[ast.value] : this._context[ast.value];
      }

      return this.eval(ast.from).then(function (context) {
        if (context === undefined || context === null) {
          return undefined;
        }

        if (Array.isArray(context)) {
          context = context[0];
        }

        return context[ast.value];
      });
    };
    /**
     * Evaluates a Literal by returning its value property.
     * @param {{type: 'Literal', value: <string|number|boolean>}} ast An expression
     *      tree with a Literal as its only node
     * @returns {string|number|boolean} The value of the Literal node
     * @private
     */


    handlers$3.Literal = function (ast) {
      return ast.value;
    };
    /**
     * Evaluates an ObjectLiteral by returning its value, with each key
     * independently run through the evaluator.
     * @param {{type: 'ObjectLiteral', value: <{}>}} ast An expression tree with an
     *      ObjectLiteral as the top node
     * @returns {Promise<{}>} resolves to a map contained evaluated values.
     * @private
     */


    handlers$3.ObjectLiteral = function (ast) {
      return this.evalMap(ast.value);
    };
    /**
     * Evaluates a FunctionCall node by applying the supplied arguments to a
     * function defined in one of the grammar's function pools.
     * @param {{type: 'FunctionCall', name: <string>}} ast An
     *      expression tree with a FunctionCall as the top node
     * @returns {Promise<*>|*} the value of the function call, or a Promise that
     *      will resolve with the resulting value.
     * @private
     */


    handlers$3.FunctionCall = function (ast) {
      var poolName = poolNames[ast.pool];

      if (!poolName) {
        throw new Error("Corrupt AST: Pool '".concat(ast.pool, "' not found"));
      }

      var pool = this._grammar[ast.pool];
      var func = pool[ast.name];

      if (!func) {
        throw new Error("".concat(poolName, " ").concat(ast.name, " is not defined."));
      }

      return this.evalArray(ast.args || []).then(function (args) {
        return func.apply(void 0, (0, _toConsumableArray2$8.default)(args));
      });
    };
    /**
     * Evaluates a Unary expression by passing the right side through the
     * operator's eval function.
     * @param {{type: 'UnaryExpression', operator: <string>, right: {}}} ast An
     *      expression tree with a UnaryExpression as the top node
     * @returns {Promise<*>} resolves with the value of the UnaryExpression.
     * @constructor
     */


    handlers$3.UnaryExpression = function (ast) {
      var _this4 = this;

      return this.eval(ast.right).then(function (right) {
        return _this4._grammar.elements[ast.operator].eval(right);
      });
    };

    var _interopRequireDefault$V = interopRequireDefault.exports;

    var _classCallCheck2$c = _interopRequireDefault$V(classCallCheck.exports);

    var _createClass2$b = _interopRequireDefault$V(createClass.exports);

    /*
     * Jexl
     * Copyright 2020 Tom Shawver
     */
    var handlers$2 = handlers$3;
    /**
     * The Evaluator takes a Jexl expression tree as generated by the
     * {@link Parser} and calculates its value within a given context. The
     * collection of transforms, context, and a relative context to be used as the
     * root for relative identifiers, are all specific to an Evaluator instance.
     * When any of these things change, a new instance is required.  However, a
     * single instance can be used to simultaneously evaluate many different
     * expressions, and does not have to be reinstantiated for each.
     * @param {{}} grammar A grammar object against which to evaluate the expression
     *      tree
     * @param {{}} [context] A map of variable keys to their values. This will be
     *      accessed to resolve the value of each non-relative identifier. Any
     *      Promise values will be passed to the expression as their resolved
     *      value.
     * @param {{}|Array<{}|Array>} [relativeContext] A map or array to be accessed
     *      to resolve the value of a relative identifier.
     * @param {function} promise A constructor for the Promise class to be used;
     *      probably either Promise or PromiseSync.
     */


    var Evaluator$1 = /*#__PURE__*/function () {
      function Evaluator(grammar, context, relativeContext) {
        var promise = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Promise;
        (0, _classCallCheck2$c.default)(this, Evaluator);
        this._grammar = grammar;
        this._context = context || {};
        this._relContext = relativeContext || this._context;
        this.Promise = promise;
      }
      /**
       * Evaluates an expression tree within the configured context.
       * @param {{}} ast An expression tree object
       * @returns {Promise<*>} resolves with the resulting value of the expression.
       */


      (0, _createClass2$b.default)(Evaluator, [{
        key: "eval",
        value: function _eval(ast) {
          var _this = this;

          return this.Promise.resolve().then(function () {
            return handlers$2[ast.type].call(_this, ast);
          });
        }
        /**
         * Simultaneously evaluates each expression within an array, and delivers the
         * response as an array with the resulting values at the same indexes as their
         * originating expressions.
         * @param {Array<string>} arr An array of expression strings to be evaluated
         * @returns {Promise<Array<{}>>} resolves with the result array
         */

      }, {
        key: "evalArray",
        value: function evalArray(arr) {
          var _this2 = this;

          return this.Promise.all(arr.map(function (elem) {
            return _this2.eval(elem);
          }));
        }
        /**
         * Simultaneously evaluates each expression within a map, and delivers the
         * response as a map with the same keys, but with the evaluated result for each
         * as their value.
         * @param {{}} map A map of expression names to expression trees to be
         *      evaluated
         * @returns {Promise<{}>} resolves with the result map.
         */

      }, {
        key: "evalMap",
        value: function evalMap(map) {
          var _this3 = this;

          var keys = Object.keys(map);
          var result = {};
          var asts = keys.map(function (key) {
            return _this3.eval(map[key]);
          });
          return this.Promise.all(asts).then(function (vals) {
            vals.forEach(function (val, idx) {
              result[keys[idx]] = val;
            });
            return result;
          });
        }
        /**
         * Applies a filter expression with relative identifier elements to a subject.
         * The intent is for the subject to be an array of subjects that will be
         * individually used as the relative context against the provided expression
         * tree. Only the elements whose expressions result in a truthy value will be
         * included in the resulting array.
         *
         * If the subject is not an array of values, it will be converted to a single-
         * element array before running the filter.
         * @param {*} subject The value to be filtered usually an array. If this value is
         *      not an array, it will be converted to an array with this value as the
         *      only element.
         * @param {{}} expr The expression tree to run against each subject. If the
         *      tree evaluates to a truthy result, then the value will be included in
         *      the returned array otherwise, it will be eliminated.
         * @returns {Promise<Array>} resolves with an array of values that passed the
         *      expression filter.
         * @private
         */

      }, {
        key: "_filterRelative",
        value: function _filterRelative(subject, expr) {
          var _this4 = this;

          var promises = [];

          if (!Array.isArray(subject)) {
            subject = subject === undefined ? [] : [subject];
          }

          subject.forEach(function (elem) {
            var evalInst = new Evaluator(_this4._grammar, _this4._context, elem, _this4.Promise);
            promises.push(evalInst.eval(expr));
          });
          return this.Promise.all(promises).then(function (values) {
            var results = [];
            values.forEach(function (value, idx) {
              if (value) {
                results.push(subject[idx]);
              }
            });
            return results;
          });
        }
        /**
         * Applies a static filter expression to a subject value.  If the filter
         * expression evaluates to boolean true, the subject is returned if false,
         * undefined.
         *
         * For any other resulting value of the expression, this function will attempt
         * to respond with the property at that name or index of the subject.
         * @param {*} subject The value to be filtered.  Usually an Array (for which
         *      the expression would generally resolve to a numeric index) or an
         *      Object (for which the expression would generally resolve to a string
         *      indicating a property name)
         * @param {{}} expr The expression tree to run against the subject
         * @returns {Promise<*>} resolves with the value of the drill-down.
         * @private
         */

      }, {
        key: "_filterStatic",
        value: function _filterStatic(subject, expr) {
          return this.eval(expr).then(function (res) {
            if (typeof res === 'boolean') {
              return res ? subject : undefined;
            }

            return subject[res];
          });
        }
      }]);
      return Evaluator;
    }();

    var Evaluator_1 = Evaluator$1;

    var _interopRequireDefault$U = interopRequireDefault.exports;

    var _classCallCheck2$b = _interopRequireDefault$U(classCallCheck.exports);

    var _createClass2$a = _interopRequireDefault$U(createClass.exports);

    /*
     * Jexl
     * Copyright 2020 Tom Shawver
     */
    var numericRegex = /^-?(?:(?:[0-9]*\.[0-9]+)|[0-9]+)$/;
    var identRegex = /^[a-zA-Zа-яА-Я_\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u00FF$][a-zA-Zа-яА-Я0-9_\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u00FF$]*$/;
    var escEscRegex = /\\\\/;
    var whitespaceRegex = /^\s*$/;
    var preOpRegexElems = [// Strings
    "'(?:(?:\\\\')|[^'])*'", '"(?:(?:\\\\")|[^"])*"', // Whitespace
    '\\s+', // Booleans
    '\\btrue\\b', '\\bfalse\\b'];
    var postOpRegexElems = [// Identifiers
    "[a-zA-Z\u0430-\u044F\u0410-\u042F_\xC0-\xD6\xD8-\xF6\xF8-\xFF\\$][a-zA-Z0-9\u0430-\u044F\u0410-\u042F_\xC0-\xD6\xD8-\xF6\xF8-\xFF\\$]*", // Numerics (without negative symbol)
    '(?:(?:[0-9]*\\.[0-9]+)|[0-9]+)'];
    var minusNegatesAfter = ['binaryOp', 'unaryOp', 'openParen', 'openBracket', 'question', 'colon'];
    /**
     * Lexer is a collection of stateless, statically-accessed functions for the
     * lexical parsing of a Jexl string.  Its responsibility is to identify the
     * "parts of speech" of a Jexl expression, and tokenize and label each, but
     * to do only the most minimal syntax checking; the only errors the Lexer
     * should be concerned with are if it's unable to identify the utility of
     * any of its tokens.  Errors stemming from these tokens not being in a
     * sensible configuration should be left for the Parser to handle.
     * @type {{}}
     */

    var Lexer$1 = /*#__PURE__*/function () {
      function Lexer(grammar) {
        (0, _classCallCheck2$b.default)(this, Lexer);
        this._grammar = grammar;
      }
      /**
       * Splits a Jexl expression string into an array of expression elements.
       * @param {string} str A Jexl expression string
       * @returns {Array<string>} An array of substrings defining the functional
       *      elements of the expression.
       */


      (0, _createClass2$a.default)(Lexer, [{
        key: "getElements",
        value: function getElements(str) {
          var regex = this._getSplitRegex();

          return str.split(regex).filter(function (elem) {
            // Remove empty strings
            return elem;
          });
        }
        /**
         * Converts an array of expression elements into an array of tokens.  Note that
         * the resulting array may not equal the element array in length, as any
         * elements that consist only of whitespace get appended to the previous
         * token's "raw" property.  For the structure of a token object, please see
         * {@link Lexer#tokenize}.
         * @param {Array<string>} elements An array of Jexl expression elements to be
         *      converted to tokens
         * @returns {Array<{type, value, raw}>} an array of token objects.
         */

      }, {
        key: "getTokens",
        value: function getTokens(elements) {
          var tokens = [];
          var negate = false;

          for (var i = 0; i < elements.length; i++) {
            if (this._isWhitespace(elements[i])) {
              if (tokens.length) {
                tokens[tokens.length - 1].raw += elements[i];
              }
            } else if (elements[i] === '-' && this._isNegative(tokens)) {
              negate = true;
            } else {
              if (negate) {
                elements[i] = '-' + elements[i];
                negate = false;
              }

              tokens.push(this._createToken(elements[i]));
            }
          } // Catch a - at the end of the string. Let the parser handle that issue.


          if (negate) {
            tokens.push(this._createToken('-'));
          }

          return tokens;
        }
        /**
         * Converts a Jexl string into an array of tokens.  Each token is an object
         * in the following format:
         *
         *     {
         *         type: <string>,
         *         [name]: <string>,
         *         value: <boolean|number|string>,
         *         raw: <string>
         *     }
         *
         * Type is one of the following:
         *
         *      literal, identifier, binaryOp, unaryOp
         *
         * OR, if the token is a control character its type is the name of the element
         * defined in the Grammar.
         *
         * Name appears only if the token is a control string found in
         * {@link grammar#elements}, and is set to the name of the element.
         *
         * Value is the value of the token in the correct type (boolean or numeric as
         * appropriate). Raw is the string representation of this value taken directly
         * from the expression string, including any trailing spaces.
         * @param {string} str The Jexl string to be tokenized
         * @returns {Array<{type, value, raw}>} an array of token objects.
         * @throws {Error} if the provided string contains an invalid token.
         */

      }, {
        key: "tokenize",
        value: function tokenize(str) {
          var elements = this.getElements(str);
          return this.getTokens(elements);
        }
        /**
         * Creates a new token object from an element of a Jexl string. See
         * {@link Lexer#tokenize} for a description of the token object.
         * @param {string} element The element from which a token should be made
         * @returns {{value: number|boolean|string, [name]: string, type: string,
         *      raw: string}} a token object describing the provided element.
         * @throws {Error} if the provided string is not a valid expression element.
         * @private
         */

      }, {
        key: "_createToken",
        value: function _createToken(element) {
          var token = {
            type: 'literal',
            value: element,
            raw: element
          };

          if (element[0] === '"' || element[0] === "'") {
            token.value = this._unquote(element);
          } else if (element.match(numericRegex)) {
            token.value = parseFloat(element);
          } else if (element === 'true' || element === 'false') {
            token.value = element === 'true';
          } else if (this._grammar.elements[element]) {
            token.type = this._grammar.elements[element].type;
          } else if (element.match(identRegex)) {
            token.type = 'identifier';
          } else {
            throw new Error("Invalid expression token: ".concat(element));
          }

          return token;
        }
        /**
         * Escapes a string so that it can be treated as a string literal within a
         * regular expression.
         * @param {string} str The string to be escaped
         * @returns {string} the RegExp-escaped string.
         * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expressions
         * @private
         */

      }, {
        key: "_escapeRegExp",
        value: function _escapeRegExp(str) {
          str = str.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');

          if (str.match(identRegex)) {
            str = '\\b' + str + '\\b';
          }

          return str;
        }
        /**
         * Gets a RegEx object appropriate for splitting a Jexl string into its core
         * elements.
         * @returns {RegExp} An element-splitting RegExp object
         * @private
         */

      }, {
        key: "_getSplitRegex",
        value: function _getSplitRegex() {
          var _this = this;

          if (!this._splitRegex) {
            // Sort by most characters to least, then regex escape each
            var elemArray = Object.keys(this._grammar.elements).sort(function (a, b) {
              return b.length - a.length;
            }).map(function (elem) {
              return _this._escapeRegExp(elem);
            }, this);
            this._splitRegex = new RegExp('(' + [preOpRegexElems.join('|'), elemArray.join('|'), postOpRegexElems.join('|')].join('|') + ')');
          }

          return this._splitRegex;
        }
        /**
         * Determines whether the addition of a '-' token should be interpreted as a
         * negative symbol for an upcoming number, given an array of tokens already
         * processed.
         * @param {Array<Object>} tokens An array of tokens already processed
         * @returns {boolean} true if adding a '-' should be considered a negative
         *      symbol; false otherwise
         * @private
         */

      }, {
        key: "_isNegative",
        value: function _isNegative(tokens) {
          if (!tokens.length) return true;
          return minusNegatesAfter.some(function (type) {
            return type === tokens[tokens.length - 1].type;
          });
        }
        /**
         * A utility function to determine if a string consists of only space
         * characters.
         * @param {string} str A string to be tested
         * @returns {boolean} true if the string is empty or consists of only spaces;
         *      false otherwise.
         * @private
         */

      }, {
        key: "_isWhitespace",
        value: function _isWhitespace(str) {
          return !!str.match(whitespaceRegex);
        }
        /**
         * Removes the beginning and trailing quotes from a string, unescapes any
         * escaped quotes on its interior, and unescapes any escaped escape
         * characters. Note that this function is not defensive; it assumes that the
         * provided string is not empty, and that its first and last characters are
         * actually quotes.
         * @param {string} str A string whose first and last characters are quotes
         * @returns {string} a string with the surrounding quotes stripped and escapes
         *      properly processed.
         * @private
         */

      }, {
        key: "_unquote",
        value: function _unquote(str) {
          var quote = str[0];
          var escQuoteRegex = new RegExp('\\\\' + quote, 'g');
          return str.substr(1, str.length - 2).replace(escQuoteRegex, quote).replace(escEscRegex, '\\');
        }
      }]);
      return Lexer;
    }();

    var Lexer_1 = Lexer$1;

    var handlers$1 = {};

    /*
     * Jexl
     * Copyright 2020 Tom Shawver
     */

    /**
     * Handles a subexpression that's used to define a transform argument's value.
     * @param {{type: <string>}} ast The subexpression tree
     */
    handlers$1.argVal = function (ast) {
      if (ast) this._cursor.args.push(ast);
    };
    /**
     * Handles new array literals by adding them as a new node in the AST,
     * initialized with an empty array.
     */


    handlers$1.arrayStart = function () {
      this._placeAtCursor({
        type: 'ArrayLiteral',
        value: []
      });
    };
    /**
     * Handles a subexpression representing an element of an array literal.
     * @param {{type: <string>}} ast The subexpression tree
     */


    handlers$1.arrayVal = function (ast) {
      if (ast) {
        this._cursor.value.push(ast);
      }
    };
    /**
     * Handles tokens of type 'binaryOp', indicating an operation that has two
     * inputs: a left side and a right side.
     * @param {{type: <string>}} token A token object
     */


    handlers$1.binaryOp = function (token) {
      var precedence = this._grammar.elements[token.value].precedence || 0;
      var parent = this._cursor._parent;

      while (parent && parent.operator && this._grammar.elements[parent.operator].precedence >= precedence) {
        this._cursor = parent;
        parent = parent._parent;
      }

      var node = {
        type: 'BinaryExpression',
        operator: token.value,
        left: this._cursor
      };

      this._setParent(this._cursor, node);

      this._cursor = parent;

      this._placeAtCursor(node);
    };
    /**
     * Handles successive nodes in an identifier chain.  More specifically, it
     * sets values that determine how the following identifier gets placed in the
     * AST.
     */


    handlers$1.dot = function () {
      this._nextIdentEncapsulate = this._cursor && this._cursor.type !== 'UnaryExpression' && (this._cursor.type !== 'BinaryExpression' || this._cursor.type === 'BinaryExpression' && this._cursor.right);
      this._nextIdentRelative = !this._cursor || this._cursor && !this._nextIdentEncapsulate;

      if (this._nextIdentRelative) {
        this._relative = true;
      }
    };
    /**
     * Handles a subexpression used for filtering an array returned by an
     * identifier chain.
     * @param {{type: <string>}} ast The subexpression tree
     */


    handlers$1.filter = function (ast) {
      this._placeBeforeCursor({
        type: 'FilterExpression',
        expr: ast,
        relative: this._subParser.isRelative(),
        subject: this._cursor
      });
    };
    /**
     * Handles identifier tokens when used to indicate the name of a function to
     * be called.
     * @param {{type: <string>}} token A token object
     */


    handlers$1.functionCall = function () {
      this._placeBeforeCursor({
        type: 'FunctionCall',
        name: this._cursor.value,
        args: [],
        pool: 'functions'
      });
    };
    /**
     * Handles identifier tokens by adding them as a new node in the AST.
     * @param {{type: <string>}} token A token object
     */


    handlers$1.identifier = function (token) {
      var node = {
        type: 'Identifier',
        value: token.value
      };

      if (this._nextIdentEncapsulate) {
        node.from = this._cursor;

        this._placeBeforeCursor(node);

        this._nextIdentEncapsulate = false;
      } else {
        if (this._nextIdentRelative) {
          node.relative = true;
          this._nextIdentRelative = false;
        }

        this._placeAtCursor(node);
      }
    };
    /**
     * Handles literal values, such as strings, booleans, and numerics, by adding
     * them as a new node in the AST.
     * @param {{type: <string>}} token A token object
     */


    handlers$1.literal = function (token) {
      this._placeAtCursor({
        type: 'Literal',
        value: token.value
      });
    };
    /**
     * Queues a new object literal key to be written once a value is collected.
     * @param {{type: <string>}} token A token object
     */


    handlers$1.objKey = function (token) {
      this._curObjKey = token.value;
    };
    /**
     * Handles new object literals by adding them as a new node in the AST,
     * initialized with an empty object.
     */


    handlers$1.objStart = function () {
      this._placeAtCursor({
        type: 'ObjectLiteral',
        value: {}
      });
    };
    /**
     * Handles an object value by adding its AST to the queued key on the object
     * literal node currently at the cursor.
     * @param {{type: <string>}} ast The subexpression tree
     */


    handlers$1.objVal = function (ast) {
      this._cursor.value[this._curObjKey] = ast;
    };
    /**
     * Handles traditional subexpressions, delineated with the groupStart and
     * groupEnd elements.
     * @param {{type: <string>}} ast The subexpression tree
     */


    handlers$1.subExpression = function (ast) {
      this._placeAtCursor(ast);
    };
    /**
     * Handles a completed alternate subexpression of a ternary operator.
     * @param {{type: <string>}} ast The subexpression tree
     */


    handlers$1.ternaryEnd = function (ast) {
      this._cursor.alternate = ast;
    };
    /**
     * Handles a completed consequent subexpression of a ternary operator.
     * @param {{type: <string>}} ast The subexpression tree
     */


    handlers$1.ternaryMid = function (ast) {
      this._cursor.consequent = ast;
    };
    /**
     * Handles the start of a new ternary expression by encapsulating the entire
     * AST in a ConditionalExpression node, and using the existing tree as the
     * test element.
     */


    handlers$1.ternaryStart = function () {
      this._tree = {
        type: 'ConditionalExpression',
        test: this._tree
      };
      this._cursor = this._tree;
    };
    /**
     * Handles identifier tokens when used to indicate the name of a transform to
     * be applied.
     * @param {{type: <string>}} token A token object
     */


    handlers$1.transform = function (token) {
      this._placeBeforeCursor({
        type: 'FunctionCall',
        name: token.value,
        args: [this._cursor],
        pool: 'transforms'
      });
    };
    /**
     * Handles token of type 'unaryOp', indicating that the operation has only
     * one input: a right side.
     * @param {{type: <string>}} token A token object
     */


    handlers$1.unaryOp = function (token) {
      this._placeAtCursor({
        type: 'UnaryExpression',
        operator: token.value
      });
    };

    var states$1 = {};

    /*
     * Jexl
     * Copyright 2020 Tom Shawver
     */
    var h = handlers$1;
    /**
     * A mapping of all states in the finite state machine to a set of instructions
     * for handling or transitioning into other states. Each state can be handled
     * in one of two schemes: a tokenType map, or a subHandler.
     *
     * Standard expression elements are handled through the tokenType object. This
     * is an object map of all legal token types to encounter in this state (and
     * any unexpected token types will generate a thrown error) to an options
     * object that defines how they're handled.  The available options are:
     *
     *      {string} toState: The name of the state to which to transition
     *          immediately after handling this token
     *      {string} handler: The handler function to call when this token type is
     *          encountered in this state.  If omitted, the default handler
     *          matching the token's "type" property will be called. If the handler
     *          function does not exist, no call will be made and no error will be
     *          generated.  This is useful for tokens whose sole purpose is to
     *          transition to other states.
     *
     * States that consume a subexpression should define a subHandler, the
     * function to be called with an expression tree argument when the
     * subexpression is complete. Completeness is determined through the
     * endStates object, which maps tokens on which an expression should end to the
     * state to which to transition once the subHandler function has been called.
     *
     * Additionally, any state in which it is legal to mark the AST as completed
     * should have a 'completable' property set to boolean true.  Attempting to
     * call {@link Parser#complete} in any state without this property will result
     * in a thrown Error.
     *
     * @type {{}}
     */


    states$1.states = {
      expectOperand: {
        tokenTypes: {
          literal: {
            toState: 'expectBinOp'
          },
          identifier: {
            toState: 'identifier'
          },
          unaryOp: {},
          openParen: {
            toState: 'subExpression'
          },
          openCurl: {
            toState: 'expectObjKey',
            handler: h.objStart
          },
          dot: {
            toState: 'traverse'
          },
          openBracket: {
            toState: 'arrayVal',
            handler: h.arrayStart
          }
        }
      },
      expectBinOp: {
        tokenTypes: {
          binaryOp: {
            toState: 'expectOperand'
          },
          pipe: {
            toState: 'expectTransform'
          },
          dot: {
            toState: 'traverse'
          },
          question: {
            toState: 'ternaryMid',
            handler: h.ternaryStart
          }
        },
        completable: true
      },
      expectTransform: {
        tokenTypes: {
          identifier: {
            toState: 'postTransform',
            handler: h.transform
          }
        }
      },
      expectObjKey: {
        tokenTypes: {
          identifier: {
            toState: 'expectKeyValSep',
            handler: h.objKey
          },
          closeCurl: {
            toState: 'expectBinOp'
          }
        }
      },
      expectKeyValSep: {
        tokenTypes: {
          colon: {
            toState: 'objVal'
          }
        }
      },
      postTransform: {
        tokenTypes: {
          openParen: {
            toState: 'argVal'
          },
          binaryOp: {
            toState: 'expectOperand'
          },
          dot: {
            toState: 'traverse'
          },
          openBracket: {
            toState: 'filter'
          },
          pipe: {
            toState: 'expectTransform'
          }
        },
        completable: true
      },
      postArgs: {
        tokenTypes: {
          binaryOp: {
            toState: 'expectOperand'
          },
          dot: {
            toState: 'traverse'
          },
          openBracket: {
            toState: 'filter'
          },
          pipe: {
            toState: 'expectTransform'
          }
        },
        completable: true
      },
      identifier: {
        tokenTypes: {
          binaryOp: {
            toState: 'expectOperand'
          },
          dot: {
            toState: 'traverse'
          },
          openBracket: {
            toState: 'filter'
          },
          openParen: {
            toState: 'argVal',
            handler: h.functionCall
          },
          pipe: {
            toState: 'expectTransform'
          },
          question: {
            toState: 'ternaryMid',
            handler: h.ternaryStart
          }
        },
        completable: true
      },
      traverse: {
        tokenTypes: {
          identifier: {
            toState: 'identifier'
          }
        }
      },
      filter: {
        subHandler: h.filter,
        endStates: {
          closeBracket: 'identifier'
        }
      },
      subExpression: {
        subHandler: h.subExpression,
        endStates: {
          closeParen: 'expectBinOp'
        }
      },
      argVal: {
        subHandler: h.argVal,
        endStates: {
          comma: 'argVal',
          closeParen: 'postArgs'
        }
      },
      objVal: {
        subHandler: h.objVal,
        endStates: {
          comma: 'expectObjKey',
          closeCurl: 'expectBinOp'
        }
      },
      arrayVal: {
        subHandler: h.arrayVal,
        endStates: {
          comma: 'arrayVal',
          closeBracket: 'expectBinOp'
        }
      },
      ternaryMid: {
        subHandler: h.ternaryMid,
        endStates: {
          colon: 'ternaryEnd'
        }
      },
      ternaryEnd: {
        subHandler: h.ternaryEnd,
        completable: true
      }
    };

    var _interopRequireDefault$T = interopRequireDefault.exports;

    var _classCallCheck2$a = _interopRequireDefault$T(classCallCheck.exports);

    var _createClass2$9 = _interopRequireDefault$T(createClass.exports);

    /*
     * Jexl
     * Copyright 2020 Tom Shawver
     */
    var handlers = handlers$1;

    var states = states$1.states;
    /**
     * The Parser is a state machine that converts tokens from the {@link Lexer}
     * into an Abstract Syntax Tree (AST), capable of being evaluated in any
     * context by the {@link Evaluator}.  The Parser expects that all tokens
     * provided to it are legal and typed properly according to the grammar, but
     * accepts that the tokens may still be in an invalid order or in some other
     * unparsable configuration that requires it to throw an Error.
     * @param {{}} grammar The grammar object to use to parse Jexl strings
     * @param {string} [prefix] A string prefix to prepend to the expression string
     *      for error messaging purposes.  This is useful for when a new Parser is
     *      instantiated to parse an subexpression, as the parent Parser's
     *      expression string thus far can be passed for a more user-friendly
     *      error message.
     * @param {{}} [stopMap] A mapping of token types to any truthy value. When the
     *      token type is encountered, the parser will return the mapped value
     *      instead of boolean false.
     */


    var Parser$1 = /*#__PURE__*/function () {
      function Parser(grammar, prefix, stopMap) {
        (0, _classCallCheck2$a.default)(this, Parser);
        this._grammar = grammar;
        this._state = 'expectOperand';
        this._tree = null;
        this._exprStr = prefix || '';
        this._relative = false;
        this._stopMap = stopMap || {};
      }
      /**
       * Processes a new token into the AST and manages the transitions of the state
       * machine.
       * @param {{type: <string>}} token A token object, as provided by the
       *      {@link Lexer#tokenize} function.
       * @throws {Error} if a token is added when the Parser has been marked as
       *      complete by {@link #complete}, or if an unexpected token type is added.
       * @returns {boolean|*} the stopState value if this parser encountered a token
       *      in the stopState mapb false if tokens can continue.
       */


      (0, _createClass2$9.default)(Parser, [{
        key: "addToken",
        value: function addToken(token) {
          if (this._state === 'complete') {
            throw new Error('Cannot add a new token to a completed Parser');
          }

          var state = states[this._state];
          var startExpr = this._exprStr;
          this._exprStr += token.raw;

          if (state.subHandler) {
            if (!this._subParser) {
              this._startSubExpression(startExpr);
            }

            var stopState = this._subParser.addToken(token);

            if (stopState) {
              this._endSubExpression();

              if (this._parentStop) return stopState;
              this._state = stopState;
            }
          } else if (state.tokenTypes[token.type]) {
            var typeOpts = state.tokenTypes[token.type];
            var handleFunc = handlers[token.type];

            if (typeOpts.handler) {
              handleFunc = typeOpts.handler;
            }

            if (handleFunc) {
              handleFunc.call(this, token);
            }

            if (typeOpts.toState) {
              this._state = typeOpts.toState;
            }
          } else if (this._stopMap[token.type]) {
            return this._stopMap[token.type];
          } else {
            throw new Error("Token ".concat(token.raw, " (").concat(token.type, ") unexpected in expression: ").concat(this._exprStr));
          }

          return false;
        }
        /**
         * Processes an array of tokens iteratively through the {@link #addToken}
         * function.
         * @param {Array<{type: <string>}>} tokens An array of tokens, as provided by
         *      the {@link Lexer#tokenize} function.
         */

      }, {
        key: "addTokens",
        value: function addTokens(tokens) {
          tokens.forEach(this.addToken, this);
        }
        /**
         * Marks this Parser instance as completed and retrieves the full AST.
         * @returns {{}|null} a full expression tree, ready for evaluation by the
         *      {@link Evaluator#eval} function, or null if no tokens were passed to
         *      the parser before complete was called
         * @throws {Error} if the parser is not in a state where it's legal to end
         *      the expression, indicating that the expression is incomplete
         */

      }, {
        key: "complete",
        value: function complete() {
          if (this._cursor && !states[this._state].completable) {
            throw new Error("Unexpected end of expression: ".concat(this._exprStr));
          }

          if (this._subParser) {
            this._endSubExpression();
          }

          this._state = 'complete';
          return this._cursor ? this._tree : null;
        }
        /**
         * Indicates whether the expression tree contains a relative path identifier.
         * @returns {boolean} true if a relative identifier exists false otherwise.
         */

      }, {
        key: "isRelative",
        value: function isRelative() {
          return this._relative;
        }
        /**
         * Ends a subexpression by completing the subParser and passing its result
         * to the subHandler configured in the current state.
         * @private
         */

      }, {
        key: "_endSubExpression",
        value: function _endSubExpression() {
          states[this._state].subHandler.call(this, this._subParser.complete());

          this._subParser = null;
        }
        /**
         * Places a new tree node at the current position of the cursor (to the 'right'
         * property) and then advances the cursor to the new node. This function also
         * handles setting the parent of the new node.
         * @param {{type: <string>}} node A node to be added to the AST
         * @private
         */

      }, {
        key: "_placeAtCursor",
        value: function _placeAtCursor(node) {
          if (!this._cursor) {
            this._tree = node;
          } else {
            this._cursor.right = node;

            this._setParent(node, this._cursor);
          }

          this._cursor = node;
        }
        /**
         * Places a tree node before the current position of the cursor, replacing
         * the node that the cursor currently points to. This should only be called in
         * cases where the cursor is known to exist, and the provided node already
         * contains a pointer to what's at the cursor currently.
         * @param {{type: <string>}} node A node to be added to the AST
         * @private
         */

      }, {
        key: "_placeBeforeCursor",
        value: function _placeBeforeCursor(node) {
          this._cursor = this._cursor._parent;

          this._placeAtCursor(node);
        }
        /**
         * Sets the parent of a node by creating a non-enumerable _parent property
         * that points to the supplied parent argument.
         * @param {{type: <string>}} node A node of the AST on which to set a new
         *      parent
         * @param {{type: <string>}} parent An existing node of the AST to serve as the
         *      parent of the new node
         * @private
         */

      }, {
        key: "_setParent",
        value: function _setParent(node, parent) {
          Object.defineProperty(node, '_parent', {
            value: parent,
            writable: true
          });
        }
        /**
         * Prepares the Parser to accept a subexpression by (re)instantiating the
         * subParser.
         * @param {string} [exprStr] The expression string to prefix to the new Parser
         * @private
         */

      }, {
        key: "_startSubExpression",
        value: function _startSubExpression(exprStr) {
          var endStates = states[this._state].endStates;

          if (!endStates) {
            this._parentStop = true;
            endStates = this._stopMap;
          }

          this._subParser = new Parser(this._grammar, exprStr, endStates);
        }
      }]);
      return Parser;
    }();

    var Parser_1 = Parser$1;

    var _interopRequireDefault$S = interopRequireDefault.exports;

    var _classCallCheck2$9 = _interopRequireDefault$S(classCallCheck.exports);

    var _createClass2$8 = _interopRequireDefault$S(createClass.exports);

    /*
     * Jexl
     * Copyright 2020 Tom Shawver
     */
    var PromiseSync$1 = /*#__PURE__*/function () {
      function PromiseSync(fn) {
        (0, _classCallCheck2$9.default)(this, PromiseSync);
        fn(this._resolve.bind(this), this._reject.bind(this));
      }

      (0, _createClass2$8.default)(PromiseSync, [{
        key: "catch",
        value: function _catch(rejected) {
          if (this.error) {
            try {
              this._resolve(rejected(this.error));
            } catch (e) {
              this._reject(e);
            }
          }

          return this;
        }
      }, {
        key: "then",
        value: function then(resolved, rejected) {
          if (!this.error) {
            try {
              this._resolve(resolved(this.value));
            } catch (e) {
              this._reject(e);
            }
          }

          if (rejected) this.catch(rejected);
          return this;
        }
      }, {
        key: "_reject",
        value: function _reject(error) {
          this.value = undefined;
          this.error = error;
        }
      }, {
        key: "_resolve",
        value: function _resolve(val) {
          if (val instanceof PromiseSync) {
            if (val.error) {
              this._reject(val.error);
            } else {
              this._resolve(val.value);
            }
          } else {
            this.value = val;
            this.error = undefined;
          }
        }
      }]);
      return PromiseSync;
    }();

    PromiseSync$1.all = function (vals) {
      return new PromiseSync$1(function (resolve) {
        var resolved = vals.map(function (val) {
          while (val instanceof PromiseSync$1) {
            if (val.error) throw Error(val.error);
            val = val.value;
          }

          return val;
        });
        resolve(resolved);
      });
    };

    PromiseSync$1.resolve = function (val) {
      return new PromiseSync$1(function (resolve) {
        return resolve(val);
      });
    };

    PromiseSync$1.reject = function (error) {
      return new PromiseSync$1(function (resolve, reject) {
        return reject(error);
      });
    };

    var PromiseSync_1 = PromiseSync$1;

    var _interopRequireDefault$R = interopRequireDefault.exports;

    var _classCallCheck2$8 = _interopRequireDefault$R(classCallCheck.exports);

    var _createClass2$7 = _interopRequireDefault$R(createClass.exports);

    /*
     * Jexl
     * Copyright 2020 Tom Shawver
     */
    var Evaluator = Evaluator_1;

    var Lexer = Lexer_1;

    var Parser = Parser_1;

    var PromiseSync = PromiseSync_1;

    var Expression$1 = /*#__PURE__*/function () {
      function Expression(grammar, exprStr) {
        (0, _classCallCheck2$8.default)(this, Expression);
        this._grammar = grammar;
        this._exprStr = exprStr;
        this._ast = null;
      }
      /**
       * Forces a compilation of the expression string that this Expression object
       * was constructed with. This function can be called multiple times; useful
       * if the language elements of the associated Jexl instance change.
       * @returns {Expression} this Expression instance, for convenience
       */


      (0, _createClass2$7.default)(Expression, [{
        key: "compile",
        value: function compile() {
          var lexer = new Lexer(this._grammar);
          var parser = new Parser(this._grammar);
          var tokens = lexer.tokenize(this._exprStr);
          parser.addTokens(tokens);
          this._ast = parser.complete();
          return this;
        }
        /**
         * Asynchronously evaluates the expression within an optional context.
         * @param {Object} [context] A mapping of variables to values, which will be
         *      made accessible to the Jexl expression when evaluating it
         * @returns {Promise<*>} resolves with the result of the evaluation.
         */

      }, {
        key: "eval",
        value: function _eval() {
          var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          return this._eval(context, Promise);
        }
        /**
         * Synchronously evaluates the expression within an optional context.
         * @param {Object} [context] A mapping of variables to values, which will be
         *      made accessible to the Jexl expression when evaluating it
         * @returns {*} the result of the evaluation.
         * @throws {*} on error
         */

      }, {
        key: "evalSync",
        value: function evalSync() {
          var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

          var res = this._eval(context, PromiseSync);

          if (res.error) throw res.error;
          return res.value;
        }
      }, {
        key: "_eval",
        value: function _eval(context, promise) {
          var _this = this;

          return promise.resolve().then(function () {
            var ast = _this._getAst();

            var evaluator = new Evaluator(_this._grammar, context, undefined, promise);
            return evaluator.eval(ast);
          });
        }
      }, {
        key: "_getAst",
        value: function _getAst() {
          if (!this._ast) this.compile();
          return this._ast;
        }
      }]);
      return Expression;
    }();

    var Expression_1 = Expression$1;

    var grammar = {};

    /*
     * Jexl
     * Copyright 2020 Tom Shawver
     */

    /* eslint eqeqeq:0 */
    grammar.getGrammar = function () {
      return {
        /**
         * A map of all expression elements to their properties. Note that changes
         * here may require changes in the Lexer or Parser.
         * @type {{}}
         */
        elements: {
          '.': {
            type: 'dot'
          },
          '[': {
            type: 'openBracket'
          },
          ']': {
            type: 'closeBracket'
          },
          '|': {
            type: 'pipe'
          },
          '{': {
            type: 'openCurl'
          },
          '}': {
            type: 'closeCurl'
          },
          ':': {
            type: 'colon'
          },
          ',': {
            type: 'comma'
          },
          '(': {
            type: 'openParen'
          },
          ')': {
            type: 'closeParen'
          },
          '?': {
            type: 'question'
          },
          '+': {
            type: 'binaryOp',
            precedence: 30,
            eval: function _eval(left, right) {
              return left + right;
            }
          },
          '-': {
            type: 'binaryOp',
            precedence: 30,
            eval: function _eval(left, right) {
              return left - right;
            }
          },
          '*': {
            type: 'binaryOp',
            precedence: 40,
            eval: function _eval(left, right) {
              return left * right;
            }
          },
          '/': {
            type: 'binaryOp',
            precedence: 40,
            eval: function _eval(left, right) {
              return left / right;
            }
          },
          '//': {
            type: 'binaryOp',
            precedence: 40,
            eval: function _eval(left, right) {
              return Math.floor(left / right);
            }
          },
          '%': {
            type: 'binaryOp',
            precedence: 50,
            eval: function _eval(left, right) {
              return left % right;
            }
          },
          '^': {
            type: 'binaryOp',
            precedence: 50,
            eval: function _eval(left, right) {
              return Math.pow(left, right);
            }
          },
          '==': {
            type: 'binaryOp',
            precedence: 20,
            eval: function _eval(left, right) {
              return left == right;
            }
          },
          '!=': {
            type: 'binaryOp',
            precedence: 20,
            eval: function _eval(left, right) {
              return left != right;
            }
          },
          '>': {
            type: 'binaryOp',
            precedence: 20,
            eval: function _eval(left, right) {
              return left > right;
            }
          },
          '>=': {
            type: 'binaryOp',
            precedence: 20,
            eval: function _eval(left, right) {
              return left >= right;
            }
          },
          '<': {
            type: 'binaryOp',
            precedence: 20,
            eval: function _eval(left, right) {
              return left < right;
            }
          },
          '<=': {
            type: 'binaryOp',
            precedence: 20,
            eval: function _eval(left, right) {
              return left <= right;
            }
          },
          '&&': {
            type: 'binaryOp',
            precedence: 10,
            evalOnDemand: function evalOnDemand(left, right) {
              return left.eval().then(function (leftVal) {
                if (!leftVal) return leftVal;
                return right.eval();
              });
            }
          },
          '||': {
            type: 'binaryOp',
            precedence: 10,
            evalOnDemand: function evalOnDemand(left, right) {
              return left.eval().then(function (leftVal) {
                if (leftVal) return leftVal;
                return right.eval();
              });
            }
          },
          in: {
            type: 'binaryOp',
            precedence: 20,
            eval: function _eval(left, right) {
              if (typeof right === 'string') {
                return right.indexOf(left) !== -1;
              }

              if (Array.isArray(right)) {
                return right.some(function (elem) {
                  return elem === left;
                });
              }

              return false;
            }
          },
          '!': {
            type: 'unaryOp',
            precedence: Infinity,
            eval: function _eval(right) {
              return !right;
            }
          }
        },

        /**
         * A map of function names to javascript functions. A Jexl function
         * takes zero ore more arguemnts:
         *
         *     - {*} ...args: A variable number of arguments passed to this function.
         *       All of these are pre-evaluated to their actual values before calling
         *       the function.
         *
         * The Jexl function should return either the transformed value, or
         * a Promises/A+ Promise object that resolves with the value and rejects
         * or throws only when an unrecoverable error occurs. Functions should
         * generally return undefined when they don't make sense to be used on the
         * given value type, rather than throw/reject. An error is only
         * appropriate when the function would normally return a value, but
         * cannot due to some other failure.
         */
        functions: {},

        /**
         * A map of transform names to transform functions. A transform function
         * takes one ore more arguemnts:
         *
         *     - {*} val: A value to be transformed
         *     - {*} ...args: A variable number of arguments passed to this transform.
         *       All of these are pre-evaluated to their actual values before calling
         *       the function.
         *
         * The transform function should return either the transformed value, or
         * a Promises/A+ Promise object that resolves with the value and rejects
         * or throws only when an unrecoverable error occurs. Transforms should
         * generally return undefined when they don't make sense to be used on the
         * given value type, rather than throw/reject. An error is only
         * appropriate when the transform would normally return a value, but
         * cannot due to some other failure.
         */
        transforms: {}
      };
    };

    var _interopRequireDefault$Q = interopRequireDefault.exports;

    var _defineProperty2$c = _interopRequireDefault$Q(defineProperty$1.exports);

    var _classCallCheck2$7 = _interopRequireDefault$Q(classCallCheck.exports);

    var _createClass2$6 = _interopRequireDefault$Q(createClass.exports);

    /*
     * Jexl
     * Copyright 2020 Tom Shawver
     */
    var Expression = Expression_1;

    var _require$3 = grammar,
        getGrammar = _require$3.getGrammar;
    /**
     * Jexl is the Javascript Expression Language, capable of parsing and
     * evaluating basic to complex expression strings, combined with advanced
     * xpath-like drilldown into native Javascript objects.
     * @constructor
     */


    var Jexl = /*#__PURE__*/function () {
      function Jexl() {
        (0, _classCallCheck2$7.default)(this, Jexl);
        // Allow expr to be called outside of the jexl context
        this.expr = this.expr.bind(this);
        this._grammar = getGrammar();
      }
      /**
       * Adds a binary operator to Jexl at the specified precedence. The higher the
       * precedence, the earlier the operator is applied in the order of operations.
       * For example, * has a higher precedence than +, because multiplication comes
       * before division.
       *
       * Please see grammar.js for a listing of all default operators and their
       * precedence values in order to choose the appropriate precedence for the
       * new operator.
       * @param {string} operator The operator string to be added
       * @param {number} precedence The operator's precedence
       * @param {function} fn A function to run to calculate the result. The function
       *      will be called with two arguments: left and right, denoting the values
       *      on either side of the operator. It should return either the resulting
       *      value, or a Promise that resolves with the resulting value.
       * @param {boolean} [manualEval] If true, the `left` and `right` arguments
       *      will be wrapped in objects with an `eval` function. Calling
       *      left.eval() or right.eval() will return a promise that resolves to
       *      that operand's actual value. This is useful to conditionally evaluate
       *      operands.
       */


      (0, _createClass2$6.default)(Jexl, [{
        key: "addBinaryOp",
        value: function addBinaryOp(operator, precedence, fn, manualEval) {
          this._addGrammarElement(operator, (0, _defineProperty2$c.default)({
            type: 'binaryOp',
            precedence: precedence
          }, manualEval ? 'evalOnDemand' : 'eval', fn));
        }
        /**
         * Adds or replaces an expression function in this Jexl instance.
         * @param {string} name The name of the expression function, as it will be
         *      used within Jexl expressions
         * @param {function} fn The javascript function to be executed when this
         *      expression function is invoked. It will be provided with each argument
         *      supplied in the expression, in the same order.
         */

      }, {
        key: "addFunction",
        value: function addFunction(name, fn) {
          this._grammar.functions[name] = fn;
        }
        /**
         * Syntactic sugar for calling {@link #addFunction} repeatedly. This function
         * accepts a map of one or more expression function names to their javascript
         * function counterpart.
         * @param {{}} map A map of expression function names to javascript functions
         */

      }, {
        key: "addFunctions",
        value: function addFunctions(map) {
          for (var key in map) {
            this._grammar.functions[key] = map[key];
          }
        }
        /**
         * Adds a unary operator to Jexl. Unary operators are currently only supported
         * on the left side of the value on which it will operate.
         * @param {string} operator The operator string to be added
         * @param {function} fn A function to run to calculate the result. The function
         *      will be called with one argument: the literal value to the right of the
         *      operator. It should return either the resulting value, or a Promise
         *      that resolves with the resulting value.
         */

      }, {
        key: "addUnaryOp",
        value: function addUnaryOp(operator, fn) {
          this._addGrammarElement(operator, {
            type: 'unaryOp',
            weight: Infinity,
            eval: fn
          });
        }
        /**
         * Adds or replaces a transform function in this Jexl instance.
         * @param {string} name The name of the transform function, as it will be used
         *      within Jexl expressions
         * @param {function} fn The function to be executed when this transform is
         *      invoked. It will be provided with at least one argument:
         *          - {*} value: The value to be transformed
         *          - {...*} args: The arguments for this transform
         */

      }, {
        key: "addTransform",
        value: function addTransform(name, fn) {
          this._grammar.transforms[name] = fn;
        }
        /**
         * Syntactic sugar for calling {@link #addTransform} repeatedly.  This function
         * accepts a map of one or more transform names to their transform function.
         * @param {{}} map A map of transform names to transform functions
         */

      }, {
        key: "addTransforms",
        value: function addTransforms(map) {
          for (var key in map) {
            this._grammar.transforms[key] = map[key];
          }
        }
        /**
         * Creates an Expression object from the given Jexl expression string, and
         * immediately compiles it. The returned Expression object can then be
         * evaluated multiple times with new contexts, without generating any
         * additional string processing overhead.
         * @param {string} expression The Jexl expression to be compiled
         * @returns {Expression} The compiled Expression object
         */

      }, {
        key: "compile",
        value: function compile(expression) {
          var exprObj = this.createExpression(expression);
          return exprObj.compile();
        }
        /**
         * Constructs an Expression object from a Jexl expression string.
         * @param {string} expression The Jexl expression to be wrapped in an
         *    Expression object
         * @returns {Expression} The Expression object representing the given string
         */

      }, {
        key: "createExpression",
        value: function createExpression(expression) {
          return new Expression(this._grammar, expression);
        }
        /**
         * Retrieves a previously set expression function.
         * @param {string} name The name of the expression function
         * @returns {function} The expression function
         */

      }, {
        key: "getFunction",
        value: function getFunction(name) {
          return this._grammar.functions[name];
        }
        /**
         * Retrieves a previously set transform function.
         * @param {string} name The name of the transform function
         * @returns {function} The transform function
         */

      }, {
        key: "getTransform",
        value: function getTransform(name) {
          return this._grammar.transforms[name];
        }
        /**
         * Asynchronously evaluates a Jexl string within an optional context.
         * @param {string} expression The Jexl expression to be evaluated
         * @param {Object} [context] A mapping of variables to values, which will be
         *      made accessible to the Jexl expression when evaluating it
         * @returns {Promise<*>} resolves with the result of the evaluation.
         */

      }, {
        key: "eval",
        value: function _eval(expression) {
          var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
          var exprObj = this.createExpression(expression);
          return exprObj.eval(context);
        }
        /**
         * Synchronously evaluates a Jexl string within an optional context.
         * @param {string} expression The Jexl expression to be evaluated
         * @param {Object} [context] A mapping of variables to values, which will be
         *      made accessible to the Jexl expression when evaluating it
         * @returns {*} the result of the evaluation.
         * @throws {*} on error
         */

      }, {
        key: "evalSync",
        value: function evalSync(expression) {
          var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
          var exprObj = this.createExpression(expression);
          return exprObj.evalSync(context);
        }
        /**
         * A JavaScript template literal to allow expressions to be defined by the
         * syntax: expr`40 + 2`
         * @param {Array<string>} strs
         * @param  {...any} args
         */

      }, {
        key: "expr",
        value: function expr(strs) {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }

          var exprStr = strs.reduce(function (acc, str, idx) {
            var arg = idx < args.length ? args[idx] : '';
            acc += str + arg;
            return acc;
          }, '');
          return this.createExpression(exprStr);
        }
        /**
         * Removes a binary or unary operator from the Jexl grammar.
         * @param {string} operator The operator string to be removed
         */

      }, {
        key: "removeOp",
        value: function removeOp(operator) {
          if (this._grammar.elements[operator] && (this._grammar.elements[operator].type === 'binaryOp' || this._grammar.elements[operator].type === 'unaryOp')) {
            delete this._grammar.elements[operator];
          }
        }
        /**
         * Adds an element to the grammar map used by this Jexl instance.
         * @param {string} str The key string to be added
         * @param {{type: <string>}} obj A map of configuration options for this
         *      grammar element
         * @private
         */

      }, {
        key: "_addGrammarElement",
        value: function _addGrammarElement(str, obj) {
          this._grammar.elements[str] = obj;
        }
      }]);
      return Jexl;
    }();

    Jexl$1.exports = new Jexl();
    Jexl$1.exports.Jexl = Jexl;

    var _interopRequireDefault$P = interopRequireDefault.exports;

    Object.defineProperty(jexl, "__esModule", {
      value: true
    });
    jexl.default = _default$A;

    var _jexl$1 = _interopRequireDefault$P(Jexl$1.exports);

    function
      /* config?: any*/
    _default$A() {
      var j = new _jexl$1.default.Jexl(); // someday will make sure all of configs callbacks are added in, including
      // ones passed in
      // below are core functions

      j.addFunction('get', function (feature, data) {
        return feature.get(data);
      });
      j.addFunction('id', function (feature) {
        return feature.id();
      }); // let user cast a jexl type into a javascript type
      // eslint-disable-next-line @typescript-eslint/no-explicit-any

      j.addFunction('cast', function (arg) {
        return arg;
      }); // logging

      j.addFunction('log', function (thing) {
        // eslint-disable-next-line no-console
        console.log(thing);
        return thing;
      }); // math
      // addfunction added in jexl 2.3 but types/jexl still on 2.2

      j.addFunction('max', Math.max);
      j.addFunction('min', Math.min);
      j.addFunction('sqrt', Math.sqrt);
      j.addFunction('ceil', Math.ceil);
      j.addFunction('floor', Math.floor);
      j.addFunction('round', Math.round);
      j.addFunction('abs', Math.abs);
      j.addFunction('log10', Math.log10);
      j.addFunction('parseInt', Number.parseInt);
      j.addFunction('parseFloat', Number.parseFloat); // string

      j.addFunction('split', function (str, char) {
        return str.split(char);
      });
      j.addFunction('charAt', function (str, index) {
        return str.charAt(index);
      });
      j.addFunction('charCodeAt', function (str, index) {
        return str.charCodeAt(index);
      });
      j.addFunction('codePointAt', function (str, pos) {
        return str.codePointAt(pos);
      });
      j.addFunction('startsWith', function (str, searchStr, length) {
        return str.startsWith(searchStr, length);
      });
      j.addFunction('endsWith', function (str, searchStr, length) {
        return str.endsWith(searchStr, length);
      });
      j.addFunction('padEnd', function (str, targetLength, padString) {
        return str.padEnd(targetLength, padString);
      });
      j.addFunction('padStart', function (str, targetLength, fillString) {
        return str.padStart(targetLength, fillString);
      });
      j.addFunction('repeat', function (str, count) {
        return str.repeat(count);
      });
      j.addFunction('replace', function (str, match, newSubStr) {
        return str.replace(match, newSubStr);
      });
      j.addFunction('replaceAll', function (str, match, newSubStr) {
        return str.replaceAll(match, newSubStr);
      });
      j.addFunction('slice', function (str, start, end) {
        return str.slice(start, end);
      });
      j.addFunction('startsWith', function (str, searchStr, position) {
        return str.startsWith(searchStr, position);
      });
      j.addFunction('substring', function (str, start, end) {
        return str.substring(start, end);
      });
      j.addFunction('toLowerCase', function (str) {
        return str.toLowerCase();
      });
      j.addFunction('toUpperCase', function (str) {
        return str.toUpperCase();
      });
      j.addFunction('trim', function (str) {
        str.trim();
      });
      j.addFunction('trimEnd', function (str) {
        return str.trimEnd();
      });
      j.addFunction('trimStart', function (str) {
        return str.trimStart();
      });
      j.addFunction('getTag', function (feature, str) {
        var tags = feature.get('tags');
        return tags ? tags[str] : feature.get(str);
      });
      j.addBinaryOp('&', 15, function (a, b) {
        return a & b;
      });
      return j;
    }

    var _interopRequireDefault$O = interopRequireDefault.exports;

    Object.defineProperty(jexlStrings, "__esModule", {
      value: true
    });
    jexlStrings.stringToJexlExpression = stringToJexlExpression;

    var _jexl = _interopRequireDefault$O(jexl);

    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    var compilationCache = {}; // revert function strings back to main, create a different file for jexlStrings.ts
    // pass the jexl property of the pluginManager as a param

    /**
     * compile a jexlExpression to a string
     *
     * @param str - string of code like `jexl:...`
     * @param options -
     */

    function stringToJexlExpression(str, // eslint-disable-next-line @typescript-eslint/no-explicit-any
    jexl) {
      var cacheKey = "nosig|".concat(str);

      if (!compilationCache[cacheKey]) {
        var match = str.startsWith('jexl:');

        if (!match) {
          throw new Error('string does not appear to be in jexl format');
        }

        var code = str.split('jexl:')[1];
        var compiled = jexl ? jexl.compile("".concat(code)) : (0, _jexl.default)().compile("".concat(code));
        compilationCache[cacheKey] = compiled;
      }

      return compilationCache[cacheKey];
    }

    var _interopRequireDefault$N = interopRequireDefault.exports;

    Object.defineProperty(configurationSlot, "__esModule", {
      value: true
    });
    configurationSlot.default = ConfigSlot;

    var _typeof2$4 = _interopRequireDefault$N(_typeof$e.exports);

    var _mobxStateTree$8 = require$$0$1;

    var _jexlStrings = jexlStrings;

    var _mst$2 = mst;

    /* eslint-disable @typescript-eslint/no-explicit-any */
    function
      /* str */
    isValidColorString() {
      // TODO: check all the crazy cases for whether it's a valid HTML/CSS color string
      return true;
    }

    var typeModels = {
      stringArray: _mobxStateTree$8.types.array(_mobxStateTree$8.types.string),
      stringArrayMap: _mobxStateTree$8.types.map(_mobxStateTree$8.types.array(_mobxStateTree$8.types.string)),
      numberMap: _mobxStateTree$8.types.map(_mobxStateTree$8.types.number),
      boolean: _mobxStateTree$8.types.boolean,
      color: _mobxStateTree$8.types.refinement('Color', _mobxStateTree$8.types.string, isValidColorString),
      integer: _mobxStateTree$8.types.integer,
      number: _mobxStateTree$8.types.number,
      string: _mobxStateTree$8.types.string,
      text: _mobxStateTree$8.types.string,
      fileLocation: _mst$2.FileLocation,
      frozen: _mobxStateTree$8.types.frozen()
    }; // default values we use if the defaultValue is malformed or does not work

    var fallbackDefaults = {
      stringArray: [],
      stringArrayMap: {},
      numberMap: {},
      boolean: true,
      color: 'black',
      integer: 1,
      number: 1,
      string: '',
      text: '',
      fileLocation: {
        uri: '/path/to/resource.txt',
        locationType: 'UriLocation'
      },
      frozen: {}
    };

    var literalJSON = function literalJSON(self) {
      return {
        views: {
          get valueJSON() {
            return self.value;
          }

        }
      };
    };

    var objectJSON = function objectJSON(self) {
      return {
        views: {
          get valueJSON() {
            return JSON.stringify(self.value);
          }

        }
      };
    }; // custom actions for modifying the value models


    var typeModelExtensions = {
      fileLocation: objectJSON,
      number: literalJSON,
      integer: literalJSON,
      boolean: literalJSON,
      frozen: objectJSON,
      // special actions for working with stringArray slots
      stringArray: function stringArray(self) {
        return {
          views: {
            get valueJSON() {
              return JSON.stringify(self.value);
            }

          },
          actions: {
            add: function add(val) {
              self.value.push(val);
            },
            removeAtIndex: function removeAtIndex(idx) {
              self.value.splice(idx, 1);
            },
            setAtIndex: function setAtIndex(idx, val) {
              self.value[idx] = val;
            }
          }
        };
      },
      stringArrayMap: function stringArrayMap(self) {
        return {
          views: {
            get valueJSON() {
              return JSON.stringify(self.value);
            }

          },
          actions: {
            add: function add(key, val) {
              self.value.set(key, val);
            },
            remove: function remove(key) {
              self.value.delete(key);
            },
            addToKey: function addToKey(key, val) {
              var ar = self.value.get(key);

              if (!ar) {
                throw new Error("".concat(key, " not found"));
              }

              ar.push(val);
            },
            removeAtKeyIndex: function removeAtKeyIndex(key, idx) {
              var ar = self.value.get(key);

              if (!ar) {
                throw new Error("".concat(key, " not found"));
              }

              ar.splice(idx, 1);
            },
            setAtKeyIndex: function setAtKeyIndex(key, idx, val) {
              var ar = self.value.get(key);

              if (!ar) {
                throw new Error("".concat(key, " not found"));
              }

              ar[idx] = val;
            }
          }
        };
      },
      numberMap: function numberMap(self) {
        return {
          views: {
            get valueJSON() {
              return JSON.stringify(self.value);
            }

          },
          actions: {
            add: function add(key, val) {
              self.value.set(key, val);
            },
            remove: function remove(key) {
              self.value.delete(key);
            }
          }
        };
      }
    }; // const FunctionStringType = types.refinement(
    //   'FunctionString',
    //   types.string,
    //   str => functionRegexp.test(str),
    // )

    var JexlStringType = _mobxStateTree$8.types.refinement('JexlString', _mobxStateTree$8.types.string, function (str) {
      return str.startsWith('jexl:');
    });

    /**
     * builds a MST model for a configuration slot
     *
     * @param slotName -
     * @param  definition -
     */
    function ConfigSlot(slotName, _ref) {
      var _ref$description = _ref.description,
          description = _ref$description === void 0 ? '' : _ref$description,
          model = _ref.model,
          type = _ref.type,
          defaultValue = _ref.defaultValue,
          _ref$contextVariable = _ref.contextVariable,
          contextVariable = _ref$contextVariable === void 0 ? [] : _ref$contextVariable;

      if (!type) {
        throw new Error('type name required');
      }

      if (!model) {
        model = typeModels[type];
      }

      if (!model) {
        throw new Error("no builtin config slot type \"".concat(type, "\", and no 'model' param provided"));
      }

      if (defaultValue === undefined) {
        throw new Error("no 'defaultValue' provided");
      } // if the `type` is something like `color`, then the model name
      // here will be `ColorConfigSlot`


      var configSlotModelName = "".concat(slotName.charAt(0).toUpperCase()).concat(slotName.slice(1), "ConfigSlot");

      var slot = _mobxStateTree$8.types.model(configSlotModelName, {
        name: _mobxStateTree$8.types.literal(slotName),
        description: _mobxStateTree$8.types.literal(description),
        type: _mobxStateTree$8.types.literal(type),
        value: _mobxStateTree$8.types.optional(_mobxStateTree$8.types.union(JexlStringType, model), defaultValue)
      }).volatile(function () {
        return {
          contextVariable: contextVariable
        };
      }).views(function (self) {
        return {
          get isCallback() {
            return String(self.value).startsWith('jexl:');
          }

        };
      }).views(function (self) {
        return {
          get expr() {
            if (self.isCallback) {
              // compile as jexl function
              var _getEnv = (0, _mobxStateTree$8.getEnv)(self),
                  pluginManager = _getEnv.pluginManager;

              if (!pluginManager && typeof jest === 'undefined') {
                console.warn('no pluginManager detected on config env (if you dynamically instantiate a config, for example in renderProps for your display model, check that you add the env argument)');
              }

              return (0, _jexlStrings.stringToJexlExpression)(String(self.value), pluginManager === null || pluginManager === void 0 ? void 0 : pluginManager.jexl);
            }

            return {
              evalSync: function evalSync() {
                return self.value;
              }
            };
          },

          // JS representation of the value of this slot, suitable
          // for embedding in either JSON or a JS function string.
          // many of the data types override this in typeModelExtensions
          get valueJSON() {
            if (self.isCallback) {
              return undefined;
            }

            function json(value) {
              if (value && value.toJSON) {
                return value.toJSON();
              }

              return "\"".concat(value, "\"");
            }

            return json(self.value);
          }

        };
      }).preProcessSnapshot(function (val) {
        return (0, _typeof2$4.default)(val) === 'object' && val.name === slotName ? val : {
          name: slotName,
          description: description,
          type: type,
          value: val
        };
      }).postProcessSnapshot(function (snap) {
        if ((0, _typeof2$4.default)(snap.value) === 'object') {
          return JSON.stringify(snap.value) !== JSON.stringify(defaultValue) ? snap.value : undefined;
        }

        return snap.value !== defaultValue ? snap.value : undefined;
      }).actions(function (self) {
        return {
          set: function set(newVal) {
            self.value = newVal;
          },
          reset: function reset() {
            self.value = defaultValue;
          },
          convertToCallback: function convertToCallback() {
            if (self.isCallback) {
              return;
            }

            self.value = "jexl:".concat(self.valueJSON || "''");
          },
          convertToValue: function convertToValue() {
            if (!self.isCallback) {
              return;
            } // try calling it with no arguments


            try {
              var funcResult = self.expr.evalSync();

              if (funcResult !== undefined) {
                self.value = funcResult;
                return;
              }
            } catch (e) {
              /* ignore */
            }

            self.value = defaultValue; // if it is still a callback (happens if the defaultValue is a callback),
            // then use the last-resort fallback default
            // if defaultValue has jexl: string, run this part

            if (self.isCallback) {
              if (!(type in fallbackDefaults)) {
                throw new Error("no fallbackDefault defined for type ".concat(type));
              }

              self.value = fallbackDefaults[type];
            }
          }
        };
      }); // if there are any type-specific extensions (views or actions)
      //  to the slot, add those in


      if (typeModelExtensions[type]) {
        slot = slot.extend(typeModelExtensions[type]);
      }

      var completeModel = _mobxStateTree$8.types.optional(slot, {
        name: slotName,
        type: type,
        description: description,
        value: defaultValue
      });

      var m = completeModel;
      Object.defineProperty(m, 'isJBrowseConfigurationSlot', {
        value: true
      });
      return m;
    }

    var util$4 = {};

    var mstReflection = {};

    Object.defineProperty(mstReflection, "__esModule", {
      value: true
    });
    mstReflection.getDefaultValue = getDefaultValue;
    mstReflection.getEnumerationValues = getEnumerationValues;
    mstReflection.getPropertyType = getPropertyType;
    mstReflection.getSubType = getSubType;
    mstReflection.getUnionSubTypes = getUnionSubTypes;
    mstReflection.resolveLateType = resolveLateType;

    var _mobxStateTree$7 = require$$0$1;

    /* eslint-disable no-underscore-dangle */

    /**
     * get the inner type of an MST optional, array, or late type object
     *
     * @param {IModelType} type
     * @returns {IModelType}
     */
    function getSubType(type) {
      var t;

      if ((0, _mobxStateTree$7.isOptionalType)(type)) {
        t = type._subtype || type.type;
      } else if ((0, _mobxStateTree$7.isArrayType)(type) || (0, _mobxStateTree$7.isMapType)(type)) {
        t = type._subtype || type._subType || type.subType;
      } else if (typeof type.getSubType === 'function') {
        return type.getSubType();
      } else {
        throw new TypeError('unsupported mst type');
      }

      if (!t) {
        // debugger
        throw new Error('failed to get subtype');
      }

      return t;
    }
    /**
     * get the array of
     * @param {MST Union Type obj} unionType
     * @returns {Array<IModelType>}
     */


    function getUnionSubTypes(unionType) {
      if (!(0, _mobxStateTree$7.isUnionType)(unionType)) {
        throw new TypeError('not an MST union type');
      }

      var t = unionType._types || unionType.types || getSubType(unionType)._types || getSubType(unionType).types;

      if (!t) {
        // debugger
        throw new Error('failed to extract subtypes from mst union');
      }

      return t;
    }
    /**
     * get the type of one of the properties of the given MST model type
     *
     * @param {IModelType} type
     * @param {string} propertyName
     * @returns {IModelType}
     */


    function getPropertyType(type, propertyName) {
      var propertyType = type.properties[propertyName];
      return propertyType;
    }
    /**
     * get the base type from inside an MST optional type
     * @param {*} type
     */


    function getDefaultValue(type) {
      if (!(0, _mobxStateTree$7.isOptionalType)(type)) {
        throw new TypeError('type must be an optional type');
      }

      return type._defaultValue || type.defaultValue;
    }
    /** get the string values of an MST enumeration type */


    function getEnumerationValues(type) {
      var subtypes = getUnionSubTypes(type); // the subtypes should all be literals with a value member

      return subtypes.map(function (t) {
        return t.value;
      });
    }

    function resolveLateType(maybeLate) {
      if (!(0, _mobxStateTree$7.isUnionType)(maybeLate) && !(0, _mobxStateTree$7.isArrayType)(maybeLate) && (0, _mobxStateTree$7.isLateType)(maybeLate)) {
        return maybeLate.getSubType();
      }

      return maybeLate;
    }

    var _interopRequireDefault$M = interopRequireDefault.exports;

    Object.defineProperty(util$4, "__esModule", {
      value: true
    });
    util$4.getConf = getConf;
    util$4.getTypeNamesFromExplicitlyTypedUnion = getTypeNamesFromExplicitlyTypedUnion;
    util$4.isBareConfigurationSchemaType = isBareConfigurationSchemaType;
    util$4.isConfigurationModel = isConfigurationModel;
    util$4.isConfigurationSchemaType = isConfigurationSchemaType;
    util$4.isConfigurationSlotType = isConfigurationSlotType;
    util$4.readConfObject = readConfObject;

    var _typeof2$3 = _interopRequireDefault$M(_typeof$e.exports);

    var _toConsumableArray2$7 = _interopRequireDefault$M(toConsumableArray.exports);

    var _mobxStateTree$6 = require$$0$1;

    var _mstReflection = mstReflection;

    /**
     * given a configuration model (an instance of a ConfigurationSchema),
     * read the configuration variable at the given path
     *
     * @param model - instance of ConfigurationSchema
     * @param slotPaths - array of paths to read
     * @param args - extra arguments e.g. for a feature callback,
     *  will be sent to each of the slotNames
     */
    function readConfObject(confObject) {
      var slotPath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
      var args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      if (!confObject) {
        throw new TypeError('must provide conf object to read');
      }

      if (!slotPath) {
        return JSON.parse(JSON.stringify((0, _mobxStateTree$6.getSnapshot)(confObject)));
      }

      if (typeof slotPath === 'string') {
        var slot = confObject[slotPath]; // check for the subconf being a map if we don't find it immediately

        if (!slot && (0, _mobxStateTree$6.isStateTreeNode)(confObject) && (0, _mobxStateTree$6.isMapType)((0, _mobxStateTree$6.getType)(confObject))) {
          slot = confObject.get(slotPath);
        }

        if (!slot) {
          return undefined; // if we want to be very strict about config slots, we could uncomment the below
          // instead of returning undefine
          //
          // const modelType = getType(model)
          // const schemaType = model.configuration && getType(model.configuration)
          // throw new Error(
          //   `no slot "${slotName}" found in ${modelType.name} configuration (${
          //     schemaType.name
          //   })`,
          // )
        }

        if (slot.expr) {
          var appliedFunc = slot.expr.evalSync(args);

          if ((0, _mobxStateTree$6.isStateTreeNode)(appliedFunc)) {
            return JSON.parse(JSON.stringify((0, _mobxStateTree$6.getSnapshot)(appliedFunc)));
          }

          return appliedFunc;
        }

        if ((0, _mobxStateTree$6.isStateTreeNode)(slot)) {
          return JSON.parse(JSON.stringify((0, _mobxStateTree$6.getSnapshot)(slot)));
        }

        return slot;
      }

      var slotName = slotPath[0];

      if (slotPath.length > 1) {
        var newPath = slotPath.slice(1);
        var subConf = confObject[slotName]; // check for the subconf being a map if we don't find it immediately

        if (!subConf && (0, _mobxStateTree$6.isStateTreeNode)(confObject) && (0, _mobxStateTree$6.isMapType)((0, _mobxStateTree$6.getType)(confObject))) {
          subConf = confObject.get(slotName);
        }

        if (!subConf) {
          return undefined;
        }

        return readConfObject(subConf, newPath, args);
      }

      return readConfObject(confObject, slotName, args);
    }
    /**
     * helper method for readConfObject, reads the config from a mst model
     *
     * @param model - object containing a 'configuration' member
     * @param slotPaths - array of paths to read
     * @param args - extra arguments e.g. for a feature callback,
     *   will be sent to each of the slotNames
     */


    function getConf(model) {
      var slotPath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
      var args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      if (!model) {
        throw new TypeError('must provide a model object');
      }

      var _ref = model,
          configuration = _ref.configuration;

      if (isConfigurationModel(configuration)) {
        return readConfObject(configuration, slotPath, args);
      }

      throw new TypeError('cannot getConf on this model, it has no configuration');
    }
    /**
     * given a union of explicitly typed configuration schema types,
     * extract an array of the type names contained in the union
     *
     * @param unionType -
     * @returns Array of type names contained in the union
     */


    function getTypeNamesFromExplicitlyTypedUnion(maybeUnionType) {
      if ((0, _mobxStateTree$6.isType)(maybeUnionType)) {
        maybeUnionType = (0, _mstReflection.resolveLateType)(maybeUnionType); // @ts-ignore

        if ((0, _mobxStateTree$6.isUnionType)(maybeUnionType)) {
          var typeNames = [];
          (0, _mstReflection.getUnionSubTypes)(maybeUnionType).forEach(function (type) {
            type = (0, _mstReflection.resolveLateType)(type);
            var typeName = getTypeNamesFromExplicitlyTypedUnion(type);

            if (!typeName.length) {
              var def = (0, _mstReflection.getDefaultValue)(type);
              typeName = [def.type];
            }

            if (!typeName[0]) {
              // debugger
              throw new Error("invalid config schema type ".concat(type));
            }

            typeNames.push.apply(typeNames, (0, _toConsumableArray2$7.default)(typeName));
          });
          return typeNames;
        }
      }

      return [];
    }

    function isBareConfigurationSchemaType(thing) {
      if ((0, _mobxStateTree$6.isType)(thing)) {
        if ((0, _mobxStateTree$6.isModelType)(thing) && ('isJBrowseConfigurationSchema' in thing || thing.name.includes('ConfigurationSchema'))) {
          return true;
        } // if it's a late type, assume its a config schema


        if ((0, _mobxStateTree$6.isLateType)(thing)) {
          return true;
        }
      }

      return false;
    }

    function isConfigurationSchemaType(thing) {
      if (!(0, _mobxStateTree$6.isType)(thing)) {
        return false;
      } // written as a series of if-statements instead of a big logical OR
      // because this construction gives much better debugging backtraces.
      // also, note that the order of these statements matters, because
      // for example some union types are also optional types


      if (isBareConfigurationSchemaType(thing)) {
        return true;
      }

      if ((0, _mobxStateTree$6.isUnionType)(thing)) {
        return (0, _mstReflection.getUnionSubTypes)(thing).every(function (t) {
          return isConfigurationSchemaType(t) || t.name === 'undefined';
        });
      }

      if ((0, _mobxStateTree$6.isOptionalType)(thing) && isConfigurationSchemaType((0, _mstReflection.getSubType)(thing))) {
        return true;
      }

      if ((0, _mobxStateTree$6.isArrayType)(thing) && isConfigurationSchemaType((0, _mstReflection.getSubType)(thing))) {
        return true;
      }

      if ((0, _mobxStateTree$6.isMapType)(thing) && isConfigurationSchemaType((0, _mstReflection.getSubType)(thing))) {
        return true;
      }

      return false;
    }

    function isConfigurationModel(thing) {
      return (0, _mobxStateTree$6.isStateTreeNode)(thing) && isConfigurationSchemaType((0, _mobxStateTree$6.getType)(thing));
    }

    function isConfigurationSlotType(thing) {
      return (0, _typeof2$3.default)(thing) === 'object' && thing !== null && 'isJBrowseConfigurationSlot' in thing;
    }

    var _interopRequireDefault$L = interopRequireDefault.exports;

    Object.defineProperty(configurationSchema, "__esModule", {
      value: true
    });
    configurationSchema.ConfigurationReference = ConfigurationReference;
    configurationSchema.ConfigurationSchema = ConfigurationSchema;

    var _slicedToArray2$g = _interopRequireDefault$L(slicedToArray.exports);

    var _defineProperty2$b = _interopRequireDefault$L(defineProperty$1.exports);

    var _typeof2$2 = _interopRequireDefault$L(_typeof$e.exports);

    var _mobxStateTree$5 = require$$0$1;

    var _mst$1 = mst;

    var _configurationSlot = _interopRequireDefault$L(configurationSlot);

    var _util$4 = util$4;

    function ownKeys$a(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

    function _objectSpread$a(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$a(Object(source), true).forEach(function (key) { (0, _defineProperty2$b.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$a(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

    function isEmptyObject(thing) {
      return (0, _typeof2$2.default)(thing) === 'object' && !Array.isArray(thing) && thing !== null && Object.keys(thing).length === 0;
    }

    function isEmptyArray(thing) {
      return Array.isArray(thing) && thing.length === 0;
    }

    function preprocessConfigurationSchemaArguments(modelName, inputSchemaDefinition) {
      var inputOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      if (typeof modelName !== 'string') {
        throw new Error('first arg must be string name of the model that this config schema goes with');
      } // if we have a base configuration schema that we are
      // extending, grab the slot definitions from that


      var schemaDefinition = inputSchemaDefinition;
      var options = inputOptions;

      if (inputOptions.baseConfiguration && inputOptions.baseConfiguration.jbrowseSchemaDefinition) {
        schemaDefinition = _objectSpread$a(_objectSpread$a({}, inputOptions.baseConfiguration.jbrowseSchemaDefinition), schemaDefinition);
        options = _objectSpread$a(_objectSpread$a({}, inputOptions.baseConfiguration.jbrowseSchemaOptions || {}), inputOptions);
        delete options.baseConfiguration;
      }

      return {
        schemaDefinition: schemaDefinition,
        options: options
      };
    }

    function makeConfigurationSchemaModel(modelName, schemaDefinition, options) {
      // now assemble the MST model of the configuration schema
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      var modelDefinition = {};
      var identifier;

      if (options.explicitlyTyped) {
        modelDefinition.type = _mobxStateTree$5.types.optional(_mobxStateTree$5.types.literal(modelName), modelName);
      }

      if (options.explicitIdentifier && options.implicitIdentifier) {
        throw new Error("Cannot have both explicit and implicit identifiers in ".concat(modelName));
      }

      if (options.explicitIdentifier) {
        if (typeof options.explicitIdentifier === 'string') {
          modelDefinition[options.explicitIdentifier] = _mobxStateTree$5.types.identifier;
          identifier = options.explicitIdentifier;
        } else {
          modelDefinition.id = _mobxStateTree$5.types.identifier;
          identifier = 'id';
        }
      } else if (options.implicitIdentifier) {
        if (typeof options.implicitIdentifier === 'string') {
          modelDefinition[options.implicitIdentifier] = _mst$1.ElementId;
          identifier = options.implicitIdentifier;
        } else {
          modelDefinition.id = _mst$1.ElementId;
          identifier = 'id';
        }
      } // eslint-disable-next-line @typescript-eslint/no-explicit-any


      var volatileConstants = {
        isJBrowseConfigurationSchema: true,
        jbrowseSchema: {
          modelName: modelName,
          definition: schemaDefinition,
          options: options
        }
      };
      Object.entries(schemaDefinition).forEach(function (_ref) {
        var _ref2 = (0, _slicedToArray2$g.default)(_ref, 2),
            slotName = _ref2[0],
            slotDefinition = _ref2[1];

        if ((0, _mobxStateTree$5.isType)(slotDefinition) && (0, _mobxStateTree$5.isLateType)(slotDefinition) || (0, _util$4.isConfigurationSchemaType)(slotDefinition)) {
          // this is either an MST late() type (which we assume to be a sub-configuration),
          // or an actual sub-configuration
          modelDefinition[slotName] = slotDefinition;
        } else if (typeof slotDefinition === 'string' || typeof slotDefinition === 'number') {
          volatileConstants[slotName] = slotDefinition;
        } else if ((0, _typeof2$2.default)(slotDefinition) === 'object') {
          // this is a slot definition
          if (!slotDefinition.type) {
            throw new Error("no type set for config slot ".concat(modelName, ".").concat(slotName));
          }

          try {
            modelDefinition[slotName] = (0, _configurationSlot.default)(slotName, slotDefinition);
          } catch (e) {
            throw new Error("invalid config slot definition for ".concat(modelName, ".").concat(slotName, ": ").concat(e));
          }
        } else {
          throw new Error("invalid configuration schema definition, \"".concat(slotName, "\" must be either a valid configuration slot definition, a constant, or a nested configuration schema"));
        }
      });

      var completeModel = _mobxStateTree$5.types.model("".concat(modelName, "ConfigurationSchema"), modelDefinition).actions(function (self) {
        return {
          setSubschema: function setSubschema(slotName, data) {
            if (!(0, _util$4.isConfigurationSchemaType)(modelDefinition[slotName])) {
              throw new Error("".concat(slotName, " is not a subschema, cannot replace"));
            }

            var newSchema = (0, _mobxStateTree$5.isStateTreeNode)(data) ? data : modelDefinition[slotName].create(data);
            self[slotName] = newSchema;
            return newSchema;
          }
        };
      });

      if (Object.keys(volatileConstants).length) {
        completeModel = completeModel.volatile(function
          /* self */
        () {
          return volatileConstants;
        });
      }

      if (options.actions) {
        completeModel = completeModel.actions(options.actions);
      }

      if (options.views) {
        completeModel = completeModel.views(options.views);
      }

      if (options.extend) {
        completeModel = completeModel.extend(options.extend);
      }

      var identifierDefault = identifier ? (0, _defineProperty2$b.default)({}, identifier, 'placeholderId') : {};
      var modelDefault = options.explicitlyTyped ? _objectSpread$a({
        type: modelName
      }, identifierDefault) : identifierDefault;
      var defaultSnap = (0, _mobxStateTree$5.getSnapshot)(completeModel.create(modelDefault));
      completeModel = completeModel.postProcessSnapshot(function (snap) {
        var newSnap = {};
        var matchesDefault = true; // let keyCount = 0

        for (var _i = 0, _Object$entries = Object.entries(snap); _i < _Object$entries.length; _i++) {
          var _Object$entries$_i = (0, _slicedToArray2$g.default)(_Object$entries[_i], 2),
              key = _Object$entries$_i[0],
              value = _Object$entries$_i[1];

          if (matchesDefault) {
            if ((0, _typeof2$2.default)(defaultSnap[key]) === 'object' && (0, _typeof2$2.default)(value) === 'object') {
              if (JSON.stringify(defaultSnap[key]) !== JSON.stringify(value)) {
                matchesDefault = false;
              }
            } else if (defaultSnap[key] !== value) {
              matchesDefault = false;
            }
          }

          if (value !== undefined && volatileConstants[key] === undefined && !isEmptyObject(value) && !isEmptyArray(value)) {
            // keyCount += 1
            newSnap[key] = value;
          }
        }

        if (matchesDefault) {
          return {};
        }

        return newSnap;
      });

      if (options.preProcessSnapshot) {
        completeModel = completeModel.preProcessSnapshot(options.preProcessSnapshot);
      }

      return _mobxStateTree$5.types.optional(completeModel, modelDefault);
    }

    function ConfigurationSchema(modelName, inputSchemaDefinition, inputOptions) {
      var _preprocessConfigurat = preprocessConfigurationSchemaArguments(modelName, inputSchemaDefinition, inputOptions),
          schemaDefinition = _preprocessConfigurat.schemaDefinition,
          options = _preprocessConfigurat.options;

      var schemaType = makeConfigurationSchemaModel(modelName, schemaDefinition, options); // saving a couple of jbrowse-specific things in the type object. hope nobody gets mad.

      schemaType.isJBrowseConfigurationSchema = true;
      schemaType.jbrowseSchemaDefinition = schemaDefinition;
      schemaType.jbrowseSchemaOptions = options;
      return schemaType;
    }

    function ConfigurationReference(schemaType) {
      return _mobxStateTree$5.types.union(_mobxStateTree$5.types.reference(schemaType), schemaType);
    }

    (function (exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _exportNames = {
      ConfigurationSchema: true,
      ConfigurationReference: true
    };
    Object.defineProperty(exports, "ConfigurationReference", {
      enumerable: true,
      get: function get() {
        return _configurationSchema.ConfigurationReference;
      }
    });
    Object.defineProperty(exports, "ConfigurationSchema", {
      enumerable: true,
      get: function get() {
        return _configurationSchema.ConfigurationSchema;
      }
    });

    var _configurationSchema = configurationSchema;

    var _util = util$4;

    Object.keys(_util).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _util[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
          return _util[key];
        }
      });
    });
    }(configuration));

    var DrawerWidget$1 = {};

    var Delete = {};

    var _interopRequireDefault$K = interopRequireDefault.exports;

    var _interopRequireWildcard$u = interopRequireWildcard.exports;

    Object.defineProperty(Delete, "__esModule", {
      value: true
    });
    var default_1$7 = Delete.default = void 0;

    var React$g = _interopRequireWildcard$u(React__default["default"]);

    var _createSvgIcon$g = _interopRequireDefault$K(createSvgIcon);

    var _default$z = (0, _createSvgIcon$g.default)( /*#__PURE__*/React$g.createElement("path", {
      d: "M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"
    }), 'Delete');

    default_1$7 = Delete.default = _default$z;

    var Close = {};

    var _interopRequireDefault$J = interopRequireDefault.exports;

    var _interopRequireWildcard$t = interopRequireWildcard.exports;

    Object.defineProperty(Close, "__esModule", {
      value: true
    });
    Close.default = void 0;

    var React$f = _interopRequireWildcard$t(React__default["default"]);

    var _createSvgIcon$f = _interopRequireDefault$J(createSvgIcon);

    var _default$y = (0, _createSvgIcon$f.default)( /*#__PURE__*/React$f.createElement("path", {
      d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
    }), 'Close');

    Close.default = _default$y;

    var Minimize = {};

    var _interopRequireDefault$I = interopRequireDefault.exports;

    var _interopRequireWildcard$s = interopRequireWildcard.exports;

    Object.defineProperty(Minimize, "__esModule", {
      value: true
    });
    Minimize.default = void 0;

    var React$e = _interopRequireWildcard$s(React__default["default"]);

    var _createSvgIcon$e = _interopRequireDefault$I(createSvgIcon);

    var _default$x = (0, _createSvgIcon$e.default)( /*#__PURE__*/React$e.createElement("path", {
      d: "M6 19h12v2H6z"
    }), 'Minimize');

    Minimize.default = _default$x;

    var MoreVert = {};

    var _interopRequireDefault$H = interopRequireDefault.exports;

    var _interopRequireWildcard$r = interopRequireWildcard.exports;

    Object.defineProperty(MoreVert, "__esModule", {
      value: true
    });
    MoreVert.default = void 0;

    var React$d = _interopRequireWildcard$r(React__default["default"]);

    var _createSvgIcon$d = _interopRequireDefault$H(createSvgIcon);

    var _default$w = (0, _createSvgIcon$d.default)( /*#__PURE__*/React$d.createElement("path", {
      d: "M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"
    }), 'MoreVert');

    MoreVert.default = _default$w;

    var Drawer$1 = {};

    var require$$2 = /*@__PURE__*/getAugmentedNamespace(Paper);

    var ResizeHandle$1 = {};

    var require$$14 = /*@__PURE__*/getAugmentedNamespace(clsx_m);

    var _interopRequireDefault$G = interopRequireDefault.exports;

    var _typeof$d = _typeof$e.exports;

    Object.defineProperty(ResizeHandle$1, "__esModule", {
      value: true
    });
    ResizeHandle$1.default = void 0;

    var _extends2$6 = _interopRequireDefault$G(_extends$1.exports);

    var _slicedToArray2$f = _interopRequireDefault$G(slicedToArray.exports);

    var _objectWithoutProperties2$4 = _interopRequireDefault$G(objectWithoutProperties.exports);

    var _react$k = _interopRequireWildcard$q(React__default["default"]);

    var _styles$6 = require$$11;

    var _clsx$1 = _interopRequireDefault$G(require$$14);

    var _excluded$5 = ["onDrag", "vertical", "flexbox", "className"];

    function _getRequireWildcardCache$d(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$d = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

    function _interopRequireWildcard$q(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof$d(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$d(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

    var useStyles$f = (0, _styles$6.makeStyles)({
      horizontalHandle: {
        cursor: 'row-resize',
        width: '100%'
      },
      verticalHandle: {
        cursor: 'col-resize',
        height: '100%'
      },
      flexbox_verticalHandle: {
        cursor: 'col-resize',
        alignSelf: 'stretch' // the height: 100% is actually unable to function inside flexbox

      },
      flexbox_horizontalHandle: {
        cursor: 'row-resize',
        alignSelf: 'stretch' // similar to above

      }
    });

    function ResizeHandle(_ref) {
      var onDrag = _ref.onDrag,
          _ref$vertical = _ref.vertical,
          vertical = _ref$vertical === void 0 ? false : _ref$vertical,
          _ref$flexbox = _ref.flexbox,
          flexbox = _ref$flexbox === void 0 ? false : _ref$flexbox,
          originalClassName = _ref.className,
          props = (0, _objectWithoutProperties2$4.default)(_ref, _excluded$5);

      var _useState = (0, _react$k.useState)(false),
          _useState2 = (0, _slicedToArray2$f.default)(_useState, 2),
          mouseDragging = _useState2[0],
          setMouseDragging = _useState2[1];

      var prevPos = (0, _react$k.useRef)(0);
      var classes = useStyles$f();
      (0, _react$k.useEffect)(function () {
        function mouseMove(event) {
          event.preventDefault();
          var pos = vertical ? event.clientX : event.clientY;
          var distance = pos - prevPos.current;

          if (distance) {
            onDrag(distance);
            prevPos.current = pos;
          }
        }

        function mouseUp() {
          setMouseDragging(false);
        }

        if (mouseDragging) {
          window.addEventListener('mousemove', mouseMove, true);
          window.addEventListener('mouseup', mouseUp, true);
          return function () {
            window.removeEventListener('mousemove', mouseMove, true);
            window.removeEventListener('mouseup', mouseUp, true);
          };
        }

        return function () {};
      }, [mouseDragging, onDrag, vertical]);
      var className;

      if (flexbox) {
        if (vertical) {
          className = classes.flexbox_verticalHandle;
        } else {
          className = classes.flexbox_horizontalHandle;
        }
      } else if (vertical) {
        className = classes.verticalHandle;
      } else {
        className = classes.horizontalHandle;
      }

      return /*#__PURE__*/_react$k.default.createElement("div", (0, _extends2$6.default)({
        "data-resizer": "true",
        onMouseDown: function onMouseDown(event) {
          event.preventDefault();
          prevPos.current = vertical ? event.clientX : event.clientY;
          setMouseDragging(true);
        },
        role: "presentation",
        className: (0, _clsx$1.default)(className, originalClassName)
      }, props));
    }

    var _default$v = ResizeHandle;
    ResizeHandle$1.default = _default$v;

    var _interopRequireDefault$F = interopRequireDefault.exports;

    Object.defineProperty(Drawer$1, "__esModule", {
      value: true
    });
    Drawer$1.default = void 0;

    var _react$j = _interopRequireDefault$F(React__default["default"]);

    var _Paper = _interopRequireDefault$F(require$$2);

    var _styles$5 = require$$11;

    var _mobxReact$9 = require$$13;

    var _ResizeHandle = _interopRequireDefault$F(ResizeHandle$1);

    var useStyles$e = (0, _styles$5.makeStyles)(function (theme) {
      return {
        paper: {
          overflowY: 'auto',
          height: '100%',
          zIndex: theme.zIndex.drawer,
          outline: 'none',
          background: theme.palette.background.default
        },
        resizeHandle: {
          width: 4,
          position: 'fixed',
          top: 0,
          zIndex: theme.zIndex.drawer + 1
        }
      };
    });

    function Drawer(_ref) {
      var children = _ref.children,
          session = _ref.session;
      var drawerPosition = session.drawerPosition,
          drawerWidth = session.drawerWidth;
      var classes = useStyles$e();
      return /*#__PURE__*/_react$j.default.createElement(_Paper.default, {
        className: classes.paper,
        elevation: 16,
        square: true
      }, drawerPosition === 'right' ? /*#__PURE__*/_react$j.default.createElement(_ResizeHandle.default, {
        onDrag: session.resizeDrawer,
        className: classes.resizeHandle,
        vertical: true
      }) : null, children, drawerPosition === 'left' ? /*#__PURE__*/_react$j.default.createElement(_ResizeHandle.default, {
        onDrag: session.resizeDrawer,
        className: classes.resizeHandle,
        style: {
          left: drawerWidth
        },
        vertical: true
      }) : null);
    }

    var _default$u = (0, _mobxReact$9.observer)(Drawer);

    Drawer$1.default = _default$u;

    var _interopRequireDefault$E = interopRequireDefault.exports;

    var _typeof$c = _typeof$e.exports;

    Object.defineProperty(DrawerWidget$1, "__esModule", {
      value: true
    });
    DrawerWidget$1.default = void 0;

    var _slicedToArray2$e = _interopRequireDefault$E(slicedToArray.exports);

    var _react$i = _interopRequireWildcard$p(React__default["default"]);

    var _core$a = require$$9$2;

    var _mobxReact$8 = require$$13;

    var _mobxStateTree$4 = require$$0$1;

    var _Delete = _interopRequireDefault$E(Delete);

    var _Close$2 = _interopRequireDefault$E(Close);

    var _Minimize = _interopRequireDefault$E(Minimize);

    var _MoreVert = _interopRequireDefault$E(MoreVert);

    var _Drawer = _interopRequireDefault$E(Drawer$1);

    function _getRequireWildcardCache$c(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$c = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

    function _interopRequireWildcard$p(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof$c(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$c(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

    // icons
    // locals
    var useStyles$d = (0, _core$a.makeStyles)(function (theme) {
      return {
        drawerActions: {
          float: 'right',
          '&:hover': {
            backgroundColor: (0, _core$a.alpha)(theme.palette.secondary.contrastText, theme.palette.action.hoverOpacity),
            '@media (hover: none)': {
              backgroundColor: 'transparent'
            }
          }
        },
        drawerToolbar: {
          paddingLeft: theme.spacing(2)
        },
        spacer: {
          flexGrow: 1
        },
        drawerSelect: {
          color: theme.palette.secondary.contrastText
        },
        drawerLoading: {
          margin: theme.spacing(2)
        },
        dropDownIcon: {
          color: theme.palette.secondary.contrastText
        },
        header: {
          background: theme.palette.secondary.main
        }
      };
    });
    var DrawerHeader = (0, _mobxReact$8.observer)(function (_ref) {
      var session = _ref.session,
          setToolbarHeight = _ref.setToolbarHeight;

      var _getEnv = (0, _mobxStateTree$4.getEnv)(session),
          pluginManager = _getEnv.pluginManager;

      var visibleWidget = session.visibleWidget,
          activeWidgets = session.activeWidgets,
          drawerPosition = session.drawerPosition;
      var classes = useStyles$d();

      var _React$useState = _react$i.default.useState(null),
          _React$useState2 = (0, _slicedToArray2$e.default)(_React$useState, 2),
          anchorEl = _React$useState2[0],
          setAnchorEl = _React$useState2[1];

      return /*#__PURE__*/_react$i.default.createElement(_core$a.AppBar, {
        position: "sticky",
        className: classes.header,
        ref: function ref(_ref2) {
          return setToolbarHeight((_ref2 === null || _ref2 === void 0 ? void 0 : _ref2.getBoundingClientRect().height) || 0);
        }
      }, /*#__PURE__*/_react$i.default.createElement(_core$a.Toolbar, {
        disableGutters: true,
        className: classes.drawerToolbar
      }, /*#__PURE__*/_react$i.default.createElement(_core$a.Select, {
        value: visibleWidget === null || visibleWidget === void 0 ? void 0 : visibleWidget.id,
        "data-testid": "widget-drawer-selects",
        className: classes.drawerSelect,
        classes: {
          icon: classes.dropDownIcon
        },
        renderValue: function renderValue(widgetId) {
          var widget = session.activeWidgets.get(widgetId);

          if (!widget) {
            return /*#__PURE__*/_react$i.default.createElement(_core$a.Typography, {
              variant: "h6",
              color: "inherit"
            }, "Unknown widget");
          }

          var widgetType = pluginManager.getWidgetType(widget.type);
          var HeadingComponent = widgetType.HeadingComponent,
              heading = widgetType.heading;
          return HeadingComponent ? /*#__PURE__*/_react$i.default.createElement(HeadingComponent, {
            model: widget
          }) : /*#__PURE__*/_react$i.default.createElement(_core$a.Typography, {
            variant: "h6",
            color: "inherit"
          }, heading);
        },
        onChange: function onChange(e) {
          var w = session.activeWidgets.get(e.target.value);

          if (!w) {
            session.notify('Widget not found ' + e.target.value, 'warning');
          }

          session.showWidget(w);
        }
      }, Array.from(activeWidgets.values()).map(function (widget) {
        var widgetType = pluginManager.getWidgetType(widget.type);
        var HeadingComponent = widgetType.HeadingComponent,
            heading = widgetType.heading;
        return /*#__PURE__*/_react$i.default.createElement(_core$a.MenuItem, {
          "data-testid": "widget-drawer-selects-item-".concat(widget.type),
          key: widget.id,
          value: widget.id
        }, HeadingComponent ? /*#__PURE__*/_react$i.default.createElement(HeadingComponent, {
          model: widget
        }) : /*#__PURE__*/_react$i.default.createElement(_core$a.Typography, {
          variant: "h6",
          color: "inherit"
        }, heading), /*#__PURE__*/_react$i.default.createElement(_core$a.ListItemSecondaryAction, null, /*#__PURE__*/_react$i.default.createElement(_core$a.IconButton, {
          "data-testid": "".concat(widget.type, "-drawer-delete"),
          color: "inherit",
          "aria-label": "Delete",
          onClick: function onClick() {
            session.hideWidget(widget);
          }
        }, /*#__PURE__*/_react$i.default.createElement(_Delete.default, null))));
      })), /*#__PURE__*/_react$i.default.createElement("div", {
        className: classes.spacer
      }), /*#__PURE__*/_react$i.default.createElement("div", null, /*#__PURE__*/_react$i.default.createElement(_core$a.IconButton, {
        "data-testid": "drawer-close",
        color: "inherit",
        onClick: function onClick(event) {
          return setAnchorEl(event.currentTarget);
        }
      }, /*#__PURE__*/_react$i.default.createElement(_MoreVert.default, null)), /*#__PURE__*/_react$i.default.createElement(_core$a.Tooltip, {
        title: "Minimize drawer"
      }, /*#__PURE__*/_react$i.default.createElement(_core$a.IconButton, {
        "data-testid": "drawer-minimize",
        color: "inherit",
        onClick: function onClick() {
          session.notify("Drawer minimized, click button on ".concat(drawerPosition, " side of screen to re-open"), 'info');
          session.minimizeWidgetDrawer();
        }
      }, /*#__PURE__*/_react$i.default.createElement(_Minimize.default, null))), /*#__PURE__*/_react$i.default.createElement(_core$a.Tooltip, {
        title: "Close drawer"
      }, /*#__PURE__*/_react$i.default.createElement(_core$a.IconButton, {
        "data-testid": "drawer-close",
        color: "inherit",
        onClick: function onClick() {
          session.hideWidget(visibleWidget);
        }
      }, /*#__PURE__*/_react$i.default.createElement(_Close$2.default, null))))), /*#__PURE__*/_react$i.default.createElement(_core$a.Menu, {
        anchorEl: anchorEl,
        open: Boolean(anchorEl),
        onClose: function onClose() {
          return setAnchorEl(null);
        }
      }, ['left', 'right'].map(function (option) {
        return /*#__PURE__*/_react$i.default.createElement(_core$a.MenuItem, {
          key: option,
          selected: drawerPosition === 'option',
          onClick: function onClick() {
            session.setDrawerPosition(option);
            setAnchorEl(null);
          }
        }, option);
      })));
    });
    var DrawerWidget = (0, _mobxReact$8.observer)(function (_ref3) {
      var session = _ref3.session;
      var visibleWidget = session.visibleWidget;

      var _getEnv2 = (0, _mobxStateTree$4.getEnv)(session),
          pluginManager = _getEnv2.pluginManager;

      var DrawerComponent = visibleWidget ? pluginManager.getWidgetType(visibleWidget.type).ReactComponent : null; // we track the toolbar height because components that use virtualized
      // height want to be able to fill the contained, minus the toolbar height
      // (the position static/sticky is included in AutoSizer estimates)

      var _useState = (0, _react$i.useState)(0),
          _useState2 = (0, _slicedToArray2$e.default)(_useState, 2),
          toolbarHeight = _useState2[0],
          setToolbarHeight = _useState2[1];

      return /*#__PURE__*/_react$i.default.createElement(_Drawer.default, {
        session: session
      }, /*#__PURE__*/_react$i.default.createElement(DrawerHeader, {
        session: session,
        setToolbarHeight: setToolbarHeight
      }), /*#__PURE__*/_react$i.default.createElement(_react$i.Suspense, {
        fallback: /*#__PURE__*/_react$i.default.createElement("div", null, "Loading...")
      }, /*#__PURE__*/_react$i.default.createElement(DrawerComponent, {
        model: visibleWidget,
        session: session,
        toolbarHeight: toolbarHeight
      })));
    });
    var _default$t = DrawerWidget;
    DrawerWidget$1.default = _default$t;

    var DropDownMenu$1 = {};

    var ArrowDropDown = {};

    var _interopRequireDefault$D = interopRequireDefault.exports;

    var _interopRequireWildcard$o = interopRequireWildcard.exports;

    Object.defineProperty(ArrowDropDown, "__esModule", {
      value: true
    });
    var default_1$6 = ArrowDropDown.default = void 0;

    var React$c = _interopRequireWildcard$o(React__default["default"]);

    var _createSvgIcon$c = _interopRequireDefault$D(createSvgIcon);

    var _default$s = (0, _createSvgIcon$c.default)( /*#__PURE__*/React$c.createElement("path", {
      d: "M7 10l5 5 5-5z"
    }), 'ArrowDropDown');

    default_1$6 = ArrowDropDown.default = _default$s;

    var Menu$2 = {};

    var ArrowRight = {};

    var _interopRequireDefault$C = interopRequireDefault.exports;

    var _interopRequireWildcard$n = interopRequireWildcard.exports;

    Object.defineProperty(ArrowRight, "__esModule", {
      value: true
    });
    ArrowRight.default = void 0;

    var React$b = _interopRequireWildcard$n(React__default["default"]);

    var _createSvgIcon$b = _interopRequireDefault$C(createSvgIcon);

    var _default$r = (0, _createSvgIcon$b.default)( /*#__PURE__*/React$b.createElement("path", {
      d: "M10 17l5-5-5-5v10z"
    }), 'ArrowRight');

    ArrowRight.default = _default$r;

    var CheckBox = {};

    var _interopRequireDefault$B = interopRequireDefault.exports;

    var _interopRequireWildcard$m = interopRequireWildcard.exports;

    Object.defineProperty(CheckBox, "__esModule", {
      value: true
    });
    CheckBox.default = void 0;

    var React$a = _interopRequireWildcard$m(React__default["default"]);

    var _createSvgIcon$a = _interopRequireDefault$B(createSvgIcon);

    var _default$q = (0, _createSvgIcon$a.default)( /*#__PURE__*/React$a.createElement("path", {
      d: "M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
    }), 'CheckBox');

    CheckBox.default = _default$q;

    var CheckBoxOutlineBlank = {};

    var _interopRequireDefault$A = interopRequireDefault.exports;

    var _interopRequireWildcard$l = interopRequireWildcard.exports;

    Object.defineProperty(CheckBoxOutlineBlank, "__esModule", {
      value: true
    });
    CheckBoxOutlineBlank.default = void 0;

    var React$9 = _interopRequireWildcard$l(React__default["default"]);

    var _createSvgIcon$9 = _interopRequireDefault$A(createSvgIcon);

    var _default$p = (0, _createSvgIcon$9.default)( /*#__PURE__*/React$9.createElement("path", {
      d: "M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"
    }), 'CheckBoxOutlineBlank');

    CheckBoxOutlineBlank.default = _default$p;

    var RadioButtonChecked = {};

    var _interopRequireDefault$z = interopRequireDefault.exports;

    var _interopRequireWildcard$k = interopRequireWildcard.exports;

    Object.defineProperty(RadioButtonChecked, "__esModule", {
      value: true
    });
    RadioButtonChecked.default = void 0;

    var React$8 = _interopRequireWildcard$k(React__default["default"]);

    var _createSvgIcon$8 = _interopRequireDefault$z(createSvgIcon);

    var _default$o = (0, _createSvgIcon$8.default)( /*#__PURE__*/React$8.createElement("path", {
      d: "M12 7c-2.76 0-5 2.24-5 5s2.24 5 5 5 5-2.24 5-5-2.24-5-5-5zm0-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
    }), 'RadioButtonChecked');

    RadioButtonChecked.default = _default$o;

    var RadioButtonUnchecked = {};

    var _interopRequireDefault$y = interopRequireDefault.exports;

    var _interopRequireWildcard$j = interopRequireWildcard.exports;

    Object.defineProperty(RadioButtonUnchecked, "__esModule", {
      value: true
    });
    RadioButtonUnchecked.default = void 0;

    var React$7 = _interopRequireWildcard$j(React__default["default"]);

    var _createSvgIcon$7 = _interopRequireDefault$y(createSvgIcon);

    var _default$n = (0, _createSvgIcon$7.default)( /*#__PURE__*/React$7.createElement("path", {
      d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
    }), 'RadioButtonUnchecked');

    RadioButtonUnchecked.default = _default$n;

    var util$3 = {};

    var runtime = {exports: {}};

    /**
     * Copyright (c) 2014-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */

    (function (module) {
    var runtime = (function (exports) {

      var Op = Object.prototype;
      var hasOwn = Op.hasOwnProperty;
      var undefined$1; // More compressible than void 0.
      var $Symbol = typeof Symbol === "function" ? Symbol : {};
      var iteratorSymbol = $Symbol.iterator || "@@iterator";
      var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
      var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

      function define(obj, key, value) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
        return obj[key];
      }
      try {
        // IE 8 has a broken Object.defineProperty that only works on DOM objects.
        define({}, "");
      } catch (err) {
        define = function(obj, key, value) {
          return obj[key] = value;
        };
      }

      function wrap(innerFn, outerFn, self, tryLocsList) {
        // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
        var generator = Object.create(protoGenerator.prototype);
        var context = new Context(tryLocsList || []);

        // The ._invoke method unifies the implementations of the .next,
        // .throw, and .return methods.
        generator._invoke = makeInvokeMethod(innerFn, self, context);

        return generator;
      }
      exports.wrap = wrap;

      // Try/catch helper to minimize deoptimizations. Returns a completion
      // record like context.tryEntries[i].completion. This interface could
      // have been (and was previously) designed to take a closure to be
      // invoked without arguments, but in all the cases we care about we
      // already have an existing method we want to call, so there's no need
      // to create a new function object. We can even get away with assuming
      // the method takes exactly one argument, since that happens to be true
      // in every case, so we don't have to touch the arguments object. The
      // only additional allocation required is the completion record, which
      // has a stable shape and so hopefully should be cheap to allocate.
      function tryCatch(fn, obj, arg) {
        try {
          return { type: "normal", arg: fn.call(obj, arg) };
        } catch (err) {
          return { type: "throw", arg: err };
        }
      }

      var GenStateSuspendedStart = "suspendedStart";
      var GenStateSuspendedYield = "suspendedYield";
      var GenStateExecuting = "executing";
      var GenStateCompleted = "completed";

      // Returning this object from the innerFn has the same effect as
      // breaking out of the dispatch switch statement.
      var ContinueSentinel = {};

      // Dummy constructor functions that we use as the .constructor and
      // .constructor.prototype properties for functions that return Generator
      // objects. For full spec compliance, you may wish to configure your
      // minifier not to mangle the names of these two functions.
      function Generator() {}
      function GeneratorFunction() {}
      function GeneratorFunctionPrototype() {}

      // This is a polyfill for %IteratorPrototype% for environments that
      // don't natively support it.
      var IteratorPrototype = {};
      define(IteratorPrototype, iteratorSymbol, function () {
        return this;
      });

      var getProto = Object.getPrototypeOf;
      var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
      if (NativeIteratorPrototype &&
          NativeIteratorPrototype !== Op &&
          hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
        // This environment has a native %IteratorPrototype%; use it instead
        // of the polyfill.
        IteratorPrototype = NativeIteratorPrototype;
      }

      var Gp = GeneratorFunctionPrototype.prototype =
        Generator.prototype = Object.create(IteratorPrototype);
      GeneratorFunction.prototype = GeneratorFunctionPrototype;
      define(Gp, "constructor", GeneratorFunctionPrototype);
      define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
      GeneratorFunction.displayName = define(
        GeneratorFunctionPrototype,
        toStringTagSymbol,
        "GeneratorFunction"
      );

      // Helper for defining the .next, .throw, and .return methods of the
      // Iterator interface in terms of a single ._invoke method.
      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function(method) {
          define(prototype, method, function(arg) {
            return this._invoke(method, arg);
          });
        });
      }

      exports.isGeneratorFunction = function(genFun) {
        var ctor = typeof genFun === "function" && genFun.constructor;
        return ctor
          ? ctor === GeneratorFunction ||
            // For the native GeneratorFunction constructor, the best we can
            // do is to check its .name property.
            (ctor.displayName || ctor.name) === "GeneratorFunction"
          : false;
      };

      exports.mark = function(genFun) {
        if (Object.setPrototypeOf) {
          Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
        } else {
          genFun.__proto__ = GeneratorFunctionPrototype;
          define(genFun, toStringTagSymbol, "GeneratorFunction");
        }
        genFun.prototype = Object.create(Gp);
        return genFun;
      };

      // Within the body of any async function, `await x` is transformed to
      // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
      // `hasOwn.call(value, "__await")` to determine if the yielded value is
      // meant to be awaited.
      exports.awrap = function(arg) {
        return { __await: arg };
      };

      function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);
          if (record.type === "throw") {
            reject(record.arg);
          } else {
            var result = record.arg;
            var value = result.value;
            if (value &&
                typeof value === "object" &&
                hasOwn.call(value, "__await")) {
              return PromiseImpl.resolve(value.__await).then(function(value) {
                invoke("next", value, resolve, reject);
              }, function(err) {
                invoke("throw", err, resolve, reject);
              });
            }

            return PromiseImpl.resolve(value).then(function(unwrapped) {
              // When a yielded Promise is resolved, its final value becomes
              // the .value of the Promise<{value,done}> result for the
              // current iteration.
              result.value = unwrapped;
              resolve(result);
            }, function(error) {
              // If a rejected Promise was yielded, throw the rejection back
              // into the async generator function so it can be handled there.
              return invoke("throw", error, resolve, reject);
            });
          }
        }

        var previousPromise;

        function enqueue(method, arg) {
          function callInvokeWithMethodAndArg() {
            return new PromiseImpl(function(resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }

          return previousPromise =
            // If enqueue has been called before, then we want to wait until
            // all previous Promises have been resolved before calling invoke,
            // so that results are always delivered in the correct order. If
            // enqueue has not been called before, then it is important to
            // call invoke immediately, without waiting on a callback to fire,
            // so that the async generator function has the opportunity to do
            // any necessary setup in a predictable way. This predictability
            // is why the Promise constructor synchronously invokes its
            // executor callback, and why async functions synchronously
            // execute code before the first await. Since we implement simple
            // async functions in terms of async generators, it is especially
            // important to get this right, even though it requires care.
            previousPromise ? previousPromise.then(
              callInvokeWithMethodAndArg,
              // Avoid propagating failures to Promises returned by later
              // invocations of the iterator.
              callInvokeWithMethodAndArg
            ) : callInvokeWithMethodAndArg();
        }

        // Define the unified helper method that is used to implement .next,
        // .throw, and .return (see defineIteratorMethods).
        this._invoke = enqueue;
      }

      defineIteratorMethods(AsyncIterator.prototype);
      define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
        return this;
      });
      exports.AsyncIterator = AsyncIterator;

      // Note that simple async functions are implemented on top of
      // AsyncIterator objects; they just return a Promise for the value of
      // the final result produced by the iterator.
      exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        if (PromiseImpl === void 0) PromiseImpl = Promise;

        var iter = new AsyncIterator(
          wrap(innerFn, outerFn, self, tryLocsList),
          PromiseImpl
        );

        return exports.isGeneratorFunction(outerFn)
          ? iter // If outerFn is a generator, return the full iterator.
          : iter.next().then(function(result) {
              return result.done ? result.value : iter.next();
            });
      };

      function makeInvokeMethod(innerFn, self, context) {
        var state = GenStateSuspendedStart;

        return function invoke(method, arg) {
          if (state === GenStateExecuting) {
            throw new Error("Generator is already running");
          }

          if (state === GenStateCompleted) {
            if (method === "throw") {
              throw arg;
            }

            // Be forgiving, per 25.3.3.3.3 of the spec:
            // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
            return doneResult();
          }

          context.method = method;
          context.arg = arg;

          while (true) {
            var delegate = context.delegate;
            if (delegate) {
              var delegateResult = maybeInvokeDelegate(delegate, context);
              if (delegateResult) {
                if (delegateResult === ContinueSentinel) continue;
                return delegateResult;
              }
            }

            if (context.method === "next") {
              // Setting context._sent for legacy support of Babel's
              // function.sent implementation.
              context.sent = context._sent = context.arg;

            } else if (context.method === "throw") {
              if (state === GenStateSuspendedStart) {
                state = GenStateCompleted;
                throw context.arg;
              }

              context.dispatchException(context.arg);

            } else if (context.method === "return") {
              context.abrupt("return", context.arg);
            }

            state = GenStateExecuting;

            var record = tryCatch(innerFn, self, context);
            if (record.type === "normal") {
              // If an exception is thrown from innerFn, we leave state ===
              // GenStateExecuting and loop back for another invocation.
              state = context.done
                ? GenStateCompleted
                : GenStateSuspendedYield;

              if (record.arg === ContinueSentinel) {
                continue;
              }

              return {
                value: record.arg,
                done: context.done
              };

            } else if (record.type === "throw") {
              state = GenStateCompleted;
              // Dispatch the exception by looping back around to the
              // context.dispatchException(context.arg) call above.
              context.method = "throw";
              context.arg = record.arg;
            }
          }
        };
      }

      // Call delegate.iterator[context.method](context.arg) and handle the
      // result, either by returning a { value, done } result from the
      // delegate iterator, or by modifying context.method and context.arg,
      // setting context.delegate to null, and returning the ContinueSentinel.
      function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];
        if (method === undefined$1) {
          // A .throw or .return when the delegate iterator has no .throw
          // method always terminates the yield* loop.
          context.delegate = null;

          if (context.method === "throw") {
            // Note: ["return"] must be used for ES3 parsing compatibility.
            if (delegate.iterator["return"]) {
              // If the delegate iterator has a return method, give it a
              // chance to clean up.
              context.method = "return";
              context.arg = undefined$1;
              maybeInvokeDelegate(delegate, context);

              if (context.method === "throw") {
                // If maybeInvokeDelegate(context) changed context.method from
                // "return" to "throw", let that override the TypeError below.
                return ContinueSentinel;
              }
            }

            context.method = "throw";
            context.arg = new TypeError(
              "The iterator does not provide a 'throw' method");
          }

          return ContinueSentinel;
        }

        var record = tryCatch(method, delegate.iterator, context.arg);

        if (record.type === "throw") {
          context.method = "throw";
          context.arg = record.arg;
          context.delegate = null;
          return ContinueSentinel;
        }

        var info = record.arg;

        if (! info) {
          context.method = "throw";
          context.arg = new TypeError("iterator result is not an object");
          context.delegate = null;
          return ContinueSentinel;
        }

        if (info.done) {
          // Assign the result of the finished delegate to the temporary
          // variable specified by delegate.resultName (see delegateYield).
          context[delegate.resultName] = info.value;

          // Resume execution at the desired location (see delegateYield).
          context.next = delegate.nextLoc;

          // If context.method was "throw" but the delegate handled the
          // exception, let the outer generator proceed normally. If
          // context.method was "next", forget context.arg since it has been
          // "consumed" by the delegate iterator. If context.method was
          // "return", allow the original .return call to continue in the
          // outer generator.
          if (context.method !== "return") {
            context.method = "next";
            context.arg = undefined$1;
          }

        } else {
          // Re-yield the result returned by the delegate method.
          return info;
        }

        // The delegate iterator is finished, so forget it and continue with
        // the outer generator.
        context.delegate = null;
        return ContinueSentinel;
      }

      // Define Generator.prototype.{next,throw,return} in terms of the
      // unified ._invoke helper method.
      defineIteratorMethods(Gp);

      define(Gp, toStringTagSymbol, "Generator");

      // A Generator should always return itself as the iterator object when the
      // @@iterator function is called on it. Some browsers' implementations of the
      // iterator prototype chain incorrectly implement this, causing the Generator
      // object to not be returned from this call. This ensures that doesn't happen.
      // See https://github.com/facebook/regenerator/issues/274 for more details.
      define(Gp, iteratorSymbol, function() {
        return this;
      });

      define(Gp, "toString", function() {
        return "[object Generator]";
      });

      function pushTryEntry(locs) {
        var entry = { tryLoc: locs[0] };

        if (1 in locs) {
          entry.catchLoc = locs[1];
        }

        if (2 in locs) {
          entry.finallyLoc = locs[2];
          entry.afterLoc = locs[3];
        }

        this.tryEntries.push(entry);
      }

      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal";
        delete record.arg;
        entry.completion = record;
      }

      function Context(tryLocsList) {
        // The root entry object (effectively a try statement without a catch
        // or a finally block) gives us a place to store values thrown from
        // locations where there is no enclosing try statement.
        this.tryEntries = [{ tryLoc: "root" }];
        tryLocsList.forEach(pushTryEntry, this);
        this.reset(true);
      }

      exports.keys = function(object) {
        var keys = [];
        for (var key in object) {
          keys.push(key);
        }
        keys.reverse();

        // Rather than returning an object with a next method, we keep
        // things simple and return the next function itself.
        return function next() {
          while (keys.length) {
            var key = keys.pop();
            if (key in object) {
              next.value = key;
              next.done = false;
              return next;
            }
          }

          // To avoid creating an additional object, we just hang the .value
          // and .done properties off the next function object itself. This
          // also ensures that the minifier will not anonymize the function.
          next.done = true;
          return next;
        };
      };

      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];
          if (iteratorMethod) {
            return iteratorMethod.call(iterable);
          }

          if (typeof iterable.next === "function") {
            return iterable;
          }

          if (!isNaN(iterable.length)) {
            var i = -1, next = function next() {
              while (++i < iterable.length) {
                if (hasOwn.call(iterable, i)) {
                  next.value = iterable[i];
                  next.done = false;
                  return next;
                }
              }

              next.value = undefined$1;
              next.done = true;

              return next;
            };

            return next.next = next;
          }
        }

        // Return an iterator with no values.
        return { next: doneResult };
      }
      exports.values = values;

      function doneResult() {
        return { value: undefined$1, done: true };
      }

      Context.prototype = {
        constructor: Context,

        reset: function(skipTempReset) {
          this.prev = 0;
          this.next = 0;
          // Resetting context._sent for legacy support of Babel's
          // function.sent implementation.
          this.sent = this._sent = undefined$1;
          this.done = false;
          this.delegate = null;

          this.method = "next";
          this.arg = undefined$1;

          this.tryEntries.forEach(resetTryEntry);

          if (!skipTempReset) {
            for (var name in this) {
              // Not sure about the optimal order of these conditions:
              if (name.charAt(0) === "t" &&
                  hasOwn.call(this, name) &&
                  !isNaN(+name.slice(1))) {
                this[name] = undefined$1;
              }
            }
          }
        },

        stop: function() {
          this.done = true;

          var rootEntry = this.tryEntries[0];
          var rootRecord = rootEntry.completion;
          if (rootRecord.type === "throw") {
            throw rootRecord.arg;
          }

          return this.rval;
        },

        dispatchException: function(exception) {
          if (this.done) {
            throw exception;
          }

          var context = this;
          function handle(loc, caught) {
            record.type = "throw";
            record.arg = exception;
            context.next = loc;

            if (caught) {
              // If the dispatched exception was caught by a catch block,
              // then let that catch block handle the exception normally.
              context.method = "next";
              context.arg = undefined$1;
            }

            return !! caught;
          }

          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            var record = entry.completion;

            if (entry.tryLoc === "root") {
              // Exception thrown outside of any try block that could handle
              // it, so set the completion value of the entire function to
              // throw the exception.
              return handle("end");
            }

            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc");
              var hasFinally = hasOwn.call(entry, "finallyLoc");

              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc) {
                  return handle(entry.catchLoc, true);
                } else if (this.prev < entry.finallyLoc) {
                  return handle(entry.finallyLoc);
                }

              } else if (hasCatch) {
                if (this.prev < entry.catchLoc) {
                  return handle(entry.catchLoc, true);
                }

              } else if (hasFinally) {
                if (this.prev < entry.finallyLoc) {
                  return handle(entry.finallyLoc);
                }

              } else {
                throw new Error("try statement without catch or finally");
              }
            }
          }
        },

        abrupt: function(type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.tryLoc <= this.prev &&
                hasOwn.call(entry, "finallyLoc") &&
                this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }

          if (finallyEntry &&
              (type === "break" ||
               type === "continue") &&
              finallyEntry.tryLoc <= arg &&
              arg <= finallyEntry.finallyLoc) {
            // Ignore the finally entry if control is not jumping to a
            // location outside the try/catch block.
            finallyEntry = null;
          }

          var record = finallyEntry ? finallyEntry.completion : {};
          record.type = type;
          record.arg = arg;

          if (finallyEntry) {
            this.method = "next";
            this.next = finallyEntry.finallyLoc;
            return ContinueSentinel;
          }

          return this.complete(record);
        },

        complete: function(record, afterLoc) {
          if (record.type === "throw") {
            throw record.arg;
          }

          if (record.type === "break" ||
              record.type === "continue") {
            this.next = record.arg;
          } else if (record.type === "return") {
            this.rval = this.arg = record.arg;
            this.method = "return";
            this.next = "end";
          } else if (record.type === "normal" && afterLoc) {
            this.next = afterLoc;
          }

          return ContinueSentinel;
        },

        finish: function(finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.finallyLoc === finallyLoc) {
              this.complete(entry.completion, entry.afterLoc);
              resetTryEntry(entry);
              return ContinueSentinel;
            }
          }
        },

        "catch": function(tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;
              if (record.type === "throw") {
                var thrown = record.arg;
                resetTryEntry(entry);
              }
              return thrown;
            }
          }

          // The context.catch method must only be called with a location
          // argument that corresponds to a known catch block.
          throw new Error("illegal catch attempt");
        },

        delegateYield: function(iterable, resultName, nextLoc) {
          this.delegate = {
            iterator: values(iterable),
            resultName: resultName,
            nextLoc: nextLoc
          };

          if (this.method === "next") {
            // Deliberately forget the last sent value so that we don't
            // accidentally pass it on to the delegate.
            this.arg = undefined$1;
          }

          return ContinueSentinel;
        }
      };

      // Regardless of whether this script is executing as a CommonJS module
      // or not, return the runtime object so that we can declare the variable
      // regeneratorRuntime in the outer scope, which allows this module to be
      // injected easily by `bin/regenerator --include-runtime script.js`.
      return exports;

    }(
      // If this script is executing as a CommonJS module, use module.exports
      // as the regeneratorRuntime namespace. Otherwise create a new empty
      // object. Either way, the resulting object will be used to initialize
      // the regeneratorRuntime variable at the top of this file.
      module.exports 
    ));

    try {
      regeneratorRuntime = runtime;
    } catch (accidentalStrictMode) {
      // This module should not be running in strict mode, so the above
      // assignment should always work unless something is misconfigured. Just
      // in case runtime.js accidentally runs in strict mode, in modern engines
      // we can explicitly access globalThis. In older engines we can escape
      // strict mode using a global Function call. This could conceivably fail
      // if a Content Security Policy forbids using Function, but in that case
      // the proper solution is to fix the accidental strict mode problem. If
      // you've misconfigured your bundler to force strict mode and applied a
      // CSP to forbid Function, and you're not willing to fix either of those
      // problems, please detail your unique predicament in a GitHub issue.
      if (typeof globalThis === "object") {
        globalThis.regeneratorRuntime = runtime;
      } else {
        Function("r", "regeneratorRuntime = r")(runtime);
      }
    }
    }(runtime));

    var regenerator = runtime.exports;

    var asyncToGenerator = {exports: {}};

    (function (module) {
    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
      try {
        var info = gen[key](arg);
        var value = info.value;
      } catch (error) {
        reject(error);
        return;
      }

      if (info.done) {
        resolve(value);
      } else {
        Promise.resolve(value).then(_next, _throw);
      }
    }

    function _asyncToGenerator(fn) {
      return function () {
        var self = this,
            args = arguments;
        return new Promise(function (resolve, reject) {
          var gen = fn.apply(self, args);

          function _next(value) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
          }

          function _throw(err) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
          }

          _next(undefined);
        });
      };
    }

    module.exports = _asyncToGenerator, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }(asyncToGenerator));

    var require$$8 = /*@__PURE__*/getAugmentedNamespace(mobx_module);

    var toStr$9 = Object.prototype.toString;

    var isArguments = function isArguments(value) {
    	var str = toStr$9.call(value);
    	var isArgs = str === '[object Arguments]';
    	if (!isArgs) {
    		isArgs = str !== '[object Array]' &&
    			value !== null &&
    			typeof value === 'object' &&
    			typeof value.length === 'number' &&
    			value.length >= 0 &&
    			toStr$9.call(value.callee) === '[object Function]';
    	}
    	return isArgs;
    };

    var keysShim$1;
    if (!Object.keys) {
    	// modified from https://github.com/es-shims/es5-shim
    	var has$7 = Object.prototype.hasOwnProperty;
    	var toStr$8 = Object.prototype.toString;
    	var isArgs$1 = isArguments; // eslint-disable-line global-require
    	var isEnumerable$2 = Object.prototype.propertyIsEnumerable;
    	var hasDontEnumBug = !isEnumerable$2.call({ toString: null }, 'toString');
    	var hasProtoEnumBug = isEnumerable$2.call(function () {}, 'prototype');
    	var dontEnums = [
    		'toString',
    		'toLocaleString',
    		'valueOf',
    		'hasOwnProperty',
    		'isPrototypeOf',
    		'propertyIsEnumerable',
    		'constructor'
    	];
    	var equalsConstructorPrototype = function (o) {
    		var ctor = o.constructor;
    		return ctor && ctor.prototype === o;
    	};
    	var excludedKeys = {
    		$applicationCache: true,
    		$console: true,
    		$external: true,
    		$frame: true,
    		$frameElement: true,
    		$frames: true,
    		$innerHeight: true,
    		$innerWidth: true,
    		$onmozfullscreenchange: true,
    		$onmozfullscreenerror: true,
    		$outerHeight: true,
    		$outerWidth: true,
    		$pageXOffset: true,
    		$pageYOffset: true,
    		$parent: true,
    		$scrollLeft: true,
    		$scrollTop: true,
    		$scrollX: true,
    		$scrollY: true,
    		$self: true,
    		$webkitIndexedDB: true,
    		$webkitStorageInfo: true,
    		$window: true
    	};
    	var hasAutomationEqualityBug = (function () {
    		/* global window */
    		if (typeof window === 'undefined') { return false; }
    		for (var k in window) {
    			try {
    				if (!excludedKeys['$' + k] && has$7.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
    					try {
    						equalsConstructorPrototype(window[k]);
    					} catch (e) {
    						return true;
    					}
    				}
    			} catch (e) {
    				return true;
    			}
    		}
    		return false;
    	}());
    	var equalsConstructorPrototypeIfNotBuggy = function (o) {
    		/* global window */
    		if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
    			return equalsConstructorPrototype(o);
    		}
    		try {
    			return equalsConstructorPrototype(o);
    		} catch (e) {
    			return false;
    		}
    	};

    	keysShim$1 = function keys(object) {
    		var isObject = object !== null && typeof object === 'object';
    		var isFunction = toStr$8.call(object) === '[object Function]';
    		var isArguments = isArgs$1(object);
    		var isString = isObject && toStr$8.call(object) === '[object String]';
    		var theKeys = [];

    		if (!isObject && !isFunction && !isArguments) {
    			throw new TypeError('Object.keys called on a non-object');
    		}

    		var skipProto = hasProtoEnumBug && isFunction;
    		if (isString && object.length > 0 && !has$7.call(object, 0)) {
    			for (var i = 0; i < object.length; ++i) {
    				theKeys.push(String(i));
    			}
    		}

    		if (isArguments && object.length > 0) {
    			for (var j = 0; j < object.length; ++j) {
    				theKeys.push(String(j));
    			}
    		} else {
    			for (var name in object) {
    				if (!(skipProto && name === 'prototype') && has$7.call(object, name)) {
    					theKeys.push(String(name));
    				}
    			}
    		}

    		if (hasDontEnumBug) {
    			var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

    			for (var k = 0; k < dontEnums.length; ++k) {
    				if (!(skipConstructor && dontEnums[k] === 'constructor') && has$7.call(object, dontEnums[k])) {
    					theKeys.push(dontEnums[k]);
    				}
    			}
    		}
    		return theKeys;
    	};
    }
    var implementation$5 = keysShim$1;

    var slice$2 = Array.prototype.slice;
    var isArgs = isArguments;

    var origKeys = Object.keys;
    var keysShim = origKeys ? function keys(o) { return origKeys(o); } : implementation$5;

    var originalKeys = Object.keys;

    keysShim.shim = function shimObjectKeys() {
    	if (Object.keys) {
    		var keysWorksWithArguments = (function () {
    			// Safari 5.0 bug
    			var args = Object.keys(arguments);
    			return args && args.length === arguments.length;
    		}(1, 2));
    		if (!keysWorksWithArguments) {
    			Object.keys = function keys(object) { // eslint-disable-line func-name-matching
    				if (isArgs(object)) {
    					return originalKeys(slice$2.call(object));
    				}
    				return originalKeys(object);
    			};
    		}
    	} else {
    		Object.keys = keysShim;
    	}
    	return Object.keys || keysShim;
    };

    var objectKeys = keysShim;

    var keys = objectKeys;
    var hasSymbols$7 = typeof Symbol === 'function' && typeof Symbol('foo') === 'symbol';

    var toStr$7 = Object.prototype.toString;
    var concat$2 = Array.prototype.concat;
    var origDefineProperty = Object.defineProperty;

    var isFunction$1 = function (fn) {
    	return typeof fn === 'function' && toStr$7.call(fn) === '[object Function]';
    };

    var arePropertyDescriptorsSupported = function () {
    	var obj = {};
    	try {
    		origDefineProperty(obj, 'x', { enumerable: false, value: obj });
    		// eslint-disable-next-line no-unused-vars, no-restricted-syntax
    		for (var _ in obj) { // jscs:ignore disallowUnusedVariables
    			return false;
    		}
    		return obj.x === obj;
    	} catch (e) { /* this is IE 8. */
    		return false;
    	}
    };
    var supportsDescriptors = origDefineProperty && arePropertyDescriptorsSupported();

    var defineProperty = function (object, name, value, predicate) {
    	if (name in object && (!isFunction$1(predicate) || !predicate())) {
    		return;
    	}
    	if (supportsDescriptors) {
    		origDefineProperty(object, name, {
    			configurable: true,
    			enumerable: false,
    			value: value,
    			writable: true
    		});
    	} else {
    		object[name] = value;
    	}
    };

    var defineProperties = function (object, map) {
    	var predicates = arguments.length > 2 ? arguments[2] : {};
    	var props = keys(map);
    	if (hasSymbols$7) {
    		props = concat$2.call(props, Object.getOwnPropertySymbols(map));
    	}
    	for (var i = 0; i < props.length; i += 1) {
    		defineProperty(object, props[i], map[props[i]], predicates[props[i]]);
    	}
    };

    defineProperties.supportsDescriptors = !!supportsDescriptors;

    var defineProperties_1 = defineProperties;

    var callBind$2 = {exports: {}};

    /* eslint no-invalid-this: 1 */

    var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
    var slice$1 = Array.prototype.slice;
    var toStr$6 = Object.prototype.toString;
    var funcType = '[object Function]';

    var implementation$4 = function bind(that) {
        var target = this;
        if (typeof target !== 'function' || toStr$6.call(target) !== funcType) {
            throw new TypeError(ERROR_MESSAGE + target);
        }
        var args = slice$1.call(arguments, 1);

        var bound;
        var binder = function () {
            if (this instanceof bound) {
                var result = target.apply(
                    this,
                    args.concat(slice$1.call(arguments))
                );
                if (Object(result) === result) {
                    return result;
                }
                return this;
            } else {
                return target.apply(
                    that,
                    args.concat(slice$1.call(arguments))
                );
            }
        };

        var boundLength = Math.max(0, target.length - args.length);
        var boundArgs = [];
        for (var i = 0; i < boundLength; i++) {
            boundArgs.push('$' + i);
        }

        bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

        if (target.prototype) {
            var Empty = function Empty() {};
            Empty.prototype = target.prototype;
            bound.prototype = new Empty();
            Empty.prototype = null;
        }

        return bound;
    };

    var implementation$3 = implementation$4;

    var functionBind = Function.prototype.bind || implementation$3;

    /* eslint complexity: [2, 18], max-statements: [2, 33] */
    var shams$1 = function hasSymbols() {
    	if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }
    	if (typeof Symbol.iterator === 'symbol') { return true; }

    	var obj = {};
    	var sym = Symbol('test');
    	var symObj = Object(sym);
    	if (typeof sym === 'string') { return false; }

    	if (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }
    	if (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }

    	// temp disabled per https://github.com/ljharb/object.assign/issues/17
    	// if (sym instanceof Symbol) { return false; }
    	// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
    	// if (!(symObj instanceof Symbol)) { return false; }

    	// if (typeof Symbol.prototype.toString !== 'function') { return false; }
    	// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }

    	var symVal = 42;
    	obj[sym] = symVal;
    	for (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop
    	if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }

    	if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }

    	var syms = Object.getOwnPropertySymbols(obj);
    	if (syms.length !== 1 || syms[0] !== sym) { return false; }

    	if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }

    	if (typeof Object.getOwnPropertyDescriptor === 'function') {
    		var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
    		if (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }
    	}

    	return true;
    };

    var origSymbol = typeof Symbol !== 'undefined' && Symbol;
    var hasSymbolSham = shams$1;

    var hasSymbols$6 = function hasNativeSymbols() {
    	if (typeof origSymbol !== 'function') { return false; }
    	if (typeof Symbol !== 'function') { return false; }
    	if (typeof origSymbol('foo') !== 'symbol') { return false; }
    	if (typeof Symbol('bar') !== 'symbol') { return false; }

    	return hasSymbolSham();
    };

    var bind$1 = functionBind;

    var src = bind$1.call(Function.call, Object.prototype.hasOwnProperty);

    var undefined$1;

    var $SyntaxError$1 = SyntaxError;
    var $Function = Function;
    var $TypeError$l = TypeError;

    // eslint-disable-next-line consistent-return
    var getEvalledConstructor = function (expressionSyntax) {
    	try {
    		return $Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
    	} catch (e) {}
    };

    var $gOPD$2 = Object.getOwnPropertyDescriptor;
    if ($gOPD$2) {
    	try {
    		$gOPD$2({}, '');
    	} catch (e) {
    		$gOPD$2 = null; // this is IE 8, which has a broken gOPD
    	}
    }

    var throwTypeError = function () {
    	throw new $TypeError$l();
    };
    var ThrowTypeError = $gOPD$2
    	? (function () {
    		try {
    			// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
    			arguments.callee; // IE 8 does not throw here
    			return throwTypeError;
    		} catch (calleeThrows) {
    			try {
    				// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
    				return $gOPD$2(arguments, 'callee').get;
    			} catch (gOPDthrows) {
    				return throwTypeError;
    			}
    		}
    	}())
    	: throwTypeError;

    var hasSymbols$5 = hasSymbols$6();

    var getProto = Object.getPrototypeOf || function (x) { return x.__proto__; }; // eslint-disable-line no-proto

    var needsEval = {};

    var TypedArray = typeof Uint8Array === 'undefined' ? undefined$1 : getProto(Uint8Array);

    var INTRINSICS = {
    	'%AggregateError%': typeof AggregateError === 'undefined' ? undefined$1 : AggregateError,
    	'%Array%': Array,
    	'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined$1 : ArrayBuffer,
    	'%ArrayIteratorPrototype%': hasSymbols$5 ? getProto([][Symbol.iterator]()) : undefined$1,
    	'%AsyncFromSyncIteratorPrototype%': undefined$1,
    	'%AsyncFunction%': needsEval,
    	'%AsyncGenerator%': needsEval,
    	'%AsyncGeneratorFunction%': needsEval,
    	'%AsyncIteratorPrototype%': needsEval,
    	'%Atomics%': typeof Atomics === 'undefined' ? undefined$1 : Atomics,
    	'%BigInt%': typeof BigInt === 'undefined' ? undefined$1 : BigInt,
    	'%Boolean%': Boolean,
    	'%DataView%': typeof DataView === 'undefined' ? undefined$1 : DataView,
    	'%Date%': Date,
    	'%decodeURI%': decodeURI,
    	'%decodeURIComponent%': decodeURIComponent,
    	'%encodeURI%': encodeURI,
    	'%encodeURIComponent%': encodeURIComponent,
    	'%Error%': Error,
    	'%eval%': eval, // eslint-disable-line no-eval
    	'%EvalError%': EvalError,
    	'%Float32Array%': typeof Float32Array === 'undefined' ? undefined$1 : Float32Array,
    	'%Float64Array%': typeof Float64Array === 'undefined' ? undefined$1 : Float64Array,
    	'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined$1 : FinalizationRegistry,
    	'%Function%': $Function,
    	'%GeneratorFunction%': needsEval,
    	'%Int8Array%': typeof Int8Array === 'undefined' ? undefined$1 : Int8Array,
    	'%Int16Array%': typeof Int16Array === 'undefined' ? undefined$1 : Int16Array,
    	'%Int32Array%': typeof Int32Array === 'undefined' ? undefined$1 : Int32Array,
    	'%isFinite%': isFinite,
    	'%isNaN%': isNaN,
    	'%IteratorPrototype%': hasSymbols$5 ? getProto(getProto([][Symbol.iterator]())) : undefined$1,
    	'%JSON%': typeof JSON === 'object' ? JSON : undefined$1,
    	'%Map%': typeof Map === 'undefined' ? undefined$1 : Map,
    	'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols$5 ? undefined$1 : getProto(new Map()[Symbol.iterator]()),
    	'%Math%': Math,
    	'%Number%': Number,
    	'%Object%': Object,
    	'%parseFloat%': parseFloat,
    	'%parseInt%': parseInt,
    	'%Promise%': typeof Promise === 'undefined' ? undefined$1 : Promise,
    	'%Proxy%': typeof Proxy === 'undefined' ? undefined$1 : Proxy,
    	'%RangeError%': RangeError,
    	'%ReferenceError%': ReferenceError,
    	'%Reflect%': typeof Reflect === 'undefined' ? undefined$1 : Reflect,
    	'%RegExp%': RegExp,
    	'%Set%': typeof Set === 'undefined' ? undefined$1 : Set,
    	'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols$5 ? undefined$1 : getProto(new Set()[Symbol.iterator]()),
    	'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined$1 : SharedArrayBuffer,
    	'%String%': String,
    	'%StringIteratorPrototype%': hasSymbols$5 ? getProto(''[Symbol.iterator]()) : undefined$1,
    	'%Symbol%': hasSymbols$5 ? Symbol : undefined$1,
    	'%SyntaxError%': $SyntaxError$1,
    	'%ThrowTypeError%': ThrowTypeError,
    	'%TypedArray%': TypedArray,
    	'%TypeError%': $TypeError$l,
    	'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined$1 : Uint8Array,
    	'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined$1 : Uint8ClampedArray,
    	'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined$1 : Uint16Array,
    	'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined$1 : Uint32Array,
    	'%URIError%': URIError,
    	'%WeakMap%': typeof WeakMap === 'undefined' ? undefined$1 : WeakMap,
    	'%WeakRef%': typeof WeakRef === 'undefined' ? undefined$1 : WeakRef,
    	'%WeakSet%': typeof WeakSet === 'undefined' ? undefined$1 : WeakSet
    };

    var doEval = function doEval(name) {
    	var value;
    	if (name === '%AsyncFunction%') {
    		value = getEvalledConstructor('async function () {}');
    	} else if (name === '%GeneratorFunction%') {
    		value = getEvalledConstructor('function* () {}');
    	} else if (name === '%AsyncGeneratorFunction%') {
    		value = getEvalledConstructor('async function* () {}');
    	} else if (name === '%AsyncGenerator%') {
    		var fn = doEval('%AsyncGeneratorFunction%');
    		if (fn) {
    			value = fn.prototype;
    		}
    	} else if (name === '%AsyncIteratorPrototype%') {
    		var gen = doEval('%AsyncGenerator%');
    		if (gen) {
    			value = getProto(gen.prototype);
    		}
    	}

    	INTRINSICS[name] = value;

    	return value;
    };

    var LEGACY_ALIASES = {
    	'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],
    	'%ArrayPrototype%': ['Array', 'prototype'],
    	'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],
    	'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],
    	'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],
    	'%ArrayProto_values%': ['Array', 'prototype', 'values'],
    	'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],
    	'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],
    	'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],
    	'%BooleanPrototype%': ['Boolean', 'prototype'],
    	'%DataViewPrototype%': ['DataView', 'prototype'],
    	'%DatePrototype%': ['Date', 'prototype'],
    	'%ErrorPrototype%': ['Error', 'prototype'],
    	'%EvalErrorPrototype%': ['EvalError', 'prototype'],
    	'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],
    	'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],
    	'%FunctionPrototype%': ['Function', 'prototype'],
    	'%Generator%': ['GeneratorFunction', 'prototype'],
    	'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],
    	'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],
    	'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],
    	'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],
    	'%JSONParse%': ['JSON', 'parse'],
    	'%JSONStringify%': ['JSON', 'stringify'],
    	'%MapPrototype%': ['Map', 'prototype'],
    	'%NumberPrototype%': ['Number', 'prototype'],
    	'%ObjectPrototype%': ['Object', 'prototype'],
    	'%ObjProto_toString%': ['Object', 'prototype', 'toString'],
    	'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],
    	'%PromisePrototype%': ['Promise', 'prototype'],
    	'%PromiseProto_then%': ['Promise', 'prototype', 'then'],
    	'%Promise_all%': ['Promise', 'all'],
    	'%Promise_reject%': ['Promise', 'reject'],
    	'%Promise_resolve%': ['Promise', 'resolve'],
    	'%RangeErrorPrototype%': ['RangeError', 'prototype'],
    	'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],
    	'%RegExpPrototype%': ['RegExp', 'prototype'],
    	'%SetPrototype%': ['Set', 'prototype'],
    	'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],
    	'%StringPrototype%': ['String', 'prototype'],
    	'%SymbolPrototype%': ['Symbol', 'prototype'],
    	'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],
    	'%TypedArrayPrototype%': ['TypedArray', 'prototype'],
    	'%TypeErrorPrototype%': ['TypeError', 'prototype'],
    	'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],
    	'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],
    	'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],
    	'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],
    	'%URIErrorPrototype%': ['URIError', 'prototype'],
    	'%WeakMapPrototype%': ['WeakMap', 'prototype'],
    	'%WeakSetPrototype%': ['WeakSet', 'prototype']
    };

    var bind = functionBind;
    var hasOwn$1 = src;
    var $concat$1 = bind.call(Function.call, Array.prototype.concat);
    var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
    var $replace$1 = bind.call(Function.call, String.prototype.replace);
    var $strSlice = bind.call(Function.call, String.prototype.slice);

    /* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */
    var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
    var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */
    var stringToPath = function stringToPath(string) {
    	var first = $strSlice(string, 0, 1);
    	var last = $strSlice(string, -1);
    	if (first === '%' && last !== '%') {
    		throw new $SyntaxError$1('invalid intrinsic syntax, expected closing `%`');
    	} else if (last === '%' && first !== '%') {
    		throw new $SyntaxError$1('invalid intrinsic syntax, expected opening `%`');
    	}
    	var result = [];
    	$replace$1(string, rePropName, function (match, number, quote, subString) {
    		result[result.length] = quote ? $replace$1(subString, reEscapeChar, '$1') : number || match;
    	});
    	return result;
    };
    /* end adaptation */

    var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
    	var intrinsicName = name;
    	var alias;
    	if (hasOwn$1(LEGACY_ALIASES, intrinsicName)) {
    		alias = LEGACY_ALIASES[intrinsicName];
    		intrinsicName = '%' + alias[0] + '%';
    	}

    	if (hasOwn$1(INTRINSICS, intrinsicName)) {
    		var value = INTRINSICS[intrinsicName];
    		if (value === needsEval) {
    			value = doEval(intrinsicName);
    		}
    		if (typeof value === 'undefined' && !allowMissing) {
    			throw new $TypeError$l('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
    		}

    		return {
    			alias: alias,
    			name: intrinsicName,
    			value: value
    		};
    	}

    	throw new $SyntaxError$1('intrinsic ' + name + ' does not exist!');
    };

    var getIntrinsic = function GetIntrinsic(name, allowMissing) {
    	if (typeof name !== 'string' || name.length === 0) {
    		throw new $TypeError$l('intrinsic name must be a non-empty string');
    	}
    	if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
    		throw new $TypeError$l('"allowMissing" argument must be a boolean');
    	}

    	var parts = stringToPath(name);
    	var intrinsicBaseName = parts.length > 0 ? parts[0] : '';

    	var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
    	var intrinsicRealName = intrinsic.name;
    	var value = intrinsic.value;
    	var skipFurtherCaching = false;

    	var alias = intrinsic.alias;
    	if (alias) {
    		intrinsicBaseName = alias[0];
    		$spliceApply(parts, $concat$1([0, 1], alias));
    	}

    	for (var i = 1, isOwn = true; i < parts.length; i += 1) {
    		var part = parts[i];
    		var first = $strSlice(part, 0, 1);
    		var last = $strSlice(part, -1);
    		if (
    			(
    				(first === '"' || first === "'" || first === '`')
    				|| (last === '"' || last === "'" || last === '`')
    			)
    			&& first !== last
    		) {
    			throw new $SyntaxError$1('property names with quotes must have matching quotes');
    		}
    		if (part === 'constructor' || !isOwn) {
    			skipFurtherCaching = true;
    		}

    		intrinsicBaseName += '.' + part;
    		intrinsicRealName = '%' + intrinsicBaseName + '%';

    		if (hasOwn$1(INTRINSICS, intrinsicRealName)) {
    			value = INTRINSICS[intrinsicRealName];
    		} else if (value != null) {
    			if (!(part in value)) {
    				if (!allowMissing) {
    					throw new $TypeError$l('base intrinsic for ' + name + ' exists, but the property is not available.');
    				}
    				return void undefined$1;
    			}
    			if ($gOPD$2 && (i + 1) >= parts.length) {
    				var desc = $gOPD$2(value, part);
    				isOwn = !!desc;

    				// By convention, when a data property is converted to an accessor
    				// property to emulate a data property that does not suffer from
    				// the override mistake, that accessor's getter is marked with
    				// an `originalValue` property. Here, when we detect this, we
    				// uphold the illusion by pretending to see that original data
    				// property, i.e., returning the value rather than the getter
    				// itself.
    				if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
    					value = desc.get;
    				} else {
    					value = value[part];
    				}
    			} else {
    				isOwn = hasOwn$1(value, part);
    				value = value[part];
    			}

    			if (isOwn && !skipFurtherCaching) {
    				INTRINSICS[intrinsicRealName] = value;
    			}
    		}
    	}
    	return value;
    };

    (function (module) {

    var bind = functionBind;
    var GetIntrinsic = getIntrinsic;

    var $apply = GetIntrinsic('%Function.prototype.apply%');
    var $call = GetIntrinsic('%Function.prototype.call%');
    var $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);

    var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);
    var $defineProperty = GetIntrinsic('%Object.defineProperty%', true);
    var $max = GetIntrinsic('%Math.max%');

    if ($defineProperty) {
    	try {
    		$defineProperty({}, 'a', { value: 1 });
    	} catch (e) {
    		// IE 8 has a broken defineProperty
    		$defineProperty = null;
    	}
    }

    module.exports = function callBind(originalFunction) {
    	var func = $reflectApply(bind, $call, arguments);
    	if ($gOPD && $defineProperty) {
    		var desc = $gOPD(func, 'length');
    		if (desc.configurable) {
    			// original length, plus the receiver, minus any additional arguments (after the receiver)
    			$defineProperty(
    				func,
    				'length',
    				{ value: 1 + $max(0, originalFunction.length - (arguments.length - 1)) }
    			);
    		}
    	}
    	return func;
    };

    var applyBind = function applyBind() {
    	return $reflectApply(bind, $apply, arguments);
    };

    if ($defineProperty) {
    	$defineProperty(module.exports, 'apply', { value: applyBind });
    } else {
    	module.exports.apply = applyBind;
    }
    }(callBind$2));

    var LocalFile = {};

    var _nodeResolve_empty = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': LocalFile
    });

    var require$$0 = /*@__PURE__*/getAugmentedNamespace(_nodeResolve_empty);

    var hasMap = typeof Map === 'function' && Map.prototype;
    var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, 'size') : null;
    var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === 'function' ? mapSizeDescriptor.get : null;
    var mapForEach = hasMap && Map.prototype.forEach;
    var hasSet = typeof Set === 'function' && Set.prototype;
    var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, 'size') : null;
    var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === 'function' ? setSizeDescriptor.get : null;
    var setForEach = hasSet && Set.prototype.forEach;
    var hasWeakMap = typeof WeakMap === 'function' && WeakMap.prototype;
    var weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;
    var hasWeakSet = typeof WeakSet === 'function' && WeakSet.prototype;
    var weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;
    var hasWeakRef = typeof WeakRef === 'function' && WeakRef.prototype;
    var weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null;
    var booleanValueOf = Boolean.prototype.valueOf;
    var objectToString = Object.prototype.toString;
    var functionToString = Function.prototype.toString;
    var $match$1 = String.prototype.match;
    var $slice = String.prototype.slice;
    var $replace = String.prototype.replace;
    var $toUpperCase = String.prototype.toUpperCase;
    var $toLowerCase = String.prototype.toLowerCase;
    var $test = RegExp.prototype.test;
    var $concat = Array.prototype.concat;
    var $join = Array.prototype.join;
    var $arrSlice = Array.prototype.slice;
    var $floor$1 = Math.floor;
    var bigIntValueOf = typeof BigInt === 'function' ? BigInt.prototype.valueOf : null;
    var gOPS = Object.getOwnPropertySymbols;
    var symToString = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? Symbol.prototype.toString : null;
    var hasShammedSymbols = typeof Symbol === 'function' && typeof Symbol.iterator === 'object';
    // ie, `has-tostringtag/shams
    var toStringTag = typeof Symbol === 'function' && Symbol.toStringTag && (typeof Symbol.toStringTag === hasShammedSymbols ? 'object' : 'symbol')
        ? Symbol.toStringTag
        : null;
    var isEnumerable$1 = Object.prototype.propertyIsEnumerable;

    var gPO = (typeof Reflect === 'function' ? Reflect.getPrototypeOf : Object.getPrototypeOf) || (
        [].__proto__ === Array.prototype // eslint-disable-line no-proto
            ? function (O) {
                return O.__proto__; // eslint-disable-line no-proto
            }
            : null
    );

    function addNumericSeparator(num, str) {
        if (
            num === Infinity
            || num === -Infinity
            || num !== num
            || (num && num > -1000 && num < 1000)
            || $test.call(/e/, str)
        ) {
            return str;
        }
        var sepRegex = /[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;
        if (typeof num === 'number') {
            var int = num < 0 ? -$floor$1(-num) : $floor$1(num); // trunc(num)
            if (int !== num) {
                var intStr = String(int);
                var dec = $slice.call(str, intStr.length + 1);
                return $replace.call(intStr, sepRegex, '$&_') + '.' + $replace.call($replace.call(dec, /([0-9]{3})/g, '$&_'), /_$/, '');
            }
        }
        return $replace.call(str, sepRegex, '$&_');
    }

    var inspectCustom = require$$0.custom;
    var inspectSymbol = inspectCustom && isSymbol$2(inspectCustom) ? inspectCustom : null;

    var objectInspect = function inspect_(obj, options, depth, seen) {
        var opts = options || {};

        if (has$6(opts, 'quoteStyle') && (opts.quoteStyle !== 'single' && opts.quoteStyle !== 'double')) {
            throw new TypeError('option "quoteStyle" must be "single" or "double"');
        }
        if (
            has$6(opts, 'maxStringLength') && (typeof opts.maxStringLength === 'number'
                ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity
                : opts.maxStringLength !== null
            )
        ) {
            throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');
        }
        var customInspect = has$6(opts, 'customInspect') ? opts.customInspect : true;
        if (typeof customInspect !== 'boolean' && customInspect !== 'symbol') {
            throw new TypeError('option "customInspect", if provided, must be `true`, `false`, or `\'symbol\'`');
        }

        if (
            has$6(opts, 'indent')
            && opts.indent !== null
            && opts.indent !== '\t'
            && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)
        ) {
            throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');
        }
        if (has$6(opts, 'numericSeparator') && typeof opts.numericSeparator !== 'boolean') {
            throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');
        }
        var numericSeparator = opts.numericSeparator;

        if (typeof obj === 'undefined') {
            return 'undefined';
        }
        if (obj === null) {
            return 'null';
        }
        if (typeof obj === 'boolean') {
            return obj ? 'true' : 'false';
        }

        if (typeof obj === 'string') {
            return inspectString(obj, opts);
        }
        if (typeof obj === 'number') {
            if (obj === 0) {
                return Infinity / obj > 0 ? '0' : '-0';
            }
            var str = String(obj);
            return numericSeparator ? addNumericSeparator(obj, str) : str;
        }
        if (typeof obj === 'bigint') {
            var bigIntStr = String(obj) + 'n';
            return numericSeparator ? addNumericSeparator(obj, bigIntStr) : bigIntStr;
        }

        var maxDepth = typeof opts.depth === 'undefined' ? 5 : opts.depth;
        if (typeof depth === 'undefined') { depth = 0; }
        if (depth >= maxDepth && maxDepth > 0 && typeof obj === 'object') {
            return isArray$3(obj) ? '[Array]' : '[Object]';
        }

        var indent = getIndent(opts, depth);

        if (typeof seen === 'undefined') {
            seen = [];
        } else if (indexOf(seen, obj) >= 0) {
            return '[Circular]';
        }

        function inspect(value, from, noIndent) {
            if (from) {
                seen = $arrSlice.call(seen);
                seen.push(from);
            }
            if (noIndent) {
                var newOpts = {
                    depth: opts.depth
                };
                if (has$6(opts, 'quoteStyle')) {
                    newOpts.quoteStyle = opts.quoteStyle;
                }
                return inspect_(value, newOpts, depth + 1, seen);
            }
            return inspect_(value, opts, depth + 1, seen);
        }

        if (typeof obj === 'function') {
            var name = nameOf(obj);
            var keys = arrObjKeys(obj, inspect);
            return '[Function' + (name ? ': ' + name : ' (anonymous)') + ']' + (keys.length > 0 ? ' { ' + $join.call(keys, ', ') + ' }' : '');
        }
        if (isSymbol$2(obj)) {
            var symString = hasShammedSymbols ? $replace.call(String(obj), /^(Symbol\(.*\))_[^)]*$/, '$1') : symToString.call(obj);
            return typeof obj === 'object' && !hasShammedSymbols ? markBoxed(symString) : symString;
        }
        if (isElement(obj)) {
            var s = '<' + $toLowerCase.call(String(obj.nodeName));
            var attrs = obj.attributes || [];
            for (var i = 0; i < attrs.length; i++) {
                s += ' ' + attrs[i].name + '=' + wrapQuotes(quote(attrs[i].value), 'double', opts);
            }
            s += '>';
            if (obj.childNodes && obj.childNodes.length) { s += '...'; }
            s += '</' + $toLowerCase.call(String(obj.nodeName)) + '>';
            return s;
        }
        if (isArray$3(obj)) {
            if (obj.length === 0) { return '[]'; }
            var xs = arrObjKeys(obj, inspect);
            if (indent && !singleLineValues(xs)) {
                return '[' + indentedJoin(xs, indent) + ']';
            }
            return '[ ' + $join.call(xs, ', ') + ' ]';
        }
        if (isError(obj)) {
            var parts = arrObjKeys(obj, inspect);
            if ('cause' in obj && !isEnumerable$1.call(obj, 'cause')) {
                return '{ [' + String(obj) + '] ' + $join.call($concat.call('[cause]: ' + inspect(obj.cause), parts), ', ') + ' }';
            }
            if (parts.length === 0) { return '[' + String(obj) + ']'; }
            return '{ [' + String(obj) + '] ' + $join.call(parts, ', ') + ' }';
        }
        if (typeof obj === 'object' && customInspect) {
            if (inspectSymbol && typeof obj[inspectSymbol] === 'function') {
                return obj[inspectSymbol]();
            } else if (customInspect !== 'symbol' && typeof obj.inspect === 'function') {
                return obj.inspect();
            }
        }
        if (isMap(obj)) {
            var mapParts = [];
            mapForEach.call(obj, function (value, key) {
                mapParts.push(inspect(key, obj, true) + ' => ' + inspect(value, obj));
            });
            return collectionOf('Map', mapSize.call(obj), mapParts, indent);
        }
        if (isSet(obj)) {
            var setParts = [];
            setForEach.call(obj, function (value) {
                setParts.push(inspect(value, obj));
            });
            return collectionOf('Set', setSize.call(obj), setParts, indent);
        }
        if (isWeakMap(obj)) {
            return weakCollectionOf('WeakMap');
        }
        if (isWeakSet(obj)) {
            return weakCollectionOf('WeakSet');
        }
        if (isWeakRef(obj)) {
            return weakCollectionOf('WeakRef');
        }
        if (isNumber(obj)) {
            return markBoxed(inspect(Number(obj)));
        }
        if (isBigInt(obj)) {
            return markBoxed(inspect(bigIntValueOf.call(obj)));
        }
        if (isBoolean(obj)) {
            return markBoxed(booleanValueOf.call(obj));
        }
        if (isString(obj)) {
            return markBoxed(inspect(String(obj)));
        }
        if (!isDate$1(obj) && !isRegExp(obj)) {
            var ys = arrObjKeys(obj, inspect);
            var isPlainObject = gPO ? gPO(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object;
            var protoTag = obj instanceof Object ? '' : 'null prototype';
            var stringTag = !isPlainObject && toStringTag && Object(obj) === obj && toStringTag in obj ? $slice.call(toStr$5(obj), 8, -1) : protoTag ? 'Object' : '';
            var constructorTag = isPlainObject || typeof obj.constructor !== 'function' ? '' : obj.constructor.name ? obj.constructor.name + ' ' : '';
            var tag = constructorTag + (stringTag || protoTag ? '[' + $join.call($concat.call([], stringTag || [], protoTag || []), ': ') + '] ' : '');
            if (ys.length === 0) { return tag + '{}'; }
            if (indent) {
                return tag + '{' + indentedJoin(ys, indent) + '}';
            }
            return tag + '{ ' + $join.call(ys, ', ') + ' }';
        }
        return String(obj);
    };

    function wrapQuotes(s, defaultStyle, opts) {
        var quoteChar = (opts.quoteStyle || defaultStyle) === 'double' ? '"' : "'";
        return quoteChar + s + quoteChar;
    }

    function quote(s) {
        return $replace.call(String(s), /"/g, '&quot;');
    }

    function isArray$3(obj) { return toStr$5(obj) === '[object Array]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
    function isDate$1(obj) { return toStr$5(obj) === '[object Date]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
    function isRegExp(obj) { return toStr$5(obj) === '[object RegExp]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
    function isError(obj) { return toStr$5(obj) === '[object Error]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
    function isString(obj) { return toStr$5(obj) === '[object String]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
    function isNumber(obj) { return toStr$5(obj) === '[object Number]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
    function isBoolean(obj) { return toStr$5(obj) === '[object Boolean]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }

    // Symbol and BigInt do have Symbol.toStringTag by spec, so that can't be used to eliminate false positives
    function isSymbol$2(obj) {
        if (hasShammedSymbols) {
            return obj && typeof obj === 'object' && obj instanceof Symbol;
        }
        if (typeof obj === 'symbol') {
            return true;
        }
        if (!obj || typeof obj !== 'object' || !symToString) {
            return false;
        }
        try {
            symToString.call(obj);
            return true;
        } catch (e) {}
        return false;
    }

    function isBigInt(obj) {
        if (!obj || typeof obj !== 'object' || !bigIntValueOf) {
            return false;
        }
        try {
            bigIntValueOf.call(obj);
            return true;
        } catch (e) {}
        return false;
    }

    var hasOwn = Object.prototype.hasOwnProperty || function (key) { return key in this; };
    function has$6(obj, key) {
        return hasOwn.call(obj, key);
    }

    function toStr$5(obj) {
        return objectToString.call(obj);
    }

    function nameOf(f) {
        if (f.name) { return f.name; }
        var m = $match$1.call(functionToString.call(f), /^function\s*([\w$]+)/);
        if (m) { return m[1]; }
        return null;
    }

    function indexOf(xs, x) {
        if (xs.indexOf) { return xs.indexOf(x); }
        for (var i = 0, l = xs.length; i < l; i++) {
            if (xs[i] === x) { return i; }
        }
        return -1;
    }

    function isMap(x) {
        if (!mapSize || !x || typeof x !== 'object') {
            return false;
        }
        try {
            mapSize.call(x);
            try {
                setSize.call(x);
            } catch (s) {
                return true;
            }
            return x instanceof Map; // core-js workaround, pre-v2.5.0
        } catch (e) {}
        return false;
    }

    function isWeakMap(x) {
        if (!weakMapHas || !x || typeof x !== 'object') {
            return false;
        }
        try {
            weakMapHas.call(x, weakMapHas);
            try {
                weakSetHas.call(x, weakSetHas);
            } catch (s) {
                return true;
            }
            return x instanceof WeakMap; // core-js workaround, pre-v2.5.0
        } catch (e) {}
        return false;
    }

    function isWeakRef(x) {
        if (!weakRefDeref || !x || typeof x !== 'object') {
            return false;
        }
        try {
            weakRefDeref.call(x);
            return true;
        } catch (e) {}
        return false;
    }

    function isSet(x) {
        if (!setSize || !x || typeof x !== 'object') {
            return false;
        }
        try {
            setSize.call(x);
            try {
                mapSize.call(x);
            } catch (m) {
                return true;
            }
            return x instanceof Set; // core-js workaround, pre-v2.5.0
        } catch (e) {}
        return false;
    }

    function isWeakSet(x) {
        if (!weakSetHas || !x || typeof x !== 'object') {
            return false;
        }
        try {
            weakSetHas.call(x, weakSetHas);
            try {
                weakMapHas.call(x, weakMapHas);
            } catch (s) {
                return true;
            }
            return x instanceof WeakSet; // core-js workaround, pre-v2.5.0
        } catch (e) {}
        return false;
    }

    function isElement(x) {
        if (!x || typeof x !== 'object') { return false; }
        if (typeof HTMLElement !== 'undefined' && x instanceof HTMLElement) {
            return true;
        }
        return typeof x.nodeName === 'string' && typeof x.getAttribute === 'function';
    }

    function inspectString(str, opts) {
        if (str.length > opts.maxStringLength) {
            var remaining = str.length - opts.maxStringLength;
            var trailer = '... ' + remaining + ' more character' + (remaining > 1 ? 's' : '');
            return inspectString($slice.call(str, 0, opts.maxStringLength), opts) + trailer;
        }
        // eslint-disable-next-line no-control-regex
        var s = $replace.call($replace.call(str, /(['\\])/g, '\\$1'), /[\x00-\x1f]/g, lowbyte);
        return wrapQuotes(s, 'single', opts);
    }

    function lowbyte(c) {
        var n = c.charCodeAt(0);
        var x = {
            8: 'b',
            9: 't',
            10: 'n',
            12: 'f',
            13: 'r'
        }[n];
        if (x) { return '\\' + x; }
        return '\\x' + (n < 0x10 ? '0' : '') + $toUpperCase.call(n.toString(16));
    }

    function markBoxed(str) {
        return 'Object(' + str + ')';
    }

    function weakCollectionOf(type) {
        return type + ' { ? }';
    }

    function collectionOf(type, size, entries, indent) {
        var joinedEntries = indent ? indentedJoin(entries, indent) : $join.call(entries, ', ');
        return type + ' (' + size + ') {' + joinedEntries + '}';
    }

    function singleLineValues(xs) {
        for (var i = 0; i < xs.length; i++) {
            if (indexOf(xs[i], '\n') >= 0) {
                return false;
            }
        }
        return true;
    }

    function getIndent(opts, depth) {
        var baseIndent;
        if (opts.indent === '\t') {
            baseIndent = '\t';
        } else if (typeof opts.indent === 'number' && opts.indent > 0) {
            baseIndent = $join.call(Array(opts.indent + 1), ' ');
        } else {
            return null;
        }
        return {
            base: baseIndent,
            prev: $join.call(Array(depth + 1), baseIndent)
        };
    }

    function indentedJoin(xs, indent) {
        if (xs.length === 0) { return ''; }
        var lineJoiner = '\n' + indent.prev + indent.base;
        return lineJoiner + $join.call(xs, ',' + lineJoiner) + '\n' + indent.prev;
    }

    function arrObjKeys(obj, inspect) {
        var isArr = isArray$3(obj);
        var xs = [];
        if (isArr) {
            xs.length = obj.length;
            for (var i = 0; i < obj.length; i++) {
                xs[i] = has$6(obj, i) ? inspect(obj[i], obj) : '';
            }
        }
        var syms = typeof gOPS === 'function' ? gOPS(obj) : [];
        var symMap;
        if (hasShammedSymbols) {
            symMap = {};
            for (var k = 0; k < syms.length; k++) {
                symMap['$' + syms[k]] = syms[k];
            }
        }

        for (var key in obj) { // eslint-disable-line no-restricted-syntax
            if (!has$6(obj, key)) { continue; } // eslint-disable-line no-restricted-syntax, no-continue
            if (isArr && String(Number(key)) === key && key < obj.length) { continue; } // eslint-disable-line no-restricted-syntax, no-continue
            if (hasShammedSymbols && symMap['$' + key] instanceof Symbol) {
                // this is to prevent shammed Symbols, which are stored as strings, from being included in the string key section
                continue; // eslint-disable-line no-restricted-syntax, no-continue
            } else if ($test.call(/[^\w$]/, key)) {
                xs.push(inspect(key, obj) + ': ' + inspect(obj[key], obj));
            } else {
                xs.push(key + ': ' + inspect(obj[key], obj));
            }
        }
        if (typeof gOPS === 'function') {
            for (var j = 0; j < syms.length; j++) {
                if (isEnumerable$1.call(obj, syms[j])) {
                    xs.push('[' + inspect(syms[j]) + ']: ' + inspect(obj[syms[j]], obj));
                }
            }
        }
        return xs;
    }

    var GetIntrinsic$w = getIntrinsic;

    var callBind$1 = callBind$2.exports;

    var $indexOf = callBind$1(GetIntrinsic$w('String.prototype.indexOf'));

    var callBound$6 = function callBoundIntrinsic(name, allowMissing) {
    	var intrinsic = GetIntrinsic$w(name, !!allowMissing);
    	if (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {
    		return callBind$1(intrinsic);
    	}
    	return intrinsic;
    };

    var GetIntrinsic$v = getIntrinsic;

    var $Array$1 = GetIntrinsic$v('%Array%');

    // eslint-disable-next-line global-require
    var toStr$4 = !$Array$1.isArray && callBound$6('Object.prototype.toString');

    // https://ecma-international.org/ecma-262/6.0/#sec-isarray

    var IsArray$5 = $Array$1.isArray || function IsArray(argument) {
    	return toStr$4(argument) === '[object Array]';
    };

    var GetIntrinsic$u = getIntrinsic;
    var callBound$5 = callBound$6;

    var $TypeError$k = GetIntrinsic$u('%TypeError%');

    var IsArray$4 = IsArray$5;

    var $apply = GetIntrinsic$u('%Reflect.apply%', true) || callBound$5('%Function.prototype.apply%');

    // https://ecma-international.org/ecma-262/6.0/#sec-call

    var Call$4 = function Call(F, V) {
    	var argumentsList = arguments.length > 2 ? arguments[2] : [];
    	if (!IsArray$4(argumentsList)) {
    		throw new $TypeError$k('Assertion failed: optional `argumentsList`, if provided, must be a List');
    	}
    	return $apply(F, V, argumentsList);
    };

    // https://ecma-international.org/ecma-262/6.0/#sec-ispropertykey

    var IsPropertyKey$7 = function IsPropertyKey(argument) {
    	return typeof argument === 'string' || typeof argument === 'symbol';
    };

    // https://262.ecma-international.org/5.1/#sec-8

    var Type$h = function Type(x) {
    	if (x === null) {
    		return 'Null';
    	}
    	if (typeof x === 'undefined') {
    		return 'Undefined';
    	}
    	if (typeof x === 'function' || typeof x === 'object') {
    		return 'Object';
    	}
    	if (typeof x === 'number') {
    		return 'Number';
    	}
    	if (typeof x === 'boolean') {
    		return 'Boolean';
    	}
    	if (typeof x === 'string') {
    		return 'String';
    	}
    };

    var ES5Type = Type$h;

    // https://262.ecma-international.org/11.0/#sec-ecmascript-data-types-and-values

    var Type$g = function Type(x) {
    	if (typeof x === 'symbol') {
    		return 'Symbol';
    	}
    	if (typeof x === 'bigint') {
    		return 'BigInt';
    	}
    	return ES5Type(x);
    };

    var GetIntrinsic$t = getIntrinsic;

    var $TypeError$j = GetIntrinsic$t('%TypeError%');

    var inspect$2 = objectInspect;

    var IsPropertyKey$6 = IsPropertyKey$7;
    var Type$f = Type$g;

    /**
     * 7.3.1 Get (O, P) - https://ecma-international.org/ecma-262/6.0/#sec-get-o-p
     * 1. Assert: Type(O) is Object.
     * 2. Assert: IsPropertyKey(P) is true.
     * 3. Return O.[[Get]](P, O).
     */

    var Get$3 = function Get(O, P) {
    	// 7.3.1.1
    	if (Type$f(O) !== 'Object') {
    		throw new $TypeError$j('Assertion failed: Type(O) is not Object');
    	}
    	// 7.3.1.2
    	if (!IsPropertyKey$6(P)) {
    		throw new $TypeError$j('Assertion failed: IsPropertyKey(P) is not true, got ' + inspect$2(P));
    	}
    	// 7.3.1.3
    	return O[P];
    };

    var hasSymbols$4 = hasSymbols$6();
    var GetIntrinsic$s = getIntrinsic;
    var callBound$4 = callBound$6;

    var $iterator = GetIntrinsic$s('%Symbol.iterator%', true);
    var $stringSlice = callBound$4('String.prototype.slice');

    var getIteratorMethod$1 = function getIteratorMethod(ES, iterable) {
    	var usingIterator;
    	if (hasSymbols$4) {
    		usingIterator = ES.GetMethod(iterable, $iterator);
    	} else if (ES.IsArray(iterable)) {
    		usingIterator = function () {
    			var i = -1;
    			var arr = this; // eslint-disable-line no-invalid-this
    			return {
    				next: function () {
    					i += 1;
    					return {
    						done: i >= arr.length,
    						value: arr[i]
    					};
    				}
    			};
    		};
    	} else if (ES.Type(iterable) === 'String') {
    		usingIterator = function () {
    			var i = 0;
    			return {
    				next: function () {
    					var nextIndex = ES.AdvanceStringIndex(iterable, i, true);
    					var value = $stringSlice(iterable, i, nextIndex);
    					i = nextIndex;
    					return {
    						done: nextIndex > iterable.length,
    						value: value
    					};
    				}
    			};
    		};
    	}
    	return usingIterator;
    };

    var isLeadingSurrogate$2 = function isLeadingSurrogate(charCode) {
    	return typeof charCode === 'number' && charCode >= 0xD800 && charCode <= 0xDBFF;
    };

    var isTrailingSurrogate$2 = function isTrailingSurrogate(charCode) {
    	return typeof charCode === 'number' && charCode >= 0xDC00 && charCode <= 0xDFFF;
    };

    var GetIntrinsic$r = getIntrinsic;

    var $TypeError$i = GetIntrinsic$r('%TypeError%');
    var $fromCharCode = GetIntrinsic$r('%String.fromCharCode%');

    var isLeadingSurrogate$1 = isLeadingSurrogate$2;
    var isTrailingSurrogate$1 = isTrailingSurrogate$2;

    // https://tc39.es/ecma262/2020/#sec-utf16decodesurrogatepair

    var UTF16SurrogatePairToCodePoint$1 = function UTF16DecodeSurrogatePair(lead, trail) {
    	if (!isLeadingSurrogate$1(lead) || !isTrailingSurrogate$1(trail)) {
    		throw new $TypeError$i('Assertion failed: `lead` must be a leading surrogate char code, and `trail` must be a trailing surrogate char code');
    	}
    	// var cp = (lead - 0xD800) * 0x400 + (trail - 0xDC00) + 0x10000;
    	return $fromCharCode(lead) + $fromCharCode(trail);
    };

    var GetIntrinsic$q = getIntrinsic;

    var $TypeError$h = GetIntrinsic$q('%TypeError%');
    var callBound$3 = callBound$6;
    var isLeadingSurrogate = isLeadingSurrogate$2;
    var isTrailingSurrogate = isTrailingSurrogate$2;

    var Type$e = Type$g;
    var UTF16SurrogatePairToCodePoint = UTF16SurrogatePairToCodePoint$1;

    var $charAt = callBound$3('String.prototype.charAt');
    var $charCodeAt = callBound$3('String.prototype.charCodeAt');

    // https://ecma-international.org/ecma-262/12.0/#sec-codepointat

    var CodePointAt$1 = function CodePointAt(string, position) {
    	if (Type$e(string) !== 'String') {
    		throw new $TypeError$h('Assertion failed: `string` must be a String');
    	}
    	var size = string.length;
    	if (position < 0 || position >= size) {
    		throw new $TypeError$h('Assertion failed: `position` must be >= 0, and < the length of `string`');
    	}
    	var first = $charCodeAt(string, position);
    	var cp = $charAt(string, position);
    	var firstIsLeading = isLeadingSurrogate(first);
    	var firstIsTrailing = isTrailingSurrogate(first);
    	if (!firstIsLeading && !firstIsTrailing) {
    		return {
    			'[[CodePoint]]': cp,
    			'[[CodeUnitCount]]': 1,
    			'[[IsUnpairedSurrogate]]': false
    		};
    	}
    	if (firstIsTrailing || (position + 1 === size)) {
    		return {
    			'[[CodePoint]]': cp,
    			'[[CodeUnitCount]]': 1,
    			'[[IsUnpairedSurrogate]]': true
    		};
    	}
    	var second = $charCodeAt(string, position + 1);
    	if (!isTrailingSurrogate(second)) {
    		return {
    			'[[CodePoint]]': cp,
    			'[[CodeUnitCount]]': 1,
    			'[[IsUnpairedSurrogate]]': true
    		};
    	}

    	return {
    		'[[CodePoint]]': UTF16SurrogatePairToCodePoint(first, second),
    		'[[CodeUnitCount]]': 2,
    		'[[IsUnpairedSurrogate]]': false
    	};
    };

    var GetIntrinsic$p = getIntrinsic;

    var $abs = GetIntrinsic$p('%Math.abs%');

    // http://262.ecma-international.org/5.1/#sec-5.2

    var abs$1 = function abs(x) {
    	return $abs(x);
    };

    // var modulo = require('./modulo');
    var $floor = Math.floor;

    // http://262.ecma-international.org/5.1/#sec-5.2

    var floor$1 = function floor(x) {
    	// return x - modulo(x, 1);
    	return $floor(x);
    };

    var _isNaN = Number.isNaN || function isNaN(a) {
    	return a !== a;
    };

    var $isNaN$2 = Number.isNaN || function (a) { return a !== a; };

    var _isFinite = Number.isFinite || function (x) { return typeof x === 'number' && !$isNaN$2(x) && x !== Infinity && x !== -Infinity; };

    var abs = abs$1;
    var floor = floor$1;
    var Type$d = Type$g;

    var $isNaN$1 = _isNaN;
    var $isFinite = _isFinite;

    // https://tc39.es/ecma262/#sec-isintegralnumber

    var IsIntegralNumber$1 = function IsIntegralNumber(argument) {
    	if (Type$d(argument) !== 'Number' || $isNaN$1(argument) || !$isFinite(argument)) {
    		return false;
    	}
    	var absValue = abs(argument);
    	return floor(absValue) === absValue;
    };

    var GetIntrinsic$o = getIntrinsic;

    var $Math = GetIntrinsic$o('%Math%');
    var $Number = GetIntrinsic$o('%Number%');

    var maxSafeInteger = $Number.MAX_SAFE_INTEGER || $Math.pow(2, 53) - 1;

    var GetIntrinsic$n = getIntrinsic;

    var CodePointAt = CodePointAt$1;
    var IsIntegralNumber = IsIntegralNumber$1;
    var Type$c = Type$g;

    var MAX_SAFE_INTEGER = maxSafeInteger;

    var $TypeError$g = GetIntrinsic$n('%TypeError%');

    // https://ecma-international.org/ecma-262/12.0/#sec-advancestringindex

    var AdvanceStringIndex$1 = function AdvanceStringIndex(S, index, unicode) {
    	if (Type$c(S) !== 'String') {
    		throw new $TypeError$g('Assertion failed: `S` must be a String');
    	}
    	if (!IsIntegralNumber(index) || index < 0 || index > MAX_SAFE_INTEGER) {
    		throw new $TypeError$g('Assertion failed: `length` must be an integer >= 0 and <= 2**53');
    	}
    	if (Type$c(unicode) !== 'Boolean') {
    		throw new $TypeError$g('Assertion failed: `unicode` must be a Boolean');
    	}
    	if (!unicode) {
    		return index + 1;
    	}
    	var length = S.length;
    	if ((index + 1) >= length) {
    		return index + 1;
    	}
    	var cp = CodePointAt(S, index);
    	return index + cp['[[CodeUnitCount]]'];
    };

    var GetIntrinsic$m = getIntrinsic;

    var $TypeError$f = GetIntrinsic$m('%TypeError%');

    // http://262.ecma-international.org/5.1/#sec-9.10

    var CheckObjectCoercible = function CheckObjectCoercible(value, optMessage) {
    	if (value == null) {
    		throw new $TypeError$f(optMessage || ('Cannot call method on ' + value));
    	}
    	return value;
    };

    var RequireObjectCoercible$2 = CheckObjectCoercible;

    var GetIntrinsic$l = getIntrinsic;

    var $Object$1 = GetIntrinsic$l('%Object%');

    var RequireObjectCoercible$1 = RequireObjectCoercible$2;

    // https://ecma-international.org/ecma-262/6.0/#sec-toobject

    var ToObject$1 = function ToObject(value) {
    	RequireObjectCoercible$1(value);
    	return $Object$1(value);
    };

    var GetIntrinsic$k = getIntrinsic;

    var $TypeError$e = GetIntrinsic$k('%TypeError%');

    var IsPropertyKey$5 = IsPropertyKey$7;
    var ToObject = ToObject$1;

    /**
     * 7.3.2 GetV (V, P)
     * 1. Assert: IsPropertyKey(P) is true.
     * 2. Let O be ToObject(V).
     * 3. ReturnIfAbrupt(O).
     * 4. Return O.[[Get]](P, V).
     */

    var GetV$2 = function GetV(V, P) {
    	// 7.3.2.1
    	if (!IsPropertyKey$5(P)) {
    		throw new $TypeError$e('Assertion failed: IsPropertyKey(P) is not true');
    	}

    	// 7.3.2.2-3
    	var O = ToObject(V);

    	// 7.3.2.4
    	return O[P];
    };

    var fnToStr = Function.prototype.toString;
    var reflectApply = typeof Reflect === 'object' && Reflect !== null && Reflect.apply;
    var badArrayLike;
    var isCallableMarker;
    if (typeof reflectApply === 'function' && typeof Object.defineProperty === 'function') {
    	try {
    		badArrayLike = Object.defineProperty({}, 'length', {
    			get: function () {
    				throw isCallableMarker;
    			}
    		});
    		isCallableMarker = {};
    		// eslint-disable-next-line no-throw-literal
    		reflectApply(function () { throw 42; }, null, badArrayLike);
    	} catch (_) {
    		if (_ !== isCallableMarker) {
    			reflectApply = null;
    		}
    	}
    } else {
    	reflectApply = null;
    }

    var constructorRegex = /^\s*class\b/;
    var isES6ClassFn = function isES6ClassFunction(value) {
    	try {
    		var fnStr = fnToStr.call(value);
    		return constructorRegex.test(fnStr);
    	} catch (e) {
    		return false; // not a function
    	}
    };

    var tryFunctionObject = function tryFunctionToStr(value) {
    	try {
    		if (isES6ClassFn(value)) { return false; }
    		fnToStr.call(value);
    		return true;
    	} catch (e) {
    		return false;
    	}
    };
    var toStr$3 = Object.prototype.toString;
    var fnClass = '[object Function]';
    var genClass = '[object GeneratorFunction]';
    var hasToStringTag$2 = typeof Symbol === 'function' && !!Symbol.toStringTag; // better: use `has-tostringtag`
    /* globals document: false */
    var documentDotAll = typeof document === 'object' && typeof document.all === 'undefined' && document.all !== undefined ? document.all : {};

    var isCallable$1 = reflectApply
    	? function isCallable(value) {
    		if (value === documentDotAll) { return true; }
    		if (!value) { return false; }
    		if (typeof value !== 'function' && typeof value !== 'object') { return false; }
    		if (typeof value === 'function' && !value.prototype) { return true; }
    		try {
    			reflectApply(value, null, badArrayLike);
    		} catch (e) {
    			if (e !== isCallableMarker) { return false; }
    		}
    		return !isES6ClassFn(value);
    	}
    	: function isCallable(value) {
    		if (value === documentDotAll) { return true; }
    		if (!value) { return false; }
    		if (typeof value !== 'function' && typeof value !== 'object') { return false; }
    		if (typeof value === 'function' && !value.prototype) { return true; }
    		if (hasToStringTag$2) { return tryFunctionObject(value); }
    		if (isES6ClassFn(value)) { return false; }
    		var strClass = toStr$3.call(value);
    		return strClass === fnClass || strClass === genClass;
    	};

    // http://262.ecma-international.org/5.1/#sec-9.11

    var IsCallable$4 = isCallable$1;

    var GetIntrinsic$j = getIntrinsic;

    var $TypeError$d = GetIntrinsic$j('%TypeError%');

    var GetV$1 = GetV$2;
    var IsCallable$3 = IsCallable$4;
    var IsPropertyKey$4 = IsPropertyKey$7;

    /**
     * 7.3.9 - https://ecma-international.org/ecma-262/6.0/#sec-getmethod
     * 1. Assert: IsPropertyKey(P) is true.
     * 2. Let func be GetV(O, P).
     * 3. ReturnIfAbrupt(func).
     * 4. If func is either undefined or null, return undefined.
     * 5. If IsCallable(func) is false, throw a TypeError exception.
     * 6. Return func.
     */

    var GetMethod$3 = function GetMethod(O, P) {
    	// 7.3.9.1
    	if (!IsPropertyKey$4(P)) {
    		throw new $TypeError$d('Assertion failed: IsPropertyKey(P) is not true');
    	}

    	// 7.3.9.2
    	var func = GetV$1(O, P);

    	// 7.3.9.4
    	if (func == null) {
    		return void 0;
    	}

    	// 7.3.9.5
    	if (!IsCallable$3(func)) {
    		throw new $TypeError$d(P + 'is not a function');
    	}

    	// 7.3.9.6
    	return func;
    };

    var GetIntrinsic$i = getIntrinsic;

    var $TypeError$c = GetIntrinsic$i('%TypeError%');
    var $asyncIterator = GetIntrinsic$i('%Symbol.asyncIterator%', true);

    var inspect$1 = objectInspect;
    var hasSymbols$3 = hasSymbols$6();

    var getIteratorMethod = getIteratorMethod$1;
    var AdvanceStringIndex = AdvanceStringIndex$1;
    var Call$3 = Call$4;
    var GetMethod$2 = GetMethod$3;
    var IsArray$3 = IsArray$5;
    var Type$b = Type$g;

    // https://262.ecma-international.org/9.0/#sec-getiterator
    var GetIterator$1 = function GetIterator(obj, hint, method) {
    	var actualHint = hint;
    	if (arguments.length < 2) {
    		actualHint = 'sync';
    	}
    	if (actualHint !== 'sync' && actualHint !== 'async') {
    		throw new $TypeError$c("Assertion failed: `hint` must be one of 'sync' or 'async', got " + inspect$1(hint));
    	}

    	var actualMethod = method;
    	if (arguments.length < 3) {
    		if (actualHint === 'async') {
    			if (hasSymbols$3 && $asyncIterator) {
    				actualMethod = GetMethod$2(obj, $asyncIterator);
    			}
    			if (actualMethod === undefined) {
    				throw new $TypeError$c("async from sync iterators aren't currently supported");
    			}
    		} else {
    			actualMethod = getIteratorMethod(
    				{
    					AdvanceStringIndex: AdvanceStringIndex,
    					GetMethod: GetMethod$2,
    					IsArray: IsArray$3,
    					Type: Type$b
    				},
    				obj
    			);
    		}
    	}
    	var iterator = Call$3(actualMethod, obj);
    	if (Type$b(iterator) !== 'Object') {
    		throw new $TypeError$c('iterator must return an object');
    	}

    	return iterator;

    	// TODO: This should return an IteratorRecord
    	/*
    	var nextMethod = GetV(iterator, 'next');
    	return {
    		'[[Iterator]]': iterator,
    		'[[NextMethod]]': nextMethod,
    		'[[Done]]': false
    	};
    	*/
    };

    var GetIntrinsic$h = getIntrinsic;

    var $TypeError$b = GetIntrinsic$h('%TypeError%');

    var Call$2 = Call$4;
    var GetMethod$1 = GetMethod$3;
    var IsCallable$2 = IsCallable$4;
    var Type$a = Type$g;

    // https://ecma-international.org/ecma-262/6.0/#sec-iteratorclose

    var IteratorClose$1 = function IteratorClose(iterator, completion) {
    	if (Type$a(iterator) !== 'Object') {
    		throw new $TypeError$b('Assertion failed: Type(iterator) is not Object');
    	}
    	if (!IsCallable$2(completion)) {
    		throw new $TypeError$b('Assertion failed: completion is not a thunk for a Completion Record');
    	}
    	var completionThunk = completion;

    	var iteratorReturn = GetMethod$1(iterator, 'return');

    	if (typeof iteratorReturn === 'undefined') {
    		return completionThunk();
    	}

    	var completionRecord;
    	try {
    		var innerResult = Call$2(iteratorReturn, iterator, []);
    	} catch (e) {
    		// if we hit here, then "e" is the innerResult completion that needs re-throwing

    		// if the completion is of type "throw", this will throw.
    		completionThunk();
    		completionThunk = null; // ensure it's not called twice.

    		// if not, then return the innerResult completion
    		throw e;
    	}
    	completionRecord = completionThunk(); // if innerResult worked, then throw if the completion does
    	completionThunk = null; // ensure it's not called twice.

    	if (Type$a(innerResult) !== 'Object') {
    		throw new $TypeError$b('iterator .return must return an object');
    	}

    	return completionRecord;
    };

    // http://262.ecma-international.org/5.1/#sec-9.2

    var ToBoolean$3 = function ToBoolean(value) { return !!value; };

    var GetIntrinsic$g = getIntrinsic;

    var $TypeError$a = GetIntrinsic$g('%TypeError%');

    var Get$2 = Get$3;
    var ToBoolean$2 = ToBoolean$3;
    var Type$9 = Type$g;

    // https://ecma-international.org/ecma-262/6.0/#sec-iteratorcomplete

    var IteratorComplete$1 = function IteratorComplete(iterResult) {
    	if (Type$9(iterResult) !== 'Object') {
    		throw new $TypeError$a('Assertion failed: Type(iterResult) is not Object');
    	}
    	return ToBoolean$2(Get$2(iterResult, 'done'));
    };

    var GetIntrinsic$f = getIntrinsic;

    var $TypeError$9 = GetIntrinsic$f('%TypeError%');

    var Call$1 = Call$4;
    var IsArray$2 = IsArray$5;
    var GetV = GetV$2;
    var IsPropertyKey$3 = IsPropertyKey$7;

    // https://ecma-international.org/ecma-262/6.0/#sec-invoke

    var Invoke$1 = function Invoke(O, P) {
    	if (!IsPropertyKey$3(P)) {
    		throw new $TypeError$9('Assertion failed: P must be a Property Key');
    	}
    	var argumentsList = arguments.length > 2 ? arguments[2] : [];
    	if (!IsArray$2(argumentsList)) {
    		throw new $TypeError$9('Assertion failed: optional `argumentsList`, if provided, must be a List');
    	}
    	var func = GetV(O, P);
    	return Call$1(func, O, argumentsList);
    };

    var GetIntrinsic$e = getIntrinsic;

    var $TypeError$8 = GetIntrinsic$e('%TypeError%');

    var Invoke = Invoke$1;
    var Type$8 = Type$g;

    // https://ecma-international.org/ecma-262/6.0/#sec-iteratornext

    var IteratorNext$1 = function IteratorNext(iterator, value) {
    	var result = Invoke(iterator, 'next', arguments.length < 2 ? [] : [value]);
    	if (Type$8(result) !== 'Object') {
    		throw new $TypeError$8('iterator next must return an object');
    	}
    	return result;
    };

    var IteratorComplete = IteratorComplete$1;
    var IteratorNext = IteratorNext$1;

    // https://ecma-international.org/ecma-262/6.0/#sec-iteratorstep

    var IteratorStep$1 = function IteratorStep(iterator) {
    	var result = IteratorNext(iterator);
    	var done = IteratorComplete(result);
    	return done === true ? false : result;
    };

    var GetIntrinsic$d = getIntrinsic;

    var $TypeError$7 = GetIntrinsic$d('%TypeError%');

    var Get$1 = Get$3;
    var Type$7 = Type$g;

    // https://ecma-international.org/ecma-262/6.0/#sec-iteratorvalue

    var IteratorValue$1 = function IteratorValue(iterResult) {
    	if (Type$7(iterResult) !== 'Object') {
    		throw new $TypeError$7('Assertion failed: Type(iterResult) is not Object');
    	}
    	return Get$1(iterResult, 'value');
    };

    var inspect = objectInspect;

    var GetIntrinsic$c = getIntrinsic;

    var $TypeError$6 = GetIntrinsic$c('%TypeError%');

    var Call = Call$4;
    var Get = Get$3;
    var GetIterator = GetIterator$1;
    var IsCallable$1 = IsCallable$4;
    var IteratorClose = IteratorClose$1;
    var IteratorStep = IteratorStep$1;
    var IteratorValue = IteratorValue$1;
    var Type$6 = Type$g;

    // https://262.ecma-international.org/10.0//#sec-add-entries-from-iterable

    var AddEntriesFromIterable$1 = function AddEntriesFromIterable(target, iterable, adder) {
    	if (!IsCallable$1(adder)) {
    		throw new $TypeError$6('Assertion failed: `adder` is not callable');
    	}
    	if (iterable == null) {
    		throw new $TypeError$6('Assertion failed: `iterable` is present, and not nullish');
    	}
    	var iteratorRecord = GetIterator(iterable);
    	while (true) { // eslint-disable-line no-constant-condition
    		var next = IteratorStep(iteratorRecord);
    		if (!next) {
    			return target;
    		}
    		var nextItem = IteratorValue(next);
    		if (Type$6(nextItem) !== 'Object') {
    			var error = new $TypeError$6('iterator next must return an Object, got ' + inspect(nextItem));
    			return IteratorClose(
    				iteratorRecord,
    				function () { throw error; } // eslint-disable-line no-loop-func
    			);
    		}
    		try {
    			var k = Get(nextItem, '0');
    			var v = Get(nextItem, '1');
    			Call(adder, target, [k, v]);
    		} catch (e) {
    			return IteratorClose(
    				iteratorRecord,
    				function () { throw e; }
    			);
    		}
    	}
    };

    var GetIntrinsic$b = getIntrinsic;

    var $Array = GetIntrinsic$b('%Array%');

    // eslint-disable-next-line global-require
    var toStr$2 = !$Array.isArray && callBound$6('Object.prototype.toString');

    // https://ecma-international.org/ecma-262/6.0/#sec-isarray

    var IsArray$1 = $Array.isArray || function IsArray(argument) {
    	return toStr$2(argument) === '[object Array]';
    };

    var GetIntrinsic$a = getIntrinsic;

    var $defineProperty = GetIntrinsic$a('%Object.defineProperty%', true);

    if ($defineProperty) {
    	try {
    		$defineProperty({}, 'a', { value: 1 });
    	} catch (e) {
    		// IE 8 has a broken defineProperty
    		$defineProperty = null;
    	}
    }

    // node v0.6 has a bug where array lengths can be Set but not Defined
    var hasArrayLengthDefineBug = Object.defineProperty && Object.defineProperty([], 'length', { value: 1 }).length === 0;

    // eslint-disable-next-line global-require
    var isArray$2 = hasArrayLengthDefineBug && IsArray$1; // this does not depend on any other AOs.

    var callBound$2 = callBound$6;

    var $isEnumerable$1 = callBound$2('Object.prototype.propertyIsEnumerable');

    // eslint-disable-next-line max-params
    var DefineOwnProperty$1 = function DefineOwnProperty(IsDataDescriptor, SameValue, FromPropertyDescriptor, O, P, desc) {
    	if (!$defineProperty) {
    		if (!IsDataDescriptor(desc)) {
    			// ES3 does not support getters/setters
    			return false;
    		}
    		if (!desc['[[Configurable]]'] || !desc['[[Writable]]']) {
    			return false;
    		}

    		// fallback for ES3
    		if (P in O && $isEnumerable$1(O, P) !== !!desc['[[Enumerable]]']) {
    			// a non-enumerable existing property
    			return false;
    		}

    		// property does not exist at all, or exists but is enumerable
    		var V = desc['[[Value]]'];
    		// eslint-disable-next-line no-param-reassign
    		O[P] = V; // will use [[Define]]
    		return SameValue(O[P], V);
    	}
    	if (
    		hasArrayLengthDefineBug
    		&& P === 'length'
    		&& '[[Value]]' in desc
    		&& isArray$2(O)
    		&& O.length !== desc['[[Value]]']
    	) {
    		// eslint-disable-next-line no-param-reassign
    		O.length = desc['[[Value]]'];
    		return O.length === desc['[[Value]]'];
    	}

    	$defineProperty(O, P, FromPropertyDescriptor(desc));
    	return true;
    };

    var GetIntrinsic$9 = getIntrinsic;

    var $TypeError$5 = GetIntrinsic$9('%TypeError%');
    var $SyntaxError = GetIntrinsic$9('%SyntaxError%');

    var has$5 = src;

    var predicates = {
    	// https://262.ecma-international.org/6.0/#sec-property-descriptor-specification-type
    	'Property Descriptor': function isPropertyDescriptor(Type, Desc) {
    		if (Type(Desc) !== 'Object') {
    			return false;
    		}
    		var allowed = {
    			'[[Configurable]]': true,
    			'[[Enumerable]]': true,
    			'[[Get]]': true,
    			'[[Set]]': true,
    			'[[Value]]': true,
    			'[[Writable]]': true
    		};

    		for (var key in Desc) { // eslint-disable-line
    			if (has$5(Desc, key) && !allowed[key]) {
    				return false;
    			}
    		}

    		var isData = has$5(Desc, '[[Value]]');
    		var IsAccessor = has$5(Desc, '[[Get]]') || has$5(Desc, '[[Set]]');
    		if (isData && IsAccessor) {
    			throw new $TypeError$5('Property Descriptors may not be both accessor and data descriptors');
    		}
    		return true;
    	}
    };

    var assertRecord$2 = function assertRecord(Type, recordType, argumentName, value) {
    	var predicate = predicates[recordType];
    	if (typeof predicate !== 'function') {
    		throw new $SyntaxError('unknown record type: ' + recordType);
    	}
    	if (!predicate(Type, value)) {
    		throw new $TypeError$5(argumentName + ' must be a ' + recordType);
    	}
    };

    var assertRecord$1 = assertRecord$2;

    var Type$5 = Type$g;

    // https://ecma-international.org/ecma-262/6.0/#sec-frompropertydescriptor

    var FromPropertyDescriptor$1 = function FromPropertyDescriptor(Desc) {
    	if (typeof Desc === 'undefined') {
    		return Desc;
    	}

    	assertRecord$1(Type$5, 'Property Descriptor', 'Desc', Desc);

    	var obj = {};
    	if ('[[Value]]' in Desc) {
    		obj.value = Desc['[[Value]]'];
    	}
    	if ('[[Writable]]' in Desc) {
    		obj.writable = Desc['[[Writable]]'];
    	}
    	if ('[[Get]]' in Desc) {
    		obj.get = Desc['[[Get]]'];
    	}
    	if ('[[Set]]' in Desc) {
    		obj.set = Desc['[[Set]]'];
    	}
    	if ('[[Enumerable]]' in Desc) {
    		obj.enumerable = Desc['[[Enumerable]]'];
    	}
    	if ('[[Configurable]]' in Desc) {
    		obj.configurable = Desc['[[Configurable]]'];
    	}
    	return obj;
    };

    var GetIntrinsic$8 = getIntrinsic;

    var $gOPD$1 = GetIntrinsic$8('%Object.getOwnPropertyDescriptor%', true);
    if ($gOPD$1) {
    	try {
    		$gOPD$1([], 'length');
    	} catch (e) {
    		// IE 8 has a broken gOPD
    		$gOPD$1 = null;
    	}
    }

    var getOwnPropertyDescriptor = $gOPD$1;

    var hasSymbols$2 = shams$1;

    var shams = function hasToStringTagShams() {
    	return hasSymbols$2() && !!Symbol.toStringTag;
    };

    var callBound$1 = callBound$6;
    var hasToStringTag$1 = shams();
    var has$4;
    var $exec;
    var isRegexMarker;
    var badStringifier;

    if (hasToStringTag$1) {
    	has$4 = callBound$1('Object.prototype.hasOwnProperty');
    	$exec = callBound$1('RegExp.prototype.exec');
    	isRegexMarker = {};

    	var throwRegexMarker = function () {
    		throw isRegexMarker;
    	};
    	badStringifier = {
    		toString: throwRegexMarker,
    		valueOf: throwRegexMarker
    	};

    	if (typeof Symbol.toPrimitive === 'symbol') {
    		badStringifier[Symbol.toPrimitive] = throwRegexMarker;
    	}
    }

    var $toString = callBound$1('Object.prototype.toString');
    var gOPD = Object.getOwnPropertyDescriptor;
    var regexClass = '[object RegExp]';

    var isRegex = hasToStringTag$1
    	// eslint-disable-next-line consistent-return
    	? function isRegex(value) {
    		if (!value || typeof value !== 'object') {
    			return false;
    		}

    		var descriptor = gOPD(value, 'lastIndex');
    		var hasLastIndexDataProperty = descriptor && has$4(descriptor, 'value');
    		if (!hasLastIndexDataProperty) {
    			return false;
    		}

    		try {
    			$exec(value, badStringifier);
    		} catch (e) {
    			return e === isRegexMarker;
    		}
    	}
    	: function isRegex(value) {
    		// In older browsers, typeof regex incorrectly returns 'function'
    		if (!value || (typeof value !== 'object' && typeof value !== 'function')) {
    			return false;
    		}

    		return $toString(value) === regexClass;
    	};

    var GetIntrinsic$7 = getIntrinsic;

    var $match = GetIntrinsic$7('%Symbol.match%', true);

    var hasRegExpMatcher = isRegex;

    var ToBoolean$1 = ToBoolean$3;

    // https://ecma-international.org/ecma-262/6.0/#sec-isregexp

    var IsRegExp$1 = function IsRegExp(argument) {
    	if (!argument || typeof argument !== 'object') {
    		return false;
    	}
    	if ($match) {
    		var isRegExp = argument[$match];
    		if (typeof isRegExp !== 'undefined') {
    			return ToBoolean$1(isRegExp);
    		}
    	}
    	return hasRegExpMatcher(argument);
    };

    var has$3 = src;

    var GetIntrinsic$6 = getIntrinsic;

    var $TypeError$4 = GetIntrinsic$6('%TypeError%');

    var Type$4 = Type$g;
    var ToBoolean = ToBoolean$3;
    var IsCallable = IsCallable$4;

    // https://262.ecma-international.org/5.1/#sec-8.10.5

    var ToPropertyDescriptor$1 = function ToPropertyDescriptor(Obj) {
    	if (Type$4(Obj) !== 'Object') {
    		throw new $TypeError$4('ToPropertyDescriptor requires an object');
    	}

    	var desc = {};
    	if (has$3(Obj, 'enumerable')) {
    		desc['[[Enumerable]]'] = ToBoolean(Obj.enumerable);
    	}
    	if (has$3(Obj, 'configurable')) {
    		desc['[[Configurable]]'] = ToBoolean(Obj.configurable);
    	}
    	if (has$3(Obj, 'value')) {
    		desc['[[Value]]'] = Obj.value;
    	}
    	if (has$3(Obj, 'writable')) {
    		desc['[[Writable]]'] = ToBoolean(Obj.writable);
    	}
    	if (has$3(Obj, 'get')) {
    		var getter = Obj.get;
    		if (typeof getter !== 'undefined' && !IsCallable(getter)) {
    			throw new $TypeError$4('getter must be a function');
    		}
    		desc['[[Get]]'] = getter;
    	}
    	if (has$3(Obj, 'set')) {
    		var setter = Obj.set;
    		if (typeof setter !== 'undefined' && !IsCallable(setter)) {
    			throw new $TypeError$4('setter must be a function');
    		}
    		desc['[[Set]]'] = setter;
    	}

    	if ((has$3(desc, '[[Get]]') || has$3(desc, '[[Set]]')) && (has$3(desc, '[[Value]]') || has$3(desc, '[[Writable]]'))) {
    		throw new $TypeError$4('Invalid property descriptor. Cannot both specify accessors and a value or writable attribute');
    	}
    	return desc;
    };

    var GetIntrinsic$5 = getIntrinsic;

    var $gOPD = getOwnPropertyDescriptor;
    var $TypeError$3 = GetIntrinsic$5('%TypeError%');

    var callBound = callBound$6;

    var $isEnumerable = callBound('Object.prototype.propertyIsEnumerable');

    var has$2 = src;

    var IsArray = IsArray$5;
    var IsPropertyKey$2 = IsPropertyKey$7;
    var IsRegExp = IsRegExp$1;
    var ToPropertyDescriptor = ToPropertyDescriptor$1;
    var Type$3 = Type$g;

    // https://ecma-international.org/ecma-262/6.0/#sec-ordinarygetownproperty

    var OrdinaryGetOwnProperty$1 = function OrdinaryGetOwnProperty(O, P) {
    	if (Type$3(O) !== 'Object') {
    		throw new $TypeError$3('Assertion failed: O must be an Object');
    	}
    	if (!IsPropertyKey$2(P)) {
    		throw new $TypeError$3('Assertion failed: P must be a Property Key');
    	}
    	if (!has$2(O, P)) {
    		return void 0;
    	}
    	if (!$gOPD) {
    		// ES3 / IE 8 fallback
    		var arrayLength = IsArray(O) && P === 'length';
    		var regexLastIndex = IsRegExp(O) && P === 'lastIndex';
    		return {
    			'[[Configurable]]': !(arrayLength || regexLastIndex),
    			'[[Enumerable]]': $isEnumerable(O, P),
    			'[[Value]]': O[P],
    			'[[Writable]]': true
    		};
    	}
    	return ToPropertyDescriptor($gOPD(O, P));
    };

    var has$1 = src;

    var assertRecord = assertRecord$2;

    var Type$2 = Type$g;

    // https://ecma-international.org/ecma-262/6.0/#sec-isdatadescriptor

    var IsDataDescriptor$1 = function IsDataDescriptor(Desc) {
    	if (typeof Desc === 'undefined') {
    		return false;
    	}

    	assertRecord(Type$2, 'Property Descriptor', 'Desc', Desc);

    	if (!has$1(Desc, '[[Value]]') && !has$1(Desc, '[[Writable]]')) {
    		return false;
    	}

    	return true;
    };

    var isPrimitive$3 = function isPrimitive(value) {
    	return value === null || (typeof value !== 'function' && typeof value !== 'object');
    };

    var GetIntrinsic$4 = getIntrinsic;

    var $Object = GetIntrinsic$4('%Object%');

    var isPrimitive$2 = isPrimitive$3;

    var $preventExtensions = $Object.preventExtensions;
    var $isExtensible = $Object.isExtensible;

    // https://ecma-international.org/ecma-262/6.0/#sec-isextensible-o

    var IsExtensible$1 = $preventExtensions
    	? function IsExtensible(obj) {
    		return !isPrimitive$2(obj) && $isExtensible(obj);
    	}
    	: function IsExtensible(obj) {
    		return !isPrimitive$2(obj);
    	};

    var $isNaN = _isNaN;

    // http://262.ecma-international.org/5.1/#sec-9.12

    var SameValue$1 = function SameValue(x, y) {
    	if (x === y) { // 0 === -0, but they are not identical.
    		if (x === 0) { return 1 / x === 1 / y; }
    		return true;
    	}
    	return $isNaN(x) && $isNaN(y);
    };

    var GetIntrinsic$3 = getIntrinsic;

    var $TypeError$2 = GetIntrinsic$3('%TypeError%');

    var DefineOwnProperty = DefineOwnProperty$1;

    var FromPropertyDescriptor = FromPropertyDescriptor$1;
    var OrdinaryGetOwnProperty = OrdinaryGetOwnProperty$1;
    var IsDataDescriptor = IsDataDescriptor$1;
    var IsExtensible = IsExtensible$1;
    var IsPropertyKey$1 = IsPropertyKey$7;
    var SameValue = SameValue$1;
    var Type$1 = Type$g;

    // https://ecma-international.org/ecma-262/6.0/#sec-createdataproperty

    var CreateDataProperty$1 = function CreateDataProperty(O, P, V) {
    	if (Type$1(O) !== 'Object') {
    		throw new $TypeError$2('Assertion failed: Type(O) is not Object');
    	}
    	if (!IsPropertyKey$1(P)) {
    		throw new $TypeError$2('Assertion failed: IsPropertyKey(P) is not true');
    	}
    	var oldDesc = OrdinaryGetOwnProperty(O, P);
    	var extensible = !oldDesc || IsExtensible(O);
    	var immutable = oldDesc && (!oldDesc['[[Writable]]'] || !oldDesc['[[Configurable]]']);
    	if (immutable || !extensible) {
    		return false;
    	}
    	return DefineOwnProperty(
    		IsDataDescriptor,
    		SameValue,
    		FromPropertyDescriptor,
    		O,
    		P,
    		{
    			'[[Configurable]]': true,
    			'[[Enumerable]]': true,
    			'[[Value]]': V,
    			'[[Writable]]': true
    		}
    	);
    };

    var GetIntrinsic$2 = getIntrinsic;

    var $TypeError$1 = GetIntrinsic$2('%TypeError%');

    var CreateDataProperty = CreateDataProperty$1;
    var IsPropertyKey = IsPropertyKey$7;
    var Type = Type$g;

    // // https://ecma-international.org/ecma-262/6.0/#sec-createdatapropertyorthrow

    var CreateDataPropertyOrThrow$1 = function CreateDataPropertyOrThrow(O, P, V) {
    	if (Type(O) !== 'Object') {
    		throw new $TypeError$1('Assertion failed: Type(O) is not Object');
    	}
    	if (!IsPropertyKey(P)) {
    		throw new $TypeError$1('Assertion failed: IsPropertyKey(P) is not true');
    	}
    	var success = CreateDataProperty(O, P, V);
    	if (!success) {
    		throw new $TypeError$1('unable to create data property');
    	}
    	return success;
    };

    var isPrimitive$1 = function isPrimitive(value) {
    	return value === null || (typeof value !== 'function' && typeof value !== 'object');
    };

    var getDay = Date.prototype.getDay;
    var tryDateObject = function tryDateGetDayCall(value) {
    	try {
    		getDay.call(value);
    		return true;
    	} catch (e) {
    		return false;
    	}
    };

    var toStr$1 = Object.prototype.toString;
    var dateClass = '[object Date]';
    var hasToStringTag = shams();

    var isDateObject = function isDateObject(value) {
    	if (typeof value !== 'object' || value === null) {
    		return false;
    	}
    	return hasToStringTag ? tryDateObject(value) : toStr$1.call(value) === dateClass;
    };

    var isSymbol$1 = {exports: {}};

    var toStr = Object.prototype.toString;
    var hasSymbols$1 = hasSymbols$6();

    if (hasSymbols$1) {
    	var symToStr = Symbol.prototype.toString;
    	var symStringRegex = /^Symbol\(.*\)$/;
    	var isSymbolObject = function isRealSymbolObject(value) {
    		if (typeof value.valueOf() !== 'symbol') {
    			return false;
    		}
    		return symStringRegex.test(symToStr.call(value));
    	};

    	isSymbol$1.exports = function isSymbol(value) {
    		if (typeof value === 'symbol') {
    			return true;
    		}
    		if (toStr.call(value) !== '[object Symbol]') {
    			return false;
    		}
    		try {
    			return isSymbolObject(value);
    		} catch (e) {
    			return false;
    		}
    	};
    } else {

    	isSymbol$1.exports = function isSymbol(value) {
    		// this environment does not support Symbols.
    		return false ;
    	};
    }

    var hasSymbols = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol';

    var isPrimitive = isPrimitive$1;
    var isCallable = isCallable$1;
    var isDate = isDateObject;
    var isSymbol = isSymbol$1.exports;

    var ordinaryToPrimitive = function OrdinaryToPrimitive(O, hint) {
    	if (typeof O === 'undefined' || O === null) {
    		throw new TypeError('Cannot call method on ' + O);
    	}
    	if (typeof hint !== 'string' || (hint !== 'number' && hint !== 'string')) {
    		throw new TypeError('hint must be "string" or "number"');
    	}
    	var methodNames = hint === 'string' ? ['toString', 'valueOf'] : ['valueOf', 'toString'];
    	var method, result, i;
    	for (i = 0; i < methodNames.length; ++i) {
    		method = O[methodNames[i]];
    		if (isCallable(method)) {
    			result = method.call(O);
    			if (isPrimitive(result)) {
    				return result;
    			}
    		}
    	}
    	throw new TypeError('No default value');
    };

    var GetMethod = function GetMethod(O, P) {
    	var func = O[P];
    	if (func !== null && typeof func !== 'undefined') {
    		if (!isCallable(func)) {
    			throw new TypeError(func + ' returned for property ' + P + ' of object ' + O + ' is not a function');
    		}
    		return func;
    	}
    	return void 0;
    };

    // http://www.ecma-international.org/ecma-262/6.0/#sec-toprimitive
    var es2015 = function ToPrimitive(input) {
    	if (isPrimitive(input)) {
    		return input;
    	}
    	var hint = 'default';
    	if (arguments.length > 1) {
    		if (arguments[1] === String) {
    			hint = 'string';
    		} else if (arguments[1] === Number) {
    			hint = 'number';
    		}
    	}

    	var exoticToPrim;
    	if (hasSymbols) {
    		if (Symbol.toPrimitive) {
    			exoticToPrim = GetMethod(input, Symbol.toPrimitive);
    		} else if (isSymbol(input)) {
    			exoticToPrim = Symbol.prototype.valueOf;
    		}
    	}
    	if (typeof exoticToPrim !== 'undefined') {
    		var result = exoticToPrim.call(input, hint);
    		if (isPrimitive(result)) {
    			return result;
    		}
    		throw new TypeError('unable to convert exotic object to primitive');
    	}
    	if (hint === 'default' && (isDate(input) || isSymbol(input))) {
    		hint = 'string';
    	}
    	return ordinaryToPrimitive(input, hint === 'default' ? 'number' : hint);
    };

    var toPrimitive = es2015;

    // https://ecma-international.org/ecma-262/6.0/#sec-toprimitive

    var ToPrimitive$1 = function ToPrimitive(input) {
    	if (arguments.length > 1) {
    		return toPrimitive(input, arguments[1]);
    	}
    	return toPrimitive(input);
    };

    var GetIntrinsic$1 = getIntrinsic;

    var $String$1 = GetIntrinsic$1('%String%');
    var $TypeError = GetIntrinsic$1('%TypeError%');

    // https://ecma-international.org/ecma-262/6.0/#sec-tostring

    var ToString$1 = function ToString(argument) {
    	if (typeof argument === 'symbol') {
    		throw new $TypeError('Cannot convert a Symbol value to a string');
    	}
    	return $String$1(argument);
    };

    var GetIntrinsic = getIntrinsic;

    var $String = GetIntrinsic('%String%');

    var ToPrimitive = ToPrimitive$1;
    var ToString = ToString$1;

    // https://ecma-international.org/ecma-262/6.0/#sec-topropertykey

    var ToPropertyKey$1 = function ToPropertyKey(argument) {
    	var key = ToPrimitive(argument, $String);
    	return typeof key === 'symbol' ? key : ToString(key);
    };

    var AddEntriesFromIterable = AddEntriesFromIterable$1;
    var CreateDataPropertyOrThrow = CreateDataPropertyOrThrow$1;
    var RequireObjectCoercible = RequireObjectCoercible$2;
    var ToPropertyKey = ToPropertyKey$1;

    var adder = function addDataProperty(key, value) {
    	var O = this; // eslint-disable-line no-invalid-this
    	var propertyKey = ToPropertyKey(key);
    	CreateDataPropertyOrThrow(O, propertyKey, value);
    };

    var implementation$2 = function fromEntries(iterable) {
    	RequireObjectCoercible(iterable);

    	return AddEntriesFromIterable({}, iterable, adder);
    };

    var implementation$1 = implementation$2;

    var polyfill$1 = function getPolyfill() {
    	return typeof Object.fromEntries === 'function' ? Object.fromEntries : implementation$1;
    };

    var getPolyfill$1 = polyfill$1;
    var define$1 = defineProperties_1;

    var shim$1 = function shimEntries() {
    	var polyfill = getPolyfill$1();
    	define$1(Object, { fromEntries: polyfill }, {
    		fromEntries: function testEntries() {
    			return Object.fromEntries !== polyfill;
    		}
    	});
    	return polyfill;
    };

    var define = defineProperties_1;
    var callBind = callBind$2.exports;

    var implementation = implementation$2;
    var getPolyfill = polyfill$1;
    var shim = shim$1;

    var polyfill = callBind(getPolyfill(), Object);

    define(polyfill, {
    	getPolyfill: getPolyfill,
    	implementation: implementation,
    	shim: shim
    });

    var object_fromentries = polyfill;

    var simpleFeature = {};

    var _interopRequireDefault$x = interopRequireDefault.exports;

    Object.defineProperty(simpleFeature, "__esModule", {
      value: true
    });
    simpleFeature.default = void 0;
    simpleFeature.isFeature = isFeature;

    var _classCallCheck2$6 = _interopRequireDefault$x(classCallCheck.exports);

    var _createClass2$5 = _interopRequireDefault$x(createClass.exports);

    var _defineProperty2$a = _interopRequireDefault$x(defineProperty$1.exports);

    var _typeof2$1 = _interopRequireDefault$x(_typeof$e.exports);

    function ownKeys$9(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

    function _objectSpread$9(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$9(Object(source), true).forEach(function (key) { (0, _defineProperty2$a.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$9(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

    /**
     * Abstract feature object
     */
    function isFeature(thing) {
      return (0, _typeof2$1.default)(thing) === 'object' && thing !== null && typeof thing.get === 'function' && typeof thing.id === 'function';
    }

    function isSimpleFeatureSerialized(args) {
      return 'uniqueId' in args && (0, _typeof2$1.default)(args.data) !== 'object';
    }
    /**
     * Simple implementation of a feature object.
     */


    var SimpleFeature = /*#__PURE__*/function () {
      // eslint-disable-next-line @typescript-eslint/no-explicit-any

      /**
       * @param args - SimpleFeature args
       *
       * Note: args.data.subfeatures can be an array of these same args,
       * which will be inflated to more instances of this class.
       */
      function SimpleFeature(args) {
        var _this = this;

        (0, _classCallCheck2$6.default)(this, SimpleFeature);
        (0, _defineProperty2$a.default)(this, "data", void 0);
        (0, _defineProperty2$a.default)(this, "subfeatures", void 0);
        (0, _defineProperty2$a.default)(this, "parentHandle", void 0);
        (0, _defineProperty2$a.default)(this, "uniqueId", void 0);

        if (isSimpleFeatureSerialized(args)) {
          this.data = args;
        } else {
          this.data = args.data || {}; // load handle from args.parent (not args.data.parent)
          // this reason is because if args is an object, it likely isn't properly loaded with
          // parent as a Feature reference (probably a raw parent ID or something instead)

          this.parentHandle = args.parent;
        } // the feature id comes from
        // args.id, args.data.uniqueId, or args.uniqueId due to this initialization


        var id = isSimpleFeatureSerialized(args) ? args.uniqueId : args.id;

        if (id === undefined || id === null) {
          throw new Error('SimpleFeature requires a unique `id` or `data.uniqueId` attribute');
        }

        this.uniqueId = String(id);

        if (!(this.data.aliases || this.data.end - this.data.start >= 0)) {
          throw new Error("invalid feature data, end less than start. end: ".concat(this.data.end, " start: ").concat(this.data.start));
        }

        if (this.data.subfeatures) {
          var _this$data$subfeature;

          this.subfeatures = (_this$data$subfeature = this.data.subfeatures) === null || _this$data$subfeature === void 0 ? void 0 : _this$data$subfeature.map( // eslint-disable-next-line @typescript-eslint/no-explicit-any
          function (f, i) {
            return typeof f.get !== 'function' ? new SimpleFeature({
              id: f.uniqueId || "".concat(id, "-").concat(i),
              data: _objectSpread$9({
                strand: _this.data.strand
              }, f),
              parent: _this
            }) : f;
          });
        }
      }
      /**
       * Get a piece of data about the feature.  All features must have
       * 'start' and 'end', but everything else is optional.
       */
      // eslint-disable-next-line @typescript-eslint/no-explicit-any


      (0, _createClass2$5.default)(SimpleFeature, [{
        key: "get",
        value: function get(name) {
          return name === 'subfeatures' ? this.subfeatures : this.data[name];
        }
        /**
         * Set an item of data.
         */
        // eslint-disable-next-line @typescript-eslint/no-explicit-any

      }, {
        key: "set",
        value: function set(name, val) {
          this.data[name] = val;
        }
        /**
         * Get an array listing which data keys are present in this feature.
         */

      }, {
        key: "tags",
        value: function tags() {
          return Object.keys(this.data);
        }
        /**
         * Get the unique ID of this feature.
         */

      }, {
        key: "id",
        value: function id() {
          return this.uniqueId;
        }
        /**
         * Get this feature's parent feature, or undefined if none.
         */

      }, {
        key: "parent",
        value: function parent() {
          return this.parentHandle;
        }
        /**
         * Get an array of child features, or undefined if none.
         */

      }, {
        key: "children",
        value: function children() {
          return this.get('subfeatures');
        }
      }, {
        key: "toJSON",
        value: function toJSON() {
          var d = _objectSpread$9(_objectSpread$9({}, this.data), {}, {
            uniqueId: this.id()
          });

          var p = this.parent();

          if (p) {
            d.parentId = p.id();
          }

          var c = this.children();

          if (c) {
            d.subfeatures = c.map(function (child) {
              return child.toJSON();
            });
          }

          return d;
        }
      }], [{
        key: "fromJSON",
        value: function fromJSON(json) {
          return new SimpleFeature(_objectSpread$9({}, json));
        }
      }]);
      return SimpleFeature;
    }();

    simpleFeature.default = SimpleFeature;

    var types$1 = {};

    var assertThisInitialized = {exports: {}};

    (function (module) {
    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }

      return self;
    }

    module.exports = _assertThisInitialized, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }(assertThisInitialized));

    var inherits = {exports: {}};

    var setPrototypeOf = {exports: {}};

    (function (module) {
    function _setPrototypeOf(o, p) {
      module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
      }, module.exports.__esModule = true, module.exports["default"] = module.exports;
      return _setPrototypeOf(o, p);
    }

    module.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }(setPrototypeOf));

    (function (module) {
    var setPrototypeOf$1 = setPrototypeOf.exports;

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }

      Object.defineProperty(subClass, "prototype", {
        value: Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            writable: true,
            configurable: true
          }
        }),
        writable: false
      });
      if (superClass) setPrototypeOf$1(subClass, superClass);
    }

    module.exports = _inherits, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }(inherits));

    var possibleConstructorReturn = {exports: {}};

    (function (module) {
    var _typeof = _typeof$e.exports["default"];

    var assertThisInitialized$1 = assertThisInitialized.exports;

    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }

      return assertThisInitialized$1(self);
    }

    module.exports = _possibleConstructorReturn, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }(possibleConstructorReturn));

    var getPrototypeOf = {exports: {}};

    (function (module) {
    function _getPrototypeOf(o) {
      module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
      }, module.exports.__esModule = true, module.exports["default"] = module.exports;
      return _getPrototypeOf(o);
    }

    module.exports = _getPrototypeOf, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }(getPrototypeOf));

    var wrapNativeSuper = {exports: {}};

    var isNativeFunction = {exports: {}};

    (function (module) {
    function _isNativeFunction(fn) {
      return Function.toString.call(fn).indexOf("[native code]") !== -1;
    }

    module.exports = _isNativeFunction, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }(isNativeFunction));

    var construct = {exports: {}};

    var isNativeReflectConstruct = {exports: {}};

    (function (module) {
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;

      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
        return true;
      } catch (e) {
        return false;
      }
    }

    module.exports = _isNativeReflectConstruct, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }(isNativeReflectConstruct));

    (function (module) {
    var setPrototypeOf$1 = setPrototypeOf.exports;

    var isNativeReflectConstruct$1 = isNativeReflectConstruct.exports;

    function _construct(Parent, args, Class) {
      if (isNativeReflectConstruct$1()) {
        module.exports = _construct = Reflect.construct, module.exports.__esModule = true, module.exports["default"] = module.exports;
      } else {
        module.exports = _construct = function _construct(Parent, args, Class) {
          var a = [null];
          a.push.apply(a, args);
          var Constructor = Function.bind.apply(Parent, a);
          var instance = new Constructor();
          if (Class) setPrototypeOf$1(instance, Class.prototype);
          return instance;
        }, module.exports.__esModule = true, module.exports["default"] = module.exports;
      }

      return _construct.apply(null, arguments);
    }

    module.exports = _construct, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }(construct));

    (function (module) {
    var getPrototypeOf$1 = getPrototypeOf.exports;

    var setPrototypeOf$1 = setPrototypeOf.exports;

    var isNativeFunction$1 = isNativeFunction.exports;

    var construct$1 = construct.exports;

    function _wrapNativeSuper(Class) {
      var _cache = typeof Map === "function" ? new Map() : undefined;

      module.exports = _wrapNativeSuper = function _wrapNativeSuper(Class) {
        if (Class === null || !isNativeFunction$1(Class)) return Class;

        if (typeof Class !== "function") {
          throw new TypeError("Super expression must either be null or a function");
        }

        if (typeof _cache !== "undefined") {
          if (_cache.has(Class)) return _cache.get(Class);

          _cache.set(Class, Wrapper);
        }

        function Wrapper() {
          return construct$1(Class, arguments, getPrototypeOf$1(this).constructor);
        }

        Wrapper.prototype = Object.create(Class.prototype, {
          constructor: {
            value: Wrapper,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
        return setPrototypeOf$1(Wrapper, Class);
      }, module.exports.__esModule = true, module.exports["default"] = module.exports;
      return _wrapNativeSuper(Class);
    }

    module.exports = _wrapNativeSuper, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }(wrapNativeSuper));

    var util$2 = /*#__PURE__*/Object.freeze({
        __proto__: null
    });

    var require$$10$1 = /*@__PURE__*/getAugmentedNamespace(util$2);

    (function (exports) {

    var _interopRequireDefault = interopRequireDefault.exports;

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _exportNames = {
      isViewContainer: true,
      isSessionModel: true,
      isSessionModelWithConfigEditing: true,
      isSessionWithAddTracks: true,
      isSessionModelWithWidgets: true,
      isSessionWithSessionPlugins: true,
      isSelectionContainer: true,
      isViewModel: true,
      isTrackModel: true,
      isDisplayModel: true,
      isTrackViewModel: true,
      isAppRootModel: true,
      isAbstractMenuManager: true,
      isUriLocation: true,
      AuthNeededError: true,
      RetryError: true,
      isAuthNeededException: true,
      isRetryException: true
    };
    exports.RetryError = exports.AuthNeededError = void 0;
    exports.isAbstractMenuManager = isAbstractMenuManager;
    exports.isAppRootModel = isAppRootModel;
    exports.isAuthNeededException = isAuthNeededException;
    exports.isDisplayModel = isDisplayModel;
    exports.isRetryException = isRetryException;
    exports.isSelectionContainer = isSelectionContainer;
    exports.isSessionModel = isSessionModel;
    exports.isSessionModelWithConfigEditing = isSessionModelWithConfigEditing;
    exports.isSessionModelWithWidgets = isSessionModelWithWidgets;
    exports.isSessionWithAddTracks = isSessionWithAddTracks;
    exports.isSessionWithSessionPlugins = isSessionWithSessionPlugins;
    exports.isTrackModel = isTrackModel;
    exports.isTrackViewModel = isTrackViewModel;
    exports.isUriLocation = isUriLocation;
    exports.isViewContainer = isViewContainer;
    exports.isViewModel = isViewModel;

    var _classCallCheck2 = _interopRequireDefault(classCallCheck.exports);

    var _assertThisInitialized2 = _interopRequireDefault(assertThisInitialized.exports);

    var _inherits2 = _interopRequireDefault(inherits.exports);

    var _possibleConstructorReturn2 = _interopRequireDefault(possibleConstructorReturn.exports);

    var _getPrototypeOf2 = _interopRequireDefault(getPrototypeOf.exports);

    var _wrapNativeSuper2 = _interopRequireDefault(wrapNativeSuper.exports);

    var _defineProperty2 = _interopRequireDefault(defineProperty$1.exports);

    var _typeof2 = _interopRequireDefault(_typeof$e.exports);

    var _mobxStateTree = require$$0$1;

    var _util = require$$10$1;

    Object.keys(_util).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _util[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
          return _util[key];
        }
      });
    });

    function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

    function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

    function isViewContainer(thing) {
      return (0, _mobxStateTree.isStateTreeNode)(thing) && 'removeView' in thing && 'addView' in thing && 'views' in thing;
    }

    function isSessionModel(thing) {
      return (0, _typeof2.default)(thing) === 'object' && thing !== null && 'rpcManager' in thing && 'configuration' in thing;
    }
    /** abstract interface for a session allows editing configurations */


    function isSessionModelWithConfigEditing(thing) {
      return isSessionModel(thing) && 'editConfiguration' in thing;
    }
    /** abstract interface for a session allows adding tracks */


    function isSessionWithAddTracks(thing) {
      return isSessionModel(thing) && 'addTrackConf' in thing;
    }

    function isSessionModelWithWidgets(thing) {
      return isSessionModel(thing) && 'widgets' in thing;
    }

    function isSessionWithSessionPlugins(thing) {
      return isSessionModel(thing) && 'sessionPlugins' in thing;
    }
    /** abstract interface for a session that manages a global selection */


    function isSelectionContainer(thing) {
      return (0, _typeof2.default)(thing) === 'object' && thing !== null && 'selection' in thing && 'setSelection' in thing;
    }
    /** minimum interface that all view state models must implement */


    function isViewModel(thing) {
      return (0, _typeof2.default)(thing) === 'object' && thing !== null && 'width' in thing && 'setWidth' in thing;
    }

    function isTrackModel(thing) {
      return (0, _typeof2.default)(thing) === 'object' && thing !== null && 'configuration' in thing && // @ts-ignore
      thing.configuration.trackId;
    }

    function isDisplayModel(thing) {
      return (0, _typeof2.default)(thing) === 'object' && thing !== null && 'configuration' in thing && // @ts-ignore
      thing.configuration.displayId;
    }

    function isTrackViewModel(thing) {
      return (0, _typeof2.default)(thing) === 'object' && thing !== null && 'showTrack' in thing && 'hideTrack' in thing;
    }
    /** minimum interface for the root MST model of a JBrowse app */


    function isAppRootModel(thing) {
      return (0, _typeof2.default)(thing) === 'object' && thing !== null && 'isAssemblyEditing' in thing && 'findAppropriateInternetAccount' in thing;
    }
    /** a root model that manages global menus */


    function isAbstractMenuManager(thing) {
      return (0, _typeof2.default)(thing) === 'object' && thing !== null && 'appendMenu' in thing && 'appendToSubMenu' in thing;
    } // Empty interfaces required by mobx-state-tree
    // See https://mobx-state-tree.js.org/tips/typescript#using-a-mst-type-at-design-time

    /* eslint-disable @typescript-eslint/no-empty-interface */


    function isUriLocation(location) {
      return (0, _typeof2.default)(location) === 'object' && location !== null && 'locationType' in location && 'uri' in location;
    }

    var AuthNeededError = /*#__PURE__*/function (_Error) {
      (0, _inherits2.default)(AuthNeededError, _Error);

      var _super = _createSuper(AuthNeededError);

      function AuthNeededError(message, location) {
        var _this;

        (0, _classCallCheck2.default)(this, AuthNeededError);
        _this = _super.call(this, message);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "location", void 0);
        _this.location = location;
        _this.name = 'AuthNeededError';
        Object.setPrototypeOf((0, _assertThisInitialized2.default)(_this), AuthNeededError.prototype);
        return _this;
      }

      return AuthNeededError;
    }( /*#__PURE__*/(0, _wrapNativeSuper2.default)(Error));

    exports.AuthNeededError = AuthNeededError;

    var RetryError = /*#__PURE__*/function (_Error2) {
      (0, _inherits2.default)(RetryError, _Error2);

      var _super2 = _createSuper(RetryError);

      function RetryError(message, internetAccountId) {
        var _this2;

        (0, _classCallCheck2.default)(this, RetryError);
        _this2 = _super2.call(this, message);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this2), "internetAccountId", void 0);
        _this2.message = message;
        _this2.internetAccountId = internetAccountId;
        _this2.name = 'RetryError';
        return _this2;
      }

      return RetryError;
    }( /*#__PURE__*/(0, _wrapNativeSuper2.default)(Error));

    exports.RetryError = RetryError;

    function isAuthNeededException(exception) {
      return (// DOMException
        exception.name === 'AuthNeededError' || exception.location !== undefined
      );
    }

    function isRetryException(exception) {
      return (// DOMException
        exception.name === 'RetryError' || exception.internetAccountId !== undefined
      );
    }
    }(types$1));

    var aborting = {};

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    /** PURE_IMPORTS_START  PURE_IMPORTS_END */
    function isFunction(x) {
        return typeof x === 'function';
    }

    /** PURE_IMPORTS_START  PURE_IMPORTS_END */
    var _enable_super_gross_mode_that_will_cause_bad_things = false;
    var config = {
        Promise: undefined,
        set useDeprecatedSynchronousErrorHandling(value) {
            if (value) {
                var error = /*@__PURE__*/ new Error();
                /*@__PURE__*/ console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \n' + error.stack);
            }
            _enable_super_gross_mode_that_will_cause_bad_things = value;
        },
        get useDeprecatedSynchronousErrorHandling() {
            return _enable_super_gross_mode_that_will_cause_bad_things;
        },
    };

    /** PURE_IMPORTS_START  PURE_IMPORTS_END */
    function hostReportError(err) {
        setTimeout(function () { throw err; }, 0);
    }

    /** PURE_IMPORTS_START _config,_util_hostReportError PURE_IMPORTS_END */
    var empty$1 = {
        closed: true,
        next: function (value) { },
        error: function (err) {
            if (config.useDeprecatedSynchronousErrorHandling) {
                throw err;
            }
            else {
                hostReportError(err);
            }
        },
        complete: function () { }
    };

    /** PURE_IMPORTS_START  PURE_IMPORTS_END */
    var isArray$1 = /*@__PURE__*/ (function () { return Array.isArray || (function (x) { return x && typeof x.length === 'number'; }); })();

    /** PURE_IMPORTS_START  PURE_IMPORTS_END */
    function isObject$1(x) {
        return x !== null && typeof x === 'object';
    }

    /** PURE_IMPORTS_START  PURE_IMPORTS_END */
    var UnsubscriptionErrorImpl = /*@__PURE__*/ (function () {
        function UnsubscriptionErrorImpl(errors) {
            Error.call(this);
            this.message = errors ?
                errors.length + " errors occurred during unsubscription:\n" + errors.map(function (err, i) { return i + 1 + ") " + err.toString(); }).join('\n  ') : '';
            this.name = 'UnsubscriptionError';
            this.errors = errors;
            return this;
        }
        UnsubscriptionErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);
        return UnsubscriptionErrorImpl;
    })();
    var UnsubscriptionError = UnsubscriptionErrorImpl;

    /** PURE_IMPORTS_START _util_isArray,_util_isObject,_util_isFunction,_util_UnsubscriptionError PURE_IMPORTS_END */
    var Subscription = /*@__PURE__*/ (function () {
        function Subscription(unsubscribe) {
            this.closed = false;
            this._parentOrParents = null;
            this._subscriptions = null;
            if (unsubscribe) {
                this._ctorUnsubscribe = true;
                this._unsubscribe = unsubscribe;
            }
        }
        Subscription.prototype.unsubscribe = function () {
            var errors;
            if (this.closed) {
                return;
            }
            var _a = this, _parentOrParents = _a._parentOrParents, _ctorUnsubscribe = _a._ctorUnsubscribe, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;
            this.closed = true;
            this._parentOrParents = null;
            this._subscriptions = null;
            if (_parentOrParents instanceof Subscription) {
                _parentOrParents.remove(this);
            }
            else if (_parentOrParents !== null) {
                for (var index = 0; index < _parentOrParents.length; ++index) {
                    var parent_1 = _parentOrParents[index];
                    parent_1.remove(this);
                }
            }
            if (isFunction(_unsubscribe)) {
                if (_ctorUnsubscribe) {
                    this._unsubscribe = undefined;
                }
                try {
                    _unsubscribe.call(this);
                }
                catch (e) {
                    errors = e instanceof UnsubscriptionError ? flattenUnsubscriptionErrors(e.errors) : [e];
                }
            }
            if (isArray$1(_subscriptions)) {
                var index = -1;
                var len = _subscriptions.length;
                while (++index < len) {
                    var sub = _subscriptions[index];
                    if (isObject$1(sub)) {
                        try {
                            sub.unsubscribe();
                        }
                        catch (e) {
                            errors = errors || [];
                            if (e instanceof UnsubscriptionError) {
                                errors = errors.concat(flattenUnsubscriptionErrors(e.errors));
                            }
                            else {
                                errors.push(e);
                            }
                        }
                    }
                }
            }
            if (errors) {
                throw new UnsubscriptionError(errors);
            }
        };
        Subscription.prototype.add = function (teardown) {
            var subscription = teardown;
            if (!teardown) {
                return Subscription.EMPTY;
            }
            switch (typeof teardown) {
                case 'function':
                    subscription = new Subscription(teardown);
                case 'object':
                    if (subscription === this || subscription.closed || typeof subscription.unsubscribe !== 'function') {
                        return subscription;
                    }
                    else if (this.closed) {
                        subscription.unsubscribe();
                        return subscription;
                    }
                    else if (!(subscription instanceof Subscription)) {
                        var tmp = subscription;
                        subscription = new Subscription();
                        subscription._subscriptions = [tmp];
                    }
                    break;
                default: {
                    throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');
                }
            }
            var _parentOrParents = subscription._parentOrParents;
            if (_parentOrParents === null) {
                subscription._parentOrParents = this;
            }
            else if (_parentOrParents instanceof Subscription) {
                if (_parentOrParents === this) {
                    return subscription;
                }
                subscription._parentOrParents = [_parentOrParents, this];
            }
            else if (_parentOrParents.indexOf(this) === -1) {
                _parentOrParents.push(this);
            }
            else {
                return subscription;
            }
            var subscriptions = this._subscriptions;
            if (subscriptions === null) {
                this._subscriptions = [subscription];
            }
            else {
                subscriptions.push(subscription);
            }
            return subscription;
        };
        Subscription.prototype.remove = function (subscription) {
            var subscriptions = this._subscriptions;
            if (subscriptions) {
                var subscriptionIndex = subscriptions.indexOf(subscription);
                if (subscriptionIndex !== -1) {
                    subscriptions.splice(subscriptionIndex, 1);
                }
            }
        };
        Subscription.EMPTY = (function (empty) {
            empty.closed = true;
            return empty;
        }(new Subscription()));
        return Subscription;
    }());
    function flattenUnsubscriptionErrors(errors) {
        return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError) ? err.errors : err); }, []);
    }

    /** PURE_IMPORTS_START  PURE_IMPORTS_END */
    var rxSubscriber = /*@__PURE__*/ (function () {
        return typeof Symbol === 'function'
            ? /*@__PURE__*/ Symbol('rxSubscriber')
            : '@@rxSubscriber_' + /*@__PURE__*/ Math.random();
    })();

    /** PURE_IMPORTS_START tslib,_util_isFunction,_Observer,_Subscription,_internal_symbol_rxSubscriber,_config,_util_hostReportError PURE_IMPORTS_END */
    var Subscriber = /*@__PURE__*/ (function (_super) {
        __extends(Subscriber, _super);
        function Subscriber(destinationOrNext, error, complete) {
            var _this = _super.call(this) || this;
            _this.syncErrorValue = null;
            _this.syncErrorThrown = false;
            _this.syncErrorThrowable = false;
            _this.isStopped = false;
            switch (arguments.length) {
                case 0:
                    _this.destination = empty$1;
                    break;
                case 1:
                    if (!destinationOrNext) {
                        _this.destination = empty$1;
                        break;
                    }
                    if (typeof destinationOrNext === 'object') {
                        if (destinationOrNext instanceof Subscriber) {
                            _this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;
                            _this.destination = destinationOrNext;
                            destinationOrNext.add(_this);
                        }
                        else {
                            _this.syncErrorThrowable = true;
                            _this.destination = new SafeSubscriber(_this, destinationOrNext);
                        }
                        break;
                    }
                default:
                    _this.syncErrorThrowable = true;
                    _this.destination = new SafeSubscriber(_this, destinationOrNext, error, complete);
                    break;
            }
            return _this;
        }
        Subscriber.prototype[rxSubscriber] = function () { return this; };
        Subscriber.create = function (next, error, complete) {
            var subscriber = new Subscriber(next, error, complete);
            subscriber.syncErrorThrowable = false;
            return subscriber;
        };
        Subscriber.prototype.next = function (value) {
            if (!this.isStopped) {
                this._next(value);
            }
        };
        Subscriber.prototype.error = function (err) {
            if (!this.isStopped) {
                this.isStopped = true;
                this._error(err);
            }
        };
        Subscriber.prototype.complete = function () {
            if (!this.isStopped) {
                this.isStopped = true;
                this._complete();
            }
        };
        Subscriber.prototype.unsubscribe = function () {
            if (this.closed) {
                return;
            }
            this.isStopped = true;
            _super.prototype.unsubscribe.call(this);
        };
        Subscriber.prototype._next = function (value) {
            this.destination.next(value);
        };
        Subscriber.prototype._error = function (err) {
            this.destination.error(err);
            this.unsubscribe();
        };
        Subscriber.prototype._complete = function () {
            this.destination.complete();
            this.unsubscribe();
        };
        Subscriber.prototype._unsubscribeAndRecycle = function () {
            var _parentOrParents = this._parentOrParents;
            this._parentOrParents = null;
            this.unsubscribe();
            this.closed = false;
            this.isStopped = false;
            this._parentOrParents = _parentOrParents;
            return this;
        };
        return Subscriber;
    }(Subscription));
    var SafeSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(SafeSubscriber, _super);
        function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {
            var _this = _super.call(this) || this;
            _this._parentSubscriber = _parentSubscriber;
            var next;
            var context = _this;
            if (isFunction(observerOrNext)) {
                next = observerOrNext;
            }
            else if (observerOrNext) {
                next = observerOrNext.next;
                error = observerOrNext.error;
                complete = observerOrNext.complete;
                if (observerOrNext !== empty$1) {
                    context = Object.create(observerOrNext);
                    if (isFunction(context.unsubscribe)) {
                        _this.add(context.unsubscribe.bind(context));
                    }
                    context.unsubscribe = _this.unsubscribe.bind(_this);
                }
            }
            _this._context = context;
            _this._next = next;
            _this._error = error;
            _this._complete = complete;
            return _this;
        }
        SafeSubscriber.prototype.next = function (value) {
            if (!this.isStopped && this._next) {
                var _parentSubscriber = this._parentSubscriber;
                if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
                    this.__tryOrUnsub(this._next, value);
                }
                else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {
                    this.unsubscribe();
                }
            }
        };
        SafeSubscriber.prototype.error = function (err) {
            if (!this.isStopped) {
                var _parentSubscriber = this._parentSubscriber;
                var useDeprecatedSynchronousErrorHandling = config.useDeprecatedSynchronousErrorHandling;
                if (this._error) {
                    if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
                        this.__tryOrUnsub(this._error, err);
                        this.unsubscribe();
                    }
                    else {
                        this.__tryOrSetError(_parentSubscriber, this._error, err);
                        this.unsubscribe();
                    }
                }
                else if (!_parentSubscriber.syncErrorThrowable) {
                    this.unsubscribe();
                    if (useDeprecatedSynchronousErrorHandling) {
                        throw err;
                    }
                    hostReportError(err);
                }
                else {
                    if (useDeprecatedSynchronousErrorHandling) {
                        _parentSubscriber.syncErrorValue = err;
                        _parentSubscriber.syncErrorThrown = true;
                    }
                    else {
                        hostReportError(err);
                    }
                    this.unsubscribe();
                }
            }
        };
        SafeSubscriber.prototype.complete = function () {
            var _this = this;
            if (!this.isStopped) {
                var _parentSubscriber = this._parentSubscriber;
                if (this._complete) {
                    var wrappedComplete = function () { return _this._complete.call(_this._context); };
                    if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
                        this.__tryOrUnsub(wrappedComplete);
                        this.unsubscribe();
                    }
                    else {
                        this.__tryOrSetError(_parentSubscriber, wrappedComplete);
                        this.unsubscribe();
                    }
                }
                else {
                    this.unsubscribe();
                }
            }
        };
        SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {
            try {
                fn.call(this._context, value);
            }
            catch (err) {
                this.unsubscribe();
                if (config.useDeprecatedSynchronousErrorHandling) {
                    throw err;
                }
                else {
                    hostReportError(err);
                }
            }
        };
        SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {
            if (!config.useDeprecatedSynchronousErrorHandling) {
                throw new Error('bad call');
            }
            try {
                fn.call(this._context, value);
            }
            catch (err) {
                if (config.useDeprecatedSynchronousErrorHandling) {
                    parent.syncErrorValue = err;
                    parent.syncErrorThrown = true;
                    return true;
                }
                else {
                    hostReportError(err);
                    return true;
                }
            }
            return false;
        };
        SafeSubscriber.prototype._unsubscribe = function () {
            var _parentSubscriber = this._parentSubscriber;
            this._context = null;
            this._parentSubscriber = null;
            _parentSubscriber.unsubscribe();
        };
        return SafeSubscriber;
    }(Subscriber));

    /** PURE_IMPORTS_START _Subscriber PURE_IMPORTS_END */
    function canReportError(observer) {
        while (observer) {
            var _a = observer, closed_1 = _a.closed, destination = _a.destination, isStopped = _a.isStopped;
            if (closed_1 || isStopped) {
                return false;
            }
            else if (destination && destination instanceof Subscriber) {
                observer = destination;
            }
            else {
                observer = null;
            }
        }
        return true;
    }

    /** PURE_IMPORTS_START _Subscriber,_symbol_rxSubscriber,_Observer PURE_IMPORTS_END */
    function toSubscriber(nextOrObserver, error, complete) {
        if (nextOrObserver) {
            if (nextOrObserver instanceof Subscriber) {
                return nextOrObserver;
            }
            if (nextOrObserver[rxSubscriber]) {
                return nextOrObserver[rxSubscriber]();
            }
        }
        if (!nextOrObserver && !error && !complete) {
            return new Subscriber(empty$1);
        }
        return new Subscriber(nextOrObserver, error, complete);
    }

    /** PURE_IMPORTS_START  PURE_IMPORTS_END */
    var observable = /*@__PURE__*/ (function () { return typeof Symbol === 'function' && Symbol.observable || '@@observable'; })();

    /** PURE_IMPORTS_START  PURE_IMPORTS_END */
    function identity(x) {
        return x;
    }

    /** PURE_IMPORTS_START _identity PURE_IMPORTS_END */
    function pipe() {
        var fns = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            fns[_i] = arguments[_i];
        }
        return pipeFromArray(fns);
    }
    function pipeFromArray(fns) {
        if (fns.length === 0) {
            return identity;
        }
        if (fns.length === 1) {
            return fns[0];
        }
        return function piped(input) {
            return fns.reduce(function (prev, fn) { return fn(prev); }, input);
        };
    }

    /** PURE_IMPORTS_START _util_canReportError,_util_toSubscriber,_symbol_observable,_util_pipe,_config PURE_IMPORTS_END */
    var Observable = /*@__PURE__*/ (function () {
        function Observable(subscribe) {
            this._isScalar = false;
            if (subscribe) {
                this._subscribe = subscribe;
            }
        }
        Observable.prototype.lift = function (operator) {
            var observable = new Observable();
            observable.source = this;
            observable.operator = operator;
            return observable;
        };
        Observable.prototype.subscribe = function (observerOrNext, error, complete) {
            var operator = this.operator;
            var sink = toSubscriber(observerOrNext, error, complete);
            if (operator) {
                sink.add(operator.call(sink, this.source));
            }
            else {
                sink.add(this.source || (config.useDeprecatedSynchronousErrorHandling && !sink.syncErrorThrowable) ?
                    this._subscribe(sink) :
                    this._trySubscribe(sink));
            }
            if (config.useDeprecatedSynchronousErrorHandling) {
                if (sink.syncErrorThrowable) {
                    sink.syncErrorThrowable = false;
                    if (sink.syncErrorThrown) {
                        throw sink.syncErrorValue;
                    }
                }
            }
            return sink;
        };
        Observable.prototype._trySubscribe = function (sink) {
            try {
                return this._subscribe(sink);
            }
            catch (err) {
                if (config.useDeprecatedSynchronousErrorHandling) {
                    sink.syncErrorThrown = true;
                    sink.syncErrorValue = err;
                }
                if (canReportError(sink)) {
                    sink.error(err);
                }
                else {
                    console.warn(err);
                }
            }
        };
        Observable.prototype.forEach = function (next, promiseCtor) {
            var _this = this;
            promiseCtor = getPromiseCtor(promiseCtor);
            return new promiseCtor(function (resolve, reject) {
                var subscription;
                subscription = _this.subscribe(function (value) {
                    try {
                        next(value);
                    }
                    catch (err) {
                        reject(err);
                        if (subscription) {
                            subscription.unsubscribe();
                        }
                    }
                }, reject, resolve);
            });
        };
        Observable.prototype._subscribe = function (subscriber) {
            var source = this.source;
            return source && source.subscribe(subscriber);
        };
        Observable.prototype[observable] = function () {
            return this;
        };
        Observable.prototype.pipe = function () {
            var operations = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                operations[_i] = arguments[_i];
            }
            if (operations.length === 0) {
                return this;
            }
            return pipeFromArray(operations)(this);
        };
        Observable.prototype.toPromise = function (promiseCtor) {
            var _this = this;
            promiseCtor = getPromiseCtor(promiseCtor);
            return new promiseCtor(function (resolve, reject) {
                var value;
                _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });
            });
        };
        Observable.create = function (subscribe) {
            return new Observable(subscribe);
        };
        return Observable;
    }());
    function getPromiseCtor(promiseCtor) {
        if (!promiseCtor) {
            promiseCtor = config.Promise || Promise;
        }
        if (!promiseCtor) {
            throw new Error('no Promise impl found');
        }
        return promiseCtor;
    }

    /** PURE_IMPORTS_START  PURE_IMPORTS_END */
    var ObjectUnsubscribedErrorImpl = /*@__PURE__*/ (function () {
        function ObjectUnsubscribedErrorImpl() {
            Error.call(this);
            this.message = 'object unsubscribed';
            this.name = 'ObjectUnsubscribedError';
            return this;
        }
        ObjectUnsubscribedErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);
        return ObjectUnsubscribedErrorImpl;
    })();
    var ObjectUnsubscribedError = ObjectUnsubscribedErrorImpl;

    /** PURE_IMPORTS_START tslib,_Subscription PURE_IMPORTS_END */
    var SubjectSubscription = /*@__PURE__*/ (function (_super) {
        __extends(SubjectSubscription, _super);
        function SubjectSubscription(subject, subscriber) {
            var _this = _super.call(this) || this;
            _this.subject = subject;
            _this.subscriber = subscriber;
            _this.closed = false;
            return _this;
        }
        SubjectSubscription.prototype.unsubscribe = function () {
            if (this.closed) {
                return;
            }
            this.closed = true;
            var subject = this.subject;
            var observers = subject.observers;
            this.subject = null;
            if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {
                return;
            }
            var subscriberIndex = observers.indexOf(this.subscriber);
            if (subscriberIndex !== -1) {
                observers.splice(subscriberIndex, 1);
            }
        };
        return SubjectSubscription;
    }(Subscription));

    /** PURE_IMPORTS_START tslib,_Observable,_Subscriber,_Subscription,_util_ObjectUnsubscribedError,_SubjectSubscription,_internal_symbol_rxSubscriber PURE_IMPORTS_END */
    var SubjectSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(SubjectSubscriber, _super);
        function SubjectSubscriber(destination) {
            var _this = _super.call(this, destination) || this;
            _this.destination = destination;
            return _this;
        }
        return SubjectSubscriber;
    }(Subscriber));
    var Subject = /*@__PURE__*/ (function (_super) {
        __extends(Subject, _super);
        function Subject() {
            var _this = _super.call(this) || this;
            _this.observers = [];
            _this.closed = false;
            _this.isStopped = false;
            _this.hasError = false;
            _this.thrownError = null;
            return _this;
        }
        Subject.prototype[rxSubscriber] = function () {
            return new SubjectSubscriber(this);
        };
        Subject.prototype.lift = function (operator) {
            var subject = new AnonymousSubject(this, this);
            subject.operator = operator;
            return subject;
        };
        Subject.prototype.next = function (value) {
            if (this.closed) {
                throw new ObjectUnsubscribedError();
            }
            if (!this.isStopped) {
                var observers = this.observers;
                var len = observers.length;
                var copy = observers.slice();
                for (var i = 0; i < len; i++) {
                    copy[i].next(value);
                }
            }
        };
        Subject.prototype.error = function (err) {
            if (this.closed) {
                throw new ObjectUnsubscribedError();
            }
            this.hasError = true;
            this.thrownError = err;
            this.isStopped = true;
            var observers = this.observers;
            var len = observers.length;
            var copy = observers.slice();
            for (var i = 0; i < len; i++) {
                copy[i].error(err);
            }
            this.observers.length = 0;
        };
        Subject.prototype.complete = function () {
            if (this.closed) {
                throw new ObjectUnsubscribedError();
            }
            this.isStopped = true;
            var observers = this.observers;
            var len = observers.length;
            var copy = observers.slice();
            for (var i = 0; i < len; i++) {
                copy[i].complete();
            }
            this.observers.length = 0;
        };
        Subject.prototype.unsubscribe = function () {
            this.isStopped = true;
            this.closed = true;
            this.observers = null;
        };
        Subject.prototype._trySubscribe = function (subscriber) {
            if (this.closed) {
                throw new ObjectUnsubscribedError();
            }
            else {
                return _super.prototype._trySubscribe.call(this, subscriber);
            }
        };
        Subject.prototype._subscribe = function (subscriber) {
            if (this.closed) {
                throw new ObjectUnsubscribedError();
            }
            else if (this.hasError) {
                subscriber.error(this.thrownError);
                return Subscription.EMPTY;
            }
            else if (this.isStopped) {
                subscriber.complete();
                return Subscription.EMPTY;
            }
            else {
                this.observers.push(subscriber);
                return new SubjectSubscription(this, subscriber);
            }
        };
        Subject.prototype.asObservable = function () {
            var observable = new Observable();
            observable.source = this;
            return observable;
        };
        Subject.create = function (destination, source) {
            return new AnonymousSubject(destination, source);
        };
        return Subject;
    }(Observable));
    var AnonymousSubject = /*@__PURE__*/ (function (_super) {
        __extends(AnonymousSubject, _super);
        function AnonymousSubject(destination, source) {
            var _this = _super.call(this) || this;
            _this.destination = destination;
            _this.source = source;
            return _this;
        }
        AnonymousSubject.prototype.next = function (value) {
            var destination = this.destination;
            if (destination && destination.next) {
                destination.next(value);
            }
        };
        AnonymousSubject.prototype.error = function (err) {
            var destination = this.destination;
            if (destination && destination.error) {
                this.destination.error(err);
            }
        };
        AnonymousSubject.prototype.complete = function () {
            var destination = this.destination;
            if (destination && destination.complete) {
                this.destination.complete();
            }
        };
        AnonymousSubject.prototype._subscribe = function (subscriber) {
            var source = this.source;
            if (source) {
                return this.source.subscribe(subscriber);
            }
            else {
                return Subscription.EMPTY;
            }
        };
        return AnonymousSubject;
    }(Subject));

    /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
    function refCount() {
        return function refCountOperatorFunction(source) {
            return source.lift(new RefCountOperator(source));
        };
    }
    var RefCountOperator = /*@__PURE__*/ (function () {
        function RefCountOperator(connectable) {
            this.connectable = connectable;
        }
        RefCountOperator.prototype.call = function (subscriber, source) {
            var connectable = this.connectable;
            connectable._refCount++;
            var refCounter = new RefCountSubscriber(subscriber, connectable);
            var subscription = source.subscribe(refCounter);
            if (!refCounter.closed) {
                refCounter.connection = connectable.connect();
            }
            return subscription;
        };
        return RefCountOperator;
    }());
    var RefCountSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(RefCountSubscriber, _super);
        function RefCountSubscriber(destination, connectable) {
            var _this = _super.call(this, destination) || this;
            _this.connectable = connectable;
            return _this;
        }
        RefCountSubscriber.prototype._unsubscribe = function () {
            var connectable = this.connectable;
            if (!connectable) {
                this.connection = null;
                return;
            }
            this.connectable = null;
            var refCount = connectable._refCount;
            if (refCount <= 0) {
                this.connection = null;
                return;
            }
            connectable._refCount = refCount - 1;
            if (refCount > 1) {
                this.connection = null;
                return;
            }
            var connection = this.connection;
            var sharedConnection = connectable._connection;
            this.connection = null;
            if (sharedConnection && (!connection || sharedConnection === connection)) {
                sharedConnection.unsubscribe();
            }
        };
        return RefCountSubscriber;
    }(Subscriber));

    /** PURE_IMPORTS_START tslib,_Subject,_Observable,_Subscriber,_Subscription,_operators_refCount PURE_IMPORTS_END */
    var ConnectableObservable = /*@__PURE__*/ (function (_super) {
        __extends(ConnectableObservable, _super);
        function ConnectableObservable(source, subjectFactory) {
            var _this = _super.call(this) || this;
            _this.source = source;
            _this.subjectFactory = subjectFactory;
            _this._refCount = 0;
            _this._isComplete = false;
            return _this;
        }
        ConnectableObservable.prototype._subscribe = function (subscriber) {
            return this.getSubject().subscribe(subscriber);
        };
        ConnectableObservable.prototype.getSubject = function () {
            var subject = this._subject;
            if (!subject || subject.isStopped) {
                this._subject = this.subjectFactory();
            }
            return this._subject;
        };
        ConnectableObservable.prototype.connect = function () {
            var connection = this._connection;
            if (!connection) {
                this._isComplete = false;
                connection = this._connection = new Subscription();
                connection.add(this.source
                    .subscribe(new ConnectableSubscriber(this.getSubject(), this)));
                if (connection.closed) {
                    this._connection = null;
                    connection = Subscription.EMPTY;
                }
            }
            return connection;
        };
        ConnectableObservable.prototype.refCount = function () {
            return refCount()(this);
        };
        return ConnectableObservable;
    }(Observable));
    var ConnectableSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(ConnectableSubscriber, _super);
        function ConnectableSubscriber(destination, connectable) {
            var _this = _super.call(this, destination) || this;
            _this.connectable = connectable;
            return _this;
        }
        ConnectableSubscriber.prototype._error = function (err) {
            this._unsubscribe();
            _super.prototype._error.call(this, err);
        };
        ConnectableSubscriber.prototype._complete = function () {
            this.connectable._isComplete = true;
            this._unsubscribe();
            _super.prototype._complete.call(this);
        };
        ConnectableSubscriber.prototype._unsubscribe = function () {
            var connectable = this.connectable;
            if (connectable) {
                this.connectable = null;
                var connection = connectable._connection;
                connectable._refCount = 0;
                connectable._subject = null;
                connectable._connection = null;
                if (connection) {
                    connection.unsubscribe();
                }
            }
        };
        return ConnectableSubscriber;
    }(SubjectSubscriber));

    /** PURE_IMPORTS_START tslib,_Subscriber,_Subscription,_Observable,_Subject PURE_IMPORTS_END */
    var GroupedObservable = /*@__PURE__*/ (function (_super) {
        __extends(GroupedObservable, _super);
        function GroupedObservable(key, groupSubject, refCountSubscription) {
            var _this = _super.call(this) || this;
            _this.key = key;
            _this.groupSubject = groupSubject;
            _this.refCountSubscription = refCountSubscription;
            return _this;
        }
        GroupedObservable.prototype._subscribe = function (subscriber) {
            var subscription = new Subscription();
            var _a = this, refCountSubscription = _a.refCountSubscription, groupSubject = _a.groupSubject;
            if (refCountSubscription && !refCountSubscription.closed) {
                subscription.add(new InnerRefCountSubscription(refCountSubscription));
            }
            subscription.add(groupSubject.subscribe(subscriber));
            return subscription;
        };
        return GroupedObservable;
    }(Observable));
    var InnerRefCountSubscription = /*@__PURE__*/ (function (_super) {
        __extends(InnerRefCountSubscription, _super);
        function InnerRefCountSubscription(parent) {
            var _this = _super.call(this) || this;
            _this.parent = parent;
            parent.count++;
            return _this;
        }
        InnerRefCountSubscription.prototype.unsubscribe = function () {
            var parent = this.parent;
            if (!parent.closed && !this.closed) {
                _super.prototype.unsubscribe.call(this);
                parent.count -= 1;
                if (parent.count === 0 && parent.attemptedToUnsubscribe) {
                    parent.unsubscribe();
                }
            }
        };
        return InnerRefCountSubscription;
    }(Subscription));

    /** PURE_IMPORTS_START tslib,_Subject,_util_ObjectUnsubscribedError PURE_IMPORTS_END */
    var BehaviorSubject = /*@__PURE__*/ (function (_super) {
        __extends(BehaviorSubject, _super);
        function BehaviorSubject(_value) {
            var _this = _super.call(this) || this;
            _this._value = _value;
            return _this;
        }
        Object.defineProperty(BehaviorSubject.prototype, "value", {
            get: function () {
                return this.getValue();
            },
            enumerable: true,
            configurable: true
        });
        BehaviorSubject.prototype._subscribe = function (subscriber) {
            var subscription = _super.prototype._subscribe.call(this, subscriber);
            if (subscription && !subscription.closed) {
                subscriber.next(this._value);
            }
            return subscription;
        };
        BehaviorSubject.prototype.getValue = function () {
            if (this.hasError) {
                throw this.thrownError;
            }
            else if (this.closed) {
                throw new ObjectUnsubscribedError();
            }
            else {
                return this._value;
            }
        };
        BehaviorSubject.prototype.next = function (value) {
            _super.prototype.next.call(this, this._value = value);
        };
        return BehaviorSubject;
    }(Subject));

    /** PURE_IMPORTS_START tslib,_Subscription PURE_IMPORTS_END */
    var Action = /*@__PURE__*/ (function (_super) {
        __extends(Action, _super);
        function Action(scheduler, work) {
            return _super.call(this) || this;
        }
        Action.prototype.schedule = function (state, delay) {
            return this;
        };
        return Action;
    }(Subscription));

    /** PURE_IMPORTS_START tslib,_Action PURE_IMPORTS_END */
    var AsyncAction = /*@__PURE__*/ (function (_super) {
        __extends(AsyncAction, _super);
        function AsyncAction(scheduler, work) {
            var _this = _super.call(this, scheduler, work) || this;
            _this.scheduler = scheduler;
            _this.work = work;
            _this.pending = false;
            return _this;
        }
        AsyncAction.prototype.schedule = function (state, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            if (this.closed) {
                return this;
            }
            this.state = state;
            var id = this.id;
            var scheduler = this.scheduler;
            if (id != null) {
                this.id = this.recycleAsyncId(scheduler, id, delay);
            }
            this.pending = true;
            this.delay = delay;
            this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);
            return this;
        };
        AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            return setInterval(scheduler.flush.bind(scheduler, this), delay);
        };
        AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            if (delay !== null && this.delay === delay && this.pending === false) {
                return id;
            }
            clearInterval(id);
            return undefined;
        };
        AsyncAction.prototype.execute = function (state, delay) {
            if (this.closed) {
                return new Error('executing a cancelled action');
            }
            this.pending = false;
            var error = this._execute(state, delay);
            if (error) {
                return error;
            }
            else if (this.pending === false && this.id != null) {
                this.id = this.recycleAsyncId(this.scheduler, this.id, null);
            }
        };
        AsyncAction.prototype._execute = function (state, delay) {
            var errored = false;
            var errorValue = undefined;
            try {
                this.work(state);
            }
            catch (e) {
                errored = true;
                errorValue = !!e && e || new Error(e);
            }
            if (errored) {
                this.unsubscribe();
                return errorValue;
            }
        };
        AsyncAction.prototype._unsubscribe = function () {
            var id = this.id;
            var scheduler = this.scheduler;
            var actions = scheduler.actions;
            var index = actions.indexOf(this);
            this.work = null;
            this.state = null;
            this.pending = false;
            this.scheduler = null;
            if (index !== -1) {
                actions.splice(index, 1);
            }
            if (id != null) {
                this.id = this.recycleAsyncId(scheduler, id, null);
            }
            this.delay = null;
        };
        return AsyncAction;
    }(Action));

    /** PURE_IMPORTS_START tslib,_AsyncAction PURE_IMPORTS_END */
    var QueueAction = /*@__PURE__*/ (function (_super) {
        __extends(QueueAction, _super);
        function QueueAction(scheduler, work) {
            var _this = _super.call(this, scheduler, work) || this;
            _this.scheduler = scheduler;
            _this.work = work;
            return _this;
        }
        QueueAction.prototype.schedule = function (state, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            if (delay > 0) {
                return _super.prototype.schedule.call(this, state, delay);
            }
            this.delay = delay;
            this.state = state;
            this.scheduler.flush(this);
            return this;
        };
        QueueAction.prototype.execute = function (state, delay) {
            return (delay > 0 || this.closed) ?
                _super.prototype.execute.call(this, state, delay) :
                this._execute(state, delay);
        };
        QueueAction.prototype.requestAsyncId = function (scheduler, id, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
                return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
            }
            return scheduler.flush(this);
        };
        return QueueAction;
    }(AsyncAction));

    var Scheduler = /*@__PURE__*/ (function () {
        function Scheduler(SchedulerAction, now) {
            if (now === void 0) {
                now = Scheduler.now;
            }
            this.SchedulerAction = SchedulerAction;
            this.now = now;
        }
        Scheduler.prototype.schedule = function (work, delay, state) {
            if (delay === void 0) {
                delay = 0;
            }
            return new this.SchedulerAction(this, work).schedule(state, delay);
        };
        Scheduler.now = function () { return Date.now(); };
        return Scheduler;
    }());

    /** PURE_IMPORTS_START tslib,_Scheduler PURE_IMPORTS_END */
    var AsyncScheduler = /*@__PURE__*/ (function (_super) {
        __extends(AsyncScheduler, _super);
        function AsyncScheduler(SchedulerAction, now) {
            if (now === void 0) {
                now = Scheduler.now;
            }
            var _this = _super.call(this, SchedulerAction, function () {
                if (AsyncScheduler.delegate && AsyncScheduler.delegate !== _this) {
                    return AsyncScheduler.delegate.now();
                }
                else {
                    return now();
                }
            }) || this;
            _this.actions = [];
            _this.active = false;
            _this.scheduled = undefined;
            return _this;
        }
        AsyncScheduler.prototype.schedule = function (work, delay, state) {
            if (delay === void 0) {
                delay = 0;
            }
            if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) {
                return AsyncScheduler.delegate.schedule(work, delay, state);
            }
            else {
                return _super.prototype.schedule.call(this, work, delay, state);
            }
        };
        AsyncScheduler.prototype.flush = function (action) {
            var actions = this.actions;
            if (this.active) {
                actions.push(action);
                return;
            }
            var error;
            this.active = true;
            do {
                if (error = action.execute(action.state, action.delay)) {
                    break;
                }
            } while (action = actions.shift());
            this.active = false;
            if (error) {
                while (action = actions.shift()) {
                    action.unsubscribe();
                }
                throw error;
            }
        };
        return AsyncScheduler;
    }(Scheduler));

    /** PURE_IMPORTS_START tslib,_AsyncScheduler PURE_IMPORTS_END */
    var QueueScheduler = /*@__PURE__*/ (function (_super) {
        __extends(QueueScheduler, _super);
        function QueueScheduler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return QueueScheduler;
    }(AsyncScheduler));

    /** PURE_IMPORTS_START _QueueAction,_QueueScheduler PURE_IMPORTS_END */
    var queueScheduler = /*@__PURE__*/ new QueueScheduler(QueueAction);
    var queue = queueScheduler;

    /** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */
    var EMPTY = /*@__PURE__*/ new Observable(function (subscriber) { return subscriber.complete(); });
    function empty(scheduler) {
        return scheduler ? emptyScheduled(scheduler) : EMPTY;
    }
    function emptyScheduled(scheduler) {
        return new Observable(function (subscriber) { return scheduler.schedule(function () { return subscriber.complete(); }); });
    }

    /** PURE_IMPORTS_START  PURE_IMPORTS_END */
    function isScheduler(value) {
        return value && typeof value.schedule === 'function';
    }

    /** PURE_IMPORTS_START  PURE_IMPORTS_END */
    var subscribeToArray = function (array) {
        return function (subscriber) {
            for (var i = 0, len = array.length; i < len && !subscriber.closed; i++) {
                subscriber.next(array[i]);
            }
            subscriber.complete();
        };
    };

    /** PURE_IMPORTS_START _Observable,_Subscription PURE_IMPORTS_END */
    function scheduleArray(input, scheduler) {
        return new Observable(function (subscriber) {
            var sub = new Subscription();
            var i = 0;
            sub.add(scheduler.schedule(function () {
                if (i === input.length) {
                    subscriber.complete();
                    return;
                }
                subscriber.next(input[i++]);
                if (!subscriber.closed) {
                    sub.add(this.schedule());
                }
            }));
            return sub;
        });
    }

    /** PURE_IMPORTS_START _Observable,_util_subscribeToArray,_scheduled_scheduleArray PURE_IMPORTS_END */
    function fromArray(input, scheduler) {
        if (!scheduler) {
            return new Observable(subscribeToArray(input));
        }
        else {
            return scheduleArray(input, scheduler);
        }
    }

    /** PURE_IMPORTS_START _util_isScheduler,_fromArray,_scheduled_scheduleArray PURE_IMPORTS_END */
    function of() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var scheduler = args[args.length - 1];
        if (isScheduler(scheduler)) {
            args.pop();
            return scheduleArray(args, scheduler);
        }
        else {
            return fromArray(args);
        }
    }

    /** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */
    function throwError(error, scheduler) {
        if (!scheduler) {
            return new Observable(function (subscriber) { return subscriber.error(error); });
        }
        else {
            return new Observable(function (subscriber) { return scheduler.schedule(dispatch$7, 0, { error: error, subscriber: subscriber }); });
        }
    }
    function dispatch$7(_a) {
        var error = _a.error, subscriber = _a.subscriber;
        subscriber.error(error);
    }

    /** PURE_IMPORTS_START _observable_empty,_observable_of,_observable_throwError PURE_IMPORTS_END */
    var NotificationKind;
    /*@__PURE__*/ (function (NotificationKind) {
        NotificationKind["NEXT"] = "N";
        NotificationKind["ERROR"] = "E";
        NotificationKind["COMPLETE"] = "C";
    })(NotificationKind || (NotificationKind = {}));
    var Notification = /*@__PURE__*/ (function () {
        function Notification(kind, value, error) {
            this.kind = kind;
            this.value = value;
            this.error = error;
            this.hasValue = kind === 'N';
        }
        Notification.prototype.observe = function (observer) {
            switch (this.kind) {
                case 'N':
                    return observer.next && observer.next(this.value);
                case 'E':
                    return observer.error && observer.error(this.error);
                case 'C':
                    return observer.complete && observer.complete();
            }
        };
        Notification.prototype.do = function (next, error, complete) {
            var kind = this.kind;
            switch (kind) {
                case 'N':
                    return next && next(this.value);
                case 'E':
                    return error && error(this.error);
                case 'C':
                    return complete && complete();
            }
        };
        Notification.prototype.accept = function (nextOrObserver, error, complete) {
            if (nextOrObserver && typeof nextOrObserver.next === 'function') {
                return this.observe(nextOrObserver);
            }
            else {
                return this.do(nextOrObserver, error, complete);
            }
        };
        Notification.prototype.toObservable = function () {
            var kind = this.kind;
            switch (kind) {
                case 'N':
                    return of(this.value);
                case 'E':
                    return throwError(this.error);
                case 'C':
                    return empty();
            }
            throw new Error('unexpected notification kind value');
        };
        Notification.createNext = function (value) {
            if (typeof value !== 'undefined') {
                return new Notification('N', value);
            }
            return Notification.undefinedValueNotification;
        };
        Notification.createError = function (err) {
            return new Notification('E', undefined, err);
        };
        Notification.createComplete = function () {
            return Notification.completeNotification;
        };
        Notification.completeNotification = new Notification('C');
        Notification.undefinedValueNotification = new Notification('N', undefined);
        return Notification;
    }());

    /** PURE_IMPORTS_START tslib,_Subscriber,_Notification PURE_IMPORTS_END */
    var ObserveOnSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(ObserveOnSubscriber, _super);
        function ObserveOnSubscriber(destination, scheduler, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            var _this = _super.call(this, destination) || this;
            _this.scheduler = scheduler;
            _this.delay = delay;
            return _this;
        }
        ObserveOnSubscriber.dispatch = function (arg) {
            var notification = arg.notification, destination = arg.destination;
            notification.observe(destination);
            this.unsubscribe();
        };
        ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {
            var destination = this.destination;
            destination.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));
        };
        ObserveOnSubscriber.prototype._next = function (value) {
            this.scheduleMessage(Notification.createNext(value));
        };
        ObserveOnSubscriber.prototype._error = function (err) {
            this.scheduleMessage(Notification.createError(err));
            this.unsubscribe();
        };
        ObserveOnSubscriber.prototype._complete = function () {
            this.scheduleMessage(Notification.createComplete());
            this.unsubscribe();
        };
        return ObserveOnSubscriber;
    }(Subscriber));
    var ObserveOnMessage = /*@__PURE__*/ (function () {
        function ObserveOnMessage(notification, destination) {
            this.notification = notification;
            this.destination = destination;
        }
        return ObserveOnMessage;
    }());

    /** PURE_IMPORTS_START tslib,_Subject,_scheduler_queue,_Subscription,_operators_observeOn,_util_ObjectUnsubscribedError,_SubjectSubscription PURE_IMPORTS_END */
    var ReplaySubject = /*@__PURE__*/ (function (_super) {
        __extends(ReplaySubject, _super);
        function ReplaySubject(bufferSize, windowTime, scheduler) {
            if (bufferSize === void 0) {
                bufferSize = Number.POSITIVE_INFINITY;
            }
            if (windowTime === void 0) {
                windowTime = Number.POSITIVE_INFINITY;
            }
            var _this = _super.call(this) || this;
            _this.scheduler = scheduler;
            _this._events = [];
            _this._infiniteTimeWindow = false;
            _this._bufferSize = bufferSize < 1 ? 1 : bufferSize;
            _this._windowTime = windowTime < 1 ? 1 : windowTime;
            if (windowTime === Number.POSITIVE_INFINITY) {
                _this._infiniteTimeWindow = true;
                _this.next = _this.nextInfiniteTimeWindow;
            }
            else {
                _this.next = _this.nextTimeWindow;
            }
            return _this;
        }
        ReplaySubject.prototype.nextInfiniteTimeWindow = function (value) {
            if (!this.isStopped) {
                var _events = this._events;
                _events.push(value);
                if (_events.length > this._bufferSize) {
                    _events.shift();
                }
            }
            _super.prototype.next.call(this, value);
        };
        ReplaySubject.prototype.nextTimeWindow = function (value) {
            if (!this.isStopped) {
                this._events.push(new ReplayEvent(this._getNow(), value));
                this._trimBufferThenGetEvents();
            }
            _super.prototype.next.call(this, value);
        };
        ReplaySubject.prototype._subscribe = function (subscriber) {
            var _infiniteTimeWindow = this._infiniteTimeWindow;
            var _events = _infiniteTimeWindow ? this._events : this._trimBufferThenGetEvents();
            var scheduler = this.scheduler;
            var len = _events.length;
            var subscription;
            if (this.closed) {
                throw new ObjectUnsubscribedError();
            }
            else if (this.isStopped || this.hasError) {
                subscription = Subscription.EMPTY;
            }
            else {
                this.observers.push(subscriber);
                subscription = new SubjectSubscription(this, subscriber);
            }
            if (scheduler) {
                subscriber.add(subscriber = new ObserveOnSubscriber(subscriber, scheduler));
            }
            if (_infiniteTimeWindow) {
                for (var i = 0; i < len && !subscriber.closed; i++) {
                    subscriber.next(_events[i]);
                }
            }
            else {
                for (var i = 0; i < len && !subscriber.closed; i++) {
                    subscriber.next(_events[i].value);
                }
            }
            if (this.hasError) {
                subscriber.error(this.thrownError);
            }
            else if (this.isStopped) {
                subscriber.complete();
            }
            return subscription;
        };
        ReplaySubject.prototype._getNow = function () {
            return (this.scheduler || queue).now();
        };
        ReplaySubject.prototype._trimBufferThenGetEvents = function () {
            var now = this._getNow();
            var _bufferSize = this._bufferSize;
            var _windowTime = this._windowTime;
            var _events = this._events;
            var eventsCount = _events.length;
            var spliceCount = 0;
            while (spliceCount < eventsCount) {
                if ((now - _events[spliceCount].time) < _windowTime) {
                    break;
                }
                spliceCount++;
            }
            if (eventsCount > _bufferSize) {
                spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);
            }
            if (spliceCount > 0) {
                _events.splice(0, spliceCount);
            }
            return _events;
        };
        return ReplaySubject;
    }(Subject));
    var ReplayEvent = /*@__PURE__*/ (function () {
        function ReplayEvent(time, value) {
            this.time = time;
            this.value = value;
        }
        return ReplayEvent;
    }());

    /** PURE_IMPORTS_START tslib,_Subject,_Subscription PURE_IMPORTS_END */
    var AsyncSubject = /*@__PURE__*/ (function (_super) {
        __extends(AsyncSubject, _super);
        function AsyncSubject() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.value = null;
            _this.hasNext = false;
            _this.hasCompleted = false;
            return _this;
        }
        AsyncSubject.prototype._subscribe = function (subscriber) {
            if (this.hasError) {
                subscriber.error(this.thrownError);
                return Subscription.EMPTY;
            }
            else if (this.hasCompleted && this.hasNext) {
                subscriber.next(this.value);
                subscriber.complete();
                return Subscription.EMPTY;
            }
            return _super.prototype._subscribe.call(this, subscriber);
        };
        AsyncSubject.prototype.next = function (value) {
            if (!this.hasCompleted) {
                this.value = value;
                this.hasNext = true;
            }
        };
        AsyncSubject.prototype.error = function (error) {
            if (!this.hasCompleted) {
                _super.prototype.error.call(this, error);
            }
        };
        AsyncSubject.prototype.complete = function () {
            this.hasCompleted = true;
            if (this.hasNext) {
                _super.prototype.next.call(this, this.value);
            }
            _super.prototype.complete.call(this);
        };
        return AsyncSubject;
    }(Subject));

    /** PURE_IMPORTS_START  PURE_IMPORTS_END */
    var nextHandle = 1;
    var RESOLVED = /*@__PURE__*/ (function () { return /*@__PURE__*/ Promise.resolve(); })();
    var activeHandles = {};
    function findAndClearHandle(handle) {
        if (handle in activeHandles) {
            delete activeHandles[handle];
            return true;
        }
        return false;
    }
    var Immediate = {
        setImmediate: function (cb) {
            var handle = nextHandle++;
            activeHandles[handle] = true;
            RESOLVED.then(function () { return findAndClearHandle(handle) && cb(); });
            return handle;
        },
        clearImmediate: function (handle) {
            findAndClearHandle(handle);
        },
    };

    /** PURE_IMPORTS_START tslib,_util_Immediate,_AsyncAction PURE_IMPORTS_END */
    var AsapAction = /*@__PURE__*/ (function (_super) {
        __extends(AsapAction, _super);
        function AsapAction(scheduler, work) {
            var _this = _super.call(this, scheduler, work) || this;
            _this.scheduler = scheduler;
            _this.work = work;
            return _this;
        }
        AsapAction.prototype.requestAsyncId = function (scheduler, id, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            if (delay !== null && delay > 0) {
                return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
            }
            scheduler.actions.push(this);
            return scheduler.scheduled || (scheduler.scheduled = Immediate.setImmediate(scheduler.flush.bind(scheduler, null)));
        };
        AsapAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
                return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
            }
            if (scheduler.actions.length === 0) {
                Immediate.clearImmediate(id);
                scheduler.scheduled = undefined;
            }
            return undefined;
        };
        return AsapAction;
    }(AsyncAction));

    /** PURE_IMPORTS_START tslib,_AsyncScheduler PURE_IMPORTS_END */
    var AsapScheduler = /*@__PURE__*/ (function (_super) {
        __extends(AsapScheduler, _super);
        function AsapScheduler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        AsapScheduler.prototype.flush = function (action) {
            this.active = true;
            this.scheduled = undefined;
            var actions = this.actions;
            var error;
            var index = -1;
            var count = actions.length;
            action = action || actions.shift();
            do {
                if (error = action.execute(action.state, action.delay)) {
                    break;
                }
            } while (++index < count && (action = actions.shift()));
            this.active = false;
            if (error) {
                while (++index < count && (action = actions.shift())) {
                    action.unsubscribe();
                }
                throw error;
            }
        };
        return AsapScheduler;
    }(AsyncScheduler));

    /** PURE_IMPORTS_START _AsapAction,_AsapScheduler PURE_IMPORTS_END */
    var asapScheduler = /*@__PURE__*/ new AsapScheduler(AsapAction);
    var asap = asapScheduler;

    /** PURE_IMPORTS_START _AsyncAction,_AsyncScheduler PURE_IMPORTS_END */
    var asyncScheduler = /*@__PURE__*/ new AsyncScheduler(AsyncAction);
    var async = asyncScheduler;

    /** PURE_IMPORTS_START tslib,_AsyncAction PURE_IMPORTS_END */
    var AnimationFrameAction = /*@__PURE__*/ (function (_super) {
        __extends(AnimationFrameAction, _super);
        function AnimationFrameAction(scheduler, work) {
            var _this = _super.call(this, scheduler, work) || this;
            _this.scheduler = scheduler;
            _this.work = work;
            return _this;
        }
        AnimationFrameAction.prototype.requestAsyncId = function (scheduler, id, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            if (delay !== null && delay > 0) {
                return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
            }
            scheduler.actions.push(this);
            return scheduler.scheduled || (scheduler.scheduled = requestAnimationFrame(function () { return scheduler.flush(null); }));
        };
        AnimationFrameAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
                return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
            }
            if (scheduler.actions.length === 0) {
                cancelAnimationFrame(id);
                scheduler.scheduled = undefined;
            }
            return undefined;
        };
        return AnimationFrameAction;
    }(AsyncAction));

    /** PURE_IMPORTS_START tslib,_AsyncScheduler PURE_IMPORTS_END */
    var AnimationFrameScheduler = /*@__PURE__*/ (function (_super) {
        __extends(AnimationFrameScheduler, _super);
        function AnimationFrameScheduler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        AnimationFrameScheduler.prototype.flush = function (action) {
            this.active = true;
            this.scheduled = undefined;
            var actions = this.actions;
            var error;
            var index = -1;
            var count = actions.length;
            action = action || actions.shift();
            do {
                if (error = action.execute(action.state, action.delay)) {
                    break;
                }
            } while (++index < count && (action = actions.shift()));
            this.active = false;
            if (error) {
                while (++index < count && (action = actions.shift())) {
                    action.unsubscribe();
                }
                throw error;
            }
        };
        return AnimationFrameScheduler;
    }(AsyncScheduler));

    /** PURE_IMPORTS_START _AnimationFrameAction,_AnimationFrameScheduler PURE_IMPORTS_END */
    var animationFrameScheduler = /*@__PURE__*/ new AnimationFrameScheduler(AnimationFrameAction);
    var animationFrame = animationFrameScheduler;

    /** PURE_IMPORTS_START tslib,_AsyncAction,_AsyncScheduler PURE_IMPORTS_END */
    var VirtualTimeScheduler = /*@__PURE__*/ (function (_super) {
        __extends(VirtualTimeScheduler, _super);
        function VirtualTimeScheduler(SchedulerAction, maxFrames) {
            if (SchedulerAction === void 0) {
                SchedulerAction = VirtualAction;
            }
            if (maxFrames === void 0) {
                maxFrames = Number.POSITIVE_INFINITY;
            }
            var _this = _super.call(this, SchedulerAction, function () { return _this.frame; }) || this;
            _this.maxFrames = maxFrames;
            _this.frame = 0;
            _this.index = -1;
            return _this;
        }
        VirtualTimeScheduler.prototype.flush = function () {
            var _a = this, actions = _a.actions, maxFrames = _a.maxFrames;
            var error, action;
            while ((action = actions[0]) && action.delay <= maxFrames) {
                actions.shift();
                this.frame = action.delay;
                if (error = action.execute(action.state, action.delay)) {
                    break;
                }
            }
            if (error) {
                while (action = actions.shift()) {
                    action.unsubscribe();
                }
                throw error;
            }
        };
        VirtualTimeScheduler.frameTimeFactor = 10;
        return VirtualTimeScheduler;
    }(AsyncScheduler));
    var VirtualAction = /*@__PURE__*/ (function (_super) {
        __extends(VirtualAction, _super);
        function VirtualAction(scheduler, work, index) {
            if (index === void 0) {
                index = scheduler.index += 1;
            }
            var _this = _super.call(this, scheduler, work) || this;
            _this.scheduler = scheduler;
            _this.work = work;
            _this.index = index;
            _this.active = true;
            _this.index = scheduler.index = index;
            return _this;
        }
        VirtualAction.prototype.schedule = function (state, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            if (!this.id) {
                return _super.prototype.schedule.call(this, state, delay);
            }
            this.active = false;
            var action = new VirtualAction(this.scheduler, this.work);
            this.add(action);
            return action.schedule(state, delay);
        };
        VirtualAction.prototype.requestAsyncId = function (scheduler, id, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            this.delay = scheduler.frame + delay;
            var actions = scheduler.actions;
            actions.push(this);
            actions.sort(VirtualAction.sortActions);
            return true;
        };
        VirtualAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
            return undefined;
        };
        VirtualAction.prototype._execute = function (state, delay) {
            if (this.active === true) {
                return _super.prototype._execute.call(this, state, delay);
            }
        };
        VirtualAction.sortActions = function (a, b) {
            if (a.delay === b.delay) {
                if (a.index === b.index) {
                    return 0;
                }
                else if (a.index > b.index) {
                    return 1;
                }
                else {
                    return -1;
                }
            }
            else if (a.delay > b.delay) {
                return 1;
            }
            else {
                return -1;
            }
        };
        return VirtualAction;
    }(AsyncAction));

    /** PURE_IMPORTS_START  PURE_IMPORTS_END */
    function noop() { }

    /** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */
    function isObservable(obj) {
        return !!obj && (obj instanceof Observable || (typeof obj.lift === 'function' && typeof obj.subscribe === 'function'));
    }

    /** PURE_IMPORTS_START  PURE_IMPORTS_END */
    var ArgumentOutOfRangeErrorImpl = /*@__PURE__*/ (function () {
        function ArgumentOutOfRangeErrorImpl() {
            Error.call(this);
            this.message = 'argument out of range';
            this.name = 'ArgumentOutOfRangeError';
            return this;
        }
        ArgumentOutOfRangeErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);
        return ArgumentOutOfRangeErrorImpl;
    })();
    var ArgumentOutOfRangeError = ArgumentOutOfRangeErrorImpl;

    /** PURE_IMPORTS_START  PURE_IMPORTS_END */
    var EmptyErrorImpl = /*@__PURE__*/ (function () {
        function EmptyErrorImpl() {
            Error.call(this);
            this.message = 'no elements in sequence';
            this.name = 'EmptyError';
            return this;
        }
        EmptyErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);
        return EmptyErrorImpl;
    })();
    var EmptyError = EmptyErrorImpl;

    /** PURE_IMPORTS_START  PURE_IMPORTS_END */
    var TimeoutErrorImpl = /*@__PURE__*/ (function () {
        function TimeoutErrorImpl() {
            Error.call(this);
            this.message = 'Timeout has occurred';
            this.name = 'TimeoutError';
            return this;
        }
        TimeoutErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);
        return TimeoutErrorImpl;
    })();
    var TimeoutError = TimeoutErrorImpl;

    /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
    function map(project, thisArg) {
        return function mapOperation(source) {
            if (typeof project !== 'function') {
                throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');
            }
            return source.lift(new MapOperator(project, thisArg));
        };
    }
    var MapOperator = /*@__PURE__*/ (function () {
        function MapOperator(project, thisArg) {
            this.project = project;
            this.thisArg = thisArg;
        }
        MapOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));
        };
        return MapOperator;
    }());
    var MapSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(MapSubscriber, _super);
        function MapSubscriber(destination, project, thisArg) {
            var _this = _super.call(this, destination) || this;
            _this.project = project;
            _this.count = 0;
            _this.thisArg = thisArg || _this;
            return _this;
        }
        MapSubscriber.prototype._next = function (value) {
            var result;
            try {
                result = this.project.call(this.thisArg, value, this.count++);
            }
            catch (err) {
                this.destination.error(err);
                return;
            }
            this.destination.next(result);
        };
        return MapSubscriber;
    }(Subscriber));

    /** PURE_IMPORTS_START _Observable,_AsyncSubject,_operators_map,_util_canReportError,_util_isArray,_util_isScheduler PURE_IMPORTS_END */
    function bindCallback(callbackFunc, resultSelector, scheduler) {
        if (resultSelector) {
            if (isScheduler(resultSelector)) {
                scheduler = resultSelector;
            }
            else {
                return function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    return bindCallback(callbackFunc, scheduler).apply(void 0, args).pipe(map(function (args) { return isArray$1(args) ? resultSelector.apply(void 0, args) : resultSelector(args); }));
                };
            }
        }
        return function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var context = this;
            var subject;
            var params = {
                context: context,
                subject: subject,
                callbackFunc: callbackFunc,
                scheduler: scheduler,
            };
            return new Observable(function (subscriber) {
                if (!scheduler) {
                    if (!subject) {
                        subject = new AsyncSubject();
                        var handler = function () {
                            var innerArgs = [];
                            for (var _i = 0; _i < arguments.length; _i++) {
                                innerArgs[_i] = arguments[_i];
                            }
                            subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);
                            subject.complete();
                        };
                        try {
                            callbackFunc.apply(context, args.concat([handler]));
                        }
                        catch (err) {
                            if (canReportError(subject)) {
                                subject.error(err);
                            }
                            else {
                                console.warn(err);
                            }
                        }
                    }
                    return subject.subscribe(subscriber);
                }
                else {
                    var state = {
                        args: args, subscriber: subscriber, params: params,
                    };
                    return scheduler.schedule(dispatch$6, 0, state);
                }
            });
        };
    }
    function dispatch$6(state) {
        var _this = this;
        var args = state.args, subscriber = state.subscriber, params = state.params;
        var callbackFunc = params.callbackFunc, context = params.context, scheduler = params.scheduler;
        var subject = params.subject;
        if (!subject) {
            subject = params.subject = new AsyncSubject();
            var handler = function () {
                var innerArgs = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    innerArgs[_i] = arguments[_i];
                }
                var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;
                _this.add(scheduler.schedule(dispatchNext$1, 0, { value: value, subject: subject }));
            };
            try {
                callbackFunc.apply(context, args.concat([handler]));
            }
            catch (err) {
                subject.error(err);
            }
        }
        this.add(subject.subscribe(subscriber));
    }
    function dispatchNext$1(state) {
        var value = state.value, subject = state.subject;
        subject.next(value);
        subject.complete();
    }

    /** PURE_IMPORTS_START _Observable,_AsyncSubject,_operators_map,_util_canReportError,_util_isScheduler,_util_isArray PURE_IMPORTS_END */
    function bindNodeCallback(callbackFunc, resultSelector, scheduler) {
        if (resultSelector) {
            if (isScheduler(resultSelector)) {
                scheduler = resultSelector;
            }
            else {
                return function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    return bindNodeCallback(callbackFunc, scheduler).apply(void 0, args).pipe(map(function (args) { return isArray$1(args) ? resultSelector.apply(void 0, args) : resultSelector(args); }));
                };
            }
        }
        return function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var params = {
                subject: undefined,
                args: args,
                callbackFunc: callbackFunc,
                scheduler: scheduler,
                context: this,
            };
            return new Observable(function (subscriber) {
                var context = params.context;
                var subject = params.subject;
                if (!scheduler) {
                    if (!subject) {
                        subject = params.subject = new AsyncSubject();
                        var handler = function () {
                            var innerArgs = [];
                            for (var _i = 0; _i < arguments.length; _i++) {
                                innerArgs[_i] = arguments[_i];
                            }
                            var err = innerArgs.shift();
                            if (err) {
                                subject.error(err);
                                return;
                            }
                            subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);
                            subject.complete();
                        };
                        try {
                            callbackFunc.apply(context, args.concat([handler]));
                        }
                        catch (err) {
                            if (canReportError(subject)) {
                                subject.error(err);
                            }
                            else {
                                console.warn(err);
                            }
                        }
                    }
                    return subject.subscribe(subscriber);
                }
                else {
                    return scheduler.schedule(dispatch$5, 0, { params: params, subscriber: subscriber, context: context });
                }
            });
        };
    }
    function dispatch$5(state) {
        var _this = this;
        var params = state.params, subscriber = state.subscriber, context = state.context;
        var callbackFunc = params.callbackFunc, args = params.args, scheduler = params.scheduler;
        var subject = params.subject;
        if (!subject) {
            subject = params.subject = new AsyncSubject();
            var handler = function () {
                var innerArgs = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    innerArgs[_i] = arguments[_i];
                }
                var err = innerArgs.shift();
                if (err) {
                    _this.add(scheduler.schedule(dispatchError, 0, { err: err, subject: subject }));
                }
                else {
                    var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;
                    _this.add(scheduler.schedule(dispatchNext, 0, { value: value, subject: subject }));
                }
            };
            try {
                callbackFunc.apply(context, args.concat([handler]));
            }
            catch (err) {
                this.add(scheduler.schedule(dispatchError, 0, { err: err, subject: subject }));
            }
        }
        this.add(subject.subscribe(subscriber));
    }
    function dispatchNext(arg) {
        var value = arg.value, subject = arg.subject;
        subject.next(value);
        subject.complete();
    }
    function dispatchError(arg) {
        var err = arg.err, subject = arg.subject;
        subject.error(err);
    }

    /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
    var OuterSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(OuterSubscriber, _super);
        function OuterSubscriber() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.destination.next(innerValue);
        };
        OuterSubscriber.prototype.notifyError = function (error, innerSub) {
            this.destination.error(error);
        };
        OuterSubscriber.prototype.notifyComplete = function (innerSub) {
            this.destination.complete();
        };
        return OuterSubscriber;
    }(Subscriber));

    /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
    var InnerSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(InnerSubscriber, _super);
        function InnerSubscriber(parent, outerValue, outerIndex) {
            var _this = _super.call(this) || this;
            _this.parent = parent;
            _this.outerValue = outerValue;
            _this.outerIndex = outerIndex;
            _this.index = 0;
            return _this;
        }
        InnerSubscriber.prototype._next = function (value) {
            this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);
        };
        InnerSubscriber.prototype._error = function (error) {
            this.parent.notifyError(error, this);
            this.unsubscribe();
        };
        InnerSubscriber.prototype._complete = function () {
            this.parent.notifyComplete(this);
            this.unsubscribe();
        };
        return InnerSubscriber;
    }(Subscriber));

    /** PURE_IMPORTS_START _hostReportError PURE_IMPORTS_END */
    var subscribeToPromise = function (promise) {
        return function (subscriber) {
            promise.then(function (value) {
                if (!subscriber.closed) {
                    subscriber.next(value);
                    subscriber.complete();
                }
            }, function (err) { return subscriber.error(err); })
                .then(null, hostReportError);
            return subscriber;
        };
    };

    /** PURE_IMPORTS_START  PURE_IMPORTS_END */
    function getSymbolIterator() {
        if (typeof Symbol !== 'function' || !Symbol.iterator) {
            return '@@iterator';
        }
        return Symbol.iterator;
    }
    var iterator = /*@__PURE__*/ getSymbolIterator();

    /** PURE_IMPORTS_START _symbol_iterator PURE_IMPORTS_END */
    var subscribeToIterable = function (iterable) {
        return function (subscriber) {
            var iterator$1 = iterable[iterator]();
            do {
                var item = void 0;
                try {
                    item = iterator$1.next();
                }
                catch (err) {
                    subscriber.error(err);
                    return subscriber;
                }
                if (item.done) {
                    subscriber.complete();
                    break;
                }
                subscriber.next(item.value);
                if (subscriber.closed) {
                    break;
                }
            } while (true);
            if (typeof iterator$1.return === 'function') {
                subscriber.add(function () {
                    if (iterator$1.return) {
                        iterator$1.return();
                    }
                });
            }
            return subscriber;
        };
    };

    /** PURE_IMPORTS_START _symbol_observable PURE_IMPORTS_END */
    var subscribeToObservable = function (obj) {
        return function (subscriber) {
            var obs = obj[observable]();
            if (typeof obs.subscribe !== 'function') {
                throw new TypeError('Provided object does not correctly implement Symbol.observable');
            }
            else {
                return obs.subscribe(subscriber);
            }
        };
    };

    /** PURE_IMPORTS_START  PURE_IMPORTS_END */
    var isArrayLike = (function (x) { return x && typeof x.length === 'number' && typeof x !== 'function'; });

    /** PURE_IMPORTS_START  PURE_IMPORTS_END */
    function isPromise(value) {
        return !!value && typeof value.subscribe !== 'function' && typeof value.then === 'function';
    }

    /** PURE_IMPORTS_START _subscribeToArray,_subscribeToPromise,_subscribeToIterable,_subscribeToObservable,_isArrayLike,_isPromise,_isObject,_symbol_iterator,_symbol_observable PURE_IMPORTS_END */
    var subscribeTo = function (result) {
        if (!!result && typeof result[observable] === 'function') {
            return subscribeToObservable(result);
        }
        else if (isArrayLike(result)) {
            return subscribeToArray(result);
        }
        else if (isPromise(result)) {
            return subscribeToPromise(result);
        }
        else if (!!result && typeof result[iterator] === 'function') {
            return subscribeToIterable(result);
        }
        else {
            var value = isObject$1(result) ? 'an invalid object' : "'" + result + "'";
            var msg = "You provided " + value + " where a stream was expected."
                + ' You can provide an Observable, Promise, Array, or Iterable.';
            throw new TypeError(msg);
        }
    };

    /** PURE_IMPORTS_START _InnerSubscriber,_subscribeTo,_Observable PURE_IMPORTS_END */
    function subscribeToResult(outerSubscriber, result, outerValue, outerIndex, innerSubscriber) {
        if (innerSubscriber === void 0) {
            innerSubscriber = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);
        }
        if (innerSubscriber.closed) {
            return undefined;
        }
        if (result instanceof Observable) {
            return result.subscribe(innerSubscriber);
        }
        return subscribeTo(result)(innerSubscriber);
    }

    /** PURE_IMPORTS_START tslib,_util_isScheduler,_util_isArray,_OuterSubscriber,_util_subscribeToResult,_fromArray PURE_IMPORTS_END */
    var NONE = {};
    function combineLatest() {
        var observables = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            observables[_i] = arguments[_i];
        }
        var resultSelector = undefined;
        var scheduler = undefined;
        if (isScheduler(observables[observables.length - 1])) {
            scheduler = observables.pop();
        }
        if (typeof observables[observables.length - 1] === 'function') {
            resultSelector = observables.pop();
        }
        if (observables.length === 1 && isArray$1(observables[0])) {
            observables = observables[0];
        }
        return fromArray(observables, scheduler).lift(new CombineLatestOperator(resultSelector));
    }
    var CombineLatestOperator = /*@__PURE__*/ (function () {
        function CombineLatestOperator(resultSelector) {
            this.resultSelector = resultSelector;
        }
        CombineLatestOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new CombineLatestSubscriber(subscriber, this.resultSelector));
        };
        return CombineLatestOperator;
    }());
    var CombineLatestSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(CombineLatestSubscriber, _super);
        function CombineLatestSubscriber(destination, resultSelector) {
            var _this = _super.call(this, destination) || this;
            _this.resultSelector = resultSelector;
            _this.active = 0;
            _this.values = [];
            _this.observables = [];
            return _this;
        }
        CombineLatestSubscriber.prototype._next = function (observable) {
            this.values.push(NONE);
            this.observables.push(observable);
        };
        CombineLatestSubscriber.prototype._complete = function () {
            var observables = this.observables;
            var len = observables.length;
            if (len === 0) {
                this.destination.complete();
            }
            else {
                this.active = len;
                this.toRespond = len;
                for (var i = 0; i < len; i++) {
                    var observable = observables[i];
                    this.add(subscribeToResult(this, observable, undefined, i));
                }
            }
        };
        CombineLatestSubscriber.prototype.notifyComplete = function (unused) {
            if ((this.active -= 1) === 0) {
                this.destination.complete();
            }
        };
        CombineLatestSubscriber.prototype.notifyNext = function (_outerValue, innerValue, outerIndex) {
            var values = this.values;
            var oldVal = values[outerIndex];
            var toRespond = !this.toRespond
                ? 0
                : oldVal === NONE ? --this.toRespond : this.toRespond;
            values[outerIndex] = innerValue;
            if (toRespond === 0) {
                if (this.resultSelector) {
                    this._tryResultSelector(values);
                }
                else {
                    this.destination.next(values.slice());
                }
            }
        };
        CombineLatestSubscriber.prototype._tryResultSelector = function (values) {
            var result;
            try {
                result = this.resultSelector.apply(this, values);
            }
            catch (err) {
                this.destination.error(err);
                return;
            }
            this.destination.next(result);
        };
        return CombineLatestSubscriber;
    }(OuterSubscriber));

    /** PURE_IMPORTS_START _Observable,_Subscription,_symbol_observable PURE_IMPORTS_END */
    function scheduleObservable(input, scheduler) {
        return new Observable(function (subscriber) {
            var sub = new Subscription();
            sub.add(scheduler.schedule(function () {
                var observable$1 = input[observable]();
                sub.add(observable$1.subscribe({
                    next: function (value) { sub.add(scheduler.schedule(function () { return subscriber.next(value); })); },
                    error: function (err) { sub.add(scheduler.schedule(function () { return subscriber.error(err); })); },
                    complete: function () { sub.add(scheduler.schedule(function () { return subscriber.complete(); })); },
                }));
            }));
            return sub;
        });
    }

    /** PURE_IMPORTS_START _Observable,_Subscription PURE_IMPORTS_END */
    function schedulePromise(input, scheduler) {
        return new Observable(function (subscriber) {
            var sub = new Subscription();
            sub.add(scheduler.schedule(function () {
                return input.then(function (value) {
                    sub.add(scheduler.schedule(function () {
                        subscriber.next(value);
                        sub.add(scheduler.schedule(function () { return subscriber.complete(); }));
                    }));
                }, function (err) {
                    sub.add(scheduler.schedule(function () { return subscriber.error(err); }));
                });
            }));
            return sub;
        });
    }

    /** PURE_IMPORTS_START _Observable,_Subscription,_symbol_iterator PURE_IMPORTS_END */
    function scheduleIterable(input, scheduler) {
        if (!input) {
            throw new Error('Iterable cannot be null');
        }
        return new Observable(function (subscriber) {
            var sub = new Subscription();
            var iterator$1;
            sub.add(function () {
                if (iterator$1 && typeof iterator$1.return === 'function') {
                    iterator$1.return();
                }
            });
            sub.add(scheduler.schedule(function () {
                iterator$1 = input[iterator]();
                sub.add(scheduler.schedule(function () {
                    if (subscriber.closed) {
                        return;
                    }
                    var value;
                    var done;
                    try {
                        var result = iterator$1.next();
                        value = result.value;
                        done = result.done;
                    }
                    catch (err) {
                        subscriber.error(err);
                        return;
                    }
                    if (done) {
                        subscriber.complete();
                    }
                    else {
                        subscriber.next(value);
                        this.schedule();
                    }
                }));
            }));
            return sub;
        });
    }

    /** PURE_IMPORTS_START _symbol_observable PURE_IMPORTS_END */
    function isInteropObservable(input) {
        return input && typeof input[observable] === 'function';
    }

    /** PURE_IMPORTS_START _symbol_iterator PURE_IMPORTS_END */
    function isIterable(input) {
        return input && typeof input[iterator] === 'function';
    }

    /** PURE_IMPORTS_START _scheduleObservable,_schedulePromise,_scheduleArray,_scheduleIterable,_util_isInteropObservable,_util_isPromise,_util_isArrayLike,_util_isIterable PURE_IMPORTS_END */
    function scheduled(input, scheduler) {
        if (input != null) {
            if (isInteropObservable(input)) {
                return scheduleObservable(input, scheduler);
            }
            else if (isPromise(input)) {
                return schedulePromise(input, scheduler);
            }
            else if (isArrayLike(input)) {
                return scheduleArray(input, scheduler);
            }
            else if (isIterable(input) || typeof input === 'string') {
                return scheduleIterable(input, scheduler);
            }
        }
        throw new TypeError((input !== null && typeof input || input) + ' is not observable');
    }

    /** PURE_IMPORTS_START _Observable,_util_subscribeTo,_scheduled_scheduled PURE_IMPORTS_END */
    function from$1(input, scheduler) {
        if (!scheduler) {
            if (input instanceof Observable) {
                return input;
            }
            return new Observable(subscribeTo(input));
        }
        else {
            return scheduled(input, scheduler);
        }
    }

    /** PURE_IMPORTS_START tslib,_Subscriber,_Observable,_util_subscribeTo PURE_IMPORTS_END */
    var SimpleInnerSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(SimpleInnerSubscriber, _super);
        function SimpleInnerSubscriber(parent) {
            var _this = _super.call(this) || this;
            _this.parent = parent;
            return _this;
        }
        SimpleInnerSubscriber.prototype._next = function (value) {
            this.parent.notifyNext(value);
        };
        SimpleInnerSubscriber.prototype._error = function (error) {
            this.parent.notifyError(error);
            this.unsubscribe();
        };
        SimpleInnerSubscriber.prototype._complete = function () {
            this.parent.notifyComplete();
            this.unsubscribe();
        };
        return SimpleInnerSubscriber;
    }(Subscriber));
    var SimpleOuterSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(SimpleOuterSubscriber, _super);
        function SimpleOuterSubscriber() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SimpleOuterSubscriber.prototype.notifyNext = function (innerValue) {
            this.destination.next(innerValue);
        };
        SimpleOuterSubscriber.prototype.notifyError = function (err) {
            this.destination.error(err);
        };
        SimpleOuterSubscriber.prototype.notifyComplete = function () {
            this.destination.complete();
        };
        return SimpleOuterSubscriber;
    }(Subscriber));
    function innerSubscribe(result, innerSubscriber) {
        if (innerSubscriber.closed) {
            return undefined;
        }
        if (result instanceof Observable) {
            return result.subscribe(innerSubscriber);
        }
        var subscription;
        try {
            subscription = subscribeTo(result)(innerSubscriber);
        }
        catch (error) {
            innerSubscriber.error(error);
        }
        return subscription;
    }

    /** PURE_IMPORTS_START tslib,_map,_observable_from,_innerSubscribe PURE_IMPORTS_END */
    function mergeMap(project, resultSelector, concurrent) {
        if (concurrent === void 0) {
            concurrent = Number.POSITIVE_INFINITY;
        }
        if (typeof resultSelector === 'function') {
            return function (source) { return source.pipe(mergeMap(function (a, i) { return from$1(project(a, i)).pipe(map(function (b, ii) { return resultSelector(a, b, i, ii); })); }, concurrent)); };
        }
        else if (typeof resultSelector === 'number') {
            concurrent = resultSelector;
        }
        return function (source) { return source.lift(new MergeMapOperator(project, concurrent)); };
    }
    var MergeMapOperator = /*@__PURE__*/ (function () {
        function MergeMapOperator(project, concurrent) {
            if (concurrent === void 0) {
                concurrent = Number.POSITIVE_INFINITY;
            }
            this.project = project;
            this.concurrent = concurrent;
        }
        MergeMapOperator.prototype.call = function (observer, source) {
            return source.subscribe(new MergeMapSubscriber(observer, this.project, this.concurrent));
        };
        return MergeMapOperator;
    }());
    var MergeMapSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(MergeMapSubscriber, _super);
        function MergeMapSubscriber(destination, project, concurrent) {
            if (concurrent === void 0) {
                concurrent = Number.POSITIVE_INFINITY;
            }
            var _this = _super.call(this, destination) || this;
            _this.project = project;
            _this.concurrent = concurrent;
            _this.hasCompleted = false;
            _this.buffer = [];
            _this.active = 0;
            _this.index = 0;
            return _this;
        }
        MergeMapSubscriber.prototype._next = function (value) {
            if (this.active < this.concurrent) {
                this._tryNext(value);
            }
            else {
                this.buffer.push(value);
            }
        };
        MergeMapSubscriber.prototype._tryNext = function (value) {
            var result;
            var index = this.index++;
            try {
                result = this.project(value, index);
            }
            catch (err) {
                this.destination.error(err);
                return;
            }
            this.active++;
            this._innerSub(result);
        };
        MergeMapSubscriber.prototype._innerSub = function (ish) {
            var innerSubscriber = new SimpleInnerSubscriber(this);
            var destination = this.destination;
            destination.add(innerSubscriber);
            var innerSubscription = innerSubscribe(ish, innerSubscriber);
            if (innerSubscription !== innerSubscriber) {
                destination.add(innerSubscription);
            }
        };
        MergeMapSubscriber.prototype._complete = function () {
            this.hasCompleted = true;
            if (this.active === 0 && this.buffer.length === 0) {
                this.destination.complete();
            }
            this.unsubscribe();
        };
        MergeMapSubscriber.prototype.notifyNext = function (innerValue) {
            this.destination.next(innerValue);
        };
        MergeMapSubscriber.prototype.notifyComplete = function () {
            var buffer = this.buffer;
            this.active--;
            if (buffer.length > 0) {
                this._next(buffer.shift());
            }
            else if (this.active === 0 && this.hasCompleted) {
                this.destination.complete();
            }
        };
        return MergeMapSubscriber;
    }(SimpleOuterSubscriber));

    /** PURE_IMPORTS_START _mergeMap,_util_identity PURE_IMPORTS_END */
    function mergeAll(concurrent) {
        if (concurrent === void 0) {
            concurrent = Number.POSITIVE_INFINITY;
        }
        return mergeMap(identity, concurrent);
    }

    /** PURE_IMPORTS_START _mergeAll PURE_IMPORTS_END */
    function concatAll() {
        return mergeAll(1);
    }

    /** PURE_IMPORTS_START _of,_operators_concatAll PURE_IMPORTS_END */
    function concat$1() {
        var observables = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            observables[_i] = arguments[_i];
        }
        return concatAll()(of.apply(void 0, observables));
    }

    /** PURE_IMPORTS_START _Observable,_from,_empty PURE_IMPORTS_END */
    function defer(observableFactory) {
        return new Observable(function (subscriber) {
            var input;
            try {
                input = observableFactory();
            }
            catch (err) {
                subscriber.error(err);
                return undefined;
            }
            var source = input ? from$1(input) : empty();
            return source.subscribe(subscriber);
        });
    }

    /** PURE_IMPORTS_START _Observable,_util_isArray,_operators_map,_util_isObject,_from PURE_IMPORTS_END */
    function forkJoin() {
        var sources = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            sources[_i] = arguments[_i];
        }
        if (sources.length === 1) {
            var first_1 = sources[0];
            if (isArray$1(first_1)) {
                return forkJoinInternal(first_1, null);
            }
            if (isObject$1(first_1) && Object.getPrototypeOf(first_1) === Object.prototype) {
                var keys = Object.keys(first_1);
                return forkJoinInternal(keys.map(function (key) { return first_1[key]; }), keys);
            }
        }
        if (typeof sources[sources.length - 1] === 'function') {
            var resultSelector_1 = sources.pop();
            sources = (sources.length === 1 && isArray$1(sources[0])) ? sources[0] : sources;
            return forkJoinInternal(sources, null).pipe(map(function (args) { return resultSelector_1.apply(void 0, args); }));
        }
        return forkJoinInternal(sources, null);
    }
    function forkJoinInternal(sources, keys) {
        return new Observable(function (subscriber) {
            var len = sources.length;
            if (len === 0) {
                subscriber.complete();
                return;
            }
            var values = new Array(len);
            var completed = 0;
            var emitted = 0;
            var _loop_1 = function (i) {
                var source = from$1(sources[i]);
                var hasValue = false;
                subscriber.add(source.subscribe({
                    next: function (value) {
                        if (!hasValue) {
                            hasValue = true;
                            emitted++;
                        }
                        values[i] = value;
                    },
                    error: function (err) { return subscriber.error(err); },
                    complete: function () {
                        completed++;
                        if (completed === len || !hasValue) {
                            if (emitted === len) {
                                subscriber.next(keys ?
                                    keys.reduce(function (result, key, i) { return (result[key] = values[i], result); }, {}) :
                                    values);
                            }
                            subscriber.complete();
                        }
                    }
                }));
            };
            for (var i = 0; i < len; i++) {
                _loop_1(i);
            }
        });
    }

    /** PURE_IMPORTS_START _Observable,_util_isArray,_util_isFunction,_operators_map PURE_IMPORTS_END */
    function fromEvent(target, eventName, options, resultSelector) {
        if (isFunction(options)) {
            resultSelector = options;
            options = undefined;
        }
        if (resultSelector) {
            return fromEvent(target, eventName, options).pipe(map(function (args) { return isArray$1(args) ? resultSelector.apply(void 0, args) : resultSelector(args); }));
        }
        return new Observable(function (subscriber) {
            function handler(e) {
                if (arguments.length > 1) {
                    subscriber.next(Array.prototype.slice.call(arguments));
                }
                else {
                    subscriber.next(e);
                }
            }
            setupSubscription(target, eventName, handler, subscriber, options);
        });
    }
    function setupSubscription(sourceObj, eventName, handler, subscriber, options) {
        var unsubscribe;
        if (isEventTarget(sourceObj)) {
            var source_1 = sourceObj;
            sourceObj.addEventListener(eventName, handler, options);
            unsubscribe = function () { return source_1.removeEventListener(eventName, handler, options); };
        }
        else if (isJQueryStyleEventEmitter(sourceObj)) {
            var source_2 = sourceObj;
            sourceObj.on(eventName, handler);
            unsubscribe = function () { return source_2.off(eventName, handler); };
        }
        else if (isNodeStyleEventEmitter(sourceObj)) {
            var source_3 = sourceObj;
            sourceObj.addListener(eventName, handler);
            unsubscribe = function () { return source_3.removeListener(eventName, handler); };
        }
        else if (sourceObj && sourceObj.length) {
            for (var i = 0, len = sourceObj.length; i < len; i++) {
                setupSubscription(sourceObj[i], eventName, handler, subscriber, options);
            }
        }
        else {
            throw new TypeError('Invalid event target');
        }
        subscriber.add(unsubscribe);
    }
    function isNodeStyleEventEmitter(sourceObj) {
        return sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';
    }
    function isJQueryStyleEventEmitter(sourceObj) {
        return sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';
    }
    function isEventTarget(sourceObj) {
        return sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';
    }

    /** PURE_IMPORTS_START _Observable,_util_isArray,_util_isFunction,_operators_map PURE_IMPORTS_END */
    function fromEventPattern(addHandler, removeHandler, resultSelector) {
        if (resultSelector) {
            return fromEventPattern(addHandler, removeHandler).pipe(map(function (args) { return isArray$1(args) ? resultSelector.apply(void 0, args) : resultSelector(args); }));
        }
        return new Observable(function (subscriber) {
            var handler = function () {
                var e = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    e[_i] = arguments[_i];
                }
                return subscriber.next(e.length === 1 ? e[0] : e);
            };
            var retValue;
            try {
                retValue = addHandler(handler);
            }
            catch (err) {
                subscriber.error(err);
                return undefined;
            }
            if (!isFunction(removeHandler)) {
                return undefined;
            }
            return function () { return removeHandler(handler, retValue); };
        });
    }

    /** PURE_IMPORTS_START _Observable,_util_identity,_util_isScheduler PURE_IMPORTS_END */
    function generate(initialStateOrOptions, condition, iterate, resultSelectorOrObservable, scheduler) {
        var resultSelector;
        var initialState;
        if (arguments.length == 1) {
            var options = initialStateOrOptions;
            initialState = options.initialState;
            condition = options.condition;
            iterate = options.iterate;
            resultSelector = options.resultSelector || identity;
            scheduler = options.scheduler;
        }
        else if (resultSelectorOrObservable === undefined || isScheduler(resultSelectorOrObservable)) {
            initialState = initialStateOrOptions;
            resultSelector = identity;
            scheduler = resultSelectorOrObservable;
        }
        else {
            initialState = initialStateOrOptions;
            resultSelector = resultSelectorOrObservable;
        }
        return new Observable(function (subscriber) {
            var state = initialState;
            if (scheduler) {
                return scheduler.schedule(dispatch$4, 0, {
                    subscriber: subscriber,
                    iterate: iterate,
                    condition: condition,
                    resultSelector: resultSelector,
                    state: state
                });
            }
            do {
                if (condition) {
                    var conditionResult = void 0;
                    try {
                        conditionResult = condition(state);
                    }
                    catch (err) {
                        subscriber.error(err);
                        return undefined;
                    }
                    if (!conditionResult) {
                        subscriber.complete();
                        break;
                    }
                }
                var value = void 0;
                try {
                    value = resultSelector(state);
                }
                catch (err) {
                    subscriber.error(err);
                    return undefined;
                }
                subscriber.next(value);
                if (subscriber.closed) {
                    break;
                }
                try {
                    state = iterate(state);
                }
                catch (err) {
                    subscriber.error(err);
                    return undefined;
                }
            } while (true);
            return undefined;
        });
    }
    function dispatch$4(state) {
        var subscriber = state.subscriber, condition = state.condition;
        if (subscriber.closed) {
            return undefined;
        }
        if (state.needIterate) {
            try {
                state.state = state.iterate(state.state);
            }
            catch (err) {
                subscriber.error(err);
                return undefined;
            }
        }
        else {
            state.needIterate = true;
        }
        if (condition) {
            var conditionResult = void 0;
            try {
                conditionResult = condition(state.state);
            }
            catch (err) {
                subscriber.error(err);
                return undefined;
            }
            if (!conditionResult) {
                subscriber.complete();
                return undefined;
            }
            if (subscriber.closed) {
                return undefined;
            }
        }
        var value;
        try {
            value = state.resultSelector(state.state);
        }
        catch (err) {
            subscriber.error(err);
            return undefined;
        }
        if (subscriber.closed) {
            return undefined;
        }
        subscriber.next(value);
        if (subscriber.closed) {
            return undefined;
        }
        return this.schedule(state);
    }

    /** PURE_IMPORTS_START _defer,_empty PURE_IMPORTS_END */
    function iif(condition, trueResult, falseResult) {
        if (trueResult === void 0) {
            trueResult = EMPTY;
        }
        if (falseResult === void 0) {
            falseResult = EMPTY;
        }
        return defer(function () { return condition() ? trueResult : falseResult; });
    }

    /** PURE_IMPORTS_START _isArray PURE_IMPORTS_END */
    function isNumeric(val) {
        return !isArray$1(val) && (val - parseFloat(val) + 1) >= 0;
    }

    /** PURE_IMPORTS_START _Observable,_scheduler_async,_util_isNumeric PURE_IMPORTS_END */
    function interval(period, scheduler) {
        if (period === void 0) {
            period = 0;
        }
        if (scheduler === void 0) {
            scheduler = async;
        }
        if (!isNumeric(period) || period < 0) {
            period = 0;
        }
        if (!scheduler || typeof scheduler.schedule !== 'function') {
            scheduler = async;
        }
        return new Observable(function (subscriber) {
            subscriber.add(scheduler.schedule(dispatch$3, period, { subscriber: subscriber, counter: 0, period: period }));
            return subscriber;
        });
    }
    function dispatch$3(state) {
        var subscriber = state.subscriber, counter = state.counter, period = state.period;
        subscriber.next(counter);
        this.schedule({ subscriber: subscriber, counter: counter + 1, period: period }, period);
    }

    /** PURE_IMPORTS_START _Observable,_util_isScheduler,_operators_mergeAll,_fromArray PURE_IMPORTS_END */
    function merge() {
        var observables = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            observables[_i] = arguments[_i];
        }
        var concurrent = Number.POSITIVE_INFINITY;
        var scheduler = null;
        var last = observables[observables.length - 1];
        if (isScheduler(last)) {
            scheduler = observables.pop();
            if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {
                concurrent = observables.pop();
            }
        }
        else if (typeof last === 'number') {
            concurrent = observables.pop();
        }
        if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable) {
            return observables[0];
        }
        return mergeAll(concurrent)(fromArray(observables, scheduler));
    }

    /** PURE_IMPORTS_START _Observable,_util_noop PURE_IMPORTS_END */
    var NEVER = /*@__PURE__*/ new Observable(noop);
    function never() {
        return NEVER;
    }

    /** PURE_IMPORTS_START _Observable,_from,_util_isArray,_empty PURE_IMPORTS_END */
    function onErrorResumeNext() {
        var sources = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            sources[_i] = arguments[_i];
        }
        if (sources.length === 0) {
            return EMPTY;
        }
        var first = sources[0], remainder = sources.slice(1);
        if (sources.length === 1 && isArray$1(first)) {
            return onErrorResumeNext.apply(void 0, first);
        }
        return new Observable(function (subscriber) {
            var subNext = function () { return subscriber.add(onErrorResumeNext.apply(void 0, remainder).subscribe(subscriber)); };
            return from$1(first).subscribe({
                next: function (value) { subscriber.next(value); },
                error: subNext,
                complete: subNext,
            });
        });
    }

    /** PURE_IMPORTS_START _Observable,_Subscription PURE_IMPORTS_END */
    function pairs(obj, scheduler) {
        if (!scheduler) {
            return new Observable(function (subscriber) {
                var keys = Object.keys(obj);
                for (var i = 0; i < keys.length && !subscriber.closed; i++) {
                    var key = keys[i];
                    if (obj.hasOwnProperty(key)) {
                        subscriber.next([key, obj[key]]);
                    }
                }
                subscriber.complete();
            });
        }
        else {
            return new Observable(function (subscriber) {
                var keys = Object.keys(obj);
                var subscription = new Subscription();
                subscription.add(scheduler.schedule(dispatch$2, 0, { keys: keys, index: 0, subscriber: subscriber, subscription: subscription, obj: obj }));
                return subscription;
            });
        }
    }
    function dispatch$2(state) {
        var keys = state.keys, index = state.index, subscriber = state.subscriber, subscription = state.subscription, obj = state.obj;
        if (!subscriber.closed) {
            if (index < keys.length) {
                var key = keys[index];
                subscriber.next([key, obj[key]]);
                subscription.add(this.schedule({ keys: keys, index: index + 1, subscriber: subscriber, subscription: subscription, obj: obj }));
            }
            else {
                subscriber.complete();
            }
        }
    }

    /** PURE_IMPORTS_START  PURE_IMPORTS_END */
    function not(pred, thisArg) {
        function notPred() {
            return !(notPred.pred.apply(notPred.thisArg, arguments));
        }
        notPred.pred = pred;
        notPred.thisArg = thisArg;
        return notPred;
    }

    /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
    function filter(predicate, thisArg) {
        return function filterOperatorFunction(source) {
            return source.lift(new FilterOperator(predicate, thisArg));
        };
    }
    var FilterOperator = /*@__PURE__*/ (function () {
        function FilterOperator(predicate, thisArg) {
            this.predicate = predicate;
            this.thisArg = thisArg;
        }
        FilterOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));
        };
        return FilterOperator;
    }());
    var FilterSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(FilterSubscriber, _super);
        function FilterSubscriber(destination, predicate, thisArg) {
            var _this = _super.call(this, destination) || this;
            _this.predicate = predicate;
            _this.thisArg = thisArg;
            _this.count = 0;
            return _this;
        }
        FilterSubscriber.prototype._next = function (value) {
            var result;
            try {
                result = this.predicate.call(this.thisArg, value, this.count++);
            }
            catch (err) {
                this.destination.error(err);
                return;
            }
            if (result) {
                this.destination.next(value);
            }
        };
        return FilterSubscriber;
    }(Subscriber));

    /** PURE_IMPORTS_START _util_not,_util_subscribeTo,_operators_filter,_Observable PURE_IMPORTS_END */
    function partition(source, predicate, thisArg) {
        return [
            filter(predicate, thisArg)(new Observable(subscribeTo(source))),
            filter(not(predicate, thisArg))(new Observable(subscribeTo(source)))
        ];
    }

    /** PURE_IMPORTS_START tslib,_util_isArray,_fromArray,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
    function race() {
        var observables = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            observables[_i] = arguments[_i];
        }
        if (observables.length === 1) {
            if (isArray$1(observables[0])) {
                observables = observables[0];
            }
            else {
                return observables[0];
            }
        }
        return fromArray(observables, undefined).lift(new RaceOperator());
    }
    var RaceOperator = /*@__PURE__*/ (function () {
        function RaceOperator() {
        }
        RaceOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new RaceSubscriber(subscriber));
        };
        return RaceOperator;
    }());
    var RaceSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(RaceSubscriber, _super);
        function RaceSubscriber(destination) {
            var _this = _super.call(this, destination) || this;
            _this.hasFirst = false;
            _this.observables = [];
            _this.subscriptions = [];
            return _this;
        }
        RaceSubscriber.prototype._next = function (observable) {
            this.observables.push(observable);
        };
        RaceSubscriber.prototype._complete = function () {
            var observables = this.observables;
            var len = observables.length;
            if (len === 0) {
                this.destination.complete();
            }
            else {
                for (var i = 0; i < len && !this.hasFirst; i++) {
                    var observable = observables[i];
                    var subscription = subscribeToResult(this, observable, undefined, i);
                    if (this.subscriptions) {
                        this.subscriptions.push(subscription);
                    }
                    this.add(subscription);
                }
                this.observables = null;
            }
        };
        RaceSubscriber.prototype.notifyNext = function (_outerValue, innerValue, outerIndex) {
            if (!this.hasFirst) {
                this.hasFirst = true;
                for (var i = 0; i < this.subscriptions.length; i++) {
                    if (i !== outerIndex) {
                        var subscription = this.subscriptions[i];
                        subscription.unsubscribe();
                        this.remove(subscription);
                    }
                }
                this.subscriptions = null;
            }
            this.destination.next(innerValue);
        };
        return RaceSubscriber;
    }(OuterSubscriber));

    /** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */
    function range$1(start, count, scheduler) {
        if (start === void 0) {
            start = 0;
        }
        return new Observable(function (subscriber) {
            if (count === undefined) {
                count = start;
                start = 0;
            }
            var index = 0;
            var current = start;
            if (scheduler) {
                return scheduler.schedule(dispatch$1, 0, {
                    index: index, count: count, start: start, subscriber: subscriber
                });
            }
            else {
                do {
                    if (index++ >= count) {
                        subscriber.complete();
                        break;
                    }
                    subscriber.next(current++);
                    if (subscriber.closed) {
                        break;
                    }
                } while (true);
            }
            return undefined;
        });
    }
    function dispatch$1(state) {
        var start = state.start, index = state.index, count = state.count, subscriber = state.subscriber;
        if (index >= count) {
            subscriber.complete();
            return;
        }
        subscriber.next(start);
        if (subscriber.closed) {
            return;
        }
        state.index = index + 1;
        state.start = start + 1;
        this.schedule(state);
    }

    /** PURE_IMPORTS_START _Observable,_scheduler_async,_util_isNumeric,_util_isScheduler PURE_IMPORTS_END */
    function timer(dueTime, periodOrScheduler, scheduler) {
        if (dueTime === void 0) {
            dueTime = 0;
        }
        var period = -1;
        if (isNumeric(periodOrScheduler)) {
            period = Number(periodOrScheduler) < 1 && 1 || Number(periodOrScheduler);
        }
        else if (isScheduler(periodOrScheduler)) {
            scheduler = periodOrScheduler;
        }
        if (!isScheduler(scheduler)) {
            scheduler = async;
        }
        return new Observable(function (subscriber) {
            var due = isNumeric(dueTime)
                ? dueTime
                : (+dueTime - scheduler.now());
            return scheduler.schedule(dispatch, due, {
                index: 0, period: period, subscriber: subscriber
            });
        });
    }
    function dispatch(state) {
        var index = state.index, period = state.period, subscriber = state.subscriber;
        subscriber.next(index);
        if (subscriber.closed) {
            return;
        }
        else if (period === -1) {
            return subscriber.complete();
        }
        state.index = index + 1;
        this.schedule(state, period);
    }

    /** PURE_IMPORTS_START _Observable,_from,_empty PURE_IMPORTS_END */
    function using(resourceFactory, observableFactory) {
        return new Observable(function (subscriber) {
            var resource;
            try {
                resource = resourceFactory();
            }
            catch (err) {
                subscriber.error(err);
                return undefined;
            }
            var result;
            try {
                result = observableFactory(resource);
            }
            catch (err) {
                subscriber.error(err);
                return undefined;
            }
            var source = result ? from$1(result) : EMPTY;
            var subscription = source.subscribe(subscriber);
            return function () {
                subscription.unsubscribe();
                if (resource) {
                    resource.unsubscribe();
                }
            };
        });
    }

    /** PURE_IMPORTS_START tslib,_fromArray,_util_isArray,_Subscriber,_.._internal_symbol_iterator,_innerSubscribe PURE_IMPORTS_END */
    function zip() {
        var observables = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            observables[_i] = arguments[_i];
        }
        var resultSelector = observables[observables.length - 1];
        if (typeof resultSelector === 'function') {
            observables.pop();
        }
        return fromArray(observables, undefined).lift(new ZipOperator(resultSelector));
    }
    var ZipOperator = /*@__PURE__*/ (function () {
        function ZipOperator(resultSelector) {
            this.resultSelector = resultSelector;
        }
        ZipOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new ZipSubscriber(subscriber, this.resultSelector));
        };
        return ZipOperator;
    }());
    var ZipSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(ZipSubscriber, _super);
        function ZipSubscriber(destination, resultSelector, values) {
            var _this = _super.call(this, destination) || this;
            _this.resultSelector = resultSelector;
            _this.iterators = [];
            _this.active = 0;
            _this.resultSelector = (typeof resultSelector === 'function') ? resultSelector : undefined;
            return _this;
        }
        ZipSubscriber.prototype._next = function (value) {
            var iterators = this.iterators;
            if (isArray$1(value)) {
                iterators.push(new StaticArrayIterator(value));
            }
            else if (typeof value[iterator] === 'function') {
                iterators.push(new StaticIterator(value[iterator]()));
            }
            else {
                iterators.push(new ZipBufferIterator(this.destination, this, value));
            }
        };
        ZipSubscriber.prototype._complete = function () {
            var iterators = this.iterators;
            var len = iterators.length;
            this.unsubscribe();
            if (len === 0) {
                this.destination.complete();
                return;
            }
            this.active = len;
            for (var i = 0; i < len; i++) {
                var iterator = iterators[i];
                if (iterator.stillUnsubscribed) {
                    var destination = this.destination;
                    destination.add(iterator.subscribe());
                }
                else {
                    this.active--;
                }
            }
        };
        ZipSubscriber.prototype.notifyInactive = function () {
            this.active--;
            if (this.active === 0) {
                this.destination.complete();
            }
        };
        ZipSubscriber.prototype.checkIterators = function () {
            var iterators = this.iterators;
            var len = iterators.length;
            var destination = this.destination;
            for (var i = 0; i < len; i++) {
                var iterator = iterators[i];
                if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {
                    return;
                }
            }
            var shouldComplete = false;
            var args = [];
            for (var i = 0; i < len; i++) {
                var iterator = iterators[i];
                var result = iterator.next();
                if (iterator.hasCompleted()) {
                    shouldComplete = true;
                }
                if (result.done) {
                    destination.complete();
                    return;
                }
                args.push(result.value);
            }
            if (this.resultSelector) {
                this._tryresultSelector(args);
            }
            else {
                destination.next(args);
            }
            if (shouldComplete) {
                destination.complete();
            }
        };
        ZipSubscriber.prototype._tryresultSelector = function (args) {
            var result;
            try {
                result = this.resultSelector.apply(this, args);
            }
            catch (err) {
                this.destination.error(err);
                return;
            }
            this.destination.next(result);
        };
        return ZipSubscriber;
    }(Subscriber));
    var StaticIterator = /*@__PURE__*/ (function () {
        function StaticIterator(iterator) {
            this.iterator = iterator;
            this.nextResult = iterator.next();
        }
        StaticIterator.prototype.hasValue = function () {
            return true;
        };
        StaticIterator.prototype.next = function () {
            var result = this.nextResult;
            this.nextResult = this.iterator.next();
            return result;
        };
        StaticIterator.prototype.hasCompleted = function () {
            var nextResult = this.nextResult;
            return Boolean(nextResult && nextResult.done);
        };
        return StaticIterator;
    }());
    var StaticArrayIterator = /*@__PURE__*/ (function () {
        function StaticArrayIterator(array) {
            this.array = array;
            this.index = 0;
            this.length = 0;
            this.length = array.length;
        }
        StaticArrayIterator.prototype[iterator] = function () {
            return this;
        };
        StaticArrayIterator.prototype.next = function (value) {
            var i = this.index++;
            var array = this.array;
            return i < this.length ? { value: array[i], done: false } : { value: null, done: true };
        };
        StaticArrayIterator.prototype.hasValue = function () {
            return this.array.length > this.index;
        };
        StaticArrayIterator.prototype.hasCompleted = function () {
            return this.array.length === this.index;
        };
        return StaticArrayIterator;
    }());
    var ZipBufferIterator = /*@__PURE__*/ (function (_super) {
        __extends(ZipBufferIterator, _super);
        function ZipBufferIterator(destination, parent, observable) {
            var _this = _super.call(this, destination) || this;
            _this.parent = parent;
            _this.observable = observable;
            _this.stillUnsubscribed = true;
            _this.buffer = [];
            _this.isComplete = false;
            return _this;
        }
        ZipBufferIterator.prototype[iterator] = function () {
            return this;
        };
        ZipBufferIterator.prototype.next = function () {
            var buffer = this.buffer;
            if (buffer.length === 0 && this.isComplete) {
                return { value: null, done: true };
            }
            else {
                return { value: buffer.shift(), done: false };
            }
        };
        ZipBufferIterator.prototype.hasValue = function () {
            return this.buffer.length > 0;
        };
        ZipBufferIterator.prototype.hasCompleted = function () {
            return this.buffer.length === 0 && this.isComplete;
        };
        ZipBufferIterator.prototype.notifyComplete = function () {
            if (this.buffer.length > 0) {
                this.isComplete = true;
                this.parent.notifyInactive();
            }
            else {
                this.destination.complete();
            }
        };
        ZipBufferIterator.prototype.notifyNext = function (innerValue) {
            this.buffer.push(innerValue);
            this.parent.checkIterators();
        };
        ZipBufferIterator.prototype.subscribe = function () {
            return innerSubscribe(this.observable, new SimpleInnerSubscriber(this));
        };
        return ZipBufferIterator;
    }(SimpleOuterSubscriber));

    /** PURE_IMPORTS_START  PURE_IMPORTS_END */

    var _esm5 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        Observable: Observable,
        ConnectableObservable: ConnectableObservable,
        GroupedObservable: GroupedObservable,
        observable: observable,
        Subject: Subject,
        BehaviorSubject: BehaviorSubject,
        ReplaySubject: ReplaySubject,
        AsyncSubject: AsyncSubject,
        asap: asap,
        asapScheduler: asapScheduler,
        async: async,
        asyncScheduler: asyncScheduler,
        queue: queue,
        queueScheduler: queueScheduler,
        animationFrame: animationFrame,
        animationFrameScheduler: animationFrameScheduler,
        VirtualTimeScheduler: VirtualTimeScheduler,
        VirtualAction: VirtualAction,
        Scheduler: Scheduler,
        Subscription: Subscription,
        Subscriber: Subscriber,
        Notification: Notification,
        get NotificationKind () { return NotificationKind; },
        pipe: pipe,
        noop: noop,
        identity: identity,
        isObservable: isObservable,
        ArgumentOutOfRangeError: ArgumentOutOfRangeError,
        EmptyError: EmptyError,
        ObjectUnsubscribedError: ObjectUnsubscribedError,
        UnsubscriptionError: UnsubscriptionError,
        TimeoutError: TimeoutError,
        bindCallback: bindCallback,
        bindNodeCallback: bindNodeCallback,
        combineLatest: combineLatest,
        concat: concat$1,
        defer: defer,
        empty: empty,
        forkJoin: forkJoin,
        from: from$1,
        fromEvent: fromEvent,
        fromEventPattern: fromEventPattern,
        generate: generate,
        iif: iif,
        interval: interval,
        merge: merge,
        never: never,
        of: of,
        onErrorResumeNext: onErrorResumeNext,
        pairs: pairs,
        partition: partition,
        race: race,
        range: range$1,
        throwError: throwError,
        timer: timer,
        using: using,
        zip: zip,
        scheduled: scheduled,
        EMPTY: EMPTY,
        NEVER: NEVER,
        config: config
    });

    var require$$10 = /*@__PURE__*/getAugmentedNamespace(_esm5);

    var _interopRequireDefault$w = interopRequireDefault.exports;

    Object.defineProperty(aborting, "__esModule", {
      value: true
    });
    aborting.abortBreakPoint = abortBreakPoint;
    aborting.checkAbortSignal = checkAbortSignal;
    aborting.isAbortException = isAbortException$1;
    aborting.makeAbortError = makeAbortError;
    aborting.observeAbortSignal = observeAbortSignal;

    var _regenerator$6 = _interopRequireDefault$w(regenerator);

    var _asyncToGenerator2$6 = _interopRequireDefault$w(asyncToGenerator.exports);

    var _classCallCheck2$5 = _interopRequireDefault$w(classCallCheck.exports);

    var _assertThisInitialized2 = _interopRequireDefault$w(assertThisInitialized.exports);

    var _inherits2$1 = _interopRequireDefault$w(inherits.exports);

    var _possibleConstructorReturn2$1 = _interopRequireDefault$w(possibleConstructorReturn.exports);

    var _getPrototypeOf2$1 = _interopRequireDefault$w(getPrototypeOf.exports);

    var _wrapNativeSuper2 = _interopRequireDefault$w(wrapNativeSuper.exports);

    var _defineProperty2$9 = _interopRequireDefault$w(defineProperty$1.exports);

    var _rxjs = require$$10;

    function _createSuper$2(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$2(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2$1.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2$1.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2$1.default)(this, result); }; }

    function _isNativeReflectConstruct$2() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

    var AbortError = /*#__PURE__*/function (_Error) {
      (0, _inherits2$1.default)(AbortError, _Error);

      var _super = _createSuper$2(AbortError);

      function AbortError() {
        var _this;

        (0, _classCallCheck2$5.default)(this, AbortError);

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this = _super.call.apply(_super, [this].concat(args));
        (0, _defineProperty2$9.default)((0, _assertThisInitialized2.default)(_this), "code", void 0);
        return _this;
      }

      return AbortError;
    }( /*#__PURE__*/(0, _wrapNativeSuper2.default)(Error));
    /**
     * properly check if the given AbortSignal is aborted.
     * per the standard, if the signal reads as aborted,
     * this function throws either a DOMException AbortError, or a regular error
     * with a `code` attribute set to `ERR_ABORTED`.
     *
     * for convenience, passing `undefined` is a no-op
     *
     * @param signal -
     * @returns nothing
     */


    function checkAbortSignal(signal) {
      if (!signal) {
        return;
      }

      if (!(signal instanceof AbortSignal)) {
        throw new TypeError('must pass an AbortSignal');
      }

      if (signal.aborted) {
        throw makeAbortError();
      }
    }

    function timeout(ms) {
      return new Promise(function (resolve) {
        return setTimeout(resolve, ms);
      });
    }
    /**
     * Skips to the next tick, then runs `checkAbortSignal`.
     * Await this to inside an otherwise synchronous loop to
     * provide a place to break when an abort signal is received.
     */


    function abortBreakPoint(_x) {
      return _abortBreakPoint.apply(this, arguments);
    }

    function _abortBreakPoint() {
      _abortBreakPoint = (0, _asyncToGenerator2$6.default)( /*#__PURE__*/_regenerator$6.default.mark(function _callee(signal) {
        return _regenerator$6.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return timeout(1);

              case 2:
                checkAbortSignal(signal);

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));
      return _abortBreakPoint.apply(this, arguments);
    }

    function makeAbortError() {
      if (typeof DOMException !== 'undefined') {
        return new DOMException('aborted', 'AbortError');
      }

      var e = new AbortError('aborted');
      e.code = 'ERR_ABORTED';
      return e;
    }

    function observeAbortSignal(signal) {
      if (!signal) {
        return _rxjs.Observable.create();
      }

      return (0, _rxjs.fromEvent)(signal, 'abort');
    }
    /**
     * check if the given exception was caused by an operation being intentionally aborted
     * @param exception -
     */


    function isAbortException$1(exception) {
      return exception instanceof Error && ( // DOMException
      exception.name === 'AbortError' || // standard-ish non-DOM abort exception
      exception.code === 'ERR_ABORTED' || // message contains aborted for bubbling through RPC
      // things we have seen that we want to catch here
      // Error: aborted
      // AbortError: aborted
      // AbortError: The user aborted a request.
      !!exception.message.match(/\b(aborted|AbortError)\b/i));
    }

    var when$1 = {};

    var _interopRequireDefault$v = interopRequireDefault.exports;

    Object.defineProperty(when$1, "__esModule", {
      value: true
    });
    when$1.when = when;
    when$1.whenPresent = whenPresent;

    var _regenerator$5 = _interopRequireDefault$v(regenerator);

    var _asyncToGenerator2$5 = _interopRequireDefault$v(asyncToGenerator.exports);

    var _mobx = require$$8;

    var _aborting = aborting;

    /**
     * Wrapper for mobx `when` that adds timeout and aborting support.
     */
    function when(getter) {
      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          timeout = _ref.timeout,
          signal = _ref.signal,
          name = _ref.name;

      return new Promise(function (resolve, reject) {
        var finished = false;
        var whenPromise = (0, _mobx.when)(getter); // set up timeout

        var timeoutId;

        var finishTimeout = function finishTimeout() {};

        if (timeout) {
          timeoutId = setTimeout(function () {
            if (!finished) {
              finished = true;
              whenPromise.cancel();
              reject(new Error("timed out waiting for ".concat(name || 'whenPresent')));
            }
          }, timeout);

          finishTimeout = function finishTimeout() {
            return timeoutId && clearTimeout(timeoutId);
          };
        } // set up aborting


        if (signal) {
          signal.addEventListener('abort', function () {
            if (!finished) {
              finished = true; // mobx when supports a cancel method

              whenPromise.cancel();
              finishTimeout();
              reject((0, _aborting.makeAbortError)());
            }
          });
        }

        whenPromise.then(function () {
          if (!finished) {
            finished = true;
            finishTimeout();
            resolve(true);
          }
        }).catch(function (err) {
          if (!finished) {
            finished = true;
            finishTimeout();
            reject(err);
          }
        });
      });
    }
    /**
     * Wrapper for mobx `when` that makes a promise for the return value
     * of the given function at the point in time when it becomes not
     * undefined and not null.
     */


    function whenPresent(_x) {
      return _whenPresent.apply(this, arguments);
    }

    function _whenPresent() {
      _whenPresent = (0, _asyncToGenerator2$5.default)( /*#__PURE__*/_regenerator$5.default.mark(function _callee(getter) {
        var opts,
            _args = arguments;
        return _regenerator$5.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                opts = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};
                _context.next = 3;
                return when(function () {
                  var val = getter();
                  return val !== undefined && val !== null;
                }, opts);

              case 3:
                return _context.abrupt("return", getter());

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));
      return _whenPresent.apply(this, arguments);
    }

    var range = {};

    Object.defineProperty(range, "__esModule", {
      value: true
    });
    range.doesIntersect2 = doesIntersect2;
    range.intersection2 = intersection2;
    range.isContainedWithin = isContainedWithin;

    /**
     * fast low-level intersection of 2 coordinate ranges. assumes interbase coordinates.
     *
     * assumes `left <= right` for both ranges
     *
     * @returns array of [left, right], or [] if the ranges do not intersect. the choice of [] is because it allows destructuring array assignment without check for undefined return
     */
    function intersection2(left1, right1, left2, right2) {
      // this code is verbose because "if" statements are faster than Math.min and Math.max
      if (right1 > left2 && left1 < right2 && right2 - left2 && right1 - left1) {
        if (left1 > left2) {
          if (right1 < right2) {
            // 1     |-------|
            //     |------------|
            return [left1, right1];
          } // 2         |----|
          //      |------|


          return [left1, right2];
        }

        if (right1 < right2) {
          // 3  |-----|
          //       |------|
          return [left2, right1];
        } // 4     |------------|
        //         |-------|


        return [left2, right2];
      }

      return [];
    }
    /**
     * Return whether 2 interbase coordinate ranges intersect.
     *
     * @param left1 -
     * @param right1 -
     * @param left2 -
     * @param right2 -
     *
     * @returns true if the two ranges intersect
     */


    function doesIntersect2(left1, right1, left2, right2) {
      return right1 > left2 && left1 < right2;
    }
    /**
     * Return whether the first region is completely contained within the second region
     *
     * @param left1 - candidate inner region left
     * @param right1 - candidate inner region right
     * @param left2 - candidate outer region left
     * @param right2 - candidate outer region right
     */


    function isContainedWithin(left1, right1, left2, right2) {
      return left2 <= left1 && right2 >= right1;
    }

    var offscreenCanvasPonyfill = {};

    function SvgPathGenerator(path) {
        if (!(this instanceof SvgPathGenerator)) {
            return new SvgPathGenerator(path);
        }

        this.currentPath = (path || '') + ' ';
        this.isRelative = false;
    }


    var svgPathGenerator$1 = SvgPathGenerator;



    SvgPathGenerator.prototype.toString = function() {
        return this.end();
    };


    SvgPathGenerator.prototype.moveTo = function() {
        this._appendData('M', arguments);
        return this;
    };


    SvgPathGenerator.prototype.close = SvgPathGenerator.prototype.closePath = function() {
        this._appendData('Z', []);
        return this;
    };

    SvgPathGenerator.prototype.lineTo = function() {
        this._appendData('L', arguments);
        return this;
    };

    SvgPathGenerator.prototype.horizontalLineTo = function(x) {
        this._appendData('H', [x]);
        return this;
    };

    SvgPathGenerator.prototype.verticalLineTo = function(y) {
        this._appendData('V', [y]);
        return this;
    };

    SvgPathGenerator.prototype.curveTo = function() {
        this._appendData('C', arguments);
        return this;
    };

    SvgPathGenerator.prototype.smoothCurveTo = function() {
        this._appendData('S', arguments);
        return this;
    };

    SvgPathGenerator.prototype.bezierCurveTo = function() {
        this._appendData('Q', arguments);
        return this;
    };

    SvgPathGenerator.prototype.smoothBezierCurveTo = function() {
        this._appendData('T', arguments);
        return this;
    };

    SvgPathGenerator.prototype.ellipticalArc = function() {
        this._appendData('A', arguments);
        return this;
    };


    SvgPathGenerator.prototype.relative = function() {
        this.isRelative = true;
        return this;
    };

    SvgPathGenerator.prototype.end = function() {
        return this.currentPath.trim();
    };


    SvgPathGenerator.prototype._appendData = function(symbol, args) {

        args = Array.prototype.slice.call(args);

        if(this.isRelative) {
            symbol = symbol.toLowerCase();
            this.isRelative = false;
        }

        this.currentPath += symbol + ' ' + args.join(' ') + ' ';
    };

    var svgPathGenerator = svgPathGenerator$1;

    var colorString$1 = {exports: {}};

    var colorName$1 = {
    	"aliceblue": [240, 248, 255],
    	"antiquewhite": [250, 235, 215],
    	"aqua": [0, 255, 255],
    	"aquamarine": [127, 255, 212],
    	"azure": [240, 255, 255],
    	"beige": [245, 245, 220],
    	"bisque": [255, 228, 196],
    	"black": [0, 0, 0],
    	"blanchedalmond": [255, 235, 205],
    	"blue": [0, 0, 255],
    	"blueviolet": [138, 43, 226],
    	"brown": [165, 42, 42],
    	"burlywood": [222, 184, 135],
    	"cadetblue": [95, 158, 160],
    	"chartreuse": [127, 255, 0],
    	"chocolate": [210, 105, 30],
    	"coral": [255, 127, 80],
    	"cornflowerblue": [100, 149, 237],
    	"cornsilk": [255, 248, 220],
    	"crimson": [220, 20, 60],
    	"cyan": [0, 255, 255],
    	"darkblue": [0, 0, 139],
    	"darkcyan": [0, 139, 139],
    	"darkgoldenrod": [184, 134, 11],
    	"darkgray": [169, 169, 169],
    	"darkgreen": [0, 100, 0],
    	"darkgrey": [169, 169, 169],
    	"darkkhaki": [189, 183, 107],
    	"darkmagenta": [139, 0, 139],
    	"darkolivegreen": [85, 107, 47],
    	"darkorange": [255, 140, 0],
    	"darkorchid": [153, 50, 204],
    	"darkred": [139, 0, 0],
    	"darksalmon": [233, 150, 122],
    	"darkseagreen": [143, 188, 143],
    	"darkslateblue": [72, 61, 139],
    	"darkslategray": [47, 79, 79],
    	"darkslategrey": [47, 79, 79],
    	"darkturquoise": [0, 206, 209],
    	"darkviolet": [148, 0, 211],
    	"deeppink": [255, 20, 147],
    	"deepskyblue": [0, 191, 255],
    	"dimgray": [105, 105, 105],
    	"dimgrey": [105, 105, 105],
    	"dodgerblue": [30, 144, 255],
    	"firebrick": [178, 34, 34],
    	"floralwhite": [255, 250, 240],
    	"forestgreen": [34, 139, 34],
    	"fuchsia": [255, 0, 255],
    	"gainsboro": [220, 220, 220],
    	"ghostwhite": [248, 248, 255],
    	"gold": [255, 215, 0],
    	"goldenrod": [218, 165, 32],
    	"gray": [128, 128, 128],
    	"green": [0, 128, 0],
    	"greenyellow": [173, 255, 47],
    	"grey": [128, 128, 128],
    	"honeydew": [240, 255, 240],
    	"hotpink": [255, 105, 180],
    	"indianred": [205, 92, 92],
    	"indigo": [75, 0, 130],
    	"ivory": [255, 255, 240],
    	"khaki": [240, 230, 140],
    	"lavender": [230, 230, 250],
    	"lavenderblush": [255, 240, 245],
    	"lawngreen": [124, 252, 0],
    	"lemonchiffon": [255, 250, 205],
    	"lightblue": [173, 216, 230],
    	"lightcoral": [240, 128, 128],
    	"lightcyan": [224, 255, 255],
    	"lightgoldenrodyellow": [250, 250, 210],
    	"lightgray": [211, 211, 211],
    	"lightgreen": [144, 238, 144],
    	"lightgrey": [211, 211, 211],
    	"lightpink": [255, 182, 193],
    	"lightsalmon": [255, 160, 122],
    	"lightseagreen": [32, 178, 170],
    	"lightskyblue": [135, 206, 250],
    	"lightslategray": [119, 136, 153],
    	"lightslategrey": [119, 136, 153],
    	"lightsteelblue": [176, 196, 222],
    	"lightyellow": [255, 255, 224],
    	"lime": [0, 255, 0],
    	"limegreen": [50, 205, 50],
    	"linen": [250, 240, 230],
    	"magenta": [255, 0, 255],
    	"maroon": [128, 0, 0],
    	"mediumaquamarine": [102, 205, 170],
    	"mediumblue": [0, 0, 205],
    	"mediumorchid": [186, 85, 211],
    	"mediumpurple": [147, 112, 219],
    	"mediumseagreen": [60, 179, 113],
    	"mediumslateblue": [123, 104, 238],
    	"mediumspringgreen": [0, 250, 154],
    	"mediumturquoise": [72, 209, 204],
    	"mediumvioletred": [199, 21, 133],
    	"midnightblue": [25, 25, 112],
    	"mintcream": [245, 255, 250],
    	"mistyrose": [255, 228, 225],
    	"moccasin": [255, 228, 181],
    	"navajowhite": [255, 222, 173],
    	"navy": [0, 0, 128],
    	"oldlace": [253, 245, 230],
    	"olive": [128, 128, 0],
    	"olivedrab": [107, 142, 35],
    	"orange": [255, 165, 0],
    	"orangered": [255, 69, 0],
    	"orchid": [218, 112, 214],
    	"palegoldenrod": [238, 232, 170],
    	"palegreen": [152, 251, 152],
    	"paleturquoise": [175, 238, 238],
    	"palevioletred": [219, 112, 147],
    	"papayawhip": [255, 239, 213],
    	"peachpuff": [255, 218, 185],
    	"peru": [205, 133, 63],
    	"pink": [255, 192, 203],
    	"plum": [221, 160, 221],
    	"powderblue": [176, 224, 230],
    	"purple": [128, 0, 128],
    	"rebeccapurple": [102, 51, 153],
    	"red": [255, 0, 0],
    	"rosybrown": [188, 143, 143],
    	"royalblue": [65, 105, 225],
    	"saddlebrown": [139, 69, 19],
    	"salmon": [250, 128, 114],
    	"sandybrown": [244, 164, 96],
    	"seagreen": [46, 139, 87],
    	"seashell": [255, 245, 238],
    	"sienna": [160, 82, 45],
    	"silver": [192, 192, 192],
    	"skyblue": [135, 206, 235],
    	"slateblue": [106, 90, 205],
    	"slategray": [112, 128, 144],
    	"slategrey": [112, 128, 144],
    	"snow": [255, 250, 250],
    	"springgreen": [0, 255, 127],
    	"steelblue": [70, 130, 180],
    	"tan": [210, 180, 140],
    	"teal": [0, 128, 128],
    	"thistle": [216, 191, 216],
    	"tomato": [255, 99, 71],
    	"turquoise": [64, 224, 208],
    	"violet": [238, 130, 238],
    	"wheat": [245, 222, 179],
    	"white": [255, 255, 255],
    	"whitesmoke": [245, 245, 245],
    	"yellow": [255, 255, 0],
    	"yellowgreen": [154, 205, 50]
    };

    var simpleSwizzle = {exports: {}};

    var isArrayish$1 = function isArrayish(obj) {
    	if (!obj || typeof obj === 'string') {
    		return false;
    	}

    	return obj instanceof Array || Array.isArray(obj) ||
    		(obj.length >= 0 && (obj.splice instanceof Function ||
    			(Object.getOwnPropertyDescriptor(obj, (obj.length - 1)) && obj.constructor.name !== 'String')));
    };

    var isArrayish = isArrayish$1;

    var concat = Array.prototype.concat;
    var slice = Array.prototype.slice;

    var swizzle$1 = simpleSwizzle.exports = function swizzle(args) {
    	var results = [];

    	for (var i = 0, len = args.length; i < len; i++) {
    		var arg = args[i];

    		if (isArrayish(arg)) {
    			// http://jsperf.com/javascript-array-concat-vs-push/98
    			results = concat.call(results, slice.call(arg));
    		} else {
    			results.push(arg);
    		}
    	}

    	return results;
    };

    swizzle$1.wrap = function (fn) {
    	return function () {
    		return fn(swizzle$1(arguments));
    	};
    };

    /* MIT license */

    var colorNames = colorName$1;
    var swizzle = simpleSwizzle.exports;
    var hasOwnProperty = Object.hasOwnProperty;

    var reverseNames = {};

    // create a list of reverse color names
    for (var name in colorNames) {
    	if (hasOwnProperty.call(colorNames, name)) {
    		reverseNames[colorNames[name]] = name;
    	}
    }

    var cs$1 = colorString$1.exports = {
    	to: {},
    	get: {}
    };

    cs$1.get = function (string) {
    	var prefix = string.substring(0, 3).toLowerCase();
    	var val;
    	var model;
    	switch (prefix) {
    		case 'hsl':
    			val = cs$1.get.hsl(string);
    			model = 'hsl';
    			break;
    		case 'hwb':
    			val = cs$1.get.hwb(string);
    			model = 'hwb';
    			break;
    		default:
    			val = cs$1.get.rgb(string);
    			model = 'rgb';
    			break;
    	}

    	if (!val) {
    		return null;
    	}

    	return {model: model, value: val};
    };

    cs$1.get.rgb = function (string) {
    	if (!string) {
    		return null;
    	}

    	var abbr = /^#([a-f0-9]{3,4})$/i;
    	var hex = /^#([a-f0-9]{6})([a-f0-9]{2})?$/i;
    	var rgba = /^rgba?\(\s*([+-]?\d+)(?=[\s,])\s*(?:,\s*)?([+-]?\d+)(?=[\s,])\s*(?:,\s*)?([+-]?\d+)\s*(?:[,|\/]\s*([+-]?[\d\.]+)(%?)\s*)?\)$/;
    	var per = /^rgba?\(\s*([+-]?[\d\.]+)\%\s*,?\s*([+-]?[\d\.]+)\%\s*,?\s*([+-]?[\d\.]+)\%\s*(?:[,|\/]\s*([+-]?[\d\.]+)(%?)\s*)?\)$/;
    	var keyword = /^(\w+)$/;

    	var rgb = [0, 0, 0, 1];
    	var match;
    	var i;
    	var hexAlpha;

    	if (match = string.match(hex)) {
    		hexAlpha = match[2];
    		match = match[1];

    		for (i = 0; i < 3; i++) {
    			// https://jsperf.com/slice-vs-substr-vs-substring-methods-long-string/19
    			var i2 = i * 2;
    			rgb[i] = parseInt(match.slice(i2, i2 + 2), 16);
    		}

    		if (hexAlpha) {
    			rgb[3] = parseInt(hexAlpha, 16) / 255;
    		}
    	} else if (match = string.match(abbr)) {
    		match = match[1];
    		hexAlpha = match[3];

    		for (i = 0; i < 3; i++) {
    			rgb[i] = parseInt(match[i] + match[i], 16);
    		}

    		if (hexAlpha) {
    			rgb[3] = parseInt(hexAlpha + hexAlpha, 16) / 255;
    		}
    	} else if (match = string.match(rgba)) {
    		for (i = 0; i < 3; i++) {
    			rgb[i] = parseInt(match[i + 1], 0);
    		}

    		if (match[4]) {
    			if (match[5]) {
    				rgb[3] = parseFloat(match[4]) * 0.01;
    			} else {
    				rgb[3] = parseFloat(match[4]);
    			}
    		}
    	} else if (match = string.match(per)) {
    		for (i = 0; i < 3; i++) {
    			rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);
    		}

    		if (match[4]) {
    			if (match[5]) {
    				rgb[3] = parseFloat(match[4]) * 0.01;
    			} else {
    				rgb[3] = parseFloat(match[4]);
    			}
    		}
    	} else if (match = string.match(keyword)) {
    		if (match[1] === 'transparent') {
    			return [0, 0, 0, 0];
    		}

    		if (!hasOwnProperty.call(colorNames, match[1])) {
    			return null;
    		}

    		rgb = colorNames[match[1]];
    		rgb[3] = 1;

    		return rgb;
    	} else {
    		return null;
    	}

    	for (i = 0; i < 3; i++) {
    		rgb[i] = clamp$3(rgb[i], 0, 255);
    	}
    	rgb[3] = clamp$3(rgb[3], 0, 1);

    	return rgb;
    };

    cs$1.get.hsl = function (string) {
    	if (!string) {
    		return null;
    	}

    	var hsl = /^hsla?\(\s*([+-]?(?:\d{0,3}\.)?\d+)(?:deg)?\s*,?\s*([+-]?[\d\.]+)%\s*,?\s*([+-]?[\d\.]+)%\s*(?:[,|\/]\s*([+-]?(?=\.\d|\d)(?:0|[1-9]\d*)?(?:\.\d*)?(?:[eE][+-]?\d+)?)\s*)?\)$/;
    	var match = string.match(hsl);

    	if (match) {
    		var alpha = parseFloat(match[4]);
    		var h = ((parseFloat(match[1]) % 360) + 360) % 360;
    		var s = clamp$3(parseFloat(match[2]), 0, 100);
    		var l = clamp$3(parseFloat(match[3]), 0, 100);
    		var a = clamp$3(isNaN(alpha) ? 1 : alpha, 0, 1);

    		return [h, s, l, a];
    	}

    	return null;
    };

    cs$1.get.hwb = function (string) {
    	if (!string) {
    		return null;
    	}

    	var hwb = /^hwb\(\s*([+-]?\d{0,3}(?:\.\d+)?)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?(?=\.\d|\d)(?:0|[1-9]\d*)?(?:\.\d*)?(?:[eE][+-]?\d+)?)\s*)?\)$/;
    	var match = string.match(hwb);

    	if (match) {
    		var alpha = parseFloat(match[4]);
    		var h = ((parseFloat(match[1]) % 360) + 360) % 360;
    		var w = clamp$3(parseFloat(match[2]), 0, 100);
    		var b = clamp$3(parseFloat(match[3]), 0, 100);
    		var a = clamp$3(isNaN(alpha) ? 1 : alpha, 0, 1);
    		return [h, w, b, a];
    	}

    	return null;
    };

    cs$1.to.hex = function () {
    	var rgba = swizzle(arguments);

    	return (
    		'#' +
    		hexDouble(rgba[0]) +
    		hexDouble(rgba[1]) +
    		hexDouble(rgba[2]) +
    		(rgba[3] < 1
    			? (hexDouble(Math.round(rgba[3] * 255)))
    			: '')
    	);
    };

    cs$1.to.rgb = function () {
    	var rgba = swizzle(arguments);

    	return rgba.length < 4 || rgba[3] === 1
    		? 'rgb(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ')'
    		: 'rgba(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ', ' + rgba[3] + ')';
    };

    cs$1.to.rgb.percent = function () {
    	var rgba = swizzle(arguments);

    	var r = Math.round(rgba[0] / 255 * 100);
    	var g = Math.round(rgba[1] / 255 * 100);
    	var b = Math.round(rgba[2] / 255 * 100);

    	return rgba.length < 4 || rgba[3] === 1
    		? 'rgb(' + r + '%, ' + g + '%, ' + b + '%)'
    		: 'rgba(' + r + '%, ' + g + '%, ' + b + '%, ' + rgba[3] + ')';
    };

    cs$1.to.hsl = function () {
    	var hsla = swizzle(arguments);
    	return hsla.length < 4 || hsla[3] === 1
    		? 'hsl(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%)'
    		: 'hsla(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%, ' + hsla[3] + ')';
    };

    // hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax
    // (hwb have alpha optional & 1 is default value)
    cs$1.to.hwb = function () {
    	var hwba = swizzle(arguments);

    	var a = '';
    	if (hwba.length >= 4 && hwba[3] !== 1) {
    		a = ', ' + hwba[3];
    	}

    	return 'hwb(' + hwba[0] + ', ' + hwba[1] + '%, ' + hwba[2] + '%' + a + ')';
    };

    cs$1.to.keyword = function (rgb) {
    	return reverseNames[rgb.slice(0, 3)];
    };

    // helpers
    function clamp$3(num, min, max) {
    	return Math.min(Math.max(min, num), max);
    }

    function hexDouble(num) {
    	var str = Math.round(num).toString(16).toUpperCase();
    	return (str.length < 2) ? '0' + str : str;
    }

    var conversions$2 = {exports: {}};

    var colorName = {
    	"aliceblue": [240, 248, 255],
    	"antiquewhite": [250, 235, 215],
    	"aqua": [0, 255, 255],
    	"aquamarine": [127, 255, 212],
    	"azure": [240, 255, 255],
    	"beige": [245, 245, 220],
    	"bisque": [255, 228, 196],
    	"black": [0, 0, 0],
    	"blanchedalmond": [255, 235, 205],
    	"blue": [0, 0, 255],
    	"blueviolet": [138, 43, 226],
    	"brown": [165, 42, 42],
    	"burlywood": [222, 184, 135],
    	"cadetblue": [95, 158, 160],
    	"chartreuse": [127, 255, 0],
    	"chocolate": [210, 105, 30],
    	"coral": [255, 127, 80],
    	"cornflowerblue": [100, 149, 237],
    	"cornsilk": [255, 248, 220],
    	"crimson": [220, 20, 60],
    	"cyan": [0, 255, 255],
    	"darkblue": [0, 0, 139],
    	"darkcyan": [0, 139, 139],
    	"darkgoldenrod": [184, 134, 11],
    	"darkgray": [169, 169, 169],
    	"darkgreen": [0, 100, 0],
    	"darkgrey": [169, 169, 169],
    	"darkkhaki": [189, 183, 107],
    	"darkmagenta": [139, 0, 139],
    	"darkolivegreen": [85, 107, 47],
    	"darkorange": [255, 140, 0],
    	"darkorchid": [153, 50, 204],
    	"darkred": [139, 0, 0],
    	"darksalmon": [233, 150, 122],
    	"darkseagreen": [143, 188, 143],
    	"darkslateblue": [72, 61, 139],
    	"darkslategray": [47, 79, 79],
    	"darkslategrey": [47, 79, 79],
    	"darkturquoise": [0, 206, 209],
    	"darkviolet": [148, 0, 211],
    	"deeppink": [255, 20, 147],
    	"deepskyblue": [0, 191, 255],
    	"dimgray": [105, 105, 105],
    	"dimgrey": [105, 105, 105],
    	"dodgerblue": [30, 144, 255],
    	"firebrick": [178, 34, 34],
    	"floralwhite": [255, 250, 240],
    	"forestgreen": [34, 139, 34],
    	"fuchsia": [255, 0, 255],
    	"gainsboro": [220, 220, 220],
    	"ghostwhite": [248, 248, 255],
    	"gold": [255, 215, 0],
    	"goldenrod": [218, 165, 32],
    	"gray": [128, 128, 128],
    	"green": [0, 128, 0],
    	"greenyellow": [173, 255, 47],
    	"grey": [128, 128, 128],
    	"honeydew": [240, 255, 240],
    	"hotpink": [255, 105, 180],
    	"indianred": [205, 92, 92],
    	"indigo": [75, 0, 130],
    	"ivory": [255, 255, 240],
    	"khaki": [240, 230, 140],
    	"lavender": [230, 230, 250],
    	"lavenderblush": [255, 240, 245],
    	"lawngreen": [124, 252, 0],
    	"lemonchiffon": [255, 250, 205],
    	"lightblue": [173, 216, 230],
    	"lightcoral": [240, 128, 128],
    	"lightcyan": [224, 255, 255],
    	"lightgoldenrodyellow": [250, 250, 210],
    	"lightgray": [211, 211, 211],
    	"lightgreen": [144, 238, 144],
    	"lightgrey": [211, 211, 211],
    	"lightpink": [255, 182, 193],
    	"lightsalmon": [255, 160, 122],
    	"lightseagreen": [32, 178, 170],
    	"lightskyblue": [135, 206, 250],
    	"lightslategray": [119, 136, 153],
    	"lightslategrey": [119, 136, 153],
    	"lightsteelblue": [176, 196, 222],
    	"lightyellow": [255, 255, 224],
    	"lime": [0, 255, 0],
    	"limegreen": [50, 205, 50],
    	"linen": [250, 240, 230],
    	"magenta": [255, 0, 255],
    	"maroon": [128, 0, 0],
    	"mediumaquamarine": [102, 205, 170],
    	"mediumblue": [0, 0, 205],
    	"mediumorchid": [186, 85, 211],
    	"mediumpurple": [147, 112, 219],
    	"mediumseagreen": [60, 179, 113],
    	"mediumslateblue": [123, 104, 238],
    	"mediumspringgreen": [0, 250, 154],
    	"mediumturquoise": [72, 209, 204],
    	"mediumvioletred": [199, 21, 133],
    	"midnightblue": [25, 25, 112],
    	"mintcream": [245, 255, 250],
    	"mistyrose": [255, 228, 225],
    	"moccasin": [255, 228, 181],
    	"navajowhite": [255, 222, 173],
    	"navy": [0, 0, 128],
    	"oldlace": [253, 245, 230],
    	"olive": [128, 128, 0],
    	"olivedrab": [107, 142, 35],
    	"orange": [255, 165, 0],
    	"orangered": [255, 69, 0],
    	"orchid": [218, 112, 214],
    	"palegoldenrod": [238, 232, 170],
    	"palegreen": [152, 251, 152],
    	"paleturquoise": [175, 238, 238],
    	"palevioletred": [219, 112, 147],
    	"papayawhip": [255, 239, 213],
    	"peachpuff": [255, 218, 185],
    	"peru": [205, 133, 63],
    	"pink": [255, 192, 203],
    	"plum": [221, 160, 221],
    	"powderblue": [176, 224, 230],
    	"purple": [128, 0, 128],
    	"rebeccapurple": [102, 51, 153],
    	"red": [255, 0, 0],
    	"rosybrown": [188, 143, 143],
    	"royalblue": [65, 105, 225],
    	"saddlebrown": [139, 69, 19],
    	"salmon": [250, 128, 114],
    	"sandybrown": [244, 164, 96],
    	"seagreen": [46, 139, 87],
    	"seashell": [255, 245, 238],
    	"sienna": [160, 82, 45],
    	"silver": [192, 192, 192],
    	"skyblue": [135, 206, 235],
    	"slateblue": [106, 90, 205],
    	"slategray": [112, 128, 144],
    	"slategrey": [112, 128, 144],
    	"snow": [255, 250, 250],
    	"springgreen": [0, 255, 127],
    	"steelblue": [70, 130, 180],
    	"tan": [210, 180, 140],
    	"teal": [0, 128, 128],
    	"thistle": [216, 191, 216],
    	"tomato": [255, 99, 71],
    	"turquoise": [64, 224, 208],
    	"violet": [238, 130, 238],
    	"wheat": [245, 222, 179],
    	"white": [255, 255, 255],
    	"whitesmoke": [245, 245, 245],
    	"yellow": [255, 255, 0],
    	"yellowgreen": [154, 205, 50]
    };

    /* MIT license */

    var cssKeywords = colorName;

    // NOTE: conversions should only return primitive values (i.e. arrays, or
    //       values that give correct `typeof` results).
    //       do not use box values types (i.e. Number(), String(), etc.)

    var reverseKeywords = {};
    for (var key in cssKeywords) {
    	if (cssKeywords.hasOwnProperty(key)) {
    		reverseKeywords[cssKeywords[key]] = key;
    	}
    }

    var convert$2 = conversions$2.exports = {
    	rgb: {channels: 3, labels: 'rgb'},
    	hsl: {channels: 3, labels: 'hsl'},
    	hsv: {channels: 3, labels: 'hsv'},
    	hwb: {channels: 3, labels: 'hwb'},
    	cmyk: {channels: 4, labels: 'cmyk'},
    	xyz: {channels: 3, labels: 'xyz'},
    	lab: {channels: 3, labels: 'lab'},
    	lch: {channels: 3, labels: 'lch'},
    	hex: {channels: 1, labels: ['hex']},
    	keyword: {channels: 1, labels: ['keyword']},
    	ansi16: {channels: 1, labels: ['ansi16']},
    	ansi256: {channels: 1, labels: ['ansi256']},
    	hcg: {channels: 3, labels: ['h', 'c', 'g']},
    	apple: {channels: 3, labels: ['r16', 'g16', 'b16']},
    	gray: {channels: 1, labels: ['gray']}
    };

    // hide .channels and .labels properties
    for (var model$1 in convert$2) {
    	if (convert$2.hasOwnProperty(model$1)) {
    		if (!('channels' in convert$2[model$1])) {
    			throw new Error('missing channels property: ' + model$1);
    		}

    		if (!('labels' in convert$2[model$1])) {
    			throw new Error('missing channel labels property: ' + model$1);
    		}

    		if (convert$2[model$1].labels.length !== convert$2[model$1].channels) {
    			throw new Error('channel and label counts mismatch: ' + model$1);
    		}

    		var channels = convert$2[model$1].channels;
    		var labels = convert$2[model$1].labels;
    		delete convert$2[model$1].channels;
    		delete convert$2[model$1].labels;
    		Object.defineProperty(convert$2[model$1], 'channels', {value: channels});
    		Object.defineProperty(convert$2[model$1], 'labels', {value: labels});
    	}
    }

    convert$2.rgb.hsl = function (rgb) {
    	var r = rgb[0] / 255;
    	var g = rgb[1] / 255;
    	var b = rgb[2] / 255;
    	var min = Math.min(r, g, b);
    	var max = Math.max(r, g, b);
    	var delta = max - min;
    	var h;
    	var s;
    	var l;

    	if (max === min) {
    		h = 0;
    	} else if (r === max) {
    		h = (g - b) / delta;
    	} else if (g === max) {
    		h = 2 + (b - r) / delta;
    	} else if (b === max) {
    		h = 4 + (r - g) / delta;
    	}

    	h = Math.min(h * 60, 360);

    	if (h < 0) {
    		h += 360;
    	}

    	l = (min + max) / 2;

    	if (max === min) {
    		s = 0;
    	} else if (l <= 0.5) {
    		s = delta / (max + min);
    	} else {
    		s = delta / (2 - max - min);
    	}

    	return [h, s * 100, l * 100];
    };

    convert$2.rgb.hsv = function (rgb) {
    	var rdif;
    	var gdif;
    	var bdif;
    	var h;
    	var s;

    	var r = rgb[0] / 255;
    	var g = rgb[1] / 255;
    	var b = rgb[2] / 255;
    	var v = Math.max(r, g, b);
    	var diff = v - Math.min(r, g, b);
    	var diffc = function (c) {
    		return (v - c) / 6 / diff + 1 / 2;
    	};

    	if (diff === 0) {
    		h = s = 0;
    	} else {
    		s = diff / v;
    		rdif = diffc(r);
    		gdif = diffc(g);
    		bdif = diffc(b);

    		if (r === v) {
    			h = bdif - gdif;
    		} else if (g === v) {
    			h = (1 / 3) + rdif - bdif;
    		} else if (b === v) {
    			h = (2 / 3) + gdif - rdif;
    		}
    		if (h < 0) {
    			h += 1;
    		} else if (h > 1) {
    			h -= 1;
    		}
    	}

    	return [
    		h * 360,
    		s * 100,
    		v * 100
    	];
    };

    convert$2.rgb.hwb = function (rgb) {
    	var r = rgb[0];
    	var g = rgb[1];
    	var b = rgb[2];
    	var h = convert$2.rgb.hsl(rgb)[0];
    	var w = 1 / 255 * Math.min(r, Math.min(g, b));

    	b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));

    	return [h, w * 100, b * 100];
    };

    convert$2.rgb.cmyk = function (rgb) {
    	var r = rgb[0] / 255;
    	var g = rgb[1] / 255;
    	var b = rgb[2] / 255;
    	var c;
    	var m;
    	var y;
    	var k;

    	k = Math.min(1 - r, 1 - g, 1 - b);
    	c = (1 - r - k) / (1 - k) || 0;
    	m = (1 - g - k) / (1 - k) || 0;
    	y = (1 - b - k) / (1 - k) || 0;

    	return [c * 100, m * 100, y * 100, k * 100];
    };

    /**
     * See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance
     * */
    function comparativeDistance(x, y) {
    	return (
    		Math.pow(x[0] - y[0], 2) +
    		Math.pow(x[1] - y[1], 2) +
    		Math.pow(x[2] - y[2], 2)
    	);
    }

    convert$2.rgb.keyword = function (rgb) {
    	var reversed = reverseKeywords[rgb];
    	if (reversed) {
    		return reversed;
    	}

    	var currentClosestDistance = Infinity;
    	var currentClosestKeyword;

    	for (var keyword in cssKeywords) {
    		if (cssKeywords.hasOwnProperty(keyword)) {
    			var value = cssKeywords[keyword];

    			// Compute comparative distance
    			var distance = comparativeDistance(rgb, value);

    			// Check if its less, if so set as closest
    			if (distance < currentClosestDistance) {
    				currentClosestDistance = distance;
    				currentClosestKeyword = keyword;
    			}
    		}
    	}

    	return currentClosestKeyword;
    };

    convert$2.keyword.rgb = function (keyword) {
    	return cssKeywords[keyword];
    };

    convert$2.rgb.xyz = function (rgb) {
    	var r = rgb[0] / 255;
    	var g = rgb[1] / 255;
    	var b = rgb[2] / 255;

    	// assume sRGB
    	r = r > 0.04045 ? Math.pow(((r + 0.055) / 1.055), 2.4) : (r / 12.92);
    	g = g > 0.04045 ? Math.pow(((g + 0.055) / 1.055), 2.4) : (g / 12.92);
    	b = b > 0.04045 ? Math.pow(((b + 0.055) / 1.055), 2.4) : (b / 12.92);

    	var x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);
    	var y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);
    	var z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);

    	return [x * 100, y * 100, z * 100];
    };

    convert$2.rgb.lab = function (rgb) {
    	var xyz = convert$2.rgb.xyz(rgb);
    	var x = xyz[0];
    	var y = xyz[1];
    	var z = xyz[2];
    	var l;
    	var a;
    	var b;

    	x /= 95.047;
    	y /= 100;
    	z /= 108.883;

    	x = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);
    	y = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);
    	z = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);

    	l = (116 * y) - 16;
    	a = 500 * (x - y);
    	b = 200 * (y - z);

    	return [l, a, b];
    };

    convert$2.hsl.rgb = function (hsl) {
    	var h = hsl[0] / 360;
    	var s = hsl[1] / 100;
    	var l = hsl[2] / 100;
    	var t1;
    	var t2;
    	var t3;
    	var rgb;
    	var val;

    	if (s === 0) {
    		val = l * 255;
    		return [val, val, val];
    	}

    	if (l < 0.5) {
    		t2 = l * (1 + s);
    	} else {
    		t2 = l + s - l * s;
    	}

    	t1 = 2 * l - t2;

    	rgb = [0, 0, 0];
    	for (var i = 0; i < 3; i++) {
    		t3 = h + 1 / 3 * -(i - 1);
    		if (t3 < 0) {
    			t3++;
    		}
    		if (t3 > 1) {
    			t3--;
    		}

    		if (6 * t3 < 1) {
    			val = t1 + (t2 - t1) * 6 * t3;
    		} else if (2 * t3 < 1) {
    			val = t2;
    		} else if (3 * t3 < 2) {
    			val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
    		} else {
    			val = t1;
    		}

    		rgb[i] = val * 255;
    	}

    	return rgb;
    };

    convert$2.hsl.hsv = function (hsl) {
    	var h = hsl[0];
    	var s = hsl[1] / 100;
    	var l = hsl[2] / 100;
    	var smin = s;
    	var lmin = Math.max(l, 0.01);
    	var sv;
    	var v;

    	l *= 2;
    	s *= (l <= 1) ? l : 2 - l;
    	smin *= lmin <= 1 ? lmin : 2 - lmin;
    	v = (l + s) / 2;
    	sv = l === 0 ? (2 * smin) / (lmin + smin) : (2 * s) / (l + s);

    	return [h, sv * 100, v * 100];
    };

    convert$2.hsv.rgb = function (hsv) {
    	var h = hsv[0] / 60;
    	var s = hsv[1] / 100;
    	var v = hsv[2] / 100;
    	var hi = Math.floor(h) % 6;

    	var f = h - Math.floor(h);
    	var p = 255 * v * (1 - s);
    	var q = 255 * v * (1 - (s * f));
    	var t = 255 * v * (1 - (s * (1 - f)));
    	v *= 255;

    	switch (hi) {
    		case 0:
    			return [v, t, p];
    		case 1:
    			return [q, v, p];
    		case 2:
    			return [p, v, t];
    		case 3:
    			return [p, q, v];
    		case 4:
    			return [t, p, v];
    		case 5:
    			return [v, p, q];
    	}
    };

    convert$2.hsv.hsl = function (hsv) {
    	var h = hsv[0];
    	var s = hsv[1] / 100;
    	var v = hsv[2] / 100;
    	var vmin = Math.max(v, 0.01);
    	var lmin;
    	var sl;
    	var l;

    	l = (2 - s) * v;
    	lmin = (2 - s) * vmin;
    	sl = s * vmin;
    	sl /= (lmin <= 1) ? lmin : 2 - lmin;
    	sl = sl || 0;
    	l /= 2;

    	return [h, sl * 100, l * 100];
    };

    // http://dev.w3.org/csswg/css-color/#hwb-to-rgb
    convert$2.hwb.rgb = function (hwb) {
    	var h = hwb[0] / 360;
    	var wh = hwb[1] / 100;
    	var bl = hwb[2] / 100;
    	var ratio = wh + bl;
    	var i;
    	var v;
    	var f;
    	var n;

    	// wh + bl cant be > 1
    	if (ratio > 1) {
    		wh /= ratio;
    		bl /= ratio;
    	}

    	i = Math.floor(6 * h);
    	v = 1 - bl;
    	f = 6 * h - i;

    	if ((i & 0x01) !== 0) {
    		f = 1 - f;
    	}

    	n = wh + f * (v - wh); // linear interpolation

    	var r;
    	var g;
    	var b;
    	switch (i) {
    		default:
    		case 6:
    		case 0: r = v; g = n; b = wh; break;
    		case 1: r = n; g = v; b = wh; break;
    		case 2: r = wh; g = v; b = n; break;
    		case 3: r = wh; g = n; b = v; break;
    		case 4: r = n; g = wh; b = v; break;
    		case 5: r = v; g = wh; b = n; break;
    	}

    	return [r * 255, g * 255, b * 255];
    };

    convert$2.cmyk.rgb = function (cmyk) {
    	var c = cmyk[0] / 100;
    	var m = cmyk[1] / 100;
    	var y = cmyk[2] / 100;
    	var k = cmyk[3] / 100;
    	var r;
    	var g;
    	var b;

    	r = 1 - Math.min(1, c * (1 - k) + k);
    	g = 1 - Math.min(1, m * (1 - k) + k);
    	b = 1 - Math.min(1, y * (1 - k) + k);

    	return [r * 255, g * 255, b * 255];
    };

    convert$2.xyz.rgb = function (xyz) {
    	var x = xyz[0] / 100;
    	var y = xyz[1] / 100;
    	var z = xyz[2] / 100;
    	var r;
    	var g;
    	var b;

    	r = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);
    	g = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);
    	b = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);

    	// assume sRGB
    	r = r > 0.0031308
    		? ((1.055 * Math.pow(r, 1.0 / 2.4)) - 0.055)
    		: r * 12.92;

    	g = g > 0.0031308
    		? ((1.055 * Math.pow(g, 1.0 / 2.4)) - 0.055)
    		: g * 12.92;

    	b = b > 0.0031308
    		? ((1.055 * Math.pow(b, 1.0 / 2.4)) - 0.055)
    		: b * 12.92;

    	r = Math.min(Math.max(0, r), 1);
    	g = Math.min(Math.max(0, g), 1);
    	b = Math.min(Math.max(0, b), 1);

    	return [r * 255, g * 255, b * 255];
    };

    convert$2.xyz.lab = function (xyz) {
    	var x = xyz[0];
    	var y = xyz[1];
    	var z = xyz[2];
    	var l;
    	var a;
    	var b;

    	x /= 95.047;
    	y /= 100;
    	z /= 108.883;

    	x = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);
    	y = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);
    	z = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);

    	l = (116 * y) - 16;
    	a = 500 * (x - y);
    	b = 200 * (y - z);

    	return [l, a, b];
    };

    convert$2.lab.xyz = function (lab) {
    	var l = lab[0];
    	var a = lab[1];
    	var b = lab[2];
    	var x;
    	var y;
    	var z;

    	y = (l + 16) / 116;
    	x = a / 500 + y;
    	z = y - b / 200;

    	var y2 = Math.pow(y, 3);
    	var x2 = Math.pow(x, 3);
    	var z2 = Math.pow(z, 3);
    	y = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;
    	x = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;
    	z = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;

    	x *= 95.047;
    	y *= 100;
    	z *= 108.883;

    	return [x, y, z];
    };

    convert$2.lab.lch = function (lab) {
    	var l = lab[0];
    	var a = lab[1];
    	var b = lab[2];
    	var hr;
    	var h;
    	var c;

    	hr = Math.atan2(b, a);
    	h = hr * 360 / 2 / Math.PI;

    	if (h < 0) {
    		h += 360;
    	}

    	c = Math.sqrt(a * a + b * b);

    	return [l, c, h];
    };

    convert$2.lch.lab = function (lch) {
    	var l = lch[0];
    	var c = lch[1];
    	var h = lch[2];
    	var a;
    	var b;
    	var hr;

    	hr = h / 360 * 2 * Math.PI;
    	a = c * Math.cos(hr);
    	b = c * Math.sin(hr);

    	return [l, a, b];
    };

    convert$2.rgb.ansi16 = function (args) {
    	var r = args[0];
    	var g = args[1];
    	var b = args[2];
    	var value = 1 in arguments ? arguments[1] : convert$2.rgb.hsv(args)[2]; // hsv -> ansi16 optimization

    	value = Math.round(value / 50);

    	if (value === 0) {
    		return 30;
    	}

    	var ansi = 30
    		+ ((Math.round(b / 255) << 2)
    		| (Math.round(g / 255) << 1)
    		| Math.round(r / 255));

    	if (value === 2) {
    		ansi += 60;
    	}

    	return ansi;
    };

    convert$2.hsv.ansi16 = function (args) {
    	// optimization here; we already know the value and don't need to get
    	// it converted for us.
    	return convert$2.rgb.ansi16(convert$2.hsv.rgb(args), args[2]);
    };

    convert$2.rgb.ansi256 = function (args) {
    	var r = args[0];
    	var g = args[1];
    	var b = args[2];

    	// we use the extended greyscale palette here, with the exception of
    	// black and white. normal palette only has 4 greyscale shades.
    	if (r === g && g === b) {
    		if (r < 8) {
    			return 16;
    		}

    		if (r > 248) {
    			return 231;
    		}

    		return Math.round(((r - 8) / 247) * 24) + 232;
    	}

    	var ansi = 16
    		+ (36 * Math.round(r / 255 * 5))
    		+ (6 * Math.round(g / 255 * 5))
    		+ Math.round(b / 255 * 5);

    	return ansi;
    };

    convert$2.ansi16.rgb = function (args) {
    	var color = args % 10;

    	// handle greyscale
    	if (color === 0 || color === 7) {
    		if (args > 50) {
    			color += 3.5;
    		}

    		color = color / 10.5 * 255;

    		return [color, color, color];
    	}

    	var mult = (~~(args > 50) + 1) * 0.5;
    	var r = ((color & 1) * mult) * 255;
    	var g = (((color >> 1) & 1) * mult) * 255;
    	var b = (((color >> 2) & 1) * mult) * 255;

    	return [r, g, b];
    };

    convert$2.ansi256.rgb = function (args) {
    	// handle greyscale
    	if (args >= 232) {
    		var c = (args - 232) * 10 + 8;
    		return [c, c, c];
    	}

    	args -= 16;

    	var rem;
    	var r = Math.floor(args / 36) / 5 * 255;
    	var g = Math.floor((rem = args % 36) / 6) / 5 * 255;
    	var b = (rem % 6) / 5 * 255;

    	return [r, g, b];
    };

    convert$2.rgb.hex = function (args) {
    	var integer = ((Math.round(args[0]) & 0xFF) << 16)
    		+ ((Math.round(args[1]) & 0xFF) << 8)
    		+ (Math.round(args[2]) & 0xFF);

    	var string = integer.toString(16).toUpperCase();
    	return '000000'.substring(string.length) + string;
    };

    convert$2.hex.rgb = function (args) {
    	var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
    	if (!match) {
    		return [0, 0, 0];
    	}

    	var colorString = match[0];

    	if (match[0].length === 3) {
    		colorString = colorString.split('').map(function (char) {
    			return char + char;
    		}).join('');
    	}

    	var integer = parseInt(colorString, 16);
    	var r = (integer >> 16) & 0xFF;
    	var g = (integer >> 8) & 0xFF;
    	var b = integer & 0xFF;

    	return [r, g, b];
    };

    convert$2.rgb.hcg = function (rgb) {
    	var r = rgb[0] / 255;
    	var g = rgb[1] / 255;
    	var b = rgb[2] / 255;
    	var max = Math.max(Math.max(r, g), b);
    	var min = Math.min(Math.min(r, g), b);
    	var chroma = (max - min);
    	var grayscale;
    	var hue;

    	if (chroma < 1) {
    		grayscale = min / (1 - chroma);
    	} else {
    		grayscale = 0;
    	}

    	if (chroma <= 0) {
    		hue = 0;
    	} else
    	if (max === r) {
    		hue = ((g - b) / chroma) % 6;
    	} else
    	if (max === g) {
    		hue = 2 + (b - r) / chroma;
    	} else {
    		hue = 4 + (r - g) / chroma + 4;
    	}

    	hue /= 6;
    	hue %= 1;

    	return [hue * 360, chroma * 100, grayscale * 100];
    };

    convert$2.hsl.hcg = function (hsl) {
    	var s = hsl[1] / 100;
    	var l = hsl[2] / 100;
    	var c = 1;
    	var f = 0;

    	if (l < 0.5) {
    		c = 2.0 * s * l;
    	} else {
    		c = 2.0 * s * (1.0 - l);
    	}

    	if (c < 1.0) {
    		f = (l - 0.5 * c) / (1.0 - c);
    	}

    	return [hsl[0], c * 100, f * 100];
    };

    convert$2.hsv.hcg = function (hsv) {
    	var s = hsv[1] / 100;
    	var v = hsv[2] / 100;

    	var c = s * v;
    	var f = 0;

    	if (c < 1.0) {
    		f = (v - c) / (1 - c);
    	}

    	return [hsv[0], c * 100, f * 100];
    };

    convert$2.hcg.rgb = function (hcg) {
    	var h = hcg[0] / 360;
    	var c = hcg[1] / 100;
    	var g = hcg[2] / 100;

    	if (c === 0.0) {
    		return [g * 255, g * 255, g * 255];
    	}

    	var pure = [0, 0, 0];
    	var hi = (h % 1) * 6;
    	var v = hi % 1;
    	var w = 1 - v;
    	var mg = 0;

    	switch (Math.floor(hi)) {
    		case 0:
    			pure[0] = 1; pure[1] = v; pure[2] = 0; break;
    		case 1:
    			pure[0] = w; pure[1] = 1; pure[2] = 0; break;
    		case 2:
    			pure[0] = 0; pure[1] = 1; pure[2] = v; break;
    		case 3:
    			pure[0] = 0; pure[1] = w; pure[2] = 1; break;
    		case 4:
    			pure[0] = v; pure[1] = 0; pure[2] = 1; break;
    		default:
    			pure[0] = 1; pure[1] = 0; pure[2] = w;
    	}

    	mg = (1.0 - c) * g;

    	return [
    		(c * pure[0] + mg) * 255,
    		(c * pure[1] + mg) * 255,
    		(c * pure[2] + mg) * 255
    	];
    };

    convert$2.hcg.hsv = function (hcg) {
    	var c = hcg[1] / 100;
    	var g = hcg[2] / 100;

    	var v = c + g * (1.0 - c);
    	var f = 0;

    	if (v > 0.0) {
    		f = c / v;
    	}

    	return [hcg[0], f * 100, v * 100];
    };

    convert$2.hcg.hsl = function (hcg) {
    	var c = hcg[1] / 100;
    	var g = hcg[2] / 100;

    	var l = g * (1.0 - c) + 0.5 * c;
    	var s = 0;

    	if (l > 0.0 && l < 0.5) {
    		s = c / (2 * l);
    	} else
    	if (l >= 0.5 && l < 1.0) {
    		s = c / (2 * (1 - l));
    	}

    	return [hcg[0], s * 100, l * 100];
    };

    convert$2.hcg.hwb = function (hcg) {
    	var c = hcg[1] / 100;
    	var g = hcg[2] / 100;
    	var v = c + g * (1.0 - c);
    	return [hcg[0], (v - c) * 100, (1 - v) * 100];
    };

    convert$2.hwb.hcg = function (hwb) {
    	var w = hwb[1] / 100;
    	var b = hwb[2] / 100;
    	var v = 1 - b;
    	var c = v - w;
    	var g = 0;

    	if (c < 1) {
    		g = (v - c) / (1 - c);
    	}

    	return [hwb[0], c * 100, g * 100];
    };

    convert$2.apple.rgb = function (apple) {
    	return [(apple[0] / 65535) * 255, (apple[1] / 65535) * 255, (apple[2] / 65535) * 255];
    };

    convert$2.rgb.apple = function (rgb) {
    	return [(rgb[0] / 255) * 65535, (rgb[1] / 255) * 65535, (rgb[2] / 255) * 65535];
    };

    convert$2.gray.rgb = function (args) {
    	return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
    };

    convert$2.gray.hsl = convert$2.gray.hsv = function (args) {
    	return [0, 0, args[0]];
    };

    convert$2.gray.hwb = function (gray) {
    	return [0, 100, gray[0]];
    };

    convert$2.gray.cmyk = function (gray) {
    	return [0, 0, 0, gray[0]];
    };

    convert$2.gray.lab = function (gray) {
    	return [gray[0], 0, 0];
    };

    convert$2.gray.hex = function (gray) {
    	var val = Math.round(gray[0] / 100 * 255) & 0xFF;
    	var integer = (val << 16) + (val << 8) + val;

    	var string = integer.toString(16).toUpperCase();
    	return '000000'.substring(string.length) + string;
    };

    convert$2.rgb.gray = function (rgb) {
    	var val = (rgb[0] + rgb[1] + rgb[2]) / 3;
    	return [val / 255 * 100];
    };

    var conversions$1 = conversions$2.exports;

    /*
    	this function routes a model to all other models.

    	all functions that are routed have a property `.conversion` attached
    	to the returned synthetic function. This property is an array
    	of strings, each with the steps in between the 'from' and 'to'
    	color models (inclusive).

    	conversions that are not possible simply are not included.
    */

    function buildGraph() {
    	var graph = {};
    	// https://jsperf.com/object-keys-vs-for-in-with-closure/3
    	var models = Object.keys(conversions$1);

    	for (var len = models.length, i = 0; i < len; i++) {
    		graph[models[i]] = {
    			// http://jsperf.com/1-vs-infinity
    			// micro-opt, but this is simple.
    			distance: -1,
    			parent: null
    		};
    	}

    	return graph;
    }

    // https://en.wikipedia.org/wiki/Breadth-first_search
    function deriveBFS(fromModel) {
    	var graph = buildGraph();
    	var queue = [fromModel]; // unshift -> queue -> pop

    	graph[fromModel].distance = 0;

    	while (queue.length) {
    		var current = queue.pop();
    		var adjacents = Object.keys(conversions$1[current]);

    		for (var len = adjacents.length, i = 0; i < len; i++) {
    			var adjacent = adjacents[i];
    			var node = graph[adjacent];

    			if (node.distance === -1) {
    				node.distance = graph[current].distance + 1;
    				node.parent = current;
    				queue.unshift(adjacent);
    			}
    		}
    	}

    	return graph;
    }

    function link(from, to) {
    	return function (args) {
    		return to(from(args));
    	};
    }

    function wrapConversion(toModel, graph) {
    	var path = [graph[toModel].parent, toModel];
    	var fn = conversions$1[graph[toModel].parent][toModel];

    	var cur = graph[toModel].parent;
    	while (graph[cur].parent) {
    		path.unshift(graph[cur].parent);
    		fn = link(conversions$1[graph[cur].parent][cur], fn);
    		cur = graph[cur].parent;
    	}

    	fn.conversion = path;
    	return fn;
    }

    var route$1 = function (fromModel) {
    	var graph = deriveBFS(fromModel);
    	var conversion = {};

    	var models = Object.keys(graph);
    	for (var len = models.length, i = 0; i < len; i++) {
    		var toModel = models[i];
    		var node = graph[toModel];

    		if (node.parent === null) {
    			// no possible conversion, or this node is the source model.
    			continue;
    		}

    		conversion[toModel] = wrapConversion(toModel, graph);
    	}

    	return conversion;
    };

    var conversions = conversions$2.exports;
    var route = route$1;

    var convert$1 = {};

    var models = Object.keys(conversions);

    function wrapRaw(fn) {
    	var wrappedFn = function (args) {
    		if (args === undefined || args === null) {
    			return args;
    		}

    		if (arguments.length > 1) {
    			args = Array.prototype.slice.call(arguments);
    		}

    		return fn(args);
    	};

    	// preserve .conversion property if there is one
    	if ('conversion' in fn) {
    		wrappedFn.conversion = fn.conversion;
    	}

    	return wrappedFn;
    }

    function wrapRounded(fn) {
    	var wrappedFn = function (args) {
    		if (args === undefined || args === null) {
    			return args;
    		}

    		if (arguments.length > 1) {
    			args = Array.prototype.slice.call(arguments);
    		}

    		var result = fn(args);

    		// we're assuming the result is an array here.
    		// see notice in conversions.js; don't use box types
    		// in conversion functions.
    		if (typeof result === 'object') {
    			for (var len = result.length, i = 0; i < len; i++) {
    				result[i] = Math.round(result[i]);
    			}
    		}

    		return result;
    	};

    	// preserve .conversion property if there is one
    	if ('conversion' in fn) {
    		wrappedFn.conversion = fn.conversion;
    	}

    	return wrappedFn;
    }

    models.forEach(function (fromModel) {
    	convert$1[fromModel] = {};

    	Object.defineProperty(convert$1[fromModel], 'channels', {value: conversions[fromModel].channels});
    	Object.defineProperty(convert$1[fromModel], 'labels', {value: conversions[fromModel].labels});

    	var routes = route(fromModel);
    	var routeModels = Object.keys(routes);

    	routeModels.forEach(function (toModel) {
    		var fn = routes[toModel];

    		convert$1[fromModel][toModel] = wrapRounded(fn);
    		convert$1[fromModel][toModel].raw = wrapRaw(fn);
    	});
    });

    var colorConvert = convert$1;

    var colorString = colorString$1.exports;
    var convert = colorConvert;

    var _slice = [].slice;

    var skippedModels = [
    	// to be honest, I don't really feel like keyword belongs in color convert, but eh.
    	'keyword',

    	// gray conflicts with some method names, and has its own method defined.
    	'gray',

    	// shouldn't really be in color-convert either...
    	'hex'
    ];

    var hashedModelKeys = {};
    Object.keys(convert).forEach(function (model) {
    	hashedModelKeys[_slice.call(convert[model].labels).sort().join('')] = model;
    });

    var limiters = {};

    function Color(obj, model) {
    	if (!(this instanceof Color)) {
    		return new Color(obj, model);
    	}

    	if (model && model in skippedModels) {
    		model = null;
    	}

    	if (model && !(model in convert)) {
    		throw new Error('Unknown model: ' + model);
    	}

    	var i;
    	var channels;

    	if (obj == null) { // eslint-disable-line no-eq-null,eqeqeq
    		this.model = 'rgb';
    		this.color = [0, 0, 0];
    		this.valpha = 1;
    	} else if (obj instanceof Color) {
    		this.model = obj.model;
    		this.color = obj.color.slice();
    		this.valpha = obj.valpha;
    	} else if (typeof obj === 'string') {
    		var result = colorString.get(obj);
    		if (result === null) {
    			throw new Error('Unable to parse color from string: ' + obj);
    		}

    		this.model = result.model;
    		channels = convert[this.model].channels;
    		this.color = result.value.slice(0, channels);
    		this.valpha = typeof result.value[channels] === 'number' ? result.value[channels] : 1;
    	} else if (obj.length) {
    		this.model = model || 'rgb';
    		channels = convert[this.model].channels;
    		var newArr = _slice.call(obj, 0, channels);
    		this.color = zeroArray(newArr, channels);
    		this.valpha = typeof obj[channels] === 'number' ? obj[channels] : 1;
    	} else if (typeof obj === 'number') {
    		// this is always RGB - can be converted later on.
    		obj &= 0xFFFFFF;
    		this.model = 'rgb';
    		this.color = [
    			(obj >> 16) & 0xFF,
    			(obj >> 8) & 0xFF,
    			obj & 0xFF
    		];
    		this.valpha = 1;
    	} else {
    		this.valpha = 1;

    		var keys = Object.keys(obj);
    		if ('alpha' in obj) {
    			keys.splice(keys.indexOf('alpha'), 1);
    			this.valpha = typeof obj.alpha === 'number' ? obj.alpha : 0;
    		}

    		var hashedKeys = keys.sort().join('');
    		if (!(hashedKeys in hashedModelKeys)) {
    			throw new Error('Unable to parse color from object: ' + JSON.stringify(obj));
    		}

    		this.model = hashedModelKeys[hashedKeys];

    		var labels = convert[this.model].labels;
    		var color = [];
    		for (i = 0; i < labels.length; i++) {
    			color.push(obj[labels[i]]);
    		}

    		this.color = zeroArray(color);
    	}

    	// perform limitations (clamping, etc.)
    	if (limiters[this.model]) {
    		channels = convert[this.model].channels;
    		for (i = 0; i < channels; i++) {
    			var limit = limiters[this.model][i];
    			if (limit) {
    				this.color[i] = limit(this.color[i]);
    			}
    		}
    	}

    	this.valpha = Math.max(0, Math.min(1, this.valpha));

    	if (Object.freeze) {
    		Object.freeze(this);
    	}
    }

    Color.prototype = {
    	toString: function () {
    		return this.string();
    	},

    	toJSON: function () {
    		return this[this.model]();
    	},

    	string: function (places) {
    		var self = this.model in colorString.to ? this : this.rgb();
    		self = self.round(typeof places === 'number' ? places : 1);
    		var args = self.valpha === 1 ? self.color : self.color.concat(this.valpha);
    		return colorString.to[self.model](args);
    	},

    	percentString: function (places) {
    		var self = this.rgb().round(typeof places === 'number' ? places : 1);
    		var args = self.valpha === 1 ? self.color : self.color.concat(this.valpha);
    		return colorString.to.rgb.percent(args);
    	},

    	array: function () {
    		return this.valpha === 1 ? this.color.slice() : this.color.concat(this.valpha);
    	},

    	object: function () {
    		var result = {};
    		var channels = convert[this.model].channels;
    		var labels = convert[this.model].labels;

    		for (var i = 0; i < channels; i++) {
    			result[labels[i]] = this.color[i];
    		}

    		if (this.valpha !== 1) {
    			result.alpha = this.valpha;
    		}

    		return result;
    	},

    	unitArray: function () {
    		var rgb = this.rgb().color;
    		rgb[0] /= 255;
    		rgb[1] /= 255;
    		rgb[2] /= 255;

    		if (this.valpha !== 1) {
    			rgb.push(this.valpha);
    		}

    		return rgb;
    	},

    	unitObject: function () {
    		var rgb = this.rgb().object();
    		rgb.r /= 255;
    		rgb.g /= 255;
    		rgb.b /= 255;

    		if (this.valpha !== 1) {
    			rgb.alpha = this.valpha;
    		}

    		return rgb;
    	},

    	round: function (places) {
    		places = Math.max(places || 0, 0);
    		return new Color(this.color.map(roundToPlace(places)).concat(this.valpha), this.model);
    	},

    	alpha: function (val) {
    		if (arguments.length) {
    			return new Color(this.color.concat(Math.max(0, Math.min(1, val))), this.model);
    		}

    		return this.valpha;
    	},

    	// rgb
    	red: getset('rgb', 0, maxfn(255)),
    	green: getset('rgb', 1, maxfn(255)),
    	blue: getset('rgb', 2, maxfn(255)),

    	hue: getset(['hsl', 'hsv', 'hsl', 'hwb', 'hcg'], 0, function (val) { return ((val % 360) + 360) % 360; }), // eslint-disable-line brace-style

    	saturationl: getset('hsl', 1, maxfn(100)),
    	lightness: getset('hsl', 2, maxfn(100)),

    	saturationv: getset('hsv', 1, maxfn(100)),
    	value: getset('hsv', 2, maxfn(100)),

    	chroma: getset('hcg', 1, maxfn(100)),
    	gray: getset('hcg', 2, maxfn(100)),

    	white: getset('hwb', 1, maxfn(100)),
    	wblack: getset('hwb', 2, maxfn(100)),

    	cyan: getset('cmyk', 0, maxfn(100)),
    	magenta: getset('cmyk', 1, maxfn(100)),
    	yellow: getset('cmyk', 2, maxfn(100)),
    	black: getset('cmyk', 3, maxfn(100)),

    	x: getset('xyz', 0, maxfn(100)),
    	y: getset('xyz', 1, maxfn(100)),
    	z: getset('xyz', 2, maxfn(100)),

    	l: getset('lab', 0, maxfn(100)),
    	a: getset('lab', 1),
    	b: getset('lab', 2),

    	keyword: function (val) {
    		if (arguments.length) {
    			return new Color(val);
    		}

    		return convert[this.model].keyword(this.color);
    	},

    	hex: function (val) {
    		if (arguments.length) {
    			return new Color(val);
    		}

    		return colorString.to.hex(this.rgb().round().color);
    	},

    	rgbNumber: function () {
    		var rgb = this.rgb().color;
    		return ((rgb[0] & 0xFF) << 16) | ((rgb[1] & 0xFF) << 8) | (rgb[2] & 0xFF);
    	},

    	luminosity: function () {
    		// http://www.w3.org/TR/WCAG20/#relativeluminancedef
    		var rgb = this.rgb().color;

    		var lum = [];
    		for (var i = 0; i < rgb.length; i++) {
    			var chan = rgb[i] / 255;
    			lum[i] = (chan <= 0.03928) ? chan / 12.92 : Math.pow(((chan + 0.055) / 1.055), 2.4);
    		}

    		return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];
    	},

    	contrast: function (color2) {
    		// http://www.w3.org/TR/WCAG20/#contrast-ratiodef
    		var lum1 = this.luminosity();
    		var lum2 = color2.luminosity();

    		if (lum1 > lum2) {
    			return (lum1 + 0.05) / (lum2 + 0.05);
    		}

    		return (lum2 + 0.05) / (lum1 + 0.05);
    	},

    	level: function (color2) {
    		var contrastRatio = this.contrast(color2);
    		if (contrastRatio >= 7.1) {
    			return 'AAA';
    		}

    		return (contrastRatio >= 4.5) ? 'AA' : '';
    	},

    	isDark: function () {
    		// YIQ equation from http://24ways.org/2010/calculating-color-contrast
    		var rgb = this.rgb().color;
    		var yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;
    		return yiq < 128;
    	},

    	isLight: function () {
    		return !this.isDark();
    	},

    	negate: function () {
    		var rgb = this.rgb();
    		for (var i = 0; i < 3; i++) {
    			rgb.color[i] = 255 - rgb.color[i];
    		}
    		return rgb;
    	},

    	lighten: function (ratio) {
    		var hsl = this.hsl();
    		hsl.color[2] += hsl.color[2] * ratio;
    		return hsl;
    	},

    	darken: function (ratio) {
    		var hsl = this.hsl();
    		hsl.color[2] -= hsl.color[2] * ratio;
    		return hsl;
    	},

    	saturate: function (ratio) {
    		var hsl = this.hsl();
    		hsl.color[1] += hsl.color[1] * ratio;
    		return hsl;
    	},

    	desaturate: function (ratio) {
    		var hsl = this.hsl();
    		hsl.color[1] -= hsl.color[1] * ratio;
    		return hsl;
    	},

    	whiten: function (ratio) {
    		var hwb = this.hwb();
    		hwb.color[1] += hwb.color[1] * ratio;
    		return hwb;
    	},

    	blacken: function (ratio) {
    		var hwb = this.hwb();
    		hwb.color[2] += hwb.color[2] * ratio;
    		return hwb;
    	},

    	grayscale: function () {
    		// http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale
    		var rgb = this.rgb().color;
    		var val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;
    		return Color.rgb(val, val, val);
    	},

    	fade: function (ratio) {
    		return this.alpha(this.valpha - (this.valpha * ratio));
    	},

    	opaquer: function (ratio) {
    		return this.alpha(this.valpha + (this.valpha * ratio));
    	},

    	rotate: function (degrees) {
    		var hsl = this.hsl();
    		var hue = hsl.color[0];
    		hue = (hue + degrees) % 360;
    		hue = hue < 0 ? 360 + hue : hue;
    		hsl.color[0] = hue;
    		return hsl;
    	},

    	mix: function (mixinColor, weight) {
    		// ported from sass implementation in C
    		// https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209
    		if (!mixinColor || !mixinColor.rgb) {
    			throw new Error('Argument to "mix" was not a Color instance, but rather an instance of ' + typeof mixinColor);
    		}
    		var color1 = mixinColor.rgb();
    		var color2 = this.rgb();
    		var p = weight === undefined ? 0.5 : weight;

    		var w = 2 * p - 1;
    		var a = color1.alpha() - color2.alpha();

    		var w1 = (((w * a === -1) ? w : (w + a) / (1 + w * a)) + 1) / 2.0;
    		var w2 = 1 - w1;

    		return Color.rgb(
    				w1 * color1.red() + w2 * color2.red(),
    				w1 * color1.green() + w2 * color2.green(),
    				w1 * color1.blue() + w2 * color2.blue(),
    				color1.alpha() * p + color2.alpha() * (1 - p));
    	}
    };

    // model conversion methods and static constructors
    Object.keys(convert).forEach(function (model) {
    	if (skippedModels.indexOf(model) !== -1) {
    		return;
    	}

    	var channels = convert[model].channels;

    	// conversion methods
    	Color.prototype[model] = function () {
    		if (this.model === model) {
    			return new Color(this);
    		}

    		if (arguments.length) {
    			return new Color(arguments, model);
    		}

    		var newAlpha = typeof arguments[channels] === 'number' ? channels : this.valpha;
    		return new Color(assertArray(convert[this.model][model].raw(this.color)).concat(newAlpha), model);
    	};

    	// 'static' construction methods
    	Color[model] = function (color) {
    		if (typeof color === 'number') {
    			color = zeroArray(_slice.call(arguments), channels);
    		}
    		return new Color(color, model);
    	};
    });

    function roundTo(num, places) {
    	return Number(num.toFixed(places));
    }

    function roundToPlace(places) {
    	return function (num) {
    		return roundTo(num, places);
    	};
    }

    function getset(model, channel, modifier) {
    	model = Array.isArray(model) ? model : [model];

    	model.forEach(function (m) {
    		(limiters[m] || (limiters[m] = []))[channel] = modifier;
    	});

    	model = model[0];

    	return function (val) {
    		var result;

    		if (arguments.length) {
    			if (modifier) {
    				val = modifier(val);
    			}

    			result = this[model]();
    			result.color[channel] = val;
    			return result;
    		}

    		result = this[model]().color[channel];
    		if (modifier) {
    			result = modifier(result);
    		}

    		return result;
    	};
    }

    function maxfn(max) {
    	return function (v) {
    		return Math.max(0, Math.min(max, v));
    	};
    }

    function assertArray(val) {
    	return Array.isArray(val) ? val : [val];
    }

    function zeroArray(arr, length) {
    	for (var i = 0; i < length; i++) {
    		if (typeof arr[i] !== 'number') {
    			arr[i] = 0;
    		}
    	}

    	return arr;
    }

    var color = Color;

    var browser = false;

    var _interopRequireDefault$u = interopRequireDefault.exports;

    Object.defineProperty(offscreenCanvasPonyfill, "__esModule", {
      value: true
    });
    offscreenCanvasPonyfill.createImageBitmap = offscreenCanvasPonyfill.createCanvas = offscreenCanvasPonyfill.PonyfillOffscreenContext = offscreenCanvasPonyfill.PonyfillOffscreenCanvas = offscreenCanvasPonyfill.ImageBitmapType = void 0;

    var _typeof2 = _interopRequireDefault$u(_typeof$e.exports);

    var _regenerator$4 = _interopRequireDefault$u(regenerator);

    var _asyncToGenerator2$4 = _interopRequireDefault$u(asyncToGenerator.exports);

    var _toConsumableArray2$6 = _interopRequireDefault$u(toConsumableArray.exports);

    var _extends2$5 = _interopRequireDefault$u(_extends$1.exports);

    var _slicedToArray2$d = _interopRequireDefault$u(slicedToArray.exports);

    var _classCallCheck2$4 = _interopRequireDefault$u(classCallCheck.exports);

    var _createClass2$4 = _interopRequireDefault$u(createClass.exports);

    var _react$h = _interopRequireDefault$u(React__default["default"]);

    var _svgPathGenerator = _interopRequireDefault$u(svgPathGenerator);

    var _color = _interopRequireDefault$u(color);

    var _detectNode = _interopRequireDefault$u(browser);

    /* eslint-disable no-restricted-globals */
    // This is a ponyfill for the HTML5 OffscreenCanvas API.
    var createCanvas;
    offscreenCanvasPonyfill.createCanvas = createCanvas;
    var createImageBitmap;
    offscreenCanvasPonyfill.createImageBitmap = createImageBitmap;
    var ImageBitmapType;
    offscreenCanvasPonyfill.ImageBitmapType = ImageBitmapType;
    var weHave = {
      realOffscreenCanvas: typeof OffscreenCanvas === 'function',
      node: _detectNode.default
    };

    var PonyfillOffscreenContext = /*#__PURE__*/function () {
      function PonyfillOffscreenContext(width, height) {
        (0, _classCallCheck2$4.default)(this, PonyfillOffscreenContext);
        this.width = width;
        this.height = height;
        this.commands = [];
        this.currentFont = '12px Courier New, monospace';
      } // setters (no getters working)


      (0, _createClass2$4.default)(PonyfillOffscreenContext, [{
        key: "strokeStyle",
        set: function set(style) {
          if (style !== this.currentStrokeStyle) {
            this.commands.push({
              type: 'strokeStyle',
              style: style
            });
            this.currentStrokeStyle = style;
          }
        }
      }, {
        key: "fillStyle",
        set: function set(style) {
          if (style !== this.currentFillStyle) {
            this.commands.push({
              type: 'fillStyle',
              style: style
            });
            this.currentFillStyle = style;
          }
        }
      }, {
        key: "font",
        set: function set(style) {
          this.currentFont = style;
          this.commands.push({
            type: 'font',
            style: style
          });
        } // methods

      }, {
        key: "arc",
        value: function arc() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          this.commands.push({
            type: 'arc',
            args: args
          });
        }
      }, {
        key: "arcTo",
        value: function arcTo() {
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }

          this.commands.push({
            type: 'arcTo',
            args: args
          });
        }
      }, {
        key: "beginPath",
        value: function beginPath() {
          for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            args[_key3] = arguments[_key3];
          }

          this.commands.push({
            type: 'beginPath',
            args: args
          });
        }
      }, {
        key: "clearRect",
        value: function clearRect() {
          for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
            args[_key4] = arguments[_key4];
          }

          this.commands.push({
            type: 'clearRect',
            args: args
          });
        }
      }, {
        key: "clip",
        value: function clip() {
          for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
            args[_key5] = arguments[_key5];
          }

          this.commands.push({
            type: 'clip',
            args: args
          });
        }
      }, {
        key: "closePath",
        value: function closePath() {
          for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
            args[_key6] = arguments[_key6];
          }

          this.commands.push({
            type: 'closePath',
            args: args
          });
        }
      }, {
        key: "createLinearGradient",
        value: function createLinearGradient() {
          for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
            args[_key7] = arguments[_key7];
          }

          this.commands.push({
            type: 'createLinearGradient',
            args: args
          });
        }
      }, {
        key: "createPattern",
        value: function createPattern() {
          for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
            args[_key8] = arguments[_key8];
          }

          this.commands.push({
            type: 'createPattern',
            args: args
          });
        }
      }, {
        key: "createRadialGradient",
        value: function createRadialGradient() {
          for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
            args[_key9] = arguments[_key9];
          }

          this.commands.push({
            type: 'createRadialGradient',
            args: args
          });
        }
      }, {
        key: "drawFocusIfNeeded",
        value: function drawFocusIfNeeded() {
          for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {
            args[_key10] = arguments[_key10];
          }

          this.commands.push({
            type: 'drawFocusIfNeeded',
            args: args
          });
        }
      }, {
        key: "drawImage",
        value: function drawImage() {
          for (var _len11 = arguments.length, args = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {
            args[_key11] = arguments[_key11];
          }

          this.commands.push({
            type: 'drawImage',
            args: args
          });
        }
      }, {
        key: "ellipse",
        value: function ellipse() {
          for (var _len12 = arguments.length, args = new Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {
            args[_key12] = arguments[_key12];
          }

          this.commands.push({
            type: 'ellipse',
            args: args
          });
        }
      }, {
        key: "fill",
        value: function fill() {
          for (var _len13 = arguments.length, args = new Array(_len13), _key13 = 0; _key13 < _len13; _key13++) {
            args[_key13] = arguments[_key13];
          }

          this.commands.push({
            type: 'fill',
            args: args
          });
        }
      }, {
        key: "fillRect",
        value: function fillRect() {
          for (var _len14 = arguments.length, args = new Array(_len14), _key14 = 0; _key14 < _len14; _key14++) {
            args[_key14] = arguments[_key14];
          }

          var x = args[0],
              y = args[1],
              w = args[2],
              h = args[3];

          if (x > this.width || x + w < 0) {
            return;
          }

          var nx = Math.max(x, 0);
          var nw = nx + w > this.width ? this.width - nx : w;
          this.commands.push({
            type: 'fillRect',
            args: [nx, y, nw, h]
          });
        }
      }, {
        key: "fillText",
        value: function fillText() {
          for (var _len15 = arguments.length, args = new Array(_len15), _key15 = 0; _key15 < _len15; _key15++) {
            args[_key15] = arguments[_key15];
          }

          // if (x > this.width || x + 1000 < 0) {
          //   return
          // }
          this.commands.push({
            type: 'fillText',
            args: args
          });
        }
      }, {
        key: "lineTo",
        value: function lineTo() {
          for (var _len16 = arguments.length, args = new Array(_len16), _key16 = 0; _key16 < _len16; _key16++) {
            args[_key16] = arguments[_key16];
          }

          this.commands.push({
            type: 'lineTo',
            args: args
          });
        }
      }, {
        key: "measureText",
        value: function measureText(text) {
          var height = +this.currentFont.match(/\d+/)[0];
          return {
            width: height / 2 * text.length,
            height: height
          };
        }
      }, {
        key: "moveTo",
        value: function moveTo() {
          for (var _len17 = arguments.length, args = new Array(_len17), _key17 = 0; _key17 < _len17; _key17++) {
            args[_key17] = arguments[_key17];
          }

          this.commands.push({
            type: 'moveTo',
            args: args
          });
        }
      }, {
        key: "quadraticCurveTo",
        value: function quadraticCurveTo() {
          for (var _len18 = arguments.length, args = new Array(_len18), _key18 = 0; _key18 < _len18; _key18++) {
            args[_key18] = arguments[_key18];
          }

          this.commands.push({
            type: 'quadraticCurveTo',
            args: args
          });
        }
      }, {
        key: "rect",
        value: function rect() {
          for (var _len19 = arguments.length, args = new Array(_len19), _key19 = 0; _key19 < _len19; _key19++) {
            args[_key19] = arguments[_key19];
          }

          this.commands.push({
            type: 'rect',
            args: args
          });
        }
      }, {
        key: "restore",
        value: function restore() {
          for (var _len20 = arguments.length, args = new Array(_len20), _key20 = 0; _key20 < _len20; _key20++) {
            args[_key20] = arguments[_key20];
          }

          this.commands.push({
            type: 'restore',
            args: args
          });
        }
      }, {
        key: "rotate",
        value: function rotate() {
          for (var _len21 = arguments.length, args = new Array(_len21), _key21 = 0; _key21 < _len21; _key21++) {
            args[_key21] = arguments[_key21];
          }

          this.commands.push({
            type: 'rotate',
            args: args
          });
        }
      }, {
        key: "save",
        value: function save() {
          for (var _len22 = arguments.length, args = new Array(_len22), _key22 = 0; _key22 < _len22; _key22++) {
            args[_key22] = arguments[_key22];
          }

          this.commands.push({
            type: 'save',
            args: args
          });
        }
      }, {
        key: "setLineDash",
        value: function setLineDash() {
          for (var _len23 = arguments.length, args = new Array(_len23), _key23 = 0; _key23 < _len23; _key23++) {
            args[_key23] = arguments[_key23];
          }

          this.commands.push({
            type: 'setLineDash',
            args: args
          });
        }
      }, {
        key: "setTransform",
        value: function setTransform() {
          for (var _len24 = arguments.length, args = new Array(_len24), _key24 = 0; _key24 < _len24; _key24++) {
            args[_key24] = arguments[_key24];
          }

          this.commands.push({
            type: 'setTransform',
            args: args
          });
        }
      }, {
        key: "scale",
        value: function scale() {
          for (var _len25 = arguments.length, args = new Array(_len25), _key25 = 0; _key25 < _len25; _key25++) {
            args[_key25] = arguments[_key25];
          }

          this.commands.push({
            type: 'scale',
            args: args
          });
        }
      }, {
        key: "stroke",
        value: function stroke() {
          for (var _len26 = arguments.length, args = new Array(_len26), _key26 = 0; _key26 < _len26; _key26++) {
            args[_key26] = arguments[_key26];
          }

          this.commands.push({
            type: 'stroke',
            args: args
          });
        }
      }, {
        key: "strokeRect",
        value: function strokeRect() {
          for (var _len27 = arguments.length, args = new Array(_len27), _key27 = 0; _key27 < _len27; _key27++) {
            args[_key27] = arguments[_key27];
          }

          this.commands.push({
            type: 'strokeRect',
            args: args
          });
        }
      }, {
        key: "strokeText",
        value: function strokeText() {
          for (var _len28 = arguments.length, args = new Array(_len28), _key28 = 0; _key28 < _len28; _key28++) {
            args[_key28] = arguments[_key28];
          }

          this.commands.push({
            type: 'strokeText',
            args: args
          });
        }
      }, {
        key: "transform",
        value: function transform() {
          for (var _len29 = arguments.length, args = new Array(_len29), _key29 = 0; _key29 < _len29; _key29++) {
            args[_key29] = arguments[_key29];
          }

          this.commands.push({
            type: 'transform',
            args: args
          });
        }
      }, {
        key: "translate",
        value: function translate() {
          for (var _len30 = arguments.length, args = new Array(_len30), _key30 = 0; _key30 < _len30; _key30++) {
            args[_key30] = arguments[_key30];
          }

          this.commands.push({
            type: 'translate',
            args: args
          });
        } // unsupported
        //   putImageData(...args)
        //   createImageData(...args)
        //   getImageData(...args)
        //   getLineDash(...args)
        //   getTransform(...args)

      }]);
      return PonyfillOffscreenContext;
    }();

    offscreenCanvasPonyfill.PonyfillOffscreenContext = PonyfillOffscreenContext;

    function splitColor(color) {
      var fill = (0, _color.default)(color);
      return {
        hex: fill.hex(),
        opacity: fill.alpha()
      };
    } // https://stackoverflow.com/a/5620441/2129219


    function parseFont(font) {
      var fontFamily = null;
      var fontSize = null;
      var fontStyle = 'normal';
      var fontWeight = 'normal';
      var fontVariant = 'normal';
      var lineHeight = 'normal';
      var elements = font.split(/\s+/);
      var element;

      outer: while (element = elements.shift()) {
        switch (element) {
          case 'normal':
            break;

          case 'italic':
          case 'oblique':
            fontStyle = element;
            break;

          case 'small-caps':
            fontVariant = element;
            break;

          case 'bold':
          case 'bolder':
          case 'lighter':
          case '100':
          case '200':
          case '300':
          case '400':
          case '500':
          case '600':
          case '700':
          case '800':
          case '900':
            fontWeight = element;
            break;

          default:
            if (!fontSize) {
              var parts = element.split('/');
              fontSize = parts[0];

              if (parts.length > 1) {
                lineHeight = parts[1];
              }

              break;
            }

            fontFamily = element;

            if (elements.length) {
              fontFamily += " ".concat(elements.join(' '));
            }

            break outer;
        }
      }

      return {
        fontStyle: fontStyle,
        fontVariant: fontVariant,
        fontWeight: fontWeight,
        fontSize: fontSize,
        lineHeight: lineHeight,
        fontFamily: fontFamily
      };
    }

    var PonyfillOffscreenCanvas = /*#__PURE__*/function () {
      function PonyfillOffscreenCanvas(width, height) {
        (0, _classCallCheck2$4.default)(this, PonyfillOffscreenCanvas);
        this.width = width;
        this.height = height;
      }

      (0, _createClass2$4.default)(PonyfillOffscreenCanvas, [{
        key: "getContext",
        value: function getContext(type) {
          if (type !== '2d') {
            throw new Error("unknown type ".concat(type));
          }

          this.context = new PonyfillOffscreenContext(this.width, this.height);
          return this.context;
        }
      }, {
        key: "getSerializedSvg",
        value: function getSerializedSvg() {
          var currentFill;
          var currentStroke;
          var currentPath = [];
          var rotation;
          var font;
          var nodes = [];
          this.context.commands.forEach(function (command, index) {
            if (command.type === 'font') {
              if (command.style) {
                // stackoverflow.com/questions/5618676
                // skip lineHeight in the final usage
                var _parseFont = parseFont(command.style),
                    fontStyle = _parseFont.fontStyle,
                    fontFamily = _parseFont.fontFamily,
                    fontSize = _parseFont.fontSize;

                font = {
                  fontStyle: fontStyle,
                  fontFamily: fontFamily,
                  fontSize: fontSize
                };
              }
            }

            if (command.type === 'fillStyle') {
              if (command.style) {
                currentFill = command.style;
              }
            }

            if (command.type === 'strokeStyle') {
              if (command.style) {
                currentStroke = command.style;
              }
            }

            if (command.type === 'fillRect') {
              var _command$args = (0, _slicedToArray2$d.default)(command.args, 4),
                  x = _command$args[0],
                  y = _command$args[1],
                  w = _command$args[2],
                  h = _command$args[3];

              var _splitColor = splitColor(currentFill),
                  hex = _splitColor.hex,
                  opacity = _splitColor.opacity;

              var ny = Math.min(y, y + h);
              var nh = Math.abs(h);
              nodes.push( /*#__PURE__*/_react$h.default.createElement("rect", {
                key: index,
                fill: hex,
                fillOpacity: opacity !== 1 ? opacity : undefined,
                x: x.toFixed(3),
                y: ny.toFixed(3),
                width: w.toFixed(3),
                height: nh.toFixed(3)
              }));
            }

            if (command.type === 'fillText') {
              var _command$args2 = (0, _slicedToArray2$d.default)(command.args, 3),
                  text = _command$args2[0],
                  _x = _command$args2[1],
                  _y = _command$args2[2];

              var _splitColor2 = splitColor(currentFill),
                  _hex = _splitColor2.hex,
                  _opacity = _splitColor2.opacity;

              nodes.push( /*#__PURE__*/_react$h.default.createElement("text", (0, _extends2$5.default)({
                key: index,
                fill: _hex,
                fillOpacity: _opacity !== 1 ? _opacity : undefined,
                x: _x.toFixed(3),
                y: _y.toFixed(3)
              }, font), text));
            }

            if (command.type === 'beginPath') {
              currentPath = [];
            }

            if (command.type === 'moveTo') {
              currentPath.push(command.args);
            }

            if (command.type === 'lineTo') {
              currentPath.push(command.args);
            }

            if (command.type === 'closePath') ;

            if (command.type === 'fill') {
              var _Path;

              var path = (_Path = (0, _svgPathGenerator.default)()).moveTo.apply(_Path, (0, _toConsumableArray2$6.default)(currentPath[0]));

              for (var i = 1; i < currentPath.length; i++) {
                var _path;

                path = (_path = path).lineTo.apply(_path, (0, _toConsumableArray2$6.default)(currentPath[i]));
              }

              path.end();

              var _splitColor3 = splitColor(currentFill),
                  _hex2 = _splitColor3.hex,
                  _opacity2 = _splitColor3.opacity;

              nodes.push( /*#__PURE__*/_react$h.default.createElement("path", {
                key: index,
                fill: _hex2,
                d: path,
                fillOpacity: _opacity2 !== 1 ? _opacity2 : undefined
              }));
            }

            if (command.type === 'stroke') {
              var _Path2;

              var _path2 = (_Path2 = (0, _svgPathGenerator.default)()).moveTo.apply(_Path2, (0, _toConsumableArray2$6.default)(currentPath[0]));

              for (var _i = 1; _i < currentPath.length; _i++) {
                var _path3;

                _path2 = (_path3 = _path2).lineTo.apply(_path3, (0, _toConsumableArray2$6.default)(currentPath[_i]));
              }

              _path2.end();

              var _splitColor4 = splitColor(currentStroke),
                  _hex3 = _splitColor4.hex,
                  _opacity3 = _splitColor4.opacity;

              nodes.push( /*#__PURE__*/_react$h.default.createElement("path", {
                key: index,
                fill: "none",
                stroke: _hex3,
                fillOpacity: _opacity3 !== 1 ? _opacity3 : undefined,
                d: _path2
              }));
            }

            if (command.type === 'rotate') {
              rotation = command.args[0] * 180 / Math.PI;
            }
          });
          return rotation ? /*#__PURE__*/_react$h.default.createElement("g", {
            transform: "rotate(".concat(rotation, ")")
          }, [].concat(nodes)) : /*#__PURE__*/_react$h.default.createElement(_react$h.default.Fragment, null, [].concat(nodes));
        }
      }]);
      return PonyfillOffscreenCanvas;
    }();

    offscreenCanvasPonyfill.PonyfillOffscreenCanvas = PonyfillOffscreenCanvas;

    if (weHave.realOffscreenCanvas) {
      offscreenCanvasPonyfill.createCanvas = createCanvas = function createCanvas(width, height) {
        return new OffscreenCanvas(width, height);
      };

      offscreenCanvasPonyfill.createImageBitmap = createImageBitmap = window.createImageBitmap || self.createImageBitmap;
      offscreenCanvasPonyfill.ImageBitmapType = ImageBitmapType = window.ImageBitmap || self.ImageBitmap;
    } else if (weHave.node) {
      // use node-canvas if we are running in node (i.e. automated tests)
      var _require$2 = require$$13__default["default"],
          nodeCreateCanvas = _require$2.createCanvas,
          Image$1 = _require$2.Image;

      offscreenCanvasPonyfill.createCanvas = createCanvas = nodeCreateCanvas;

      offscreenCanvasPonyfill.createImageBitmap = createImageBitmap = /*#__PURE__*/function () {
        var _ref = (0, _asyncToGenerator2$4.default)( /*#__PURE__*/_regenerator$4.default.mark(function _callee(canvas) {
          var dataUri,
              img,
              _args = arguments;
          return _regenerator$4.default.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  if (!(_args.length <= 1 ? 0 : _args.length - 1)) {
                    _context.next = 2;
                    break;
                  }

                  throw new Error('only one-argument uses of createImageBitmap are supported by the node offscreencanvas ponyfill');

                case 2:
                  dataUri = canvas.toDataURL();
                  img = new Image$1();
                  return _context.abrupt("return", new Promise(function (resolve, reject) {
                    img.onload = function () {
                      return resolve(img);
                    };

                    img.onerror = reject;
                    img.src = dataUri;
                  }));

                case 5:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));

        return function createImageBitmap(_x2) {
          return _ref.apply(this, arguments);
        };
      }();

      offscreenCanvasPonyfill.ImageBitmapType = ImageBitmapType = Image$1;
    } else {
      offscreenCanvasPonyfill.createCanvas = createCanvas = function createCanvas(width, height) {
        return new PonyfillOffscreenCanvas(width, height);
      };

      offscreenCanvasPonyfill.createImageBitmap = createImageBitmap = function createImageBitmap(canvas) {
        return canvas.context;
      };

      offscreenCanvasPonyfill.ImageBitmapType = ImageBitmapType = (0, _typeof2.default)('StringArray');
    }

    var offscreenCanvasUtils = {};

    var _interopRequireDefault$t = interopRequireDefault.exports;

    Object.defineProperty(offscreenCanvasUtils, "__esModule", {
      value: true
    });
    offscreenCanvasUtils.renderToAbstractCanvas = renderToAbstractCanvas;

    var _regenerator$3 = _interopRequireDefault$t(regenerator);

    var _asyncToGenerator2$3 = _interopRequireDefault$t(asyncToGenerator.exports);

    var _react$g = _interopRequireDefault$t(React__default["default"]);

    var _offscreenCanvasPonyfill$1 = offscreenCanvasPonyfill;

    var _ = util$3;

    function renderToAbstractCanvas(_x, _x2, _x3, _x4) {
      return _renderToAbstractCanvas.apply(this, arguments);
    }

    function _renderToAbstractCanvas() {
      _renderToAbstractCanvas = (0, _asyncToGenerator2$3.default)( /*#__PURE__*/_regenerator$3.default.mark(function _callee(width, height, opts, cb) {
        var exportSVG, _opts$highResolutionS, highResolutionScaling, fakeCanvas, fakeCtx, scale, _canvas, _ctx, canvas, ctx;

        return _regenerator$3.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                exportSVG = opts.exportSVG, _opts$highResolutionS = opts.highResolutionScaling, highResolutionScaling = _opts$highResolutionS === void 0 ? 1 : _opts$highResolutionS;

                if (!(exportSVG && !exportSVG.rasterizeLayers)) {
                  _context.next = 7;
                  break;
                }

                fakeCanvas = new _offscreenCanvasPonyfill$1.PonyfillOffscreenCanvas(width, height);
                fakeCtx = fakeCanvas.getContext('2d');
                _context.next = 6;
                return cb(fakeCtx);

              case 6:
                return _context.abrupt("return", {
                  reactElement: fakeCanvas.getSerializedSvg()
                });

              case 7:
                if (!(exportSVG && exportSVG.rasterizeLayers)) {
                  _context.next = 32;
                  break;
                }

                scale = 4;
                _canvas = (0, _offscreenCanvasPonyfill$1.createCanvas)(Math.ceil(width * scale), height * scale);
                _ctx = _canvas.getContext('2d');

                _ctx.scale(scale, scale);

                _context.next = 14;
                return cb(_ctx);

              case 14:
                _context.t0 = _react$g.default;
                _context.t1 = width;
                _context.t2 = height;

                if (!_canvas.convertToBlob) {
                  _context.next = 27;
                  break;
                }

                _context.t4 = _.blobToDataURL;
                _context.next = 21;
                return _canvas.convertToBlob({
                  type: 'image/png'
                });

              case 21:
                _context.t5 = _context.sent;
                _context.next = 24;
                return (0, _context.t4)(_context.t5);

              case 24:
                _context.t3 = _context.sent;
                _context.next = 28;
                break;

              case 27:
                _context.t3 = _canvas.toDataURL();

              case 28:
                _context.t6 = _context.t3;
                _context.t7 = {
                  width: _context.t1,
                  height: _context.t2,
                  xlinkHref: _context.t6
                };
                _context.t8 = _context.t0.createElement.call(_context.t0, "image", _context.t7);
                return _context.abrupt("return", {
                  reactElement: _context.t8
                });

              case 32:
                canvas = (0, _offscreenCanvasPonyfill$1.createCanvas)(Math.ceil(width * highResolutionScaling), height * highResolutionScaling);
                ctx = canvas.getContext('2d');
                ctx.scale(highResolutionScaling, highResolutionScaling);
                _context.next = 37;
                return cb(ctx);

              case 37:
                _context.next = 39;
                return (0, _offscreenCanvasPonyfill$1.createImageBitmap)(canvas);

              case 39:
                _context.t9 = _context.sent;
                return _context.abrupt("return", {
                  imageData: _context.t9
                });

              case 41:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));
      return _renderToAbstractCanvas.apply(this, arguments);
    }

    (function (exports) {

    var _interopRequireDefault = interopRequireDefault.exports;

    var _typeof3 = _typeof$e.exports;

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _exportNames = {
      inDevelopment: true,
      inProduction: true,
      useDebounce: true,
      useDebouncedCallback: true,
      findParentThat: true,
      springAnimate: true,
      findParentThatIs: true,
      getSession: true,
      getContainingView: true,
      getContainingTrack: true,
      getContainingDisplay: true,
      assembleLocString: true,
      parseLocStringOneBased: true,
      parseLocString: true,
      compareLocs: true,
      compareLocStrings: true,
      clamp: true,
      bpToPx: true,
      radToDeg: true,
      degToRad: true,
      polarToCartesian: true,
      cartesianToPolar: true,
      featureSpanPx: true,
      bpSpanPx: true,
      objectFromEntries: true,
      iterMap: true,
      mergeConfigs: true,
      findLastIndex: true,
      makeAbortableReaction: true,
      renameRegionIfNeeded: true,
      renameRegionsIfNeeded: true,
      minmax: true,
      stringify: true,
      isElectron: true,
      revcom: true,
      complement: true,
      blobToDataURL: true,
      rIC: true,
      measureText: true,
      defaultStarts: true,
      defaultStops: true,
      defaultCodonTable: true,
      generateCodonTable: true,
      updateStatus: true,
      hashCode: true,
      objectHash: true,
      SimpleFeature: true,
      isFeature: true
    };
    Object.defineProperty(exports, "SimpleFeature", {
      enumerable: true,
      get: function get() {
        return _simpleFeature.default;
      }
    });
    exports.assembleLocString = assembleLocString;
    exports.blobToDataURL = blobToDataURL;
    exports.bpSpanPx = bpSpanPx;
    exports.bpToPx = bpToPx;
    exports.cartesianToPolar = cartesianToPolar;
    exports.clamp = clamp;
    exports.compareLocStrings = compareLocStrings;
    exports.compareLocs = compareLocs;
    exports.defaultStops = exports.defaultStarts = exports.defaultCodonTable = exports.complement = void 0;
    exports.degToRad = degToRad;
    exports.featureSpanPx = featureSpanPx;
    exports.findLastIndex = findLastIndex;
    exports.findParentThat = findParentThat;
    exports.findParentThatIs = findParentThatIs;
    exports.generateCodonTable = generateCodonTable;
    exports.getContainingDisplay = getContainingDisplay;
    exports.getContainingTrack = getContainingTrack;
    exports.getContainingView = getContainingView;
    exports.getSession = getSession;
    exports.hashCode = hashCode;
    exports.isElectron = exports.inProduction = exports.inDevelopment = void 0;
    Object.defineProperty(exports, "isFeature", {
      enumerable: true,
      get: function get() {
        return _simpleFeature.isFeature;
      }
    });
    exports.iterMap = iterMap;
    exports.makeAbortableReaction = makeAbortableReaction;
    exports.measureText = measureText;
    exports.mergeConfigs = mergeConfigs;
    exports.minmax = minmax;
    exports.objectFromEntries = void 0;
    exports.objectHash = objectHash;
    exports.parseLocString = parseLocString;
    exports.parseLocStringOneBased = parseLocStringOneBased;
    exports.polarToCartesian = polarToCartesian;
    exports.rIC = void 0;
    exports.radToDeg = radToDeg;
    exports.renameRegionIfNeeded = renameRegionIfNeeded;
    exports.renameRegionsIfNeeded = renameRegionsIfNeeded;
    exports.revcom = revcom;
    exports.springAnimate = springAnimate;
    exports.stringify = stringify;
    exports.updateStatus = updateStatus;
    exports.useDebounce = useDebounce;
    exports.useDebouncedCallback = useDebouncedCallback;

    var _defineProperty2 = _interopRequireDefault(defineProperty$1.exports);

    var _regenerator = _interopRequireDefault(regenerator);

    var _asyncToGenerator2 = _interopRequireDefault(asyncToGenerator.exports);

    var _toConsumableArray2 = _interopRequireDefault(toConsumableArray.exports);

    var _slicedToArray2 = _interopRequireDefault(slicedToArray.exports);

    var _typeof2 = _interopRequireDefault(_typeof$e.exports);

    var _mobxStateTree = require$$0$1;

    var _mobx = require$$8;

    var _object = _interopRequireDefault(object_fromentries);

    var _react = React__default["default"];

    var _deepmerge = _interopRequireDefault(cjs);

    var _simpleFeature = _interopRequireWildcard(simpleFeature);

    var _types = types$1;

    Object.keys(_types).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _types[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
          return _types[key];
        }
      });
    });

    var _aborting = aborting;

    Object.keys(_aborting).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _aborting[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
          return _aborting[key];
        }
      });
    });

    var _when = when$1;

    Object.keys(_when).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _when[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
          return _when[key];
        }
      });
    });

    var _range = range;

    Object.keys(_range).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _range[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
          return _range[key];
        }
      });
    });

    var _offscreenCanvasPonyfill = offscreenCanvasPonyfill;

    Object.keys(_offscreenCanvasPonyfill).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _offscreenCanvasPonyfill[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
          return _offscreenCanvasPonyfill[key];
        }
      });
    });

    var _offscreenCanvasUtils = offscreenCanvasUtils;

    Object.keys(_offscreenCanvasUtils).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _offscreenCanvasUtils[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
          return _offscreenCanvasUtils[key];
        }
      });
    });

    function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

    function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

    function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

    function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

    function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

    function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

    function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

    if (!Object.fromEntries) {
      // @ts-ignore
      _object.default.shim();
    }

    var inDevelopment = (typeof process === "undefined" ? "undefined" : (0, _typeof2.default)(process)) === 'object' && process.env && process.env.NODE_ENV === 'development';
    exports.inDevelopment = inDevelopment;
    var inProduction = !inDevelopment;
    exports.inProduction = inProduction;

    function useDebounce(value, delay) {
      var _useState = (0, _react.useState)(value),
          _useState2 = (0, _slicedToArray2.default)(_useState, 2),
          debouncedValue = _useState2[0],
          setDebouncedValue = _useState2[1];

      (0, _react.useEffect)(function () {
        var handler = setTimeout(function () {
          setDebouncedValue(value);
        }, delay);
        return function () {
          clearTimeout(handler);
        };
      }, [value, delay]);
      return debouncedValue;
    } // https://stackoverflow.com/questions/56283920/how-to-debounce-a-callback-in-functional-component-using-hooks


    function useDebouncedCallback(callback) {
      var wait = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 400;
      // track args & timeout handle between calls
      var argsRef = (0, _react.useRef)();
      var timeout = (0, _react.useRef)();

      function cleanup() {
        if (timeout.current) {
          clearTimeout(timeout.current);
        }
      } // make sure our timeout gets cleared if our consuming component gets unmounted


      (0, _react.useEffect)(function () {
        return cleanup;
      }, []);
      return function debouncedCallback() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        // capture latest args
        argsRef.current = args; // clear debounce timer

        cleanup(); // start waiting again

        timeout.current = setTimeout(function () {
          if (argsRef.current) {
            callback.apply(void 0, (0, _toConsumableArray2.default)(argsRef.current));
          }
        }, wait);
      };
    }
    /** find the first node in the hierarchy that matches the given predicate */


    function findParentThat(node, predicate) {
      if (!(0, _mobxStateTree.hasParent)(node)) {
        throw new Error('node does not have parent');
      }

      var currentNode = (0, _mobxStateTree.getParent)(node);

      while (currentNode && (0, _mobxStateTree.isAlive)(currentNode)) {
        if (predicate(currentNode)) {
          return currentNode;
        }

        if ((0, _mobxStateTree.hasParent)(currentNode)) {
          currentNode = (0, _mobxStateTree.getParent)(currentNode);
        } else {
          break;
        }
      }

      throw new Error('no matching node found');
    }

    // based on https://github.com/react-spring/react-spring/blob/cd5548a987383b8023efd620f3726a981f9e18ea/src/animated/FrameLoop.ts
    function springAnimate(fromValue, toValue, setValue) {
      var onFinish = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function () {};
      var precision = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
      var tension = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 170;
      var friction = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 26;
      var mass = 1;

      if (!precision) {
        precision = Math.abs(toValue - fromValue) / 1000;
      }

      var animationFrameId;

      function update(animation) {
        var time = Date.now();
        var position = animation.lastPosition;
        var lastTime = animation.lastTime || time;
        var velocity = animation.lastVelocity || 0; // If we lost a lot of frames just jump to the end.

        if (time > lastTime + 64) {
          lastTime = time;
        } // http://gafferongames.com/game-physics/fix-your-timestep/


        var numSteps = Math.floor(time - lastTime);

        for (var i = 0; i < numSteps; ++i) {
          var force = -tension * (position - toValue);
          var damping = -friction * velocity;
          var acceleration = (force + damping) / mass;
          velocity += acceleration * 1 / 1000;
          position += velocity * 1 / 1000;
        }

        var isVelocity = Math.abs(velocity) <= precision;
        var isDisplacement = tension !== 0 ? Math.abs(toValue - position) <= precision : true;
        var endOfAnimation = isVelocity && isDisplacement;

        if (endOfAnimation) {
          setValue(toValue);
          onFinish();
        } else {
          setValue(position);
          animationFrameId = requestAnimationFrame(function () {
            return update({
              lastPosition: position,
              lastTime: time,
              lastVelocity: velocity
            });
          });
        }
      }

      return [function () {
        return update({
          lastPosition: fromValue
        });
      }, function () {
        return cancelAnimationFrame(animationFrameId);
      }];
    }
    /** find the first node in the hierarchy that matches the given 'is' typescript type guard predicate */


    function findParentThatIs(node, predicate) {
      return findParentThat(node, predicate);
    }
    /** get the current JBrowse session model, starting at any node in the state tree */


    function getSession(node) {
      try {
        return findParentThatIs(node, _types.isSessionModel);
      } catch (e) {
        throw new Error('no session model found!');
      }
    }
    /** get the state model of the view in the state tree that contains the given node */


    function getContainingView(node) {
      try {
        return findParentThatIs(node, _types.isViewModel);
      } catch (e) {
        throw new Error('no containing view found');
      }
    }
    /** get the state model of the view in the state tree that contains the given node */


    function getContainingTrack(node) {
      try {
        return findParentThatIs(node, _types.isTrackModel);
      } catch (e) {
        throw new Error('no containing track found');
      }
    }

    function getContainingDisplay(node) {
      try {
        return findParentThatIs(node, _types.isDisplayModel);
      } catch (e) {
        throw new Error('no containing display found');
      }
    }
    /**
     * Assemble a 1-based "locString" from an interbase genomic location
     * @param region - Region
     * @example
     * ```ts
     * assembleLocString({ refName: 'chr1', start: 0, end: 100 })
     * // ↳ 'chr1:1..100'
     * ```
     * @example
     * ```ts
     * assembleLocString({ assemblyName: 'hg19', refName: 'chr1', start: 0, end: 100 })
     * // ↳ '{hg19}chr1:1..100'
     * ```
     * @example
     * ```ts
     * assembleLocString({ refName: 'chr1' })
     * // ↳ 'chr1'
     * ```
     * @example
     * ```ts
     * assembleLocString({ refName: 'chr1', start: 0 })
     * // ↳ 'chr1:1..'
     * ```
     * @example
     * ```ts
     * assembleLocString({ refName: 'chr1', end: 100 })
     * // ↳ 'chr1:1..100'
     * ```
     * @example
     * ```ts
     * assembleLocString({ refName: 'chr1', start: 0, end: 1 })
     * // ↳ 'chr1:1'
     * ```
     */


    function assembleLocString(region) {
      var assemblyName = region.assemblyName,
          refName = region.refName,
          start = region.start,
          end = region.end;
      var assemblyNameString = assemblyName ? "{".concat(assemblyName, "}") : '';
      var startString;

      if (start !== undefined) {
        startString = ":".concat((start + 1).toLocaleString('en-US'));
      } else if (end !== undefined) {
        startString = ':1';
      } else {
        startString = '';
      }

      var endString;

      if (end !== undefined) {
        endString = start !== undefined && start + 1 === end ? '' : "..".concat(end.toLocaleString('en-US'));
      } else {
        endString = start !== undefined ? '..' : '';
      }

      return "".concat(assemblyNameString).concat(refName).concat(startString).concat(endString);
    }

    function parseLocStringOneBased(locString, isValidRefName) {
      if (!locString) {
        throw new Error('no location string provided, could not parse');
      } // remove any whitespace


      locString = locString.replace(/\s/, ''); // refNames can have colons :(
      // https://samtools.github.io/hts-specs/SAMv1.pdf Appendix A

      var assemblyMatch = locString.match(/(\{(.+)\})?(.+)/);

      if (!assemblyMatch) {
        throw new Error("invalid location string: \"".concat(locString, "\""));
      }

      var _assemblyMatch = (0, _slicedToArray2.default)(assemblyMatch, 4),
          assemblyName = _assemblyMatch[2],
          location = _assemblyMatch[3];

      if (!assemblyName && location.startsWith('{}')) {
        throw new Error("no assembly name was provided in location \"".concat(location, "\""));
      }

      var lastColonIdx = location.lastIndexOf(':');

      if (lastColonIdx === -1) {
        if (isValidRefName(location, assemblyName)) {
          return {
            assemblyName: assemblyName,
            refName: location
          };
        }

        throw new Error("Unknown reference sequence \"".concat(location, "\""));
      }

      var prefix = location.slice(0, lastColonIdx);
      var suffix = location.slice(lastColonIdx + 1);

      if (isValidRefName(prefix, assemblyName) && isValidRefName(location, assemblyName)) {
        throw new Error("ambiguous location string: \"".concat(locString, "\""));
      } else if (isValidRefName(prefix, assemblyName)) {
        if (suffix) {
          // see if it's a range
          var rangeMatch = suffix.match(/^(-?(\d+|\d{1,3}(,\d{3})*))(\.\.|-)(-?(\d+|\d{1,3}(,\d{3})*))$/); // see if it's a single point

          var singleMatch = suffix.match(/^(-?(\d+|\d{1,3}(,\d{3})*))(\.\.|-)?$/);

          if (rangeMatch) {
            var _rangeMatch = (0, _slicedToArray2.default)(rangeMatch, 6),
                start = _rangeMatch[1],
                end = _rangeMatch[5];

            if (start !== undefined && end !== undefined) {
              return {
                assemblyName: assemblyName,
                refName: prefix,
                start: +start.replace(/,/g, ''),
                end: +end.replace(/,/g, '')
              };
            }
          } else if (singleMatch) {
            var _singleMatch = (0, _slicedToArray2.default)(singleMatch, 5),
                _start = _singleMatch[1],
                separator = _singleMatch[4];

            if (_start !== undefined) {
              if (separator) {
                // indefinite end
                return {
                  assemblyName: assemblyName,
                  refName: prefix,
                  start: +_start.replace(/,/g, '')
                };
              }

              return {
                assemblyName: assemblyName,
                refName: prefix,
                start: +_start.replace(/,/g, ''),
                end: +_start.replace(/,/g, '')
              };
            }
          } else {
            throw new Error("could not parse range \"".concat(suffix, "\" on location \"").concat(locString, "\""));
          }
        } else {
          return {
            assemblyName: assemblyName,
            refName: prefix
          };
        }
      } else if (isValidRefName(location, assemblyName)) {
        return {
          assemblyName: assemblyName,
          refName: location
        };
      }

      throw new Error("unknown reference sequence name in location \"".concat(locString, "\""));
    }
    /**
     * Parse a 1-based location string into an interbase genomic location
     * @param locString - Location string
     * @param isValidRefName - Function that checks if a refName exists in the set
     * of all known refNames, or in the set of refNames for an assembly if
     * assemblyName is given
     * @example
     * ```ts
     * parseLocString('chr1:1..100', isValidRefName)
     * // ↳ { refName: 'chr1', start: 0, end: 100 }
     * ```
     * @example
     * ```ts
     * parseLocString('chr1:1-100', isValidRefName)
     * // ↳ { refName: 'chr1', start: 0, end: 100 }
     * ```
     * @example
     * ```ts
     * parseLocString(`{hg19}chr1:1..100`, isValidRefName)
     * // ↳ { assemblyName: 'hg19', refName: 'chr1', start: 0, end: 100 }
     * ```
     * @example
     * ```ts
     * parseLocString('chr1', isValidRefName)
     * // ↳ { refName: 'chr1' }
     * ```
     * @example
     * ```ts
     * parseLocString('chr1:1', isValidRefName)
     * // ↳ { refName: 'chr1', start: 0, end: 1 }
     * ```
     * @example
     * ```ts
     * parseLocString('chr1:1..', isValidRefName)
     * // ↳ { refName: 'chr1', start: 0}
     * ```
     */


    function parseLocString(locString, isValidRefName) {
      var parsed = parseLocStringOneBased(locString, isValidRefName);

      if (typeof parsed.start === 'number') {
        parsed.start -= 1;
      }

      return parsed;
    }

    function compareLocs(locA, locB) {
      var assemblyComp = locA.assemblyName || locB.assemblyName ? (locA.assemblyName || '').localeCompare(locB.assemblyName || '') : 0;

      if (assemblyComp) {
        return assemblyComp;
      }

      var refComp = locA.refName || locB.refName ? (locA.refName || '').localeCompare(locB.refName || '') : 0;

      if (refComp) {
        return refComp;
      }

      if (locA.start !== undefined && locB.start !== undefined) {
        var startComp = locA.start - locB.start;

        if (startComp) {
          return startComp;
        }
      }

      if (locA.end !== undefined && locB.end !== undefined) {
        var endComp = locA.end - locB.end;

        if (endComp) {
          return endComp;
        }
      }

      return 0;
    }

    function compareLocStrings(a, b, isValidRefName) {
      var locA = parseLocString(a, isValidRefName);
      var locB = parseLocString(b, isValidRefName);
      return compareLocs(locA, locB);
    }
    /**
     * Ensure that a number is at least min and at most max.
     *
     * @param num -
     * @param min -
     * @param  max -
     */


    function clamp(num, min, max) {
      if (num < min) {
        return min;
      }

      if (num > max) {
        return max;
      }

      return num;
    }

    function roundToNearestPointOne(num) {
      return Math.round(num * 10) / 10;
    }
    /**
     * @param bp -
     * @param region -
     * @param bpPerPx -
     */


    function bpToPx(bp, region, bpPerPx) {
      if (region.reversed) {
        return roundToNearestPointOne((region.end - bp) / bpPerPx);
      }

      return roundToNearestPointOne((bp - region.start) / bpPerPx);
    }

    var oneEightyOverPi = 180.0 / Math.PI;
    var piOverOneEighty = Math.PI / 180.0;

    function radToDeg(radians) {
      return radians * oneEightyOverPi % 360;
    }

    function degToRad(degrees) {
      return degrees * piOverOneEighty % (2 * Math.PI);
    }
    /**
     * @returns [x, y]
     */


    function polarToCartesian(rho, theta) {
      return [rho * Math.cos(theta), rho * Math.sin(theta)];
    }
    /**
     * @param x - the x
     * @param y - the y
     * @returns [rho, theta]
     */


    function cartesianToPolar(x, y) {
      var rho = Math.sqrt(x * x + y * y);
      var theta = Math.atan(y / x);
      return [rho, theta];
    }

    function featureSpanPx(feature, region, bpPerPx) {
      return bpSpanPx(feature.get('start'), feature.get('end'), region, bpPerPx);
    }

    function bpSpanPx(leftBp, rightBp, region, bpPerPx) {
      var start = bpToPx(leftBp, region, bpPerPx);
      var end = bpToPx(rightBp, region, bpPerPx);
      return region.reversed ? [end, start] : [start, end];
    }

    var objectFromEntries = Object.fromEntries.bind(Object); // do an array map of an iterable

    exports.objectFromEntries = objectFromEntries;

    function iterMap(iterable, func, sizeHint) {
      var results = sizeHint ? new Array(sizeHint) : [];
      var counter = 0;

      var _iterator = _createForOfIteratorHelper(iterable),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var _item = _step.value;
          results[counter] = func(_item);
          counter += 1;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return results;
    }

    // similar to electron.js
    function mergeConfigs(A, B) {
      var merged = (0, _deepmerge.default)(A, B);

      if (B.defaultSession) {
        merged.defaultSession = B.defaultSession;
      } else if (A.defaultSession) {
        merged.defaultSession = A.defaultSession;
      }

      return merged;
    } // https://stackoverflow.com/a/53187807

    /**
     * Returns the index of the last element in the array where predicate is true,
     * and -1 otherwise.
     * @param array - The source array to search in
     * @param predicate - find calls predicate once for each element of the array, in
     * descending order, until it finds one where predicate returns true. If such an
     * element is found, findLastIndex immediately returns that element index.
     * Otherwise, findLastIndex returns -1.
     */


    function findLastIndex(array, predicate) {
      var l = array.length;

      while (l--) {
        if (predicate(array[l], l, array)) {
          return l;
        }
      }

      return -1;
    }
    /**
     * makes a mobx reaction with the given functions, that calls actions on the
     * model for each stage of execution, and to abort the reaction function when
     * the model is destroyed.
     *
     * Will call startedFunction(signal), successFunction(result), and
     * errorFunction(error) when the async reaction function starts, completes, and
     * errors respectively.
     *
     * @param self -
     * @param dataFunction -
     * @param asyncReactionFunction -
     * @param reactionOptions -
     * @param startedFunction -
     * @param successFunction -
     * @param errorFunction -
     */


    function makeAbortableReaction(self, dataFunction, asyncReactionFunction, reactionOptions, startedFunction, successFunction, errorFunction) {
      var inProgress;

      function handleError(error) {
        if (!(0, _aborting.isAbortException)(error)) {
          if ((0, _mobxStateTree.isAlive)(self)) {
            errorFunction(error);
          } else {
            console.error(error);
          }
        }
      }

      var reactionDisposer = (0, _mobx.reaction)(function () {
        try {
          return dataFunction(self);
        } catch (e) {
          handleError(e);
          return undefined;
        }
      }, /*#__PURE__*/function () {
        var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(data, mobxReactionHandle) {
          var thisInProgress, result;
          return _regenerator.default.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  if (inProgress && !inProgress.signal.aborted) {
                    inProgress.abort();
                  }

                  if ((0, _mobxStateTree.isAlive)(self)) {
                    _context.next = 3;
                    break;
                  }

                  return _context.abrupt("return");

                case 3:
                  inProgress = new AbortController();
                  thisInProgress = inProgress;
                  startedFunction(thisInProgress);
                  _context.prev = 6;
                  _context.next = 9;
                  return asyncReactionFunction(data, thisInProgress.signal, self, mobxReactionHandle);

                case 9:
                  result = _context.sent;
                  (0, _aborting.checkAbortSignal)(thisInProgress.signal);

                  if ((0, _mobxStateTree.isAlive)(self)) {
                    successFunction(result);
                  }

                  _context.next = 18;
                  break;

                case 14:
                  _context.prev = 14;
                  _context.t0 = _context["catch"](6);

                  if (thisInProgress && !thisInProgress.signal.aborted) {
                    thisInProgress.abort();
                  }

                  handleError(_context.t0);

                case 18:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, null, [[6, 14]]);
        }));

        return function (_x, _x2) {
          return _ref.apply(this, arguments);
        };
      }(), reactionOptions);
      (0, _mobxStateTree.addDisposer)(self, reactionDisposer);
      (0, _mobxStateTree.addDisposer)(self, function () {
        if (inProgress && !inProgress.signal.aborted) {
          inProgress.abort();
        }
      });
    }

    function renameRegionIfNeeded(refNameMap, region) {
      if ((0, _mobxStateTree.isStateTreeNode)(region) && !(0, _mobxStateTree.isAlive)(region)) {
        return region;
      }

      if (region && refNameMap && refNameMap[region.refName]) {
        // clone the region so we don't modify it
        if ((0, _mobxStateTree.isStateTreeNode)(region)) {
          region = _objectSpread({}, (0, _mobxStateTree.getSnapshot)(region));
        } else {
          region = _objectSpread({}, region);
        } // modify it directly in the container


        var newRef = refNameMap[region.refName];

        if (newRef) {
          return _objectSpread(_objectSpread({}, region), {}, {
            refName: newRef,
            originalRefName: region.refName
          });
        }
      }

      return region;
    }

    function renameRegionsIfNeeded(_x3, _x4) {
      return _renameRegionsIfNeeded.apply(this, arguments);
    }

    function _renameRegionsIfNeeded() {
      _renameRegionsIfNeeded = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3(assemblyManager, args) {
        var _args$regions, regions, adapterConfig, assemblyNames, assemblyMaps;

        return _regenerator.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _args$regions = args.regions, regions = _args$regions === void 0 ? [] : _args$regions, adapterConfig = args.adapterConfig;

                if (args.sessionId) {
                  _context3.next = 3;
                  break;
                }

                throw new Error('sessionId is required');

              case 3:
                assemblyNames = regions.map(function (region) {
                  return region.assemblyName;
                });
                _context3.t0 = Object;
                _context3.next = 7;
                return Promise.all(assemblyNames.map( /*#__PURE__*/function () {
                  var _ref3 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(assemblyName) {
                    return _regenerator.default.wrap(function _callee2$(_context2) {
                      while (1) {
                        switch (_context2.prev = _context2.next) {
                          case 0:
                            _context2.t0 = assemblyName;
                            _context2.next = 3;
                            return assemblyManager.getRefNameMapForAdapter(adapterConfig, assemblyName, args);

                          case 3:
                            _context2.t1 = _context2.sent;
                            return _context2.abrupt("return", [_context2.t0, _context2.t1]);

                          case 5:
                          case "end":
                            return _context2.stop();
                        }
                      }
                    }, _callee2);
                  }));

                  return function (_x8) {
                    return _ref3.apply(this, arguments);
                  };
                }()));

              case 7:
                _context3.t1 = _context3.sent;
                assemblyMaps = _context3.t0.fromEntries.call(_context3.t0, _context3.t1);
                return _context3.abrupt("return", _objectSpread(_objectSpread({}, args), {}, {
                  regions: regions.map(function (region) {
                    return renameRegionIfNeeded(assemblyMaps[region.assemblyName], region);
                  })
                }));

              case 10:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));
      return _renameRegionsIfNeeded.apply(this, arguments);
    }

    function minmax(a, b) {
      return [Math.min(a, b), Math.max(a, b)];
    }

    function stringify(_ref2) {
      var refName = _ref2.refName,
          coord = _ref2.coord,
          oob = _ref2.oob;
      return "".concat(refName, ":").concat(coord.toLocaleString('en-US')).concat(oob ? ' (out of bounds)' : '');
    } // this is recommended in a later comment in https://github.com/electron/electron/issues/2288
    // for detecting electron in a renderer process, which is the one that has node enabled for us
    // const isElectron = process.versions.electron
    // const i2 = process.versions.hasOwnProperty('electron')


    var isElectron = /electron/i.test(typeof navigator !== 'undefined' ? navigator.userAgent : '');
    exports.isElectron = isElectron;

    function revcom(seqString) {
      return complement(seqString).split('').reverse().join('');
    }

    var complement = function () {
      var complementRegex = /[ACGT]/gi; // from bioperl: tr/acgtrymkswhbvdnxACGTRYMKSWHBVDNX/tgcayrkmswdvbhnxTGCAYRKMSWDVBHNX/
      // generated with:
      // perl -MJSON -E '@l = split "","acgtrymkswhbvdnxACGTRYMKSWHBVDNX"; print to_json({ map { my $in = $_; tr/acgtrymkswhbvdnxACGTRYMKSWHBVDNX/tgcayrkmswdvbhnxTGCAYRKMSWDVBHNX/; $in => $_ } @l})'

      var complementTable = {
        S: 'S',
        w: 'w',
        T: 'A',
        r: 'y',
        a: 't',
        N: 'N',
        K: 'M',
        x: 'x',
        d: 'h',
        Y: 'R',
        V: 'B',
        y: 'r',
        M: 'K',
        h: 'd',
        k: 'm',
        C: 'G',
        g: 'c',
        t: 'a',
        A: 'T',
        n: 'n',
        W: 'W',
        X: 'X',
        m: 'k',
        v: 'b',
        B: 'V',
        s: 's',
        H: 'D',
        c: 'g',
        D: 'H',
        b: 'v',
        R: 'Y',
        G: 'C'
      };
      return function (seqString) {
        return seqString.replace(complementRegex, function (m) {
          return complementTable[m] || '';
        });
      };
    }();

    exports.complement = complement;

    function blobToDataURL(blob) {
      var a = new FileReader();
      return new Promise(function (resolve, reject) {
        a.onload = function (e) {
          if (e.target) {
            resolve(e.target.result);
          } else {
            reject(new Error('unknown result reading blob from canvas'));
          }
        };

        a.readAsDataURL(blob);
      });
    } // requires immediate execution in jest environment, because (hypothesis) it
    // otherwise listens for prerendered_canvas but reads empty pixels, and doesn't
    // get the contents of the canvas


    var rIC = typeof jest === 'undefined' ? // @ts-ignore
    typeof window !== 'undefined' && window.requestIdleCallback ? // @ts-ignore
    window.requestIdleCallback : function (cb) {
      return setTimeout(function () {
        return cb();
      }, 1);
    } : function (cb) {
      return cb();
    }; // xref https://gist.github.com/tophtucker/62f93a4658387bb61e4510c37e2e97cf

    exports.rIC = rIC;

    function measureText(str) {
      var fontSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;
      // prettier-ignore
      var widths = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2796875, 0.2765625, 0.3546875, 0.5546875, 0.5546875, 0.8890625, 0.665625, 0.190625, 0.3328125, 0.3328125, 0.3890625, 0.5828125, 0.2765625, 0.3328125, 0.2765625, 0.3015625, 0.5546875, 0.5546875, 0.5546875, 0.5546875, 0.5546875, 0.5546875, 0.5546875, 0.5546875, 0.5546875, 0.5546875, 0.2765625, 0.2765625, 0.584375, 0.5828125, 0.584375, 0.5546875, 1.0140625, 0.665625, 0.665625, 0.721875, 0.721875, 0.665625, 0.609375, 0.7765625, 0.721875, 0.2765625, 0.5, 0.665625, 0.5546875, 0.8328125, 0.721875, 0.7765625, 0.665625, 0.7765625, 0.721875, 0.665625, 0.609375, 0.721875, 0.665625, 0.94375, 0.665625, 0.665625, 0.609375, 0.2765625, 0.3546875, 0.2765625, 0.4765625, 0.5546875, 0.3328125, 0.5546875, 0.5546875, 0.5, 0.5546875, 0.5546875, 0.2765625, 0.5546875, 0.5546875, 0.221875, 0.240625, 0.5, 0.221875, 0.8328125, 0.5546875, 0.5546875, 0.5546875, 0.5546875, 0.3328125, 0.5, 0.2765625, 0.5546875, 0.5, 0.721875, 0.5, 0.5, 0.5, 0.3546875, 0.259375, 0.353125, 0.5890625];
      var avg = 0.5279276315789471;
      return String(str).split('').map(function (c) {
        return c.charCodeAt(0) < widths.length ? widths[c.charCodeAt(0)] : avg;
      }).reduce(function (cur, acc) {
        return acc + cur;
      }, 0) * fontSize;
    }

    var defaultStarts = ['ATG'];
    exports.defaultStarts = defaultStarts;
    var defaultStops = ['TAA', 'TAG', 'TGA'];
    exports.defaultStops = defaultStops;
    var defaultCodonTable = {
      TCA: 'S',
      TCC: 'S',
      TCG: 'S',
      TCT: 'S',
      TTC: 'F',
      TTT: 'F',
      TTA: 'L',
      TTG: 'L',
      TAC: 'Y',
      TAT: 'Y',
      TAA: '*',
      TAG: '*',
      TGC: 'C',
      TGT: 'C',
      TGA: '*',
      TGG: 'W',
      CTA: 'L',
      CTC: 'L',
      CTG: 'L',
      CTT: 'L',
      CCA: 'P',
      CCC: 'P',
      CCG: 'P',
      CCT: 'P',
      CAC: 'H',
      CAT: 'H',
      CAA: 'Q',
      CAG: 'Q',
      CGA: 'R',
      CGC: 'R',
      CGG: 'R',
      CGT: 'R',
      ATA: 'I',
      ATC: 'I',
      ATT: 'I',
      ATG: 'M',
      ACA: 'T',
      ACC: 'T',
      ACG: 'T',
      ACT: 'T',
      AAC: 'N',
      AAT: 'N',
      AAA: 'K',
      AAG: 'K',
      AGC: 'S',
      AGT: 'S',
      AGA: 'R',
      AGG: 'R',
      GTA: 'V',
      GTC: 'V',
      GTG: 'V',
      GTT: 'V',
      GCA: 'A',
      GCC: 'A',
      GCG: 'A',
      GCT: 'A',
      GAC: 'D',
      GAT: 'D',
      GAA: 'E',
      GAG: 'E',
      GGA: 'G',
      GGC: 'G',
      GGG: 'G',
      GGT: 'G'
    };
    /**
     *  take CodonTable above and generate larger codon table that includes
     *  all permutations of upper and lower case nucleotides
     */

    exports.defaultCodonTable = defaultCodonTable;

    function generateCodonTable(table) {
      var tempCodonTable = {};
      Object.keys(table).forEach(function (codon) {
        var aa = table[codon];
        var nucs = [];

        for (var i = 0; i < 3; i++) {
          var nuc = codon.charAt(i);
          nucs[i] = [];
          nucs[i][0] = nuc.toUpperCase();
          nucs[i][1] = nuc.toLowerCase();
        }

        for (var _i = 0; _i < 2; _i++) {
          var n0 = nucs[0][_i];

          for (var j = 0; j < 2; j++) {
            var n1 = nucs[1][j];

            for (var k = 0; k < 2; k++) {
              var n2 = nucs[2][k];
              var triplet = n0 + n1 + n2;
              tempCodonTable[triplet] = aa;
            }
          }
        }
      });
      return tempCodonTable;
    } // call statusCallback with current status and clear when finished


    function updateStatus(_x5, _x6, _x7) {
      return _updateStatus.apply(this, arguments);
    }

    function _updateStatus() {
      _updateStatus = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4(statusMsg, statusCallback, fn) {
        var result;
        return _regenerator.default.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                statusCallback(statusMsg);
                _context4.next = 3;
                return fn();

              case 3:
                result = _context4.sent;
                statusCallback('');
                return _context4.abrupt("return", result);

              case 6:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));
      return _updateStatus.apply(this, arguments);
    }

    function hashCode(str) {
      var hash = 0;
      var i;
      var chr;

      if (str.length === 0) {
        return hash;
      }

      for (i = 0; i < str.length; i++) {
        chr = str.charCodeAt(i);
        hash = (hash << 5) - hash + chr;
        hash |= 0; // Convert to 32bit integer
      }

      return hash;
    }

    function objectHash(obj) {
      return "".concat(hashCode(JSON.stringify(obj)));
    }
    }(util$3));

    var _interopRequireDefault$s = interopRequireDefault.exports;

    var _typeof$b = _typeof$e.exports;

    Object.defineProperty(Menu$2, "__esModule", {
      value: true
    });
    Menu$2.default = void 0;

    var _extends2$4 = _interopRequireDefault$s(_extends$1.exports);

    var _objectWithoutProperties2$3 = _interopRequireDefault$s(objectWithoutProperties.exports);

    var _defineProperty2$8 = _interopRequireDefault$s(defineProperty$1.exports);

    var _slicedToArray2$c = _interopRequireDefault$s(slicedToArray.exports);

    var _react$f = _interopRequireWildcard$i(React__default["default"]);

    var _core$9 = require$$9$2;

    var _ArrowRight = _interopRequireDefault$s(ArrowRight);

    var _CheckBox = _interopRequireDefault$s(CheckBox);

    var _CheckBoxOutlineBlank = _interopRequireDefault$s(CheckBoxOutlineBlank);

    var _RadioButtonChecked = _interopRequireDefault$s(RadioButtonChecked);

    var _RadioButtonUnchecked = _interopRequireDefault$s(RadioButtonUnchecked);

    var _util$3 = util$3;

    var _excluded$4 = ["open", "onClose", "menuItems", "onMenuItemClick"];

    function _getRequireWildcardCache$b(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$b = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

    function _interopRequireWildcard$i(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof$b(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$b(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

    function ownKeys$8(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

    function _objectSpread$8(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$8(Object(source), true).forEach(function (key) { (0, _defineProperty2$8.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$8(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

    var useStyles$c = (0, _core$9.makeStyles)({
      paper: {
        position: 'fixed',
        overflowY: 'auto',
        overflowX: 'hidden',
        // So we see the popover when it's empty.
        minWidth: 16,
        minHeight: 16,
        maxWidth: 'calc(100% - 32px)',
        maxHeight: 'calc(100% - 32px)',
        top: 0,
        left: 0,
        // We disable the focus ring for mouse, touch and keyboard users.
        outline: 0
      },
      menuItemEndDecoration: {
        position: 'absolute',
        right: 16,
        top: '50%',
        transform: 'translateY(-50%)',
        padding: 2,
        marginRight: -12,
        display: 'inline-flex'
      }
    });

    function MenuItemEndDecoration(props) {
      var classes = useStyles$c();
      var type = props.type;
      var checked;
      var disabled;

      if ('checked' in props) {
        checked = props.checked;
        disabled = props.disabled;
      }

      var icon;

      if (type === 'subMenu') {
        icon = /*#__PURE__*/_react$f.default.createElement(_ArrowRight.default, {
          color: "action"
        });
      } else if (type === 'checkbox') {
        if (checked) {
          var color = disabled ? 'inherit' : 'secondary';
          icon = /*#__PURE__*/_react$f.default.createElement(_CheckBox.default, {
            color: color
          });
        } else {
          icon = /*#__PURE__*/_react$f.default.createElement(_CheckBoxOutlineBlank.default, {
            color: "action"
          });
        }
      } else if (type === 'radio') {
        if (checked) {
          var _color = disabled ? 'inherit' : 'secondary';

          icon = /*#__PURE__*/_react$f.default.createElement(_RadioButtonChecked.default, {
            color: _color
          });
        } else {
          icon = /*#__PURE__*/_react$f.default.createElement(_RadioButtonUnchecked.default, {
            color: "action"
          });
        }
      }

      return /*#__PURE__*/_react$f.default.createElement("div", {
        className: classes.menuItemEndDecoration
      }, icon);
    }

    function findNextValidIdx(menuItems, currentIdx) {
      var idx = menuItems.slice(currentIdx + 1).findIndex(function (menuItem) {
        return menuItem.type !== 'divider' && menuItem.type !== 'subHeader' && !menuItem.disabled;
      });

      if (idx === -1) {
        return idx;
      }

      return currentIdx + 1 + idx;
    }

    function findPreviousValidIdx(menuItems, currentIdx) {
      return (0, _util$3.findLastIndex)(menuItems.slice(0, currentIdx), function (menuItem) {
        return menuItem.type !== 'divider' && menuItem.type !== 'subHeader' && !menuItem.disabled;
      });
    }

    var MenuPage = /*#__PURE__*/_react$f.default.forwardRef(function (props, ref) {
      var _useState = (0, _react$f.useState)(),
          _useState2 = (0, _slicedToArray2$c.default)(_useState, 2),
          subMenuAnchorEl = _useState2[0],
          setSubMenuAnchorEl = _useState2[1];

      var _useState3 = (0, _react$f.useState)(),
          _useState4 = (0, _slicedToArray2$c.default)(_useState3, 2),
          openSubMenuIdx = _useState4[0],
          setOpenSubMenuIdx = _useState4[1];

      var _useState5 = (0, _react$f.useState)(false),
          _useState6 = (0, _slicedToArray2$c.default)(_useState5, 2),
          isSubMenuOpen = _useState6[0],
          setIsSubMenuOpen = _useState6[1];

      var _useState7 = (0, _react$f.useState)(),
          _useState8 = (0, _slicedToArray2$c.default)(_useState7, 2),
          selectedMenuItemIdx = _useState8[0],
          setSelectedMenuItemIdx = _useState8[1];

      var _useState9 = (0, _react$f.useState)(),
          _useState10 = (0, _slicedToArray2$c.default)(_useState9, 2),
          position = _useState10[0],
          setPosition = _useState10[1];

      var paperRef = (0, _react$f.useRef)();
      var classes = useStyles$c();
      var menuItems = props.menuItems,
          onMenuItemClick = props.onMenuItemClick,
          open = props.open,
          onClose = props.onClose,
          anchorEl = props.anchorEl,
          _props$top = props.top,
          top = _props$top === void 0 ? false : _props$top;
      (0, _react$f.useEffect)(function () {
        if (!open) {
          setSubMenuAnchorEl(undefined);
          setOpenSubMenuIdx(undefined);
        }
      }, [open]);
      (0, _react$f.useEffect)(function () {
        var shouldSubMenuBeOpen = open && Boolean(subMenuAnchorEl);
        var timer;

        if (shouldSubMenuBeOpen && !isSubMenuOpen) {
          timer = setTimeout(function () {
            setIsSubMenuOpen(true);
          }, 300);
        } else if (!shouldSubMenuBeOpen && isSubMenuOpen) {
          timer = setTimeout(function () {
            setIsSubMenuOpen(false);
          }, 300);
        }

        return function () {
          clearTimeout(timer);
        };
      }, [isSubMenuOpen, open, subMenuAnchorEl]);
      (0, _react$f.useEffect)(function () {
        if (anchorEl) {
          var rect = anchorEl.getBoundingClientRect();

          if (position) {
            if (rect.top !== position.top || rect.left + rect.width !== position.left) {
              setPosition({
                top: rect.top,
                left: rect.left + rect.width
              });
            }
          } else {
            setPosition({
              top: rect.top,
              left: rect.left + rect.width
            });
          }
        } else if (!position) {
          setPosition({});
        }
      }, [position, anchorEl]);
      var hasEndDecoration = menuItems.some(function (menuItem) {
        return 'subMenu' in menuItem || menuItem.type === 'checkbox' || menuItem.type === 'radio';
      });
      var hasIcon = menuItems.some(function (menuItem) {
        return 'icon' in menuItem && menuItem.icon;
      });
      var menuItemStyle = {};

      if (hasEndDecoration) {
        menuItemStyle.paddingRight = 48;
      }

      function handleClick(callback) {
        return function (event) {
          onMenuItemClick(event, callback);
        };
      }

      var ListContents = /*#__PURE__*/_react$f.default.createElement(_react$f.default.Fragment, null, /*#__PURE__*/_react$f.default.createElement(_core$9.MenuList, {
        autoFocusItem: open && !isSubMenuOpen
      }, menuItems.sort(function (a, b) {
        return (b.priority || 0) - (a.priority || 0);
      }).map(function (menuItem, idx) {
        if (menuItem.type === 'divider') {
          return /*#__PURE__*/_react$f.default.createElement(_core$9.Divider, {
            key: "divider-".concat(idx),
            component: "li"
          });
        }

        if (menuItem.type === 'subHeader') {
          return /*#__PURE__*/_react$f.default.createElement(_core$9.ListSubheader, {
            key: "subHeader-".concat(menuItem.label, "-").concat(idx)
          }, menuItem.label);
        }

        var icon = null;
        var endDecoration = null;

        if (menuItem.icon) {
          var Icon = menuItem.icon;
          icon = /*#__PURE__*/_react$f.default.createElement(_core$9.ListItemIcon, null, /*#__PURE__*/_react$f.default.createElement(Icon, null));
        }

        if ('subMenu' in menuItem) {
          endDecoration = /*#__PURE__*/_react$f.default.createElement(MenuItemEndDecoration, {
            type: "subMenu"
          });
        } else if (menuItem.type === 'checkbox' || menuItem.type === 'radio') {
          endDecoration = /*#__PURE__*/_react$f.default.createElement(MenuItemEndDecoration, {
            type: menuItem.type,
            checked: menuItem.checked,
            disabled: menuItem.disabled
          });
        }

        var onClick = 'onClick' in menuItem ? handleClick(menuItem.onClick) : undefined;
        return /*#__PURE__*/_react$f.default.createElement(_core$9.MenuItem, {
          key: menuItem.label,
          style: menuItemStyle,
          selected: idx === selectedMenuItemIdx,
          onClick: onClick,
          onMouseMove: function onMouseMove(e) {
            if (e.currentTarget !== document.activeElement) {
              e.currentTarget.focus();
              setSelectedMenuItemIdx(idx);
            }

            if ('subMenu' in menuItem) {
              if (openSubMenuIdx !== idx) {
                setSubMenuAnchorEl(e.currentTarget);
                setOpenSubMenuIdx(idx);
              }
            } else {
              setSubMenuAnchorEl(undefined);
              setOpenSubMenuIdx(undefined);
            }
          },
          onKeyDown: function onKeyDown(e) {
            if (e.key === 'ArrowLeft' || e.key === 'Escape') {
              onClose && onClose(e, 'escapeKeyDown');
            } else if (e.key === 'ArrowUp') {
              setSelectedMenuItemIdx(findPreviousValidIdx(menuItems, idx));
            } else if (e.key === 'ArrowDown') {
              var a = findNextValidIdx(menuItems, idx);
              setSelectedMenuItemIdx(a);
            } else if ('subMenu' in menuItem) {
              if (e.key === 'ArrowRight' || e.key === 'Enter') {
                setSubMenuAnchorEl(e.currentTarget);
                setOpenSubMenuIdx(idx);
                setIsSubMenuOpen(true);
              }
            }
          },
          disabled: Boolean(menuItem.disabled)
        }, icon, /*#__PURE__*/_react$f.default.createElement(_core$9.ListItemText, {
          primary: menuItem.label,
          secondary: menuItem.subLabel,
          inset: hasIcon && !menuItem.icon
        }), endDecoration);
      })), menuItems.map(function (menuItem, idx) {
        var subMenu = null;

        if ('subMenu' in menuItem) {
          subMenu = /*#__PURE__*/_react$f.default.createElement(MenuPage, {
            key: menuItem.label,
            anchorEl: subMenuAnchorEl,
            open: isSubMenuOpen && openSubMenuIdx === idx,
            onClose: function onClose() {
              setIsSubMenuOpen(false);
              setSubMenuAnchorEl(undefined);
            },
            onMenuItemClick: onMenuItemClick,
            menuItems: menuItem.subMenu
          });
        }

        return subMenu;
      }));

      if (top) {
        return ListContents;
      }

      return /*#__PURE__*/_react$f.default.createElement(_core$9.Grow, {
        in: open,
        style: {
          transformOrigin: "0 0 0"
        },
        ref: ref
      }, /*#__PURE__*/_react$f.default.createElement(_core$9.Paper, {
        elevation: 8,
        ref: paperRef,
        className: classes.paper,
        style: _objectSpread$8({}, position)
      }, ListContents));
    });

    function Menu$1(props) {
      var open = props.open,
          onClose = props.onClose,
          menuItems = props.menuItems,
          onMenuItemClick = props.onMenuItemClick,
          other = (0, _objectWithoutProperties2$3.default)(props, _excluded$4);
      return /*#__PURE__*/_react$f.default.createElement(_core$9.Popover, (0, _extends2$4.default)({
        transitionDuration: 0,
        open: open,
        onClose: onClose,
        BackdropProps: {
          invisible: true
        }
      }, other), /*#__PURE__*/_react$f.default.createElement(MenuPage, {
        open: open,
        onClose: onClose,
        menuItems: menuItems,
        onMenuItemClick: onMenuItemClick,
        top: true
      }));
    }

    var _default$m = Menu$1;
    Menu$2.default = _default$m;

    var _interopRequireDefault$r = interopRequireDefault.exports;

    var _typeof$a = _typeof$e.exports;

    Object.defineProperty(DropDownMenu$1, "__esModule", {
      value: true
    });
    DropDownMenu$1.default = void 0;

    var _slicedToArray2$b = _interopRequireDefault$r(slicedToArray.exports);

    var _react$e = _interopRequireWildcard$h(React__default["default"]);

    var _core$8 = require$$9$2;

    var _styles$4 = require$$11;

    var _ArrowDropDown$1 = _interopRequireDefault$r(ArrowDropDown);

    var _mobxReact$7 = require$$13;

    var _propTypes$2 = _interopRequireDefault$r(propTypes.exports);

    var _Menu$1 = _interopRequireDefault$r(Menu$2);

    function _getRequireWildcardCache$a(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$a = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

    function _interopRequireWildcard$h(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof$a(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$a(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

    var useStyles$b = (0, _styles$4.makeStyles)(function (theme) {
      return {
        root: {
          display: 'flex'
        },
        buttonRoot: {
          '&:hover': {
            backgroundColor: (0, _styles$4.alpha)(theme.palette.primary.contrastText, theme.palette.action.hoverOpacity),
            '@media (hover: none)': {
              backgroundColor: 'transparent'
            }
          }
        }
      };
    });

    function DropDownMenu(_ref) {
      var menuTitle = _ref.menuTitle,
          session = _ref.session,
          menuItems = _ref.menuItems;

      var _useState = (0, _react$e.useState)(false),
          _useState2 = (0, _slicedToArray2$b.default)(_useState, 2),
          open = _useState2[0],
          setOpen = _useState2[1];

      var anchorEl = (0, _react$e.useRef)(null);
      var classes = useStyles$b();

      function handleToggle() {
        setOpen(!open);
      }

      function handleMenuItemClick(_event, callback) {
        callback(session);
        handleClose();
      }

      function handleClose() {
        setOpen(false);
      }

      return /*#__PURE__*/_react$e.default.createElement("div", {
        className: classes.root
      }, /*#__PURE__*/_react$e.default.createElement(_core$8.Button, {
        ref: anchorEl,
        onClick: handleToggle,
        color: "inherit",
        "data-testid": "dropDownMenuButton",
        classes: {
          root: classes.buttonRoot
        }
      }, menuTitle, /*#__PURE__*/_react$e.default.createElement(_ArrowDropDown$1.default, null)), /*#__PURE__*/_react$e.default.createElement(_Menu$1.default, {
        anchorEl: anchorEl.current,
        anchorOrigin: {
          vertical: 'bottom',
          horizontal: 'left'
        },
        onMenuItemClick: handleMenuItemClick,
        open: open,
        onClose: handleClose,
        menuItems: menuItems
      }));
    }

    DropDownMenu.propTypes = {
      menuTitle: _propTypes$2.default.string.isRequired,
      menuItems: _mobxReact$7.PropTypes.arrayOrObservableArray.isRequired,
      session: _mobxReact$7.PropTypes.objectOrObservableObject.isRequired
    };

    var _default$l = (0, _mobxReact$7.observer)(DropDownMenu);

    DropDownMenu$1.default = _default$l;

    var EditableTypography$1 = {};

    var require$$6$2 = /*@__PURE__*/getAugmentedNamespace(InputBase);

    var require$$7$1 = /*@__PURE__*/getAugmentedNamespace(Typography);

    var _interopRequireDefault$q = interopRequireDefault.exports;

    var _typeof$9 = _typeof$e.exports;

    Object.defineProperty(EditableTypography$1, "__esModule", {
      value: true
    });
    EditableTypography$1.default = void 0;

    var _extends2$3 = _interopRequireDefault$q(_extends$1.exports);

    var _defineProperty2$7 = _interopRequireDefault$q(defineProperty$1.exports);

    var _slicedToArray2$a = _interopRequireDefault$q(slicedToArray.exports);

    var _objectWithoutProperties2$2 = _interopRequireDefault$q(objectWithoutProperties.exports);

    var _InputBase = _interopRequireDefault$q(require$$6$2);

    var _Typography = _interopRequireDefault$q(require$$7$1);

    var _styles$3 = require$$11;

    var _react$d = _interopRequireWildcard$g(React__default["default"]);

    var _excluded$3 = ["value", "setValue", "variant"];

    function _getRequireWildcardCache$9(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$9 = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

    function _interopRequireWildcard$g(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof$9(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$9(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

    function ownKeys$7(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

    function _objectSpread$7(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$7(Object(source), true).forEach(function (key) { (0, _defineProperty2$7.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$7(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

    var useStyles$a = (0, _styles$3.makeStyles)(function (theme) {
      return {
        input: {},
        inputBase: {},
        typography: {
          top: 6,
          left: 2,
          position: 'absolute',
          whiteSpace: 'nowrap',
          visibility: 'hidden'
        },
        inputRoot: {
          padding: theme.spacing(0.5)
        },
        inputFocused: {
          borderStyle: 'solid',
          borderRadius: theme.shape.borderRadius,
          borderWidth: 2
        }
      };
    });

    // using forwardRef so that MUI Tooltip can wrap this component
    var EditableTypography = /*#__PURE__*/_react$d.default.forwardRef(function (props, ref) {
      var value = props.value,
          setValue = props.setValue,
          variant = props.variant,
          other = (0, _objectWithoutProperties2$2.default)(props, _excluded$3);

      var _useState = (0, _react$d.useState)(),
          _useState2 = (0, _slicedToArray2$a.default)(_useState, 2),
          editedValue = _useState2[0],
          setEditedValue = _useState2[1];

      var _useState3 = (0, _react$d.useState)(0),
          _useState4 = (0, _slicedToArray2$a.default)(_useState3, 2),
          width = _useState4[0],
          setWidth = _useState4[1];

      var _useState5 = (0, _react$d.useState)(null),
          _useState6 = (0, _slicedToArray2$a.default)(_useState5, 2),
          sizerNode = _useState6[0],
          setSizerNode = _useState6[1];

      var _useState7 = (0, _react$d.useState)(null),
          _useState8 = (0, _slicedToArray2$a.default)(_useState7, 2),
          inputNode = _useState8[0],
          setInputNode = _useState8[1];

      var _useState9 = (0, _react$d.useState)(false),
          _useState10 = (0, _slicedToArray2$a.default)(_useState9, 2),
          blur = _useState10[0],
          setBlur = _useState10[1];

      (0, _react$d.useEffect)(function () {
        if (blur) {
          inputNode && inputNode.blur();
          setBlur(false);
        }
      }, [blur, inputNode]);
      var classes = useStyles$a(props);
      var theme = (0, _styles$3.useTheme)();
      var clientWidth = sizerNode && sizerNode.clientWidth;

      if (clientWidth && clientWidth !== width) {
        setWidth(clientWidth);
      }

      var sizerRef = function sizerRef(node) {
        setSizerNode(node);
      };

      var inputRef = function inputRef(node) {
        setInputNode(node);
      };

      function handleBlur() {
        if (editedValue && editedValue !== value) {
          setValue(editedValue);
        }

        setEditedValue(undefined);
      }

      function handleKeyDown(event) {
        if (event.key === 'Enter') {
          inputNode && inputNode.blur();
        } else if (event.key === 'Escape') {
          setEditedValue(undefined);
          setBlur(true);
        }
      }

      function handleChange(event) {
        setEditedValue(event.target.value);
      }

      return /*#__PURE__*/_react$d.default.createElement("div", (0, _extends2$3.default)({}, other, {
        ref: ref
      }), /*#__PURE__*/_react$d.default.createElement("div", {
        style: {
          position: 'relative'
        }
      }, /*#__PURE__*/_react$d.default.createElement(_Typography.default, {
        ref: sizerRef,
        component: "span",
        variant: variant,
        className: classes.typography
      }, editedValue === undefined ? value : editedValue)), /*#__PURE__*/_react$d.default.createElement(_InputBase.default, {
        inputRef: inputRef,
        className: classes.inputBase,
        inputProps: {
          style: _objectSpread$7({
            width: width
          }, variant && variant !== 'inherit' && variant !== 'srOnly' ? theme.typography[variant] : {})
        },
        classes: {
          input: classes.input,
          root: classes.inputRoot,
          focused: classes.inputFocused
        },
        value: editedValue === undefined ? value : editedValue,
        onChange: handleChange,
        onKeyDown: handleKeyDown,
        onBlur: handleBlur
      }));
    });

    var _default$k = EditableTypography;
    EditableTypography$1.default = _default$k;

    var Snackbar = {};

    /**
     * @ignore - internal component.
     */

    var SuccessOutlinedIcon = createSvgIcon$1( /*#__PURE__*/React__namespace.createElement("path", {
      d: "M20,12A8,8 0 0,1 12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4C12.76,4 13.5,4.11 14.2, 4.31L15.77,2.74C14.61,2.26 13.34,2 12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0, 0 22,12M7.91,10.08L6.5,11.5L11,16L21,6L19.59,4.58L11,13.17L7.91,10.08Z"
    }), 'SuccessOutlined');

    /**
     * @ignore - internal component.
     */

    var ReportProblemOutlinedIcon = createSvgIcon$1( /*#__PURE__*/React__namespace.createElement("path", {
      d: "M12 5.99L19.53 19H4.47L12 5.99M12 2L1 21h22L12 2zm1 14h-2v2h2v-2zm0-6h-2v4h2v-4z"
    }), 'ReportProblemOutlined');

    /**
     * @ignore - internal component.
     */

    var ErrorOutlineIcon = createSvgIcon$1( /*#__PURE__*/React__namespace.createElement("path", {
      d: "M11 15h2v2h-2zm0-8h2v6h-2zm.99-5C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
    }), 'ErrorOutline');

    /**
     * @ignore - internal component.
     */

    var InfoOutlinedIcon = createSvgIcon$1( /*#__PURE__*/React__namespace.createElement("path", {
      d: "M11,9H13V7H11M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20, 12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10, 10 0 0,0 12,2M11,17H13V11H11V17Z"
    }), 'InfoOutlined');

    /**
     * @ignore - internal component.
     */

    var CloseIcon = createSvgIcon$1( /*#__PURE__*/React__namespace.createElement("path", {
      d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
    }), 'Close');

    var styles$m = function styles(theme) {
      var getColor = theme.palette.type === 'light' ? darken : lighten;
      var getBackgroundColor = theme.palette.type === 'light' ? lighten : darken;
      return {
        /* Styles applied to the root element. */
        root: _extends$3({}, theme.typography.body2, {
          borderRadius: theme.shape.borderRadius,
          backgroundColor: 'transparent',
          display: 'flex',
          padding: '6px 16px'
        }),

        /* Styles applied to the root element if `variant="standard"` and `color="success"`. */
        standardSuccess: {
          color: getColor(theme.palette.success.main, 0.6),
          backgroundColor: getBackgroundColor(theme.palette.success.main, 0.9),
          '& $icon': {
            color: theme.palette.success.main
          }
        },

        /* Styles applied to the root element if `variant="standard"` and `color="info"`. */
        standardInfo: {
          color: getColor(theme.palette.info.main, 0.6),
          backgroundColor: getBackgroundColor(theme.palette.info.main, 0.9),
          '& $icon': {
            color: theme.palette.info.main
          }
        },

        /* Styles applied to the root element if `variant="standard"` and `color="warning"`. */
        standardWarning: {
          color: getColor(theme.palette.warning.main, 0.6),
          backgroundColor: getBackgroundColor(theme.palette.warning.main, 0.9),
          '& $icon': {
            color: theme.palette.warning.main
          }
        },

        /* Styles applied to the root element if `variant="standard"` and `color="error"`. */
        standardError: {
          color: getColor(theme.palette.error.main, 0.6),
          backgroundColor: getBackgroundColor(theme.palette.error.main, 0.9),
          '& $icon': {
            color: theme.palette.error.main
          }
        },

        /* Styles applied to the root element if `variant="outlined"` and `color="success"`. */
        outlinedSuccess: {
          color: getColor(theme.palette.success.main, 0.6),
          border: "1px solid ".concat(theme.palette.success.main),
          '& $icon': {
            color: theme.palette.success.main
          }
        },

        /* Styles applied to the root element if `variant="outlined"` and `color="info"`. */
        outlinedInfo: {
          color: getColor(theme.palette.info.main, 0.6),
          border: "1px solid ".concat(theme.palette.info.main),
          '& $icon': {
            color: theme.palette.info.main
          }
        },

        /* Styles applied to the root element if `variant="outlined"` and `color="warning"`. */
        outlinedWarning: {
          color: getColor(theme.palette.warning.main, 0.6),
          border: "1px solid ".concat(theme.palette.warning.main),
          '& $icon': {
            color: theme.palette.warning.main
          }
        },

        /* Styles applied to the root element if `variant="outlined"` and `color="error"`. */
        outlinedError: {
          color: getColor(theme.palette.error.main, 0.6),
          border: "1px solid ".concat(theme.palette.error.main),
          '& $icon': {
            color: theme.palette.error.main
          }
        },

        /* Styles applied to the root element if `variant="filled"` and `color="success"`. */
        filledSuccess: {
          color: '#fff',
          fontWeight: theme.typography.fontWeightMedium,
          backgroundColor: theme.palette.success.main
        },

        /* Styles applied to the root element if `variant="filled"` and `color="info"`. */
        filledInfo: {
          color: '#fff',
          fontWeight: theme.typography.fontWeightMedium,
          backgroundColor: theme.palette.info.main
        },

        /* Styles applied to the root element if `variant="filled"` and `color="warning"`. */
        filledWarning: {
          color: '#fff',
          fontWeight: theme.typography.fontWeightMedium,
          backgroundColor: theme.palette.warning.main
        },

        /* Styles applied to the root element if `variant="filled"` and `color="error"`. */
        filledError: {
          color: '#fff',
          fontWeight: theme.typography.fontWeightMedium,
          backgroundColor: theme.palette.error.main
        },

        /* Styles applied to the icon wrapper element. */
        icon: {
          marginRight: 12,
          padding: '7px 0',
          display: 'flex',
          fontSize: 22,
          opacity: 0.9
        },

        /* Styles applied to the message wrapper element. */
        message: {
          padding: '8px 0'
        },

        /* Styles applied to the action wrapper element if `action` is provided. */
        action: {
          display: 'flex',
          alignItems: 'center',
          marginLeft: 'auto',
          paddingLeft: 16,
          marginRight: -8
        }
      };
    };
    var defaultIconMapping = {
      success: /*#__PURE__*/React__namespace.createElement(SuccessOutlinedIcon, {
        fontSize: "inherit"
      }),
      warning: /*#__PURE__*/React__namespace.createElement(ReportProblemOutlinedIcon, {
        fontSize: "inherit"
      }),
      error: /*#__PURE__*/React__namespace.createElement(ErrorOutlineIcon, {
        fontSize: "inherit"
      }),
      info: /*#__PURE__*/React__namespace.createElement(InfoOutlinedIcon, {
        fontSize: "inherit"
      })
    };

    var _ref$1 = /*#__PURE__*/React__namespace.createElement(CloseIcon, {
      fontSize: "small"
    });

    var Alert$1 = /*#__PURE__*/React__namespace.forwardRef(function Alert(props, ref) {
      var action = props.action,
          children = props.children,
          classes = props.classes,
          className = props.className,
          _props$closeText = props.closeText,
          closeText = _props$closeText === void 0 ? 'Close' : _props$closeText,
          color = props.color,
          icon = props.icon,
          _props$iconMapping = props.iconMapping,
          iconMapping = _props$iconMapping === void 0 ? defaultIconMapping : _props$iconMapping,
          onClose = props.onClose,
          _props$role = props.role,
          role = _props$role === void 0 ? 'alert' : _props$role,
          _props$severity = props.severity,
          severity = _props$severity === void 0 ? 'success' : _props$severity,
          _props$variant = props.variant,
          variant = _props$variant === void 0 ? 'standard' : _props$variant,
          other = _objectWithoutProperties(props, ["action", "children", "classes", "className", "closeText", "color", "icon", "iconMapping", "onClose", "role", "severity", "variant"]);

      return /*#__PURE__*/React__namespace.createElement(M, _extends$3({
        role: role,
        square: true,
        elevation: 0,
        className: r$1(classes.root, classes["".concat(variant).concat(capitalize(color || severity))], className),
        ref: ref
      }, other), icon !== false ? /*#__PURE__*/React__namespace.createElement("div", {
        className: classes.icon
      }, icon || iconMapping[severity] || defaultIconMapping[severity]) : null, /*#__PURE__*/React__namespace.createElement("div", {
        className: classes.message
      }, children), action != null ? /*#__PURE__*/React__namespace.createElement("div", {
        className: classes.action
      }, action) : null, action == null && onClose ? /*#__PURE__*/React__namespace.createElement("div", {
        className: classes.action
      }, /*#__PURE__*/React__namespace.createElement(IconButton$1, {
        size: "small",
        "aria-label": closeText,
        title: closeText,
        color: "inherit",
        onClick: onClose
      }, _ref$1)) : null);
    });
    process.env.NODE_ENV !== "production" ? Alert$1.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * The action to display. It renders after the message, at the end of the alert.
       */
      action: re.node,

      /**
       * The content of the component.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * Override the default label for the *close popup* icon button.
       *
       * For localization purposes, you can use the provided [translations](/guides/localization/).
       */
      closeText: re.string,

      /**
       * The main color for the alert. Unless provided, the value is taken from the `severity` prop.
       */
      color: re.oneOf(['error', 'info', 'success', 'warning']),

      /**
       * Override the icon displayed before the children.
       * Unless provided, the icon is mapped to the value of the `severity` prop.
       */
      icon: re.node,

      /**
       * The component maps the `severity` prop to a range of different icons,
       * for instance success to `<SuccessOutlined>`.
       * If you wish to change this mapping, you can provide your own.
       * Alternatively, you can use the `icon` prop to override the icon displayed.
       */
      iconMapping: re.shape({
        error: re.node,
        info: re.node,
        success: re.node,
        warning: re.node
      }),

      /**
       * Callback fired when the component requests to be closed.
       * When provided and no `action` prop is set, a close icon button is displayed that triggers the callback when clicked.
       *
       * @param {object} event The event source of the callback.
       */
      onClose: re.func,

      /**
       * The ARIA role attribute of the element.
       */
      role: re.string,

      /**
       * The severity of the alert. This defines the color and icon used.
       */
      severity: re.oneOf(['error', 'info', 'success', 'warning']),

      /**
       * The variant to use.
       */
      variant: re.oneOf(['filled', 'outlined', 'standard'])
    } : void 0;
    var Alert$2 = withStyles(styles$m, {
      name: 'MuiAlert'
    })(Alert$1);

    var Alert = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Alert$2
    });

    var require$$6$1 = /*@__PURE__*/getAugmentedNamespace(Alert);

    var _interopRequireDefault$p = interopRequireDefault.exports;

    var _typeof$8 = _typeof$e.exports;

    Object.defineProperty(Snackbar, "__esModule", {
      value: true
    });
    Snackbar.default = void 0;

    var _slicedToArray2$9 = _interopRequireDefault$p(slicedToArray.exports);

    var _react$c = _interopRequireWildcard$f(React__default["default"]);

    var _core$7 = require$$9$2;

    var _Close$1 = _interopRequireDefault$p(Close);

    var _Alert = _interopRequireDefault$p(require$$6$1);

    var _mobxReact$6 = require$$13;

    function _getRequireWildcardCache$8(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$8 = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

    function _interopRequireWildcard$f(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof$8(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$8(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

    function MessageSnackbar(_ref) {
      var session = _ref.session;

      var _useState = (0, _react$c.useState)(false),
          _useState2 = (0, _slicedToArray2$9.default)(_useState, 2),
          open = _useState2[0],
          setOpen = _useState2[1];

      var _useState3 = (0, _react$c.useState)(),
          _useState4 = (0, _slicedToArray2$9.default)(_useState3, 2),
          snackbarMessage = _useState4[0],
          setSnackbarMessage = _useState4[1];

      var popSnackbarMessage = session.popSnackbarMessage,
          snackbarMessages = session.snackbarMessages;
      var latestMessage = snackbarMessages.length ? snackbarMessages[snackbarMessages.length - 1] : null;
      (0, _react$c.useEffect)(function () {
        var timeoutId;

        if (snackbarMessage) {
          if (!latestMessage) {
            setSnackbarMessage(undefined);
          } else if (snackbarMessage[0] !== latestMessage[0]) {
            setOpen(false);
            timeoutId = setTimeout(function () {
              setSnackbarMessage(latestMessage);
              setOpen(true);
            }, 100);
          }
        } else if (latestMessage) {
          setSnackbarMessage(latestMessage);
          setOpen(true);
        }

        return function () {
          clearTimeout(timeoutId);
        };
      }, [latestMessage, snackbarMessage]);

      var handleClose = function handleClose(_event, reason) {
        if (reason === 'clickaway') {
          return;
        }

        popSnackbarMessage();
        setOpen(false);
      };

      var _ref2 = snackbarMessage || [],
          _ref3 = (0, _slicedToArray2$9.default)(_ref2, 2),
          message = _ref3[0],
          level = _ref3[1];

      return /*#__PURE__*/_react$c.default.createElement(_core$7.Snackbar, {
        open: open && !!message,
        onClose: handleClose,
        action: /*#__PURE__*/_react$c.default.createElement(_core$7.IconButton, {
          "aria-label": "close",
          color: "inherit",
          onClick: handleClose
        }, /*#__PURE__*/_react$c.default.createElement(_Close$1.default, null))
      }, /*#__PURE__*/_react$c.default.createElement(_Alert.default, {
        onClose: handleClose,
        severity: level || 'warning'
      }, message));
    }

    var _default$j = (0, _mobxReact$6.observer)(MessageSnackbar);

    Snackbar.default = _default$j;

    var ViewContainer = {};

    var Menu = {};

    var _interopRequireDefault$o = interopRequireDefault.exports;

    var _interopRequireWildcard$e = interopRequireWildcard.exports;

    Object.defineProperty(Menu, "__esModule", {
      value: true
    });
    Menu.default = void 0;

    var React$6 = _interopRequireWildcard$e(React__default["default"]);

    var _createSvgIcon$6 = _interopRequireDefault$o(createSvgIcon);

    var _default$i = (0, _createSvgIcon$6.default)( /*#__PURE__*/React$6.createElement("path", {
      d: "M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"
    }), 'Menu');

    Menu.default = _default$i;

    /**
     * A collection of shims that provide minimal functionality of the ES6 collections.
     *
     * These implementations are not meant to be used outside of the ResizeObserver
     * modules as they cover only a limited range of use cases.
     */
    /* eslint-disable require-jsdoc, valid-jsdoc */
    var MapShim = (function () {
        if (typeof Map !== 'undefined') {
            return Map;
        }
        /**
         * Returns index in provided array that matches the specified key.
         *
         * @param {Array<Array>} arr
         * @param {*} key
         * @returns {number}
         */
        function getIndex(arr, key) {
            var result = -1;
            arr.some(function (entry, index) {
                if (entry[0] === key) {
                    result = index;
                    return true;
                }
                return false;
            });
            return result;
        }
        return /** @class */ (function () {
            function class_1() {
                this.__entries__ = [];
            }
            Object.defineProperty(class_1.prototype, "size", {
                /**
                 * @returns {boolean}
                 */
                get: function () {
                    return this.__entries__.length;
                },
                enumerable: true,
                configurable: true
            });
            /**
             * @param {*} key
             * @returns {*}
             */
            class_1.prototype.get = function (key) {
                var index = getIndex(this.__entries__, key);
                var entry = this.__entries__[index];
                return entry && entry[1];
            };
            /**
             * @param {*} key
             * @param {*} value
             * @returns {void}
             */
            class_1.prototype.set = function (key, value) {
                var index = getIndex(this.__entries__, key);
                if (~index) {
                    this.__entries__[index][1] = value;
                }
                else {
                    this.__entries__.push([key, value]);
                }
            };
            /**
             * @param {*} key
             * @returns {void}
             */
            class_1.prototype.delete = function (key) {
                var entries = this.__entries__;
                var index = getIndex(entries, key);
                if (~index) {
                    entries.splice(index, 1);
                }
            };
            /**
             * @param {*} key
             * @returns {void}
             */
            class_1.prototype.has = function (key) {
                return !!~getIndex(this.__entries__, key);
            };
            /**
             * @returns {void}
             */
            class_1.prototype.clear = function () {
                this.__entries__.splice(0);
            };
            /**
             * @param {Function} callback
             * @param {*} [ctx=null]
             * @returns {void}
             */
            class_1.prototype.forEach = function (callback, ctx) {
                if (ctx === void 0) { ctx = null; }
                for (var _i = 0, _a = this.__entries__; _i < _a.length; _i++) {
                    var entry = _a[_i];
                    callback.call(ctx, entry[1], entry[0]);
                }
            };
            return class_1;
        }());
    })();

    /**
     * Detects whether window and document objects are available in current environment.
     */
    var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && window.document === document;

    // Returns global object of a current environment.
    var global$1 = (function () {
        if (typeof global !== 'undefined' && global.Math === Math) {
            return global;
        }
        if (typeof self !== 'undefined' && self.Math === Math) {
            return self;
        }
        if (typeof window !== 'undefined' && window.Math === Math) {
            return window;
        }
        // eslint-disable-next-line no-new-func
        return Function('return this')();
    })();

    /**
     * A shim for the requestAnimationFrame which falls back to the setTimeout if
     * first one is not supported.
     *
     * @returns {number} Requests' identifier.
     */
    var requestAnimationFrame$1 = (function () {
        if (typeof requestAnimationFrame === 'function') {
            // It's required to use a bounded function because IE sometimes throws
            // an "Invalid calling object" error if rAF is invoked without the global
            // object on the left hand side.
            return requestAnimationFrame.bind(global$1);
        }
        return function (callback) { return setTimeout(function () { return callback(Date.now()); }, 1000 / 60); };
    })();

    // Defines minimum timeout before adding a trailing call.
    var trailingTimeout = 2;
    /**
     * Creates a wrapper function which ensures that provided callback will be
     * invoked only once during the specified delay period.
     *
     * @param {Function} callback - Function to be invoked after the delay period.
     * @param {number} delay - Delay after which to invoke callback.
     * @returns {Function}
     */
    function throttle (callback, delay) {
        var leadingCall = false, trailingCall = false, lastCallTime = 0;
        /**
         * Invokes the original callback function and schedules new invocation if
         * the "proxy" was called during current request.
         *
         * @returns {void}
         */
        function resolvePending() {
            if (leadingCall) {
                leadingCall = false;
                callback();
            }
            if (trailingCall) {
                proxy();
            }
        }
        /**
         * Callback invoked after the specified delay. It will further postpone
         * invocation of the original function delegating it to the
         * requestAnimationFrame.
         *
         * @returns {void}
         */
        function timeoutCallback() {
            requestAnimationFrame$1(resolvePending);
        }
        /**
         * Schedules invocation of the original function.
         *
         * @returns {void}
         */
        function proxy() {
            var timeStamp = Date.now();
            if (leadingCall) {
                // Reject immediately following calls.
                if (timeStamp - lastCallTime < trailingTimeout) {
                    return;
                }
                // Schedule new call to be in invoked when the pending one is resolved.
                // This is important for "transitions" which never actually start
                // immediately so there is a chance that we might miss one if change
                // happens amids the pending invocation.
                trailingCall = true;
            }
            else {
                leadingCall = true;
                trailingCall = false;
                setTimeout(timeoutCallback, delay);
            }
            lastCallTime = timeStamp;
        }
        return proxy;
    }

    // Minimum delay before invoking the update of observers.
    var REFRESH_DELAY = 20;
    // A list of substrings of CSS properties used to find transition events that
    // might affect dimensions of observed elements.
    var transitionKeys = ['top', 'right', 'bottom', 'left', 'width', 'height', 'size', 'weight'];
    // Check if MutationObserver is available.
    var mutationObserverSupported = typeof MutationObserver !== 'undefined';
    /**
     * Singleton controller class which handles updates of ResizeObserver instances.
     */
    var ResizeObserverController = /** @class */ (function () {
        /**
         * Creates a new instance of ResizeObserverController.
         *
         * @private
         */
        function ResizeObserverController() {
            /**
             * Indicates whether DOM listeners have been added.
             *
             * @private {boolean}
             */
            this.connected_ = false;
            /**
             * Tells that controller has subscribed for Mutation Events.
             *
             * @private {boolean}
             */
            this.mutationEventsAdded_ = false;
            /**
             * Keeps reference to the instance of MutationObserver.
             *
             * @private {MutationObserver}
             */
            this.mutationsObserver_ = null;
            /**
             * A list of connected observers.
             *
             * @private {Array<ResizeObserverSPI>}
             */
            this.observers_ = [];
            this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);
            this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);
        }
        /**
         * Adds observer to observers list.
         *
         * @param {ResizeObserverSPI} observer - Observer to be added.
         * @returns {void}
         */
        ResizeObserverController.prototype.addObserver = function (observer) {
            if (!~this.observers_.indexOf(observer)) {
                this.observers_.push(observer);
            }
            // Add listeners if they haven't been added yet.
            if (!this.connected_) {
                this.connect_();
            }
        };
        /**
         * Removes observer from observers list.
         *
         * @param {ResizeObserverSPI} observer - Observer to be removed.
         * @returns {void}
         */
        ResizeObserverController.prototype.removeObserver = function (observer) {
            var observers = this.observers_;
            var index = observers.indexOf(observer);
            // Remove observer if it's present in registry.
            if (~index) {
                observers.splice(index, 1);
            }
            // Remove listeners if controller has no connected observers.
            if (!observers.length && this.connected_) {
                this.disconnect_();
            }
        };
        /**
         * Invokes the update of observers. It will continue running updates insofar
         * it detects changes.
         *
         * @returns {void}
         */
        ResizeObserverController.prototype.refresh = function () {
            var changesDetected = this.updateObservers_();
            // Continue running updates if changes have been detected as there might
            // be future ones caused by CSS transitions.
            if (changesDetected) {
                this.refresh();
            }
        };
        /**
         * Updates every observer from observers list and notifies them of queued
         * entries.
         *
         * @private
         * @returns {boolean} Returns "true" if any observer has detected changes in
         *      dimensions of it's elements.
         */
        ResizeObserverController.prototype.updateObservers_ = function () {
            // Collect observers that have active observations.
            var activeObservers = this.observers_.filter(function (observer) {
                return observer.gatherActive(), observer.hasActive();
            });
            // Deliver notifications in a separate cycle in order to avoid any
            // collisions between observers, e.g. when multiple instances of
            // ResizeObserver are tracking the same element and the callback of one
            // of them changes content dimensions of the observed target. Sometimes
            // this may result in notifications being blocked for the rest of observers.
            activeObservers.forEach(function (observer) { return observer.broadcastActive(); });
            return activeObservers.length > 0;
        };
        /**
         * Initializes DOM listeners.
         *
         * @private
         * @returns {void}
         */
        ResizeObserverController.prototype.connect_ = function () {
            // Do nothing if running in a non-browser environment or if listeners
            // have been already added.
            if (!isBrowser || this.connected_) {
                return;
            }
            // Subscription to the "Transitionend" event is used as a workaround for
            // delayed transitions. This way it's possible to capture at least the
            // final state of an element.
            document.addEventListener('transitionend', this.onTransitionEnd_);
            window.addEventListener('resize', this.refresh);
            if (mutationObserverSupported) {
                this.mutationsObserver_ = new MutationObserver(this.refresh);
                this.mutationsObserver_.observe(document, {
                    attributes: true,
                    childList: true,
                    characterData: true,
                    subtree: true
                });
            }
            else {
                document.addEventListener('DOMSubtreeModified', this.refresh);
                this.mutationEventsAdded_ = true;
            }
            this.connected_ = true;
        };
        /**
         * Removes DOM listeners.
         *
         * @private
         * @returns {void}
         */
        ResizeObserverController.prototype.disconnect_ = function () {
            // Do nothing if running in a non-browser environment or if listeners
            // have been already removed.
            if (!isBrowser || !this.connected_) {
                return;
            }
            document.removeEventListener('transitionend', this.onTransitionEnd_);
            window.removeEventListener('resize', this.refresh);
            if (this.mutationsObserver_) {
                this.mutationsObserver_.disconnect();
            }
            if (this.mutationEventsAdded_) {
                document.removeEventListener('DOMSubtreeModified', this.refresh);
            }
            this.mutationsObserver_ = null;
            this.mutationEventsAdded_ = false;
            this.connected_ = false;
        };
        /**
         * "Transitionend" event handler.
         *
         * @private
         * @param {TransitionEvent} event
         * @returns {void}
         */
        ResizeObserverController.prototype.onTransitionEnd_ = function (_a) {
            var _b = _a.propertyName, propertyName = _b === void 0 ? '' : _b;
            // Detect whether transition may affect dimensions of an element.
            var isReflowProperty = transitionKeys.some(function (key) {
                return !!~propertyName.indexOf(key);
            });
            if (isReflowProperty) {
                this.refresh();
            }
        };
        /**
         * Returns instance of the ResizeObserverController.
         *
         * @returns {ResizeObserverController}
         */
        ResizeObserverController.getInstance = function () {
            if (!this.instance_) {
                this.instance_ = new ResizeObserverController();
            }
            return this.instance_;
        };
        /**
         * Holds reference to the controller's instance.
         *
         * @private {ResizeObserverController}
         */
        ResizeObserverController.instance_ = null;
        return ResizeObserverController;
    }());

    /**
     * Defines non-writable/enumerable properties of the provided target object.
     *
     * @param {Object} target - Object for which to define properties.
     * @param {Object} props - Properties to be defined.
     * @returns {Object} Target object.
     */
    var defineConfigurable = (function (target, props) {
        for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {
            var key = _a[_i];
            Object.defineProperty(target, key, {
                value: props[key],
                enumerable: false,
                writable: false,
                configurable: true
            });
        }
        return target;
    });

    /**
     * Returns the global object associated with provided element.
     *
     * @param {Object} target
     * @returns {Object}
     */
    var getWindowOf$1 = (function (target) {
        // Assume that the element is an instance of Node, which means that it
        // has the "ownerDocument" property from which we can retrieve a
        // corresponding global object.
        var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView;
        // Return the local global object if it's not possible extract one from
        // provided element.
        return ownerGlobal || global$1;
    });

    // Placeholder of an empty content rectangle.
    var emptyRect = createRectInit(0, 0, 0, 0);
    /**
     * Converts provided string to a number.
     *
     * @param {number|string} value
     * @returns {number}
     */
    function toFloat(value) {
        return parseFloat(value) || 0;
    }
    /**
     * Extracts borders size from provided styles.
     *
     * @param {CSSStyleDeclaration} styles
     * @param {...string} positions - Borders positions (top, right, ...)
     * @returns {number}
     */
    function getBordersSize(styles) {
        var positions = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            positions[_i - 1] = arguments[_i];
        }
        return positions.reduce(function (size, position) {
            var value = styles['border-' + position + '-width'];
            return size + toFloat(value);
        }, 0);
    }
    /**
     * Extracts paddings sizes from provided styles.
     *
     * @param {CSSStyleDeclaration} styles
     * @returns {Object} Paddings box.
     */
    function getPaddings(styles) {
        var positions = ['top', 'right', 'bottom', 'left'];
        var paddings = {};
        for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {
            var position = positions_1[_i];
            var value = styles['padding-' + position];
            paddings[position] = toFloat(value);
        }
        return paddings;
    }
    /**
     * Calculates content rectangle of provided SVG element.
     *
     * @param {SVGGraphicsElement} target - Element content rectangle of which needs
     *      to be calculated.
     * @returns {DOMRectInit}
     */
    function getSVGContentRect(target) {
        var bbox = target.getBBox();
        return createRectInit(0, 0, bbox.width, bbox.height);
    }
    /**
     * Calculates content rectangle of provided HTMLElement.
     *
     * @param {HTMLElement} target - Element for which to calculate the content rectangle.
     * @returns {DOMRectInit}
     */
    function getHTMLElementContentRect(target) {
        // Client width & height properties can't be
        // used exclusively as they provide rounded values.
        var clientWidth = target.clientWidth, clientHeight = target.clientHeight;
        // By this condition we can catch all non-replaced inline, hidden and
        // detached elements. Though elements with width & height properties less
        // than 0.5 will be discarded as well.
        //
        // Without it we would need to implement separate methods for each of
        // those cases and it's not possible to perform a precise and performance
        // effective test for hidden elements. E.g. even jQuery's ':visible' filter
        // gives wrong results for elements with width & height less than 0.5.
        if (!clientWidth && !clientHeight) {
            return emptyRect;
        }
        var styles = getWindowOf$1(target).getComputedStyle(target);
        var paddings = getPaddings(styles);
        var horizPad = paddings.left + paddings.right;
        var vertPad = paddings.top + paddings.bottom;
        // Computed styles of width & height are being used because they are the
        // only dimensions available to JS that contain non-rounded values. It could
        // be possible to utilize the getBoundingClientRect if only it's data wasn't
        // affected by CSS transformations let alone paddings, borders and scroll bars.
        var width = toFloat(styles.width), height = toFloat(styles.height);
        // Width & height include paddings and borders when the 'border-box' box
        // model is applied (except for IE).
        if (styles.boxSizing === 'border-box') {
            // Following conditions are required to handle Internet Explorer which
            // doesn't include paddings and borders to computed CSS dimensions.
            //
            // We can say that if CSS dimensions + paddings are equal to the "client"
            // properties then it's either IE, and thus we don't need to subtract
            // anything, or an element merely doesn't have paddings/borders styles.
            if (Math.round(width + horizPad) !== clientWidth) {
                width -= getBordersSize(styles, 'left', 'right') + horizPad;
            }
            if (Math.round(height + vertPad) !== clientHeight) {
                height -= getBordersSize(styles, 'top', 'bottom') + vertPad;
            }
        }
        // Following steps can't be applied to the document's root element as its
        // client[Width/Height] properties represent viewport area of the window.
        // Besides, it's as well not necessary as the <html> itself neither has
        // rendered scroll bars nor it can be clipped.
        if (!isDocumentElement(target)) {
            // In some browsers (only in Firefox, actually) CSS width & height
            // include scroll bars size which can be removed at this step as scroll
            // bars are the only difference between rounded dimensions + paddings
            // and "client" properties, though that is not always true in Chrome.
            var vertScrollbar = Math.round(width + horizPad) - clientWidth;
            var horizScrollbar = Math.round(height + vertPad) - clientHeight;
            // Chrome has a rather weird rounding of "client" properties.
            // E.g. for an element with content width of 314.2px it sometimes gives
            // the client width of 315px and for the width of 314.7px it may give
            // 314px. And it doesn't happen all the time. So just ignore this delta
            // as a non-relevant.
            if (Math.abs(vertScrollbar) !== 1) {
                width -= vertScrollbar;
            }
            if (Math.abs(horizScrollbar) !== 1) {
                height -= horizScrollbar;
            }
        }
        return createRectInit(paddings.left, paddings.top, width, height);
    }
    /**
     * Checks whether provided element is an instance of the SVGGraphicsElement.
     *
     * @param {Element} target - Element to be checked.
     * @returns {boolean}
     */
    var isSVGGraphicsElement = (function () {
        // Some browsers, namely IE and Edge, don't have the SVGGraphicsElement
        // interface.
        if (typeof SVGGraphicsElement !== 'undefined') {
            return function (target) { return target instanceof getWindowOf$1(target).SVGGraphicsElement; };
        }
        // If it's so, then check that element is at least an instance of the
        // SVGElement and that it has the "getBBox" method.
        // eslint-disable-next-line no-extra-parens
        return function (target) { return (target instanceof getWindowOf$1(target).SVGElement &&
            typeof target.getBBox === 'function'); };
    })();
    /**
     * Checks whether provided element is a document element (<html>).
     *
     * @param {Element} target - Element to be checked.
     * @returns {boolean}
     */
    function isDocumentElement(target) {
        return target === getWindowOf$1(target).document.documentElement;
    }
    /**
     * Calculates an appropriate content rectangle for provided html or svg element.
     *
     * @param {Element} target - Element content rectangle of which needs to be calculated.
     * @returns {DOMRectInit}
     */
    function getContentRect$1(target) {
        if (!isBrowser) {
            return emptyRect;
        }
        if (isSVGGraphicsElement(target)) {
            return getSVGContentRect(target);
        }
        return getHTMLElementContentRect(target);
    }
    /**
     * Creates rectangle with an interface of the DOMRectReadOnly.
     * Spec: https://drafts.fxtf.org/geometry/#domrectreadonly
     *
     * @param {DOMRectInit} rectInit - Object with rectangle's x/y coordinates and dimensions.
     * @returns {DOMRectReadOnly}
     */
    function createReadOnlyRect(_a) {
        var x = _a.x, y = _a.y, width = _a.width, height = _a.height;
        // If DOMRectReadOnly is available use it as a prototype for the rectangle.
        var Constr = typeof DOMRectReadOnly !== 'undefined' ? DOMRectReadOnly : Object;
        var rect = Object.create(Constr.prototype);
        // Rectangle's properties are not writable and non-enumerable.
        defineConfigurable(rect, {
            x: x, y: y, width: width, height: height,
            top: y,
            right: x + width,
            bottom: height + y,
            left: x
        });
        return rect;
    }
    /**
     * Creates DOMRectInit object based on the provided dimensions and the x/y coordinates.
     * Spec: https://drafts.fxtf.org/geometry/#dictdef-domrectinit
     *
     * @param {number} x - X coordinate.
     * @param {number} y - Y coordinate.
     * @param {number} width - Rectangle's width.
     * @param {number} height - Rectangle's height.
     * @returns {DOMRectInit}
     */
    function createRectInit(x, y, width, height) {
        return { x: x, y: y, width: width, height: height };
    }

    /**
     * Class that is responsible for computations of the content rectangle of
     * provided DOM element and for keeping track of it's changes.
     */
    var ResizeObservation = /** @class */ (function () {
        /**
         * Creates an instance of ResizeObservation.
         *
         * @param {Element} target - Element to be observed.
         */
        function ResizeObservation(target) {
            /**
             * Broadcasted width of content rectangle.
             *
             * @type {number}
             */
            this.broadcastWidth = 0;
            /**
             * Broadcasted height of content rectangle.
             *
             * @type {number}
             */
            this.broadcastHeight = 0;
            /**
             * Reference to the last observed content rectangle.
             *
             * @private {DOMRectInit}
             */
            this.contentRect_ = createRectInit(0, 0, 0, 0);
            this.target = target;
        }
        /**
         * Updates content rectangle and tells whether it's width or height properties
         * have changed since the last broadcast.
         *
         * @returns {boolean}
         */
        ResizeObservation.prototype.isActive = function () {
            var rect = getContentRect$1(this.target);
            this.contentRect_ = rect;
            return (rect.width !== this.broadcastWidth ||
                rect.height !== this.broadcastHeight);
        };
        /**
         * Updates 'broadcastWidth' and 'broadcastHeight' properties with a data
         * from the corresponding properties of the last observed content rectangle.
         *
         * @returns {DOMRectInit} Last observed content rectangle.
         */
        ResizeObservation.prototype.broadcastRect = function () {
            var rect = this.contentRect_;
            this.broadcastWidth = rect.width;
            this.broadcastHeight = rect.height;
            return rect;
        };
        return ResizeObservation;
    }());

    var ResizeObserverEntry = /** @class */ (function () {
        /**
         * Creates an instance of ResizeObserverEntry.
         *
         * @param {Element} target - Element that is being observed.
         * @param {DOMRectInit} rectInit - Data of the element's content rectangle.
         */
        function ResizeObserverEntry(target, rectInit) {
            var contentRect = createReadOnlyRect(rectInit);
            // According to the specification following properties are not writable
            // and are also not enumerable in the native implementation.
            //
            // Property accessors are not being used as they'd require to define a
            // private WeakMap storage which may cause memory leaks in browsers that
            // don't support this type of collections.
            defineConfigurable(this, { target: target, contentRect: contentRect });
        }
        return ResizeObserverEntry;
    }());

    var ResizeObserverSPI = /** @class */ (function () {
        /**
         * Creates a new instance of ResizeObserver.
         *
         * @param {ResizeObserverCallback} callback - Callback function that is invoked
         *      when one of the observed elements changes it's content dimensions.
         * @param {ResizeObserverController} controller - Controller instance which
         *      is responsible for the updates of observer.
         * @param {ResizeObserver} callbackCtx - Reference to the public
         *      ResizeObserver instance which will be passed to callback function.
         */
        function ResizeObserverSPI(callback, controller, callbackCtx) {
            /**
             * Collection of resize observations that have detected changes in dimensions
             * of elements.
             *
             * @private {Array<ResizeObservation>}
             */
            this.activeObservations_ = [];
            /**
             * Registry of the ResizeObservation instances.
             *
             * @private {Map<Element, ResizeObservation>}
             */
            this.observations_ = new MapShim();
            if (typeof callback !== 'function') {
                throw new TypeError('The callback provided as parameter 1 is not a function.');
            }
            this.callback_ = callback;
            this.controller_ = controller;
            this.callbackCtx_ = callbackCtx;
        }
        /**
         * Starts observing provided element.
         *
         * @param {Element} target - Element to be observed.
         * @returns {void}
         */
        ResizeObserverSPI.prototype.observe = function (target) {
            if (!arguments.length) {
                throw new TypeError('1 argument required, but only 0 present.');
            }
            // Do nothing if current environment doesn't have the Element interface.
            if (typeof Element === 'undefined' || !(Element instanceof Object)) {
                return;
            }
            if (!(target instanceof getWindowOf$1(target).Element)) {
                throw new TypeError('parameter 1 is not of type "Element".');
            }
            var observations = this.observations_;
            // Do nothing if element is already being observed.
            if (observations.has(target)) {
                return;
            }
            observations.set(target, new ResizeObservation(target));
            this.controller_.addObserver(this);
            // Force the update of observations.
            this.controller_.refresh();
        };
        /**
         * Stops observing provided element.
         *
         * @param {Element} target - Element to stop observing.
         * @returns {void}
         */
        ResizeObserverSPI.prototype.unobserve = function (target) {
            if (!arguments.length) {
                throw new TypeError('1 argument required, but only 0 present.');
            }
            // Do nothing if current environment doesn't have the Element interface.
            if (typeof Element === 'undefined' || !(Element instanceof Object)) {
                return;
            }
            if (!(target instanceof getWindowOf$1(target).Element)) {
                throw new TypeError('parameter 1 is not of type "Element".');
            }
            var observations = this.observations_;
            // Do nothing if element is not being observed.
            if (!observations.has(target)) {
                return;
            }
            observations.delete(target);
            if (!observations.size) {
                this.controller_.removeObserver(this);
            }
        };
        /**
         * Stops observing all elements.
         *
         * @returns {void}
         */
        ResizeObserverSPI.prototype.disconnect = function () {
            this.clearActive();
            this.observations_.clear();
            this.controller_.removeObserver(this);
        };
        /**
         * Collects observation instances the associated element of which has changed
         * it's content rectangle.
         *
         * @returns {void}
         */
        ResizeObserverSPI.prototype.gatherActive = function () {
            var _this = this;
            this.clearActive();
            this.observations_.forEach(function (observation) {
                if (observation.isActive()) {
                    _this.activeObservations_.push(observation);
                }
            });
        };
        /**
         * Invokes initial callback function with a list of ResizeObserverEntry
         * instances collected from active resize observations.
         *
         * @returns {void}
         */
        ResizeObserverSPI.prototype.broadcastActive = function () {
            // Do nothing if observer doesn't have active observations.
            if (!this.hasActive()) {
                return;
            }
            var ctx = this.callbackCtx_;
            // Create ResizeObserverEntry instance for every active observation.
            var entries = this.activeObservations_.map(function (observation) {
                return new ResizeObserverEntry(observation.target, observation.broadcastRect());
            });
            this.callback_.call(ctx, entries, ctx);
            this.clearActive();
        };
        /**
         * Clears the collection of active observations.
         *
         * @returns {void}
         */
        ResizeObserverSPI.prototype.clearActive = function () {
            this.activeObservations_.splice(0);
        };
        /**
         * Tells whether observer has active observations.
         *
         * @returns {boolean}
         */
        ResizeObserverSPI.prototype.hasActive = function () {
            return this.activeObservations_.length > 0;
        };
        return ResizeObserverSPI;
    }());

    // Registry of internal observers. If WeakMap is not available use current shim
    // for the Map collection as it has all required methods and because WeakMap
    // can't be fully polyfilled anyway.
    var observers = typeof WeakMap !== 'undefined' ? new WeakMap() : new MapShim();
    /**
     * ResizeObserver API. Encapsulates the ResizeObserver SPI implementation
     * exposing only those methods and properties that are defined in the spec.
     */
    var ResizeObserver = /** @class */ (function () {
        /**
         * Creates a new instance of ResizeObserver.
         *
         * @param {ResizeObserverCallback} callback - Callback that is invoked when
         *      dimensions of the observed elements change.
         */
        function ResizeObserver(callback) {
            if (!(this instanceof ResizeObserver)) {
                throw new TypeError('Cannot call a class as a function.');
            }
            if (!arguments.length) {
                throw new TypeError('1 argument required, but only 0 present.');
            }
            var controller = ResizeObserverController.getInstance();
            var observer = new ResizeObserverSPI(callback, controller, this);
            observers.set(this, observer);
        }
        return ResizeObserver;
    }());
    // Expose public methods of ResizeObserver.
    [
        'observe',
        'unobserve',
        'disconnect'
    ].forEach(function (method) {
        ResizeObserver.prototype[method] = function () {
            var _a;
            return (_a = observers.get(this))[method].apply(_a, arguments);
        };
    });

    var index = (function () {
        // Export existing implementation if available.
        if (typeof global$1.ResizeObserver !== 'undefined') {
            return global$1.ResizeObserver;
        }
        return ResizeObserver;
    })();

    var types = ['client', 'offset', 'scroll', 'bounds', 'margin'];
    function getTypes(props) {
      var allowedTypes = [];
      types.forEach(function (type) {
        if (props[type]) {
          allowedTypes.push(type);
        }
      });
      return allowedTypes;
    }

    function getContentRect(node, types) {
      var calculations = {};

      if (types.indexOf('client') > -1) {
        calculations.client = {
          top: node.clientTop,
          left: node.clientLeft,
          width: node.clientWidth,
          height: node.clientHeight
        };
      }

      if (types.indexOf('offset') > -1) {
        calculations.offset = {
          top: node.offsetTop,
          left: node.offsetLeft,
          width: node.offsetWidth,
          height: node.offsetHeight
        };
      }

      if (types.indexOf('scroll') > -1) {
        calculations.scroll = {
          top: node.scrollTop,
          left: node.scrollLeft,
          width: node.scrollWidth,
          height: node.scrollHeight
        };
      }

      if (types.indexOf('bounds') > -1) {
        var rect = node.getBoundingClientRect();
        calculations.bounds = {
          top: rect.top,
          right: rect.right,
          bottom: rect.bottom,
          left: rect.left,
          width: rect.width,
          height: rect.height
        };
      }

      if (types.indexOf('margin') > -1) {
        var styles = getComputedStyle(node);
        calculations.margin = {
          top: styles ? parseInt(styles.marginTop) : 0,
          right: styles ? parseInt(styles.marginRight) : 0,
          bottom: styles ? parseInt(styles.marginBottom) : 0,
          left: styles ? parseInt(styles.marginLeft) : 0
        };
      }

      return calculations;
    }

    /**
     * Returns the global window object associated with provided element.
     */
    function getWindowOf(target) {
      // Assume that the element is an instance of Node, which means that it
      // has the "ownerDocument" property from which we can retrieve a
      // corresponding global object.
      var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView; // Return the local window object if it's not possible extract one from
      // provided element.

      return ownerGlobal || window;
    }

    function withContentRect(types) {
      return function (WrappedComponent) {
        var _class, _temp;

        return _temp = _class =
        /*#__PURE__*/
        function (_Component) {
          _inheritsLoose$1(WithContentRect, _Component);

          function WithContentRect() {
            var _this;

            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }

            _this = _Component.call.apply(_Component, [this].concat(args)) || this;
            _this.state = {
              contentRect: {
                entry: {},
                client: {},
                offset: {},
                scroll: {},
                bounds: {},
                margin: {}
              }
            };
            _this._animationFrameID = null;
            _this._resizeObserver = null;
            _this._node = null;
            _this._window = null;

            _this.measure = function (entries) {
              var contentRect = getContentRect(_this._node, types || getTypes(_this.props));

              if (entries) {
                contentRect.entry = entries[0].contentRect;
              }

              _this._animationFrameID = _this._window.requestAnimationFrame(function () {
                if (_this._resizeObserver !== null) {
                  _this.setState({
                    contentRect: contentRect
                  });

                  if (typeof _this.props.onResize === 'function') {
                    _this.props.onResize(contentRect);
                  }
                }
              });
            };

            _this._handleRef = function (node) {
              if (_this._resizeObserver !== null && _this._node !== null) {
                _this._resizeObserver.unobserve(_this._node);
              }

              _this._node = node;
              _this._window = getWindowOf(_this._node);
              var innerRef = _this.props.innerRef;

              if (innerRef) {
                if (typeof innerRef === 'function') {
                  innerRef(_this._node);
                } else {
                  innerRef.current = _this._node;
                }
              }

              if (_this._resizeObserver !== null && _this._node !== null) {
                _this._resizeObserver.observe(_this._node);
              }
            };

            return _this;
          }

          var _proto = WithContentRect.prototype;

          _proto.componentDidMount = function componentDidMount() {
            this._resizeObserver = this._window !== null && this._window.ResizeObserver ? new this._window.ResizeObserver(this.measure) : new index(this.measure);

            if (this._node !== null) {
              this._resizeObserver.observe(this._node);

              if (typeof this.props.onResize === 'function') {
                this.props.onResize(getContentRect(this._node, types || getTypes(this.props)));
              }
            }
          };

          _proto.componentWillUnmount = function componentWillUnmount() {
            if (this._window !== null) {
              this._window.cancelAnimationFrame(this._animationFrameID);
            }

            if (this._resizeObserver !== null) {
              this._resizeObserver.disconnect();

              this._resizeObserver = null;
            }
          };

          _proto.render = function render() {
            var _this$props = this.props;
                _this$props.innerRef;
                _this$props.onResize;
                var props = _objectWithoutPropertiesLoose$1(_this$props, ["innerRef", "onResize"]);

            return React$i.createElement(WrappedComponent, _extends$3({}, props, {
              measureRef: this._handleRef,
              measure: this.measure,
              contentRect: this.state.contentRect
            }));
          };

          return WithContentRect;
        }(React$i.Component), _class.propTypes = {
          client: re.bool,
          offset: re.bool,
          scroll: re.bool,
          bounds: re.bool,
          margin: re.bool,
          innerRef: re.oneOfType([re.object, re.func]),
          onResize: re.func
        }, _temp;
      };
    }

    var Measure = withContentRect()(function (_ref) {
      var measure = _ref.measure,
          measureRef = _ref.measureRef,
          contentRect = _ref.contentRect,
          children = _ref.children;
      return children({
        measure: measure,
        measureRef: measureRef,
        contentRect: contentRect
      });
    });
    Measure.displayName = 'Measure';
    Measure.propTypes.children = re.func;

    var index_esm = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': Measure,
        withContentRect: withContentRect
    });

    var require$$12$2 = /*@__PURE__*/getAugmentedNamespace(index_esm);

    var _interopRequireDefault$n = interopRequireDefault.exports;

    var _typeof$7 = _typeof$e.exports;

    Object.defineProperty(ViewContainer, "__esModule", {
      value: true
    });
    ViewContainer.default = void 0;

    var _defineProperty2$6 = _interopRequireDefault$n(defineProperty$1.exports);

    var _extends2$2 = _interopRequireDefault$n(_extends$1.exports);

    var _slicedToArray2$8 = _interopRequireDefault$n(slicedToArray.exports);

    var _core$6 = require$$9$2;

    var _Close = _interopRequireDefault$n(Close);

    var _Menu = _interopRequireDefault$n(Menu);

    var _styles$2 = require$$11;

    var _mobxReact$5 = require$$13;

    var _mobxStateTree$3 = require$$0$1;

    var _react$b = _interopRequireWildcard$d(React__default["default"]);

    var _reactMeasure = require$$12$2;

    var _EditableTypography$1 = _interopRequireDefault$n(EditableTypography$1);

    var _Menu2 = _interopRequireDefault$n(Menu$2);

    function _getRequireWildcardCache$7(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$7 = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

    function _interopRequireWildcard$d(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof$7(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$7(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

    function ownKeys$6(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

    function _objectSpread$6(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$6(Object(source), true).forEach(function (key) { (0, _defineProperty2$6.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$6(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

    var useStyles$9 = (0, _core$6.makeStyles)(function (theme) {
      return {
        viewContainer: {
          overflow: 'hidden',
          background: theme.palette.secondary.main,
          margin: theme.spacing(0.5)
        },
        icon: {
          color: theme.palette.secondary.contrastText
        },
        grow: {
          flexGrow: 1
        },
        iconRoot: {
          '&:hover': {
            backgroundColor: (0, _styles$2.alpha)(theme.palette.secondary.contrastText, theme.palette.action.hoverOpacity),
            '@media (hover: none)': {
              backgroundColor: 'transparent'
            }
          }
        },
        input: {
          paddingBottom: 0,
          paddingTop: 2
        },
        inputBase: {
          color: theme.palette.secondary.contrastText
        },
        inputRoot: {
          '&:hover': {
            backgroundColor: theme.palette.secondary.light
          }
        },
        inputFocused: {
          borderColor: theme.palette.primary.main,
          backgroundColor: theme.palette.secondary.light
        }
      };
    });
    var ViewMenu = (0, _mobxReact$5.observer)(function (_ref) {
      var model = _ref.model,
          IconButtonProps = _ref.IconButtonProps,
          IconProps = _ref.IconProps;

      var _useState = (0, _react$b.useState)(),
          _useState2 = (0, _slicedToArray2$8.default)(_useState, 2),
          anchorEl = _useState2[0],
          setAnchorEl = _useState2[1];

      var menuItems = model.menuItems; // <=1.3.3 didn't use a function

      var items = typeof menuItems === 'function' ? menuItems() : menuItems;
      return items !== null && items !== void 0 && items.length ? /*#__PURE__*/_react$b.default.createElement(_react$b.default.Fragment, null, /*#__PURE__*/_react$b.default.createElement(_core$6.IconButton, (0, _extends2$2.default)({}, IconButtonProps, {
        "aria-label": "more",
        "aria-controls": "view-menu",
        "aria-haspopup": "true",
        onClick: function onClick(event) {
          setAnchorEl(event.currentTarget);
        },
        "data-testid": "view_menu_icon"
      }), /*#__PURE__*/_react$b.default.createElement(_Menu.default, IconProps)), /*#__PURE__*/_react$b.default.createElement(_Menu2.default, {
        anchorEl: anchorEl,
        open: Boolean(anchorEl),
        onMenuItemClick: function onMenuItemClick(_event, callback) {
          callback();
          setAnchorEl(undefined);
        },
        onClose: function onClose() {
          setAnchorEl(undefined);
        },
        menuItems: model.menuItems()
      })) : null;
    });

    var _default$h = (0, _reactMeasure.withContentRect)('bounds')((0, _mobxReact$5.observer)(function (_ref2) {
      var view = _ref2.view,
          onClose = _ref2.onClose,
          style = _ref2.style,
          children = _ref2.children,
          contentRect = _ref2.contentRect,
          measureRef = _ref2.measureRef;
      var classes = useStyles$9();
      var theme = (0, _core$6.useTheme)();
      var padWidth = theme.spacing(1);
      var width = 0;

      if (contentRect.bounds) {
        width = contentRect.bounds.width;
      }

      (0, _react$b.useEffect)(function () {
        if (width) {
          if ((0, _mobxStateTree$3.isAlive)(view)) {
            view.setWidth(width - padWidth * 2);
          }
        }
      }, [padWidth, view, width]);
      var scrollRef = (0, _react$b.useRef)(null); // scroll the view into view when first mounted
      // note that this effect will run only once, because of
      // the empty array second param

      (0, _react$b.useEffect)(function () {
        var _scrollRef$current;

        if (scrollRef !== null && scrollRef !== void 0 && (_scrollRef$current = scrollRef.current) !== null && _scrollRef$current !== void 0 && _scrollRef$current.scrollIntoView) {
          scrollRef.current.scrollIntoView({
            block: 'center'
          });
        }
      }, []);
      return /*#__PURE__*/_react$b.default.createElement(_core$6.Paper, {
        elevation: 12,
        ref: measureRef,
        className: classes.viewContainer,
        style: _objectSpread$6(_objectSpread$6({}, style), {}, {
          padding: "0px ".concat(padWidth, "px ").concat(padWidth, "px")
        })
      }, /*#__PURE__*/_react$b.default.createElement("div", {
        ref: scrollRef,
        style: {
          display: 'flex'
        }
      }, /*#__PURE__*/_react$b.default.createElement(ViewMenu, {
        model: view,
        IconButtonProps: {
          classes: {
            root: classes.iconRoot
          },
          edge: 'start'
        },
        IconProps: {
          className: classes.icon
        }
      }), /*#__PURE__*/_react$b.default.createElement("div", {
        className: classes.grow
      }), /*#__PURE__*/_react$b.default.createElement(_core$6.Tooltip, {
        title: "Rename view",
        arrow: true
      }, /*#__PURE__*/_react$b.default.createElement(_EditableTypography$1.default, {
        value: view.displayName || ( // @ts-ignore
        view.assemblyNames ? // @ts-ignore
        view.assemblyNames.join(',') : 'Untitled view'),
        setValue: function setValue(val) {
          view.setDisplayName(val);
        },
        variant: "body2",
        classes: {
          input: classes.input,
          inputBase: classes.inputBase,
          inputRoot: classes.inputRoot,
          inputFocused: classes.inputFocused
        }
      })), /*#__PURE__*/_react$b.default.createElement("div", {
        className: classes.grow
      }), /*#__PURE__*/_react$b.default.createElement(_core$6.IconButton, {
        "data-testid": "close_view",
        classes: {
          root: classes.iconRoot
        },
        edge: "end",
        onClick: onClose
      }, /*#__PURE__*/_react$b.default.createElement(_Close.default, {
        className: classes.icon
      }))), /*#__PURE__*/_react$b.default.createElement(_core$6.Paper, null, children));
    }));

    ViewContainer.default = _default$h;

    var _interopRequireDefault$m = interopRequireDefault.exports;

    var _typeof$6 = _typeof$e.exports;

    Object.defineProperty(App$1, "__esModule", {
      value: true
    });
    App$1.default = void 0;

    var _slicedToArray2$7 = _interopRequireDefault$m(slicedToArray.exports);

    var _react$a = _interopRequireWildcard$c(React__default["default"]);

    var _core$5 = require$$9$2;

    var _Launch = _interopRequireDefault$m(Launch);

    var _mobxReact$4 = require$$13;

    var _mobxStateTree$2 = require$$0$1;

    var _configuration$4 = configuration;

    var _DrawerWidget = _interopRequireDefault$m(DrawerWidget$1);

    var _DropDownMenu = _interopRequireDefault$m(DropDownMenu$1);

    var _EditableTypography = _interopRequireDefault$m(EditableTypography$1);

    var _Logo = Logo$1;

    var _Snackbar = _interopRequireDefault$m(Snackbar);

    var _ViewContainer = _interopRequireDefault$m(ViewContainer);

    function _getRequireWildcardCache$6(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$6 = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

    function _interopRequireWildcard$c(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof$6(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$6(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

    // locals
    var useStyles$8 = (0, _core$5.makeStyles)(function (theme) {
      return {
        '@global': {
          html: {
            'font-family': 'Roboto'
          },

          /* Based on: https://www.digitalocean.com/community/tutorials/css-scrollbars */

          /* The emerging W3C standard
             that is currently Firefox-only */
          '*': {
            'scrollbar-width': 'auto',
            'scrollbar-color': 'rgba(0,0,0,.5) rgba(128,128,128)'
          },

          /* Works on Chrome/Edge/Safari */
          '*::-webkit-scrollbar': {
            '-webkit-appearance': 'none',
            width: '12px'
          },
          '*::-webkit-scrollbar-thumb': {
            'background-color': 'rgba(0,0,0,.5)',
            '-webkit-box-shadow': '0 0 1px rgba(255,255,255,.5)'
          }
        },
        root: {
          display: 'grid',
          height: '100vh',
          width: '100%'
        },
        fabLeft: {
          zIndex: 10000,
          position: 'fixed',
          bottom: theme.spacing(2),
          left: theme.spacing(2)
        },
        fabRight: {
          zIndex: 10000,
          position: 'fixed',
          bottom: theme.spacing(2),
          right: theme.spacing(2)
        },
        menuBarAndComponents: {
          gridColumn: 'main',
          display: 'grid',
          gridTemplateRows: '[menubar] min-content [components] auto',
          height: '100vh'
        },
        menuBar: {
          gridRow: 'menubar'
        },
        components: {
          overflowY: 'auto',
          gridRow: 'components'
        },
        appBar: {
          flexGrow: 1
        },
        grow: {
          flexGrow: 1
        },
        inputBase: {
          color: theme.palette.primary.contrastText
        },
        inputRoot: {
          '&:hover': {
            backgroundColor: theme.palette.primary.light
          }
        },
        inputFocused: {
          borderColor: theme.palette.secondary.main,
          backgroundColor: theme.palette.primary.light
        },
        selectPaper: {
          padding: theme.spacing(4)
        }
      };
    });
    var Logo = (0, _mobxReact$4.observer)(function (_ref) {
      var session = _ref.session;
      var configuration = session.configuration;
      var logoPath = (0, _configuration$4.readConfObject)(configuration, 'logoPath');

      if (!(logoPath !== null && logoPath !== void 0 && logoPath.uri)) {
        return /*#__PURE__*/_react$a.default.createElement(_Logo.LogoFull, {
          variant: "white"
        });
      } else {
        return /*#__PURE__*/_react$a.default.createElement("img", {
          src: logoPath.uri,
          alt: "Custom logo"
        });
      }
    });
    var App = (0, _mobxReact$4.observer)(function (_ref2) {
      var _viewTypes$, _grid;

      var session = _ref2.session,
          _ref2$HeaderButtons = _ref2.HeaderButtons,
          HeaderButtons = _ref2$HeaderButtons === void 0 ? /*#__PURE__*/_react$a.default.createElement("div", null) : _ref2$HeaderButtons;
      var classes = useStyles$8();

      var _getEnv = (0, _mobxStateTree$2.getEnv)(session),
          pluginManager = _getEnv.pluginManager;

      var viewTypes = pluginManager.getElementTypeRecord('view').all();

      var _useState = (0, _react$a.useState)((_viewTypes$ = viewTypes[0]) === null || _viewTypes$ === void 0 ? void 0 : _viewTypes$.name),
          _useState2 = (0, _slicedToArray2$7.default)(_useState, 2),
          value = _useState2[0],
          setValue = _useState2[1];

      var visibleWidget = session.visibleWidget,
          drawerWidth = session.drawerWidth,
          minimized = session.minimized,
          activeWidgets = session.activeWidgets,
          savedSessionNames = session.savedSessionNames,
          name = session.name,
          menus = session.menus,
          views = session.views,
          drawerPosition = session.drawerPosition;

      function handleNameChange(newName) {
        if (savedSessionNames !== null && savedSessionNames !== void 0 && savedSessionNames.includes(newName)) {
          session.notify("Cannot rename session to \"".concat(newName, "\", a saved session with that name already exists"), 'warning');
        } else {
          session.renameCurrentSession(newName);
        }
      }

      var drawerVisible = visibleWidget && !minimized;
      var grid;

      if (drawerPosition === 'right') {
        grid = ["[main] 1fr", drawerVisible ? "[drawer] ".concat(drawerWidth, "px") : undefined];
      } else if (drawerPosition === 'left') {
        grid = [drawerVisible ? "[drawer] ".concat(drawerWidth, "px") : undefined, "[main] 1fr"];
      }

      return /*#__PURE__*/_react$a.default.createElement("div", {
        className: classes.root,
        style: {
          gridTemplateColumns: (_grid = grid) === null || _grid === void 0 ? void 0 : _grid.filter(function (f) {
            return !!f;
          }).join(' ')
        }
      }, drawerVisible && drawerPosition === 'left' ? /*#__PURE__*/_react$a.default.createElement(_DrawerWidget.default, {
        session: session
      }) : null, session.DialogComponent ? /*#__PURE__*/_react$a.default.createElement(_react$a.Suspense, {
        fallback: /*#__PURE__*/_react$a.default.createElement("div", null)
      }, /*#__PURE__*/_react$a.default.createElement(session.DialogComponent, session.DialogProps)) : null, /*#__PURE__*/_react$a.default.createElement("div", {
        className: classes.menuBarAndComponents
      }, /*#__PURE__*/_react$a.default.createElement("div", {
        className: classes.menuBar
      }, /*#__PURE__*/_react$a.default.createElement(_core$5.AppBar, {
        className: classes.appBar,
        position: "static"
      }, /*#__PURE__*/_react$a.default.createElement(_core$5.Toolbar, null, menus.map(function (menu) {
        return /*#__PURE__*/_react$a.default.createElement(_DropDownMenu.default, {
          key: menu.label,
          menuTitle: menu.label,
          menuItems: menu.menuItems,
          session: session
        });
      }), /*#__PURE__*/_react$a.default.createElement("div", {
        className: classes.grow
      }), /*#__PURE__*/_react$a.default.createElement(_core$5.Tooltip, {
        title: "Rename Session",
        arrow: true
      }, /*#__PURE__*/_react$a.default.createElement(_EditableTypography.default, {
        value: name,
        setValue: handleNameChange,
        variant: "body1",
        classes: {
          inputBase: classes.inputBase,
          inputRoot: classes.inputRoot,
          inputFocused: classes.inputFocused
        }
      })), HeaderButtons, /*#__PURE__*/_react$a.default.createElement("div", {
        className: classes.grow
      }), /*#__PURE__*/_react$a.default.createElement("div", {
        style: {
          width: 150,
          maxHeight: 48
        }
      }, /*#__PURE__*/_react$a.default.createElement(Logo, {
        session: session
      }))))), /*#__PURE__*/_react$a.default.createElement("div", {
        className: classes.components
      }, views.length ? views.map(function (view) {
        var viewType = pluginManager.getViewType(view.type);

        if (!viewType) {
          throw new Error("unknown view type ".concat(view.type));
        }

        var ReactComponent = viewType.ReactComponent;
        return (
          /*#__PURE__*/
          // @ts-ignore
          _react$a.default.createElement(_ViewContainer.default, {
            key: "view-".concat(view.id),
            view: view,
            onClose: function onClose() {
              return session.removeView(view);
            }
          }, /*#__PURE__*/_react$a.default.createElement(_react$a.Suspense, {
            fallback: /*#__PURE__*/_react$a.default.createElement("div", null, "Loading...")
          }, /*#__PURE__*/_react$a.default.createElement(ReactComponent, {
            model: view,
            session: session,
            getTrackType: pluginManager.getTrackType
          })))
        );
      }) : /*#__PURE__*/_react$a.default.createElement(_core$5.Paper, {
        className: classes.selectPaper
      }, /*#__PURE__*/_react$a.default.createElement(_core$5.Typography, null, "Select a view to launch"), /*#__PURE__*/_react$a.default.createElement(_core$5.Select, {
        value: value,
        onChange: function onChange(event) {
          return setValue(event.target.value);
        }
      }, viewTypes.map(function (_ref3) {
        var name = _ref3.name;
        return /*#__PURE__*/_react$a.default.createElement(_core$5.MenuItem, {
          key: name,
          value: name
        }, name);
      })), /*#__PURE__*/_react$a.default.createElement(_core$5.Button, {
        onClick: function onClick() {
          session.addView(value, {});
        },
        variant: "contained",
        color: "primary"
      }, "Launch view")), /*#__PURE__*/_react$a.default.createElement("div", {
        style: {
          height: 300
        }
      }))), activeWidgets.size > 0 && minimized ? /*#__PURE__*/_react$a.default.createElement(_core$5.Tooltip, {
        title: "Open drawer widget"
      }, /*#__PURE__*/_react$a.default.createElement(_core$5.Fab, {
        className: drawerPosition === 'right' ? classes.fabRight : classes.fabLeft,
        color: "primary",
        "data-testid": "drawer-maximize",
        onClick: function onClick() {
          return session.showWidgetDrawer();
        }
      }, /*#__PURE__*/_react$a.default.createElement(_Launch.default, null))) : null, drawerVisible && drawerPosition === 'right' ? /*#__PURE__*/_react$a.default.createElement(_DrawerWidget.default, {
        session: session
      }) : null, /*#__PURE__*/_react$a.default.createElement(_Snackbar.default, {
        session: session
      }));
    });
    var _default$g = App;
    App$1.default = _default$g;

    var FileSelector$2 = {};

    var FileSelector$1 = {};

    var styles$l = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          fontWeight: theme.typography.fontWeightMedium,
          marginTop: -2
        }
      };
    };
    var AlertTitle = /*#__PURE__*/React__namespace.forwardRef(function AlertTitle(props, ref) {
      var classes = props.classes,
          className = props.className,
          other = _objectWithoutProperties(props, ["classes", "className"]);

      return /*#__PURE__*/React__namespace.createElement(Typography$2, _extends$3({
        gutterBottom: true,
        component: "div",
        ref: ref,
        className: r$1(classes.root, className)
      }, other));
    });
    process.env.NODE_ENV !== "production" ? AlertTitle.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * The content of the component.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string
    } : void 0;
    var AlertTitle$1 = withStyles(styles$l, {
      name: 'MuiAlertTitle'
    })(AlertTitle);

    /**
     * @ignore - internal component.
     */

    var ArrowDropDownIcon = createSvgIcon$1( /*#__PURE__*/React__namespace.createElement("path", {
      d: "M7 10l5 5 5-5z"
    }), 'ArrowDropDown');

    // Give up on IE 11 support for this feature

    function stripDiacritics(string) {
      return typeof string.normalize !== 'undefined' ? string.normalize('NFD').replace(/[\u0300-\u036f]/g, '') : string;
    }

    function createFilterOptions() {
      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var _config$ignoreAccents = config.ignoreAccents,
          ignoreAccents = _config$ignoreAccents === void 0 ? true : _config$ignoreAccents,
          _config$ignoreCase = config.ignoreCase,
          ignoreCase = _config$ignoreCase === void 0 ? true : _config$ignoreCase,
          limit = config.limit,
          _config$matchFrom = config.matchFrom,
          matchFrom = _config$matchFrom === void 0 ? 'any' : _config$matchFrom,
          stringify = config.stringify,
          _config$trim = config.trim,
          trim = _config$trim === void 0 ? false : _config$trim;
      return function (options, _ref) {
        var inputValue = _ref.inputValue,
            getOptionLabel = _ref.getOptionLabel;
        var input = trim ? inputValue.trim() : inputValue;

        if (ignoreCase) {
          input = input.toLowerCase();
        }

        if (ignoreAccents) {
          input = stripDiacritics(input);
        }

        var filteredOptions = options.filter(function (option) {
          var candidate = (stringify || getOptionLabel)(option);

          if (ignoreCase) {
            candidate = candidate.toLowerCase();
          }

          if (ignoreAccents) {
            candidate = stripDiacritics(candidate);
          }

          return matchFrom === 'start' ? candidate.indexOf(input) === 0 : candidate.indexOf(input) > -1;
        });
        return typeof limit === 'number' ? filteredOptions.slice(0, limit) : filteredOptions;
      };
    } // To replace with .findIndex() once we stop IE 11 support.

    function findIndex(array, comp) {
      for (var i = 0; i < array.length; i += 1) {
        if (comp(array[i])) {
          return i;
        }
      }

      return -1;
    }

    var defaultFilterOptions = createFilterOptions(); // Number of options to jump in list box when pageup and pagedown keys are used.

    var pageSize = 5;
    function useAutocomplete(props) {
      var _props$autoComplete = props.autoComplete,
          autoComplete = _props$autoComplete === void 0 ? false : _props$autoComplete,
          _props$autoHighlight = props.autoHighlight,
          autoHighlight = _props$autoHighlight === void 0 ? false : _props$autoHighlight,
          _props$autoSelect = props.autoSelect,
          autoSelect = _props$autoSelect === void 0 ? false : _props$autoSelect,
          _props$blurOnSelect = props.blurOnSelect,
          blurOnSelect = _props$blurOnSelect === void 0 ? false : _props$blurOnSelect,
          _props$clearOnBlur = props.clearOnBlur,
          clearOnBlur = _props$clearOnBlur === void 0 ? !props.freeSolo : _props$clearOnBlur,
          _props$clearOnEscape = props.clearOnEscape,
          clearOnEscape = _props$clearOnEscape === void 0 ? false : _props$clearOnEscape,
          _props$componentName = props.componentName,
          componentName = _props$componentName === void 0 ? 'useAutocomplete' : _props$componentName,
          _props$debug = props.debug,
          debug = _props$debug === void 0 ? false : _props$debug,
          _props$defaultValue = props.defaultValue,
          defaultValue = _props$defaultValue === void 0 ? props.multiple ? [] : null : _props$defaultValue,
          _props$disableClearab = props.disableClearable,
          disableClearable = _props$disableClearab === void 0 ? false : _props$disableClearab,
          _props$disableCloseOn = props.disableCloseOnSelect,
          disableCloseOnSelect = _props$disableCloseOn === void 0 ? false : _props$disableCloseOn,
          _props$disabledItemsF = props.disabledItemsFocusable,
          disabledItemsFocusable = _props$disabledItemsF === void 0 ? false : _props$disabledItemsF,
          _props$disableListWra = props.disableListWrap,
          disableListWrap = _props$disableListWra === void 0 ? false : _props$disableListWra,
          _props$filterOptions = props.filterOptions,
          filterOptions = _props$filterOptions === void 0 ? defaultFilterOptions : _props$filterOptions,
          _props$filterSelected = props.filterSelectedOptions,
          filterSelectedOptions = _props$filterSelected === void 0 ? false : _props$filterSelected,
          _props$freeSolo = props.freeSolo,
          freeSolo = _props$freeSolo === void 0 ? false : _props$freeSolo,
          getOptionDisabled = props.getOptionDisabled,
          _props$getOptionLabel = props.getOptionLabel,
          getOptionLabelProp = _props$getOptionLabel === void 0 ? function (option) {
        return option;
      } : _props$getOptionLabel,
          _props$getOptionSelec = props.getOptionSelected,
          getOptionSelected = _props$getOptionSelec === void 0 ? function (option, value) {
        return option === value;
      } : _props$getOptionSelec,
          groupBy = props.groupBy,
          _props$handleHomeEndK = props.handleHomeEndKeys,
          handleHomeEndKeys = _props$handleHomeEndK === void 0 ? !props.freeSolo : _props$handleHomeEndK,
          idProp = props.id,
          _props$includeInputIn = props.includeInputInList,
          includeInputInList = _props$includeInputIn === void 0 ? false : _props$includeInputIn,
          inputValueProp = props.inputValue,
          _props$multiple = props.multiple,
          multiple = _props$multiple === void 0 ? false : _props$multiple,
          onChange = props.onChange,
          onClose = props.onClose,
          onHighlightChange = props.onHighlightChange,
          onInputChange = props.onInputChange,
          onOpen = props.onOpen,
          openProp = props.open,
          _props$openOnFocus = props.openOnFocus,
          openOnFocus = _props$openOnFocus === void 0 ? false : _props$openOnFocus,
          options = props.options,
          _props$selectOnFocus = props.selectOnFocus,
          selectOnFocus = _props$selectOnFocus === void 0 ? !props.freeSolo : _props$selectOnFocus,
          valueProp = props.value;
      var id = useId(idProp);
      var getOptionLabel = getOptionLabelProp;

      if (process.env.NODE_ENV !== 'production') {
        getOptionLabel = function getOptionLabel(option) {
          var optionLabel = getOptionLabelProp(option);

          if (typeof optionLabel !== 'string') {
            var erroneousReturn = optionLabel === undefined ? 'undefined' : "".concat(_typeof$g(optionLabel), " (").concat(optionLabel, ")");
            console.error("Material-UI: The `getOptionLabel` method of ".concat(componentName, " returned ").concat(erroneousReturn, " instead of a string for ").concat(JSON.stringify(option), "."));
          }

          return optionLabel;
        };
      }

      var ignoreFocus = React__namespace.useRef(false);
      var firstFocus = React__namespace.useRef(true);
      var inputRef = React__namespace.useRef(null);
      var listboxRef = React__namespace.useRef(null);

      var _React$useState = React__namespace.useState(null),
          anchorEl = _React$useState[0],
          setAnchorEl = _React$useState[1];

      var _React$useState2 = React__namespace.useState(-1),
          focusedTag = _React$useState2[0],
          setFocusedTag = _React$useState2[1];

      var defaultHighlighted = autoHighlight ? 0 : -1;
      var highlightedIndexRef = React__namespace.useRef(defaultHighlighted);

      var _useControlled = useControlled({
        controlled: valueProp,
        default: defaultValue,
        name: componentName
      }),
          _useControlled2 = _slicedToArray(_useControlled, 2),
          value = _useControlled2[0],
          setValue = _useControlled2[1];

      var _useControlled3 = useControlled({
        controlled: inputValueProp,
        default: '',
        name: componentName,
        state: 'inputValue'
      }),
          _useControlled4 = _slicedToArray(_useControlled3, 2),
          inputValue = _useControlled4[0],
          setInputValue = _useControlled4[1];

      var _React$useState3 = React__namespace.useState(false),
          focused = _React$useState3[0],
          setFocused = _React$useState3[1];

      var resetInputValue = useEventCallback(function (event, newValue) {
        var newInputValue;

        if (multiple) {
          newInputValue = '';
        } else if (newValue == null) {
          newInputValue = '';
        } else {
          var optionLabel = getOptionLabel(newValue);
          newInputValue = typeof optionLabel === 'string' ? optionLabel : '';
        }

        if (inputValue === newInputValue) {
          return;
        }

        setInputValue(newInputValue);

        if (onInputChange) {
          onInputChange(event, newInputValue, 'reset');
        }
      });
      React__namespace.useEffect(function () {
        resetInputValue(null, value);
      }, [value, resetInputValue]);

      var _useControlled5 = useControlled({
        controlled: openProp,
        default: false,
        name: componentName,
        state: 'open'
      }),
          _useControlled6 = _slicedToArray(_useControlled5, 2),
          open = _useControlled6[0],
          setOpenState = _useControlled6[1];

      var inputValueIsSelectedValue = !multiple && value != null && inputValue === getOptionLabel(value);
      var popupOpen = open;
      var filteredOptions = popupOpen ? filterOptions(options.filter(function (option) {
        if (filterSelectedOptions && (multiple ? value : [value]).some(function (value2) {
          return value2 !== null && getOptionSelected(option, value2);
        })) {
          return false;
        }

        return true;
      }), // we use the empty string to manipulate `filterOptions` to not filter any options
      // i.e. the filter predicate always returns true
      {
        inputValue: inputValueIsSelectedValue ? '' : inputValue,
        getOptionLabel: getOptionLabel
      }) : [];

      if (process.env.NODE_ENV !== 'production') {
        if (value !== null && !freeSolo && options.length > 0) {
          var missingValue = (multiple ? value : [value]).filter(function (value2) {
            return !options.some(function (option) {
              return getOptionSelected(option, value2);
            });
          });

          if (missingValue.length > 0) {
            console.warn(["Material-UI: The value provided to ".concat(componentName, " is invalid."), "None of the options match with `".concat(missingValue.length > 1 ? JSON.stringify(missingValue) : JSON.stringify(missingValue[0]), "`."), 'You can use the `getOptionSelected` prop to customize the equality test.'].join('\n'));
          }
        }
      }

      var focusTag = useEventCallback(function (tagToFocus) {
        if (tagToFocus === -1) {
          inputRef.current.focus();
        } else {
          anchorEl.querySelector("[data-tag-index=\"".concat(tagToFocus, "\"]")).focus();
        }
      }); // Ensure the focusedTag is never inconsistent

      React__namespace.useEffect(function () {
        if (multiple && focusedTag > value.length - 1) {
          setFocusedTag(-1);
          focusTag(-1);
        }
      }, [value, multiple, focusedTag, focusTag]);

      function validOptionIndex(index, direction) {
        if (!listboxRef.current || index === -1) {
          return -1;
        }

        var nextFocus = index;

        while (true) {
          // Out of range
          if (direction === 'next' && nextFocus === filteredOptions.length || direction === 'previous' && nextFocus === -1) {
            return -1;
          }

          var option = listboxRef.current.querySelector("[data-option-index=\"".concat(nextFocus, "\"]")); // Same logic as MenuList.js

          var nextFocusDisabled = disabledItemsFocusable ? false : option && (option.disabled || option.getAttribute('aria-disabled') === 'true');

          if (option && !option.hasAttribute('tabindex') || nextFocusDisabled) {
            // Move to the next element.
            nextFocus += direction === 'next' ? 1 : -1;
          } else {
            return nextFocus;
          }
        }
      }

      var setHighlightedIndex = useEventCallback(function (_ref2) {
        var event = _ref2.event,
            index = _ref2.index,
            _ref2$reason = _ref2.reason,
            reason = _ref2$reason === void 0 ? 'auto' : _ref2$reason;
        highlightedIndexRef.current = index; // does the index exist?

        if (index === -1) {
          inputRef.current.removeAttribute('aria-activedescendant');
        } else {
          inputRef.current.setAttribute('aria-activedescendant', "".concat(id, "-option-").concat(index));
        }

        if (onHighlightChange) {
          onHighlightChange(event, index === -1 ? null : filteredOptions[index], reason);
        }

        if (!listboxRef.current) {
          return;
        }

        var prev = listboxRef.current.querySelector('[data-focus]');

        if (prev) {
          prev.removeAttribute('data-focus');
        }

        var listboxNode = listboxRef.current.parentElement.querySelector('[role="listbox"]'); // "No results"

        if (!listboxNode) {
          return;
        }

        if (index === -1) {
          listboxNode.scrollTop = 0;
          return;
        }

        var option = listboxRef.current.querySelector("[data-option-index=\"".concat(index, "\"]"));

        if (!option) {
          return;
        }

        option.setAttribute('data-focus', 'true'); // Scroll active descendant into view.
        // Logic copied from https://www.w3.org/TR/wai-aria-practices/examples/listbox/js/listbox.js
        //
        // Consider this API instead once it has a better browser support:
        // .scrollIntoView({ scrollMode: 'if-needed', block: 'nearest' });

        if (listboxNode.scrollHeight > listboxNode.clientHeight && reason !== 'mouse') {
          var element = option;
          var scrollBottom = listboxNode.clientHeight + listboxNode.scrollTop;
          var elementBottom = element.offsetTop + element.offsetHeight;

          if (elementBottom > scrollBottom) {
            listboxNode.scrollTop = elementBottom - listboxNode.clientHeight;
          } else if (element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0) < listboxNode.scrollTop) {
            listboxNode.scrollTop = element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0);
          }
        }
      });
      var changeHighlightedIndex = useEventCallback(function (_ref3) {
        var event = _ref3.event,
            diff = _ref3.diff,
            _ref3$direction = _ref3.direction,
            direction = _ref3$direction === void 0 ? 'next' : _ref3$direction,
            _ref3$reason = _ref3.reason,
            reason = _ref3$reason === void 0 ? 'auto' : _ref3$reason;

        if (!popupOpen) {
          return;
        }

        var getNextIndex = function getNextIndex() {
          var maxIndex = filteredOptions.length - 1;

          if (diff === 'reset') {
            return defaultHighlighted;
          }

          if (diff === 'start') {
            return 0;
          }

          if (diff === 'end') {
            return maxIndex;
          }

          var newIndex = highlightedIndexRef.current + diff;

          if (newIndex < 0) {
            if (newIndex === -1 && includeInputInList) {
              return -1;
            }

            if (disableListWrap && highlightedIndexRef.current !== -1 || Math.abs(diff) > 1) {
              return 0;
            }

            return maxIndex;
          }

          if (newIndex > maxIndex) {
            if (newIndex === maxIndex + 1 && includeInputInList) {
              return -1;
            }

            if (disableListWrap || Math.abs(diff) > 1) {
              return maxIndex;
            }

            return 0;
          }

          return newIndex;
        };

        var nextIndex = validOptionIndex(getNextIndex(), direction);
        setHighlightedIndex({
          index: nextIndex,
          reason: reason,
          event: event
        }); // Sync the content of the input with the highlighted option.

        if (autoComplete && diff !== 'reset') {
          if (nextIndex === -1) {
            inputRef.current.value = inputValue;
          } else {
            var option = getOptionLabel(filteredOptions[nextIndex]);
            inputRef.current.value = option; // The portion of the selected suggestion that has not been typed by the user,
            // a completion string, appears inline after the input cursor in the textbox.

            var index = option.toLowerCase().indexOf(inputValue.toLowerCase());

            if (index === 0 && inputValue.length > 0) {
              inputRef.current.setSelectionRange(inputValue.length, option.length);
            }
          }
        }
      });
      var syncHighlightedIndex = React__namespace.useCallback(function () {
        if (!popupOpen) {
          return;
        }

        var valueItem = multiple ? value[0] : value; // The popup is empty, reset

        if (filteredOptions.length === 0 || valueItem == null) {
          changeHighlightedIndex({
            diff: 'reset'
          });
          return;
        }

        if (!listboxRef.current) {
          return;
        } // Synchronize the value with the highlighted index


        if (!filterSelectedOptions && valueItem != null) {
          var currentOption = filteredOptions[highlightedIndexRef.current]; // Keep the current highlighted index if possible

          if (multiple && currentOption && findIndex(value, function (val) {
            return getOptionSelected(currentOption, val);
          }) !== -1) {
            return;
          }

          var itemIndex = findIndex(filteredOptions, function (optionItem) {
            return getOptionSelected(optionItem, valueItem);
          });

          if (itemIndex === -1) {
            changeHighlightedIndex({
              diff: 'reset'
            });
          } else {
            setHighlightedIndex({
              index: itemIndex
            });
          }

          return;
        } // Prevent the highlighted index to leak outside the boundaries.


        if (highlightedIndexRef.current >= filteredOptions.length - 1) {
          setHighlightedIndex({
            index: filteredOptions.length - 1
          });
          return;
        } // Restore the focus to the previous index.


        setHighlightedIndex({
          index: highlightedIndexRef.current
        }); // Ignore filteredOptions (and options, getOptionSelected, getOptionLabel) not to break the scroll position
        // eslint-disable-next-line react-hooks/exhaustive-deps
      }, [// Only sync the highlighted index when the option switch between empty and not
      // eslint-disable-next-line react-hooks/exhaustive-deps
      filteredOptions.length === 0, // Don't sync the highlighted index with the value when multiple
      // eslint-disable-next-line react-hooks/exhaustive-deps
      multiple ? false : value, filterSelectedOptions, changeHighlightedIndex, setHighlightedIndex, popupOpen, inputValue, multiple]);
      var handleListboxRef = useEventCallback(function (node) {
        setRef(listboxRef, node);

        if (!node) {
          return;
        }

        syncHighlightedIndex();
      });
      React__namespace.useEffect(function () {
        syncHighlightedIndex();
      }, [syncHighlightedIndex]);

      var handleOpen = function handleOpen(event) {
        if (open) {
          return;
        }

        setOpenState(true);

        if (onOpen) {
          onOpen(event);
        }
      };

      var handleClose = function handleClose(event, reason) {
        if (!open) {
          return;
        }

        setOpenState(false);

        if (onClose) {
          onClose(event, reason);
        }
      };

      var handleValue = function handleValue(event, newValue, reason, details) {
        if (value === newValue) {
          return;
        }

        if (onChange) {
          onChange(event, newValue, reason, details);
        }

        setValue(newValue);
      };

      var isTouch = React__namespace.useRef(false);

      var selectNewValue = function selectNewValue(event, option) {
        var reasonProp = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'select-option';
        var origin = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'options';
        var reason = reasonProp;
        var newValue = option;

        if (multiple) {
          newValue = Array.isArray(value) ? value.slice() : [];

          if (process.env.NODE_ENV !== 'production') {
            var matches = newValue.filter(function (val) {
              return getOptionSelected(option, val);
            });

            if (matches.length > 1) {
              console.error(["Material-UI: The `getOptionSelected` method of ".concat(componentName, " do not handle the arguments correctly."), "The component expects a single value to match a given option but found ".concat(matches.length, " matches.")].join('\n'));
            }
          }

          var itemIndex = findIndex(newValue, function (valueItem) {
            return getOptionSelected(option, valueItem);
          });

          if (itemIndex === -1) {
            newValue.push(option);
          } else if (origin !== 'freeSolo') {
            newValue.splice(itemIndex, 1);
            reason = 'remove-option';
          }
        }

        resetInputValue(event, newValue);
        handleValue(event, newValue, reason, {
          option: option
        });

        if (!disableCloseOnSelect) {
          handleClose(event, reason);
        }

        if (blurOnSelect === true || blurOnSelect === 'touch' && isTouch.current || blurOnSelect === 'mouse' && !isTouch.current) {
          inputRef.current.blur();
        }
      };

      function validTagIndex(index, direction) {
        if (index === -1) {
          return -1;
        }

        var nextFocus = index;

        while (true) {
          // Out of range
          if (direction === 'next' && nextFocus === value.length || direction === 'previous' && nextFocus === -1) {
            return -1;
          }

          var option = anchorEl.querySelector("[data-tag-index=\"".concat(nextFocus, "\"]")); // Same logic as MenuList.js

          if (option && (!option.hasAttribute('tabindex') || option.disabled || option.getAttribute('aria-disabled') === 'true')) {
            nextFocus += direction === 'next' ? 1 : -1;
          } else {
            return nextFocus;
          }
        }
      }

      var handleFocusTag = function handleFocusTag(event, direction) {
        if (!multiple) {
          return;
        }

        handleClose(event, 'toggleInput');
        var nextTag = focusedTag;

        if (focusedTag === -1) {
          if (inputValue === '' && direction === 'previous') {
            nextTag = value.length - 1;
          }
        } else {
          nextTag += direction === 'next' ? 1 : -1;

          if (nextTag < 0) {
            nextTag = 0;
          }

          if (nextTag === value.length) {
            nextTag = -1;
          }
        }

        nextTag = validTagIndex(nextTag, direction);
        setFocusedTag(nextTag);
        focusTag(nextTag);
      };

      var handleClear = function handleClear(event) {
        ignoreFocus.current = true;
        setInputValue('');

        if (onInputChange) {
          onInputChange(event, '', 'clear');
        }

        handleValue(event, multiple ? [] : null, 'clear');
      };

      var handleKeyDown = function handleKeyDown(other) {
        return function (event) {
          if (focusedTag !== -1 && ['ArrowLeft', 'ArrowRight'].indexOf(event.key) === -1) {
            setFocusedTag(-1);
            focusTag(-1);
          }

          switch (event.key) {
            case 'Home':
              if (popupOpen && handleHomeEndKeys) {
                // Prevent scroll of the page
                event.preventDefault();
                changeHighlightedIndex({
                  diff: 'start',
                  direction: 'next',
                  reason: 'keyboard',
                  event: event
                });
              }

              break;

            case 'End':
              if (popupOpen && handleHomeEndKeys) {
                // Prevent scroll of the page
                event.preventDefault();
                changeHighlightedIndex({
                  diff: 'end',
                  direction: 'previous',
                  reason: 'keyboard',
                  event: event
                });
              }

              break;

            case 'PageUp':
              // Prevent scroll of the page
              event.preventDefault();
              changeHighlightedIndex({
                diff: -pageSize,
                direction: 'previous',
                reason: 'keyboard',
                event: event
              });
              handleOpen(event);
              break;

            case 'PageDown':
              // Prevent scroll of the page
              event.preventDefault();
              changeHighlightedIndex({
                diff: pageSize,
                direction: 'next',
                reason: 'keyboard',
                event: event
              });
              handleOpen(event);
              break;

            case 'ArrowDown':
              // Prevent cursor move
              event.preventDefault();
              changeHighlightedIndex({
                diff: 1,
                direction: 'next',
                reason: 'keyboard',
                event: event
              });
              handleOpen(event);
              break;

            case 'ArrowUp':
              // Prevent cursor move
              event.preventDefault();
              changeHighlightedIndex({
                diff: -1,
                direction: 'previous',
                reason: 'keyboard',
                event: event
              });
              handleOpen(event);
              break;

            case 'ArrowLeft':
              handleFocusTag(event, 'previous');
              break;

            case 'ArrowRight':
              handleFocusTag(event, 'next');
              break;

            case 'Enter':
              // Wait until IME is settled.
              if (event.which === 229) {
                break;
              }

              if (highlightedIndexRef.current !== -1 && popupOpen) {
                var option = filteredOptions[highlightedIndexRef.current];
                var disabled = getOptionDisabled ? getOptionDisabled(option) : false; // We don't want to validate the form.

                event.preventDefault();

                if (disabled) {
                  return;
                }

                selectNewValue(event, option, 'select-option'); // Move the selection to the end.

                if (autoComplete) {
                  inputRef.current.setSelectionRange(inputRef.current.value.length, inputRef.current.value.length);
                }
              } else if (freeSolo && inputValue !== '' && inputValueIsSelectedValue === false) {
                if (multiple) {
                  // Allow people to add new values before they submit the form.
                  event.preventDefault();
                }

                selectNewValue(event, inputValue, 'create-option', 'freeSolo');
              }

              break;

            case 'Escape':
              if (popupOpen) {
                // Avoid Opera to exit fullscreen mode.
                event.preventDefault(); // Avoid the Modal to handle the event.

                event.stopPropagation();
                handleClose(event, 'escape');
              } else if (clearOnEscape && (inputValue !== '' || multiple && value.length > 0)) {
                // Avoid Opera to exit fullscreen mode.
                event.preventDefault(); // Avoid the Modal to handle the event.

                event.stopPropagation();
                handleClear(event);
              }

              break;

            case 'Backspace':
              if (multiple && inputValue === '' && value.length > 0) {
                var index = focusedTag === -1 ? value.length - 1 : focusedTag;
                var newValue = value.slice();
                newValue.splice(index, 1);
                handleValue(event, newValue, 'remove-option', {
                  option: value[index]
                });
              }

              break;
          }

          if (other.onKeyDown) {
            other.onKeyDown(event);
          }
        };
      };

      var handleFocus = function handleFocus(event) {
        setFocused(true);

        if (openOnFocus && !ignoreFocus.current) {
          handleOpen(event);
        }
      };

      var handleBlur = function handleBlur(event) {
        // Ignore the event when using the scrollbar with IE 11
        if (listboxRef.current !== null && document.activeElement === listboxRef.current.parentElement) {
          inputRef.current.focus();
          return;
        }

        setFocused(false);
        firstFocus.current = true;
        ignoreFocus.current = false;

        if (debug && inputValue !== '') {
          return;
        }

        if (autoSelect && highlightedIndexRef.current !== -1 && popupOpen) {
          selectNewValue(event, filteredOptions[highlightedIndexRef.current], 'blur');
        } else if (autoSelect && freeSolo && inputValue !== '') {
          selectNewValue(event, inputValue, 'blur', 'freeSolo');
        } else if (clearOnBlur) {
          resetInputValue(event, value);
        }

        handleClose(event, 'blur');
      };

      var handleInputChange = function handleInputChange(event) {
        var newValue = event.target.value;

        if (inputValue !== newValue) {
          setInputValue(newValue);

          if (onInputChange) {
            onInputChange(event, newValue, 'input');
          }
        }

        if (newValue === '') {
          if (!disableClearable && !multiple) {
            handleValue(event, null, 'clear');
          }
        } else {
          handleOpen(event);
        }
      };

      var handleOptionMouseOver = function handleOptionMouseOver(event) {
        setHighlightedIndex({
          event: event,
          index: Number(event.currentTarget.getAttribute('data-option-index')),
          reason: 'mouse'
        });
      };

      var handleOptionTouchStart = function handleOptionTouchStart() {
        isTouch.current = true;
      };

      var handleOptionClick = function handleOptionClick(event) {
        var index = Number(event.currentTarget.getAttribute('data-option-index'));
        selectNewValue(event, filteredOptions[index], 'select-option');
        isTouch.current = false;
      };

      var handleTagDelete = function handleTagDelete(index) {
        return function (event) {
          var newValue = value.slice();
          newValue.splice(index, 1);
          handleValue(event, newValue, 'remove-option', {
            option: value[index]
          });
        };
      };

      var handlePopupIndicator = function handlePopupIndicator(event) {
        if (open) {
          handleClose(event, 'toggleInput');
        } else {
          handleOpen(event);
        }
      }; // Prevent input blur when interacting with the combobox


      var handleMouseDown = function handleMouseDown(event) {
        if (event.target.getAttribute('id') !== id) {
          event.preventDefault();
        }
      }; // Focus the input when interacting with the combobox


      var handleClick = function handleClick() {
        inputRef.current.focus();

        if (selectOnFocus && firstFocus.current && inputRef.current.selectionEnd - inputRef.current.selectionStart === 0) {
          inputRef.current.select();
        }

        firstFocus.current = false;
      };

      var handleInputMouseDown = function handleInputMouseDown(event) {
        if (inputValue === '' || !open) {
          handlePopupIndicator(event);
        }
      };

      var dirty = freeSolo && inputValue.length > 0;
      dirty = dirty || (multiple ? value.length > 0 : value !== null);
      var groupedOptions = filteredOptions;

      if (groupBy) {
        // used to keep track of key and indexes in the result array
        var indexBy = new Map();
        var warn = false;
        groupedOptions = filteredOptions.reduce(function (acc, option, index) {
          var group = groupBy(option);

          if (acc.length > 0 && acc[acc.length - 1].group === group) {
            acc[acc.length - 1].options.push(option);
          } else {
            if (process.env.NODE_ENV !== 'production') {
              if (indexBy.get(group) && !warn) {
                console.warn("Material-UI: The options provided combined with the `groupBy` method of ".concat(componentName, " returns duplicated headers."), 'You can solve the issue by sorting the options with the output of `groupBy`.');
                warn = true;
              }

              indexBy.set(group, true);
            }

            acc.push({
              key: index,
              index: index,
              group: group,
              options: [option]
            });
          }

          return acc;
        }, []);
      }

      return {
        getRootProps: function getRootProps() {
          var other = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          return _extends$3({
            'aria-owns': popupOpen ? "".concat(id, "-popup") : null,
            role: 'combobox',
            'aria-expanded': popupOpen
          }, other, {
            onKeyDown: handleKeyDown(other),
            onMouseDown: handleMouseDown,
            onClick: handleClick
          });
        },
        getInputLabelProps: function getInputLabelProps() {
          return {
            id: "".concat(id, "-label"),
            htmlFor: id
          };
        },
        getInputProps: function getInputProps() {
          return {
            id: id,
            value: inputValue,
            onBlur: handleBlur,
            onFocus: handleFocus,
            onChange: handleInputChange,
            onMouseDown: handleInputMouseDown,
            // if open then this is handled imperativeley so don't let react override
            // only have an opinion about this when closed
            'aria-activedescendant': popupOpen ? '' : null,
            'aria-autocomplete': autoComplete ? 'both' : 'list',
            'aria-controls': popupOpen ? "".concat(id, "-popup") : null,
            // Disable browser's suggestion that might overlap with the popup.
            // Handle autocomplete but not autofill.
            autoComplete: 'off',
            ref: inputRef,
            autoCapitalize: 'none',
            spellCheck: 'false'
          };
        },
        getClearProps: function getClearProps() {
          return {
            tabIndex: -1,
            onClick: handleClear
          };
        },
        getPopupIndicatorProps: function getPopupIndicatorProps() {
          return {
            tabIndex: -1,
            onClick: handlePopupIndicator
          };
        },
        getTagProps: function getTagProps(_ref4) {
          var index = _ref4.index;
          return {
            key: index,
            'data-tag-index': index,
            tabIndex: -1,
            onDelete: handleTagDelete(index)
          };
        },
        getListboxProps: function getListboxProps() {
          return {
            role: 'listbox',
            id: "".concat(id, "-popup"),
            'aria-labelledby': "".concat(id, "-label"),
            ref: handleListboxRef,
            onMouseDown: function onMouseDown(event) {
              // Prevent blur
              event.preventDefault();
            }
          };
        },
        getOptionProps: function getOptionProps(_ref5) {
          var index = _ref5.index,
              option = _ref5.option;
          var selected = (multiple ? value : [value]).some(function (value2) {
            return value2 != null && getOptionSelected(option, value2);
          });
          var disabled = getOptionDisabled ? getOptionDisabled(option) : false;
          return {
            key: index,
            tabIndex: -1,
            role: 'option',
            id: "".concat(id, "-option-").concat(index),
            onMouseOver: handleOptionMouseOver,
            onClick: handleOptionClick,
            onTouchStart: handleOptionTouchStart,
            'data-option-index': index,
            'aria-disabled': disabled,
            'aria-selected': selected
          };
        },
        id: id,
        inputValue: inputValue,
        value: value,
        dirty: dirty,
        popupOpen: popupOpen,
        focused: focused || focusedTag !== -1,
        anchorEl: anchorEl,
        setAnchorEl: setAnchorEl,
        focusedTag: focusedTag,
        groupedOptions: groupedOptions
      };
    }

    var styles$k = function styles(theme) {
      var _option;

      return {
        /* Styles applied to the root element. */
        root: {
          '&$focused $clearIndicatorDirty': {
            visibility: 'visible'
          },

          /* Avoid double tap issue on iOS */
          '@media (pointer: fine)': {
            '&:hover $clearIndicatorDirty': {
              visibility: 'visible'
            }
          }
        },

        /* Styles applied to the root element if `fullWidth={true}`. */
        fullWidth: {
          width: '100%'
        },

        /* Pseudo-class applied to the root element if focused. */
        focused: {},

        /* Styles applied to the tag elements, e.g. the chips. */
        tag: {
          margin: 3,
          maxWidth: 'calc(100% - 6px)'
        },

        /* Styles applied to the tag elements, e.g. the chips if `size="small"`. */
        tagSizeSmall: {
          margin: 2,
          maxWidth: 'calc(100% - 4px)'
        },

        /* Styles applied when the popup icon is rendered. */
        hasPopupIcon: {},

        /* Styles applied when the clear icon is rendered. */
        hasClearIcon: {},

        /* Styles applied to the Input element. */
        inputRoot: {
          flexWrap: 'wrap',
          '$hasPopupIcon &, $hasClearIcon &': {
            paddingRight: 26 + 4
          },
          '$hasPopupIcon$hasClearIcon &': {
            paddingRight: 52 + 4
          },
          '& $input': {
            width: 0,
            minWidth: 30
          },
          '&[class*="MuiInput-root"]': {
            paddingBottom: 1,
            '& $input': {
              padding: 4
            },
            '& $input:first-child': {
              padding: '6px 0'
            }
          },
          '&[class*="MuiInput-root"][class*="MuiInput-marginDense"]': {
            '& $input': {
              padding: '4px 4px 5px'
            },
            '& $input:first-child': {
              padding: '3px 0 6px'
            }
          },
          '&[class*="MuiOutlinedInput-root"]': {
            padding: 9,
            '$hasPopupIcon &, $hasClearIcon &': {
              paddingRight: 26 + 4 + 9
            },
            '$hasPopupIcon$hasClearIcon &': {
              paddingRight: 52 + 4 + 9
            },
            '& $input': {
              padding: '9.5px 4px'
            },
            '& $input:first-child': {
              paddingLeft: 6
            },
            '& $endAdornment': {
              right: 9
            }
          },
          '&[class*="MuiOutlinedInput-root"][class*="MuiOutlinedInput-marginDense"]': {
            padding: 6,
            '& $input': {
              padding: '4.5px 4px'
            }
          },
          '&[class*="MuiFilledInput-root"]': {
            paddingTop: 19,
            paddingLeft: 8,
            '$hasPopupIcon &, $hasClearIcon &': {
              paddingRight: 26 + 4 + 9
            },
            '$hasPopupIcon$hasClearIcon &': {
              paddingRight: 52 + 4 + 9
            },
            '& $input': {
              padding: '9px 4px'
            },
            '& $endAdornment': {
              right: 9
            }
          },
          '&[class*="MuiFilledInput-root"][class*="MuiFilledInput-marginDense"]': {
            paddingBottom: 1,
            '& $input': {
              padding: '4.5px 4px'
            }
          }
        },

        /* Styles applied to the input element. */
        input: {
          flexGrow: 1,
          textOverflow: 'ellipsis',
          opacity: 0
        },

        /* Styles applied to the input element if tag focused. */
        inputFocused: {
          opacity: 1
        },

        /* Styles applied to the endAdornment element. */
        endAdornment: {
          // We use a position absolute to support wrapping tags.
          position: 'absolute',
          right: 0,
          top: 'calc(50% - 14px)' // Center vertically

        },

        /* Styles applied to the clear indicator. */
        clearIndicator: {
          marginRight: -2,
          padding: 4,
          visibility: 'hidden'
        },

        /* Styles applied to the clear indicator if the input is dirty. */
        clearIndicatorDirty: {},

        /* Styles applied to the popup indicator. */
        popupIndicator: {
          padding: 2,
          marginRight: -2
        },

        /* Styles applied to the popup indicator if the popup is open. */
        popupIndicatorOpen: {
          transform: 'rotate(180deg)'
        },

        /* Styles applied to the popper element. */
        popper: {
          zIndex: theme.zIndex.modal
        },

        /* Styles applied to the popper element if `disablePortal={true}`. */
        popperDisablePortal: {
          position: 'absolute'
        },

        /* Styles applied to the `Paper` component. */
        paper: _extends$3({}, theme.typography.body1, {
          overflow: 'hidden',
          margin: '4px 0'
        }),

        /* Styles applied to the `listbox` component. */
        listbox: {
          listStyle: 'none',
          margin: 0,
          padding: '8px 0',
          maxHeight: '40vh',
          overflow: 'auto'
        },

        /* Styles applied to the loading wrapper. */
        loading: {
          color: theme.palette.text.secondary,
          padding: '14px 16px'
        },

        /* Styles applied to the no option wrapper. */
        noOptions: {
          color: theme.palette.text.secondary,
          padding: '14px 16px'
        },

        /* Styles applied to the option elements. */
        option: (_option = {
          minHeight: 48,
          display: 'flex',
          justifyContent: 'flex-start',
          alignItems: 'center',
          cursor: 'pointer',
          paddingTop: 6,
          boxSizing: 'border-box',
          outline: '0',
          WebkitTapHighlightColor: 'transparent',
          paddingBottom: 6,
          paddingLeft: 16,
          paddingRight: 16
        }, _defineProperty(_option, theme.breakpoints.up('sm'), {
          minHeight: 'auto'
        }), _defineProperty(_option, '&[aria-selected="true"]', {
          backgroundColor: theme.palette.action.selected
        }), _defineProperty(_option, '&[data-focus="true"]', {
          backgroundColor: theme.palette.action.hover
        }), _defineProperty(_option, '&:active', {
          backgroundColor: theme.palette.action.selected
        }), _defineProperty(_option, '&[aria-disabled="true"]', {
          opacity: theme.palette.action.disabledOpacity,
          pointerEvents: 'none'
        }), _option),

        /* Styles applied to the group's label elements. */
        groupLabel: {
          backgroundColor: theme.palette.background.paper,
          top: -8
        },

        /* Styles applied to the group's ul elements. */
        groupUl: {
          padding: 0,
          '& $option': {
            paddingLeft: 24
          }
        }
      };
    };

    function DisablePortal(props) {
      // eslint-disable-next-line react/prop-types
      props.anchorEl;
          props.open;
          var other = _objectWithoutProperties(props, ["anchorEl", "open"]);

      return /*#__PURE__*/React__namespace.createElement("div", other);
    }

    var _ref = /*#__PURE__*/React__namespace.createElement(CloseIcon, {
      fontSize: "small"
    });

    var _ref2 = /*#__PURE__*/React__namespace.createElement(ArrowDropDownIcon, null);

    var Autocomplete = /*#__PURE__*/React__namespace.forwardRef(function Autocomplete(props, ref) {
      /* eslint-disable no-unused-vars */
      props.autoComplete;
          props.autoHighlight;
          props.autoSelect;
          props.blurOnSelect;
          var ChipProps = props.ChipProps,
          classes = props.classes,
          className = props.className,
          _props$clearOnBlur = props.clearOnBlur;
          _props$clearOnBlur === void 0 ? !props.freeSolo : _props$clearOnBlur;
          props.clearOnEscape;
          var _props$clearText = props.clearText,
          clearText = _props$clearText === void 0 ? 'Clear' : _props$clearText,
          _props$closeIcon = props.closeIcon,
          closeIcon = _props$closeIcon === void 0 ? _ref : _props$closeIcon,
          _props$closeText = props.closeText,
          closeText = _props$closeText === void 0 ? 'Close' : _props$closeText;
          props.debug;
          var _props$defaultValue = props.defaultValue;
          _props$defaultValue === void 0 ? props.multiple ? [] : null : _props$defaultValue;
          var _props$disableClearab = props.disableClearable,
          disableClearable = _props$disableClearab === void 0 ? false : _props$disableClearab;
          props.disableCloseOnSelect;
          var _props$disabled = props.disabled,
          disabled = _props$disabled === void 0 ? false : _props$disabled;
          props.disabledItemsFocusable;
          props.disableListWrap;
          var _props$disablePortal = props.disablePortal,
          disablePortal = _props$disablePortal === void 0 ? false : _props$disablePortal;
          props.filterOptions;
          props.filterSelectedOptions;
          var _props$forcePopupIcon = props.forcePopupIcon,
          forcePopupIcon = _props$forcePopupIcon === void 0 ? 'auto' : _props$forcePopupIcon,
          _props$freeSolo = props.freeSolo,
          freeSolo = _props$freeSolo === void 0 ? false : _props$freeSolo,
          _props$fullWidth = props.fullWidth,
          fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,
          _props$getLimitTagsTe = props.getLimitTagsText,
          getLimitTagsText = _props$getLimitTagsTe === void 0 ? function (more) {
        return "+".concat(more);
      } : _props$getLimitTagsTe;
          props.getOptionDisabled;
          var _props$getOptionLabel = props.getOptionLabel,
          getOptionLabel = _props$getOptionLabel === void 0 ? function (x) {
        return x;
      } : _props$getOptionLabel;
          props.getOptionSelected;
          var groupBy = props.groupBy,
          _props$handleHomeEndK = props.handleHomeEndKeys;
          _props$handleHomeEndK === void 0 ? !props.freeSolo : _props$handleHomeEndK;
          props.id;
          props.includeInputInList;
          props.inputValue;
          var _props$limitTags = props.limitTags,
          limitTags = _props$limitTags === void 0 ? -1 : _props$limitTags,
          _props$ListboxCompone = props.ListboxComponent,
          ListboxComponent = _props$ListboxCompone === void 0 ? 'ul' : _props$ListboxCompone,
          ListboxProps = props.ListboxProps,
          _props$loading = props.loading,
          loading = _props$loading === void 0 ? false : _props$loading,
          _props$loadingText = props.loadingText,
          loadingText = _props$loadingText === void 0 ? 'Loading…' : _props$loadingText,
          _props$multiple = props.multiple,
          multiple = _props$multiple === void 0 ? false : _props$multiple,
          _props$noOptionsText = props.noOptionsText,
          noOptionsText = _props$noOptionsText === void 0 ? 'No options' : _props$noOptionsText;
          props.onChange;
          props.onClose;
          props.onHighlightChange;
          props.onInputChange;
          props.onOpen;
          props.open;
          props.openOnFocus;
          var _props$openText = props.openText,
          openText = _props$openText === void 0 ? 'Open' : _props$openText;
          props.options;
          var _props$PaperComponent = props.PaperComponent,
          PaperComponent = _props$PaperComponent === void 0 ? M : _props$PaperComponent,
          _props$PopperComponen = props.PopperComponent,
          PopperComponentProp = _props$PopperComponen === void 0 ? P : _props$PopperComponen,
          _props$popupIcon = props.popupIcon,
          popupIcon = _props$popupIcon === void 0 ? _ref2 : _props$popupIcon,
          renderGroupProp = props.renderGroup,
          renderInput = props.renderInput,
          renderOptionProp = props.renderOption,
          renderTags = props.renderTags,
          _props$selectOnFocus = props.selectOnFocus;
          _props$selectOnFocus === void 0 ? !props.freeSolo : _props$selectOnFocus;
          var _props$size = props.size,
          size = _props$size === void 0 ? 'medium' : _props$size;
          props.value;
          var other = _objectWithoutProperties(props, ["autoComplete", "autoHighlight", "autoSelect", "blurOnSelect", "ChipProps", "classes", "className", "clearOnBlur", "clearOnEscape", "clearText", "closeIcon", "closeText", "debug", "defaultValue", "disableClearable", "disableCloseOnSelect", "disabled", "disabledItemsFocusable", "disableListWrap", "disablePortal", "filterOptions", "filterSelectedOptions", "forcePopupIcon", "freeSolo", "fullWidth", "getLimitTagsText", "getOptionDisabled", "getOptionLabel", "getOptionSelected", "groupBy", "handleHomeEndKeys", "id", "includeInputInList", "inputValue", "limitTags", "ListboxComponent", "ListboxProps", "loading", "loadingText", "multiple", "noOptionsText", "onChange", "onClose", "onHighlightChange", "onInputChange", "onOpen", "open", "openOnFocus", "openText", "options", "PaperComponent", "PopperComponent", "popupIcon", "renderGroup", "renderInput", "renderOption", "renderTags", "selectOnFocus", "size", "value"]);
      /* eslint-enable no-unused-vars */


      var PopperComponent = disablePortal ? DisablePortal : PopperComponentProp;

      var _useAutocomplete = useAutocomplete(_extends$3({}, props, {
        componentName: 'Autocomplete'
      })),
          getRootProps = _useAutocomplete.getRootProps,
          getInputProps = _useAutocomplete.getInputProps,
          getInputLabelProps = _useAutocomplete.getInputLabelProps,
          getPopupIndicatorProps = _useAutocomplete.getPopupIndicatorProps,
          getClearProps = _useAutocomplete.getClearProps,
          getTagProps = _useAutocomplete.getTagProps,
          getListboxProps = _useAutocomplete.getListboxProps,
          getOptionProps = _useAutocomplete.getOptionProps,
          value = _useAutocomplete.value,
          dirty = _useAutocomplete.dirty,
          id = _useAutocomplete.id,
          popupOpen = _useAutocomplete.popupOpen,
          focused = _useAutocomplete.focused,
          focusedTag = _useAutocomplete.focusedTag,
          anchorEl = _useAutocomplete.anchorEl,
          setAnchorEl = _useAutocomplete.setAnchorEl,
          inputValue = _useAutocomplete.inputValue,
          groupedOptions = _useAutocomplete.groupedOptions;

      var startAdornment;

      if (multiple && value.length > 0) {
        var getCustomizedTagProps = function getCustomizedTagProps(params) {
          return _extends$3({
            className: r$1(classes.tag, size === 'small' && classes.tagSizeSmall),
            disabled: disabled
          }, getTagProps(params));
        };

        if (renderTags) {
          startAdornment = renderTags(value, getCustomizedTagProps);
        } else {
          startAdornment = value.map(function (option, index) {
            return /*#__PURE__*/React__namespace.createElement(Chip$1, _extends$3({
              label: getOptionLabel(option),
              size: size
            }, getCustomizedTagProps({
              index: index
            }), ChipProps));
          });
        }
      }

      if (limitTags > -1 && Array.isArray(startAdornment)) {
        var more = startAdornment.length - limitTags;

        if (!focused && more > 0) {
          startAdornment = startAdornment.splice(0, limitTags);
          startAdornment.push( /*#__PURE__*/React__namespace.createElement("span", {
            className: classes.tag,
            key: startAdornment.length
          }, getLimitTagsText(more)));
        }
      }

      var defaultRenderGroup = function defaultRenderGroup(params) {
        return /*#__PURE__*/React__namespace.createElement("li", {
          key: params.key
        }, /*#__PURE__*/React__namespace.createElement(ListSubheader$1, {
          className: classes.groupLabel,
          component: "div"
        }, params.group), /*#__PURE__*/React__namespace.createElement("ul", {
          className: classes.groupUl
        }, params.children));
      };

      var renderGroup = renderGroupProp || defaultRenderGroup;
      var renderOption = renderOptionProp || getOptionLabel;

      var renderListOption = function renderListOption(option, index) {
        var optionProps = getOptionProps({
          option: option,
          index: index
        });
        return /*#__PURE__*/React__namespace.createElement("li", _extends$3({}, optionProps, {
          className: classes.option
        }), renderOption(option, {
          selected: optionProps['aria-selected'],
          inputValue: inputValue
        }));
      };

      var hasClearIcon = !disableClearable && !disabled;
      var hasPopupIcon = (!freeSolo || forcePopupIcon === true) && forcePopupIcon !== false;
      return /*#__PURE__*/React__namespace.createElement(React__namespace.Fragment, null, /*#__PURE__*/React__namespace.createElement("div", _extends$3({
        ref: ref,
        className: r$1(classes.root, className, focused && classes.focused, fullWidth && classes.fullWidth, hasClearIcon && classes.hasClearIcon, hasPopupIcon && classes.hasPopupIcon)
      }, getRootProps(other)), renderInput({
        id: id,
        disabled: disabled,
        fullWidth: true,
        size: size === 'small' ? 'small' : undefined,
        InputLabelProps: getInputLabelProps(),
        InputProps: {
          ref: setAnchorEl,
          className: classes.inputRoot,
          startAdornment: startAdornment,
          endAdornment: /*#__PURE__*/React__namespace.createElement("div", {
            className: classes.endAdornment
          }, hasClearIcon ? /*#__PURE__*/React__namespace.createElement(IconButton$1, _extends$3({}, getClearProps(), {
            "aria-label": clearText,
            title: clearText,
            className: r$1(classes.clearIndicator, dirty && classes.clearIndicatorDirty)
          }), closeIcon) : null, hasPopupIcon ? /*#__PURE__*/React__namespace.createElement(IconButton$1, _extends$3({}, getPopupIndicatorProps(), {
            disabled: disabled,
            "aria-label": popupOpen ? closeText : openText,
            title: popupOpen ? closeText : openText,
            className: r$1(classes.popupIndicator, popupOpen && classes.popupIndicatorOpen)
          }), popupIcon) : null)
        },
        inputProps: _extends$3({
          className: r$1(classes.input, focusedTag === -1 && classes.inputFocused),
          disabled: disabled
        }, getInputProps())
      })), popupOpen && anchorEl ? /*#__PURE__*/React__namespace.createElement(PopperComponent, {
        className: r$1(classes.popper, disablePortal && classes.popperDisablePortal),
        style: {
          width: anchorEl ? anchorEl.clientWidth : null
        },
        role: "presentation",
        anchorEl: anchorEl,
        open: true
      }, /*#__PURE__*/React__namespace.createElement(PaperComponent, {
        className: classes.paper
      }, loading && groupedOptions.length === 0 ? /*#__PURE__*/React__namespace.createElement("div", {
        className: classes.loading
      }, loadingText) : null, groupedOptions.length === 0 && !freeSolo && !loading ? /*#__PURE__*/React__namespace.createElement("div", {
        className: classes.noOptions
      }, noOptionsText) : null, groupedOptions.length > 0 ? /*#__PURE__*/React__namespace.createElement(ListboxComponent, _extends$3({
        className: classes.listbox
      }, getListboxProps(), ListboxProps), groupedOptions.map(function (option, index) {
        if (groupBy) {
          return renderGroup({
            key: option.key,
            group: option.group,
            children: option.options.map(function (option2, index2) {
              return renderListOption(option2, option.index + index2);
            })
          });
        }

        return renderListOption(option, index);
      })) : null)) : null);
    });
    process.env.NODE_ENV !== "production" ? Autocomplete.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * If `true`, the portion of the selected suggestion that has not been typed by the user,
       * known as the completion string, appears inline after the input cursor in the textbox.
       * The inline completion string is visually highlighted and has a selected state.
       */
      autoComplete: re.bool,

      /**
       * If `true`, the first option is automatically highlighted.
       */
      autoHighlight: re.bool,

      /**
       * If `true`, the selected option becomes the value of the input
       * when the Autocomplete loses focus unless the user chooses
       * a different option or changes the character string in the input.
       */
      autoSelect: re.bool,

      /**
       * Control if the input should be blurred when an option is selected:
       *
       * - `false` the input is not blurred.
       * - `true` the input is always blurred.
       * - `touch` the input is blurred after a touch event.
       * - `mouse` the input is blurred after a mouse event.
       */
      blurOnSelect: re.oneOfType([re.oneOf(['mouse', 'touch']), re.bool]),

      /**
       * Props applied to the [`Chip`](/api/chip/) element.
       */
      ChipProps: re.object,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * If `true`, the input's text will be cleared on blur if no value is selected.
       *
       * Set to `true` if you want to help the user enter a new value.
       * Set to `false` if you want to help the user resume his search.
       */
      clearOnBlur: re.bool,

      /**
       * If `true`, clear all values when the user presses escape and the popup is closed.
       */
      clearOnEscape: re.bool,

      /**
       * Override the default text for the *clear* icon button.
       *
       * For localization purposes, you can use the provided [translations](/guides/localization/).
       */
      clearText: re.string,

      /**
       * The icon to display in place of the default close icon.
       */
      closeIcon: re.node,

      /**
       * Override the default text for the *close popup* icon button.
       *
       * For localization purposes, you can use the provided [translations](/guides/localization/).
       */
      closeText: re.string,

      /**
       * If `true`, the popup will ignore the blur event if the input is filled.
       * You can inspect the popup markup with your browser tools.
       * Consider this option when you need to customize the component.
       */
      debug: re.bool,

      /**
       * The default input value. Use when the component is not controlled.
       */
      defaultValue: re.any,

      /**
       * If `true`, the input can't be cleared.
       */
      disableClearable: re
      /* @typescript-to-proptypes-ignore */
      .bool,

      /**
       * If `true`, the popup won't close when a value is selected.
       */
      disableCloseOnSelect: re.bool,

      /**
       * If `true`, the input will be disabled.
       */
      disabled: re.bool,

      /**
       * If `true`, will allow focus on disabled items.
       */
      disabledItemsFocusable: re.bool,

      /**
       * If `true`, the list box in the popup will not wrap focus.
       */
      disableListWrap: re.bool,

      /**
       * Disable the portal behavior.
       * The children stay within it's parent DOM hierarchy.
       */
      disablePortal: re.bool,

      /**
       * A filter function that determines the options that are eligible.
       *
       * @param {T[]} options The options to render.
       * @param {object} state The state of the component.
       * @returns {T[]}
       */
      filterOptions: re.func,

      /**
       * If `true`, hide the selected options from the list box.
       */
      filterSelectedOptions: re.bool,

      /**
       * Force the visibility display of the popup icon.
       */
      forcePopupIcon: re.oneOfType([re.oneOf(['auto']), re.bool]),

      /**
       * If `true`, the Autocomplete is free solo, meaning that the user input is not bound to provided options.
       */
      freeSolo: re
      /* @typescript-to-proptypes-ignore */
      .bool,

      /**
       * If `true`, the input will take up the full width of its container.
       */
      fullWidth: re.bool,

      /**
       * The label to display when the tags are truncated (`limitTags`).
       *
       * @param {number} more The number of truncated tags.
       * @returns {ReactNode}
       */
      getLimitTagsText: re.func,

      /**
       * Used to determine the disabled state for a given option.
       *
       * @param {T} option The option to test.
       * @returns {boolean}
       */
      getOptionDisabled: re.func,

      /**
       * Used to determine the string value for a given option.
       * It's used to fill the input (and the list box options if `renderOption` is not provided).
       *
       * @param {T} option
       * @returns {string}
       */
      getOptionLabel: re.func,

      /**
       * Used to determine if an option is selected, considering the current value.
       * Uses strict equality by default.
       *
       * @param {T} option The option to test.
       * @param {T} value The value to test against.
       * @returns {boolean}
       */
      getOptionSelected: re.func,

      /**
       * If provided, the options will be grouped under the returned string.
       * The groupBy value is also used as the text for group headings when `renderGroup` is not provided.
       *
       * @param {T} options The options to group.
       * @returns {string}
       */
      groupBy: re.func,

      /**
       * If `true`, the component handles the "Home" and "End" keys when the popup is open.
       * It should move focus to the first option and last option, respectively.
       */
      handleHomeEndKeys: re.bool,

      /**
       * This prop is used to help implement the accessibility logic.
       * If you don't provide this prop. It falls back to a randomly generated id.
       */
      id: re.string,

      /**
       * If `true`, the highlight can move to the input.
       */
      includeInputInList: re.bool,

      /**
       * The input value.
       */
      inputValue: re.string,

      /**
       * The maximum number of tags that will be visible when not focused.
       * Set `-1` to disable the limit.
       */
      limitTags: re.number,

      /**
       * The component used to render the listbox.
       */
      ListboxComponent: re.elementType,

      /**
       * Props applied to the Listbox element.
       */
      ListboxProps: re.object,

      /**
       * If `true`, the component is in a loading state.
       */
      loading: re.bool,

      /**
       * Text to display when in a loading state.
       *
       * For localization purposes, you can use the provided [translations](/guides/localization/).
       */
      loadingText: re.node,

      /**
       * If `true`, `value` must be an array and the menu will support multiple selections.
       */
      multiple: re
      /* @typescript-to-proptypes-ignore */
      .bool,

      /**
       * Text to display when there are no options.
       *
       * For localization purposes, you can use the provided [translations](/guides/localization/).
       */
      noOptionsText: re.node,

      /**
       * Callback fired when the value changes.
       *
       * @param {object} event The event source of the callback.
       * @param {T|T[]} value The new value of the component.
       * @param {string} reason One of "create-option", "select-option", "remove-option", "blur" or "clear".
       */
      onChange: re.func,

      /**
       * Callback fired when the popup requests to be closed.
       * Use in controlled mode (see open).
       *
       * @param {object} event The event source of the callback.
       * @param {string} reason Can be: `"toggleInput"`, `"escape"`, `"select-option"`, `"blur"`.
       */
      onClose: re.func,

      /**
       * Callback fired when the highlight option changes.
       *
       * @param {object} event The event source of the callback.
       * @param {T} option The highlighted option.
       * @param {string} reason Can be: `"keyboard"`, `"auto"`, `"mouse"`.
       */
      onHighlightChange: re.func,

      /**
       * Callback fired when the input value changes.
       *
       * @param {object} event The event source of the callback.
       * @param {string} value The new value of the text input.
       * @param {string} reason Can be: `"input"` (user input), `"reset"` (programmatic change), `"clear"`.
       */
      onInputChange: re.func,

      /**
       * Callback fired when the popup requests to be opened.
       * Use in controlled mode (see open).
       *
       * @param {object} event The event source of the callback.
       */
      onOpen: re.func,

      /**
       * Control the popup` open state.
       */
      open: re.bool,

      /**
       * If `true`, the popup will open on input focus.
       */
      openOnFocus: re.bool,

      /**
       * Override the default text for the *open popup* icon button.
       *
       * For localization purposes, you can use the provided [translations](/guides/localization/).
       */
      openText: re.string,

      /**
       * Array of options.
       */
      options: re.array.isRequired,

      /**
       * The component used to render the body of the popup.
       */
      PaperComponent: re.elementType,

      /**
       * The component used to position the popup.
       */
      PopperComponent: re.elementType,

      /**
       * The icon to display in place of the default popup icon.
       */
      popupIcon: re.node,

      /**
       * Render the group.
       *
       * @param {any} option The group to render.
       * @returns {ReactNode}
       */
      renderGroup: re.func,

      /**
       * Render the input.
       *
       * @param {object} params
       * @returns {ReactNode}
       */
      renderInput: re.func.isRequired,

      /**
       * Render the option, use `getOptionLabel` by default.
       *
       * @param {T} option The option to render.
       * @param {object} state The state of the component.
       * @returns {ReactNode}
       */
      renderOption: re.func,

      /**
       * Render the selected value.
       *
       * @param {T[]} value The `value` provided to the component.
       * @param {function} getTagProps A tag props getter.
       * @returns {ReactNode}
       */
      renderTags: re.func,

      /**
       * If `true`, the input's text will be selected on focus.
       * It helps the user clear the selected value.
       */
      selectOnFocus: re.bool,

      /**
       * The size of the autocomplete.
       */
      size: re.oneOf(['medium', 'small']),

      /**
       * The value of the autocomplete.
       *
       * The value must have reference equality with the option in order to be selected.
       * You can customize the equality behavior with the `getOptionSelected` prop.
       */
      value: re.any
    } : void 0;
    var Autocomplete$1 = withStyles(styles$k, {
      name: 'MuiAutocomplete'
    })(Autocomplete);

    var SPACINGS = {
      small: -16,
      medium: null
    };
    var styles$j = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          display: 'flex'
        },

        /* Styles applied to the avatar elements. */
        avatar: {
          border: "2px solid ".concat(theme.palette.background.default),
          marginLeft: -8,
          '&:first-child': {
            marginLeft: 0
          }
        }
      };
    };
    var AvatarGroup = /*#__PURE__*/React__namespace.forwardRef(function AvatarGroup(props, ref) {
      var childrenProp = props.children,
          classes = props.classes,
          className = props.className,
          _props$max = props.max,
          max = _props$max === void 0 ? 5 : _props$max,
          _props$spacing = props.spacing,
          spacing = _props$spacing === void 0 ? 'medium' : _props$spacing,
          other = _objectWithoutProperties(props, ["children", "classes", "className", "max", "spacing"]);

      var clampedMax = max < 2 ? 2 : max;
      var children = React__namespace.Children.toArray(childrenProp).filter(function (child) {
        if (process.env.NODE_ENV !== 'production') {
          if (reactIs$2.exports.isFragment(child)) {
            console.error(["Material-UI: The AvatarGroup component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n'));
          }
        }

        return /*#__PURE__*/React__namespace.isValidElement(child);
      });
      var extraAvatars = children.length > clampedMax ? children.length - clampedMax + 1 : 0;
      var marginLeft = spacing && SPACINGS[spacing] !== undefined ? SPACINGS[spacing] : -spacing;
      return /*#__PURE__*/React__namespace.createElement("div", _extends$3({
        className: r$1(classes.root, className),
        ref: ref
      }, other), children.slice(0, children.length - extraAvatars).map(function (child, index) {
        return /*#__PURE__*/React__namespace.cloneElement(child, {
          className: r$1(child.props.className, classes.avatar),
          style: _extends$3({
            zIndex: children.length - index,
            marginLeft: index === 0 ? undefined : marginLeft
          }, child.props.style)
        });
      }), extraAvatars ? /*#__PURE__*/React__namespace.createElement(Avatar$1, {
        className: classes.avatar,
        style: {
          zIndex: 0,
          marginLeft: marginLeft
        }
      }, "+", extraAvatars) : null);
    });
    process.env.NODE_ENV !== "production" ? AvatarGroup.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * The avatars to stack.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * Max avatars to show before +x.
       */
      max: chainPropTypes$1(re.number, function (props) {
        if (props.max < 2) {
          throw new Error(['Material-UI: The prop `max` should be equal to 2 or above.', 'A value below is clamped to 2.'].join('\n'));
        }
      }),

      /**
       * Spacing between avatars.
       */
      spacing: re.oneOfType([re.oneOf(['medium', 'small']), re.number])
    } : void 0;
    var AvatarGroup$1 = withStyles(styles$j, {
      name: 'MuiAvatarGroup'
    })(AvatarGroup);

    function usePagination() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      // keep default values in sync with @default tags in Pagination.propTypes
      var _props$boundaryCount = props.boundaryCount,
          boundaryCount = _props$boundaryCount === void 0 ? 1 : _props$boundaryCount,
          _props$componentName = props.componentName,
          componentName = _props$componentName === void 0 ? 'usePagination' : _props$componentName,
          _props$count = props.count,
          count = _props$count === void 0 ? 1 : _props$count,
          _props$defaultPage = props.defaultPage,
          defaultPage = _props$defaultPage === void 0 ? 1 : _props$defaultPage,
          _props$disabled = props.disabled,
          disabled = _props$disabled === void 0 ? false : _props$disabled,
          _props$hideNextButton = props.hideNextButton,
          hideNextButton = _props$hideNextButton === void 0 ? false : _props$hideNextButton,
          _props$hidePrevButton = props.hidePrevButton,
          hidePrevButton = _props$hidePrevButton === void 0 ? false : _props$hidePrevButton,
          handleChange = props.onChange,
          pageProp = props.page,
          _props$showFirstButto = props.showFirstButton,
          showFirstButton = _props$showFirstButto === void 0 ? false : _props$showFirstButto,
          _props$showLastButton = props.showLastButton,
          showLastButton = _props$showLastButton === void 0 ? false : _props$showLastButton,
          _props$siblingCount = props.siblingCount,
          siblingCount = _props$siblingCount === void 0 ? 1 : _props$siblingCount,
          other = _objectWithoutProperties(props, ["boundaryCount", "componentName", "count", "defaultPage", "disabled", "hideNextButton", "hidePrevButton", "onChange", "page", "showFirstButton", "showLastButton", "siblingCount"]);

      var _useControlled = useControlled({
        controlled: pageProp,
        default: defaultPage,
        name: componentName,
        state: 'page'
      }),
          _useControlled2 = _slicedToArray(_useControlled, 2),
          page = _useControlled2[0],
          setPageState = _useControlled2[1];

      var handleClick = function handleClick(event, value) {
        if (!pageProp) {
          setPageState(value);
        }

        if (handleChange) {
          handleChange(event, value);
        }
      }; // https://dev.to/namirsab/comment/2050


      var range = function range(start, end) {
        var length = end - start + 1;
        return Array.from({
          length: length
        }, function (_, i) {
          return start + i;
        });
      };

      var startPages = range(1, Math.min(boundaryCount, count));
      var endPages = range(Math.max(count - boundaryCount + 1, boundaryCount + 1), count);
      var siblingsStart = Math.max(Math.min( // Natural start
      page - siblingCount, // Lower boundary when page is high
      count - boundaryCount - siblingCount * 2 - 1), // Greater than startPages
      boundaryCount + 2);
      var siblingsEnd = Math.min(Math.max( // Natural end
      page + siblingCount, // Upper boundary when page is low
      boundaryCount + siblingCount * 2 + 2), // Less than endPages
      endPages[0] - 2); // Basic list of items to render
      // e.g. itemList = ['first', 'previous', 1, 'ellipsis', 4, 5, 6, 'ellipsis', 10, 'next', 'last']

      var itemList = [].concat(_toConsumableArray(showFirstButton ? ['first'] : []), _toConsumableArray(hidePrevButton ? [] : ['previous']), _toConsumableArray(startPages), _toConsumableArray(siblingsStart > boundaryCount + 2 ? ['start-ellipsis'] : boundaryCount + 1 < count - boundaryCount ? [boundaryCount + 1] : []), _toConsumableArray(range(siblingsStart, siblingsEnd)), _toConsumableArray(siblingsEnd < count - boundaryCount - 1 ? ['end-ellipsis'] : count - boundaryCount > boundaryCount ? [count - boundaryCount] : []), _toConsumableArray(endPages), _toConsumableArray(hideNextButton ? [] : ['next']), _toConsumableArray(showLastButton ? ['last'] : [])); // Map the button type to its page number

      var buttonPage = function buttonPage(type) {
        switch (type) {
          case 'first':
            return 1;

          case 'previous':
            return page - 1;

          case 'next':
            return page + 1;

          case 'last':
            return count;

          default:
            return null;
        }
      }; // Convert the basic item list to PaginationItem props objects


      var items = itemList.map(function (item) {
        return typeof item === 'number' ? {
          onClick: function onClick(event) {
            handleClick(event, item);
          },
          type: 'page',
          page: item,
          selected: item === page,
          disabled: disabled,
          'aria-current': item === page ? 'true' : undefined
        } : {
          onClick: function onClick(event) {
            handleClick(event, buttonPage(item));
          },
          type: item,
          page: buttonPage(item),
          selected: false,
          disabled: disabled || item.indexOf('ellipsis') === -1 && (item === 'next' || item === 'last' ? page >= count : page <= 1)
        };
      });
      return _extends$3({
        items: items
      }, other);
    }

    /**
     * @ignore - internal component.
     */

    var FirstPageIcon = createSvgIcon$1( /*#__PURE__*/React__namespace.createElement("path", {
      d: "M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z"
    }), 'FirstPage');

    /**
     * @ignore - internal component.
     */

    var LastPageIcon = createSvgIcon$1( /*#__PURE__*/React__namespace.createElement("path", {
      d: "M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z"
    }), 'LastPage');

    /**
     * @ignore - internal component.
     */

    var NavigateBeforeIcon = createSvgIcon$1( /*#__PURE__*/React__namespace.createElement("path", {
      d: "M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
    }), 'NavigateBefore');

    /**
     * @ignore - internal component.
     */

    var NavigateNextIcon = createSvgIcon$1( /*#__PURE__*/React__namespace.createElement("path", {
      d: "M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
    }), 'NavigateNext');

    var styles$i = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: _extends$3({}, theme.typography.body2, {
          borderRadius: 32 / 2,
          textAlign: 'center',
          boxSizing: 'border-box',
          minWidth: 32,
          height: 32,
          padding: '0 6px',
          margin: '0 3px',
          color: theme.palette.text.primary
        }),

        /* Styles applied to the root element if `type="page"`. */
        page: {
          transition: theme.transitions.create(['color', 'background-color'], {
            duration: theme.transitions.duration.short
          }),
          '&:hover': {
            backgroundColor: theme.palette.action.hover,
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
              backgroundColor: 'transparent'
            }
          },
          '&$focusVisible': {
            backgroundColor: theme.palette.action.focus
          },
          '&$selected': {
            backgroundColor: theme.palette.action.selected,
            '&:hover, &$focusVisible': {
              backgroundColor: alpha(theme.palette.action.selected, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
              // Reset on touch devices, it doesn't add specificity
              '@media (hover: none)': {
                backgroundColor: theme.palette.action.selected
              }
            },
            '&$disabled': {
              opacity: 1,
              color: theme.palette.action.disabled,
              backgroundColor: theme.palette.action.selected
            }
          },
          '&$disabled': {
            opacity: theme.palette.action.disabledOpacity
          }
        },

        /* Styles applied applied to the root element if `size="small"`. */
        sizeSmall: {
          minWidth: 26,
          height: 26,
          borderRadius: 26 / 2,
          margin: '0 1px',
          padding: '0 4px',
          '& $icon': {
            fontSize: theme.typography.pxToRem(18)
          }
        },

        /* Styles applied applied to the root element if `size="large"`. */
        sizeLarge: {
          minWidth: 40,
          height: 40,
          borderRadius: 40 / 2,
          padding: '0 10px',
          fontSize: theme.typography.pxToRem(15),
          '& $icon': {
            fontSize: theme.typography.pxToRem(22)
          }
        },

        /* Styles applied to the root element if `variant="text"` and `color="primary"`. */
        textPrimary: {
          '&$selected': {
            color: theme.palette.primary.contrastText,
            backgroundColor: theme.palette.primary.main,
            '&:hover, &$focusVisible': {
              backgroundColor: theme.palette.primary.dark,
              // Reset on touch devices, it doesn't add specificity
              '@media (hover: none)': {
                backgroundColor: theme.palette.primary.main
              }
            },
            '&$disabled': {
              color: theme.palette.action.disabled
            }
          }
        },

        /* Styles applied to the root element if `variant="text"` and `color="secondary"`. */
        textSecondary: {
          '&$selected': {
            color: theme.palette.secondary.contrastText,
            backgroundColor: theme.palette.secondary.main,
            '&:hover, &$focusVisible': {
              backgroundColor: theme.palette.secondary.dark,
              // Reset on touch devices, it doesn't add specificity
              '@media (hover: none)': {
                backgroundColor: theme.palette.secondary.main
              }
            },
            '&$disabled': {
              color: theme.palette.action.disabled
            }
          }
        },

        /* Styles applied to the root element if `outlined="true"`. */
        outlined: {
          border: "1px solid ".concat(theme.palette.type === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)'),
          '&$selected': {
            '&$disabled': {
              border: "1px solid ".concat(theme.palette.action.disabledBackground)
            }
          }
        },

        /* Styles applied to the root element if `variant="outlined"` and `color="primary"`. */
        outlinedPrimary: {
          '&$selected': {
            color: theme.palette.primary.main,
            border: "1px solid ".concat(alpha(theme.palette.primary.main, 0.5)),
            backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.activatedOpacity),
            '&:hover, &$focusVisible': {
              backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.activatedOpacity + theme.palette.action.hoverOpacity),
              // Reset on touch devices, it doesn't add specificity
              '@media (hover: none)': {
                backgroundColor: 'transparent'
              }
            },
            '&$disabled': {
              color: theme.palette.action.disabled
            }
          }
        },

        /* Styles applied to the root element if `variant="outlined"` and `color="secondary"`. */
        outlinedSecondary: {
          '&$selected': {
            color: theme.palette.secondary.main,
            border: "1px solid ".concat(alpha(theme.palette.secondary.main, 0.5)),
            backgroundColor: alpha(theme.palette.secondary.main, theme.palette.action.activatedOpacity),
            '&:hover, &$focusVisible': {
              backgroundColor: alpha(theme.palette.secondary.main, theme.palette.action.activatedOpacity + theme.palette.action.hoverOpacity),
              // Reset on touch devices, it doesn't add specificity
              '@media (hover: none)': {
                backgroundColor: 'transparent'
              }
            },
            '&$disabled': {
              color: theme.palette.action.disabled
            }
          }
        },

        /* Styles applied to the root element if `rounded="true"`. */
        rounded: {
          borderRadius: theme.shape.borderRadius
        },

        /* Styles applied to the root element if `type="start-ellipsis"` or `type="end-ellipsis"`. */
        ellipsis: {
          height: 'auto',
          '&$disabled': {
            opacity: theme.palette.action.disabledOpacity
          }
        },

        /* Pseudo-class applied to the root element if keyboard focused. */
        focusVisible: {},

        /* Pseudo-class applied to the root element if `disabled={true}`. */
        disabled: {},

        /* Pseudo-class applied to the root element if `selected={true}`. */
        selected: {},

        /* Styles applied to the icon element. */
        icon: {
          fontSize: theme.typography.pxToRem(20),
          margin: '0 -8px'
        }
      };
    };
    var PaginationItem = /*#__PURE__*/React__namespace.forwardRef(function PaginationItem(props, ref) {
      var classes = props.classes,
          className = props.className,
          _props$color = props.color,
          color = _props$color === void 0 ? 'standard' : _props$color,
          component = props.component,
          _props$disabled = props.disabled,
          disabled = _props$disabled === void 0 ? false : _props$disabled,
          page = props.page,
          _props$selected = props.selected,
          selected = _props$selected === void 0 ? false : _props$selected,
          _props$shape = props.shape,
          shape = _props$shape === void 0 ? 'round' : _props$shape,
          _props$size = props.size,
          size = _props$size === void 0 ? 'medium' : _props$size,
          _props$type = props.type,
          type = _props$type === void 0 ? 'page' : _props$type,
          _props$variant = props.variant,
          variant = _props$variant === void 0 ? 'text' : _props$variant,
          other = _objectWithoutProperties(props, ["classes", "className", "color", "component", "disabled", "page", "selected", "shape", "size", "type", "variant"]);

      var theme = useTheme();
      var normalizedIcons = theme.direction === 'rtl' ? {
        previous: NavigateNextIcon,
        next: NavigateBeforeIcon,
        last: FirstPageIcon,
        first: LastPageIcon
      } : {
        previous: NavigateBeforeIcon,
        next: NavigateNextIcon,
        first: FirstPageIcon,
        last: LastPageIcon
      };
      var Icon = normalizedIcons[type];
      return type === 'start-ellipsis' || type === 'end-ellipsis' ? /*#__PURE__*/React__namespace.createElement("div", {
        ref: ref,
        className: r$1(classes.root, classes.ellipsis, disabled && classes.disabled, size !== 'medium' && classes["size".concat(capitalize(size))])
      }, "\u2026") : /*#__PURE__*/React__namespace.createElement(ButtonBase$1, _extends$3({
        ref: ref,
        component: component,
        disabled: disabled,
        focusVisibleClassName: classes.focusVisible,
        className: r$1(classes.root, classes.page, classes[variant], classes[shape], className, color !== 'standard' && classes["".concat(variant).concat(capitalize(color))], disabled && classes.disabled, selected && classes.selected, size !== 'medium' && classes["size".concat(capitalize(size))])
      }, other), type === 'page' && page, Icon ? /*#__PURE__*/React__namespace.createElement(Icon, {
        className: classes.icon
      }) : null);
    });
    process.env.NODE_ENV !== "production" ? PaginationItem.propTypes = {
      /**
       * @ignore
       */
      classes: re.object.isRequired,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * The active color.
       */
      color: re.oneOf(['standard', 'primary', 'secondary']),

      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: re
      /* @typescript-to-proptypes-ignore */
      .elementType,

      /**
       * If `true`, the item will be disabled.
       */
      disabled: re.bool,

      /**
       * The current page number.
       */
      page: re.number,

      /**
       * If `true` the pagination item is selected.
       */
      selected: re.bool,

      /**
       * The shape of the pagination item.
       */
      shape: re.oneOf(['round', 'rounded']),

      /**
       * The size of the pagination item.
       */
      size: re.oneOf(['small', 'medium', 'large']),

      /**
       * The type of pagination item.
       */
      type: re.oneOf(['page', 'first', 'last', 'next', 'previous', 'start-ellipsis', 'end-ellipsis']),

      /**
       * The pagination item variant.
       */
      variant: re.oneOf(['text', 'outlined'])
    } : void 0;
    var PaginationItem$1 = withStyles(styles$i, {
      name: 'MuiPaginationItem'
    })(PaginationItem);

    var styles$h = {
      /* Styles applied to the root element. */
      root: {},

      /* Styles applied to the ul element. */
      ul: {
        display: 'flex',
        flexWrap: 'wrap',
        alignItems: 'center',
        padding: 0,
        margin: 0,
        listStyle: 'none'
      }
    };

    function defaultGetAriaLabel(type, page, selected) {
      if (type === 'page') {
        return "".concat(selected ? '' : 'Go to ', "page ").concat(page);
      }

      return "Go to ".concat(type, " page");
    }

    var Pagination = /*#__PURE__*/React__namespace.forwardRef(function Pagination(props, ref) {
      props.boundaryCount;
          var classes = props.classes,
          className = props.className,
          _props$color = props.color,
          color = _props$color === void 0 ? 'standard' : _props$color;
          props.count;
          props.defaultPage;
          props.disabled;
          var _props$getItemAriaLab = props.getItemAriaLabel,
          getItemAriaLabel = _props$getItemAriaLab === void 0 ? defaultGetAriaLabel : _props$getItemAriaLab;
          props.hideNextButton;
          props.hidePrevButton;
          props.onChange;
          props.page;
          var _props$renderItem = props.renderItem,
          renderItem = _props$renderItem === void 0 ? function (item) {
        return /*#__PURE__*/React__namespace.createElement(PaginationItem$1, item);
      } : _props$renderItem,
          _props$shape = props.shape,
          shape = _props$shape === void 0 ? 'round' : _props$shape;
          props.showFirstButton;
          props.showLastButton;
          props.siblingCount;
          var _props$size = props.size,
          size = _props$size === void 0 ? 'medium' : _props$size,
          _props$variant = props.variant,
          variant = _props$variant === void 0 ? 'text' : _props$variant,
          other = _objectWithoutProperties(props, ["boundaryCount", "classes", "className", "color", "count", "defaultPage", "disabled", "getItemAriaLabel", "hideNextButton", "hidePrevButton", "onChange", "page", "renderItem", "shape", "showFirstButton", "showLastButton", "siblingCount", "size", "variant"]);

      var _usePagination = usePagination(_extends$3({}, props, {
        componentName: 'Pagination'
      })),
          items = _usePagination.items;

      return /*#__PURE__*/React__namespace.createElement("nav", _extends$3({
        "aria-label": "pagination navigation",
        className: r$1(classes.root, className),
        ref: ref
      }, other), /*#__PURE__*/React__namespace.createElement("ul", {
        className: classes.ul
      }, items.map(function (item, index) {
        return /*#__PURE__*/React__namespace.createElement("li", {
          key: index
        }, renderItem(_extends$3({}, item, {
          color: color,
          'aria-label': getItemAriaLabel(item.type, item.page, item.selected),
          shape: shape,
          size: size,
          variant: variant
        })));
      })));
    }); // @default tags synced with default values from usePagination

    process.env.NODE_ENV !== "production" ? Pagination.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * Number of always visible pages at the beginning and end.
       * @default 1
       */
      boundaryCount: re.number,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * The active color.
       */
      color: re.oneOf(['primary', 'secondary', 'standard']),

      /**
       * The total number of pages.
       * @default 1
       */
      count: re.number,

      /**
       * The page selected by default when the component is uncontrolled.
       * @default 1
       */
      defaultPage: re.number,

      /**
       * If `true`, the pagination component will be disabled.
       * @default false
       */
      disabled: re.bool,

      /**
       * Accepts a function which returns a string value that provides a user-friendly name for the current page.
       *
       * For localization purposes, you can use the provided [translations](/guides/localization/).
       *
       * @param {string} type The link or button type to format ('page' | 'first' | 'last' | 'next' | 'previous'). Defaults to 'page'.
       * @param {number} page The page number to format.
       * @param {bool} selected If true, the current page is selected.
       * @returns {string}
       */
      getItemAriaLabel: re.func,

      /**
       * If `true`, hide the next-page button.
       * @default false
       */
      hideNextButton: re.bool,

      /**
       * If `true`, hide the previous-page button.
       * @default false
       */
      hidePrevButton: re.bool,

      /**
       * Callback fired when the page is changed.
       *
       * @param {object} event The event source of the callback.
       * @param {number} page The page selected.
       */
      onChange: re.func,

      /**
       * The current page.
       */
      page: re.number,

      /**
       * Render the item.
       *
       * @param {PaginationRenderItemParams} params The props to spread on a PaginationItem.
       * @returns {ReactNode}
       */
      renderItem: re.func,

      /**
       * The shape of the pagination items.
       */
      shape: re.oneOf(['round', 'rounded']),

      /**
       * If `true`, show the first-page button.
       * @default false
       */
      showFirstButton: re.bool,

      /**
       * If `true`, show the last-page button.
       * @default false
       */
      showLastButton: re.bool,

      /**
       * Number of always visible pages before and after the current page.
       * @default 1
       */
      siblingCount: re.number,

      /**
       * The size of the pagination component.
       */
      size: re.oneOf(['large', 'medium', 'small']),

      /**
       * The variant to use.
       */
      variant: re.oneOf(['outlined', 'text'])
    } : void 0;
    var Pagination$1 = withStyles(styles$h, {
      name: 'MuiPagination'
    })(Pagination);

    /**
     * @ignore - internal component.
     */

    var Star = createSvgIcon$1( /*#__PURE__*/React__namespace.createElement("path", {
      d: "M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z"
    }), 'Star');

    function clamp$2(value, min, max) {
      if (value < min) {
        return min;
      }

      if (value > max) {
        return max;
      }

      return value;
    }

    function getDecimalPrecision(num) {
      var decimalPart = num.toString().split('.')[1];
      return decimalPart ? decimalPart.length : 0;
    }

    function roundValueToPrecision(value, precision) {
      if (value == null) {
        return value;
      }

      var nearest = Math.round(value / precision) * precision;
      return Number(nearest.toFixed(getDecimalPrecision(precision)));
    }

    var styles$g = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          display: 'inline-flex',
          position: 'relative',
          fontSize: theme.typography.pxToRem(24),
          color: '#ffb400',
          cursor: 'pointer',
          textAlign: 'left',
          WebkitTapHighlightColor: 'transparent',
          '&$disabled': {
            opacity: 0.5,
            pointerEvents: 'none'
          },
          '&$focusVisible $iconActive': {
            outline: '1px solid #999'
          }
        },

        /* Styles applied to the root element if `size="small"`. */
        sizeSmall: {
          fontSize: theme.typography.pxToRem(18)
        },

        /* Styles applied to the root element if `size="large"`. */
        sizeLarge: {
          fontSize: theme.typography.pxToRem(30)
        },

        /* Styles applied to the root element if `readOnly={true}`. */
        readOnly: {
          pointerEvents: 'none'
        },

        /* Pseudo-class applied to the root element if `disabled={true}`. */
        disabled: {},

        /* Pseudo-class applied to the root element if keyboard focused. */
        focusVisible: {},

        /* Visually hide an element. */
        visuallyhidden: {
          border: 0,
          clip: 'rect(0 0 0 0)',
          height: 1,
          margin: -1,
          color: '#000',
          overflow: 'hidden',
          padding: 0,
          position: 'absolute',
          top: 20,
          width: 1
        },

        /* Styles applied to the pristine label. */
        pristine: {
          'input:focus + &': {
            top: 0,
            bottom: 0,
            position: 'absolute',
            outline: '1px solid #999',
            width: '100%'
          }
        },

        /* Styles applied to the label elements. */
        label: {
          cursor: 'inherit'
        },

        /* Styles applied to the icon wrapping elements. */
        icon: {
          display: 'flex',
          transition: theme.transitions.create('transform', {
            duration: theme.transitions.duration.shortest
          }),
          // Fix mouseLeave issue.
          // https://github.com/facebook/react/issues/4492
          pointerEvents: 'none'
        },

        /* Styles applied to the icon wrapping elements when empty. */
        iconEmpty: {
          color: theme.palette.action.disabled
        },

        /* Styles applied to the icon wrapping elements when filled. */
        iconFilled: {},

        /* Styles applied to the icon wrapping elements when hover. */
        iconHover: {},

        /* Styles applied to the icon wrapping elements when focus. */
        iconFocus: {},

        /* Styles applied to the icon wrapping elements when active. */
        iconActive: {
          transform: 'scale(1.2)'
        },

        /* Styles applied to the icon wrapping elements when decimals are necessary. */
        decimal: {
          position: 'relative'
        }
      };
    };

    function IconContainer(props) {
      props.value;
          var other = _objectWithoutProperties(props, ["value"]);

      return /*#__PURE__*/React__namespace.createElement("span", other);
    }

    process.env.NODE_ENV !== "production" ? IconContainer.propTypes = {
      value: re.number.isRequired
    } : void 0;
    var defaultIcon = /*#__PURE__*/React__namespace.createElement(Star, {
      fontSize: "inherit"
    });

    function defaultLabelText(value) {
      return "".concat(value, " Star").concat(value !== 1 ? 's' : '');
    }

    var Rating = /*#__PURE__*/React__namespace.forwardRef(function Rating(props, ref) {
      var classes = props.classes,
          className = props.className,
          _props$defaultValue = props.defaultValue,
          defaultValue = _props$defaultValue === void 0 ? null : _props$defaultValue,
          _props$disabled = props.disabled,
          disabled = _props$disabled === void 0 ? false : _props$disabled,
          emptyIcon = props.emptyIcon,
          _props$emptyLabelText = props.emptyLabelText,
          emptyLabelText = _props$emptyLabelText === void 0 ? 'Empty' : _props$emptyLabelText,
          _props$getLabelText = props.getLabelText,
          getLabelText = _props$getLabelText === void 0 ? defaultLabelText : _props$getLabelText,
          _props$icon = props.icon,
          icon = _props$icon === void 0 ? defaultIcon : _props$icon,
          _props$IconContainerC = props.IconContainerComponent,
          IconContainerComponent = _props$IconContainerC === void 0 ? IconContainer : _props$IconContainerC,
          _props$max = props.max,
          max = _props$max === void 0 ? 5 : _props$max,
          nameProp = props.name,
          onChange = props.onChange,
          onChangeActive = props.onChangeActive,
          onMouseLeave = props.onMouseLeave,
          onMouseMove = props.onMouseMove,
          _props$precision = props.precision,
          precision = _props$precision === void 0 ? 1 : _props$precision,
          _props$readOnly = props.readOnly,
          readOnly = _props$readOnly === void 0 ? false : _props$readOnly,
          _props$size = props.size,
          size = _props$size === void 0 ? 'medium' : _props$size,
          valueProp = props.value,
          other = _objectWithoutProperties(props, ["classes", "className", "defaultValue", "disabled", "emptyIcon", "emptyLabelText", "getLabelText", "icon", "IconContainerComponent", "max", "name", "onChange", "onChangeActive", "onMouseLeave", "onMouseMove", "precision", "readOnly", "size", "value"]);

      var name = useId(nameProp);

      var _useControlled = useControlled({
        controlled: valueProp,
        default: defaultValue,
        name: 'Rating'
      }),
          _useControlled2 = _slicedToArray(_useControlled, 2),
          valueDerived = _useControlled2[0],
          setValueState = _useControlled2[1];

      var valueRounded = roundValueToPrecision(valueDerived, precision);
      var theme = useTheme();

      var _React$useState = React__namespace.useState({
        hover: -1,
        focus: -1
      }),
          _React$useState$ = _React$useState[0],
          hover = _React$useState$.hover,
          focus = _React$useState$.focus,
          setState = _React$useState[1];

      var value = valueRounded;

      if (hover !== -1) {
        value = hover;
      }

      if (focus !== -1) {
        value = focus;
      }

      var _useIsFocusVisible = useIsFocusVisible(),
          isFocusVisible = _useIsFocusVisible.isFocusVisible,
          onBlurVisible = _useIsFocusVisible.onBlurVisible,
          focusVisibleRef = _useIsFocusVisible.ref;

      var _React$useState2 = React__namespace.useState(false),
          focusVisible = _React$useState2[0],
          setFocusVisible = _React$useState2[1];

      var rootRef = React__namespace.useRef();
      var handleFocusRef = useForkRef(focusVisibleRef, rootRef);
      var handleRef = useForkRef(handleFocusRef, ref);

      var handleMouseMove = function handleMouseMove(event) {
        if (onMouseMove) {
          onMouseMove(event);
        }

        var rootNode = rootRef.current;

        var _rootNode$getBounding = rootNode.getBoundingClientRect(),
            right = _rootNode$getBounding.right,
            left = _rootNode$getBounding.left;

        var _rootNode$firstChild$ = rootNode.firstChild.getBoundingClientRect(),
            width = _rootNode$firstChild$.width;

        var percent;

        if (theme.direction === 'rtl') {
          percent = (right - event.clientX) / (width * max);
        } else {
          percent = (event.clientX - left) / (width * max);
        }

        var newHover = roundValueToPrecision(max * percent + precision / 2, precision);
        newHover = clamp$2(newHover, precision, max);
        setState(function (prev) {
          return prev.hover === newHover && prev.focus === newHover ? prev : {
            hover: newHover,
            focus: newHover
          };
        });
        setFocusVisible(false);

        if (onChangeActive && hover !== newHover) {
          onChangeActive(event, newHover);
        }
      };

      var handleMouseLeave = function handleMouseLeave(event) {
        if (onMouseLeave) {
          onMouseLeave(event);
        }

        var newHover = -1;
        setState({
          hover: newHover,
          focus: newHover
        });

        if (onChangeActive && hover !== newHover) {
          onChangeActive(event, newHover);
        }
      };

      var handleChange = function handleChange(event) {
        var newValue = parseFloat(event.target.value);
        setValueState(newValue);

        if (onChange) {
          onChange(event, newValue);
        }
      };

      var handleClear = function handleClear(event) {
        // Ignore keyboard events
        // https://github.com/facebook/react/issues/7407
        if (event.clientX === 0 && event.clientY === 0) {
          return;
        }

        setState({
          hover: -1,
          focus: -1
        });
        setValueState(null);

        if (onChange && parseFloat(event.target.value) === valueRounded) {
          onChange(event, null);
        }
      };

      var handleFocus = function handleFocus(event) {
        if (isFocusVisible(event)) {
          setFocusVisible(true);
        }

        var newFocus = parseFloat(event.target.value);
        setState(function (prev) {
          return {
            hover: prev.hover,
            focus: newFocus
          };
        });

        if (onChangeActive && focus !== newFocus) {
          onChangeActive(event, newFocus);
        }
      };

      var handleBlur = function handleBlur(event) {
        if (hover !== -1) {
          return;
        }

        if (focusVisible !== false) {
          setFocusVisible(false);
          onBlurVisible();
        }

        var newFocus = -1;
        setState(function (prev) {
          return {
            hover: prev.hover,
            focus: newFocus
          };
        });

        if (onChangeActive && focus !== newFocus) {
          onChangeActive(event, newFocus);
        }
      };

      var item = function item(state, labelProps) {
        var id = "".concat(name, "-").concat(String(state.value).replace('.', '-'));
        var container = /*#__PURE__*/React__namespace.createElement(IconContainerComponent, {
          value: state.value,
          className: r$1(classes.icon, state.filled ? classes.iconFilled : classes.iconEmpty, state.hover && classes.iconHover, state.focus && classes.iconFocus, state.active && classes.iconActive)
        }, emptyIcon && !state.filled ? emptyIcon : icon);

        if (readOnly) {
          return /*#__PURE__*/React__namespace.createElement("span", _extends$3({
            key: state.value
          }, labelProps), container);
        }

        return /*#__PURE__*/React__namespace.createElement(React__namespace.Fragment, {
          key: state.value
        }, /*#__PURE__*/React__namespace.createElement("label", _extends$3({
          className: classes.label,
          htmlFor: id
        }, labelProps), container, /*#__PURE__*/React__namespace.createElement("span", {
          className: classes.visuallyhidden
        }, getLabelText(state.value))), /*#__PURE__*/React__namespace.createElement("input", {
          onFocus: handleFocus,
          onBlur: handleBlur,
          onChange: handleChange,
          onClick: handleClear,
          disabled: disabled,
          value: state.value,
          id: id,
          type: "radio",
          name: name,
          checked: state.checked,
          className: classes.visuallyhidden
        }));
      };

      return /*#__PURE__*/React__namespace.createElement("span", _extends$3({
        ref: handleRef,
        onMouseMove: handleMouseMove,
        onMouseLeave: handleMouseLeave,
        className: r$1(classes.root, className, size !== 'medium' && classes["size".concat(capitalize(size))], disabled && classes.disabled, focusVisible && classes.focusVisible, readOnly && classes.readOnly),
        role: readOnly ? 'img' : null,
        "aria-label": readOnly ? getLabelText(value) : null
      }, other), Array.from(new Array(max)).map(function (_, index) {
        var itemValue = index + 1;

        if (precision < 1) {
          var items = Array.from(new Array(1 / precision));
          return /*#__PURE__*/React__namespace.createElement("span", {
            key: itemValue,
            className: r$1(classes.decimal, itemValue === Math.ceil(value) && (hover !== -1 || focus !== -1) && classes.iconActive)
          }, items.map(function ($, indexDecimal) {
            var itemDecimalValue = roundValueToPrecision(itemValue - 1 + (indexDecimal + 1) * precision, precision);
            return item({
              value: itemDecimalValue,
              filled: itemDecimalValue <= value,
              hover: itemDecimalValue <= hover,
              focus: itemDecimalValue <= focus,
              checked: itemDecimalValue === valueRounded
            }, {
              style: items.length - 1 === indexDecimal ? {} : {
                width: itemDecimalValue === value ? "".concat((indexDecimal + 1) * precision * 100, "%") : '0%',
                overflow: 'hidden',
                zIndex: 1,
                position: 'absolute'
              }
            });
          }));
        }

        return item({
          value: itemValue,
          active: itemValue === value && (hover !== -1 || focus !== -1),
          filled: itemValue <= value,
          hover: itemValue <= hover,
          focus: itemValue <= focus,
          checked: itemValue === valueRounded
        });
      }), !readOnly && !disabled && valueRounded == null && /*#__PURE__*/React__namespace.createElement(React__namespace.Fragment, null, /*#__PURE__*/React__namespace.createElement("input", {
        value: "",
        id: "".concat(name, "-empty"),
        type: "radio",
        name: name,
        defaultChecked: true,
        className: classes.visuallyhidden
      }), /*#__PURE__*/React__namespace.createElement("label", {
        className: classes.pristine,
        htmlFor: "".concat(name, "-empty")
      }, /*#__PURE__*/React__namespace.createElement("span", {
        className: classes.visuallyhidden
      }, emptyLabelText))));
    });
    process.env.NODE_ENV !== "production" ? Rating.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * The default value. Use when the component is not controlled.
       */
      defaultValue: re.number,

      /**
       * If `true`, the rating will be disabled.
       */
      disabled: re.bool,

      /**
       * The icon to display when empty.
       */
      emptyIcon: re.node,

      /**
       * The label read when the rating input is empty.
       */
      emptyLabelText: re.node,

      /**
       * Accepts a function which returns a string value that provides a user-friendly name for the current value of the rating.
       *
       * For localization purposes, you can use the provided [translations](/guides/localization/).
       *
       * @param {number} value The rating label's value to format.
       * @returns {string}
       */
      getLabelText: re.func,

      /**
       * The icon to display.
       */
      icon: re.node,

      /**
       * The component containing the icon.
       */
      IconContainerComponent: re.elementType,

      /**
       * Maximum rating.
       */
      max: re.number,

      /**
       * The name attribute of the radio `input` elements.
       * If `readOnly` is false, the prop is required,
       * this input name`should be unique within the parent form.
       */
      name: chainPropTypes$1(re.string, function (props) {
        if (!props.readOnly && !props.name) {
          return new Error(['Material-UI: The prop `name` is required (when `readOnly` is false).', 'Additionally, the input name should be unique within the parent form.'].join('\n'));
        }

        return null;
      }),

      /**
       * Callback fired when the value changes.
       *
       * @param {object} event The event source of the callback.
       * @param {number} value The new value.
       */
      onChange: re.func,

      /**
       * Callback function that is fired when the hover state changes.
       *
       * @param {object} event The event source of the callback.
       * @param {number} value The new value.
       */
      onChangeActive: re.func,

      /**
       * @ignore
       */
      onMouseLeave: re.func,

      /**
       * @ignore
       */
      onMouseMove: re.func,

      /**
       * The minimum increment value change allowed.
       */
      precision: chainPropTypes$1(re.number, function (props) {
        if (props.precision < 0.1) {
          return new Error(['Material-UI: The prop `precision` should be above 0.1.', 'A value below this limit has an imperceptible impact.'].join('\n'));
        }

        return null;
      }),

      /**
       * Removes all hover effects and pointer events.
       */
      readOnly: re.bool,

      /**
       * The size of the rating.
       */
      size: re.oneOf(['large', 'medium', 'small']),

      /**
       * The rating value.
       */
      value: re.number
    } : void 0;
    var Rating$1 = withStyles(styles$g, {
      name: 'MuiRating'
    })(Rating);

    var styles$f = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          display: 'block',
          // Create a "on paper" color with sufficient contrast retaining the color
          backgroundColor: alpha(theme.palette.text.primary, theme.palette.type === 'light' ? 0.11 : 0.13),
          height: '1.2em'
        },

        /* Styles applied to the root element if `variant="text"`. */
        text: {
          marginTop: 0,
          marginBottom: 0,
          height: 'auto',
          transformOrigin: '0 60%',
          transform: 'scale(1, 0.60)',
          borderRadius: theme.shape.borderRadius,
          '&:empty:before': {
            content: '"\\00a0"'
          }
        },

        /* Styles applied to the root element if `variant="rect"`. */
        rect: {},

        /* Styles applied to the root element if `variant="circle"`. */
        circle: {
          borderRadius: '50%'
        },

        /* Styles applied to the root element if `animation="pulse"`. */
        pulse: {
          animation: '$pulse 1.5s ease-in-out 0.5s infinite'
        },
        '@keyframes pulse': {
          '0%': {
            opacity: 1
          },
          '50%': {
            opacity: 0.4
          },
          '100%': {
            opacity: 1
          }
        },

        /* Styles applied to the root element if `animation="wave"`. */
        wave: {
          position: 'relative',
          overflow: 'hidden',
          '&::after': {
            animation: '$wave 1.6s linear 0.5s infinite',
            background: "linear-gradient(90deg, transparent, ".concat(theme.palette.action.hover, ", transparent)"),
            content: '""',
            position: 'absolute',
            transform: 'translateX(-100%)',
            // Avoid flash during server-side hydration
            bottom: 0,
            left: 0,
            right: 0,
            top: 0
          }
        },
        '@keyframes wave': {
          '0%': {
            transform: 'translateX(-100%)'
          },
          '60%': {
            // +0.5s of delay between each loop
            transform: 'translateX(100%)'
          },
          '100%': {
            transform: 'translateX(100%)'
          }
        },

        /* Styles applied when the component is passed children. */
        withChildren: {
          '& > *': {
            visibility: 'hidden'
          }
        },

        /* Styles applied when the component is passed children and no width. */
        fitContent: {
          maxWidth: 'fit-content'
        },

        /* Styles applied when the component is passed children and no height. */
        heightAuto: {
          height: 'auto'
        }
      };
    };
    var Skeleton = /*#__PURE__*/React__namespace.forwardRef(function Skeleton(props, ref) {
      var _props$animation = props.animation,
          animation = _props$animation === void 0 ? 'pulse' : _props$animation,
          classes = props.classes,
          className = props.className,
          _props$component = props.component,
          Component = _props$component === void 0 ? 'span' : _props$component,
          height = props.height,
          _props$variant = props.variant,
          variant = _props$variant === void 0 ? 'text' : _props$variant,
          width = props.width,
          other = _objectWithoutProperties(props, ["animation", "classes", "className", "component", "height", "variant", "width"]);

      var hasChildren = Boolean(other.children);
      return /*#__PURE__*/React__namespace.createElement(Component, _extends$3({
        ref: ref,
        className: r$1(classes.root, classes[variant], className, hasChildren && [classes.withChildren, !width && classes.fitContent, !height && classes.heightAuto], animation !== false && classes[animation])
      }, other, {
        style: _extends$3({
          width: width,
          height: height
        }, other.style)
      }));
    });
    process.env.NODE_ENV !== "production" ? Skeleton.propTypes = {
      /**
       * The animation.
       * If `false` the animation effect is disabled.
       */
      animation: re.oneOf(['pulse', 'wave', false]),

      /**
       * Optional children to infer width and height from.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object.isRequired,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: re
      /* @typescript-to-proptypes-ignore */
      .elementType,

      /**
       * Height of the skeleton.
       * Useful when you don't want to adapt the skeleton to a text element but for instance a card.
       */
      height: re.oneOfType([re.number, re.string]),

      /**
       * The type of content that will be rendered.
       */
      variant: re.oneOf(['text', 'rect', 'circle']),

      /**
       * Width of the skeleton.
       * Useful when the skeleton is inside an inline element with no width of its own.
       */
      width: re.oneOfType([re.number, re.string])
    } : void 0;
    var Skeleton$1 = withStyles(styles$f, {
      name: 'MuiSkeleton'
    })(Skeleton);

    function getOrientation(direction) {
      if (direction === 'up' || direction === 'down') {
        return 'vertical';
      }

      if (direction === 'right' || direction === 'left') {
        return 'horizontal';
      }

      return undefined;
    }

    function clamp$1(value, min, max) {
      if (value < min) {
        return min;
      }

      if (value > max) {
        return max;
      }

      return value;
    }

    var dialRadius = 32;
    var spacingActions = 16;
    var styles$e = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          zIndex: theme.zIndex.speedDial,
          display: 'flex',
          alignItems: 'center',
          pointerEvents: 'none'
        },

        /* Styles applied to the Fab component. */
        fab: {
          pointerEvents: 'auto'
        },

        /* Styles applied to the root if direction="up" */
        directionUp: {
          flexDirection: 'column-reverse',
          '& $actions': {
            flexDirection: 'column-reverse',
            marginBottom: -dialRadius,
            paddingBottom: spacingActions + dialRadius
          }
        },

        /* Styles applied to the root if direction="down" */
        directionDown: {
          flexDirection: 'column',
          '& $actions': {
            flexDirection: 'column',
            marginTop: -dialRadius,
            paddingTop: spacingActions + dialRadius
          }
        },

        /* Styles applied to the root if direction="left" */
        directionLeft: {
          flexDirection: 'row-reverse',
          '& $actions': {
            flexDirection: 'row-reverse',
            marginRight: -dialRadius,
            paddingRight: spacingActions + dialRadius
          }
        },

        /* Styles applied to the root if direction="right" */
        directionRight: {
          flexDirection: 'row',
          '& $actions': {
            flexDirection: 'row',
            marginLeft: -dialRadius,
            paddingLeft: spacingActions + dialRadius
          }
        },

        /* Styles applied to the actions (`children` wrapper) element. */
        actions: {
          display: 'flex',
          pointerEvents: 'auto'
        },

        /* Styles applied to the actions (`children` wrapper) element if `open={false}`. */
        actionsClosed: {
          transition: 'top 0s linear 0.2s',
          pointerEvents: 'none'
        }
      };
    };
    var SpeedDial = /*#__PURE__*/React__namespace.forwardRef(function SpeedDial(props, ref) {
      var ariaLabel = props.ariaLabel,
          _props$FabProps = props.FabProps;
      _props$FabProps = _props$FabProps === void 0 ? {} : _props$FabProps;

      var origDialButtonRef = _props$FabProps.ref,
          FabProps = _objectWithoutProperties(_props$FabProps, ["ref"]),
          childrenProp = props.children,
          classes = props.classes,
          className = props.className,
          _props$direction = props.direction,
          direction = _props$direction === void 0 ? 'up' : _props$direction,
          _props$hidden = props.hidden,
          hidden = _props$hidden === void 0 ? false : _props$hidden,
          icon = props.icon,
          onBlur = props.onBlur,
          onClose = props.onClose,
          onFocus = props.onFocus,
          onKeyDown = props.onKeyDown,
          onMouseEnter = props.onMouseEnter,
          onMouseLeave = props.onMouseLeave,
          onOpen = props.onOpen,
          open = props.open;
          props.openIcon;
          var _props$TransitionComp = props.TransitionComponent,
          TransitionComponent = _props$TransitionComp === void 0 ? Zoom$1 : _props$TransitionComp,
          _props$transitionDura = props.transitionDuration,
          transitionDuration = _props$transitionDura === void 0 ? {
        enter: duration.enteringScreen,
        exit: duration.leavingScreen
      } : _props$transitionDura,
          TransitionProps = props.TransitionProps,
          other = _objectWithoutProperties(props, ["ariaLabel", "FabProps", "children", "classes", "className", "direction", "hidden", "icon", "onBlur", "onClose", "onFocus", "onKeyDown", "onMouseEnter", "onMouseLeave", "onOpen", "open", "openIcon", "TransitionComponent", "transitionDuration", "TransitionProps"]);

      var eventTimer = React__namespace.useRef();
      React__namespace.useEffect(function () {
        return function () {
          clearTimeout(eventTimer.current);
        };
      }, []);
      /**
       * an index in actions.current
       */

      var focusedAction = React__namespace.useRef(0);
      /**
       * pressing this key while the focus is on a child SpeedDialAction focuses
       * the next SpeedDialAction.
       * It is equal to the first arrow key pressed while focus is on the SpeedDial
       * that is not orthogonal to the direction.
       * @type {utils.ArrowKey?}
       */

      var nextItemArrowKey = React__namespace.useRef();
      /**
       * refs to the Button that have an action associated to them in this SpeedDial
       * [Fab, ...(SpeedDialActions > Button)]
       * @type {HTMLButtonElement[]}
       */

      var actions = React__namespace.useRef([]);
      actions.current = [actions.current[0]];
      var handleOwnFabRef = React__namespace.useCallback(function (fabFef) {
        actions.current[0] = fabFef;
      }, []);
      var handleFabRef = useForkRef(origDialButtonRef, handleOwnFabRef);
      /**
       * creates a ref callback for the Button in a SpeedDialAction
       * Is called before the original ref callback for Button that was set in buttonProps
       *
       * @param dialActionIndex {number}
       * @param origButtonRef {React.RefObject?}
       */

      var createHandleSpeedDialActionButtonRef = function createHandleSpeedDialActionButtonRef(dialActionIndex, origButtonRef) {
        return function (buttonRef) {
          actions.current[dialActionIndex + 1] = buttonRef;

          if (origButtonRef) {
            origButtonRef(buttonRef);
          }
        };
      };

      var handleKeyDown = function handleKeyDown(event) {
        if (onKeyDown) {
          onKeyDown(event);
        }

        var key = event.key.replace('Arrow', '').toLowerCase();
        var _nextItemArrowKey$cur = nextItemArrowKey.current,
            nextItemArrowKeyCurrent = _nextItemArrowKey$cur === void 0 ? key : _nextItemArrowKey$cur;

        if (event.key === 'Escape') {
          if (onClose) {
            actions.current[0].focus();
            onClose(event, 'escapeKeyDown');
          }

          return;
        }

        if (getOrientation(key) === getOrientation(nextItemArrowKeyCurrent) && getOrientation(key) !== undefined) {
          event.preventDefault();
          var actionStep = key === nextItemArrowKeyCurrent ? 1 : -1; // stay within array indices

          var nextAction = clamp$1(focusedAction.current + actionStep, 0, actions.current.length - 1);
          actions.current[nextAction].focus();
          focusedAction.current = nextAction;
          nextItemArrowKey.current = nextItemArrowKeyCurrent;
        }
      };

      React__namespace.useEffect(function () {
        // actions were closed while navigation state was not reset
        if (!open) {
          focusedAction.current = 0;
          nextItemArrowKey.current = undefined;
        }
      }, [open]);

      var handleClose = function handleClose(event) {
        if (event.type === 'mouseleave' && onMouseLeave) {
          onMouseLeave(event);
        }

        if (event.type === 'blur' && onBlur) {
          onBlur(event);
        }

        clearTimeout(eventTimer.current);

        if (onClose) {
          if (event.type === 'blur') {
            event.persist();
            eventTimer.current = setTimeout(function () {
              onClose(event, 'blur');
            });
          } else {
            onClose(event, 'mouseLeave');
          }
        }
      };

      var handleClick = function handleClick(event) {
        if (FabProps.onClick) {
          FabProps.onClick(event);
        }

        clearTimeout(eventTimer.current);

        if (open) {
          if (onClose) {
            onClose(event, 'toggle');
          }
        } else if (onOpen) {
          onOpen(event, 'toggle');
        }
      };

      var handleOpen = function handleOpen(event) {
        if (event.type === 'mouseenter' && onMouseEnter) {
          onMouseEnter(event);
        }

        if (event.type === 'focus' && onFocus) {
          onFocus(event);
        } // When moving the focus between two items,
        // a chain if blur and focus event is triggered.
        // We only handle the last event.


        clearTimeout(eventTimer.current);

        if (onOpen && !open) {
          event.persist(); // Wait for a future focus or click event

          eventTimer.current = setTimeout(function () {
            var eventMap = {
              focus: 'focus',
              mouseenter: 'mouseEnter'
            };
            onOpen(event, eventMap[event.type]);
          });
        }
      }; // Filter the label for valid id characters.


      var id = ariaLabel.replace(/^[^a-z]+|[^\w:.-]+/gi, '');
      var allItems = React__namespace.Children.toArray(childrenProp).filter(function (child) {
        if (process.env.NODE_ENV !== 'production') {
          if (reactIs$2.exports.isFragment(child)) {
            console.error(["Material-UI: The SpeedDial component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n'));
          }
        }

        return /*#__PURE__*/React__namespace.isValidElement(child);
      });
      var children = allItems.map(function (child, index) {
        var _child$props$FabProps = child.props.FabProps;
        _child$props$FabProps = _child$props$FabProps === void 0 ? {} : _child$props$FabProps;

        var origButtonRef = _child$props$FabProps.ref,
            ChildFabProps = _objectWithoutProperties(_child$props$FabProps, ["ref"]);

        return /*#__PURE__*/React__namespace.cloneElement(child, {
          FabProps: _extends$3({}, ChildFabProps, {
            ref: createHandleSpeedDialActionButtonRef(index, origButtonRef)
          }),
          delay: 30 * (open ? index : allItems.length - index),
          open: open,
          id: "".concat(id, "-action-").concat(index)
        });
      });
      return /*#__PURE__*/React__namespace.createElement("div", _extends$3({
        className: r$1(classes.root, classes["direction".concat(capitalize(direction))], className),
        ref: ref,
        role: "presentation",
        onKeyDown: handleKeyDown,
        onBlur: handleClose,
        onFocus: handleOpen,
        onMouseEnter: handleOpen,
        onMouseLeave: handleClose
      }, other), /*#__PURE__*/React__namespace.createElement(TransitionComponent, _extends$3({
        in: !hidden,
        timeout: transitionDuration,
        unmountOnExit: true
      }, TransitionProps), /*#__PURE__*/React__namespace.createElement(Fab$1, _extends$3({
        color: "primary",
        "aria-label": ariaLabel,
        "aria-haspopup": "true",
        "aria-expanded": open,
        "aria-controls": "".concat(id, "-actions")
      }, FabProps, {
        onClick: handleClick,
        className: r$1(classes.fab, FabProps.className),
        ref: handleFabRef
      }), /*#__PURE__*/React__namespace.isValidElement(icon) && isMuiElement(icon, ['SpeedDialIcon']) ? /*#__PURE__*/React__namespace.cloneElement(icon, {
        open: open
      }) : icon)), /*#__PURE__*/React__namespace.createElement("div", {
        id: "".concat(id, "-actions"),
        role: "menu",
        "aria-orientation": getOrientation(direction),
        className: r$1(classes.actions, !open && classes.actionsClosed)
      }, children));
    });
    process.env.NODE_ENV !== "production" ? SpeedDial.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * The aria-label of the button element.
       * Also used to provide the `id` for the `SpeedDial` element and its children.
       */
      ariaLabel: re.string.isRequired,

      /**
       * SpeedDialActions to display when the SpeedDial is `open`.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * The direction the actions open relative to the floating action button.
       */
      direction: re.oneOf(['down', 'left', 'right', 'up']),

      /**
       * Props applied to the [`Fab`](/api/fab/) element.
       */
      FabProps: re.object,

      /**
       * If `true`, the SpeedDial will be hidden.
       */
      hidden: re.bool,

      /**
       * The icon to display in the SpeedDial Fab. The `SpeedDialIcon` component
       * provides a default Icon with animation.
       */
      icon: re.node,

      /**
       * @ignore
       */
      onBlur: re.func,

      /**
       * Callback fired when the component requests to be closed.
       *
       * @param {object} event The event source of the callback.
       * @param {string} reason Can be: `"toggle"`, `"blur"`, `"mouseLeave"`, `"escapeKeyDown"`.
       */
      onClose: re.func,

      /**
       * @ignore
       */
      onFocus: re.func,

      /**
       * @ignore
       */
      onKeyDown: re.func,

      /**
       * @ignore
       */
      onMouseEnter: re.func,

      /**
       * @ignore
       */
      onMouseLeave: re.func,

      /**
       * Callback fired when the component requests to be open.
       *
       * @param {object} event The event source of the callback.
       * @param {string} reason Can be: `"toggle"`, `"focus"`, `"mouseEnter"`.
       */
      onOpen: re.func,

      /**
       * If `true`, the SpeedDial is open.
       */
      open: re.bool.isRequired,

      /**
       * The icon to display in the SpeedDial Fab when the SpeedDial is open.
       */
      openIcon: re.node,

      /**
       * The component used for the transition.
       * [Follow this guide](/components/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
       */
      TransitionComponent: re.elementType,

      /**
       * The duration for the transition, in milliseconds.
       * You may specify a single timeout for all transitions, or individually with an object.
       */
      transitionDuration: re.oneOfType([re.number, re.shape({
        appear: re.number,
        enter: re.number,
        exit: re.number
      })]),

      /**
       * Props applied to the [`Transition`](http://reactcommunity.org/react-transition-group/transition#Transition-props) element.
       */
      TransitionProps: re.object
    } : void 0;
    var SpeedDial$1 = withStyles(styles$e, {
      name: 'MuiSpeedDial'
    })(SpeedDial);

    var styles$d = function styles(theme) {
      return {
        /* Styles applied to the Fab component. */
        fab: {
          margin: 8,
          color: theme.palette.text.secondary,
          backgroundColor: theme.palette.background.paper,
          '&:hover': {
            backgroundColor: emphasize(theme.palette.background.paper, 0.15)
          },
          transition: "".concat(theme.transitions.create('transform', {
            duration: theme.transitions.duration.shorter
          }), ", opacity 0.8s"),
          opacity: 1
        },

        /* Styles applied to the Fab component if `open={false}`. */
        fabClosed: {
          opacity: 0,
          transform: 'scale(0)'
        },

        /* Styles applied to the root element if `tooltipOpen={true}`. */
        staticTooltip: {
          position: 'relative',
          display: 'flex',
          '& $staticTooltipLabel': {
            transition: theme.transitions.create(['transform', 'opacity'], {
              duration: theme.transitions.duration.shorter
            }),
            opacity: 1
          }
        },

        /* Styles applied to the root element if `tooltipOpen={true}` and `open={false}`. */
        staticTooltipClosed: {
          '& $staticTooltipLabel': {
            opacity: 0,
            transform: 'scale(0.5)'
          }
        },

        /* Styles applied to the static tooltip label if `tooltipOpen={true}`. */
        staticTooltipLabel: _extends$3({
          position: 'absolute'
        }, theme.typography.body1, {
          backgroundColor: theme.palette.background.paper,
          borderRadius: theme.shape.borderRadius,
          boxShadow: theme.shadows[1],
          color: theme.palette.text.secondary,
          padding: '4px 16px',
          wordBreak: 'keep-all'
        }),

        /* Styles applied to the root if `tooltipOpen={true}` and `tooltipPlacement="left"`` */
        tooltipPlacementLeft: {
          alignItems: 'center',
          '& $staticTooltipLabel': {
            transformOrigin: '100% 50%',
            right: '100%',
            marginRight: 8
          }
        },

        /* Styles applied to the root if `tooltipOpen={true}` and `tooltipPlacement="right"`` */
        tooltipPlacementRight: {
          alignItems: 'center',
          '& $staticTooltipLabel': {
            transformOrigin: '0% 50%',
            left: '100%',
            marginLeft: 8
          }
        }
      };
    };
    var SpeedDialAction = /*#__PURE__*/React__namespace.forwardRef(function SpeedDialAction(props, ref) {
      var classes = props.classes,
          className = props.className,
          _props$delay = props.delay,
          delay = _props$delay === void 0 ? 0 : _props$delay,
          _props$FabProps = props.FabProps,
          FabProps = _props$FabProps === void 0 ? {} : _props$FabProps,
          icon = props.icon,
          id = props.id,
          open = props.open,
          TooltipClasses = props.TooltipClasses,
          _props$tooltipOpen = props.tooltipOpen,
          tooltipOpenProp = _props$tooltipOpen === void 0 ? false : _props$tooltipOpen,
          _props$tooltipPlaceme = props.tooltipPlacement,
          tooltipPlacement = _props$tooltipPlaceme === void 0 ? 'left' : _props$tooltipPlaceme,
          tooltipTitle = props.tooltipTitle,
          other = _objectWithoutProperties(props, ["classes", "className", "delay", "FabProps", "icon", "id", "open", "TooltipClasses", "tooltipOpen", "tooltipPlacement", "tooltipTitle"]);

      var _React$useState = React__namespace.useState(tooltipOpenProp),
          tooltipOpen = _React$useState[0],
          setTooltipOpen = _React$useState[1];

      var handleTooltipClose = function handleTooltipClose() {
        setTooltipOpen(false);
      };

      var handleTooltipOpen = function handleTooltipOpen() {
        setTooltipOpen(true);
      };

      var transitionStyle = {
        transitionDelay: "".concat(delay, "ms")
      };
      var fab = /*#__PURE__*/React__namespace.createElement(Fab$1, _extends$3({
        size: "small",
        className: r$1(classes.fab, className, !open && classes.fabClosed),
        tabIndex: -1,
        role: "menuitem",
        "aria-describedby": "".concat(id, "-label")
      }, FabProps, {
        style: _extends$3({}, transitionStyle, FabProps.style)
      }), icon);

      if (tooltipOpenProp) {
        return /*#__PURE__*/React__namespace.createElement("span", _extends$3({
          id: id,
          ref: ref,
          className: r$1(classes.staticTooltip, classes["tooltipPlacement".concat(capitalize(tooltipPlacement))], !open && classes.staticTooltipClosed)
        }, other), /*#__PURE__*/React__namespace.createElement("span", {
          style: transitionStyle,
          id: "".concat(id, "-label"),
          className: classes.staticTooltipLabel
        }, tooltipTitle), fab);
      }

      return /*#__PURE__*/React__namespace.createElement(x, _extends$3({
        id: id,
        ref: ref,
        title: tooltipTitle,
        placement: tooltipPlacement,
        onClose: handleTooltipClose,
        onOpen: handleTooltipOpen,
        open: open && tooltipOpen,
        classes: TooltipClasses
      }, other), fab);
    });
    process.env.NODE_ENV !== "production" ? SpeedDialAction.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * Adds a transition delay, to allow a series of SpeedDialActions to be animated.
       */
      delay: re.number,

      /**
       * Props applied to the [`Fab`](/api/fab/) component.
       */
      FabProps: re.object,

      /**
       * The Icon to display in the SpeedDial Fab.
       */
      icon: re.node,

      /**
       * This prop is used to help implement the accessibility logic.
       * If you don't provide this prop. It falls back to a randomly generated id.
       */
      id: re.string,

      /**
       * If `true`, the tooltip is shown.
       */
      open: re.bool,

      /**
       * `classes` prop applied to the [`Tooltip`](/api/tooltip/) element.
       */
      TooltipClasses: re.object,

      /**
       * Make the tooltip always visible when the SpeedDial is open.
       */
      tooltipOpen: re.bool,

      /**
       * Placement of the tooltip.
       */
      tooltipPlacement: re.oneOf(['bottom-end', 'bottom-start', 'bottom', 'left-end', 'left-start', 'left', 'right-end', 'right-start', 'right', 'top-end', 'top-start', 'top']),

      /**
       * Label to display in the tooltip.
       */
      tooltipTitle: re.node
    } : void 0;
    var SpeedDialAction$1 = withStyles(styles$d, {
      name: 'MuiSpeedDialAction'
    })(SpeedDialAction);

    /**
     * @ignore - internal component.
     */

    var AddIcon = createSvgIcon$1( /*#__PURE__*/React__namespace.createElement("path", {
      d: "M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"
    }), 'Add');

    var styles$c = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          height: 24
        },

        /* Styles applied to the icon component. */
        icon: {
          transition: theme.transitions.create(['transform', 'opacity'], {
            duration: theme.transitions.duration.short
          })
        },

        /* Styles applied to the icon component if `open={true}`. */
        iconOpen: {
          transform: 'rotate(45deg)'
        },

        /* Styles applied to the icon when and `openIcon` is provided and if `open={true}`. */
        iconWithOpenIconOpen: {
          opacity: 0
        },

        /* Styles applied to the `openIcon` if provided. */
        openIcon: {
          position: 'absolute',
          transition: theme.transitions.create(['transform', 'opacity'], {
            duration: theme.transitions.duration.short
          }),
          opacity: 0,
          transform: 'rotate(-45deg)'
        },

        /* Styles applied to the `openIcon` if provided and if `open={true}`. */
        openIconOpen: {
          transform: 'rotate(0deg)',
          opacity: 1
        }
      };
    };
    var SpeedDialIcon = /*#__PURE__*/React__namespace.forwardRef(function SpeedDialIcon(props, ref) {
      var className = props.className,
          classes = props.classes,
          iconProp = props.icon,
          open = props.open,
          openIconProp = props.openIcon,
          other = _objectWithoutProperties(props, ["className", "classes", "icon", "open", "openIcon"]);

      var iconClassName = r$1(classes.icon, open && [classes.iconOpen, openIconProp && classes.iconWithOpenIconOpen]);
      var openIconClassName = r$1(classes.openIcon, open && classes.openIconOpen);

      function formatIcon(icon, newClassName) {
        if ( /*#__PURE__*/React__namespace.isValidElement(icon)) {
          return /*#__PURE__*/React__namespace.cloneElement(icon, {
            className: newClassName
          });
        }

        return icon;
      }

      return /*#__PURE__*/React__namespace.createElement("span", _extends$3({
        className: r$1(classes.root, className),
        ref: ref
      }, other), openIconProp ? formatIcon(openIconProp, openIconClassName) : null, iconProp ? formatIcon(iconProp, iconClassName) : /*#__PURE__*/React__namespace.createElement(AddIcon, {
        className: iconClassName
      }));
    });
    process.env.NODE_ENV !== "production" ? SpeedDialIcon.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * The icon to display in the SpeedDial Floating Action Button.
       */
      icon: re.node,

      /**
       * @ignore
       * If `true`, the SpeedDial is open.
       */
      open: re.bool,

      /**
       * The icon to display in the SpeedDial Floating Action Button when the SpeedDial is open.
       */
      openIcon: re.node
    } : void 0;
    SpeedDialIcon.muiName = 'SpeedDialIcon';
    var SpeedDialIcon$1 = withStyles(styles$c, {
      name: 'MuiSpeedDialIcon'
    })(SpeedDialIcon);

    /**
     * @type {React.Context<{ idPrefix: string; value: string } | null>}
     */

    var Context = React__namespace.createContext(null);

    if (process.env.NODE_ENV !== 'production') {
      Context.displayName = 'TabContext';
    }

    function useUniquePrefix() {
      var _React$useState = React__namespace.useState(null),
          id = _React$useState[0],
          setId = _React$useState[1];

      React__namespace.useEffect(function () {
        setId("mui-p-".concat(Math.round(Math.random() * 1e5)));
      }, []);
      return id;
    }

    function TabContext(props) {
      var children = props.children,
          value = props.value;
      var idPrefix = useUniquePrefix();
      var context = React__namespace.useMemo(function () {
        return {
          idPrefix: idPrefix,
          value: value
        };
      }, [idPrefix, value]);
      return /*#__PURE__*/React__namespace.createElement(Context.Provider, {
        value: context
      }, children);
    }
    process.env.NODE_ENV !== "production" ? TabContext.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * The content of the component.
       */
      children: propTypes.exports.node,

      /**
       * The value of the currently selected `Tab`.
       */
      value: propTypes.exports.string.isRequired
    } : void 0;
    /**
     * @returns {unknown}
     */

    function useTabContext() {
      return React__namespace.useContext(Context);
    }
    function getPanelId(context, value) {
      var idPrefix = context.idPrefix;

      if (idPrefix === null) {
        return null;
      }

      return "".concat(context.idPrefix, "-P-").concat(value);
    }
    function getTabId(context, value) {
      var idPrefix = context.idPrefix;

      if (idPrefix === null) {
        return null;
      }

      return "".concat(context.idPrefix, "-T-").concat(value);
    }

    var TabList = /*#__PURE__*/React__namespace.forwardRef(function TabList(props, ref) {
      var childrenProp = props.children,
          other = _objectWithoutProperties(props, ["children"]);

      var context = useTabContext();

      if (context === null) {
        throw new TypeError('No TabContext provided');
      }

      var children = React__namespace.Children.map(childrenProp, function (child) {
        return /*#__PURE__*/React__namespace.cloneElement(child, {
          // SOMEDAY: `Tabs` will set those themselves
          'aria-controls': getPanelId(context, child.props.value),
          id: getTabId(context, child.props.value)
        });
      });
      return /*#__PURE__*/React__namespace.createElement(Tabs$1, _extends$3({}, other, {
        ref: ref,
        value: context.value
      }), children);
    });
    process.env.NODE_ENV !== "production" ? TabList.propTypes = {
      children: propTypes.exports.arrayOf(propTypes.exports.element)
    } : void 0;
    var TabList$1 = TabList;

    var styles$b = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          padding: theme.spacing(3)
        }
      };
    };
    var TabPanel = /*#__PURE__*/React__namespace.forwardRef(function TabPanel(props, ref) {
      var children = props.children,
          className = props.className,
          classes = props.classes,
          value = props.value,
          other = _objectWithoutProperties(props, ["children", "className", "classes", "value"]);

      var context = useTabContext();

      if (context === null) {
        throw new TypeError('No TabContext provided');
      }

      var id = getPanelId(context, value);
      var tabId = getTabId(context, value);
      return /*#__PURE__*/React__namespace.createElement("div", _extends$3({
        "aria-labelledby": tabId,
        className: r$1(classes.root, className),
        hidden: value !== context.value,
        id: id,
        ref: ref,
        role: "tabpanel"
      }, other), value === context.value && children);
    });
    process.env.NODE_ENV !== "production" ? TabPanel.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * The content of the component.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * The `value` of the corresponding `Tab`. Must use the index of the `Tab` when
       * no `value` was passed to `Tab`.
       */
      value: re.string.isRequired
    } : void 0;
    var TabPanel$1 = withStyles(styles$b, {
      name: 'MuiTabPanel'
    })(TabPanel);

    /**
     * @ignore - internal component.
     */

    var TimelineContext = React__namespace.createContext({});

    if (process.env.NODE_ENV !== 'production') {
      TimelineContext.displayName = 'TimelineContext';
    }

    var TimelineContext$1 = TimelineContext;

    var styles$a = function styles() {
      return {
        /* Styles applied to the root element. */
        root: {
          display: 'flex',
          flexDirection: 'column',
          padding: '6px 16px',
          flexGrow: 1
        },

        /* Styles applied to the root element if `align="left"`. */
        alignLeft: {},

        /* Styles applied to the root element if `align="right"`. */
        alignRight: {},

        /* Styles applied to the root element if `align="alternate"`. */
        alignAlternate: {}
      };
    };
    var Timeline = /*#__PURE__*/React__namespace.forwardRef(function Timeline(props, ref) {
      var _props$align = props.align,
          align = _props$align === void 0 ? 'left' : _props$align,
          classes = props.classes,
          className = props.className,
          other = _objectWithoutProperties(props, ["align", "classes", "className"]);

      return /*#__PURE__*/React__namespace.createElement(TimelineContext$1.Provider, {
        value: {
          align: align
        }
      }, /*#__PURE__*/React__namespace.createElement("ul", _extends$3({
        className: r$1(classes.root, classes["align".concat(capitalize(align))], className),
        ref: ref
      }, other)));
    });
    process.env.NODE_ENV !== "production" ? Timeline.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * The position where the timeline's content should appear.
       */
      align: re.oneOf(['alternate', 'left', 'right']),

      /**
       * The content of the component.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string
    } : void 0;
    var Timeline$1 = withStyles(styles$a, {
      name: 'MuiTimeline'
    })(Timeline);

    var styles$9 = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          width: 2,
          backgroundColor: theme.palette.grey[400],
          flexGrow: 1
        }
      };
    };
    var TimelineConnector = /*#__PURE__*/React__namespace.forwardRef(function TimelineConnector(props, ref) {
      var classes = props.classes,
          className = props.className,
          other = _objectWithoutProperties(props, ["classes", "className"]);

      return /*#__PURE__*/React__namespace.createElement("span", _extends$3({
        className: r$1(classes.root, className),
        ref: ref
      }, other));
    });
    process.env.NODE_ENV !== "production" ? TimelineConnector.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * The content of the component.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string
    } : void 0;
    var TimelineConnector$1 = withStyles(styles$9, {
      name: 'MuiTimelineConnector'
    })(TimelineConnector);

    /**
     * @ignore - internal component.
     */

    var TimelineItemContext = React__namespace.createContext({});

    if (process.env.NODE_ENV !== 'production') {
      TimelineItemContext.displayName = 'TimelineItemContext';
    }

    var TimelineItemContext$1 = TimelineItemContext;

    var styles$8 = function styles() {
      return {
        /* Styles applied to the root element. */
        root: {
          flex: 1,
          padding: '6px 16px'
        },

        /* Styles applied to the root element if `align="right"`. */
        alignRight: {
          textAlign: 'right'
        }
      };
    };
    var TimelineContent = /*#__PURE__*/React__namespace.forwardRef(function TimelineContent(props, ref) {
      var classes = props.classes,
          className = props.className,
          other = _objectWithoutProperties(props, ["classes", "className"]);

      var _React$useContext = React__namespace.useContext(TimelineContext$1),
          _React$useContext$ali = _React$useContext.align,
          align = _React$useContext$ali === void 0 ? 'left' : _React$useContext$ali;

      var _React$useContext2 = React__namespace.useContext(TimelineItemContext$1),
          _React$useContext2$cl = _React$useContext2.classes,
          contextClasses = _React$useContext2$cl === void 0 ? {} : _React$useContext2$cl;

      return /*#__PURE__*/React__namespace.createElement("div", _extends$3({
        className: r$1(classes.root, contextClasses.content, classes["align".concat(capitalize(align))], className),
        ref: ref
      }, other));
    });
    process.env.NODE_ENV !== "production" ? TimelineContent.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * The content of the component.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string
    } : void 0;
    var TimelineContent$1 = withStyles(styles$8, {
      name: 'MuiTimelineContent'
    })(TimelineContent);

    var styles$7 = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          display: 'flex',
          alignSelf: 'baseline',
          borderStyle: 'solid',
          borderWidth: 2,
          padding: 4,
          borderRadius: '50%',
          boxShadow: theme.shadows[2],
          marginTop: 8,
          marginBottom: 8
        },

        /* Styles applied to the root element if `color="grey"` and `variant="default"`. */
        defaultGrey: {
          borderColor: 'transparent',
          color: theme.palette.grey[50],
          backgroundColor: theme.palette.grey[400]
        },

        /* Styles applied to the root element if `color="grey"` and `variant="outlined"`. */
        outlinedGrey: {
          boxShadow: 'none',
          color: theme.palette.grey.contrastText,
          borderColor: theme.palette.grey[400],
          backgroundColor: 'transparent'
        },

        /* Styles applied to the root element if `color="primary"` and `variant="default"`. */
        defaultPrimary: {
          borderColor: 'transparent',
          color: theme.palette.primary.contrastText,
          backgroundColor: theme.palette.primary.main
        },

        /* Styles applied to the root element if `color="primary"` and `variant="outlined"`. */
        outlinedPrimary: {
          boxShadow: 'none',
          backgroundColor: 'transparent',
          borderColor: theme.palette.primary.main
        },

        /* Styles applied to the root element if `color="secondary"` and `variant="default"`. */
        defaultSecondary: {
          borderColor: 'transparent',
          color: theme.palette.secondary.contrastText,
          backgroundColor: theme.palette.secondary.main
        },

        /* Styles applied to the root element if `color="secondary"` and `variant="outlined"`. */
        outlinedSecondary: {
          boxShadow: 'none',
          backgroundColor: 'transparent',
          borderColor: theme.palette.secondary.main
        }
      };
    };
    var TimelineDot = /*#__PURE__*/React__namespace.forwardRef(function TimelineDot(props, ref) {
      var classes = props.classes,
          className = props.className,
          _props$color = props.color,
          color = _props$color === void 0 ? 'grey' : _props$color,
          _props$variant = props.variant,
          variant = _props$variant === void 0 ? 'default' : _props$variant,
          other = _objectWithoutProperties(props, ["classes", "className", "color", "variant"]);

      return /*#__PURE__*/React__namespace.createElement("span", _extends$3({
        className: r$1(classes.root, className, color !== 'inherit' && classes["".concat(variant).concat(capitalize(color))]),
        ref: ref
      }, other));
    });
    process.env.NODE_ENV !== "production" ? TimelineDot.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * The content of the component.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * The dot can have a different colors.
       */
      color: re.oneOf(['grey', 'inherit', 'primary', 'secondary']),

      /**
       * The dot can appear filled or outlined.
       */
      variant: re.oneOf(['default', 'outlined'])
    } : void 0;
    var TimelineDot$1 = withStyles(styles$7, {
      name: 'MuiTimelineDot'
    })(TimelineDot);

    var styles$6 = function styles() {
      return {
        /* Styles applied to the root element. */
        root: {
          listStyle: 'none',
          display: 'flex',
          position: 'relative',
          minHeight: 70
        },

        /* Styles applied to the root element if `align="left"`. */
        alignLeft: {},

        /* Styles applied to the root element if `align="right"`. */
        alignRight: {
          flexDirection: 'row-reverse'
        },

        /* Styles applied to the root element if `align="alternate"`. */
        alignAlternate: {
          '&:nth-child(even)': {
            flexDirection: 'row-reverse',
            '& $content': {
              textAlign: 'right'
            },
            '& $oppositeContent': {
              textAlign: 'left'
            }
          }
        },

        /* Styles applied to the root element if no there isn't TimelineOppositeContent provided. */
        missingOppositeContent: {
          '&:before': {
            content: '""',
            flex: 1,
            padding: '6px 16px'
          }
        },

        /* Styles applied to the timeline content node. */
        content: {},

        /* Styles applied to the timeline opposite content node. */
        oppositeContent: {}
      };
    };
    var TimelineItem = /*#__PURE__*/React__namespace.forwardRef(function TimelineItem(props, ref) {
      var classes = props.classes,
          className = props.className,
          other = _objectWithoutProperties(props, ["classes", "className"]);

      var _React$useContext = React__namespace.useContext(TimelineContext$1),
          _React$useContext$ali = _React$useContext.align,
          align = _React$useContext$ali === void 0 ? 'left' : _React$useContext$ali;

      var hasOppositeContent = false;
      React__namespace.Children.forEach(props.children, function (child) {
        if (isMuiElement(child, ['TimelineOppositeContent'])) {
          hasOppositeContent = true;
        }
      });
      return /*#__PURE__*/React__namespace.createElement(TimelineItemContext$1.Provider, {
        value: {
          classes: {
            content: classes.content,
            oppositeContent: classes.oppositeContent
          }
        }
      }, /*#__PURE__*/React__namespace.createElement("li", _extends$3({
        className: r$1(classes.root, classes["align".concat(capitalize(align))], className, !hasOppositeContent && classes.missingOppositeContent),
        ref: ref
      }, other)));
    });
    process.env.NODE_ENV !== "production" ? TimelineItem.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * The content of the component.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string
    } : void 0;
    var TimelineItem$1 = withStyles(styles$6, {
      name: 'MuiTimelineItem'
    })(TimelineItem);

    var styles$5 = function styles() {
      return {
        /* Styles applied to the root element. */
        root: {
          padding: '6px 16px',
          marginRight: 'auto',
          textAlign: 'right',
          flex: 1
        },

        /* Styles applied to the root element if `align="right"`. */
        alignRight: {
          textAlign: 'left'
        }
      };
    };
    var TimelineOppositeContent = /*#__PURE__*/React__namespace.forwardRef(function TimelineOppositeContent(props, ref) {
      var classes = props.classes,
          className = props.className,
          other = _objectWithoutProperties(props, ["classes", "className"]);

      var _React$useContext = React__namespace.useContext(TimelineContext$1),
          _React$useContext$ali = _React$useContext.align,
          align = _React$useContext$ali === void 0 ? 'left' : _React$useContext$ali;

      var _React$useContext2 = React__namespace.useContext(TimelineItemContext$1),
          _React$useContext2$cl = _React$useContext2.classes,
          contextClasses = _React$useContext2$cl === void 0 ? {} : _React$useContext2$cl;

      return /*#__PURE__*/React__namespace.createElement("div", _extends$3({
        className: r$1(classes.root, contextClasses.oppositeContent, classes["align".concat(capitalize(align))], className),
        ref: ref
      }, other));
    });
    process.env.NODE_ENV !== "production" ? TimelineOppositeContent.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * The content of the component.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string
    } : void 0;
    TimelineOppositeContent.muiName = 'TimelineOppositeContent';
    var TimelineOppositeContent$1 = withStyles(styles$5, {
      name: 'MuiTimelineOppositeContent'
    })(TimelineOppositeContent);

    var styles$4 = function styles() {
      return {
        /* Styles applied to the root element. */
        root: {
          display: 'flex',
          flexDirection: 'column',
          flex: 0,
          alignItems: 'center'
        }
      };
    };
    var TimelineSeparator = /*#__PURE__*/React__namespace.forwardRef(function TimelineSeparator(props, ref) {
      var classes = props.classes,
          className = props.className,
          other = _objectWithoutProperties(props, ["classes", "className"]);

      return /*#__PURE__*/React__namespace.createElement("div", _extends$3({
        className: r$1(classes.root, className),
        ref: ref
      }, other));
    });
    process.env.NODE_ENV !== "production" ? TimelineSeparator.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * The content of the component.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string
    } : void 0;
    var TimelineSeparator$1 = withStyles(styles$4, {
      name: 'MuiTimelineSeparator'
    })(TimelineSeparator);

    var styles$3 = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: _extends$3({}, theme.typography.button, {
          boxSizing: 'border-box',
          borderRadius: theme.shape.borderRadius,
          padding: 11,
          border: "1px solid ".concat(alpha(theme.palette.action.active, 0.12)),
          color: alpha(theme.palette.action.active, 0.38),
          '&$selected': {
            color: theme.palette.action.active,
            backgroundColor: alpha(theme.palette.action.active, 0.12),
            '&:hover': {
              backgroundColor: alpha(theme.palette.action.active, 0.15)
            },
            '& + &': {
              borderLeft: 0,
              marginLeft: 0
            }
          },
          '&$disabled': {
            color: alpha(theme.palette.action.disabled, 0.12)
          },
          '&:hover': {
            textDecoration: 'none',
            // Reset on mouse devices
            backgroundColor: alpha(theme.palette.text.primary, 0.05),
            '@media (hover: none)': {
              backgroundColor: 'transparent'
            },
            '&$disabled': {
              backgroundColor: 'transparent'
            }
          }
        }),

        /* Pseudo-class applied to the root element if `disabled={true}`. */
        disabled: {},

        /* Pseudo-class applied to the root element if `selected={true}`. */
        selected: {},

        /* Styles applied to the `label` wrapper element. */
        label: {
          width: '100%',
          // Ensure the correct width for iOS Safari
          display: 'inherit',
          alignItems: 'inherit',
          justifyContent: 'inherit'
        },

        /* Styles applied to the root element if `size="small"`. */
        sizeSmall: {
          padding: 7,
          fontSize: theme.typography.pxToRem(13)
        },

        /* Styles applied to the root element if `size="large"`. */
        sizeLarge: {
          padding: 15,
          fontSize: theme.typography.pxToRem(15)
        }
      };
    };
    var ToggleButton = /*#__PURE__*/React__namespace.forwardRef(function ToggleButton(props, ref) {
      var children = props.children,
          classes = props.classes,
          className = props.className,
          _props$disabled = props.disabled,
          disabled = _props$disabled === void 0 ? false : _props$disabled,
          _props$disableFocusRi = props.disableFocusRipple,
          disableFocusRipple = _props$disableFocusRi === void 0 ? false : _props$disableFocusRi,
          onChange = props.onChange,
          onClick = props.onClick,
          selected = props.selected,
          _props$size = props.size,
          size = _props$size === void 0 ? 'medium' : _props$size,
          value = props.value,
          other = _objectWithoutProperties(props, ["children", "classes", "className", "disabled", "disableFocusRipple", "onChange", "onClick", "selected", "size", "value"]);

      var handleChange = function handleChange(event) {
        if (onClick) {
          onClick(event, value);

          if (event.isDefaultPrevented()) {
            return;
          }
        }

        if (onChange) {
          onChange(event, value);
        }
      };

      return /*#__PURE__*/React__namespace.createElement(ButtonBase$1, _extends$3({
        className: r$1(classes.root, className, disabled && classes.disabled, selected && classes.selected, size !== 'medium' && classes["size".concat(capitalize(size))]),
        disabled: disabled,
        focusRipple: !disableFocusRipple,
        ref: ref,
        onClick: handleChange,
        onChange: onChange,
        value: value,
        "aria-pressed": selected
      }, other), /*#__PURE__*/React__namespace.createElement("span", {
        className: classes.label
      }, children));
    });
    process.env.NODE_ENV !== "production" ? ToggleButton.propTypes = {
      /**
       * The content of the button.
       */
      children: re.node.isRequired,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object.isRequired,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * If `true`, the button will be disabled.
       */
      disabled: re.bool,

      /**
       * If `true`, the  keyboard focus ripple will be disabled.
       */
      disableFocusRipple: re.bool,

      /**
       * If `true`, the ripple effect will be disabled.
       */
      disableRipple: re.bool,

      /**
       * @ignore
       */
      onChange: re.func,

      /**
       * @ignore
       */
      onClick: re.func,

      /**
       * If `true`, the button will be rendered in an active state.
       */
      selected: re.bool,

      /**
       * @ignore
       */
      size: re.oneOf(['small', 'medium', 'large']),

      /**
       * The value to associate with the button when selected in a
       * ToggleButtonGroup.
       */
      value: re.any.isRequired
    } : void 0;
    var ToggleButton$1 = withStyles(styles$3, {
      name: 'MuiToggleButton'
    })(ToggleButton);

    // Determine if the toggle button value matches, or is contained in, the
    // candidate group value.
    function isValueSelected(value, candidate) {
      if (candidate === undefined || value === undefined) {
        return false;
      }

      if (Array.isArray(candidate)) {
        return candidate.indexOf(value) >= 0;
      }

      return value === candidate;
    }

    var styles$2 = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          display: 'inline-flex',
          borderRadius: theme.shape.borderRadius
        },

        /* Styles applied to the root element if `orientation="vertical"`. */
        vertical: {
          flexDirection: 'column'
        },

        /* Styles applied to the children. */
        grouped: {},

        /* Styles applied to the children if `orientation="horizontal"`. */
        groupedHorizontal: {
          '&:not(:first-child)': {
            marginLeft: -1,
            borderLeft: '1px solid transparent',
            borderTopLeftRadius: 0,
            borderBottomLeftRadius: 0
          },
          '&:not(:last-child)': {
            borderTopRightRadius: 0,
            borderBottomRightRadius: 0
          }
        },

        /* Styles applied to the children if `orientation="vertical"`. */
        groupedVertical: {
          '&:not(:first-child)': {
            marginTop: -1,
            borderTop: '1px solid transparent',
            borderTopLeftRadius: 0,
            borderTopRightRadius: 0
          },
          '&:not(:last-child)': {
            borderBottomLeftRadius: 0,
            borderBottomRightRadius: 0
          }
        }
      };
    };
    var ToggleButtonGroup = /*#__PURE__*/React__namespace.forwardRef(function ToggleButton(props, ref) {
      var children = props.children,
          classes = props.classes,
          className = props.className,
          _props$exclusive = props.exclusive,
          exclusive = _props$exclusive === void 0 ? false : _props$exclusive,
          onChange = props.onChange,
          _props$orientation = props.orientation,
          orientation = _props$orientation === void 0 ? 'horizontal' : _props$orientation,
          _props$size = props.size,
          size = _props$size === void 0 ? 'medium' : _props$size,
          value = props.value,
          other = _objectWithoutProperties(props, ["children", "classes", "className", "exclusive", "onChange", "orientation", "size", "value"]);

      var handleChange = function handleChange(event, buttonValue) {
        if (!onChange) {
          return;
        }

        var index = value && value.indexOf(buttonValue);
        var newValue;

        if (value && index >= 0) {
          newValue = value.slice();
          newValue.splice(index, 1);
        } else {
          newValue = value ? value.concat(buttonValue) : [buttonValue];
        }

        onChange(event, newValue);
      };

      var handleExclusiveChange = function handleExclusiveChange(event, buttonValue) {
        if (!onChange) {
          return;
        }

        onChange(event, value === buttonValue ? null : buttonValue);
      };

      return /*#__PURE__*/React__namespace.createElement("div", _extends$3({
        role: "group",
        className: r$1(classes.root, className, orientation === 'vertical' && classes.vertical),
        ref: ref
      }, other), React__namespace.Children.map(children, function (child) {
        if (! /*#__PURE__*/React__namespace.isValidElement(child)) {
          return null;
        }

        if (process.env.NODE_ENV !== 'production') {
          if (reactIs$2.exports.isFragment(child)) {
            console.error(["Material-UI: The ToggleButtonGroup component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n'));
          }
        }

        return /*#__PURE__*/React__namespace.cloneElement(child, {
          className: r$1(classes.grouped, classes["grouped".concat(capitalize(orientation))], child.props.className),
          onChange: exclusive ? handleExclusiveChange : handleChange,
          selected: child.props.selected === undefined ? isValueSelected(child.props.value, value) : child.props.selected,
          size: child.props.size || size
        });
      }));
    });
    process.env.NODE_ENV !== "production" ? ToggleButtonGroup.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * The content of the button.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * If `true`, only allow one of the child ToggleButton values to be selected.
       */
      exclusive: re.bool,

      /**
       * Callback fired when the value changes.
       *
       * @param {object} event The event source of the callback.
       * @param {any} value of the selected buttons. When `exclusive` is true
       * this is a single value; when false an array of selected values. If no value
       * is selected and `exclusive` is true the value is null; when false an empty array.
       */
      onChange: re.func,

      /**
       * The group orientation (layout flow direction).
       */
      orientation: re.oneOf(['horizontal', 'vertical']),

      /**
       * The size of the buttons.
       */
      size: re.oneOf(['large', 'medium', 'small']),

      /**
       * The currently selected value within the group or an array of selected
       * values when `exclusive` is false.
       *
       * The value must have reference equality with the option in order to be selected.
       */
      value: re.any
    } : void 0;
    var ToggleButtonGroup$1 = withStyles(styles$2, {
      name: 'MuiToggleButtonGroup'
    })(ToggleButtonGroup);

    /**
     * @ignore - internal component.
     */

    var TreeViewContext = React__namespace.createContext({});

    if (process.env.NODE_ENV !== 'production') {
      TreeViewContext.displayName = 'TreeViewContext';
    }

    var TreeViewContext$1 = TreeViewContext;

    var styles$1 = function styles(theme) {
      return {
        /* Styles applied to the root element. */
        root: {
          listStyle: 'none',
          margin: 0,
          padding: 0,
          outline: 0,
          WebkitTapHighlightColor: 'transparent',
          '&:focus > $content $label': {
            backgroundColor: theme.palette.action.hover
          },
          '&$selected > $content $label': {
            backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity)
          },
          '&$selected > $content $label:hover, &$selected:focus > $content $label': {
            backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
              backgroundColor: 'transparent'
            }
          }
        },

        /* Pseudo-class applied to the root element when expanded. */
        expanded: {},

        /* Pseudo-class applied to the root element when selected. */
        selected: {},

        /* Styles applied to the `role="group"` element. */
        group: {
          margin: 0,
          padding: 0,
          marginLeft: 17
        },

        /* Styles applied to the tree node content. */
        content: {
          width: '100%',
          display: 'flex',
          alignItems: 'center',
          cursor: 'pointer'
        },

        /* Styles applied to the tree node icon and collapse/expand icon. */
        iconContainer: {
          marginRight: 4,
          width: 15,
          display: 'flex',
          flexShrink: 0,
          justifyContent: 'center',
          '& svg': {
            fontSize: 18
          }
        },

        /* Styles applied to the label element. */
        label: {
          width: '100%',
          paddingLeft: 4,
          position: 'relative',
          '&:hover': {
            backgroundColor: theme.palette.action.hover,
            // Reset on touch devices, it doesn't add specificity
            '@media (hover: none)': {
              backgroundColor: 'transparent'
            }
          }
        }
      };
    };

    var isPrintableCharacter = function isPrintableCharacter(str) {
      return str && str.length === 1 && str.match(/\S/);
    };

    var TreeItem = /*#__PURE__*/React__namespace.forwardRef(function TreeItem(props, ref) {
      var children = props.children,
          classes = props.classes,
          className = props.className,
          collapseIcon = props.collapseIcon,
          endIcon = props.endIcon,
          expandIcon = props.expandIcon,
          iconProp = props.icon,
          label = props.label,
          nodeId = props.nodeId,
          onClick = props.onClick,
          onLabelClick = props.onLabelClick,
          onIconClick = props.onIconClick,
          onFocus = props.onFocus,
          onKeyDown = props.onKeyDown,
          onMouseDown = props.onMouseDown,
          _props$TransitionComp = props.TransitionComponent,
          TransitionComponent = _props$TransitionComp === void 0 ? Collapse$1 : _props$TransitionComp,
          TransitionProps = props.TransitionProps,
          other = _objectWithoutProperties(props, ["children", "classes", "className", "collapseIcon", "endIcon", "expandIcon", "icon", "label", "nodeId", "onClick", "onLabelClick", "onIconClick", "onFocus", "onKeyDown", "onMouseDown", "TransitionComponent", "TransitionProps"]);

      var _React$useContext = React__namespace.useContext(TreeViewContext$1),
          contextIcons = _React$useContext.icons,
          focus = _React$useContext.focus,
          focusFirstNode = _React$useContext.focusFirstNode,
          focusLastNode = _React$useContext.focusLastNode,
          focusNextNode = _React$useContext.focusNextNode,
          focusPreviousNode = _React$useContext.focusPreviousNode,
          focusByFirstCharacter = _React$useContext.focusByFirstCharacter,
          selectNode = _React$useContext.selectNode,
          selectRange = _React$useContext.selectRange,
          selectNextNode = _React$useContext.selectNextNode,
          selectPreviousNode = _React$useContext.selectPreviousNode,
          rangeSelectToFirst = _React$useContext.rangeSelectToFirst,
          rangeSelectToLast = _React$useContext.rangeSelectToLast,
          selectAllNodes = _React$useContext.selectAllNodes,
          expandAllSiblings = _React$useContext.expandAllSiblings,
          toggleExpansion = _React$useContext.toggleExpansion,
          isExpanded = _React$useContext.isExpanded,
          isFocused = _React$useContext.isFocused,
          isSelected = _React$useContext.isSelected,
          isTabbable = _React$useContext.isTabbable,
          multiSelect = _React$useContext.multiSelect,
          getParent = _React$useContext.getParent,
          mapFirstChar = _React$useContext.mapFirstChar,
          addNodeToNodeMap = _React$useContext.addNodeToNodeMap,
          removeNodeFromNodeMap = _React$useContext.removeNodeFromNodeMap;

      var nodeRef = React__namespace.useRef(null);
      var contentRef = React__namespace.useRef(null);
      var handleRef = useForkRef(nodeRef, ref);
      var icon = iconProp;
      var expandable = Boolean(Array.isArray(children) ? children.length : children);
      var expanded = isExpanded ? isExpanded(nodeId) : false;
      var focused = isFocused ? isFocused(nodeId) : false;
      var tabbable = isTabbable ? isTabbable(nodeId) : false;
      var selected = isSelected ? isSelected(nodeId) : false;
      var icons = contextIcons || {};
      var theme = useTheme();

      if (!icon) {
        if (expandable) {
          if (!expanded) {
            icon = expandIcon || icons.defaultExpandIcon;
          } else {
            icon = collapseIcon || icons.defaultCollapseIcon;
          }

          if (!icon) {
            icon = icons.defaultParentIcon;
          }
        } else {
          icon = endIcon || icons.defaultEndIcon;
        }
      }

      var handleClick = function handleClick(event) {
        if (!focused) {
          focus(nodeId);
        }

        var multiple = multiSelect && (event.shiftKey || event.ctrlKey || event.metaKey); // If already expanded and trying to toggle selection don't close

        if (expandable && !event.defaultPrevented && !(multiple && isExpanded(nodeId))) {
          toggleExpansion(event, nodeId);
        }

        if (multiple) {
          if (event.shiftKey) {
            selectRange(event, {
              end: nodeId
            });
          } else {
            selectNode(event, nodeId, true);
          }
        } else {
          selectNode(event, nodeId);
        }

        if (onClick) {
          onClick(event);
        }
      };

      var handleMouseDown = function handleMouseDown(event) {
        if (event.shiftKey || event.ctrlKey || event.metaKey) {
          event.preventDefault();
        }

        if (onMouseDown) {
          onMouseDown(event);
        }
      };

      var handleNextArrow = function handleNextArrow(event) {
        if (expandable) {
          if (expanded) {
            focusNextNode(nodeId);
          } else {
            toggleExpansion(event);
          }
        }

        return true;
      };

      var handlePreviousArrow = function handlePreviousArrow(event) {
        if (expanded) {
          toggleExpansion(event, nodeId);
          return true;
        }

        var parent = getParent(nodeId);

        if (parent) {
          focus(parent);
          return true;
        }

        return false;
      };

      var handleKeyDown = function handleKeyDown(event) {
        var flag = false;
        var key = event.key;

        if (event.altKey || event.currentTarget !== event.target) {
          return;
        }

        var ctrlPressed = event.ctrlKey || event.metaKey;

        switch (key) {
          case ' ':
            if (nodeRef.current === event.currentTarget) {
              if (multiSelect && event.shiftKey) {
                flag = selectRange(event, {
                  end: nodeId
                });
              } else if (multiSelect) {
                flag = selectNode(event, nodeId, true);
              } else {
                flag = selectNode(event, nodeId);
              }
            }

            event.stopPropagation();
            break;

          case 'Enter':
            if (nodeRef.current === event.currentTarget && expandable) {
              toggleExpansion(event);
              flag = true;
            }

            event.stopPropagation();
            break;

          case 'ArrowDown':
            if (multiSelect && event.shiftKey) {
              selectNextNode(event, nodeId);
            }

            focusNextNode(nodeId);
            flag = true;
            break;

          case 'ArrowUp':
            if (multiSelect && event.shiftKey) {
              selectPreviousNode(event, nodeId);
            }

            focusPreviousNode(nodeId);
            flag = true;
            break;

          case 'ArrowRight':
            if (theme.direction === 'rtl') {
              flag = handlePreviousArrow(event);
            } else {
              flag = handleNextArrow(event);
            }

            break;

          case 'ArrowLeft':
            if (theme.direction === 'rtl') {
              flag = handleNextArrow(event);
            } else {
              flag = handlePreviousArrow(event);
            }

            break;

          case 'Home':
            if (multiSelect && ctrlPressed && event.shiftKey) {
              rangeSelectToFirst(event, nodeId);
            }

            focusFirstNode();
            flag = true;
            break;

          case 'End':
            if (multiSelect && ctrlPressed && event.shiftKey) {
              rangeSelectToLast(event, nodeId);
            }

            focusLastNode();
            flag = true;
            break;

          default:
            if (key === '*') {
              expandAllSiblings(event, nodeId);
              flag = true;
            } else if (multiSelect && ctrlPressed && key.toLowerCase() === 'a') {
              flag = selectAllNodes(event);
            } else if (!ctrlPressed && !event.shiftKey && isPrintableCharacter(key)) {
              focusByFirstCharacter(nodeId, key);
              flag = true;
            }

        }

        if (flag) {
          event.preventDefault();
          event.stopPropagation();
        }

        if (onKeyDown) {
          onKeyDown(event);
        }
      };

      var handleFocus = function handleFocus(event) {
        if (!focused && event.currentTarget === event.target) {
          focus(nodeId);
        }

        if (onFocus) {
          onFocus(event);
        }
      };

      React__namespace.useEffect(function () {
        if (addNodeToNodeMap) {
          var childIds = [];
          React__namespace.Children.forEach(children, function (child) {
            if ( /*#__PURE__*/React__namespace.isValidElement(child) && child.props.nodeId) {
              childIds.push(child.props.nodeId);
            }
          });
          addNodeToNodeMap(nodeId, childIds);
        }
      }, [children, nodeId, addNodeToNodeMap]);
      React__namespace.useEffect(function () {
        if (removeNodeFromNodeMap) {
          return function () {
            removeNodeFromNodeMap(nodeId);
          };
        }

        return undefined;
      }, [nodeId, removeNodeFromNodeMap]);
      React__namespace.useEffect(function () {
        if (mapFirstChar && label) {
          mapFirstChar(nodeId, contentRef.current.textContent.substring(0, 1).toLowerCase());
        }
      }, [mapFirstChar, nodeId, label]);
      React__namespace.useEffect(function () {
        if (focused) {
          nodeRef.current.focus();
        }
      }, [focused]);
      var ariaSelected;

      if (multiSelect) {
        ariaSelected = selected;
      } else if (selected) {
        // single-selection trees unset aria-selected
        ariaSelected = true;
      }

      return /*#__PURE__*/React__namespace.createElement("li", _extends$3({
        className: r$1(classes.root, className, expanded && classes.expanded, selected && classes.selected),
        role: "treeitem",
        onKeyDown: handleKeyDown,
        onFocus: handleFocus,
        "aria-expanded": expandable ? expanded : null,
        "aria-selected": ariaSelected,
        ref: handleRef,
        tabIndex: tabbable ? 0 : -1
      }, other), /*#__PURE__*/React__namespace.createElement("div", {
        className: classes.content,
        onClick: handleClick,
        onMouseDown: handleMouseDown,
        ref: contentRef
      }, /*#__PURE__*/React__namespace.createElement("div", {
        onClick: onIconClick,
        className: classes.iconContainer
      }, icon), /*#__PURE__*/React__namespace.createElement(Typography$2, {
        onClick: onLabelClick,
        component: "div",
        className: classes.label
      }, label)), children && /*#__PURE__*/React__namespace.createElement(TransitionComponent, _extends$3({
        unmountOnExit: true,
        className: classes.group,
        in: expanded,
        component: "ul",
        role: "group"
      }, TransitionProps), children));
    });
    process.env.NODE_ENV !== "production" ? TreeItem.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * The content of the component.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * The icon used to collapse the node.
       */
      collapseIcon: re.node,

      /**
       * The icon displayed next to a end node.
       */
      endIcon: re.node,

      /**
       * The icon used to expand the node.
       */
      expandIcon: re.node,

      /**
       * The icon to display next to the tree node's label.
       */
      icon: re.node,

      /**
       * The tree node label.
       */
      label: re.node,

      /**
       * The id of the node.
       */
      nodeId: re.string.isRequired,

      /**
       * @ignore
       */
      onClick: re.func,

      /**
       * @ignore
       */
      onFocus: re.func,

      /**
       * `onClick` handler for the icon container. Call `event.preventDefault()` to prevent `onNodeToggle` from being called.
       */
      onIconClick: re.func,

      /**
       * @ignore
       */
      onKeyDown: re.func,

      /**
       * `onClick` handler for the label container. Call `event.preventDefault()` to prevent `onNodeToggle` from being called.
       */
      onLabelClick: re.func,

      /**
       * @ignore
       */
      onMouseDown: re.func,

      /**
       * The component used for the transition.
       * [Follow this guide](/components/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
       */
      TransitionComponent: re.elementType,

      /**
       * Props applied to the [`Transition`](http://reactcommunity.org/react-transition-group/transition#Transition-props) element.
       */
      TransitionProps: re.object
    } : void 0;
    var TreeItem$1 = withStyles(styles$1, {
      name: 'MuiTreeItem'
    })(TreeItem);

    var styles = {
      /* Styles applied to the root element. */
      root: {
        padding: 0,
        margin: 0,
        listStyle: 'none'
      }
    };

    function arrayDiff(arr1, arr2) {
      if (arr1.length !== arr2.length) return true;

      for (var i = 0; i < arr1.length; i += 1) {
        if (arr1[i] !== arr2[i]) return true;
      }

      return false;
    }

    var findNextFirstChar = function findNextFirstChar(firstChars, startIndex, char) {
      for (var i = startIndex; i < firstChars.length; i += 1) {
        if (char === firstChars[i]) {
          return i;
        }
      }

      return -1;
    };

    var defaultExpandedDefault = [];
    var defaultSelectedDefault = [];
    var TreeView = /*#__PURE__*/React__namespace.forwardRef(function TreeView(props, ref) {
      var children = props.children,
          classes = props.classes,
          className = props.className,
          defaultCollapseIcon = props.defaultCollapseIcon,
          defaultEndIcon = props.defaultEndIcon,
          _props$defaultExpande = props.defaultExpanded,
          defaultExpanded = _props$defaultExpande === void 0 ? defaultExpandedDefault : _props$defaultExpande,
          defaultExpandIcon = props.defaultExpandIcon,
          defaultParentIcon = props.defaultParentIcon,
          _props$defaultSelecte = props.defaultSelected,
          defaultSelected = _props$defaultSelecte === void 0 ? defaultSelectedDefault : _props$defaultSelecte,
          _props$disableSelecti = props.disableSelection,
          disableSelection = _props$disableSelecti === void 0 ? false : _props$disableSelecti,
          _props$multiSelect = props.multiSelect,
          multiSelect = _props$multiSelect === void 0 ? false : _props$multiSelect,
          expandedProp = props.expanded,
          onNodeSelect = props.onNodeSelect,
          onNodeToggle = props.onNodeToggle,
          selectedProp = props.selected,
          other = _objectWithoutProperties(props, ["children", "classes", "className", "defaultCollapseIcon", "defaultEndIcon", "defaultExpanded", "defaultExpandIcon", "defaultParentIcon", "defaultSelected", "disableSelection", "multiSelect", "expanded", "onNodeSelect", "onNodeToggle", "selected"]);

      var _React$useState = React__namespace.useState(null),
          tabbable = _React$useState[0],
          setTabbable = _React$useState[1];

      var _React$useState2 = React__namespace.useState(null),
          focusedNodeId = _React$useState2[0],
          setFocusedNodeId = _React$useState2[1];

      var nodeMap = React__namespace.useRef({});
      var firstCharMap = React__namespace.useRef({});
      var visibleNodes = React__namespace.useRef([]);

      var _useControlled = useControlled({
        controlled: expandedProp,
        default: defaultExpanded,
        name: 'TreeView',
        state: 'expanded'
      }),
          _useControlled2 = _slicedToArray(_useControlled, 2),
          expanded = _useControlled2[0],
          setExpandedState = _useControlled2[1];

      var _useControlled3 = useControlled({
        controlled: selectedProp,
        default: defaultSelected,
        name: 'TreeView',
        state: 'selected'
      }),
          _useControlled4 = _slicedToArray(_useControlled3, 2),
          selected = _useControlled4[0],
          setSelectedState = _useControlled4[1];
      /*
       * Status Helpers
       */


      var isExpanded = React__namespace.useCallback(function (id) {
        return Array.isArray(expanded) ? expanded.indexOf(id) !== -1 : false;
      }, [expanded]);
      var isSelected = React__namespace.useCallback(function (id) {
        return Array.isArray(selected) ? selected.indexOf(id) !== -1 : selected === id;
      }, [selected]);

      var isTabbable = function isTabbable(id) {
        return tabbable === id;
      };

      var isFocused = function isFocused(id) {
        return focusedNodeId === id;
      };
      /*
       * Node Helpers
       */


      var getNextNode = function getNextNode(id) {
        var nodeIndex = visibleNodes.current.indexOf(id);

        if (nodeIndex !== -1 && nodeIndex + 1 < visibleNodes.current.length) {
          return visibleNodes.current[nodeIndex + 1];
        }

        return null;
      };

      var getPreviousNode = function getPreviousNode(id) {
        var nodeIndex = visibleNodes.current.indexOf(id);

        if (nodeIndex !== -1 && nodeIndex - 1 >= 0) {
          return visibleNodes.current[nodeIndex - 1];
        }

        return null;
      };

      var getLastNode = function getLastNode() {
        return visibleNodes.current[visibleNodes.current.length - 1];
      };

      var getFirstNode = function getFirstNode() {
        return visibleNodes.current[0];
      };

      var getParent = function getParent(id) {
        return nodeMap.current[id].parent;
      };

      var getNodesInRange = function getNodesInRange(a, b) {
        var aIndex = visibleNodes.current.indexOf(a);
        var bIndex = visibleNodes.current.indexOf(b);
        var start = Math.min(aIndex, bIndex);
        var end = Math.max(aIndex, bIndex);
        return visibleNodes.current.slice(start, end + 1);
      };
      /*
       * Focus Helpers
       */


      var focus = function focus(id) {
        if (id) {
          setTabbable(id);
          setFocusedNodeId(id);
        }
      };

      var focusNextNode = function focusNextNode(id) {
        return focus(getNextNode(id));
      };

      var focusPreviousNode = function focusPreviousNode(id) {
        return focus(getPreviousNode(id));
      };

      var focusFirstNode = function focusFirstNode() {
        return focus(getFirstNode());
      };

      var focusLastNode = function focusLastNode() {
        return focus(getLastNode());
      };

      var focusByFirstCharacter = function focusByFirstCharacter(id, char) {
        var start;
        var index;
        var lowercaseChar = char.toLowerCase();
        var firstCharIds = [];
        var firstChars = []; // This really only works since the ids are strings

        Object.keys(firstCharMap.current).forEach(function (nodeId) {
          var firstChar = firstCharMap.current[nodeId];
          var map = nodeMap.current[nodeId];
          var visible = map.parent ? isExpanded(map.parent) : true;

          if (visible) {
            firstCharIds.push(nodeId);
            firstChars.push(firstChar);
          }
        }); // Get start index for search based on position of currentItem

        start = firstCharIds.indexOf(id) + 1;

        if (start === nodeMap.current.length) {
          start = 0;
        } // Check remaining slots in the menu


        index = findNextFirstChar(firstChars, start, lowercaseChar); // If not found in remaining slots, check from beginning

        if (index === -1) {
          index = findNextFirstChar(firstChars, 0, lowercaseChar);
        } // If match was found...


        if (index > -1) {
          focus(firstCharIds[index]);
        }
      };
      /*
       * Expansion Helpers
       */


      var toggleExpansion = function toggleExpansion(event) {
        var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : focusedNodeId;
        var newExpanded;

        if (expanded.indexOf(value) !== -1) {
          newExpanded = expanded.filter(function (id) {
            return id !== value;
          });
          setTabbable(function (oldTabbable) {
            var map = nodeMap.current[oldTabbable];

            if (oldTabbable && (map && map.parent ? map.parent.id : null) === value) {
              return value;
            }

            return oldTabbable;
          });
        } else {
          newExpanded = [value].concat(expanded);
        }

        if (onNodeToggle) {
          onNodeToggle(event, newExpanded);
        }

        setExpandedState(newExpanded);
      };

      var expandAllSiblings = function expandAllSiblings(event, id) {
        var map = nodeMap.current[id];
        var parent = nodeMap.current[map.parent];
        var diff;

        if (parent) {
          diff = parent.children.filter(function (child) {
            return !isExpanded(child);
          });
        } else {
          var topLevelNodes = nodeMap.current[-1].children;
          diff = topLevelNodes.filter(function (node) {
            return !isExpanded(node);
          });
        }

        var newExpanded = expanded.concat(diff);

        if (diff.length > 0) {
          setExpandedState(newExpanded);

          if (onNodeToggle) {
            onNodeToggle(event, newExpanded);
          }
        }
      };
      /*
       * Selection Helpers
       */


      var lastSelectedNode = React__namespace.useRef(null);
      var lastSelectionWasRange = React__namespace.useRef(false);
      var currentRangeSelection = React__namespace.useRef([]);

      var handleRangeArrowSelect = function handleRangeArrowSelect(event, nodes) {
        var base = selected;
        var start = nodes.start,
            next = nodes.next,
            current = nodes.current;

        if (!next || !current) {
          return;
        }

        if (currentRangeSelection.current.indexOf(current) === -1) {
          currentRangeSelection.current = [];
        }

        if (lastSelectionWasRange.current) {
          if (currentRangeSelection.current.indexOf(next) !== -1) {
            base = base.filter(function (id) {
              return id === start || id !== current;
            });
            currentRangeSelection.current = currentRangeSelection.current.filter(function (id) {
              return id === start || id !== current;
            });
          } else {
            base.push(next);
            currentRangeSelection.current.push(next);
          }
        } else {
          base.push(next);
          currentRangeSelection.current.push(current, next);
        }

        if (onNodeSelect) {
          onNodeSelect(event, base);
        }

        setSelectedState(base);
      };

      var handleRangeSelect = function handleRangeSelect(event, nodes) {
        var base = selected;
        var start = nodes.start,
            end = nodes.end; // If last selection was a range selection ignore nodes that were selected.

        if (lastSelectionWasRange.current) {
          base = selected.filter(function (id) {
            return currentRangeSelection.current.indexOf(id) === -1;
          });
        }

        var range = getNodesInRange(start, end);
        currentRangeSelection.current = range;
        var newSelected = base.concat(range);
        newSelected = newSelected.filter(function (id, i) {
          return newSelected.indexOf(id) === i;
        });

        if (onNodeSelect) {
          onNodeSelect(event, newSelected);
        }

        setSelectedState(newSelected);
      };

      var handleMultipleSelect = function handleMultipleSelect(event, value) {
        var newSelected = [];

        if (selected.indexOf(value) !== -1) {
          newSelected = selected.filter(function (id) {
            return id !== value;
          });
        } else {
          newSelected = [value].concat(selected);
        }

        if (onNodeSelect) {
          onNodeSelect(event, newSelected);
        }

        setSelectedState(newSelected);
      };

      var handleSingleSelect = function handleSingleSelect(event, value) {
        var newSelected = multiSelect ? [value] : value;

        if (onNodeSelect) {
          onNodeSelect(event, newSelected);
        }

        setSelectedState(newSelected);
      };

      var selectNode = function selectNode(event, id) {
        var multiple = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

        if (id) {
          if (multiple) {
            handleMultipleSelect(event, id);
          } else {
            handleSingleSelect(event, id);
          }

          lastSelectedNode.current = id;
          lastSelectionWasRange.current = false;
          currentRangeSelection.current = [];
          return true;
        }

        return false;
      };

      var selectRange = function selectRange(event, nodes) {
        var stacked = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        var _nodes$start = nodes.start,
            start = _nodes$start === void 0 ? lastSelectedNode.current : _nodes$start,
            end = nodes.end,
            current = nodes.current;

        if (stacked) {
          handleRangeArrowSelect(event, {
            start: start,
            next: end,
            current: current
          });
        } else {
          handleRangeSelect(event, {
            start: start,
            end: end
          });
        }

        lastSelectionWasRange.current = true;
        return true;
      };

      var rangeSelectToFirst = function rangeSelectToFirst(event, id) {
        if (!lastSelectedNode.current) {
          lastSelectedNode.current = id;
        }

        var start = lastSelectionWasRange.current ? lastSelectedNode.current : id;
        return selectRange(event, {
          start: start,
          end: getFirstNode()
        });
      };

      var rangeSelectToLast = function rangeSelectToLast(event, id) {
        if (!lastSelectedNode.current) {
          lastSelectedNode.current = id;
        }

        var start = lastSelectionWasRange.current ? lastSelectedNode.current : id;
        return selectRange(event, {
          start: start,
          end: getLastNode()
        });
      };

      var selectNextNode = function selectNextNode(event, id) {
        return selectRange(event, {
          end: getNextNode(id),
          current: id
        }, true);
      };

      var selectPreviousNode = function selectPreviousNode(event, id) {
        return selectRange(event, {
          end: getPreviousNode(id),
          current: id
        }, true);
      };

      var selectAllNodes = function selectAllNodes(event) {
        return selectRange(event, {
          start: getFirstNode(),
          end: getLastNode()
        });
      };
      /*
       * Mapping Helpers
       */


      var addNodeToNodeMap = function addNodeToNodeMap(id, childrenIds) {
        var currentMap = nodeMap.current[id];
        nodeMap.current[id] = _extends$3({}, currentMap, {
          children: childrenIds,
          id: id
        });
        childrenIds.forEach(function (childId) {
          var currentChildMap = nodeMap.current[childId];
          nodeMap.current[childId] = _extends$3({}, currentChildMap, {
            parent: id,
            id: childId
          });
        });
      };

      var getNodesToRemove = React__namespace.useCallback(function (id) {
        var map = nodeMap.current[id];
        var nodes = [];

        if (map) {
          nodes.push(id);

          if (map.children) {
            nodes.concat(map.children);
            map.children.forEach(function (node) {
              nodes.concat(getNodesToRemove(node));
            });
          }
        }

        return nodes;
      }, []);
      var cleanUpFirstCharMap = React__namespace.useCallback(function (nodes) {
        var newMap = _extends$3({}, firstCharMap.current);

        nodes.forEach(function (node) {
          if (newMap[node]) {
            delete newMap[node];
          }
        });
        firstCharMap.current = newMap;
      }, []);
      var removeNodeFromNodeMap = React__namespace.useCallback(function (id) {
        var nodes = getNodesToRemove(id);
        cleanUpFirstCharMap(nodes);

        var newMap = _extends$3({}, nodeMap.current);

        nodes.forEach(function (node) {
          var map = newMap[node];

          if (map) {
            if (map.parent) {
              var parentMap = newMap[map.parent];

              if (parentMap && parentMap.children) {
                var parentChildren = parentMap.children.filter(function (c) {
                  return c !== node;
                });
                newMap[map.parent] = _extends$3({}, parentMap, {
                  children: parentChildren
                });
              }
            }

            delete newMap[node];
          }
        });
        nodeMap.current = newMap;
        setFocusedNodeId(function (oldFocusedNodeId) {
          if (oldFocusedNodeId === id) {
            return null;
          }

          return oldFocusedNodeId;
        });
      }, [getNodesToRemove, cleanUpFirstCharMap]);

      var mapFirstChar = function mapFirstChar(id, firstChar) {
        firstCharMap.current[id] = firstChar;
      };

      var prevChildIds = React__namespace.useRef([]);

      var _React$useState3 = React__namespace.useState(false),
          childrenCalculated = _React$useState3[0],
          setChildrenCalculated = _React$useState3[1];

      React__namespace.useEffect(function () {
        var childIds = [];
        React__namespace.Children.forEach(children, function (child) {
          if ( /*#__PURE__*/React__namespace.isValidElement(child) && child.props.nodeId) {
            childIds.push(child.props.nodeId);
          }
        });

        if (arrayDiff(prevChildIds.current, childIds)) {
          nodeMap.current[-1] = {
            parent: null,
            children: childIds
          };
          childIds.forEach(function (id, index) {
            if (index === 0) {
              setTabbable(id);
            }
          });
          visibleNodes.current = nodeMap.current[-1].children;
          prevChildIds.current = childIds;
          setChildrenCalculated(true);
        }
      }, [children]);
      React__namespace.useEffect(function () {
        var buildVisible = function buildVisible(nodes) {
          var list = [];

          for (var i = 0; i < nodes.length; i += 1) {
            var item = nodes[i];
            list.push(item);
            var childs = nodeMap.current[item].children;

            if (isExpanded(item) && childs) {
              list = list.concat(buildVisible(childs));
            }
          }

          return list;
        };

        if (childrenCalculated) {
          visibleNodes.current = buildVisible(nodeMap.current[-1].children);
        }
      }, [expanded, childrenCalculated, isExpanded, children]);

      var noopSelection = function noopSelection() {
        return false;
      };

      return /*#__PURE__*/React__namespace.createElement(TreeViewContext$1.Provider, {
        value: {
          icons: {
            defaultCollapseIcon: defaultCollapseIcon,
            defaultExpandIcon: defaultExpandIcon,
            defaultParentIcon: defaultParentIcon,
            defaultEndIcon: defaultEndIcon
          },
          focus: focus,
          focusFirstNode: focusFirstNode,
          focusLastNode: focusLastNode,
          focusNextNode: focusNextNode,
          focusPreviousNode: focusPreviousNode,
          focusByFirstCharacter: focusByFirstCharacter,
          expandAllSiblings: expandAllSiblings,
          toggleExpansion: toggleExpansion,
          isExpanded: isExpanded,
          isFocused: isFocused,
          isSelected: isSelected,
          selectNode: disableSelection ? noopSelection : selectNode,
          selectRange: disableSelection ? noopSelection : selectRange,
          selectNextNode: disableSelection ? noopSelection : selectNextNode,
          selectPreviousNode: disableSelection ? noopSelection : selectPreviousNode,
          rangeSelectToFirst: disableSelection ? noopSelection : rangeSelectToFirst,
          rangeSelectToLast: disableSelection ? noopSelection : rangeSelectToLast,
          selectAllNodes: disableSelection ? noopSelection : selectAllNodes,
          isTabbable: isTabbable,
          multiSelect: multiSelect,
          getParent: getParent,
          mapFirstChar: mapFirstChar,
          addNodeToNodeMap: addNodeToNodeMap,
          removeNodeFromNodeMap: removeNodeFromNodeMap
        }
      }, /*#__PURE__*/React__namespace.createElement("ul", _extends$3({
        role: "tree",
        "aria-multiselectable": multiSelect,
        className: r$1(classes.root, className),
        ref: ref
      }, other), children));
    });
    process.env.NODE_ENV !== "production" ? TreeView.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * The content of the component.
       */
      children: re.node,

      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: re.object,

      /**
       * @ignore
       */
      className: re.string,

      /**
       * The default icon used to collapse the node.
       */
      defaultCollapseIcon: re.node,

      /**
       * The default icon displayed next to a end node. This is applied to all
       * tree nodes and can be overridden by the TreeItem `icon` prop.
       */
      defaultEndIcon: re.node,

      /**
       * Expanded node ids. (Uncontrolled)
       */
      defaultExpanded: re.arrayOf(re.string),

      /**
       * The default icon used to expand the node.
       */
      defaultExpandIcon: re.node,

      /**
       * The default icon displayed next to a parent node. This is applied to all
       * parent nodes and can be overridden by the TreeItem `icon` prop.
       */
      defaultParentIcon: re.node,

      /**
       * Selected node ids. (Uncontrolled)
       * When `multiSelect` is true this takes an array of strings; when false (default) a string.
       */
      defaultSelected: re.oneOfType([re.arrayOf(re.string), re.string]),

      /**
       * If `true` selection is disabled.
       */
      disableSelection: re.bool,

      /**
       * Expanded node ids. (Controlled)
       */
      expanded: re.arrayOf(re.string),

      /**
       * If true `ctrl` and `shift` will trigger multiselect.
       */
      multiSelect: re.bool,

      /**
       * Callback fired when tree items are selected/unselected.
       *
       * @param {object} event The event source of the callback
       * @param {(array|string)} value of the selected nodes. When `multiSelect` is true
       * this is an array of strings; when false (default) a string.
       */
      onNodeSelect: re.func,

      /**
       * Callback fired when tree items are expanded/collapsed.
       *
       * @param {object} event The event source of the callback.
       * @param {array} nodeIds The ids of the expanded nodes.
       */
      onNodeToggle: re.func,

      /**
       * Selected node ids. (Controlled)
       * When `multiSelect` is true this takes an array of strings; when false (default) a string.
       */
      selected: re.oneOfType([re.arrayOf(re.string), re.string])
    } : void 0;
    var TreeView$1 = withStyles(styles, {
      name: 'MuiTreeView'
    })(TreeView);

    /** @license Material-UI v4.0.0-alpha.60
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */

    var esm$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        Alert: Alert$2,
        AlertTitle: AlertTitle$1,
        Autocomplete: Autocomplete$1,
        AvatarGroup: AvatarGroup$1,
        Pagination: Pagination$1,
        PaginationItem: PaginationItem$1,
        Rating: Rating$1,
        Skeleton: Skeleton$1,
        SpeedDial: SpeedDial$1,
        SpeedDialAction: SpeedDialAction$1,
        SpeedDialIcon: SpeedDialIcon$1,
        TabContext: TabContext,
        TabList: TabList$1,
        TabPanel: TabPanel$1,
        Timeline: Timeline$1,
        TimelineConnector: TimelineConnector$1,
        TimelineContent: TimelineContent$1,
        TimelineDot: TimelineDot$1,
        TimelineItem: TimelineItem$1,
        TimelineOppositeContent: TimelineOppositeContent$1,
        TimelineSeparator: TimelineSeparator$1,
        ToggleButton: ToggleButton$1,
        ToggleButtonGroup: ToggleButtonGroup$1,
        TreeItem: TreeItem$1,
        TreeView: TreeView$1,
        useAutocomplete: useAutocomplete,
        createFilterOptions: createFilterOptions,
        usePagination: usePagination,
        useTabContext: useTabContext,
        getPanelId: getPanelId,
        getTabId: getTabId
    });

    var require$$9$1 = /*@__PURE__*/getAugmentedNamespace(esm$1);

    var LocalFileChooser$1 = {};

    var tracks = {};

    Object.defineProperty(tracks, "__esModule", {
      value: true
    });
    tracks.UNSUPPORTED = tracks.UNKNOWN = void 0;
    tracks.generateUnknownTrackConf = generateUnknownTrackConf;
    tracks.generateUnsupportedTrackConf = generateUnsupportedTrackConf;
    tracks.getBlob = getBlob;
    tracks.getBlobMap = getBlobMap;
    tracks.getFileName = getFileName;
    tracks.getParentRenderProps = getParentRenderProps;
    tracks.getRpcSessionId = getRpcSessionId;
    tracks.getTrackAssemblyNames = getTrackAssemblyNames;
    tracks.guessAdapter = guessAdapter;
    tracks.guessTrackType = guessTrackType;
    tracks.makeIndex = makeIndex;
    tracks.makeIndexType = makeIndexType;
    tracks.setBlobMap = setBlobMap;
    tracks.storeBlobLocation = storeBlobLocation;

    var _mobxStateTree$1 = require$$0$1;

    var _index2 = util$3;

    var _configuration$3 = configuration;

    /* utility functions for use by track models and so forth */
    function getTrackAssemblyNames(track) {
      var trackConf = track.configuration;
      var trackAssemblyNames = (0, _configuration$3.readConfObject)(trackConf, 'assemblyNames');

      if (!trackAssemblyNames) {
        // Check if it's an assembly sequence track
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var parent = (0, _mobxStateTree$1.getParent)(track.configuration);

        if ('sequence' in parent) {
          return [(0, _configuration$3.readConfObject)(parent, 'name')];
        }
      }

      return trackAssemblyNames;
    }
    /** return the rpcSessionId of the highest parent node in the tree that has an rpcSessionId */


    function getRpcSessionId(thisNode) {
      var highestRpcSessionId;

      for (var node = thisNode; !(0, _mobxStateTree$1.isRoot)(node); node = (0, _mobxStateTree$1.getParent)(node)) {
        if ('rpcSessionId' in node) {
          highestRpcSessionId = node.rpcSessionId;
        }
      }

      if (!highestRpcSessionId) {
        throw new Error('getRpcSessionId failed, no parent node in the state tree has an `rpcSessionId` attribute');
      }

      return highestRpcSessionId;
    }
    /**
     * given an MST node, get the renderprops of the first parent container that has
     * renderProps
     * @param node -
     * @returns renderprops, or empty object if none found
     */


    function getParentRenderProps(node) {
      for (var currentNode = (0, _mobxStateTree$1.getParent)(node); !(0, _mobxStateTree$1.isRoot)(currentNode); currentNode = (0, _mobxStateTree$1.getParent)(currentNode)) {
        if ('renderProps' in currentNode) {
          return currentNode.renderProps();
        }
      }

      return {};
    }

    var UNKNOWN = 'UNKNOWN';
    tracks.UNKNOWN = UNKNOWN;
    var UNSUPPORTED = 'UNSUPPORTED';
    tracks.UNSUPPORTED = UNSUPPORTED;
    var blobMap = {}; // get a specific blob

    function getBlob(id) {
      return blobMap[id];
    } // used to export entire context to webworker


    function getBlobMap() {
      return blobMap;
    } // used in new contexts like webworkers


    function setBlobMap(map) {
      blobMap = map;
    } // blob files are stored in a global map


    function storeBlobLocation(location) {
      if (location && 'blob' in location) {
        // possibly we should be more clear about when this is not undefined, and
        // also allow mix of blob and url for index and file
        // @ts-ignore
        var blobId = "b".concat(+Date.now());
        blobMap[blobId] = location.blob;
        return {
          name: location === null || location === void 0 ? void 0 : location.blob.name,
          blobId: blobId,
          locationType: 'BlobLocation'
        };
      }

      return location;
    }
    /**
     * creates a new location from the provided location including the appropriate suffix and location type
     * @param location - the FileLocation
     * @param suffix - the file suffix (e.g. .bam)
     * @returns the constructed location object from the provided prameters
     */


    function makeIndex(location, suffix) {
      if ('uri' in location) {
        return {
          uri: location.uri + suffix,
          locationType: 'UriLocation'
        };
      }

      if ('localPath' in location) {
        return {
          localPath: location.localPath + suffix,
          locationType: 'LocalPathLocation'
        };
      }

      return location;
    }
    /**
     * constructs a potential index file (with suffix) from the provided file name
     * @param name - the name of the index file
     * @param typeA - one option of a potential two file suffix (e.g. CSI, BAI)
     * @param typeB - the second option of a potential two file suffix (e.g. CSI, BAI)
     * @returns a likely name of the index file for a given filename
     */


    function makeIndexType(name, typeA, typeB) {
      return name !== null && name !== void 0 && name.toUpperCase().endsWith(typeA) ? typeA : typeB;
    }

    function getFileName(track) {
      var uri = 'uri' in track ? track.uri : undefined;
      var localPath = 'localPath' in track ? track.localPath : undefined;
      var blob = 'blobId' in track ? track : undefined;
      return (blob === null || blob === void 0 ? void 0 : blob.name) || (uri === null || uri === void 0 ? void 0 : uri.slice(uri.lastIndexOf('/') + 1)) || (localPath === null || localPath === void 0 ? void 0 : localPath.slice(localPath.lastIndexOf('/') + 1)) || '';
    }

    function guessAdapter(file, index, adapterHint, model) {
      if (model) {
        // @ts-ignore
        var session = (0, _index2.getSession)(model);
        var adapterGuesser = (0, _mobxStateTree$1.getEnv)(session).pluginManager.evaluateExtensionPoint('Core-guessAdapterForLocation', function (_file, _index, _adapterHint) {
          return undefined;
        });
        var adapter = adapterGuesser(file, index, adapterHint);

        if (adapter) {
          return adapter;
        }
      }

      return {
        type: UNKNOWN
      };
    }

    function guessTrackType(adapterType, model) {
      if (model) {
        // @ts-ignore
        var session = (0, _index2.getSession)(model);
        var trackTypeGuesser = (0, _mobxStateTree$1.getEnv)(session).pluginManager.evaluateExtensionPoint('Core-guessTrackTypeForLocation', function (_adapterName) {
          return undefined;
        });
        var trackType = trackTypeGuesser(adapterType);

        if (trackType) {
          return trackType;
        }
      }

      return 'FeatureTrack';
    }

    function generateUnsupportedTrackConf(trackName, trackUrl, categories) {
      var conf = {
        type: 'FeatureTrack',
        name: "".concat(trackName, " (Unsupported)"),
        description: "Support not yet implemented for \"".concat(trackUrl, "\""),
        category: categories,
        trackId: ''
      };
      conf.trackId = (0, _index2.objectHash)(conf);
      return conf;
    }

    function generateUnknownTrackConf(trackName, trackUrl, categories) {
      var conf = {
        type: 'FeatureTrack',
        name: "".concat(trackName, " (Unknown)"),
        description: "Could not determine track type for \"".concat(trackUrl, "\""),
        category: categories,
        trackId: ''
      };
      conf.trackId = (0, _index2.objectHash)(conf);
      return conf;
    }

    var _interopRequireDefault$l = interopRequireDefault.exports;

    Object.defineProperty(LocalFileChooser$1, "__esModule", {
      value: true
    });
    LocalFileChooser$1.default = void 0;

    var _react$9 = _interopRequireDefault$l(React__default["default"]);

    var _core$4 = require$$9$2;

    var _util$2 = util$3;

    var _tracks = tracks;

    function isLocalPathLocation(location) {
      return 'localPath' in location;
    }

    function isBlobLocation(location) {
      return 'blobId' in location;
    }

    var useStyles$7 = (0, _core$4.makeStyles)(function (theme) {
      return {
        filename: {
          marginLeft: theme.spacing(1)
        }
      };
    });

    function LocalFileChooser(props) {
      var classes = useStyles$7();
      var location = props.location,
          setLocation = props.setLocation;
      var filename = location && (isBlobLocation(location) && location.name || isLocalPathLocation(location) && location.localPath);
      var needToReload = location && isBlobLocation(location) && !(0, _tracks.getBlob)(location.blobId);
      return /*#__PURE__*/_react$9.default.createElement(_core$4.Box, {
        display: "flex",
        flexDirection: "row",
        alignItems: "center"
      }, /*#__PURE__*/_react$9.default.createElement(_core$4.Box, null, /*#__PURE__*/_react$9.default.createElement(_core$4.FormControl, {
        fullWidth: true
      }, /*#__PURE__*/_react$9.default.createElement(_core$4.Button, {
        variant: "outlined",
        component: "label"
      }, "Choose File", /*#__PURE__*/_react$9.default.createElement("input", {
        type: "file",
        hidden: true,
        onChange: function onChange(_ref) {
          var target = _ref.target;
          var file = target && target.files && target.files[0];

          if (file) {
            if (_util$2.isElectron) {
              setLocation({
                localPath: file.path,
                locationType: 'LocalPathLocation'
              });
            } else {
              setLocation((0, _tracks.storeBlobLocation)({
                blob: file
              }));
            }
          }
        }
      })))), /*#__PURE__*/_react$9.default.createElement(_core$4.Box, null, /*#__PURE__*/_react$9.default.createElement(_core$4.Typography, {
        component: "span",
        className: classes.filename,
        color: filename ? 'initial' : 'textSecondary'
      }, filename || 'No file chosen'), needToReload ? /*#__PURE__*/_react$9.default.createElement(_core$4.Typography, {
        color: "error"
      }, "(need to reload)") : null));
    }

    var _default$f = LocalFileChooser;
    LocalFileChooser$1.default = _default$f;

    var UrlChooser$1 = {};

    var _interopRequireDefault$k = interopRequireDefault.exports;

    Object.defineProperty(UrlChooser$1, "__esModule", {
      value: true
    });
    UrlChooser$1.default = void 0;

    var _react$8 = _interopRequireDefault$k(React__default["default"]);

    var _core$3 = require$$9$2;

    var _mobxReact$3 = require$$13;

    var _types$1 = types$1;

    function UrlChooser(props) {
      var location = props.location,
          setLocation = props.setLocation,
          label = props.label;
      return /*#__PURE__*/_react$8.default.createElement(_react$8.default.Fragment, null, /*#__PURE__*/_react$8.default.createElement(_core$3.TextField, {
        fullWidth: true,
        variant: "outlined",
        inputProps: {
          'data-testid': 'urlInput'
        },
        defaultValue: location && (0, _types$1.isUriLocation)(location) ? location.uri : '',
        label: label || 'Enter URL',
        onChange: function onChange(event) {
          setLocation({
            uri: event.target.value.trim(),
            locationType: 'UriLocation'
          });
        }
      }));
    }

    var _default$e = (0, _mobxReact$3.observer)(UrlChooser);

    UrlChooser$1.default = _default$e;

    var _interopRequireDefault$j = interopRequireDefault.exports;

    var _typeof$5 = _typeof$e.exports;

    Object.defineProperty(FileSelector$1, "__esModule", {
      value: true
    });
    FileSelector$1.default = void 0;

    var _toConsumableArray2$5 = _interopRequireDefault$j(toConsumableArray.exports);

    var _extends2$1 = _interopRequireDefault$j(_extends$1.exports);

    var _defineProperty2$5 = _interopRequireDefault$j(defineProperty$1.exports);

    var _slicedToArray2$6 = _interopRequireDefault$j(slicedToArray.exports);

    var _objectWithoutProperties2$1 = _interopRequireDefault$j(objectWithoutProperties.exports);

    var _react$7 = _interopRequireWildcard$b(React__default["default"]);

    var _core$2 = require$$9$2;

    var _lab = require$$9$1;

    var _mobxReact$2 = require$$13;

    var _types = types$1;

    var _ArrowDropDown = _interopRequireDefault$j(ArrowDropDown);

    var _LocalFileChooser = _interopRequireDefault$j(LocalFileChooser$1);

    var _UrlChooser = _interopRequireDefault$j(UrlChooser$1);

    var _excluded$2 = ["title", "children"];

    function _getRequireWildcardCache$5(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$5 = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

    function _interopRequireWildcard$b(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof$5(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$5(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

    function ownKeys$5(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

    function _objectSpread$5(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$5(Object(source), true).forEach(function (key) { (0, _defineProperty2$5.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$5(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

    function ToggleButtonWithTooltip(props) {
      var title = props.title,
          children = props.children,
          other = (0, _objectWithoutProperties2$1.default)(props, _excluded$2);
      return /*#__PURE__*/_react$7.default.createElement(_core$2.Tooltip, {
        title: title || ''
      }, /*#__PURE__*/_react$7.default.createElement(_lab.ToggleButton, other, children));
    }

    function shorten(str, len) {
      if (typeof str === 'string' && str.length > len) {
        return "".concat(str.substring(0, len), "\u2026");
      }

      return str;
    }

    var FileSelector = (0, _mobxReact$2.observer)(function (props) {
      var location = props.location,
          name = props.name,
          description = props.description,
          rootModel = props.rootModel,
          setLocation = props.setLocation;
      var fileOrUrl = !location || (0, _types.isUriLocation)(location) ? 'url' : 'file';

      var _useState = (0, _react$7.useState)(location && 'internetAccountId' in location && location.internetAccountId ? location.internetAccountId : fileOrUrl),
          _useState2 = (0, _slicedToArray2$6.default)(_useState, 2),
          toggleButtonValue = _useState2[0],
          setToggleButtonValue = _useState2[1];

      var accts = (0, _types.isAppRootModel)(rootModel) ? rootModel.internetAccounts.slice() : [];
      var numShown = 2;

      var _useState3 = (0, _react$7.useState)(accts.slice(0, numShown)),
          _useState4 = (0, _slicedToArray2$6.default)(_useState3, 2),
          shownAccts = _useState4[0],
          setShownAccts = _useState4[1];

      var _useState5 = (0, _react$7.useState)(accts.slice(numShown)),
          _useState6 = (0, _slicedToArray2$6.default)(_useState5, 2),
          hiddenAccts = _useState6[0],
          setHiddenAccts = _useState6[1];

      var _useState7 = (0, _react$7.useState)(null),
          _useState8 = (0, _slicedToArray2$6.default)(_useState7, 2),
          anchorEl = _useState8[0],
          setAnchorEl = _useState8[1];

      var selectedAcct = accts.find(function (ia) {
        return ia.internetAccountId === toggleButtonValue;
      });

      var setLocationWithAccount = function setLocationWithAccount(location) {
        setLocation(_objectSpread$5(_objectSpread$5({}, location), {}, {
          internetAccountId: selectedAcct ? selectedAcct.internetAccountId : undefined
        }));
      }; // if you swap account selection after inputting url


      if (location && selectedAcct && (0, _types.isUriLocation)(location) && location.internetAccountId !== selectedAcct.internetAccountId) {
        setLocationWithAccount(location);
      }

      var locationInput = /*#__PURE__*/_react$7.default.createElement(_UrlChooser.default, (0, _extends2$1.default)({}, props, {
        setLocation: setLocationWithAccount,
        label: selectedAcct === null || selectedAcct === void 0 ? void 0 : selectedAcct.selectorLabel
      }));

      if (toggleButtonValue === 'file') {
        locationInput = /*#__PURE__*/_react$7.default.createElement(_LocalFileChooser.default, props);
      }

      if (selectedAcct !== null && selectedAcct !== void 0 && selectedAcct.SelectorComponent) {
        var SelectorComponent = selectedAcct.SelectorComponent;
        locationInput = /*#__PURE__*/_react$7.default.createElement(SelectorComponent, (0, _extends2$1.default)({}, props, {
          setLocation: setLocationWithAccount
        }));
      }

      return /*#__PURE__*/_react$7.default.createElement(_react$7.default.Fragment, null, /*#__PURE__*/_react$7.default.createElement(_core$2.Box, {
        display: "flex"
      }, /*#__PURE__*/_react$7.default.createElement(_core$2.InputLabel, {
        shrink: true
      }, name)), /*#__PURE__*/_react$7.default.createElement(_core$2.Box, {
        display: "flex",
        flexDirection: "row"
      }, /*#__PURE__*/_react$7.default.createElement(_core$2.Box, null, /*#__PURE__*/_react$7.default.createElement(_lab.ToggleButtonGroup, {
        value: toggleButtonValue,
        exclusive: true,
        onChange: function onChange(_event, newState) {
          if (newState) {
            setToggleButtonValue(newState);
          }

          if ((0, _types.isUriLocation)(location)) {
            setLocationWithAccount(location);
          }
        },
        "aria-label": "file, url, or account picker"
      }, new URLSearchParams(window.location.search).get('adminKey') ? null : /*#__PURE__*/_react$7.default.createElement(_lab.ToggleButton, {
        value: "file",
        "aria-label": "local file"
      }, "File"), /*#__PURE__*/_react$7.default.createElement(_lab.ToggleButton, {
        value: "url",
        "aria-label": "url"
      }, "URL"), shownAccts.map(function (_ref) {
        var internetAccountId = _ref.internetAccountId,
            toggleContents = _ref.toggleContents,
            name = _ref.name;
        return /*#__PURE__*/_react$7.default.createElement(ToggleButtonWithTooltip, {
          key: internetAccountId,
          value: internetAccountId,
          "aria-label": name,
          title: name
        }, shorten(toggleContents || name, 5));
      }), hiddenAccts.length ? /*#__PURE__*/_react$7.default.createElement(_lab.ToggleButton, {
        onClick: function onClick(event) {
          return setAnchorEl(event.target);
        },
        selected: false
      }, "More", /*#__PURE__*/_react$7.default.createElement(_ArrowDropDown.default, null)) : null), /*#__PURE__*/_react$7.default.createElement(_core$2.Menu, {
        open: Boolean(anchorEl),
        anchorEl: anchorEl,
        onClose: function onClose() {
          return setAnchorEl(null);
        },
        getContentAnchorEl: null,
        anchorOrigin: {
          vertical: 'bottom',
          horizontal: 'center'
        },
        transformOrigin: {
          vertical: 'top',
          horizontal: 'center'
        }
      }, hiddenAccts === null || hiddenAccts === void 0 ? void 0 : hiddenAccts.map(function (acct, idx) {
        return /*#__PURE__*/_react$7.default.createElement(_core$2.MenuItem, {
          key: acct.internetAccountId,
          value: acct.internetAccountId,
          onClick: function onClick() {
            var prev = shownAccts[shownAccts.length - 1];
            setShownAccts([].concat((0, _toConsumableArray2$5.default)(shownAccts.slice(0, shownAccts.length - 1)), [acct]));
            setHiddenAccts([prev].concat((0, _toConsumableArray2$5.default)(hiddenAccts.slice(0, idx)), (0, _toConsumableArray2$5.default)(hiddenAccts.slice(idx + 1))));
            setToggleButtonValue(acct.internetAccountId);
            setAnchorEl(null);
          }
        }, acct.name);
      })))), locationInput, /*#__PURE__*/_react$7.default.createElement(_core$2.FormHelperText, null, description));
    });
    var _default$d = FileSelector;
    FileSelector$1.default = _default$d;

    var _interopRequireDefault$i = interopRequireDefault.exports;

    Object.defineProperty(FileSelector$2, "__esModule", {
      value: true
    });
    FileSelector$2.default = void 0;

    var _FileSelector = _interopRequireDefault$i(FileSelector$1);

    var _default$c = _FileSelector.default;
    FileSelector$2.default = _default$c;

    var PrerenderedCanvas$1 = {};

    var _interopRequireDefault$h = interopRequireDefault.exports;

    var _typeof$4 = _typeof$e.exports;

    Object.defineProperty(PrerenderedCanvas$1, "__esModule", {
      value: true
    });
    PrerenderedCanvas$1.default = void 0;

    var _defineProperty2$4 = _interopRequireDefault$h(defineProperty$1.exports);

    var _toConsumableArray2$4 = _interopRequireDefault$h(toConsumableArray.exports);

    var _propTypes$1 = _interopRequireDefault$h(propTypes.exports);

    var _react$6 = _interopRequireWildcard$a(React__default["default"]);

    var _offscreenCanvasPonyfill = offscreenCanvasPonyfill;

    function _getRequireWildcardCache$4(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$4 = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

    function _interopRequireWildcard$a(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof$4(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$4(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

    function ownKeys$4(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

    function _objectSpread$4(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$4(Object(source), true).forEach(function (key) { (0, _defineProperty2$4.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$4(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

    function PrerenderedCanvas(props) {
      var width = props.width,
          height = props.height,
          highResolutionScaling = props.highResolutionScaling,
          style = props.style,
          imageData = props.imageData,
          blockKey = props.blockKey,
          showSoftClip = props.showSoftClip;
      var featureCanvas = (0, _react$6.useRef)(null);
      (0, _react$6.useEffect)(function () {
        if (!imageData) {
          return;
        }

        var canvas = featureCanvas.current;

        if (!canvas) {
          return;
        }

        var context = canvas.getContext('2d');

        if (!context) {
          return;
        }

        if (imageData.commands) {
          imageData.commands.forEach(function (command) {
            if (command.type === 'strokeStyle') {
              context.strokeStyle = command.style;
            } else if (command.type === 'fillStyle') {
              context.fillStyle = command.style;
            } else if (command.type === 'font') {
              context.font = command.style;
            } else {
              // @ts-ignore
              context[command.type].apply(context, (0, _toConsumableArray2$4.default)(command.args));
            }
          });
        } else if (imageData instanceof _offscreenCanvasPonyfill.ImageBitmapType) {
          context.drawImage(imageData, 0, 0);
        } else if (imageData.dataURL) {
          var img = new Image();

          img.onload = function () {
            return context.drawImage(img, 0, 0);
          };

          img.src = imageData.dataURL;
        }
      }, [imageData]);
      var softClipString = showSoftClip ? '_softclipped' : '';
      var blockKeyStr = blockKey ? '_' + blockKey : '';
      var testId = "prerendered_canvas".concat(softClipString).concat(blockKeyStr);
      return /*#__PURE__*/_react$6.default.createElement("canvas", {
        "data-testid": testId,
        ref: featureCanvas,
        width: width * highResolutionScaling,
        height: height * highResolutionScaling,
        style: _objectSpread$4({
          width: width,
          height: height
        }, style)
      });
    }

    PrerenderedCanvas.propTypes = {
      height: _propTypes$1.default.number.isRequired,
      width: _propTypes$1.default.number.isRequired,
      highResolutionScaling: _propTypes$1.default.number,
      style: _propTypes$1.default.objectOf(_propTypes$1.default.any),
      imageData: _propTypes$1.default.any // config: ReactPropTypes.objectOf(ReactPropTypes.any),

    };
    PrerenderedCanvas.defaultProps = {
      imageData: undefined,
      highResolutionScaling: 1,
      style: {} // config: {},

    };
    var _default$b = PrerenderedCanvas;
    PrerenderedCanvas$1.default = _default$b;

    var FactoryResetDialog = {};

    var require$$3$1 = /*@__PURE__*/getAugmentedNamespace(Button);

    var require$$4 = /*@__PURE__*/getAugmentedNamespace(Dialog);

    var require$$7 = /*@__PURE__*/getAugmentedNamespace(DialogTitle);

    var require$$6 = /*@__PURE__*/getAugmentedNamespace(DialogContent);

    var require$$5$1 = /*@__PURE__*/getAugmentedNamespace(DialogContentText);

    var require$$5 = /*@__PURE__*/getAugmentedNamespace(DialogActions);

    var _interopRequireDefault$g = interopRequireDefault.exports;

    Object.defineProperty(FactoryResetDialog, "__esModule", {
      value: true
    });
    FactoryResetDialog.default = void 0;

    var _Button$1 = _interopRequireDefault$g(require$$3$1);

    var _Dialog$1 = _interopRequireDefault$g(require$$4);

    var _DialogTitle$1 = _interopRequireDefault$g(require$$7);

    var _DialogContent$1 = _interopRequireDefault$g(require$$6);

    var _DialogContentText = _interopRequireDefault$g(require$$5$1);

    var _DialogActions$1 = _interopRequireDefault$g(require$$5);

    var _react$5 = _interopRequireDefault$g(React__default["default"]);

    var _default$a = function _default(_ref) {
      var onClose = _ref.onClose,
          open = _ref.open,
          onFactoryReset = _ref.onFactoryReset;

      function handleDialogClose(action) {
        if (action === 'reset') {
          onFactoryReset();
        }

        onClose();
      }

      return /*#__PURE__*/_react$5.default.createElement(_Dialog$1.default, {
        open: open,
        onClose: function onClose() {
          return handleDialogClose();
        }
      }, /*#__PURE__*/_react$5.default.createElement(_DialogTitle$1.default, {
        id: "alert-dialog-title"
      }, "Reset"), /*#__PURE__*/_react$5.default.createElement(_DialogContent$1.default, null, /*#__PURE__*/_react$5.default.createElement(_DialogContentText.default, {
        id: "alert-dialog-description"
      }, "Are you sure you want to reset? This will restore the default configuration.")), /*#__PURE__*/_react$5.default.createElement(_DialogActions$1.default, null, /*#__PURE__*/_react$5.default.createElement(_Button$1.default, {
        onClick: function onClick() {
          return handleDialogClose();
        },
        color: "primary"
      }, "Cancel"), /*#__PURE__*/_react$5.default.createElement(_Button$1.default, {
        onClick: function onClick() {
          return handleDialogClose('reset');
        },
        color: "primary",
        variant: "contained"
      }, "OK")));
    };

    FactoryResetDialog.default = _default$a;

    var Tooltip$1 = {};

    var _interopRequireDefault$f = interopRequireDefault.exports;

    var _typeof$3 = _typeof$e.exports;

    Object.defineProperty(Tooltip$1, "__esModule", {
      value: true
    });
    Tooltip$1.default = void 0;

    var _slicedToArray2$5 = _interopRequireDefault$f(slicedToArray.exports);

    var _react$4 = _interopRequireWildcard$9(React__default["default"]);

    var _styles$1 = require$$11;

    var _mobxReact$1 = require$$13;

    var _configuration$2 = configuration;

    function _getRequireWildcardCache$3(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$3 = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

    function _interopRequireWildcard$9(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof$3(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$3(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

    var useStyles$6 = (0, _styles$1.makeStyles)({
      hoverLabel: {
        border: '1px solid black',
        position: 'absolute',
        background: '#fffa',
        pointerEvents: 'none',
        zIndex: 10000
      }
    });

    var Tooltip = function Tooltip(_ref) {
      var offsetX = _ref.offsetX,
          offsetY = _ref.offsetY,
          configuration = _ref.configuration,
          feature = _ref.feature,
          _ref$timeout = _ref.timeout,
          timeout = _ref$timeout === void 0 ? 300 : _ref$timeout;
      var classes = useStyles$6();

      var _useState = (0, _react$4.useState)(false),
          _useState2 = (0, _slicedToArray2$5.default)(_useState, 2),
          shown = _useState2[0],
          setShown = _useState2[1];

      (0, _react$4.useEffect)(function () {
        // only show the loading message after short timeout to prevent excessive
        // flickering
        var handle = setTimeout(function () {
          return setShown(true);
        }, timeout);
        return function () {
          return clearTimeout(handle);
        };
      });

      if (feature && shown) {
        var text = (0, _configuration$2.readConfObject)(configuration, 'mouseover', {
          feature: feature
        });
        return /*#__PURE__*/_react$4.default.createElement("div", {
          className: classes.hoverLabel,
          style: {
            left: offsetX,
            top: offsetY
          }
        }, text);
      }

      return null;
    };

    var _default$9 = (0, _mobxReact$1.observer)(Tooltip);

    Tooltip$1.default = _default$9;

    var FatalErrorDialog$1 = {};

    var _interopRequireDefault$e = interopRequireDefault.exports;

    var _typeof$2 = _typeof$e.exports;

    Object.defineProperty(FatalErrorDialog$1, "__esModule", {
      value: true
    });
    FatalErrorDialog$1.default = void 0;

    var _slicedToArray2$4 = _interopRequireDefault$e(slicedToArray.exports);

    var _Button = _interopRequireDefault$e(require$$3$1);

    var _Dialog = _interopRequireDefault$e(require$$4);

    var _DialogActions = _interopRequireDefault$e(require$$5);

    var _DialogContent = _interopRequireDefault$e(require$$6);

    var _DialogTitle = _interopRequireDefault$e(require$$7);

    var _propTypes = _interopRequireDefault$e(propTypes.exports);

    var _react$3 = _interopRequireWildcard$8(React__default["default"]);

    var _FactoryResetDialog = _interopRequireDefault$e(FactoryResetDialog);

    function _getRequireWildcardCache$2(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$2 = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

    function _interopRequireWildcard$8(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof$2(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$2(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

    var ResetComponent = function ResetComponent(_ref) {
      var onFactoryReset = _ref.onFactoryReset,
          resetButtonText = _ref.resetButtonText;

      var _useState = (0, _react$3.useState)(false),
          _useState2 = (0, _slicedToArray2$4.default)(_useState, 2),
          dialogOpen = _useState2[0],
          setDialogOpen = _useState2[1];

      return /*#__PURE__*/_react$3.default.createElement(_react$3.default.Fragment, null, /*#__PURE__*/_react$3.default.createElement(_Button.default, {
        "data-testid": "fatal-error",
        color: "primary",
        variant: "contained",
        onClick: function onClick() {
          return setDialogOpen(true);
        }
      }, resetButtonText), /*#__PURE__*/_react$3.default.createElement(_FactoryResetDialog.default, {
        onClose: function onClose() {
          return setDialogOpen(false);
        },
        open: dialogOpen,
        onFactoryReset: onFactoryReset
      }));
    };

    ResetComponent.propTypes = {
      onFactoryReset: _propTypes.default.func.isRequired,
      resetButtonText: _propTypes.default.string.isRequired
    };

    var FatalErrorDialog = function FatalErrorDialog(_ref2) {
      var componentStack = _ref2.componentStack,
          error = _ref2.error,
          onFactoryReset = _ref2.onFactoryReset,
          resetButtonText = _ref2.resetButtonText;
      return /*#__PURE__*/_react$3.default.createElement(_Dialog.default, {
        open: true
      }, /*#__PURE__*/_react$3.default.createElement(_DialogTitle.default, {
        style: {
          backgroundColor: '#e88'
        }
      }, "Fatal error"), /*#__PURE__*/_react$3.default.createElement(_DialogContent.default, null, /*#__PURE__*/_react$3.default.createElement("pre", null, error.toString(), componentStack)), /*#__PURE__*/_react$3.default.createElement(_DialogActions.default, null, /*#__PURE__*/_react$3.default.createElement(_Button.default, {
        color: "secondary",
        variant: "contained",
        onClick: function onClick() {
          return window.location.reload();
        }
      }, "Refresh"), /*#__PURE__*/_react$3.default.createElement(ResetComponent, {
        onFactoryReset: onFactoryReset,
        resetButtonText: resetButtonText
      })));
    };

    FatalErrorDialog.propTypes = {
      componentStack: _propTypes.default.string,
      error: _propTypes.default.shape({}),
      onFactoryReset: _propTypes.default.func.isRequired,
      resetButtonText: _propTypes.default.string
    };
    FatalErrorDialog.defaultProps = {
      error: {
        message: 'No error message provided'
      },
      componentStack: '',
      resetButtonText: 'Factory Reset'
    };
    var _default$8 = FatalErrorDialog;
    FatalErrorDialog$1.default = _default$8;

    var SanitizedHTML$1 = {};

    /*!
     * escape-html
     * Copyright(c) 2012-2013 TJ Holowaychuk
     * Copyright(c) 2015 Andreas Lubbe
     * Copyright(c) 2015 Tiancheng "Timothy" Gu
     * MIT Licensed
     */

    /**
     * Module variables.
     * @private
     */

    var matchHtmlRegExp = /["'&<>]/;

    /**
     * Module exports.
     * @public
     */

    var escapeHtml_1 = escapeHtml;

    /**
     * Escape special characters in the given string of html.
     *
     * @param  {string} string The string to escape for inserting into HTML
     * @return {string}
     * @public
     */

    function escapeHtml(string) {
      var str = '' + string;
      var match = matchHtmlRegExp.exec(str);

      if (!match) {
        return str;
      }

      var escape;
      var html = '';
      var index = 0;
      var lastIndex = 0;

      for (index = match.index; index < str.length; index++) {
        switch (str.charCodeAt(index)) {
          case 34: // "
            escape = '&quot;';
            break;
          case 38: // &
            escape = '&amp;';
            break;
          case 39: // '
            escape = '&#39;';
            break;
          case 60: // <
            escape = '&lt;';
            break;
          case 62: // >
            escape = '&gt;';
            break;
          default:
            continue;
        }

        if (lastIndex !== index) {
          html += str.substring(lastIndex, index);
        }

        lastIndex = index + 1;
        html += escape;
      }

      return lastIndex !== index
        ? html + str.substring(lastIndex, index)
        : html;
    }

    var purify = {exports: {}};

    /*! @license DOMPurify 2.3.4 | (c) Cure53 and other contributors | Released under the Apache license 2.0 and Mozilla Public License 2.0 | github.com/cure53/DOMPurify/blob/2.3.4/LICENSE */

    (function (module, exports) {
    (function (global, factory) {
      module.exports = factory() ;
    }(commonjsGlobal, function () {
      function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

      var hasOwnProperty = Object.hasOwnProperty,
          setPrototypeOf = Object.setPrototypeOf,
          isFrozen = Object.isFrozen,
          getPrototypeOf = Object.getPrototypeOf,
          getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
      var freeze = Object.freeze,
          seal = Object.seal,
          create = Object.create; // eslint-disable-line import/no-mutable-exports

      var _ref = typeof Reflect !== 'undefined' && Reflect,
          apply = _ref.apply,
          construct = _ref.construct;

      if (!apply) {
        apply = function apply(fun, thisValue, args) {
          return fun.apply(thisValue, args);
        };
      }

      if (!freeze) {
        freeze = function freeze(x) {
          return x;
        };
      }

      if (!seal) {
        seal = function seal(x) {
          return x;
        };
      }

      if (!construct) {
        construct = function construct(Func, args) {
          return new (Function.prototype.bind.apply(Func, [null].concat(_toConsumableArray(args))))();
        };
      }

      var arrayForEach = unapply(Array.prototype.forEach);
      var arrayPop = unapply(Array.prototype.pop);
      var arrayPush = unapply(Array.prototype.push);

      var stringToLowerCase = unapply(String.prototype.toLowerCase);
      var stringMatch = unapply(String.prototype.match);
      var stringReplace = unapply(String.prototype.replace);
      var stringIndexOf = unapply(String.prototype.indexOf);
      var stringTrim = unapply(String.prototype.trim);

      var regExpTest = unapply(RegExp.prototype.test);

      var typeErrorCreate = unconstruct(TypeError);

      function unapply(func) {
        return function (thisArg) {
          for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }

          return apply(func, thisArg, args);
        };
      }

      function unconstruct(func) {
        return function () {
          for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }

          return construct(func, args);
        };
      }

      /* Add properties to a lookup table */
      function addToSet(set, array) {
        if (setPrototypeOf) {
          // Make 'in' and truthy checks like Boolean(set.constructor)
          // independent of any properties defined on Object.prototype.
          // Prevent prototype setters from intercepting set as a this value.
          setPrototypeOf(set, null);
        }

        var l = array.length;
        while (l--) {
          var element = array[l];
          if (typeof element === 'string') {
            var lcElement = stringToLowerCase(element);
            if (lcElement !== element) {
              // Config presets (e.g. tags.js, attrs.js) are immutable.
              if (!isFrozen(array)) {
                array[l] = lcElement;
              }

              element = lcElement;
            }
          }

          set[element] = true;
        }

        return set;
      }

      /* Shallow clone an object */
      function clone(object) {
        var newObject = create(null);

        var property = void 0;
        for (property in object) {
          if (apply(hasOwnProperty, object, [property])) {
            newObject[property] = object[property];
          }
        }

        return newObject;
      }

      /* IE10 doesn't support __lookupGetter__ so lets'
       * simulate it. It also automatically checks
       * if the prop is function or getter and behaves
       * accordingly. */
      function lookupGetter(object, prop) {
        while (object !== null) {
          var desc = getOwnPropertyDescriptor(object, prop);
          if (desc) {
            if (desc.get) {
              return unapply(desc.get);
            }

            if (typeof desc.value === 'function') {
              return unapply(desc.value);
            }
          }

          object = getPrototypeOf(object);
        }

        function fallbackValue(element) {
          console.warn('fallback value for', element);
          return null;
        }

        return fallbackValue;
      }

      var html = freeze(['a', 'abbr', 'acronym', 'address', 'area', 'article', 'aside', 'audio', 'b', 'bdi', 'bdo', 'big', 'blink', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'center', 'cite', 'code', 'col', 'colgroup', 'content', 'data', 'datalist', 'dd', 'decorator', 'del', 'details', 'dfn', 'dialog', 'dir', 'div', 'dl', 'dt', 'element', 'em', 'fieldset', 'figcaption', 'figure', 'font', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'img', 'input', 'ins', 'kbd', 'label', 'legend', 'li', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meter', 'nav', 'nobr', 'ol', 'optgroup', 'option', 'output', 'p', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'section', 'select', 'shadow', 'small', 'source', 'spacer', 'span', 'strike', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'time', 'tr', 'track', 'tt', 'u', 'ul', 'var', 'video', 'wbr']);

      // SVG
      var svg = freeze(['svg', 'a', 'altglyph', 'altglyphdef', 'altglyphitem', 'animatecolor', 'animatemotion', 'animatetransform', 'circle', 'clippath', 'defs', 'desc', 'ellipse', 'filter', 'font', 'g', 'glyph', 'glyphref', 'hkern', 'image', 'line', 'lineargradient', 'marker', 'mask', 'metadata', 'mpath', 'path', 'pattern', 'polygon', 'polyline', 'radialgradient', 'rect', 'stop', 'style', 'switch', 'symbol', 'text', 'textpath', 'title', 'tref', 'tspan', 'view', 'vkern']);

      var svgFilters = freeze(['feBlend', 'feColorMatrix', 'feComponentTransfer', 'feComposite', 'feConvolveMatrix', 'feDiffuseLighting', 'feDisplacementMap', 'feDistantLight', 'feFlood', 'feFuncA', 'feFuncB', 'feFuncG', 'feFuncR', 'feGaussianBlur', 'feImage', 'feMerge', 'feMergeNode', 'feMorphology', 'feOffset', 'fePointLight', 'feSpecularLighting', 'feSpotLight', 'feTile', 'feTurbulence']);

      // List of SVG elements that are disallowed by default.
      // We still need to know them so that we can do namespace
      // checks properly in case one wants to add them to
      // allow-list.
      var svgDisallowed = freeze(['animate', 'color-profile', 'cursor', 'discard', 'fedropshadow', 'font-face', 'font-face-format', 'font-face-name', 'font-face-src', 'font-face-uri', 'foreignobject', 'hatch', 'hatchpath', 'mesh', 'meshgradient', 'meshpatch', 'meshrow', 'missing-glyph', 'script', 'set', 'solidcolor', 'unknown', 'use']);

      var mathMl = freeze(['math', 'menclose', 'merror', 'mfenced', 'mfrac', 'mglyph', 'mi', 'mlabeledtr', 'mmultiscripts', 'mn', 'mo', 'mover', 'mpadded', 'mphantom', 'mroot', 'mrow', 'ms', 'mspace', 'msqrt', 'mstyle', 'msub', 'msup', 'msubsup', 'mtable', 'mtd', 'mtext', 'mtr', 'munder', 'munderover']);

      // Similarly to SVG, we want to know all MathML elements,
      // even those that we disallow by default.
      var mathMlDisallowed = freeze(['maction', 'maligngroup', 'malignmark', 'mlongdiv', 'mscarries', 'mscarry', 'msgroup', 'mstack', 'msline', 'msrow', 'semantics', 'annotation', 'annotation-xml', 'mprescripts', 'none']);

      var text = freeze(['#text']);

      var html$1 = freeze(['accept', 'action', 'align', 'alt', 'autocapitalize', 'autocomplete', 'autopictureinpicture', 'autoplay', 'background', 'bgcolor', 'border', 'capture', 'cellpadding', 'cellspacing', 'checked', 'cite', 'class', 'clear', 'color', 'cols', 'colspan', 'controls', 'controlslist', 'coords', 'crossorigin', 'datetime', 'decoding', 'default', 'dir', 'disabled', 'disablepictureinpicture', 'disableremoteplayback', 'download', 'draggable', 'enctype', 'enterkeyhint', 'face', 'for', 'headers', 'height', 'hidden', 'high', 'href', 'hreflang', 'id', 'inputmode', 'integrity', 'ismap', 'kind', 'label', 'lang', 'list', 'loading', 'loop', 'low', 'max', 'maxlength', 'media', 'method', 'min', 'minlength', 'multiple', 'muted', 'name', 'nonce', 'noshade', 'novalidate', 'nowrap', 'open', 'optimum', 'pattern', 'placeholder', 'playsinline', 'poster', 'preload', 'pubdate', 'radiogroup', 'readonly', 'rel', 'required', 'rev', 'reversed', 'role', 'rows', 'rowspan', 'spellcheck', 'scope', 'selected', 'shape', 'size', 'sizes', 'span', 'srclang', 'start', 'src', 'srcset', 'step', 'style', 'summary', 'tabindex', 'title', 'translate', 'type', 'usemap', 'valign', 'value', 'width', 'xmlns', 'slot']);

      var svg$1 = freeze(['accent-height', 'accumulate', 'additive', 'alignment-baseline', 'ascent', 'attributename', 'attributetype', 'azimuth', 'basefrequency', 'baseline-shift', 'begin', 'bias', 'by', 'class', 'clip', 'clippathunits', 'clip-path', 'clip-rule', 'color', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'cx', 'cy', 'd', 'dx', 'dy', 'diffuseconstant', 'direction', 'display', 'divisor', 'dur', 'edgemode', 'elevation', 'end', 'fill', 'fill-opacity', 'fill-rule', 'filter', 'filterunits', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'fx', 'fy', 'g1', 'g2', 'glyph-name', 'glyphref', 'gradientunits', 'gradienttransform', 'height', 'href', 'id', 'image-rendering', 'in', 'in2', 'k', 'k1', 'k2', 'k3', 'k4', 'kerning', 'keypoints', 'keysplines', 'keytimes', 'lang', 'lengthadjust', 'letter-spacing', 'kernelmatrix', 'kernelunitlength', 'lighting-color', 'local', 'marker-end', 'marker-mid', 'marker-start', 'markerheight', 'markerunits', 'markerwidth', 'maskcontentunits', 'maskunits', 'max', 'mask', 'media', 'method', 'mode', 'min', 'name', 'numoctaves', 'offset', 'operator', 'opacity', 'order', 'orient', 'orientation', 'origin', 'overflow', 'paint-order', 'path', 'pathlength', 'patterncontentunits', 'patterntransform', 'patternunits', 'points', 'preservealpha', 'preserveaspectratio', 'primitiveunits', 'r', 'rx', 'ry', 'radius', 'refx', 'refy', 'repeatcount', 'repeatdur', 'restart', 'result', 'rotate', 'scale', 'seed', 'shape-rendering', 'specularconstant', 'specularexponent', 'spreadmethod', 'startoffset', 'stddeviation', 'stitchtiles', 'stop-color', 'stop-opacity', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke', 'stroke-width', 'style', 'surfacescale', 'systemlanguage', 'tabindex', 'targetx', 'targety', 'transform', 'text-anchor', 'text-decoration', 'text-rendering', 'textlength', 'type', 'u1', 'u2', 'unicode', 'values', 'viewbox', 'visibility', 'version', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'width', 'word-spacing', 'wrap', 'writing-mode', 'xchannelselector', 'ychannelselector', 'x', 'x1', 'x2', 'xmlns', 'y', 'y1', 'y2', 'z', 'zoomandpan']);

      var mathMl$1 = freeze(['accent', 'accentunder', 'align', 'bevelled', 'close', 'columnsalign', 'columnlines', 'columnspan', 'denomalign', 'depth', 'dir', 'display', 'displaystyle', 'encoding', 'fence', 'frame', 'height', 'href', 'id', 'largeop', 'length', 'linethickness', 'lspace', 'lquote', 'mathbackground', 'mathcolor', 'mathsize', 'mathvariant', 'maxsize', 'minsize', 'movablelimits', 'notation', 'numalign', 'open', 'rowalign', 'rowlines', 'rowspacing', 'rowspan', 'rspace', 'rquote', 'scriptlevel', 'scriptminsize', 'scriptsizemultiplier', 'selection', 'separator', 'separators', 'stretchy', 'subscriptshift', 'supscriptshift', 'symmetric', 'voffset', 'width', 'xmlns']);

      var xml = freeze(['xlink:href', 'xml:id', 'xlink:title', 'xml:space', 'xmlns:xlink']);

      // eslint-disable-next-line unicorn/better-regex
      var MUSTACHE_EXPR = seal(/\{\{[\s\S]*|[\s\S]*\}\}/gm); // Specify template detection regex for SAFE_FOR_TEMPLATES mode
      var ERB_EXPR = seal(/<%[\s\S]*|[\s\S]*%>/gm);
      var DATA_ATTR = seal(/^data-[\-\w.\u00B7-\uFFFF]/); // eslint-disable-line no-useless-escape
      var ARIA_ATTR = seal(/^aria-[\-\w]+$/); // eslint-disable-line no-useless-escape
      var IS_ALLOWED_URI = seal(/^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|xmpp):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i // eslint-disable-line no-useless-escape
      );
      var IS_SCRIPT_OR_DATA = seal(/^(?:\w+script|data):/i);
      var ATTR_WHITESPACE = seal(/[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205F\u3000]/g // eslint-disable-line no-control-regex
      );

      var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

      function _toConsumableArray$1(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

      var getGlobal = function getGlobal() {
        return typeof window === 'undefined' ? null : window;
      };

      /**
       * Creates a no-op policy for internal use only.
       * Don't export this function outside this module!
       * @param {?TrustedTypePolicyFactory} trustedTypes The policy factory.
       * @param {Document} document The document object (to determine policy name suffix)
       * @return {?TrustedTypePolicy} The policy created (or null, if Trusted Types
       * are not supported).
       */
      var _createTrustedTypesPolicy = function _createTrustedTypesPolicy(trustedTypes, document) {
        if ((typeof trustedTypes === 'undefined' ? 'undefined' : _typeof(trustedTypes)) !== 'object' || typeof trustedTypes.createPolicy !== 'function') {
          return null;
        }

        // Allow the callers to control the unique policy name
        // by adding a data-tt-policy-suffix to the script element with the DOMPurify.
        // Policy creation with duplicate names throws in Trusted Types.
        var suffix = null;
        var ATTR_NAME = 'data-tt-policy-suffix';
        if (document.currentScript && document.currentScript.hasAttribute(ATTR_NAME)) {
          suffix = document.currentScript.getAttribute(ATTR_NAME);
        }

        var policyName = 'dompurify' + (suffix ? '#' + suffix : '');

        try {
          return trustedTypes.createPolicy(policyName, {
            createHTML: function createHTML(html$$1) {
              return html$$1;
            }
          });
        } catch (_) {
          // Policy creation failed (most likely another DOMPurify script has
          // already run). Skip creating the policy, as this will only cause errors
          // if TT are enforced.
          console.warn('TrustedTypes policy ' + policyName + ' could not be created.');
          return null;
        }
      };

      function createDOMPurify() {
        var window = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getGlobal();

        var DOMPurify = function DOMPurify(root) {
          return createDOMPurify(root);
        };

        /**
         * Version label, exposed for easier checks
         * if DOMPurify is up to date or not
         */
        DOMPurify.version = '2.3.4';

        /**
         * Array of elements that DOMPurify removed during sanitation.
         * Empty if nothing was removed.
         */
        DOMPurify.removed = [];

        if (!window || !window.document || window.document.nodeType !== 9) {
          // Not running in a browser, provide a factory function
          // so that you can pass your own Window
          DOMPurify.isSupported = false;

          return DOMPurify;
        }

        var originalDocument = window.document;

        var document = window.document;
        var DocumentFragment = window.DocumentFragment,
            HTMLTemplateElement = window.HTMLTemplateElement,
            Node = window.Node,
            Element = window.Element,
            NodeFilter = window.NodeFilter,
            _window$NamedNodeMap = window.NamedNodeMap,
            NamedNodeMap = _window$NamedNodeMap === undefined ? window.NamedNodeMap || window.MozNamedAttrMap : _window$NamedNodeMap,
            HTMLFormElement = window.HTMLFormElement,
            DOMParser = window.DOMParser,
            trustedTypes = window.trustedTypes;


        var ElementPrototype = Element.prototype;

        var cloneNode = lookupGetter(ElementPrototype, 'cloneNode');
        var getNextSibling = lookupGetter(ElementPrototype, 'nextSibling');
        var getChildNodes = lookupGetter(ElementPrototype, 'childNodes');
        var getParentNode = lookupGetter(ElementPrototype, 'parentNode');

        // As per issue #47, the web-components registry is inherited by a
        // new document created via createHTMLDocument. As per the spec
        // (http://w3c.github.io/webcomponents/spec/custom/#creating-and-passing-registries)
        // a new empty registry is used when creating a template contents owner
        // document, so we use that as our parent document to ensure nothing
        // is inherited.
        if (typeof HTMLTemplateElement === 'function') {
          var template = document.createElement('template');
          if (template.content && template.content.ownerDocument) {
            document = template.content.ownerDocument;
          }
        }

        var trustedTypesPolicy = _createTrustedTypesPolicy(trustedTypes, originalDocument);
        var emptyHTML = trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML('') : '';

        var _document = document,
            implementation = _document.implementation,
            createNodeIterator = _document.createNodeIterator,
            createDocumentFragment = _document.createDocumentFragment,
            getElementsByTagName = _document.getElementsByTagName;
        var importNode = originalDocument.importNode;


        var documentMode = {};
        try {
          documentMode = clone(document).documentMode ? document.documentMode : {};
        } catch (_) {}

        var hooks = {};

        /**
         * Expose whether this browser supports running the full DOMPurify.
         */
        DOMPurify.isSupported = typeof getParentNode === 'function' && implementation && typeof implementation.createHTMLDocument !== 'undefined' && documentMode !== 9;

        var MUSTACHE_EXPR$$1 = MUSTACHE_EXPR,
            ERB_EXPR$$1 = ERB_EXPR,
            DATA_ATTR$$1 = DATA_ATTR,
            ARIA_ATTR$$1 = ARIA_ATTR,
            IS_SCRIPT_OR_DATA$$1 = IS_SCRIPT_OR_DATA,
            ATTR_WHITESPACE$$1 = ATTR_WHITESPACE;
        var IS_ALLOWED_URI$$1 = IS_ALLOWED_URI;

        /**
         * We consider the elements and attributes below to be safe. Ideally
         * don't add any new ones but feel free to remove unwanted ones.
         */

        /* allowed element names */

        var ALLOWED_TAGS = null;
        var DEFAULT_ALLOWED_TAGS = addToSet({}, [].concat(_toConsumableArray$1(html), _toConsumableArray$1(svg), _toConsumableArray$1(svgFilters), _toConsumableArray$1(mathMl), _toConsumableArray$1(text)));

        /* Allowed attribute names */
        var ALLOWED_ATTR = null;
        var DEFAULT_ALLOWED_ATTR = addToSet({}, [].concat(_toConsumableArray$1(html$1), _toConsumableArray$1(svg$1), _toConsumableArray$1(mathMl$1), _toConsumableArray$1(xml)));

        /*
         * Configure how DOMPUrify should handle custom elements and their attributes as well as customized built-in elements.
         * @property {RegExp|Function|null} tagNameCheck one of [null, regexPattern, predicate]. Default: `null` (disallow any custom elements)
         * @property {RegExp|Function|null} attributeNameCheck one of [null, regexPattern, predicate]. Default: `null` (disallow any attributes not on the allow list)
         * @property {boolean} allowCustomizedBuiltInElements allow custom elements derived from built-ins if they pass CUSTOM_ELEMENT_HANDLING.tagNameCheck. Default: `false`.
         */
        var CUSTOM_ELEMENT_HANDLING = Object.seal(Object.create(null, {
          tagNameCheck: {
            writable: true,
            configurable: false,
            enumerable: true,
            value: null
          },
          attributeNameCheck: {
            writable: true,
            configurable: false,
            enumerable: true,
            value: null
          },
          allowCustomizedBuiltInElements: {
            writable: true,
            configurable: false,
            enumerable: true,
            value: false
          }
        }));

        /* Explicitly forbidden tags (overrides ALLOWED_TAGS/ADD_TAGS) */
        var FORBID_TAGS = null;

        /* Explicitly forbidden attributes (overrides ALLOWED_ATTR/ADD_ATTR) */
        var FORBID_ATTR = null;

        /* Decide if ARIA attributes are okay */
        var ALLOW_ARIA_ATTR = true;

        /* Decide if custom data attributes are okay */
        var ALLOW_DATA_ATTR = true;

        /* Decide if unknown protocols are okay */
        var ALLOW_UNKNOWN_PROTOCOLS = false;

        /* Output should be safe for common template engines.
         * This means, DOMPurify removes data attributes, mustaches and ERB
         */
        var SAFE_FOR_TEMPLATES = false;

        /* Decide if document with <html>... should be returned */
        var WHOLE_DOCUMENT = false;

        /* Track whether config is already set on this instance of DOMPurify. */
        var SET_CONFIG = false;

        /* Decide if all elements (e.g. style, script) must be children of
         * document.body. By default, browsers might move them to document.head */
        var FORCE_BODY = false;

        /* Decide if a DOM `HTMLBodyElement` should be returned, instead of a html
         * string (or a TrustedHTML object if Trusted Types are supported).
         * If `WHOLE_DOCUMENT` is enabled a `HTMLHtmlElement` will be returned instead
         */
        var RETURN_DOM = false;

        /* Decide if a DOM `DocumentFragment` should be returned, instead of a html
         * string  (or a TrustedHTML object if Trusted Types are supported) */
        var RETURN_DOM_FRAGMENT = false;

        /* Try to return a Trusted Type object instead of a string, return a string in
         * case Trusted Types are not supported  */
        var RETURN_TRUSTED_TYPE = false;

        /* Output should be free from DOM clobbering attacks? */
        var SANITIZE_DOM = true;

        /* Keep element content when removing element? */
        var KEEP_CONTENT = true;

        /* If a `Node` is passed to sanitize(), then performs sanitization in-place instead
         * of importing it into a new Document and returning a sanitized copy */
        var IN_PLACE = false;

        /* Allow usage of profiles like html, svg and mathMl */
        var USE_PROFILES = {};

        /* Tags to ignore content of when KEEP_CONTENT is true */
        var FORBID_CONTENTS = null;
        var DEFAULT_FORBID_CONTENTS = addToSet({}, ['annotation-xml', 'audio', 'colgroup', 'desc', 'foreignobject', 'head', 'iframe', 'math', 'mi', 'mn', 'mo', 'ms', 'mtext', 'noembed', 'noframes', 'noscript', 'plaintext', 'script', 'style', 'svg', 'template', 'thead', 'title', 'video', 'xmp']);

        /* Tags that are safe for data: URIs */
        var DATA_URI_TAGS = null;
        var DEFAULT_DATA_URI_TAGS = addToSet({}, ['audio', 'video', 'img', 'source', 'image', 'track']);

        /* Attributes safe for values like "javascript:" */
        var URI_SAFE_ATTRIBUTES = null;
        var DEFAULT_URI_SAFE_ATTRIBUTES = addToSet({}, ['alt', 'class', 'for', 'id', 'label', 'name', 'pattern', 'placeholder', 'role', 'summary', 'title', 'value', 'style', 'xmlns']);

        var MATHML_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
        var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
        var HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';
        /* Document namespace */
        var NAMESPACE = HTML_NAMESPACE;
        var IS_EMPTY_INPUT = false;

        /* Parsing of strict XHTML documents */
        var PARSER_MEDIA_TYPE = void 0;
        var SUPPORTED_PARSER_MEDIA_TYPES = ['application/xhtml+xml', 'text/html'];
        var DEFAULT_PARSER_MEDIA_TYPE = 'text/html';
        var transformCaseFunc = void 0;

        /* Keep a reference to config to pass to hooks */
        var CONFIG = null;

        /* Ideally, do not touch anything below this line */
        /* ______________________________________________ */

        var formElement = document.createElement('form');

        var isRegexOrFunction = function isRegexOrFunction(testValue) {
          return testValue instanceof RegExp || testValue instanceof Function;
        };

        /**
         * _parseConfig
         *
         * @param  {Object} cfg optional config literal
         */
        // eslint-disable-next-line complexity
        var _parseConfig = function _parseConfig(cfg) {
          if (CONFIG && CONFIG === cfg) {
            return;
          }

          /* Shield configuration object from tampering */
          if (!cfg || (typeof cfg === 'undefined' ? 'undefined' : _typeof(cfg)) !== 'object') {
            cfg = {};
          }

          /* Shield configuration object from prototype pollution */
          cfg = clone(cfg);

          /* Set configuration parameters */
          ALLOWED_TAGS = 'ALLOWED_TAGS' in cfg ? addToSet({}, cfg.ALLOWED_TAGS) : DEFAULT_ALLOWED_TAGS;
          ALLOWED_ATTR = 'ALLOWED_ATTR' in cfg ? addToSet({}, cfg.ALLOWED_ATTR) : DEFAULT_ALLOWED_ATTR;
          URI_SAFE_ATTRIBUTES = 'ADD_URI_SAFE_ATTR' in cfg ? addToSet(clone(DEFAULT_URI_SAFE_ATTRIBUTES), cfg.ADD_URI_SAFE_ATTR) : DEFAULT_URI_SAFE_ATTRIBUTES;
          DATA_URI_TAGS = 'ADD_DATA_URI_TAGS' in cfg ? addToSet(clone(DEFAULT_DATA_URI_TAGS), cfg.ADD_DATA_URI_TAGS) : DEFAULT_DATA_URI_TAGS;
          FORBID_CONTENTS = 'FORBID_CONTENTS' in cfg ? addToSet({}, cfg.FORBID_CONTENTS) : DEFAULT_FORBID_CONTENTS;
          FORBID_TAGS = 'FORBID_TAGS' in cfg ? addToSet({}, cfg.FORBID_TAGS) : {};
          FORBID_ATTR = 'FORBID_ATTR' in cfg ? addToSet({}, cfg.FORBID_ATTR) : {};
          USE_PROFILES = 'USE_PROFILES' in cfg ? cfg.USE_PROFILES : false;
          ALLOW_ARIA_ATTR = cfg.ALLOW_ARIA_ATTR !== false; // Default true
          ALLOW_DATA_ATTR = cfg.ALLOW_DATA_ATTR !== false; // Default true
          ALLOW_UNKNOWN_PROTOCOLS = cfg.ALLOW_UNKNOWN_PROTOCOLS || false; // Default false
          SAFE_FOR_TEMPLATES = cfg.SAFE_FOR_TEMPLATES || false; // Default false
          WHOLE_DOCUMENT = cfg.WHOLE_DOCUMENT || false; // Default false
          RETURN_DOM = cfg.RETURN_DOM || false; // Default false
          RETURN_DOM_FRAGMENT = cfg.RETURN_DOM_FRAGMENT || false; // Default false
          RETURN_TRUSTED_TYPE = cfg.RETURN_TRUSTED_TYPE || false; // Default false
          FORCE_BODY = cfg.FORCE_BODY || false; // Default false
          SANITIZE_DOM = cfg.SANITIZE_DOM !== false; // Default true
          KEEP_CONTENT = cfg.KEEP_CONTENT !== false; // Default true
          IN_PLACE = cfg.IN_PLACE || false; // Default false
          IS_ALLOWED_URI$$1 = cfg.ALLOWED_URI_REGEXP || IS_ALLOWED_URI$$1;
          NAMESPACE = cfg.NAMESPACE || HTML_NAMESPACE;
          if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck)) {
            CUSTOM_ELEMENT_HANDLING.tagNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck;
          }

          if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck)) {
            CUSTOM_ELEMENT_HANDLING.attributeNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck;
          }

          if (cfg.CUSTOM_ELEMENT_HANDLING && typeof cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements === 'boolean') {
            CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements = cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements;
          }

          PARSER_MEDIA_TYPE =
          // eslint-disable-next-line unicorn/prefer-includes
          SUPPORTED_PARSER_MEDIA_TYPES.indexOf(cfg.PARSER_MEDIA_TYPE) === -1 ? PARSER_MEDIA_TYPE = DEFAULT_PARSER_MEDIA_TYPE : PARSER_MEDIA_TYPE = cfg.PARSER_MEDIA_TYPE;

          // HTML tags and attributes are not case-sensitive, converting to lowercase. Keeping XHTML as is.
          transformCaseFunc = PARSER_MEDIA_TYPE === 'application/xhtml+xml' ? function (x) {
            return x;
          } : stringToLowerCase;

          if (SAFE_FOR_TEMPLATES) {
            ALLOW_DATA_ATTR = false;
          }

          if (RETURN_DOM_FRAGMENT) {
            RETURN_DOM = true;
          }

          /* Parse profile info */
          if (USE_PROFILES) {
            ALLOWED_TAGS = addToSet({}, [].concat(_toConsumableArray$1(text)));
            ALLOWED_ATTR = [];
            if (USE_PROFILES.html === true) {
              addToSet(ALLOWED_TAGS, html);
              addToSet(ALLOWED_ATTR, html$1);
            }

            if (USE_PROFILES.svg === true) {
              addToSet(ALLOWED_TAGS, svg);
              addToSet(ALLOWED_ATTR, svg$1);
              addToSet(ALLOWED_ATTR, xml);
            }

            if (USE_PROFILES.svgFilters === true) {
              addToSet(ALLOWED_TAGS, svgFilters);
              addToSet(ALLOWED_ATTR, svg$1);
              addToSet(ALLOWED_ATTR, xml);
            }

            if (USE_PROFILES.mathMl === true) {
              addToSet(ALLOWED_TAGS, mathMl);
              addToSet(ALLOWED_ATTR, mathMl$1);
              addToSet(ALLOWED_ATTR, xml);
            }
          }

          /* Merge configuration parameters */
          if (cfg.ADD_TAGS) {
            if (ALLOWED_TAGS === DEFAULT_ALLOWED_TAGS) {
              ALLOWED_TAGS = clone(ALLOWED_TAGS);
            }

            addToSet(ALLOWED_TAGS, cfg.ADD_TAGS);
          }

          if (cfg.ADD_ATTR) {
            if (ALLOWED_ATTR === DEFAULT_ALLOWED_ATTR) {
              ALLOWED_ATTR = clone(ALLOWED_ATTR);
            }

            addToSet(ALLOWED_ATTR, cfg.ADD_ATTR);
          }

          if (cfg.ADD_URI_SAFE_ATTR) {
            addToSet(URI_SAFE_ATTRIBUTES, cfg.ADD_URI_SAFE_ATTR);
          }

          if (cfg.FORBID_CONTENTS) {
            if (FORBID_CONTENTS === DEFAULT_FORBID_CONTENTS) {
              FORBID_CONTENTS = clone(FORBID_CONTENTS);
            }

            addToSet(FORBID_CONTENTS, cfg.FORBID_CONTENTS);
          }

          /* Add #text in case KEEP_CONTENT is set to true */
          if (KEEP_CONTENT) {
            ALLOWED_TAGS['#text'] = true;
          }

          /* Add html, head and body to ALLOWED_TAGS in case WHOLE_DOCUMENT is true */
          if (WHOLE_DOCUMENT) {
            addToSet(ALLOWED_TAGS, ['html', 'head', 'body']);
          }

          /* Add tbody to ALLOWED_TAGS in case tables are permitted, see #286, #365 */
          if (ALLOWED_TAGS.table) {
            addToSet(ALLOWED_TAGS, ['tbody']);
            delete FORBID_TAGS.tbody;
          }

          // Prevent further manipulation of configuration.
          // Not available in IE8, Safari 5, etc.
          if (freeze) {
            freeze(cfg);
          }

          CONFIG = cfg;
        };

        var MATHML_TEXT_INTEGRATION_POINTS = addToSet({}, ['mi', 'mo', 'mn', 'ms', 'mtext']);

        var HTML_INTEGRATION_POINTS = addToSet({}, ['foreignobject', 'desc', 'title', 'annotation-xml']);

        /* Keep track of all possible SVG and MathML tags
         * so that we can perform the namespace checks
         * correctly. */
        var ALL_SVG_TAGS = addToSet({}, svg);
        addToSet(ALL_SVG_TAGS, svgFilters);
        addToSet(ALL_SVG_TAGS, svgDisallowed);

        var ALL_MATHML_TAGS = addToSet({}, mathMl);
        addToSet(ALL_MATHML_TAGS, mathMlDisallowed);

        /**
         *
         *
         * @param  {Element} element a DOM element whose namespace is being checked
         * @returns {boolean} Return false if the element has a
         *  namespace that a spec-compliant parser would never
         *  return. Return true otherwise.
         */
        var _checkValidNamespace = function _checkValidNamespace(element) {
          var parent = getParentNode(element);

          // In JSDOM, if we're inside shadow DOM, then parentNode
          // can be null. We just simulate parent in this case.
          if (!parent || !parent.tagName) {
            parent = {
              namespaceURI: HTML_NAMESPACE,
              tagName: 'template'
            };
          }

          var tagName = stringToLowerCase(element.tagName);
          var parentTagName = stringToLowerCase(parent.tagName);

          if (element.namespaceURI === SVG_NAMESPACE) {
            // The only way to switch from HTML namespace to SVG
            // is via <svg>. If it happens via any other tag, then
            // it should be killed.
            if (parent.namespaceURI === HTML_NAMESPACE) {
              return tagName === 'svg';
            }

            // The only way to switch from MathML to SVG is via
            // svg if parent is either <annotation-xml> or MathML
            // text integration points.
            if (parent.namespaceURI === MATHML_NAMESPACE) {
              return tagName === 'svg' && (parentTagName === 'annotation-xml' || MATHML_TEXT_INTEGRATION_POINTS[parentTagName]);
            }

            // We only allow elements that are defined in SVG
            // spec. All others are disallowed in SVG namespace.
            return Boolean(ALL_SVG_TAGS[tagName]);
          }

          if (element.namespaceURI === MATHML_NAMESPACE) {
            // The only way to switch from HTML namespace to MathML
            // is via <math>. If it happens via any other tag, then
            // it should be killed.
            if (parent.namespaceURI === HTML_NAMESPACE) {
              return tagName === 'math';
            }

            // The only way to switch from SVG to MathML is via
            // <math> and HTML integration points
            if (parent.namespaceURI === SVG_NAMESPACE) {
              return tagName === 'math' && HTML_INTEGRATION_POINTS[parentTagName];
            }

            // We only allow elements that are defined in MathML
            // spec. All others are disallowed in MathML namespace.
            return Boolean(ALL_MATHML_TAGS[tagName]);
          }

          if (element.namespaceURI === HTML_NAMESPACE) {
            // The only way to switch from SVG to HTML is via
            // HTML integration points, and from MathML to HTML
            // is via MathML text integration points
            if (parent.namespaceURI === SVG_NAMESPACE && !HTML_INTEGRATION_POINTS[parentTagName]) {
              return false;
            }

            if (parent.namespaceURI === MATHML_NAMESPACE && !MATHML_TEXT_INTEGRATION_POINTS[parentTagName]) {
              return false;
            }

            // Certain elements are allowed in both SVG and HTML
            // namespace. We need to specify them explicitly
            // so that they don't get erronously deleted from
            // HTML namespace.
            var commonSvgAndHTMLElements = addToSet({}, ['title', 'style', 'font', 'a', 'script']);

            // We disallow tags that are specific for MathML
            // or SVG and should never appear in HTML namespace
            return !ALL_MATHML_TAGS[tagName] && (commonSvgAndHTMLElements[tagName] || !ALL_SVG_TAGS[tagName]);
          }

          // The code should never reach this place (this means
          // that the element somehow got namespace that is not
          // HTML, SVG or MathML). Return false just in case.
          return false;
        };

        /**
         * _forceRemove
         *
         * @param  {Node} node a DOM node
         */
        var _forceRemove = function _forceRemove(node) {
          arrayPush(DOMPurify.removed, { element: node });
          try {
            // eslint-disable-next-line unicorn/prefer-dom-node-remove
            node.parentNode.removeChild(node);
          } catch (_) {
            try {
              node.outerHTML = emptyHTML;
            } catch (_) {
              node.remove();
            }
          }
        };

        /**
         * _removeAttribute
         *
         * @param  {String} name an Attribute name
         * @param  {Node} node a DOM node
         */
        var _removeAttribute = function _removeAttribute(name, node) {
          try {
            arrayPush(DOMPurify.removed, {
              attribute: node.getAttributeNode(name),
              from: node
            });
          } catch (_) {
            arrayPush(DOMPurify.removed, {
              attribute: null,
              from: node
            });
          }

          node.removeAttribute(name);

          // We void attribute values for unremovable "is"" attributes
          if (name === 'is' && !ALLOWED_ATTR[name]) {
            if (RETURN_DOM || RETURN_DOM_FRAGMENT) {
              try {
                _forceRemove(node);
              } catch (_) {}
            } else {
              try {
                node.setAttribute(name, '');
              } catch (_) {}
            }
          }
        };

        /**
         * _initDocument
         *
         * @param  {String} dirty a string of dirty markup
         * @return {Document} a DOM, filled with the dirty markup
         */
        var _initDocument = function _initDocument(dirty) {
          /* Create a HTML document */
          var doc = void 0;
          var leadingWhitespace = void 0;

          if (FORCE_BODY) {
            dirty = '<remove></remove>' + dirty;
          } else {
            /* If FORCE_BODY isn't used, leading whitespace needs to be preserved manually */
            var matches = stringMatch(dirty, /^[\r\n\t ]+/);
            leadingWhitespace = matches && matches[0];
          }

          if (PARSER_MEDIA_TYPE === 'application/xhtml+xml') {
            // Root of XHTML doc must contain xmlns declaration (see https://www.w3.org/TR/xhtml1/normative.html#strict)
            dirty = '<html xmlns="http://www.w3.org/1999/xhtml"><head></head><body>' + dirty + '</body></html>';
          }

          var dirtyPayload = trustedTypesPolicy ? trustedTypesPolicy.createHTML(dirty) : dirty;
          /*
           * Use the DOMParser API by default, fallback later if needs be
           * DOMParser not work for svg when has multiple root element.
           */
          if (NAMESPACE === HTML_NAMESPACE) {
            try {
              doc = new DOMParser().parseFromString(dirtyPayload, PARSER_MEDIA_TYPE);
            } catch (_) {}
          }

          /* Use createHTMLDocument in case DOMParser is not available */
          if (!doc || !doc.documentElement) {
            doc = implementation.createDocument(NAMESPACE, 'template', null);
            try {
              doc.documentElement.innerHTML = IS_EMPTY_INPUT ? '' : dirtyPayload;
            } catch (_) {
              // Syntax error if dirtyPayload is invalid xml
            }
          }

          var body = doc.body || doc.documentElement;

          if (dirty && leadingWhitespace) {
            body.insertBefore(document.createTextNode(leadingWhitespace), body.childNodes[0] || null);
          }

          /* Work on whole document or just its body */
          if (NAMESPACE === HTML_NAMESPACE) {
            return getElementsByTagName.call(doc, WHOLE_DOCUMENT ? 'html' : 'body')[0];
          }

          return WHOLE_DOCUMENT ? doc.documentElement : body;
        };

        /**
         * _createIterator
         *
         * @param  {Document} root document/fragment to create iterator for
         * @return {Iterator} iterator instance
         */
        var _createIterator = function _createIterator(root) {
          return createNodeIterator.call(root.ownerDocument || root, root, NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT | NodeFilter.SHOW_TEXT, null, false);
        };

        /**
         * _isClobbered
         *
         * @param  {Node} elm element to check for clobbering attacks
         * @return {Boolean} true if clobbered, false if safe
         */
        var _isClobbered = function _isClobbered(elm) {
          return elm instanceof HTMLFormElement && (typeof elm.nodeName !== 'string' || typeof elm.textContent !== 'string' || typeof elm.removeChild !== 'function' || !(elm.attributes instanceof NamedNodeMap) || typeof elm.removeAttribute !== 'function' || typeof elm.setAttribute !== 'function' || typeof elm.namespaceURI !== 'string' || typeof elm.insertBefore !== 'function');
        };

        /**
         * _isNode
         *
         * @param  {Node} obj object to check whether it's a DOM node
         * @return {Boolean} true is object is a DOM node
         */
        var _isNode = function _isNode(object) {
          return (typeof Node === 'undefined' ? 'undefined' : _typeof(Node)) === 'object' ? object instanceof Node : object && (typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string';
        };

        /**
         * _executeHook
         * Execute user configurable hooks
         *
         * @param  {String} entryPoint  Name of the hook's entry point
         * @param  {Node} currentNode node to work on with the hook
         * @param  {Object} data additional hook parameters
         */
        var _executeHook = function _executeHook(entryPoint, currentNode, data) {
          if (!hooks[entryPoint]) {
            return;
          }

          arrayForEach(hooks[entryPoint], function (hook) {
            hook.call(DOMPurify, currentNode, data, CONFIG);
          });
        };

        /**
         * _sanitizeElements
         *
         * @protect nodeName
         * @protect textContent
         * @protect removeChild
         *
         * @param   {Node} currentNode to check for permission to exist
         * @return  {Boolean} true if node was killed, false if left alive
         */
        var _sanitizeElements = function _sanitizeElements(currentNode) {
          var content = void 0;

          /* Execute a hook if present */
          _executeHook('beforeSanitizeElements', currentNode, null);

          /* Check if element is clobbered or can clobber */
          if (_isClobbered(currentNode)) {
            _forceRemove(currentNode);
            return true;
          }

          /* Check if tagname contains Unicode */
          if (stringMatch(currentNode.nodeName, /[\u0080-\uFFFF]/)) {
            _forceRemove(currentNode);
            return true;
          }

          /* Now let's check the element's type and name */
          var tagName = transformCaseFunc(currentNode.nodeName);

          /* Execute a hook if present */
          _executeHook('uponSanitizeElement', currentNode, {
            tagName: tagName,
            allowedTags: ALLOWED_TAGS
          });

          /* Detect mXSS attempts abusing namespace confusion */
          if (!_isNode(currentNode.firstElementChild) && (!_isNode(currentNode.content) || !_isNode(currentNode.content.firstElementChild)) && regExpTest(/<[/\w]/g, currentNode.innerHTML) && regExpTest(/<[/\w]/g, currentNode.textContent)) {
            _forceRemove(currentNode);
            return true;
          }

          /* Mitigate a problem with templates inside select */
          if (tagName === 'select' && regExpTest(/<template/i, currentNode.innerHTML)) {
            _forceRemove(currentNode);
            return true;
          }

          /* Remove element if anything forbids its presence */
          if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {
            /* Keep content except for bad-listed elements */
            if (KEEP_CONTENT && !FORBID_CONTENTS[tagName]) {
              var parentNode = getParentNode(currentNode) || currentNode.parentNode;
              var childNodes = getChildNodes(currentNode) || currentNode.childNodes;

              if (childNodes && parentNode) {
                var childCount = childNodes.length;

                for (var i = childCount - 1; i >= 0; --i) {
                  parentNode.insertBefore(cloneNode(childNodes[i], true), getNextSibling(currentNode));
                }
              }
            }

            if (!FORBID_TAGS[tagName] && _basicCustomElementTest(tagName)) {
              if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, tagName)) return false;
              if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(tagName)) return false;
            }

            _forceRemove(currentNode);
            return true;
          }

          /* Check whether element has a valid namespace */
          if (currentNode instanceof Element && !_checkValidNamespace(currentNode)) {
            _forceRemove(currentNode);
            return true;
          }

          if ((tagName === 'noscript' || tagName === 'noembed') && regExpTest(/<\/no(script|embed)/i, currentNode.innerHTML)) {
            _forceRemove(currentNode);
            return true;
          }

          /* Sanitize element content to be template-safe */
          if (SAFE_FOR_TEMPLATES && currentNode.nodeType === 3) {
            /* Get the element's text content */
            content = currentNode.textContent;
            content = stringReplace(content, MUSTACHE_EXPR$$1, ' ');
            content = stringReplace(content, ERB_EXPR$$1, ' ');
            if (currentNode.textContent !== content) {
              arrayPush(DOMPurify.removed, { element: currentNode.cloneNode() });
              currentNode.textContent = content;
            }
          }

          /* Execute a hook if present */
          _executeHook('afterSanitizeElements', currentNode, null);

          return false;
        };

        /**
         * _isValidAttribute
         *
         * @param  {string} lcTag Lowercase tag name of containing element.
         * @param  {string} lcName Lowercase attribute name.
         * @param  {string} value Attribute value.
         * @return {Boolean} Returns true if `value` is valid, otherwise false.
         */
        // eslint-disable-next-line complexity
        var _isValidAttribute = function _isValidAttribute(lcTag, lcName, value) {
          /* Make sure attribute cannot clobber */
          if (SANITIZE_DOM && (lcName === 'id' || lcName === 'name') && (value in document || value in formElement)) {
            return false;
          }

          /* Allow valid data-* attributes: At least one character after "-"
              (https://html.spec.whatwg.org/multipage/dom.html#embedding-custom-non-visible-data-with-the-data-*-attributes)
              XML-compatible (https://html.spec.whatwg.org/multipage/infrastructure.html#xml-compatible and http://www.w3.org/TR/xml/#d0e804)
              We don't need to check the value; it's always URI safe. */
          if (ALLOW_DATA_ATTR && !FORBID_ATTR[lcName] && regExpTest(DATA_ATTR$$1, lcName)) ; else if (ALLOW_ARIA_ATTR && regExpTest(ARIA_ATTR$$1, lcName)) ; else if (!ALLOWED_ATTR[lcName] || FORBID_ATTR[lcName]) {
            if (
            // First condition does a very basic check if a) it's basically a valid custom element tagname AND
            // b) if the tagName passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck
            // and c) if the attribute name passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.attributeNameCheck
            _basicCustomElementTest(lcTag) && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, lcTag) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(lcTag)) && (CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.attributeNameCheck, lcName) || CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.attributeNameCheck(lcName)) ||
            // Alternative, second condition checks if it's an `is`-attribute, AND
            // the value passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck
            lcName === 'is' && CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, value) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(value))) ; else {
              return false;
            }
            /* Check value is safe. First, is attr inert? If so, is safe */
          } else if (URI_SAFE_ATTRIBUTES[lcName]) ; else if (regExpTest(IS_ALLOWED_URI$$1, stringReplace(value, ATTR_WHITESPACE$$1, ''))) ; else if ((lcName === 'src' || lcName === 'xlink:href' || lcName === 'href') && lcTag !== 'script' && stringIndexOf(value, 'data:') === 0 && DATA_URI_TAGS[lcTag]) ; else if (ALLOW_UNKNOWN_PROTOCOLS && !regExpTest(IS_SCRIPT_OR_DATA$$1, stringReplace(value, ATTR_WHITESPACE$$1, ''))) ; else if (!value) ; else {
            return false;
          }

          return true;
        };

        /**
         * _basicCustomElementCheck
         * checks if at least one dash is included in tagName, and it's not the first char
         * for more sophisticated checking see https://github.com/sindresorhus/validate-element-name
         * @param {string} tagName name of the tag of the node to sanitize
         */
        var _basicCustomElementTest = function _basicCustomElementTest(tagName) {
          return tagName.indexOf('-') > 0;
        };

        /**
         * _sanitizeAttributes
         *
         * @protect attributes
         * @protect nodeName
         * @protect removeAttribute
         * @protect setAttribute
         *
         * @param  {Node} currentNode to sanitize
         */
        var _sanitizeAttributes = function _sanitizeAttributes(currentNode) {
          var attr = void 0;
          var value = void 0;
          var lcName = void 0;
          var l = void 0;
          /* Execute a hook if present */
          _executeHook('beforeSanitizeAttributes', currentNode, null);

          var attributes = currentNode.attributes;

          /* Check if we have attributes; if not we might have a text node */

          if (!attributes) {
            return;
          }

          var hookEvent = {
            attrName: '',
            attrValue: '',
            keepAttr: true,
            allowedAttributes: ALLOWED_ATTR
          };
          l = attributes.length;

          /* Go backwards over all attributes; safely remove bad ones */
          while (l--) {
            attr = attributes[l];
            var _attr = attr,
                name = _attr.name,
                namespaceURI = _attr.namespaceURI;

            value = stringTrim(attr.value);
            lcName = transformCaseFunc(name);

            /* Execute a hook if present */
            hookEvent.attrName = lcName;
            hookEvent.attrValue = value;
            hookEvent.keepAttr = true;
            hookEvent.forceKeepAttr = undefined; // Allows developers to see this is a property they can set
            _executeHook('uponSanitizeAttribute', currentNode, hookEvent);
            value = hookEvent.attrValue;
            /* Did the hooks approve of the attribute? */
            if (hookEvent.forceKeepAttr) {
              continue;
            }

            /* Remove attribute */
            _removeAttribute(name, currentNode);

            /* Did the hooks approve of the attribute? */
            if (!hookEvent.keepAttr) {
              continue;
            }

            /* Work around a security issue in jQuery 3.0 */
            if (regExpTest(/\/>/i, value)) {
              _removeAttribute(name, currentNode);
              continue;
            }

            /* Sanitize attribute content to be template-safe */
            if (SAFE_FOR_TEMPLATES) {
              value = stringReplace(value, MUSTACHE_EXPR$$1, ' ');
              value = stringReplace(value, ERB_EXPR$$1, ' ');
            }

            /* Is `value` valid for this attribute? */
            var lcTag = transformCaseFunc(currentNode.nodeName);
            if (!_isValidAttribute(lcTag, lcName, value)) {
              continue;
            }

            /* Handle invalid data-* attribute set by try-catching it */
            try {
              if (namespaceURI) {
                currentNode.setAttributeNS(namespaceURI, name, value);
              } else {
                /* Fallback to setAttribute() for browser-unrecognized namespaces e.g. "x-schema". */
                currentNode.setAttribute(name, value);
              }

              arrayPop(DOMPurify.removed);
            } catch (_) {}
          }

          /* Execute a hook if present */
          _executeHook('afterSanitizeAttributes', currentNode, null);
        };

        /**
         * _sanitizeShadowDOM
         *
         * @param  {DocumentFragment} fragment to iterate over recursively
         */
        var _sanitizeShadowDOM = function _sanitizeShadowDOM(fragment) {
          var shadowNode = void 0;
          var shadowIterator = _createIterator(fragment);

          /* Execute a hook if present */
          _executeHook('beforeSanitizeShadowDOM', fragment, null);

          while (shadowNode = shadowIterator.nextNode()) {
            /* Execute a hook if present */
            _executeHook('uponSanitizeShadowNode', shadowNode, null);

            /* Sanitize tags and elements */
            if (_sanitizeElements(shadowNode)) {
              continue;
            }

            /* Deep shadow DOM detected */
            if (shadowNode.content instanceof DocumentFragment) {
              _sanitizeShadowDOM(shadowNode.content);
            }

            /* Check attributes, sanitize if necessary */
            _sanitizeAttributes(shadowNode);
          }

          /* Execute a hook if present */
          _executeHook('afterSanitizeShadowDOM', fragment, null);
        };

        /**
         * Sanitize
         * Public method providing core sanitation functionality
         *
         * @param {String|Node} dirty string or DOM node
         * @param {Object} configuration object
         */
        // eslint-disable-next-line complexity
        DOMPurify.sanitize = function (dirty, cfg) {
          var body = void 0;
          var importedNode = void 0;
          var currentNode = void 0;
          var oldNode = void 0;
          var returnNode = void 0;
          /* Make sure we have a string to sanitize.
            DO NOT return early, as this will return the wrong type if
            the user has requested a DOM object rather than a string */
          IS_EMPTY_INPUT = !dirty;
          if (IS_EMPTY_INPUT) {
            dirty = '<!-->';
          }

          /* Stringify, in case dirty is an object */
          if (typeof dirty !== 'string' && !_isNode(dirty)) {
            // eslint-disable-next-line no-negated-condition
            if (typeof dirty.toString !== 'function') {
              throw typeErrorCreate('toString is not a function');
            } else {
              dirty = dirty.toString();
              if (typeof dirty !== 'string') {
                throw typeErrorCreate('dirty is not a string, aborting');
              }
            }
          }

          /* Check we can run. Otherwise fall back or ignore */
          if (!DOMPurify.isSupported) {
            if (_typeof(window.toStaticHTML) === 'object' || typeof window.toStaticHTML === 'function') {
              if (typeof dirty === 'string') {
                return window.toStaticHTML(dirty);
              }

              if (_isNode(dirty)) {
                return window.toStaticHTML(dirty.outerHTML);
              }
            }

            return dirty;
          }

          /* Assign config vars */
          if (!SET_CONFIG) {
            _parseConfig(cfg);
          }

          /* Clean up removed elements */
          DOMPurify.removed = [];

          /* Check if dirty is correctly typed for IN_PLACE */
          if (typeof dirty === 'string') {
            IN_PLACE = false;
          }

          if (IN_PLACE) ; else if (dirty instanceof Node) {
            /* If dirty is a DOM element, append to an empty document to avoid
               elements being stripped by the parser */
            body = _initDocument('<!---->');
            importedNode = body.ownerDocument.importNode(dirty, true);
            if (importedNode.nodeType === 1 && importedNode.nodeName === 'BODY') {
              /* Node is already a body, use as is */
              body = importedNode;
            } else if (importedNode.nodeName === 'HTML') {
              body = importedNode;
            } else {
              // eslint-disable-next-line unicorn/prefer-dom-node-append
              body.appendChild(importedNode);
            }
          } else {
            /* Exit directly if we have nothing to do */
            if (!RETURN_DOM && !SAFE_FOR_TEMPLATES && !WHOLE_DOCUMENT &&
            // eslint-disable-next-line unicorn/prefer-includes
            dirty.indexOf('<') === -1) {
              return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(dirty) : dirty;
            }

            /* Initialize the document to work on */
            body = _initDocument(dirty);

            /* Check we have a DOM node from the data */
            if (!body) {
              return RETURN_DOM ? null : emptyHTML;
            }
          }

          /* Remove first element node (ours) if FORCE_BODY is set */
          if (body && FORCE_BODY) {
            _forceRemove(body.firstChild);
          }

          /* Get node iterator */
          var nodeIterator = _createIterator(IN_PLACE ? dirty : body);

          /* Now start iterating over the created document */
          while (currentNode = nodeIterator.nextNode()) {
            /* Fix IE's strange behavior with manipulated textNodes #89 */
            if (currentNode.nodeType === 3 && currentNode === oldNode) {
              continue;
            }

            /* Sanitize tags and elements */
            if (_sanitizeElements(currentNode)) {
              continue;
            }

            /* Shadow DOM detected, sanitize it */
            if (currentNode.content instanceof DocumentFragment) {
              _sanitizeShadowDOM(currentNode.content);
            }

            /* Check attributes, sanitize if necessary */
            _sanitizeAttributes(currentNode);

            oldNode = currentNode;
          }

          oldNode = null;

          /* If we sanitized `dirty` in-place, return it. */
          if (IN_PLACE) {
            return dirty;
          }

          /* Return sanitized string or DOM */
          if (RETURN_DOM) {
            if (RETURN_DOM_FRAGMENT) {
              returnNode = createDocumentFragment.call(body.ownerDocument);

              while (body.firstChild) {
                // eslint-disable-next-line unicorn/prefer-dom-node-append
                returnNode.appendChild(body.firstChild);
              }
            } else {
              returnNode = body;
            }

            if (ALLOWED_ATTR.shadowroot) {
              /*
                AdoptNode() is not used because internal state is not reset
                (e.g. the past names map of a HTMLFormElement), this is safe
                in theory but we would rather not risk another attack vector.
                The state that is cloned by importNode() is explicitly defined
                by the specs.
              */
              returnNode = importNode.call(originalDocument, returnNode, true);
            }

            return returnNode;
          }

          var serializedHTML = WHOLE_DOCUMENT ? body.outerHTML : body.innerHTML;

          /* Sanitize final string template-safe */
          if (SAFE_FOR_TEMPLATES) {
            serializedHTML = stringReplace(serializedHTML, MUSTACHE_EXPR$$1, ' ');
            serializedHTML = stringReplace(serializedHTML, ERB_EXPR$$1, ' ');
          }

          return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(serializedHTML) : serializedHTML;
        };

        /**
         * Public method to set the configuration once
         * setConfig
         *
         * @param {Object} cfg configuration object
         */
        DOMPurify.setConfig = function (cfg) {
          _parseConfig(cfg);
          SET_CONFIG = true;
        };

        /**
         * Public method to remove the configuration
         * clearConfig
         *
         */
        DOMPurify.clearConfig = function () {
          CONFIG = null;
          SET_CONFIG = false;
        };

        /**
         * Public method to check if an attribute value is valid.
         * Uses last set config, if any. Otherwise, uses config defaults.
         * isValidAttribute
         *
         * @param  {string} tag Tag name of containing element.
         * @param  {string} attr Attribute name.
         * @param  {string} value Attribute value.
         * @return {Boolean} Returns true if `value` is valid. Otherwise, returns false.
         */
        DOMPurify.isValidAttribute = function (tag, attr, value) {
          /* Initialize shared config vars if necessary. */
          if (!CONFIG) {
            _parseConfig({});
          }

          var lcTag = transformCaseFunc(tag);
          var lcName = transformCaseFunc(attr);
          return _isValidAttribute(lcTag, lcName, value);
        };

        /**
         * AddHook
         * Public method to add DOMPurify hooks
         *
         * @param {String} entryPoint entry point for the hook to add
         * @param {Function} hookFunction function to execute
         */
        DOMPurify.addHook = function (entryPoint, hookFunction) {
          if (typeof hookFunction !== 'function') {
            return;
          }

          hooks[entryPoint] = hooks[entryPoint] || [];
          arrayPush(hooks[entryPoint], hookFunction);
        };

        /**
         * RemoveHook
         * Public method to remove a DOMPurify hook at a given entryPoint
         * (pops it from the stack of hooks if more are present)
         *
         * @param {String} entryPoint entry point for the hook to remove
         */
        DOMPurify.removeHook = function (entryPoint) {
          if (hooks[entryPoint]) {
            arrayPop(hooks[entryPoint]);
          }
        };

        /**
         * RemoveHooks
         * Public method to remove all DOMPurify hooks at a given entryPoint
         *
         * @param  {String} entryPoint entry point for the hooks to remove
         */
        DOMPurify.removeHooks = function (entryPoint) {
          if (hooks[entryPoint]) {
            hooks[entryPoint] = [];
          }
        };

        /**
         * RemoveAllHooks
         * Public method to remove all DOMPurify hooks
         *
         */
        DOMPurify.removeAllHooks = function () {
          hooks = {};
        };

        return DOMPurify;
      }

      var purify = createDOMPurify();

      return purify;

    }));

    }(purify));

    var _interopRequireDefault$d = interopRequireDefault.exports;

    Object.defineProperty(SanitizedHTML$1, "__esModule", {
      value: true
    });
    SanitizedHTML$1.default = SanitizedHTML;
    SanitizedHTML$1.isHTML = isHTML;

    var _react$2 = _interopRequireDefault$d(React__default["default"]);

    var _escapeHtml = _interopRequireDefault$d(escapeHtml_1);

    var _dompurify = _interopRequireDefault$d(purify.exports);

    // source https://github.com/sindresorhus/html-tags/blob/master/html-tags.json
    // with some random uncommon ones removed. note: we just use this to run the content
    // through dompurify without escaping if we see an htmlTag from this list
    // otherwise we escape angle brackets and things prematurely because it might be
    // something like <TRA> in VCF. Ref #657
    var htmlTags = ['a', 'b', 'br', 'code', 'div', 'em', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'i', 'img', 'li', 'p', 'pre', 'span', 'small', 'strong', 'table', 'tbody', 'td', 'tfoot', 'th', 'thead', 'tr', 'u', 'ul']; // adapted from is-html https://github.com/sindresorhus/is-html/blob/master/index.js

    var full = new RegExp(htmlTags.map(function (tag) {
      return "<".concat(tag, "\\b[^>]*>");
    }).join('|'), 'i');

    function isHTML(str) {
      return full.test(str);
    }

    function SanitizedHTML(_ref) {
      var html = _ref.html;
      var value = isHTML(html) ? html : (0, _escapeHtml.default)(html); // eslint-disable-next-line react/no-danger

      return /*#__PURE__*/_react$2.default.createElement("div", {
        dangerouslySetInnerHTML: {
          __html: _dompurify.default.sanitize(value)
        }
      });
    }

    (function (exports) {

    var _interopRequireDefault = interopRequireDefault.exports;

    var _typeof = _typeof$e.exports;

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _exportNames = {
      LogoFull: true,
      Logomark: true,
      App: true,
      FileSelector: true,
      PrerenderedCanvas: true,
      ResizeHandle: true,
      EditableTypography: true,
      FactoryResetDialog: true,
      Tooltip: true,
      FatalErrorDialog: true,
      Menu: true,
      SanitizedHTML: true
    };
    Object.defineProperty(exports, "App", {
      enumerable: true,
      get: function get() {
        return _App.default;
      }
    });
    Object.defineProperty(exports, "EditableTypography", {
      enumerable: true,
      get: function get() {
        return _EditableTypography.default;
      }
    });
    Object.defineProperty(exports, "FactoryResetDialog", {
      enumerable: true,
      get: function get() {
        return _FactoryResetDialog.default;
      }
    });
    Object.defineProperty(exports, "FatalErrorDialog", {
      enumerable: true,
      get: function get() {
        return _FatalErrorDialog.default;
      }
    });
    Object.defineProperty(exports, "FileSelector", {
      enumerable: true,
      get: function get() {
        return _FileSelector.default;
      }
    });
    Object.defineProperty(exports, "LogoFull", {
      enumerable: true,
      get: function get() {
        return _Logo.LogoFull;
      }
    });
    Object.defineProperty(exports, "Logomark", {
      enumerable: true,
      get: function get() {
        return _Logo.Logomark;
      }
    });
    Object.defineProperty(exports, "Menu", {
      enumerable: true,
      get: function get() {
        return _Menu.default;
      }
    });
    Object.defineProperty(exports, "PrerenderedCanvas", {
      enumerable: true,
      get: function get() {
        return _PrerenderedCanvas.default;
      }
    });
    Object.defineProperty(exports, "ResizeHandle", {
      enumerable: true,
      get: function get() {
        return _ResizeHandle.default;
      }
    });
    Object.defineProperty(exports, "SanitizedHTML", {
      enumerable: true,
      get: function get() {
        return _SanitizedHTML.default;
      }
    });
    Object.defineProperty(exports, "Tooltip", {
      enumerable: true,
      get: function get() {
        return _Tooltip.default;
      }
    });

    var _theme = theme;

    Object.keys(_theme).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _theme[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
          return _theme[key];
        }
      });
    });

    var _Logo = Logo$1;

    var _App = _interopRequireDefault(App$1);

    var _FileSelector = _interopRequireDefault(FileSelector$2);

    var _PrerenderedCanvas = _interopRequireDefault(PrerenderedCanvas$1);

    var _ResizeHandle = _interopRequireDefault(ResizeHandle$1);

    var _EditableTypography = _interopRequireDefault(EditableTypography$1);

    var _FactoryResetDialog = _interopRequireDefault(FactoryResetDialog);

    var _Tooltip = _interopRequireDefault(Tooltip$1);

    var _FatalErrorDialog = _interopRequireDefault(FatalErrorDialog$1);

    var _Menu = _interopRequireWildcard(Menu$2);

    Object.keys(_Menu).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      if (key in exports && exports[key] === _Menu[key]) return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
          return _Menu[key];
        }
      });
    });

    var _SanitizedHTML = _interopRequireDefault(SanitizedHTML$1);

    function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

    function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
    }(ui$1));

    var smallMSA = "CLUSTAL O(1.2.3) multiple sequence alignment\nUniProt/Swiss-Prot|P26898|IL2RA_SHEEP      MEPSLLMWRFFVFIVVPGCVTEACHDDPPSLRNA----------MFKVLRYE----VGTM\nUniProt/Swiss-Prot|P01590|IL2RA_MOUSE      MEPRLLMLGFLSLTIVPSCRAELCLYDPPEVPNA----------TFKALSYK----NGTI\nUniProt/Swiss-Prot|P41690|IL2RA_FELCA      MEPSLLLWGILTFVVVHGHVTELCDENPPDIQHA----------TFKALTYK----TGTM\nUniProt/Swiss-Prot|P01589|IL2RA_HUMAN      MDSYLLMWGLLTFIMVPGCQAELCDDDPPEIPHA----------TFKAMAYK----EGTM\nUniProt/Swiss-Prot|Q5MNY4|IL2RA_MACMU      MDPYLLMWGLLTFITVPGCQAELCDDDPPKITHA----------TFKAVAYK----EGTM\nUniProt/Swiss-Prot|Q95118|IL2RG_BOVIN      -----------------------------------LLMWGLLT-----------------\nUniProt/Swiss-Prot|P40321|IL2RG_CANFA      MLKPPLPLRSLLFLQLSLLGVGLNSTVPMPNGNEDIT------PDFFLTATPSETLSVSS\nUniProt/Swiss-Prot|P26896|IL2RB_RAT        MATVDLSWRLPLYILLLLLATT--------------------------------WVSAAV\nUniProt/Swiss-Prot|Q8BZM1|GLMN_MOUSE       PLPLRSLLFLQLPLLGVGLNP------------------PLPLRSLLFLQLPLLGVGLNP\nUniProt/Swiss-Prot|P36835|IL2_CAPHI        -----------LLGVGLNPKFLTP------------------------------------\nUniProt/Swiss-Prot|Q7JFM4|IL2_AOTVO        MLKPPLPLRSLLFLQLPLLGVGLNPKFLTPSGNEDIGGKPGTGGDFFLTSTPAGTLDVST\nUniProt/Swiss-Prot|Q29416|IL2_CANFA        --------------LFLQLSLLG-------------------------------------\n";
    var smallMSAOnly = "CLUSTAL O(1.2.4) multiple sequence alignment\n\n\nsp|P69905|HBA_HUMAN       MVLSPADKTNVKAAWGKVGAHAGEYGAEALERMFLSFPTTKTYFPHFDLSHGSAQVKGHG\t60\nsp|P01942|HBA_MOUSE       MVLSGEDKSNIKAAWGKIGGHGAEYGAEALERMFASFPTTKTYFPHFDVSHGSAQVKGHG\t60\nsp|P13786|HBAZ_CAPHI      MSLTRTERTIILSLWSKISTQADVIGTETLERLFSCYPQAKTYFPHFDLHSGSAQLRAHG\t60\n                          * *:  ::: : : *.*:. :.   *:*:***:* .:* :********:  ****::.**\n\nsp|P69905|HBA_HUMAN       KKVADALTNAVAHVDDMPNALSALSDLHAHKLRVDPVNFKLLSHCLLVTLAAHLPAEFTP\t120\nsp|P01942|HBA_MOUSE       KKVADALASAAGHLDDLPGALSALSDLHAHKLRVDPVNFKLLSHCLLVTLASHHPADFTP\t120\nsp|P13786|HBAZ_CAPHI      SKVVAAVGDAVKSIDNVTSALSKLSELHAYVLRVDPVNFKFLSHCLLVTLASHFPADFTA\t120\n                          .**. *: .*.  :*:: .*** **:***: *********:**********:* **:**\n\nsp|P69905|HBA_HUMAN       AVHASLDKFLASVSTVLTSKYR\t142\nsp|P01942|HBA_MOUSE       AVHASLDKFLASVSTVLTSKYR\t142\nsp|P13786|HBAZ_CAPHI      DAHAAWDKFLSIVSGVLTEKYR\t142\n                           .**: ****: ** ***.***";
    var smallTree = '(((UniProt/Swiss-Prot|P26898|IL2RA_SHEEP:0.24036,(UniProt/Swiss-Prot|P41690|IL2RA_FELCA:0.17737,(UniProt/Swiss-Prot|P01589|IL2RA_HUMAN:0.03906,UniProt/Swiss-Prot|Q5MNY4|IL2RA_MACMU:0.03787):0.13033):0.04964):0.02189,UniProt/Swiss-Prot|P01590|IL2RA_MOUSE:0.23072):0.06814,(((UniProt/Swiss-Prot|Q95118|IL2RG_BOVIN:0.09600,UniProt/Swiss-Prot|P40321|IL2RG_CANFA:0.09845):0.25333,UniProt/Swiss-Prot|Q29416|IL2_CANFA:-0.35055):0.10231,(UniProt/Swiss-Prot|P26896|IL2RB_RAT:0.33631,UniProt/Swiss-Prot|Q7JFM4|IL2_AOTVO:-0.33631):0.10166):0.01607,(UniProt/Swiss-Prot|Q8BZM1|GLMN_MOUSE:0.32378,UniProt/Swiss-Prot|P36835|IL2_CAPHI:-0.32378):0.09999)';

    var ListItem = function (_a) {
        var onClick = _a.onClick, model = _a.model, children = _a.children;
        return (React__default["default"].createElement("li", null,
            React__default["default"].createElement(Link$1, { onClick: function (event) {
                    model.setError(undefined);
                    event.preventDefault();
                    onClick();
                }, href: "#" },
                React__default["default"].createElement(Typography$2, null, children))));
    };
    var ImportForm = observer(function (_a) {
        var model = _a.model;
        var _b = React$i.useState(), msaFile = _b[0], setMsaFile = _b[1];
        var _c = React$i.useState(), treeFile = _c[0], setTreeFile = _c[1];
        var error = model.error;
        return (React__default["default"].createElement(Container$1, null,
            React__default["default"].createElement("div", { style: { width: '50%' } },
                error ? (React__default["default"].createElement("div", { style: { padding: 20 } },
                    React__default["default"].createElement(Typography$2, { color: "error" },
                        "Error: ", "".concat(error)))) : null,
                React__default["default"].createElement(Typography$2, null, "Open an MSA file (stockholm or clustal format) and/or a tree file (newick format)."),
                React__default["default"].createElement(Typography$2, { color: "error" }, "Note: you can open up just an MSA or just a tree, both are not required. Some MSA files e.g. stockholm format have an embedded tree also and this is fine, and opening a separate tree file is not required.")),
            React__default["default"].createElement(Grid$1, { container: true, spacing: 10, justifyContent: "center", alignItems: "center" },
                React__default["default"].createElement(Grid$1, { item: true },
                    React__default["default"].createElement(Typography$2, null, "MSA file or URL"),
                    React__default["default"].createElement(ui$1.FileSelector, { location: msaFile, setLocation: setMsaFile }),
                    React__default["default"].createElement(Typography$2, null, "Tree file or URL"),
                    React__default["default"].createElement(ui$1.FileSelector, { location: treeFile, setLocation: setTreeFile })),
                React__default["default"].createElement(Grid$1, { item: true },
                    React__default["default"].createElement(Button$2, { onClick: function () {
                            model.setError(undefined);
                            if (msaFile) {
                                model.setMSAFilehandle(msaFile);
                            }
                            if (treeFile) {
                                model.setTreeFilehandle(treeFile);
                            }
                        }, variant: "contained", color: "primary", disabled: !msaFile && !treeFile }, "Open")),
                React__default["default"].createElement(Grid$1, { item: true },
                    React__default["default"].createElement(Typography$2, null, "Examples"),
                    React__default["default"].createElement("ul", null,
                        React__default["default"].createElement(ListItem, { model: model, onClick: function () {
                                model.setTreeFilehandle({
                                    uri: 'https://jbrowse.org/genomes/newick_trees/sarscov2phylo.pub.ft.nh',
                                    locationType: 'UriLocation',
                                });
                            } }, "230k COVID-19 samples (tree only)"),
                        React__default["default"].createElement(ListItem, { model: model, onClick: function () {
                                model.setData({ msa: smallMSA, tree: smallTree });
                            } }, "Small protein MSA+tree"),
                        React__default["default"].createElement(ListItem, { model: model, onClick: function () {
                                model.setData({ msa: smallMSAOnly });
                            } }, "Small MSA only"),
                        React__default["default"].createElement(ListItem, { model: model, onClick: function () {
                                model.setMSAFilehandle({
                                    uri: 'https://ihh.github.io/abrowse/build/pfam-cov2.stock',
                                    locationType: 'UriLocation',
                                });
                            } }, "PFAM SARS-CoV2 multi-stockholm"),
                        React__default["default"].createElement(ListItem, { model: model, onClick: function () {
                                model.setMSAFilehandle({
                                    uri: 'https://jbrowse.org/genomes/multiple_sequence_alignments/Lysine.stock',
                                    locationType: 'UriLocation',
                                });
                            } }, "Lysine stockholm file"),
                        React__default["default"].createElement(ListItem, { model: model, onClick: function () {
                                model.setMSAFilehandle({
                                    uri: 'https://jbrowse.org/genomes/multiple_sequence_alignments/PF01601_full.txt',
                                    locationType: 'UriLocation',
                                });
                            } }, "PF01601 stockholm file (SARS-CoV2 spike protein)"),
                        React__default["default"].createElement(ListItem, { model: model, onClick: function () {
                                model.setMSAFilehandle({
                                    uri: 'https://jbrowse.org/genomes/multiple_sequence_alignments/europe_covid.fa',
                                    locationType: 'UriLocation',
                                });
                            } }, "Europe COVID full genomes (LR883044.1 and 199 other sequences)"),
                        React__default["default"].createElement(ListItem, { model: model, onClick: function () {
                                transaction(function () {
                                    model.setMSAFilehandle({
                                        uri: 'https://jbrowse.org/genomes/multiple_sequence_alignments/rhv_test-only.aligned_with_mafft_auto.fa',
                                        locationType: 'UriLocation',
                                    });
                                    model.setTreeFilehandle({
                                        uri: 'https://jbrowse.org/genomes/multiple_sequence_alignments/rhv_test-only.aligned_with_mafft_auto.nh',
                                        locationType: 'UriLocation',
                                    });
                                });
                            } }, "MAFFT+VeryFastTree(17.9k samples)"))))));
    });

    var Assignment = {};

    var _interopRequireDefault$c = interopRequireDefault.exports;

    var _interopRequireWildcard$7 = interopRequireWildcard.exports;

    Object.defineProperty(Assignment, "__esModule", {
      value: true
    });
    var default_1$5 = Assignment.default = void 0;

    var React$5 = _interopRequireWildcard$7(React__default["default"]);

    var _createSvgIcon$5 = _interopRequireDefault$c(createSvgIcon);

    var _default$7 = (0, _createSvgIcon$5.default)( /*#__PURE__*/React$5.createElement("path", {
      d: "M19 3h-4.18C14.4 1.84 13.3 1 12 1c-1.3 0-2.4.84-2.82 2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-7 0c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zm2 14H7v-2h7v2zm3-4H7v-2h10v2zm0-4H7V7h10v2z"
    }), 'Assignment');

    default_1$5 = Assignment.default = _default$7;

    var useStyles$5 = makeStyles(function (theme) {
        var background = theme.palette.tertiary
            ? alpha(theme.palette.tertiary.main, 0.7)
            : alpha(theme.palette.primary.main, 0.7);
        return {
            rubberband: {
                height: '100%',
                background: background,
                position: 'absolute',
                zIndex: 10,
                textAlign: 'center',
                overflow: 'hidden',
            },
            rubberbandControl: {
                cursor: 'crosshair',
                width: '100%',
                minHeight: 8,
            },
            rubberbandText: {
                color: theme.palette.tertiary
                    ? theme.palette.tertiary.contrastText
                    : theme.palette.primary.contrastText,
            },
            popover: {
                mouseEvents: 'none',
                cursor: 'crosshair',
            },
            paper: {
                paddingLeft: theme.spacing(1),
                paddingRight: theme.spacing(1),
            },
            guide: {
                pointerEvents: 'none',
                height: '100%',
                width: 1,
                position: 'absolute',
                zIndex: 10,
            },
        };
    });
    var VerticalGuide = observer(function (_a) {
        var model = _a.model, coordX = _a.coordX;
        var treeAreaWidth = model.treeAreaWidth;
        var classes = useStyles$5();
        return (React__default["default"].createElement(React__default["default"].Fragment, null,
            React__default["default"].createElement(x, { open: true, placement: "top", title: "".concat(model.pxToBp(coordX) + 1), arrow: true },
                React__default["default"].createElement("div", { style: {
                        left: coordX + treeAreaWidth,
                        position: 'absolute',
                        height: 1,
                    } })),
            React__default["default"].createElement("div", { className: classes.guide, style: {
                    left: coordX + treeAreaWidth,
                    background: 'red',
                } })));
    });
    function Rubberband(_a) {
        var model = _a.model, _b = _a.ControlComponent, ControlComponent = _b === void 0 ? React__default["default"].createElement("div", null) : _b;
        var treeAreaWidth = model.treeAreaWidth;
        var _c = React$i.useState(), startX = _c[0], setStartX = _c[1];
        var _d = React$i.useState(), currentX = _d[0], setCurrentX = _d[1];
        // clientX and clientY used for anchorPosition for menu
        // offsetX used for calculations about width of selection
        var _e = React$i.useState(), anchorPosition = _e[0], setAnchorPosition = _e[1];
        var _f = React$i.useState(), guideX = _f[0], setGuideX = _f[1];
        var controlsRef = React$i.useRef(null);
        var rubberbandRef = React$i.useRef(null);
        var classes = useStyles$5();
        var mouseDragging = startX !== undefined && anchorPosition === undefined;
        React$i.useEffect(function () {
            function globalMouseMove(event) {
                if (controlsRef.current && mouseDragging) {
                    var relativeX = event.clientX - controlsRef.current.getBoundingClientRect().left;
                    setCurrentX(relativeX);
                }
            }
            function globalMouseUp(event) {
                if (startX !== undefined && controlsRef.current) {
                    var clientX = event.clientX, clientY = event.clientY;
                    var ref = controlsRef.current;
                    var offsetX = clientX - ref.getBoundingClientRect().left;
                    // as stated above, store both clientX/Y and offsetX for different
                    // purposes
                    setAnchorPosition({
                        offsetX: offsetX,
                        clientX: clientX,
                        clientY: clientY,
                    });
                    setGuideX(undefined);
                }
            }
            if (mouseDragging) {
                window.addEventListener('mousemove', globalMouseMove);
                window.addEventListener('mouseup', globalMouseUp);
                return function () {
                    window.removeEventListener('mousemove', globalMouseMove);
                    window.removeEventListener('mouseup', globalMouseUp);
                };
            }
            return function () { };
        }, [startX, mouseDragging, anchorPosition]);
        React$i.useEffect(function () {
            if (!mouseDragging &&
                currentX !== undefined &&
                startX !== undefined &&
                Math.abs(currentX - startX) <= 3) {
                handleClose();
            }
        }, [mouseDragging, currentX, startX, model.colWidth]);
        function mouseDown(event) {
            event.preventDefault();
            event.stopPropagation();
            var relativeX = event.clientX -
                event.target.getBoundingClientRect().left;
            setStartX(relativeX);
            setCurrentX(relativeX);
        }
        function mouseMove(event) {
            var target = event.target;
            setGuideX(event.clientX - target.getBoundingClientRect().left);
        }
        function mouseOut() {
            setGuideX(undefined);
            model.clearAnnotPos();
        }
        function handleClose() {
            setAnchorPosition(undefined);
            setStartX(undefined);
            setCurrentX(undefined);
        }
        //eslint-disable-next-line @typescript-eslint/ban-types
        function handleMenuItemClick(_, callback) {
            callback();
            handleClose();
        }
        if (startX === undefined) {
            return (React__default["default"].createElement(React__default["default"].Fragment, null,
                guideX !== undefined ? (React__default["default"].createElement(VerticalGuide, { model: model, coordX: guideX })) : null,
                React__default["default"].createElement("div", { "data-testid": "rubberband_controls", className: classes.rubberbandControl, role: "presentation", ref: controlsRef, onMouseDown: mouseDown, onMouseOut: mouseOut, onMouseMove: mouseMove }, ControlComponent)));
        }
        var right = anchorPosition ? anchorPosition.offsetX : currentX || 0;
        var left = right < startX ? right : startX;
        var width = Math.abs(right - startX);
        var leftBpOffset = model.pxToBp(left);
        var rightBpOffset = model.pxToBp(left + width);
        var numOfBpSelected = Math.ceil(width / model.colWidth);
        var menuItems = [
            {
                label: 'Create annotation',
                icon: default_1$5,
                onClick: function () {
                    model.setOffsets(leftBpOffset, rightBpOffset);
                    handleClose();
                },
            },
        ];
        return (React__default["default"].createElement(React__default["default"].Fragment, null,
            rubberbandRef.current ? (React__default["default"].createElement(React__default["default"].Fragment, null,
                React__default["default"].createElement(Popover$1, { className: classes.popover, classes: {
                        paper: classes.paper,
                    }, open: true, anchorEl: rubberbandRef.current, anchorOrigin: {
                        vertical: 'top',
                        horizontal: 'left',
                    }, transformOrigin: {
                        vertical: 'bottom',
                        horizontal: 'right',
                    }, keepMounted: true, disableRestoreFocus: true },
                    React__default["default"].createElement(Typography$2, null, leftBpOffset + 1)),
                React__default["default"].createElement(Popover$1, { className: classes.popover, classes: {
                        paper: classes.paper,
                    }, open: true, anchorEl: rubberbandRef.current, anchorOrigin: {
                        vertical: 'top',
                        horizontal: 'right',
                    }, transformOrigin: {
                        vertical: 'bottom',
                        horizontal: 'left',
                    }, keepMounted: true, disableRestoreFocus: true },
                    React__default["default"].createElement(Typography$2, null, rightBpOffset + 1)))) : null,
            React__default["default"].createElement("div", { ref: rubberbandRef, className: classes.rubberband, style: { left: left + treeAreaWidth, width: width } },
                React__default["default"].createElement(Typography$2, { variant: "h6", className: classes.rubberbandText },
                    numOfBpSelected.toLocaleString('en-US'),
                    " bp")),
            React__default["default"].createElement("div", { "data-testid": "rubberband_controls", className: classes.rubberbandControl, role: "presentation", ref: controlsRef, onMouseDown: mouseDown, onMouseOut: mouseOut, onMouseMove: mouseMove }, ControlComponent),
            anchorPosition ? (React__default["default"].createElement(ui$1.Menu, { anchorReference: "anchorPosition", anchorPosition: {
                    left: anchorPosition.clientX,
                    top: anchorPosition.clientY,
                }, onMenuItemClick: handleMenuItemClick, open: Boolean(anchorPosition), onClose: handleClose, menuItems: menuItems })) : null));
    }
    var Rubberband$1 = observer(Rubberband);

    /**
     * Copyright 2004-present Facebook. All Rights Reserved.
     *
     * @providesModule UserAgent_DEPRECATED
     */

    /**
     *  Provides entirely client-side User Agent and OS detection. You should prefer
     *  the non-deprecated UserAgent module when possible, which exposes our
     *  authoritative server-side PHP-based detection to the client.
     *
     *  Usage is straightforward:
     *
     *    if (UserAgent_DEPRECATED.ie()) {
     *      //  IE
     *    }
     *
     *  You can also do version checks:
     *
     *    if (UserAgent_DEPRECATED.ie() >= 7) {
     *      //  IE7 or better
     *    }
     *
     *  The browser functions will return NaN if the browser does not match, so
     *  you can also do version compares the other way:
     *
     *    if (UserAgent_DEPRECATED.ie() < 7) {
     *      //  IE6 or worse
     *    }
     *
     *  Note that the version is a float and may include a minor version number,
     *  so you should always use range operators to perform comparisons, not
     *  strict equality.
     *
     *  **Note:** You should **strongly** prefer capability detection to browser
     *  version detection where it's reasonable:
     *
     *    http://www.quirksmode.org/js/support.html
     *
     *  Further, we have a large number of mature wrapper functions and classes
     *  which abstract away many browser irregularities. Check the documentation,
     *  grep for things, or ask on javascript@lists.facebook.com before writing yet
     *  another copy of "event || window.event".
     *
     */

    var _populated = false;

    // Browsers
    var _ie, _firefox, _opera, _webkit, _chrome;

    // Actual IE browser for compatibility mode
    var _ie_real_version;

    // Platforms
    var _osx, _windows, _linux, _android;

    // Architectures
    var _win64;

    // Devices
    var _iphone, _ipad, _native;

    var _mobile;

    function _populate() {
      if (_populated) {
        return;
      }

      _populated = true;

      // To work around buggy JS libraries that can't handle multi-digit
      // version numbers, Opera 10's user agent string claims it's Opera
      // 9, then later includes a Version/X.Y field:
      //
      // Opera/9.80 (foo) Presto/2.2.15 Version/10.10
      var uas = navigator.userAgent;
      var agent = /(?:MSIE.(\d+\.\d+))|(?:(?:Firefox|GranParadiso|Iceweasel).(\d+\.\d+))|(?:Opera(?:.+Version.|.)(\d+\.\d+))|(?:AppleWebKit.(\d+(?:\.\d+)?))|(?:Trident\/\d+\.\d+.*rv:(\d+\.\d+))/.exec(uas);
      var os    = /(Mac OS X)|(Windows)|(Linux)/.exec(uas);

      _iphone = /\b(iPhone|iP[ao]d)/.exec(uas);
      _ipad = /\b(iP[ao]d)/.exec(uas);
      _android = /Android/i.exec(uas);
      _native = /FBAN\/\w+;/i.exec(uas);
      _mobile = /Mobile/i.exec(uas);

      // Note that the IE team blog would have you believe you should be checking
      // for 'Win64; x64'.  But MSDN then reveals that you can actually be coming
      // from either x64 or ia64;  so ultimately, you should just check for Win64
      // as in indicator of whether you're in 64-bit IE.  32-bit IE on 64-bit
      // Windows will send 'WOW64' instead.
      _win64 = !!(/Win64/.exec(uas));

      if (agent) {
        _ie = agent[1] ? parseFloat(agent[1]) : (
              agent[5] ? parseFloat(agent[5]) : NaN);
        // IE compatibility mode
        if (_ie && document && document.documentMode) {
          _ie = document.documentMode;
        }
        // grab the "true" ie version from the trident token if available
        var trident = /(?:Trident\/(\d+.\d+))/.exec(uas);
        _ie_real_version = trident ? parseFloat(trident[1]) + 4 : _ie;

        _firefox = agent[2] ? parseFloat(agent[2]) : NaN;
        _opera   = agent[3] ? parseFloat(agent[3]) : NaN;
        _webkit  = agent[4] ? parseFloat(agent[4]) : NaN;
        if (_webkit) {
          // We do not add the regexp to the above test, because it will always
          // match 'safari' only since 'AppleWebKit' appears before 'Chrome' in
          // the userAgent string.
          agent = /(?:Chrome\/(\d+\.\d+))/.exec(uas);
          _chrome = agent && agent[1] ? parseFloat(agent[1]) : NaN;
        } else {
          _chrome = NaN;
        }
      } else {
        _ie = _firefox = _opera = _chrome = _webkit = NaN;
      }

      if (os) {
        if (os[1]) {
          // Detect OS X version.  If no version number matches, set _osx to true.
          // Version examples:  10, 10_6_1, 10.7
          // Parses version number as a float, taking only first two sets of
          // digits.  If only one set of digits is found, returns just the major
          // version number.
          var ver = /(?:Mac OS X (\d+(?:[._]\d+)?))/.exec(uas);

          _osx = ver ? parseFloat(ver[1].replace('_', '.')) : true;
        } else {
          _osx = false;
        }
        _windows = !!os[2];
        _linux   = !!os[3];
      } else {
        _osx = _windows = _linux = false;
      }
    }

    var UserAgent_DEPRECATED$1 = {

      /**
       *  Check if the UA is Internet Explorer.
       *
       *
       *  @return float|NaN Version number (if match) or NaN.
       */
      ie: function() {
        return _populate() || _ie;
      },

      /**
       * Check if we're in Internet Explorer compatibility mode.
       *
       * @return bool true if in compatibility mode, false if
       * not compatibility mode or not ie
       */
      ieCompatibilityMode: function() {
        return _populate() || (_ie_real_version > _ie);
      },


      /**
       * Whether the browser is 64-bit IE.  Really, this is kind of weak sauce;  we
       * only need this because Skype can't handle 64-bit IE yet.  We need to remove
       * this when we don't need it -- tracked by #601957.
       */
      ie64: function() {
        return UserAgent_DEPRECATED$1.ie() && _win64;
      },

      /**
       *  Check if the UA is Firefox.
       *
       *
       *  @return float|NaN Version number (if match) or NaN.
       */
      firefox: function() {
        return _populate() || _firefox;
      },


      /**
       *  Check if the UA is Opera.
       *
       *
       *  @return float|NaN Version number (if match) or NaN.
       */
      opera: function() {
        return _populate() || _opera;
      },


      /**
       *  Check if the UA is WebKit.
       *
       *
       *  @return float|NaN Version number (if match) or NaN.
       */
      webkit: function() {
        return _populate() || _webkit;
      },

      /**
       *  For Push
       *  WILL BE REMOVED VERY SOON. Use UserAgent_DEPRECATED.webkit
       */
      safari: function() {
        return UserAgent_DEPRECATED$1.webkit();
      },

      /**
       *  Check if the UA is a Chrome browser.
       *
       *
       *  @return float|NaN Version number (if match) or NaN.
       */
      chrome : function() {
        return _populate() || _chrome;
      },


      /**
       *  Check if the user is running Windows.
       *
       *  @return bool `true' if the user's OS is Windows.
       */
      windows: function() {
        return _populate() || _windows;
      },


      /**
       *  Check if the user is running Mac OS X.
       *
       *  @return float|bool   Returns a float if a version number is detected,
       *                       otherwise true/false.
       */
      osx: function() {
        return _populate() || _osx;
      },

      /**
       * Check if the user is running Linux.
       *
       * @return bool `true' if the user's OS is some flavor of Linux.
       */
      linux: function() {
        return _populate() || _linux;
      },

      /**
       * Check if the user is running on an iPhone or iPod platform.
       *
       * @return bool `true' if the user is running some flavor of the
       *    iPhone OS.
       */
      iphone: function() {
        return _populate() || _iphone;
      },

      mobile: function() {
        return _populate() || (_iphone || _ipad || _android || _mobile);
      },

      nativeApp: function() {
        // webviews inside of the native apps
        return _populate() || _native;
      },

      android: function() {
        return _populate() || _android;
      },

      ipad: function() {
        return _populate() || _ipad;
      }
    };

    var UserAgent_DEPRECATED_1 = UserAgent_DEPRECATED$1;

    /**
     * Copyright (c) 2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule ExecutionEnvironment
     */

    var canUseDOM = !!(
      typeof window !== 'undefined' &&
      window.document &&
      window.document.createElement
    );

    /**
     * Simple, lightweight module assisting with the detection and context of
     * Worker. Helps avoid circular dependencies and allows code to reason about
     * whether or not they are in a Worker, even if they never include the main
     * `ReactWorker` dependency.
     */
    var ExecutionEnvironment$1 = {

      canUseDOM: canUseDOM,

      canUseWorkers: typeof Worker !== 'undefined',

      canUseEventListeners:
        canUseDOM && !!(window.addEventListener || window.attachEvent),

      canUseViewport: canUseDOM && !!window.screen,

      isInWorker: !canUseDOM // For now, this is true - might change in the future.

    };

    var ExecutionEnvironment_1 = ExecutionEnvironment$1;

    /**
     * Copyright 2013-2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule isEventSupported
     */

    var ExecutionEnvironment = ExecutionEnvironment_1;

    var useHasFeature;
    if (ExecutionEnvironment.canUseDOM) {
      useHasFeature =
        document.implementation &&
        document.implementation.hasFeature &&
        // always returns true in newer browsers as per the standard.
        // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
        document.implementation.hasFeature('', '') !== true;
    }

    /**
     * Checks if an event is supported in the current execution environment.
     *
     * NOTE: This will not work correctly for non-generic events such as `change`,
     * `reset`, `load`, `error`, and `select`.
     *
     * Borrows from Modernizr.
     *
     * @param {string} eventNameSuffix Event name, e.g. "click".
     * @param {?boolean} capture Check if the capture phase is supported.
     * @return {boolean} True if the event is supported.
     * @internal
     * @license Modernizr 3.0.0pre (Custom Build) | MIT
     */
    function isEventSupported$1(eventNameSuffix, capture) {
      if (!ExecutionEnvironment.canUseDOM ||
          capture && !('addEventListener' in document)) {
        return false;
      }

      var eventName = 'on' + eventNameSuffix;
      var isSupported = eventName in document;

      if (!isSupported) {
        var element = document.createElement('div');
        element.setAttribute(eventName, 'return;');
        isSupported = typeof element[eventName] === 'function';
      }

      if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
        // This is the only way to test support for the `wheel` event in IE9+.
        isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
      }

      return isSupported;
    }

    var isEventSupported_1 = isEventSupported$1;

    /**
     * Copyright (c) 2015, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * LICENSE file in the root directory of this source tree. An additional grant
     * of patent rights can be found in the PATENTS file in the same directory.
     *
     * @providesModule normalizeWheel
     * @typechecks
     */

    var UserAgent_DEPRECATED = UserAgent_DEPRECATED_1;

    var isEventSupported = isEventSupported_1;


    // Reasonable defaults
    var PIXEL_STEP  = 10;
    var LINE_HEIGHT = 40;
    var PAGE_HEIGHT = 800;

    /**
     * Mouse wheel (and 2-finger trackpad) support on the web sucks.  It is
     * complicated, thus this doc is long and (hopefully) detailed enough to answer
     * your questions.
     *
     * If you need to react to the mouse wheel in a predictable way, this code is
     * like your bestest friend. * hugs *
     *
     * As of today, there are 4 DOM event types you can listen to:
     *
     *   'wheel'                -- Chrome(31+), FF(17+), IE(9+)
     *   'mousewheel'           -- Chrome, IE(6+), Opera, Safari
     *   'MozMousePixelScroll'  -- FF(3.5 only!) (2010-2013) -- don't bother!
     *   'DOMMouseScroll'       -- FF(0.9.7+) since 2003
     *
     * So what to do?  The is the best:
     *
     *   normalizeWheel.getEventType();
     *
     * In your event callback, use this code to get sane interpretation of the
     * deltas.  This code will return an object with properties:
     *
     *   spinX   -- normalized spin speed (use for zoom) - x plane
     *   spinY   -- " - y plane
     *   pixelX  -- normalized distance (to pixels) - x plane
     *   pixelY  -- " - y plane
     *
     * Wheel values are provided by the browser assuming you are using the wheel to
     * scroll a web page by a number of lines or pixels (or pages).  Values can vary
     * significantly on different platforms and browsers, forgetting that you can
     * scroll at different speeds.  Some devices (like trackpads) emit more events
     * at smaller increments with fine granularity, and some emit massive jumps with
     * linear speed or acceleration.
     *
     * This code does its best to normalize the deltas for you:
     *
     *   - spin is trying to normalize how far the wheel was spun (or trackpad
     *     dragged).  This is super useful for zoom support where you want to
     *     throw away the chunky scroll steps on the PC and make those equal to
     *     the slow and smooth tiny steps on the Mac. Key data: This code tries to
     *     resolve a single slow step on a wheel to 1.
     *
     *   - pixel is normalizing the desired scroll delta in pixel units.  You'll
     *     get the crazy differences between browsers, but at least it'll be in
     *     pixels!
     *
     *   - positive value indicates scrolling DOWN/RIGHT, negative UP/LEFT.  This
     *     should translate to positive value zooming IN, negative zooming OUT.
     *     This matches the newer 'wheel' event.
     *
     * Why are there spinX, spinY (or pixels)?
     *
     *   - spinX is a 2-finger side drag on the trackpad, and a shift + wheel turn
     *     with a mouse.  It results in side-scrolling in the browser by default.
     *
     *   - spinY is what you expect -- it's the classic axis of a mouse wheel.
     *
     *   - I dropped spinZ/pixelZ.  It is supported by the DOM 3 'wheel' event and
     *     probably is by browsers in conjunction with fancy 3D controllers .. but
     *     you know.
     *
     * Implementation info:
     *
     * Examples of 'wheel' event if you scroll slowly (down) by one step with an
     * average mouse:
     *
     *   OS X + Chrome  (mouse)     -    4   pixel delta  (wheelDelta -120)
     *   OS X + Safari  (mouse)     -  N/A   pixel delta  (wheelDelta  -12)
     *   OS X + Firefox (mouse)     -    0.1 line  delta  (wheelDelta  N/A)
     *   Win8 + Chrome  (mouse)     -  100   pixel delta  (wheelDelta -120)
     *   Win8 + Firefox (mouse)     -    3   line  delta  (wheelDelta -120)
     *
     * On the trackpad:
     *
     *   OS X + Chrome  (trackpad)  -    2   pixel delta  (wheelDelta   -6)
     *   OS X + Firefox (trackpad)  -    1   pixel delta  (wheelDelta  N/A)
     *
     * On other/older browsers.. it's more complicated as there can be multiple and
     * also missing delta values.
     *
     * The 'wheel' event is more standard:
     *
     * http://www.w3.org/TR/DOM-Level-3-Events/#events-wheelevents
     *
     * The basics is that it includes a unit, deltaMode (pixels, lines, pages), and
     * deltaX, deltaY and deltaZ.  Some browsers provide other values to maintain
     * backward compatibility with older events.  Those other values help us
     * better normalize spin speed.  Example of what the browsers provide:
     *
     *                          | event.wheelDelta | event.detail
     *        ------------------+------------------+--------------
     *          Safari v5/OS X  |       -120       |       0
     *          Safari v5/Win7  |       -120       |       0
     *         Chrome v17/OS X  |       -120       |       0
     *         Chrome v17/Win7  |       -120       |       0
     *                IE9/Win7  |       -120       |   undefined
     *         Firefox v4/OS X  |     undefined    |       1
     *         Firefox v4/Win7  |     undefined    |       3
     *
     */
    function normalizeWheel$1(/*object*/ event) /*object*/ {
      var sX = 0, sY = 0,       // spinX, spinY
          pX = 0, pY = 0;       // pixelX, pixelY

      // Legacy
      if ('detail'      in event) { sY = event.detail; }
      if ('wheelDelta'  in event) { sY = -event.wheelDelta / 120; }
      if ('wheelDeltaY' in event) { sY = -event.wheelDeltaY / 120; }
      if ('wheelDeltaX' in event) { sX = -event.wheelDeltaX / 120; }

      // side scrolling on FF with DOMMouseScroll
      if ( 'axis' in event && event.axis === event.HORIZONTAL_AXIS ) {
        sX = sY;
        sY = 0;
      }

      pX = sX * PIXEL_STEP;
      pY = sY * PIXEL_STEP;

      if ('deltaY' in event) { pY = event.deltaY; }
      if ('deltaX' in event) { pX = event.deltaX; }

      if ((pX || pY) && event.deltaMode) {
        if (event.deltaMode == 1) {          // delta in LINE units
          pX *= LINE_HEIGHT;
          pY *= LINE_HEIGHT;
        } else {                             // delta in PAGE units
          pX *= PAGE_HEIGHT;
          pY *= PAGE_HEIGHT;
        }
      }

      // Fall-back if spin cannot be determined
      if (pX && !sX) { sX = (pX < 1) ? -1 : 1; }
      if (pY && !sY) { sY = (pY < 1) ? -1 : 1; }

      return { spinX  : sX,
               spinY  : sY,
               pixelX : pX,
               pixelY : pY };
    }


    /**
     * The best combination if you prefer spinX + spinY normalization.  It favors
     * the older DOMMouseScroll for Firefox, as FF does not include wheelDelta with
     * 'wheel' event, making spin speed determination impossible.
     */
    normalizeWheel$1.getEventType = function() /*string*/ {
      return (UserAgent_DEPRECATED.firefox())
               ? 'DOMMouseScroll'
               : (isEventSupported('wheel'))
                   ? 'wheel'
                   : 'mousewheel';
    };

    var normalizeWheel_1 = normalizeWheel$1;

    var normalizeWheel = normalizeWheel_1;

    var rbush_min = {exports: {}};

    (function (module, exports) {
    !function(t,i){module.exports=i();}(commonjsGlobal,function(){function t(t,r,e,a,h){!function t(n,r,e,a,h){for(;a>e;){if(a-e>600){var o=a-e+1,s=r-e+1,l=Math.log(o),f=.5*Math.exp(2*l/3),u=.5*Math.sqrt(l*f*(o-f)/o)*(s-o/2<0?-1:1),m=Math.max(e,Math.floor(r-s*f/o+u)),c=Math.min(a,Math.floor(r+(o-s)*f/o+u));t(n,r,m,c,h);}var p=n[r],d=e,x=a;for(i(n,e,r),h(n[a],p)>0&&i(n,e,a);d<x;){for(i(n,d,x),d++,x--;h(n[d],p)<0;)d++;for(;h(n[x],p)>0;)x--;}0===h(n[e],p)?i(n,e,x):i(n,++x,a),x<=r&&(e=x+1),r<=x&&(a=x-1);}}(t,r,e||0,a||t.length-1,h||n);}function i(t,i,n){var r=t[i];t[i]=t[n],t[n]=r;}function n(t,i){return t<i?-1:t>i?1:0}var r=function(t){void 0===t&&(t=9),this._maxEntries=Math.max(4,t),this._minEntries=Math.max(2,Math.ceil(.4*this._maxEntries)),this.clear();};function e(t,i,n){if(!n)return i.indexOf(t);for(var r=0;r<i.length;r++)if(n(t,i[r]))return r;return -1}function a(t,i){h(t,0,t.children.length,i,t);}function h(t,i,n,r,e){e||(e=p(null)),e.minX=1/0,e.minY=1/0,e.maxX=-1/0,e.maxY=-1/0;for(var a=i;a<n;a++){var h=t.children[a];o(e,t.leaf?r(h):h);}return e}function o(t,i){return t.minX=Math.min(t.minX,i.minX),t.minY=Math.min(t.minY,i.minY),t.maxX=Math.max(t.maxX,i.maxX),t.maxY=Math.max(t.maxY,i.maxY),t}function s(t,i){return t.minX-i.minX}function l(t,i){return t.minY-i.minY}function f(t){return (t.maxX-t.minX)*(t.maxY-t.minY)}function u(t){return t.maxX-t.minX+(t.maxY-t.minY)}function m(t,i){return t.minX<=i.minX&&t.minY<=i.minY&&i.maxX<=t.maxX&&i.maxY<=t.maxY}function c(t,i){return i.minX<=t.maxX&&i.minY<=t.maxY&&i.maxX>=t.minX&&i.maxY>=t.minY}function p(t){return {children:t,height:1,leaf:!0,minX:1/0,minY:1/0,maxX:-1/0,maxY:-1/0}}function d(i,n,r,e,a){for(var h=[n,r];h.length;)if(!((r=h.pop())-(n=h.pop())<=e)){var o=n+Math.ceil((r-n)/e/2)*e;t(i,o,n,r,a),h.push(n,o,o,r);}}return r.prototype.all=function(){return this._all(this.data,[])},r.prototype.search=function(t){var i=this.data,n=[];if(!c(t,i))return n;for(var r=this.toBBox,e=[];i;){for(var a=0;a<i.children.length;a++){var h=i.children[a],o=i.leaf?r(h):h;c(t,o)&&(i.leaf?n.push(h):m(t,o)?this._all(h,n):e.push(h));}i=e.pop();}return n},r.prototype.collides=function(t){var i=this.data;if(!c(t,i))return !1;for(var n=[];i;){for(var r=0;r<i.children.length;r++){var e=i.children[r],a=i.leaf?this.toBBox(e):e;if(c(t,a)){if(i.leaf||m(t,a))return !0;n.push(e);}}i=n.pop();}return !1},r.prototype.load=function(t){if(!t||!t.length)return this;if(t.length<this._minEntries){for(var i=0;i<t.length;i++)this.insert(t[i]);return this}var n=this._build(t.slice(),0,t.length-1,0);if(this.data.children.length)if(this.data.height===n.height)this._splitRoot(this.data,n);else {if(this.data.height<n.height){var r=this.data;this.data=n,n=r;}this._insert(n,this.data.height-n.height-1,!0);}else this.data=n;return this},r.prototype.insert=function(t){return t&&this._insert(t,this.data.height-1),this},r.prototype.clear=function(){return this.data=p([]),this},r.prototype.remove=function(t,i){if(!t)return this;for(var n,r,a,h=this.data,o=this.toBBox(t),s=[],l=[];h||s.length;){if(h||(h=s.pop(),r=s[s.length-1],n=l.pop(),a=!0),h.leaf){var f=e(t,h.children,i);if(-1!==f)return h.children.splice(f,1),s.push(h),this._condense(s),this}a||h.leaf||!m(h,o)?r?(n++,h=r.children[n],a=!1):h=null:(s.push(h),l.push(n),n=0,r=h,h=h.children[0]);}return this},r.prototype.toBBox=function(t){return t},r.prototype.compareMinX=function(t,i){return t.minX-i.minX},r.prototype.compareMinY=function(t,i){return t.minY-i.minY},r.prototype.toJSON=function(){return this.data},r.prototype.fromJSON=function(t){return this.data=t,this},r.prototype._all=function(t,i){for(var n=[];t;)t.leaf?i.push.apply(i,t.children):n.push.apply(n,t.children),t=n.pop();return i},r.prototype._build=function(t,i,n,r){var e,h=n-i+1,o=this._maxEntries;if(h<=o)return a(e=p(t.slice(i,n+1)),this.toBBox),e;r||(r=Math.ceil(Math.log(h)/Math.log(o)),o=Math.ceil(h/Math.pow(o,r-1))),(e=p([])).leaf=!1,e.height=r;var s=Math.ceil(h/o),l=s*Math.ceil(Math.sqrt(o));d(t,i,n,l,this.compareMinX);for(var f=i;f<=n;f+=l){var u=Math.min(f+l-1,n);d(t,f,u,s,this.compareMinY);for(var m=f;m<=u;m+=s){var c=Math.min(m+s-1,u);e.children.push(this._build(t,m,c,r-1));}}return a(e,this.toBBox),e},r.prototype._chooseSubtree=function(t,i,n,r){for(;r.push(i),!i.leaf&&r.length-1!==n;){for(var e=1/0,a=1/0,h=void 0,o=0;o<i.children.length;o++){var s=i.children[o],l=f(s),u=(m=t,c=s,(Math.max(c.maxX,m.maxX)-Math.min(c.minX,m.minX))*(Math.max(c.maxY,m.maxY)-Math.min(c.minY,m.minY))-l);u<a?(a=u,e=l<e?l:e,h=s):u===a&&l<e&&(e=l,h=s);}i=h||i.children[0];}var m,c;return i},r.prototype._insert=function(t,i,n){var r=n?t:this.toBBox(t),e=[],a=this._chooseSubtree(r,this.data,i,e);for(a.children.push(t),o(a,r);i>=0&&e[i].children.length>this._maxEntries;)this._split(e,i),i--;this._adjustParentBBoxes(r,e,i);},r.prototype._split=function(t,i){var n=t[i],r=n.children.length,e=this._minEntries;this._chooseSplitAxis(n,e,r);var h=this._chooseSplitIndex(n,e,r),o=p(n.children.splice(h,n.children.length-h));o.height=n.height,o.leaf=n.leaf,a(n,this.toBBox),a(o,this.toBBox),i?t[i-1].children.push(o):this._splitRoot(n,o);},r.prototype._splitRoot=function(t,i){this.data=p([t,i]),this.data.height=t.height+1,this.data.leaf=!1,a(this.data,this.toBBox);},r.prototype._chooseSplitIndex=function(t,i,n){for(var r,e,a,o,s,l,u,m=1/0,c=1/0,p=i;p<=n-i;p++){var d=h(t,0,p,this.toBBox),x=h(t,p,n,this.toBBox),v=(e=d,a=x,o=void 0,s=void 0,l=void 0,u=void 0,o=Math.max(e.minX,a.minX),s=Math.max(e.minY,a.minY),l=Math.min(e.maxX,a.maxX),u=Math.min(e.maxY,a.maxY),Math.max(0,l-o)*Math.max(0,u-s)),M=f(d)+f(x);v<m?(m=v,r=p,c=M<c?M:c):v===m&&M<c&&(c=M,r=p);}return r||n-i},r.prototype._chooseSplitAxis=function(t,i,n){var r=t.leaf?this.compareMinX:s,e=t.leaf?this.compareMinY:l;this._allDistMargin(t,i,n,r)<this._allDistMargin(t,i,n,e)&&t.children.sort(r);},r.prototype._allDistMargin=function(t,i,n,r){t.children.sort(r);for(var e=this.toBBox,a=h(t,0,i,e),s=h(t,n-i,n,e),l=u(a)+u(s),f=i;f<n-i;f++){var m=t.children[f];o(a,t.leaf?e(m):m),l+=u(a);}for(var c=n-i-1;c>=i;c--){var p=t.children[c];o(s,t.leaf?e(p):p),l+=u(s);}return l},r.prototype._adjustParentBBoxes=function(t,i,n){for(var r=n;r>=0;r--)o(i[r],t);},r.prototype._condense=function(t){for(var i=t.length-1,n=void 0;i>=0;i--)0===t[i].children.length?i>0?(n=t[i-1].children).splice(n.indexOf(t[i]),1):this.clear():a(t[i],this.toBBox);},r});
    }(rbush_min));

    var RBush = rbush_min.exports;

    var BaseFeatureDetail = {};

    var reactErrorBoundary_umd = {exports: {}};

    (function (module, exports) {
    (function (global, factory) {
      factory(exports, React__default["default"]) ;
    })(commonjsGlobal, (function (exports, React) {
      function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
          Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
              var d = Object.getOwnPropertyDescriptor(e, k);
              Object.defineProperty(n, k, d.get ? d : {
                enumerable: true,
                get: function () { return e[k]; }
              });
            }
          });
        }
        n["default"] = e;
        return Object.freeze(n);
      }

      var React__namespace = /*#__PURE__*/_interopNamespace(React);

      function _setPrototypeOf(o, p) {
        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
          o.__proto__ = p;
          return o;
        };

        return _setPrototypeOf(o, p);
      }

      function _inheritsLoose(subClass, superClass) {
        subClass.prototype = Object.create(superClass.prototype);
        subClass.prototype.constructor = subClass;
        _setPrototypeOf(subClass, superClass);
      }

      var changedArray = function changedArray(a, b) {
        if (a === void 0) {
          a = [];
        }

        if (b === void 0) {
          b = [];
        }

        return a.length !== b.length || a.some(function (item, index) {
          return !Object.is(item, b[index]);
        });
      };

      var initialState = {
        error: null
      };

      var ErrorBoundary = /*#__PURE__*/function (_React$Component) {
        _inheritsLoose(ErrorBoundary, _React$Component);

        function ErrorBoundary() {
          var _this;

          for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
            _args[_key] = arguments[_key];
          }

          _this = _React$Component.call.apply(_React$Component, [this].concat(_args)) || this;
          _this.state = initialState;

          _this.resetErrorBoundary = function () {
            var _this$props;

            for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
              args[_key2] = arguments[_key2];
            }

            _this.props.onReset == null ? void 0 : (_this$props = _this.props).onReset.apply(_this$props, args);

            _this.reset();
          };

          return _this;
        }

        ErrorBoundary.getDerivedStateFromError = function getDerivedStateFromError(error) {
          return {
            error: error
          };
        };

        var _proto = ErrorBoundary.prototype;

        _proto.reset = function reset() {
          this.setState(initialState);
        };

        _proto.componentDidCatch = function componentDidCatch(error, info) {
          var _this$props$onError, _this$props2;

          (_this$props$onError = (_this$props2 = this.props).onError) == null ? void 0 : _this$props$onError.call(_this$props2, error, info);
        };

        _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
          var error = this.state.error;
          var resetKeys = this.props.resetKeys; // There's an edge case where if the thing that triggered the error
          // happens to *also* be in the resetKeys array, we'd end up resetting
          // the error boundary immediately. This would likely trigger a second
          // error to be thrown.
          // So we make sure that we don't check the resetKeys on the first call
          // of cDU after the error is set

          if (error !== null && prevState.error !== null && changedArray(prevProps.resetKeys, resetKeys)) {
            var _this$props$onResetKe, _this$props3;

            (_this$props$onResetKe = (_this$props3 = this.props).onResetKeysChange) == null ? void 0 : _this$props$onResetKe.call(_this$props3, prevProps.resetKeys, resetKeys);
            this.reset();
          }
        };

        _proto.render = function render() {
          var error = this.state.error;
          var _this$props4 = this.props,
              fallbackRender = _this$props4.fallbackRender,
              FallbackComponent = _this$props4.FallbackComponent,
              fallback = _this$props4.fallback;

          if (error !== null) {
            var _props = {
              error: error,
              resetErrorBoundary: this.resetErrorBoundary
            };

            if ( /*#__PURE__*/React__namespace.isValidElement(fallback)) {
              return fallback;
            } else if (typeof fallbackRender === 'function') {
              return fallbackRender(_props);
            } else if (FallbackComponent) {
              return /*#__PURE__*/React__namespace.createElement(FallbackComponent, _props);
            } else {
              throw new Error('react-error-boundary requires either a fallback, fallbackRender, or FallbackComponent prop');
            }
          }

          return this.props.children;
        };

        return ErrorBoundary;
      }(React__namespace.Component);

      function withErrorBoundary(Component, errorBoundaryProps) {
        var Wrapped = function Wrapped(props) {
          return /*#__PURE__*/React__namespace.createElement(ErrorBoundary, errorBoundaryProps, /*#__PURE__*/React__namespace.createElement(Component, props));
        }; // Format for display in DevTools


        var name = Component.displayName || Component.name || 'Unknown';
        Wrapped.displayName = "withErrorBoundary(" + name + ")";
        return Wrapped;
      }

      function useErrorHandler(givenError) {
        var _React$useState = React__namespace.useState(null),
            error = _React$useState[0],
            setError = _React$useState[1];

        if (givenError != null) throw givenError;
        if (error != null) throw error;
        return setError;
      }
      /*
      eslint
        @typescript-eslint/sort-type-union-intersection-members: "off",
        @typescript-eslint/no-throw-literal: "off",
        @typescript-eslint/prefer-nullish-coalescing: "off"
      */

      exports.ErrorBoundary = ErrorBoundary;
      exports.useErrorHandler = useErrorHandler;
      exports.withErrorBoundary = withErrorBoundary;

      Object.defineProperty(exports, '__esModule', { value: true });

    }));

    }(reactErrorBoundary_umd, reactErrorBoundary_umd.exports));

    var ExpandMore = {};

    var _interopRequireDefault$b = interopRequireDefault.exports;

    var _interopRequireWildcard$6 = interopRequireWildcard.exports;

    Object.defineProperty(ExpandMore, "__esModule", {
      value: true
    });
    ExpandMore.default = void 0;

    var React$4 = _interopRequireWildcard$6(React__default["default"]);

    var _createSvgIcon$4 = _interopRequireDefault$b(createSvgIcon);

    var _default$6 = (0, _createSvgIcon$4.default)( /*#__PURE__*/React$4.createElement("path", {
      d: "M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z"
    }), 'ExpandMore');

    ExpandMore.default = _default$6;

    // Cache implementation based on Erik Rasmussen's `lru-memoize`:
    // https://github.com/erikras/lru-memoize
    var NOT_FOUND = 'NOT_FOUND';

    function createSingletonCache(equals) {
      var entry;
      return {
        get: function get(key) {
          if (entry && equals(entry.key, key)) {
            return entry.value;
          }

          return NOT_FOUND;
        },
        put: function put(key, value) {
          entry = {
            key: key,
            value: value
          };
        },
        getEntries: function getEntries() {
          return entry ? [entry] : [];
        },
        clear: function clear() {
          entry = undefined;
        }
      };
    }

    function createLruCache(maxSize, equals) {
      var entries = [];

      function get(key) {
        var cacheIndex = entries.findIndex(function (entry) {
          return equals(key, entry.key);
        }); // We found a cached entry

        if (cacheIndex > -1) {
          var entry = entries[cacheIndex]; // Cached entry not at top of cache, move it to the top

          if (cacheIndex > 0) {
            entries.splice(cacheIndex, 1);
            entries.unshift(entry);
          }

          return entry.value;
        } // No entry found in cache, return sentinel


        return NOT_FOUND;
      }

      function put(key, value) {
        if (get(key) === NOT_FOUND) {
          // TODO Is unshift slow?
          entries.unshift({
            key: key,
            value: value
          });

          if (entries.length > maxSize) {
            entries.pop();
          }
        }
      }

      function getEntries() {
        return entries;
      }

      function clear() {
        entries = [];
      }

      return {
        get: get,
        put: put,
        getEntries: getEntries,
        clear: clear
      };
    }

    var defaultEqualityCheck = function defaultEqualityCheck(a, b) {
      return a === b;
    };
    function createCacheKeyComparator(equalityCheck) {
      return function areArgumentsShallowlyEqual(prev, next) {
        if (prev === null || next === null || prev.length !== next.length) {
          return false;
        } // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.


        var length = prev.length;

        for (var i = 0; i < length; i++) {
          if (!equalityCheck(prev[i], next[i])) {
            return false;
          }
        }

        return true;
      };
    }
    // defaultMemoize now supports a configurable cache size with LRU behavior,
    // and optional comparison of the result value with existing values
    function defaultMemoize(func, equalityCheckOrOptions) {
      var providedOptions = typeof equalityCheckOrOptions === 'object' ? equalityCheckOrOptions : {
        equalityCheck: equalityCheckOrOptions
      };
      var _providedOptions$equa = providedOptions.equalityCheck,
          equalityCheck = _providedOptions$equa === void 0 ? defaultEqualityCheck : _providedOptions$equa,
          _providedOptions$maxS = providedOptions.maxSize,
          maxSize = _providedOptions$maxS === void 0 ? 1 : _providedOptions$maxS,
          resultEqualityCheck = providedOptions.resultEqualityCheck;
      var comparator = createCacheKeyComparator(equalityCheck);
      var cache = maxSize === 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator); // we reference arguments instead of spreading them for performance reasons

      function memoized() {
        var value = cache.get(arguments);

        if (value === NOT_FOUND) {
          // @ts-ignore
          value = func.apply(null, arguments);

          if (resultEqualityCheck) {
            var entries = cache.getEntries();
            var matchingEntry = entries.find(function (entry) {
              return resultEqualityCheck(entry.value, value);
            });

            if (matchingEntry) {
              value = matchingEntry.value;
            }
          }

          cache.put(arguments, value);
        }

        return value;
      }

      memoized.clearCache = function () {
        return cache.clear();
      };

      return memoized;
    }

    function getDependencies(funcs) {
      var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;

      if (!dependencies.every(function (dep) {
        return typeof dep === 'function';
      })) {
        var dependencyTypes = dependencies.map(function (dep) {
          return typeof dep === 'function' ? "function " + (dep.name || 'unnamed') + "()" : typeof dep;
        }).join(', ');
        throw new Error("createSelector expects all input-selectors to be functions, but received the following types: [" + dependencyTypes + "]");
      }

      return dependencies;
    }

    function createSelectorCreator(memoize) {
      for (var _len = arguments.length, memoizeOptionsFromArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        memoizeOptionsFromArgs[_key - 1] = arguments[_key];
      }

      var createSelector = function createSelector() {
        for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          funcs[_key2] = arguments[_key2];
        }

        var _recomputations = 0;

        var _lastResult; // Due to the intricacies of rest params, we can't do an optional arg after `...funcs`.
        // So, start by declaring the default value here.
        // (And yes, the words 'memoize' and 'options' appear too many times in this next sequence.)


        var directlyPassedOptions = {
          memoizeOptions: undefined
        }; // Normally, the result func or "output selector" is the last arg

        var resultFunc = funcs.pop(); // If the result func is actually an _object_, assume it's our options object

        if (typeof resultFunc === 'object') {
          directlyPassedOptions = resultFunc; // and pop the real result func off

          resultFunc = funcs.pop();
        }

        if (typeof resultFunc !== 'function') {
          throw new Error("createSelector expects an output function after the inputs, but received: [" + typeof resultFunc + "]");
        } // Determine which set of options we're using. Prefer options passed directly,
        // but fall back to options given to createSelectorCreator.


        var _directlyPassedOption = directlyPassedOptions,
            _directlyPassedOption2 = _directlyPassedOption.memoizeOptions,
            memoizeOptions = _directlyPassedOption2 === void 0 ? memoizeOptionsFromArgs : _directlyPassedOption2; // Simplifying assumption: it's unlikely that the first options arg of the provided memoizer
        // is an array. In most libs I've looked at, it's an equality function or options object.
        // Based on that, if `memoizeOptions` _is_ an array, we assume it's a full
        // user-provided array of options. Otherwise, it must be just the _first_ arg, and so
        // we wrap it in an array so we can apply it.

        var finalMemoizeOptions = Array.isArray(memoizeOptions) ? memoizeOptions : [memoizeOptions];
        var dependencies = getDependencies(funcs);
        var memoizedResultFunc = memoize.apply(void 0, [function () {
          _recomputations++; // apply arguments instead of spreading for performance.

          return resultFunc.apply(null, arguments);
        }].concat(finalMemoizeOptions)); // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.

        var selector = memoize(function () {
          var params = [];
          var length = dependencies.length;

          for (var i = 0; i < length; i++) {
            // apply arguments instead of spreading and mutate a local list of params for performance.
            // @ts-ignore
            params.push(dependencies[i].apply(null, arguments));
          } // apply arguments instead of spreading for performance.


          _lastResult = memoizedResultFunc.apply(null, params);
          return _lastResult;
        });
        Object.assign(selector, {
          resultFunc: resultFunc,
          memoizedResultFunc: memoizedResultFunc,
          dependencies: dependencies,
          lastResult: function lastResult() {
            return _lastResult;
          },
          recomputations: function recomputations() {
            return _recomputations;
          },
          resetRecomputations: function resetRecomputations() {
            return _recomputations = 0;
          }
        });
        return selector;
      }; // @ts-ignore


      return createSelector;
    }
    var createSelector = /* #__PURE__ */createSelectorCreator(defaultMemoize);

    var locale = {};

    Object.defineProperty(locale, "__esModule", {
      value: true
    });
    locale.zhCN = locale.viVN = ukUA_1 = locale.ukUA = trTR_1 = locale.trTR = locale.svSE = skSK_1 = locale.skSK = ruRU_1 = locale.ruRU = locale.roRO = locale.ptPT = ptBR_1 = locale.ptBR = plPL_1 = locale.plPL = nlNL_1 = locale.nlNL = locale.koKR = jaJP_1 = locale.jaJP = itIT_1 = locale.itIT = locale.isIS = locale.idID = locale.hyAM = locale.huHU = locale.hiIN = locale.heIL = frFR_1 = locale.frFR = locale.fiFI = locale.faIR = locale.etEE = esES_1 = locale.esES = enUS_1 = locale.enUS = deDE_1 = locale.deDE = csCZ_1 = locale.csCZ = locale.caES = bgBG_1 = locale.bgBG = locale.azAZ = void 0;
    var azAZ = {
      props: {
        MuiBreadcrumbs: {
          expandText: 'Yolu göstər'
        },
        MuiTablePagination: {
          backIconButtonText: 'Əvvəlki səhifə',
          labelRowsPerPage: 'Səhifəyə düşən sətrlər:',
          labelDisplayedRows: function labelDisplayedRows(_ref) {
            var from = _ref.from,
                to = _ref.to,
                count = _ref.count;
            return "".concat(from, "-").concat(to, " d\u0259n ").concat(count !== -1 ? count : "more than ".concat(to));
          },
          nextIconButtonText: 'Növbəti səhifə'
        },
        MuiRating: {
          getLabelText: function getLabelText(value) {
            var pluralForm = 'Ulduz';
            var lastDigit = value % 10;

            if (lastDigit > 1 && lastDigit < 5) {
              pluralForm = 'Ulduzlar';
            }

            return "".concat(value, " ").concat(pluralForm);
          },
          emptyLabelText: 'Boş'
        },
        MuiAutocomplete: {
          clearText: 'Silmək',
          closeText: 'Bağlamaq',
          loadingText: 'Yüklənir…',
          noOptionsText: 'Seçimlər mövcud deyil',
          openText: 'Открыть'
        },
        MuiAlert: {
          closeText: 'Bağlamaq'
        },
        MuiPagination: {
          'aria-label': 'Səhifənin naviqasiyası',
          getItemAriaLabel: function getItemAriaLabel(type, page, selected) {
            if (type === 'page') {
              return "".concat(page, " ").concat(selected ? 'səhifə' : 'səhifəyə keç');
            }

            if (type === 'first') {
              return 'Birinci səhifəyə keç';
            }

            if (type === 'last') {
              return 'Sonuncu səhifəyə keç';
            }

            if (type === 'next') {
              return 'Növbəti səhifəyə keç';
            }

            if (type === 'previous') {
              return 'Əvvəlki səhifəyə keç';
            }

            return undefined;
          }
        }
      }
    };
    locale.azAZ = azAZ;
    var bgBG = {
      props: {
        MuiBreadcrumbs: {
          expandText: 'Показване на пътя'
        },
        MuiTablePagination: {
          backIconButtonText: 'Предишна страница',
          labelRowsPerPage: 'Редове на страница:',
          labelDisplayedRows: function labelDisplayedRows(_ref2) {
            var from = _ref2.from,
                to = _ref2.to,
                count = _ref2.count;
            return "".concat(from, "-").concat(to, " \u043E\u0442 ").concat(count !== -1 ? count : "more than ".concat(to));
          },
          nextIconButtonText: 'Следваща страница'
        },
        MuiRating: {
          getLabelText: function getLabelText(value) {
            return "".concat(value, " \u0417\u0432\u0435\u0437\u0434").concat(value !== 1 ? 'и' : 'а');
          },
          emptyLabelText: 'Изчисти'
        },
        MuiAutocomplete: {
          clearText: 'Изчисти',
          closeText: 'Затвори',
          loadingText: 'Зареждане…',
          noOptionsText: 'Няма налични опции',
          openText: 'Отвори'
        },
        MuiAlert: {
          closeText: 'Затвори'
        },
        MuiPagination: {
          'aria-label': 'Пагинация',
          getItemAriaLabel: function getItemAriaLabel(type, page, selected) {
            if (type === 'page') {
              return "".concat(selected ? '' : 'Към ', "\u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0430 ").concat(page);
            }

            if (type === 'first') {
              return 'Отиди на първата страница';
            }

            if (type === 'last') {
              return 'Отиди на последната страница';
            }

            if (type === 'next') {
              return 'Отиди на следващата страница';
            }

            if (type === 'previous') {
              return 'Отиди на предишната страница';
            }

            return undefined;
          }
        }
      }
    };
    var bgBG_1 = locale.bgBG = bgBG;
    var caES = {
      props: {
        // MuiBreadcrumbs: {
        //   expandText: 'Show path',
        // },
        MuiTablePagination: {
          backIconButtonText: 'Pàgina anterior',
          labelRowsPerPage: 'Files per pàgina:',
          labelDisplayedRows: function labelDisplayedRows(_ref3) {
            var from = _ref3.from,
                to = _ref3.to,
                count = _ref3.count;
            return "".concat(from, "-").concat(to, " de ").concat(count !== -1 ? count : "more than ".concat(to));
          },
          nextIconButtonText: 'Següent pàgina'
        },
        MuiRating: {
          getLabelText: function getLabelText(value) {
            return "".concat(value, " ").concat(value !== 1 ? 'Estrelles' : 'Estrella');
          },
          emptyLabelText: 'Buit'
        },
        MuiAutocomplete: {
          clearText: 'Netejar',
          closeText: 'Tancar',
          loadingText: 'Carregant…',
          noOptionsText: 'Sense opcions',
          openText: 'Obert'
        },
        MuiAlert: {
          closeText: 'Tancat'
        } // MuiPagination: {
        //   'aria-label': 'Pagination navigation',
        //   getItemAriaLabel: (type, page, selected) => {
        //     if (type === 'page') {
        //       return `${selected ? '' : 'Go to '}page ${page}`;
        //     }
        //     if (type === 'first') {
        //       return 'Go to first page';
        //     }
        //     if (type === 'last') {
        //       return 'Go to last page';
        //     }
        //     if (type === 'next') {
        //       return 'Go to next page';
        //     }
        //     if (type === 'previous') {
        //       return 'Go to previous page';
        //     }
        //     return undefined;
        //   },
        // },

      }
    };
    locale.caES = caES;
    var csCZ = {
      props: {
        MuiBreadcrumbs: {
          expandText: 'Ukázat cestu'
        },
        MuiTablePagination: {
          backIconButtonText: 'Předchozí stránka',
          labelRowsPerPage: 'Řádků na stránce:',
          labelDisplayedRows: function labelDisplayedRows(_ref4) {
            var from = _ref4.from,
                to = _ref4.to,
                count = _ref4.count;
            return "".concat(from, "-").concat(to, " z ").concat(count !== -1 ? count : "more than ".concat(to));
          },
          nextIconButtonText: 'Další stránka'
        },
        MuiRating: {
          getLabelText: function getLabelText(value) {
            if (value === 1) {
              return "".concat(value, " hv\u011Bzdi\u010Dka");
            }

            if (value >= 2 && value <= 4) {
              return "".concat(value, " hv\u011Bzdi\u010Dky");
            }

            return "".concat(value, " hv\u011Bzdi\u010Dek");
          },
          emptyLabelText: 'Prázdné'
        },
        MuiAutocomplete: {
          clearText: 'Vymazat',
          closeText: 'Zavřít',
          loadingText: 'Načítání…',
          noOptionsText: 'Žádné možnosti',
          openText: 'Otevřít'
        },
        MuiAlert: {
          closeText: 'Zavřít'
        },
        MuiPagination: {
          'aria-label': 'Navigace stránkováním',
          getItemAriaLabel: function getItemAriaLabel(type, page, selected) {
            if (type === 'page') {
              return "".concat(selected ? '' : 'Jít na ').concat(page, " str\xE1nku");
            }

            if (type === 'first') {
              return 'Jít na první stránku';
            }

            if (type === 'last') {
              return 'Jít na poslední stránku';
            }

            if (type === 'next') {
              return 'Jít na další stránku';
            }

            if (type === 'previous') {
              return 'Jít na předchozí stránku';
            }

            return undefined;
          }
        }
      }
    };
    var csCZ_1 = locale.csCZ = csCZ;
    var deDE = {
      props: {
        MuiBreadcrumbs: {
          expandText: 'Pfad anzeigen'
        },
        MuiTablePagination: {
          backIconButtonText: 'Nächste Seite',
          labelRowsPerPage: 'Zeilen pro Seite:',
          labelDisplayedRows: function labelDisplayedRows(_ref5) {
            var from = _ref5.from,
                to = _ref5.to,
                count = _ref5.count;
            return "".concat(from, "-").concat(to, " von ").concat(count !== -1 ? count : "more than ".concat(to));
          },
          nextIconButtonText: 'Nächste Seite'
        },
        MuiRating: {
          getLabelText: function getLabelText(value) {
            return "".concat(value, " ").concat(value !== 1 ? 'Sterne' : 'Stern');
          },
          emptyLabelText: 'Keine Wertung'
        },
        MuiAutocomplete: {
          clearText: 'Leeren',
          closeText: 'Schließen',
          loadingText: 'Wird geladen…',
          noOptionsText: 'Keine Optionen',
          openText: 'Öffnen'
        },
        MuiAlert: {
          closeText: 'Schließen'
        },
        MuiPagination: {
          'aria-label': 'Navigation via Seitennummerierung',
          getItemAriaLabel: function getItemAriaLabel(type, page, selected) {
            if (type === 'page') {
              return "".concat(selected ? '' : 'Gehe zu ', "Seite ").concat(page);
            }

            if (type === 'first') {
              return 'Zur ersten Seite';
            }

            if (type === 'last') {
              return 'Zur letzten Seite';
            }

            if (type === 'next') {
              return 'Zur nächsten Seite';
            }

            if (type === 'previous') {
              return 'Zur vorherigen Seite';
            }

            return undefined;
          }
        }
      }
    }; // default

    var deDE_1 = locale.deDE = deDE;
    var enUS = {
      /*
      props: {
        MuiBreadcrumbs: {
          expandText: 'Show path',
        },
        MuiTablePagination: {
          backIconButtonText: 'Previous page',
          labelRowsPerPage: 'Rows per page:',
          labelDisplayedRows: ({ from, to, count }) =>
      `${from}-${to} of ${count !== -1 ? count : `more than ${to}`}`,
          nextIconButtonText: 'Next page',
        },
        MuiRating: {
          getLabelText: value => `${value} Star${value !== 1 ? 's' : ''}`,
          emptyLabelText: 'Empty',
        },
        MuiAutocomplete: {
          clearText: 'Clear',
          closeText: 'Close',
          loadingText: 'Loading…',
          noOptionsText: 'No options',
          openText: 'Open',
        },
        MuiAlert: {
          closeText: 'Close',
        },
        MuiPagination: {
          'aria-label': 'Pagination navigation',
          getItemAriaLabel: (type, page, selected) => {
            if (type === 'page') {
              return `${selected ? '' : 'Go to '}page ${page}`;
            }
            if (type === 'first') {
              return 'Go to first page';
            }
            if (type === 'last') {
              return 'Go to last page';
            }
            if (type === 'next') {
              return 'Go to next page';
            }
            if (type === 'previous') {
              return 'Go to previous page';
            }
            return undefined;
          },
        },
      },
      */
    };
    var enUS_1 = locale.enUS = enUS;
    var esES = {
      props: {
        MuiBreadcrumbs: {
          expandText: 'Mostrar ruta'
        },
        MuiTablePagination: {
          backIconButtonText: 'Página anterior',
          labelRowsPerPage: 'Filas por página:',
          labelDisplayedRows: function labelDisplayedRows(_ref6) {
            var from = _ref6.from,
                to = _ref6.to,
                count = _ref6.count;
            return "".concat(from, "-").concat(to, " de ").concat(count !== -1 ? count : "more than ".concat(to));
          },
          nextIconButtonText: 'Siguiente página'
        },
        MuiRating: {
          getLabelText: function getLabelText(value) {
            return "".concat(value, " Estrella").concat(value !== 1 ? 's' : '');
          },
          emptyLabelText: 'Vacío'
        },
        MuiAutocomplete: {
          clearText: 'Limpiar',
          closeText: 'Cerrar',
          loadingText: 'Cargando…',
          noOptionsText: 'Sin opciones',
          openText: 'Abierto'
        },
        MuiAlert: {
          closeText: 'Cerrar'
        },
        MuiPagination: {
          'aria-label': 'Paginador',
          getItemAriaLabel: function getItemAriaLabel(type, page, selected) {
            if (type === 'page') {
              return "".concat(selected ? '' : 'Ir a la ', "p\xE1gina ").concat(page);
            }

            if (type === 'first') {
              return 'Ir a la primera página';
            }

            if (type === 'last') {
              return 'Ir a la última página';
            }

            if (type === 'next') {
              return 'Ir a la página siguiente';
            }

            if (type === 'previous') {
              return 'Ir a la página anterior';
            }

            return undefined;
          }
        }
      }
    };
    var esES_1 = locale.esES = esES;
    var etEE = {
      props: {
        MuiBreadcrumbs: {
          expandText: 'Näita teed'
        },
        MuiTablePagination: {
          backIconButtonText: 'Eelmine lehekülg',
          labelRowsPerPage: 'Ridu leheküljel:',
          labelDisplayedRows: function labelDisplayedRows(_ref7) {
            var from = _ref7.from,
                to = _ref7.to,
                count = _ref7.count;
            return "".concat(from, "-").concat(to, " / ").concat(count !== -1 ? count : "more than ".concat(to));
          },
          nextIconButtonText: 'Järgmine lehekülg'
        },
        MuiRating: {
          getLabelText: function getLabelText(value) {
            return "".concat(value, " T\xE4rn").concat(value !== 1 ? 'i' : '');
          },
          emptyLabelText: 'Tühi'
        },
        MuiAutocomplete: {
          clearText: 'Tühjenda',
          closeText: 'Sulge',
          loadingText: 'Laen…',
          noOptionsText: 'Valikuid ei ole',
          openText: 'Ava'
        },
        MuiAlert: {
          closeText: 'Sulge'
        },
        MuiPagination: {
          'aria-label': 'Lehekülgede valik',
          getItemAriaLabel: function getItemAriaLabel(type, page, selected) {
            if (type === 'page') {
              return "".concat(selected ? '' : 'Vali ', "lehek\xFClg ").concat(page);
            }

            if (type === 'first') {
              return 'Vali esimene lehekülg';
            }

            if (type === 'last') {
              return 'Vali viimane lehekülg';
            }

            if (type === 'next') {
              return 'Vali järgmine lehekülg';
            }

            if (type === 'previous') {
              return 'Vali eelmine lehekülg';
            }

            return undefined;
          }
        }
      }
    };
    locale.etEE = etEE;
    var faIR = {
      props: {
        // MuiBreadcrumbs: {
        //   expandText: 'Show path',
        // },
        MuiBreadcrumbs: {
          expandText: 'نمایش مسیر'
        },
        MuiTablePagination: {
          backIconButtonText: 'صفحهٔ قبل',
          labelRowsPerPage: 'تعداد سطرهای هر صفحه:',
          labelDisplayedRows: function labelDisplayedRows(_ref8) {
            var from = _ref8.from,
                to = _ref8.to,
                count = _ref8.count;
            return "".concat(from, "-").concat(to, " \u0627\u0632 ").concat(count !== -1 ? count : "more than ".concat(to));
          },
          nextIconButtonText: 'صفحهٔ بعد'
        },
        MuiRating: {
          getLabelText: function getLabelText(value) {
            return "".concat(value, " \u0633\u062A\u0627\u0631\u0647");
          },
          emptyLabelText: 'خالی'
        },
        MuiAutocomplete: {
          clearText: 'پاک‌کردن',
          closeText: 'بستن',
          loadingText: 'در حال بارگذاری…',
          noOptionsText: 'بی‌نتیجه',
          openText: 'بازکردن'
        },
        MuiAlert: {
          closeText: 'بستن'
        },
        MuiPagination: {
          'aria-label': 'ناوبری صفحه',
          getItemAriaLabel: function getItemAriaLabel(type, page, selected) {
            if (type === 'page') {
              return "".concat(selected ? '' : 'رفتن به ', "\u0635\u0641\u062D\u0647\u0654 ").concat(page);
            }

            if (type === 'first') {
              return 'رفتن به اولین صفحه';
            }

            if (type === 'last') {
              return 'رفتن به آخرین صفحه';
            }

            if (type === 'next') {
              return 'رفتن به صفحه‌ی بعدی';
            }

            if (type === 'previous') {
              return 'رفتن به صفحه‌ی قبلی';
            }

            return undefined;
          }
        }
      }
    };
    locale.faIR = faIR;
    var fiFI = {
      props: {
        MuiBreadcrumbs: {
          expandText: 'Näytä reitti'
        },
        MuiTablePagination: {
          backIconButtonText: 'Edellinen sivu',
          labelRowsPerPage: 'Rivejä per sivu:',
          labelDisplayedRows: function labelDisplayedRows(_ref9) {
            var from = _ref9.from,
                to = _ref9.to,
                count = _ref9.count;
            return "".concat(from, "-").concat(to, " / ").concat(count !== -1 ? count : "more than ".concat(to));
          },
          nextIconButtonText: 'Seuraava sivu'
        },
        MuiRating: {
          getLabelText: function getLabelText(value) {
            return "".concat(value, " T\xE4ht").concat(value !== 1 ? 'eä' : 'i');
          },
          emptyLabelText: 'Tyhjä'
        },
        MuiAutocomplete: {
          clearText: 'Tyhjennä',
          closeText: 'Sulje',
          loadingText: 'Ladataan…',
          noOptionsText: 'Ei valintoja',
          openText: 'Avaa'
        },
        MuiAlert: {
          closeText: 'Sulje'
        },
        MuiPagination: {
          'aria-label': 'Sivutus navigaatio',
          getItemAriaLabel: function getItemAriaLabel(type, page, selected) {
            if (type === 'page') {
              return "".concat(selected ? 'sivu' : 'Mene sivulle', " ").concat(page);
            }

            if (type === 'first') {
              return 'Mene ensimmäiselle sivulle';
            }

            if (type === 'last') {
              return 'Mene viimeiselle sivulle';
            }

            if (type === 'next') {
              return 'Mene seuraavalle sivulle';
            }

            if (type === 'previous') {
              return 'Mene edelliselle sivulle';
            }

            return undefined;
          }
        }
      }
    };
    locale.fiFI = fiFI;
    var frFR = {
      props: {
        MuiBreadcrumbs: {
          expandText: 'Montrer le chemin'
        },
        MuiTablePagination: {
          backIconButtonText: 'Page précédente',
          labelRowsPerPage: 'Lignes par page :',
          labelDisplayedRows: function labelDisplayedRows(_ref10) {
            var from = _ref10.from,
                to = _ref10.to,
                count = _ref10.count;
            return "".concat(from, "-").concat(to, " sur ").concat(count !== -1 ? count : "plus que ".concat(to));
          },
          nextIconButtonText: 'Page suivante'
        },
        MuiRating: {
          getLabelText: function getLabelText(value) {
            return "".concat(value, " Etoile").concat(value !== 1 ? 's' : '');
          },
          emptyLabelText: 'Vide'
        },
        MuiAutocomplete: {
          clearText: 'Vider',
          closeText: 'Fermer',
          loadingText: 'Chargement…',
          noOptionsText: 'Pas de résultats',
          openText: 'Ouvrir'
        },
        MuiAlert: {
          closeText: 'Fermer'
        },
        MuiPagination: {
          'aria-label': 'navigation de pagination',
          getItemAriaLabel: function getItemAriaLabel(type, page, selected) {
            if (type === 'page') {
              return "".concat(selected ? '' : 'Aller à la ', "page ").concat(page);
            }

            if (type === 'first') {
              return 'Aller à la première page';
            }

            if (type === 'last') {
              return 'Aller à la dernière page';
            }

            if (type === 'next') {
              return 'Aller à la page suivante';
            }

            if (type === 'previous') {
              return 'Aller à la page précédente';
            }

            return undefined;
          }
        }
      }
    };
    var frFR_1 = locale.frFR = frFR;
    var heIL = {
      props: {
        // MuiBreadcrumbs: {
        //   expandText: 'Show path',
        // },
        MuiTablePagination: {
          backIconButtonText: 'העמוד הקודם',
          labelRowsPerPage: 'שורות בעמוד:',
          labelDisplayedRows: function labelDisplayedRows(_ref11) {
            var from = _ref11.from,
                to = _ref11.to,
                count = _ref11.count;
            return "".concat(from, "-").concat(to, " \u05DE\u05EA\u05D5\u05DA ").concat(count !== -1 ? count : "more than ".concat(to));
          },
          nextIconButtonText: 'העמוד הבא'
        },
        MuiRating: {
          getLabelText: function getLabelText(value) {
            return "".concat(value, " \u05DB\u05D5\u05DB\u05D1").concat(value !== 1 ? 'ים' : '');
          },
          emptyLabelText: 'ריק'
        },
        MuiAutocomplete: {
          clearText: 'נקה',
          closeText: 'סגור',
          loadingText: 'טוען…',
          noOptionsText: 'אין אופציות',
          openText: 'פתח'
        },
        MuiAlert: {
          closeText: 'סגור'
        } // MuiPagination: {
        //   'aria-label': 'Pagination navigation',
        //   getItemAriaLabel: (type, page, selected) => {
        //     if (type === 'page') {
        //       return `${selected ? '' : 'Go to '}page ${page}`;
        //     }
        //     if (type === 'first') {
        //       return 'Go to first page';
        //     }
        //     if (type === 'last') {
        //       return 'Go to last page';
        //     }
        //     if (type === 'next') {
        //       return 'Go to next page';
        //     }
        //     if (type === 'previous') {
        //       return 'Go to previous page';
        //     }
        //     return undefined;
        //   },
        // },

      }
    };
    locale.heIL = heIL;
    var hiIN = {
      props: {
        MuiBreadcrumbs: {
          expandText: 'रास्ता दिखायें'
        },
        MuiTablePagination: {
          backIconButtonText: 'पिछला पृष्ठ',
          labelRowsPerPage: 'पंक्तियाँ प्रति पृष्ठ:',
          labelDisplayedRows: function labelDisplayedRows(_ref12) {
            var from = _ref12.from,
                to = _ref12.to,
                count = _ref12.count;
            return "".concat(from, "-").concat(to === -1 ? count : to, " \u0915\u0941\u0932 ").concat(count, " \u092E\u0947\u0902");
          },
          nextIconButtonText: 'अगला पृष्ठ'
        },
        MuiRating: {
          getLabelText: function getLabelText(value) {
            return "".concat(value, " \u0924\u093E\u0930").concat(value !== 1 ? 'े' : 'ा');
          },
          emptyLabelText: 'रिक्त'
        },
        MuiAutocomplete: {
          clearText: 'हटायें',
          closeText: 'बंद करें',
          loadingText: 'लोड हो रहा है…',
          noOptionsText: 'कोई विकल्प नहीं',
          openText: 'खोलें'
        },
        MuiAlert: {
          closeText: 'बंद करें'
        },
        MuiPagination: {
          'aria-label': 'पृस्ठानुसार संचालन',
          getItemAriaLabel: function getItemAriaLabel(type, page, selected) {
            if (type === 'page') {
              return "\u092A\u0943\u0937\u094D\u0920 ".concat(page, " ").concat(selected ? '' : ' पर जाएँ');
            }

            if (type === 'first') {
              return 'पहले पृष्ठ पर जाएँ';
            }

            if (type === 'last') {
              return 'अंतिम पृष्ठ पर जाएँ';
            }

            if (type === 'next') {
              return 'अगले पृष्ठ पर जाएँ';
            }

            if (type === 'previous') {
              return 'पिछले पृष्ठ पर जाएँ';
            }

            return undefined;
          }
        }
      }
    };
    locale.hiIN = hiIN;
    var huHU = {
      props: {
        MuiBreadcrumbs: {
          expandText: 'Útvonal'
        },
        MuiTablePagination: {
          backIconButtonText: 'Előző oldal',
          labelRowsPerPage: 'Sorok száma:',
          labelDisplayedRows: function labelDisplayedRows(_ref13) {
            var from = _ref13.from,
                to = _ref13.to,
                count = _ref13.count;
            return "".concat(from, "-").concat(to, " / ").concat(count !== -1 ? count : "more than ".concat(to));
          },
          nextIconButtonText: 'Következő oldal'
        },
        MuiRating: {
          getLabelText: function getLabelText(value) {
            return "".concat(value, " Csillag");
          },
          emptyLabelText: 'Üres'
        },
        MuiAutocomplete: {
          clearText: 'Törlés',
          closeText: 'Bezárás',
          loadingText: 'Töltés…',
          noOptionsText: 'Nincs találat',
          openText: 'Megnyitás'
        },
        MuiAlert: {
          closeText: 'Bezárás'
        },
        MuiPagination: {
          'aria-label': 'Lapozás',
          getItemAriaLabel: function getItemAriaLabel(type, page, selected) {
            if (type === 'page') {
              return "".concat(page, ". oldal").concat(selected ? '' : 'ra');
            }

            if (type === 'first') {
              return 'Első oldalra';
            }

            if (type === 'last') {
              return 'Utolsó oldalra';
            }

            if (type === 'next') {
              return 'Következő oldalra';
            }

            if (type === 'previous') {
              return 'Előző oldalra';
            }

            return undefined;
          }
        }
      }
    };
    locale.huHU = huHU;
    var hyAM = {
      props: {
        // MuiBreadcrumbs: {
        //   expandText: 'Show path',
        // },
        MuiTablePagination: {
          backIconButtonText: 'Նախորդը',
          labelRowsPerPage: 'Տողեր մեկ էջում`',
          labelDisplayedRows: function labelDisplayedRows(_ref14) {
            var from = _ref14.from,
                to = _ref14.to,
                count = _ref14.count;
            return "".concat(from, "-").concat(to, " / ").concat(count !== -1 ? count : "more than ".concat(to));
          },
          nextIconButtonText: 'Հաջորդը'
        },
        MuiRating: {
          getLabelText: function getLabelText(value) {
            return "".concat(value, " \u0531\u057D\u057F\u0572");
          },
          emptyLabelText: 'Դատարկ'
        },
        MuiAutocomplete: {
          clearText: 'Մաքրել',
          closeText: 'Փակել',
          loadingText: 'Բեռնում…',
          noOptionsText: 'Տարբերակներ չկան',
          openText: 'Բացել'
        },
        MuiAlert: {
          closeText: 'Փակել'
        } // MuiPagination: {
        //   'aria-label': 'Pagination navigation',
        //   getItemAriaLabel: (type, page, selected) => {
        //     if (type === 'page') {
        //       return `${selected ? '' : 'Go to '}page ${page}`;
        //     }
        //     if (type === 'first') {
        //       return 'Go to first page';
        //     }
        //     if (type === 'last') {
        //       return 'Go to last page';
        //     }
        //     if (type === 'next') {
        //       return 'Go to next page';
        //     }
        //     if (type === 'previous') {
        //       return 'Go to previous page';
        //     }
        //     return undefined;
        //   },
        // },

      }
    };
    locale.hyAM = hyAM;
    var idID = {
      props: {
        // MuiBreadcrumbs: {
        //   expandText: 'Show path',
        // },
        MuiTablePagination: {
          backIconButtonText: 'Halaman sebelumnya',
          labelRowsPerPage: 'Baris per halaman:',
          labelDisplayedRows: function labelDisplayedRows(_ref15) {
            var from = _ref15.from,
                to = _ref15.to,
                count = _ref15.count;
            return "".concat(from, "-").concat(to, " dari ").concat(count !== -1 ? count : "more than ".concat(to));
          },
          nextIconButtonText: 'Halaman selanjutnya'
        },
        MuiRating: {
          getLabelText: function getLabelText(value) {
            return "".concat(value, " Bintang");
          } // emptyLabelText: 'Empty',

        },
        MuiAutocomplete: {
          clearText: 'Hapus',
          closeText: 'Tutup',
          loadingText: 'Memuat…',
          noOptionsText: 'Tidak ada opsi',
          openText: 'Buka'
        },
        MuiAlert: {
          closeText: 'Tutup'
        } // MuiPagination: {
        //   'aria-label': 'Pagination navigation',
        //   getItemAriaLabel: (type, page, selected) => {
        //     if (type === 'page') {
        //       return `${selected ? '' : 'Go to '}page ${page}`;
        //     }
        //     if (type === 'first') {
        //       return 'Go to first page';
        //     }
        //     if (type === 'last') {
        //       return 'Go to last page';
        //     }
        //     if (type === 'next') {
        //       return 'Go to next page';
        //     }
        //     if (type === 'previous') {
        //       return 'Go to previous page';
        //     }
        //     return undefined;
        //   },
        // },

      }
    };
    locale.idID = idID;
    var isIS = {
      props: {
        // MuiBreadcrumbs: {
        //   expandText: 'Show path',
        // },
        MuiTablePagination: {
          backIconButtonText: 'Fyrri síða',
          labelRowsPerPage: 'Raðir á síðu:',
          labelDisplayedRows: function labelDisplayedRows(_ref16) {
            var from = _ref16.from,
                to = _ref16.to,
                count = _ref16.count;
            return "".concat(from, "-").concat(to, " af ").concat(count !== -1 ? count : "more than ".concat(to));
          },
          nextIconButtonText: 'Næsta síða'
        },
        MuiRating: {
          getLabelText: function getLabelText(value) {
            return "".concat(value, " ").concat(value === 1 ? 'Stjarna' : 'Stjörnur');
          },
          emptyLabelText: 'Tómt'
        },
        MuiAutocomplete: {
          clearText: 'Hreinsa',
          closeText: 'Loka',
          loadingText: 'Hlaða…',
          noOptionsText: 'Engar niðurstöður',
          openText: 'Opna'
        },
        MuiAlert: {
          closeText: 'Loka'
        } // MuiPagination: {
        //   'aria-label': 'Pagination navigation',
        //   getItemAriaLabel: (type, page, selected) => {
        //     if (type === 'page') {
        //       return `${selected ? '' : 'Go to '}page ${page}`;
        //     }
        //     if (type === 'first') {
        //       return 'Go to first page';
        //     }
        //     if (type === 'last') {
        //       return 'Go to last page';
        //     }
        //     if (type === 'next') {
        //       return 'Go to next page';
        //     }
        //     if (type === 'previous') {
        //       return 'Go to previous page';
        //     }
        //     return undefined;
        //   },
        // },

      }
    };
    locale.isIS = isIS;
    var itIT = {
      props: {
        MuiBreadcrumbs: {
          expandText: 'Visualizza percorso'
        },
        MuiTablePagination: {
          backIconButtonText: 'Pagina precedente',
          labelRowsPerPage: 'Righe per pagina:',
          labelDisplayedRows: function labelDisplayedRows(_ref17) {
            var from = _ref17.from,
                to = _ref17.to,
                count = _ref17.count;
            return "".concat(from, "-").concat(to, " di ").concat(count !== -1 ? count : "more than ".concat(to));
          },
          nextIconButtonText: 'Pagina successiva'
        },
        MuiRating: {
          getLabelText: function getLabelText(value) {
            return "".concat(value, " Stell").concat(value !== 1 ? 'e' : 'a');
          },
          emptyLabelText: 'Vuoto'
        },
        MuiAutocomplete: {
          clearText: 'Svuota',
          closeText: 'Chiudi',
          loadingText: 'Caricamento in corso…',
          noOptionsText: 'Nessuna opzione',
          openText: 'Apri'
        },
        MuiAlert: {
          closeText: 'Chiudi'
        },
        MuiPagination: {
          'aria-label': 'Navigazione impaginata',
          getItemAriaLabel: function getItemAriaLabel(type, page, selected) {
            if (type === 'page') {
              return "".concat(selected ? '' : 'Vai alla ', "pagina ").concat(page);
            }

            if (type === 'first') {
              return 'Vai alla prima pagina';
            }

            if (type === 'last') {
              return "Vai all'ultima pagina";
            }

            if (type === 'next') {
              return 'Vai alla pagina successiva';
            }

            if (type === 'previous') {
              return 'Vai alla pagina precedente';
            }

            return undefined;
          }
        }
      }
    };
    var itIT_1 = locale.itIT = itIT;
    var jaJP = {
      props: {
        // MuiBreadcrumbs: {
        //   expandText: 'Show path',
        // },
        MuiTablePagination: {
          backIconButtonText: '前のページ',
          labelRowsPerPage: 'ページごとの行:',
          labelDisplayedRows: function labelDisplayedRows(_ref18) {
            var from = _ref18.from,
                to = _ref18.to,
                count = _ref18.count;
            return "".concat(from, "-").concat(to, " of ").concat(count !== -1 ? count : "more than ".concat(to));
          },
          nextIconButtonText: '次のページ'
        },
        MuiRating: {
          getLabelText: function getLabelText(value) {
            return "".concat(value, " ").concat(value !== 1 ? '出演者' : '星');
          } // emptyLabelText: 'Empty',

        },
        MuiAutocomplete: {
          clearText: 'クリア',
          closeText: '閉じる',
          loadingText: '積み込み…',
          noOptionsText: '結果がありません',
          openText: '開いた'
        },
        MuiAlert: {
          closeText: '閉じる'
        } // MuiPagination: {
        //   'aria-label': 'Pagination navigation',
        //   getItemAriaLabel: (type, page, selected) => {
        //     if (type === 'page') {
        //       return `${selected ? '' : 'Go to '}page ${page}`;
        //     }
        //     if (type === 'first') {
        //       return 'Go to first page';
        //     }
        //     if (type === 'last') {
        //       return 'Go to last page';
        //     }
        //     if (type === 'next') {
        //       return 'Go to next page';
        //     }
        //     if (type === 'previous') {
        //       return 'Go to previous page';
        //     }
        //     return undefined;
        //   },
        // },

      }
    };
    var jaJP_1 = locale.jaJP = jaJP;
    var koKR = {
      props: {
        // MuiBreadcrumbs: {
        //   expandText: 'Show path',
        // },
        MuiTablePagination: {
          backIconButtonText: '이전 페이지',
          labelRowsPerPage: '페이지 당 행:',
          labelDisplayedRows: function labelDisplayedRows(_ref19) {
            var from = _ref19.from,
                to = _ref19.to,
                count = _ref19.count;
            return "".concat(from, "-").concat(to, " / ").concat(count !== -1 ? count : "more than ".concat(to));
          },
          nextIconButtonText: '다음 페이지'
        },
        MuiRating: {
          getLabelText: function getLabelText(value) {
            return "".concat(value, " \uC810");
          } // emptyLabelText: 'Empty',

        },
        MuiAutocomplete: {
          clearText: '지우기',
          closeText: '닫기',
          loadingText: '불러오는 중…',
          noOptionsText: '옵션 없음',
          openText: '열기'
        }
      }
    };
    locale.koKR = koKR;
    var nlNL = {
      props: {
        // MuiBreadcrumbs: {
        //   expandText: 'Show path',
        // },
        MuiTablePagination: {
          backIconButtonText: 'Vorige pagina',
          labelRowsPerPage: 'Regels per pagina :',
          labelDisplayedRows: function labelDisplayedRows(_ref20) {
            var from = _ref20.from,
                to = _ref20.to,
                count = _ref20.count;
            return "".concat(from, "-").concat(to, " van ").concat(count !== -1 ? count : "more than ".concat(to));
          },
          nextIconButtonText: 'Volgende pagina'
        },
        MuiRating: {
          getLabelText: function getLabelText(value) {
            return "".concat(value, " Ster").concat(value !== 1 ? 'ren' : '');
          } // emptyLabelText: 'Empty',

        },
        MuiAutocomplete: {
          clearText: 'Wissen',
          closeText: 'Sluiten',
          loadingText: 'Laden…',
          noOptionsText: 'Geen opties',
          openText: 'Openen'
        },
        MuiAlert: {
          closeText: 'Sluiten'
        } // MuiPagination: {
        //   'aria-label': 'Pagination navigation',
        //   getItemAriaLabel: (type, page, selected) => {
        //     if (type === 'page') {
        //       return `${selected ? '' : 'Go to '}page ${page}`;
        //     }
        //     if (type === 'first') {
        //       return 'Go to first page';
        //     }
        //     if (type === 'last') {
        //       return 'Go to last page';
        //     }
        //     if (type === 'next') {
        //       return 'Go to next page';
        //     }
        //     if (type === 'previous') {
        //       return 'Go to previous page';
        //     }
        //     return undefined;
        //   },
        // },

      }
    };
    var nlNL_1 = locale.nlNL = nlNL;
    var plPL = {
      props: {
        MuiBreadcrumbs: {
          expandText: 'Pokaż ścieżkę'
        },
        MuiTablePagination: {
          backIconButtonText: 'Poprzednia strona',
          labelRowsPerPage: 'Wierszy na stronę:',
          labelDisplayedRows: function labelDisplayedRows(_ref21) {
            var from = _ref21.from,
                to = _ref21.to,
                count = _ref21.count;
            return "".concat(from, "-").concat(to, " z ").concat(count !== -1 ? count : "more than ".concat(to));
          },
          nextIconButtonText: 'Następna strona'
        },
        MuiRating: {
          getLabelText: function getLabelText(value) {
            var pluralForm = 'gwiazdek';
            var lastDigit = value % 10;

            if ((value < 10 || value > 20) && lastDigit > 1 && lastDigit < 5) {
              pluralForm = 'gwiazdki';
            } else if (value === 1) {
              pluralForm = 'gwiazdka';
            }

            return "".concat(value, " ").concat(pluralForm);
          },
          emptyLabelText: 'Brak gwiazdek'
        },
        MuiAutocomplete: {
          clearText: 'Wyczyść',
          closeText: 'Zamknij',
          loadingText: 'Ładowanie…',
          noOptionsText: 'Brak opcji',
          openText: 'Otwórz'
        },
        MuiAlert: {
          closeText: 'Zamknij'
        },
        MuiPagination: {
          'aria-label': 'Nawigacja podziału na strony',
          getItemAriaLabel: function getItemAriaLabel(type, page, selected) {
            if (type === 'page') {
              return selected ? "".concat(page, ". strona") : "Przejd\u017A do ".concat(page, ". strony");
            }

            if (type === 'first') {
              return 'Przejdź do pierwszej strony';
            }

            if (type === 'last') {
              return 'Przejdź do ostatniej strony';
            }

            if (type === 'next') {
              return 'Przejdź do następnej strony';
            }

            if (type === 'previous') {
              return 'Przejdź do poprzedniej strony';
            }

            return undefined;
          }
        }
      }
    };
    var plPL_1 = locale.plPL = plPL;
    var ptBR = {
      props: {
        MuiBreadcrumbs: {
          expandText: 'Mostrar caminho'
        },
        MuiTablePagination: {
          backIconButtonText: 'Página anterior',
          labelRowsPerPage: 'Linhas por página:',
          labelDisplayedRows: function labelDisplayedRows(_ref22) {
            var from = _ref22.from,
                to = _ref22.to,
                count = _ref22.count;
            return "".concat(from, "-").concat(to, " de ").concat(count !== -1 ? count : "more than ".concat(to));
          },
          nextIconButtonText: 'Próxima página'
        },
        MuiRating: {
          getLabelText: function getLabelText(value) {
            return "".concat(value, " Estrela").concat(value !== 1 ? 's' : '');
          },
          emptyLabelText: 'Vazio'
        },
        MuiAutocomplete: {
          clearText: 'Limpar',
          closeText: 'Fechar',
          loadingText: 'Carregando…',
          noOptionsText: 'Sem opções',
          openText: 'Abrir'
        },
        MuiAlert: {
          closeText: 'Fechar'
        },
        MuiPagination: {
          'aria-label': 'Navegar pela paginação',
          getItemAriaLabel: function getItemAriaLabel(type, page, selected) {
            if (type === 'page') {
              return "".concat(selected ? '' : 'Ir para a ', "p\xE1gina ").concat(page);
            }

            if (type === 'first') {
              return 'Ir para a primeira página';
            }

            if (type === 'last') {
              return 'Ir para a última página';
            }

            if (type === 'next') {
              return 'Ir para a próxima página';
            }

            if (type === 'previous') {
              return 'Ir para a página anterior';
            }

            return undefined;
          }
        }
      }
    };
    var ptBR_1 = locale.ptBR = ptBR;
    var ptPT = {
      props: {
        MuiBreadcrumbs: {
          expandText: 'Mostrar caminho'
        },
        MuiTablePagination: {
          backIconButtonText: 'Página anterior',
          labelRowsPerPage: 'Linhas por página:',
          labelDisplayedRows: function labelDisplayedRows(_ref23) {
            var from = _ref23.from,
                to = _ref23.to,
                count = _ref23.count;
            return "".concat(from, "-").concat(to, " de ").concat(count !== -1 ? count : "more than ".concat(to));
          },
          nextIconButtonText: 'Próxima página'
        },
        MuiRating: {
          getLabelText: function getLabelText(value) {
            return "".concat(value, " Estrela").concat(value !== 1 ? 's' : '');
          },
          emptyLabelText: 'Vazio'
        },
        MuiAutocomplete: {
          clearText: 'Limpar',
          closeText: 'Fechar',
          loadingText: 'A carregar…',
          noOptionsText: 'Sem opções',
          openText: 'Abrir'
        },
        MuiAlert: {
          closeText: 'Fechar'
        },
        MuiPagination: {
          'aria-label': 'Navegar por páginas',
          getItemAriaLabel: function getItemAriaLabel(type, page, selected) {
            if (type === 'page') {
              return "".concat(selected ? '' : 'Ir para a ', "p\xE1gina ").concat(page);
            }

            if (type === 'first') {
              return 'Primeira página';
            }

            if (type === 'last') {
              return 'Última página';
            }

            if (type === 'next') {
              return 'Próxima página';
            }

            if (type === 'previous') {
              return 'Página anterior';
            }

            return undefined;
          }
        }
      }
    };
    locale.ptPT = ptPT;
    var roRO = {
      props: {
        MuiBreadcrumbs: {
          expandText: 'Arată calea'
        },
        MuiTablePagination: {
          backIconButtonText: 'Pagina precedentă',
          labelRowsPerPage: 'Rânduri pe pagină:',
          labelDisplayedRows: function labelDisplayedRows(_ref24) {
            var from = _ref24.from,
                to = _ref24.to,
                count = _ref24.count;
            return "".concat(from, "-").concat(to, " din ").concat(count !== -1 ? count : "more than ".concat(to));
          },
          nextIconButtonText: 'Pagina următoare'
        },
        MuiRating: {
          getLabelText: function getLabelText(value) {
            return "".concat(value, " St").concat(value !== 1 ? 'ele' : 'ea');
          },
          emptyLabelText: 'Gol'
        },
        MuiAutocomplete: {
          clearText: 'Șterge',
          closeText: 'Închide',
          loadingText: 'Se încarcă…',
          noOptionsText: 'Nicio opțiune',
          openText: 'Deschide'
        },
        MuiAlert: {
          closeText: 'Închide'
        },
        MuiPagination: {
          'aria-label': 'Navigare prin paginare',
          getItemAriaLabel: function getItemAriaLabel(type, page, selected) {
            if (type === 'page') {
              return "".concat(selected ? '' : 'Mergi la ', "pagina ").concat(page);
            }

            if (type === 'first') {
              return 'Mergi la prima pagină';
            }

            if (type === 'last') {
              return 'Mergi la ultima pagină';
            }

            if (type === 'next') {
              return 'Mergi la pagina următoare';
            }

            if (type === 'previous') {
              return 'Mergi la pagina precedentă';
            }

            return undefined;
          }
        }
      }
    };
    locale.roRO = roRO;
    var ruRU = {
      props: {
        // MuiBreadcrumbs: {
        //   expandText: 'Show path',
        // },
        MuiTablePagination: {
          backIconButtonText: 'Предыдущая страница',
          labelRowsPerPage: 'Строк на странице:',
          labelDisplayedRows: function labelDisplayedRows(_ref25) {
            var from = _ref25.from,
                to = _ref25.to,
                count = _ref25.count;
            return "".concat(from, "-").concat(to, " \u0438\u0437 ").concat(count !== -1 ? count : "\u0431\u043E\u043B\u0435\u0435 \u0447\u0435\u043C ".concat(to));
          },
          nextIconButtonText: 'Следующая страница'
        },
        MuiRating: {
          getLabelText: function getLabelText(value) {
            var pluralForm = 'Звёзд';
            var lastDigit = value % 10;

            if (lastDigit > 1 && lastDigit < 5) {
              pluralForm = 'Звезды';
            } else if (lastDigit === 1) {
              pluralForm = 'Звезда';
            }

            return "".concat(value, " ").concat(pluralForm);
          } // emptyLabelText: 'Empty',

        },
        MuiAutocomplete: {
          clearText: 'Очистить',
          closeText: 'Закрыть',
          loadingText: 'Загрузка…',
          noOptionsText: 'Нет доступных вариантов',
          openText: 'Открыть'
        },
        MuiAlert: {
          closeText: 'Закрыть'
        } // MuiPagination: {
        //   'aria-label': 'Pagination navigation',
        //   getItemAriaLabel: (type, page, selected) => {
        //     if (type === 'page') {
        //       return `${selected ? '' : 'Go to '}page ${page}`;
        //     }
        //     if (type === 'first') {
        //       return 'Go to first page';
        //     }
        //     if (type === 'last') {
        //       return 'Go to last page';
        //     }
        //     if (type === 'next') {
        //       return 'Go to next page';
        //     }
        //     if (type === 'previous') {
        //       return 'Go to previous page';
        //     }
        //     return undefined;
        //   },
        // },

      }
    };
    var ruRU_1 = locale.ruRU = ruRU;
    var skSK = {
      props: {
        // MuiBreadcrumbs: {
        //   expandText: 'Show path',
        // },
        MuiTablePagination: {
          backIconButtonText: 'Predchádzajúca stránka',
          labelRowsPerPage: 'Riadkov na stránke:',
          labelDisplayedRows: function labelDisplayedRows(_ref26) {
            var from = _ref26.from,
                to = _ref26.to,
                count = _ref26.count;
            return "".concat(from, "-").concat(to, " z ").concat(count !== -1 ? count : "more than ".concat(to));
          },
          nextIconButtonText: 'Ďalšia stránka'
        },
        MuiRating: {
          getLabelText: function getLabelText(value) {
            if (value === 1) {
              return "".concat(value, " hviezdi\u010Dka");
            }

            if (value >= 2 && value <= 4) {
              return "".concat(value, " hviezdi\u010Dky");
            }

            return "".concat(value, " hviezdi\u010Diek");
          } // emptyLabelText: 'Empty',

        },
        MuiAutocomplete: {
          clearText: 'Vymazať',
          closeText: 'Zavrieť',
          loadingText: 'Načítanie…',
          noOptionsText: 'Žiadne možnosti',
          openText: 'Otvoriť'
        },
        MuiAlert: {
          closeText: 'Zavrieť'
        } // MuiPagination: {
        //   'aria-label': 'Pagination navigation',
        //   getItemAriaLabel: (type, page, selected) => {
        //     if (type === 'page') {
        //       return `${selected ? '' : 'Go to '}page ${page}`;
        //     }
        //     if (type === 'first') {
        //       return 'Go to first page';
        //     }
        //     if (type === 'last') {
        //       return 'Go to last page';
        //     }
        //     if (type === 'next') {
        //       return 'Go to next page';
        //     }
        //     if (type === 'previous') {
        //       return 'Go to previous page';
        //     }
        //     return undefined;
        //   },
        // },

      }
    };
    var skSK_1 = locale.skSK = skSK;
    var svSE = {
      props: {
        // MuiBreadcrumbs: {
        //   expandText: 'Show path',
        // },
        MuiTablePagination: {
          backIconButtonText: 'Föregående sida',
          labelRowsPerPage: 'Rader per sida:',
          labelDisplayedRows: function labelDisplayedRows(_ref27) {
            var from = _ref27.from,
                to = _ref27.to,
                count = _ref27.count;
            return "".concat(from, "-").concat(to, " av ").concat(count !== -1 ? count : "more than ".concat(to));
          },
          nextIconButtonText: 'Nästa sida'
        },
        MuiRating: {
          getLabelText: function getLabelText(value) {
            return "".concat(value, " ").concat(value !== 1 ? 'Stjärnor' : 'Stjärna');
          } // emptyLabelText: 'Empty',

        },
        MuiAutocomplete: {
          clearText: 'Rensa',
          closeText: 'Stäng',
          loadingText: 'Laddar…',
          noOptionsText: 'Inga alternativ',
          openText: 'Öppen'
        },
        MuiAlert: {
          closeText: 'Stäng'
        } // MuiPagination: {
        //   'aria-label': 'Pagination navigation',
        //   getItemAriaLabel: (type, page, selected) => {
        //     if (type === 'page') {
        //       return `${selected ? '' : 'Go to '}page ${page}`;
        //     }
        //     if (type === 'first') {
        //       return 'Go to first page';
        //     }
        //     if (type === 'last') {
        //       return 'Go to last page';
        //     }
        //     if (type === 'next') {
        //       return 'Go to next page';
        //     }
        //     if (type === 'previous') {
        //       return 'Go to previous page';
        //     }
        //     return undefined;
        //   },
        // },

      }
    };
    locale.svSE = svSE;
    var trTR = {
      props: {
        MuiBreadcrumbs: {
          expandText: 'Yolu göster'
        },
        MuiTablePagination: {
          backIconButtonText: 'Önceki sayfa',
          labelRowsPerPage: 'Sayfa başına satır:',
          labelDisplayedRows: function labelDisplayedRows(_ref28) {
            var from = _ref28.from,
                to = _ref28.to,
                count = _ref28.count;
            return "".concat(from, "-").concat(to, " tanesinden ").concat(count !== -1 ? count : "more than ".concat(to));
          },
          nextIconButtonText: 'Sonraki sayfa'
        },
        MuiRating: {
          getLabelText: function getLabelText(value) {
            return "".concat(value, " Y\u0131ld\u0131z");
          },
          emptyLabelText: 'Boş'
        },
        MuiAutocomplete: {
          clearText: 'Temizle',
          closeText: 'Kapat',
          loadingText: 'Yükleniyor…',
          noOptionsText: 'Seçenek yok',
          openText: 'Aç'
        },
        MuiAlert: {
          closeText: 'Kapat'
        },
        MuiPagination: {
          'aria-label': 'Sayfa navigasyonu',
          getItemAriaLabel: function getItemAriaLabel(type, page, selected) {
            if (type === 'page') {
              return "".concat(page, ". ").concat(selected ? 'sayfa' : 'sayfaya git');
            }

            if (type === 'first') {
              return 'İlk sayfaya git';
            }

            if (type === 'last') {
              return 'Son sayfaya git';
            }

            if (type === 'next') {
              return 'Sonraki sayfaya git';
            }

            if (type === 'previous') {
              return 'Önceki sayfaya git';
            }

            return undefined;
          }
        }
      }
    };
    var trTR_1 = locale.trTR = trTR;
    var ukUA = {
      props: {
        MuiBreadcrumbs: {
          expandText: 'Показати шлях сторінок'
        },
        MuiTablePagination: {
          backIconButtonText: 'Попередня сторінка',
          labelRowsPerPage: 'Рядків на сторінці:',
          labelDisplayedRows: function labelDisplayedRows(_ref29) {
            var from = _ref29.from,
                to = _ref29.to,
                count = _ref29.count;
            return "".concat(from, "-").concat(to, " \u0437 ").concat(count !== -1 ? count : "\u043F\u043E\u043D\u0430\u0434 ".concat(to));
          },
          nextIconButtonText: 'Наступна сторінка'
        },
        MuiRating: {
          getLabelText: function getLabelText(value) {
            var pluralForm = 'Зірок';
            var lastDigit = value % 10;

            if (lastDigit > 1 && lastDigit < 5) {
              pluralForm = 'Зірки';
            } else if (lastDigit === 1) {
              pluralForm = 'Зірка';
            }

            return "".concat(value, " ").concat(pluralForm);
          },
          emptyLabelText: 'Рейтинг відсутній'
        },
        MuiAutocomplete: {
          clearText: 'Очистити',
          closeText: 'Згорнути',
          loadingText: 'Завантаження…',
          noOptionsText: 'Немає варіантів',
          openText: 'Розгорнути'
        },
        MuiAlert: {
          closeText: 'Згорнути'
        },
        MuiPagination: {
          'aria-label': 'Навігація сторінками',
          getItemAriaLabel: function getItemAriaLabel(type, page, selected) {
            if (type === 'page') {
              return "".concat(selected ? '' : 'Перейти на ', "\u0441\u0442\u043E\u0440\u0456\u043D\u043A\u0443 ").concat(page);
            }

            if (type === 'first') {
              return 'Перейти на першу сторінку';
            }

            if (type === 'last') {
              return 'Перейти на останню сторінку';
            }

            if (type === 'next') {
              return 'Перейти на наступну сторінку';
            }

            if (type === 'previous') {
              return 'Перейти на попередню сторінку';
            }

            return undefined;
          }
        }
      }
    };
    var ukUA_1 = locale.ukUA = ukUA;
    var viVN = {
      props: {
        // MuiBreadcrumbs: {
        //   expandText: 'Show path',
        // },
        MuiTablePagination: {
          backIconButtonText: 'Trang trước',
          labelRowsPerPage: 'Số hàng mỗi trang:',
          labelDisplayedRows: function labelDisplayedRows(_ref30) {
            var from = _ref30.from,
                to = _ref30.to,
                count = _ref30.count;
            return "".concat(from, "-").concat(to, " trong ").concat(count !== -1 ? count : "nhi\u1EC1u h\u01A1n ".concat(to));
          },
          nextIconButtonText: 'Trang sau'
        },
        MuiRating: {
          getLabelText: function getLabelText(value) {
            return "".concat(value, " sao");
          },
          emptyLabelText: 'Trống'
        },
        MuiAutocomplete: {
          clearText: 'Xóa',
          closeText: 'Đóng',
          loadingText: 'Đang tải…',
          noOptionsText: 'Không có lựa chọn',
          openText: 'Mở'
        },
        MuiAlert: {
          closeText: 'Đóng'
        } // MuiPagination: {
        //   'aria-label': 'Pagination navigation',
        //   getItemAriaLabel: (type, page, selected) => {
        //     if (type === 'page') {
        //       return `${selected ? '' : 'Go to '}page ${page}`;
        //     }
        //     if (type === 'first') {
        //       return 'Go to first page';
        //     }
        //     if (type === 'last') {
        //       return 'Go to last page';
        //     }
        //     if (type === 'next') {
        //       return 'Go to next page';
        //     }
        //     if (type === 'previous') {
        //       return 'Go to previous page';
        //     }
        //     return undefined;
        //   },
        // },

      }
    };
    locale.viVN = viVN;
    var zhCN = {
      props: {
        // MuiBreadcrumbs: {
        //   expandText: 'Show path',
        // },
        MuiTablePagination: {
          backIconButtonText: '上一页',
          labelRowsPerPage: '每页行数:',
          labelDisplayedRows: function labelDisplayedRows(_ref31) {
            var from = _ref31.from,
                to = _ref31.to,
                count = _ref31.count;
            return "".concat(from, "-").concat(to, " \u7684 ").concat(count !== -1 ? count : "\u8D85\u8FC7 ".concat(to));
          },
          nextIconButtonText: '下一页'
        },
        MuiRating: {
          getLabelText: function getLabelText(value) {
            return "".concat(value, " \u661F").concat(value !== 1 ? '星' : '');
          } // emptyLabelText: 'Empty',

        },
        MuiAutocomplete: {
          clearText: '明确',
          closeText: '关',
          loadingText: '载入中…',
          noOptionsText: '没有选择',
          openText: '打开'
        },
        MuiAlert: {
          closeText: '关'
        } // MuiPagination: {
        //   'aria-label': 'Pagination navigation',
        //   getItemAriaLabel: (type, page, selected) => {
        //     if (type === 'page') {
        //       return `${selected ? '' : 'Go to '}page ${page}`;
        //     }
        //     if (type === 'first') {
        //       return 'Go to first page';
        //     }
        //     if (type === 'last') {
        //       return 'Go to last page';
        //     }
        //     if (type === 'next') {
        //       return 'Go to next page';
        //     }
        //     if (type === 'previous') {
        //       return 'Go to previous page';
        //     }
        //     return undefined;
        //   },
        // },

      }
    };
    locale.zhCN = zhCN;

    function chainPropTypes(propType1, propType2) {
      if (process.env.NODE_ENV === 'production') {
        return () => null;
      }

      return function validate(...args) {
        return propType1(...args) || propType2(...args);
      };
    }

    var ne;!function(e){e.resize="resize",e.debouncedResize="debouncedResize",e.componentError="componentError",e.unmount="unmount",e.cellModeChange="cellModeChange",e.cellClick="cellClick",e.cellDoubleClick="cellDoubleClick",e.cellMouseDown="cellMouseDown",e.cellMouseUp="cellMouseUp",e.cellOver="cellOver",e.cellOut="cellOut",e.cellEnter="cellEnter",e.cellLeave="cellLeave",e.cellKeyDown="cellKeyDown",e.cellBlur="cellBlur",e.cellFocus="cellFocus",e.cellFocusIn="cellFocusIn",e.cellFocusOut="cellFocusOut",e.cellDragStart="cellDragStart",e.cellDragEnter="cellDragEnter",e.cellDragOver="cellDragOver",e.cellDragEnd="cellDragEnd",e.editCellPropsChange="editCellPropsChange",e.cellEditCommit="cellEditCommit",e.cellEditStart="cellEditStart",e.cellEditStop="cellEditStop",e.rowEditStart="rowEditStart",e.rowEditStop="rowEditStop",e.rowEditCommit="rowEditCommit",e.cellNavigationKeyDown="cellNavigationKeyDown",e.rowClick="rowClick",e.rowDoubleClick="rowDoubleClick",e.rowOver="rowOver",e.rowOut="rowOut",e.rowEnter="rowEnter",e.rowLeave="rowLeave",e.editRowsModelChange="editRowsModelChange",e.columnHeaderBlur="columnHeaderBlur",e.columnHeaderFocus="columnHeaderFocus",e.columnHeaderNavigationKeyDown="columnHeaderNavigationKeyDown",e.columnHeaderKeyDown="columnHeaderKeyDown",e.columnHeaderClick="columnHeaderClick",e.columnHeaderDoubleClick="columnHeaderDoubleClick",e.columnHeaderOver="columnHeaderOver",e.columnHeaderOut="columnHeaderOut",e.columnHeaderEnter="columnHeaderEnter",e.columnHeaderLeave="columnHeaderLeave",e.columnHeaderDragStart="columnHeaderDragStart",e.columnHeaderDragOver="columnHeaderDragOver",e.columnHeaderDragEnter="columnHeaderDragEnter",e.columnHeaderDragEnd="columnHeaderDragEnd",e.selectionChange="selectionChange",e.pageChange="pageChange",e.pageSizeChange="pageSizeChange",e.rowsScroll="rowsScroll",e.rowsScrollEnd="rowsScrollEnd",e.columnSeparatorMouseDown="columnSeparatorMouseDown",e.columnResize="columnResize",e.columnWidthChange="columnWidthChange",e.columnResizeStart="columnResizeStart",e.columnResizeStop="columnResizeStop",e.columnOrderChange="columnOrderChange",e.rowsUpdate="rowsUpdate",e.rowsSet="rowsSet",e.rowsClear="rowsClear",e.columnsChange="columnsChange",e.sortModelChange="sortModelChange",e.filterModelChange="filterModelChange",e.stateChange="stateChange",e.columnVisibilityChange="columnVisibilityChange",e.viewportRowsChange="viewportRowsChange";}(ne||(ne={}));const le=React__namespace.createContext(void 0);function ae(){const t=React__namespace.useContext(le);if(void 0===t)throw new Error(["Material-UI X: Could not find the data grid context.","It looks like you rendered your component outside of a DataGrid or DataGridPro parent component.","This can also happen if you are bundling multiple versions of the data grid."].join("\n"));return t}"production"!==process.env.NODE_ENV&&(le.displayName="GridApiContext");const ie=e=>e.columns,se=e=>e.columns.all,ce=e=>e.columns.lookup,ue=createSelector(se,ce,((e,t)=>e.map((e=>t[e])))),de=createSelector(ue,(e=>e.filter((e=>null!=e.field&&!e.hide)))),pe=createSelector(de,(e=>{const t=[];return {totalWidth:e.reduce(((e,r)=>(t.push(e),e+r.computedWidth)),0),positions:t}})),me=createSelector(ue,(e=>e.filter((e=>e.filterable)))),fe=createSelector(me,(e=>e.map((e=>e.field)))),ge=createSelector(de,(e=>e.length)),be=createSelector(pe,(e=>e.totalWidth));function he(e,t){return e===t||e!=e&&t!=t}function ve(e,t){for(var r=e.length;r--;)if(he(e[r][0],t))return r;return -1}var Ce=Array.prototype.splice;function we(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var o=e[t];this.set(o[0],o[1]);}}we.prototype.clear=function(){this.__data__=[],this.size=0;},we.prototype.delete=function(e){var t=this.__data__,r=ve(t,e);return !(r<0)&&(r==t.length-1?t.pop():Ce.call(t,r,1),--this.size,!0)},we.prototype.get=function(e){var t=this.__data__,r=ve(t,e);return r<0?void 0:t[r][1]},we.prototype.has=function(e){return ve(this.__data__,e)>-1},we.prototype.set=function(e,t){var r=this.__data__,o=ve(r,e);return o<0?(++this.size,r.push([e,t])):r[o][1]=t,this};var Oe="object"==typeof global&&global&&global.Object===Object&&global,ye="object"==typeof self&&self&&self.Object===Object&&self,Ee=Oe||ye||Function("return this")(),Se=Ee.Symbol,xe=Object.prototype,Re=xe.hasOwnProperty,ke=xe.toString,Me=Se?Se.toStringTag:void 0;var Pe=Object.prototype.toString;var Ie=Se?Se.toStringTag:void 0;function Le(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":Ie&&Ie in Object(e)?function(e){var t=Re.call(e,Me),r=e[Me];try{e[Me]=void 0;var o=!0;}catch(e){}var n=ke.call(e);return o&&(t?e[Me]=r:delete e[Me]),n}(e):function(e){return Pe.call(e)}(e)}function je(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}function Fe(e){if(!je(e))return !1;var t=Le(e);return "[object Function]"==t||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t}var De,ze=Ee["__core-js_shared__"],Te=(De=/[^.]+$/.exec(ze&&ze.keys&&ze.keys.IE_PROTO||""))?"Symbol(src)_1."+De:"";var He=Function.prototype.toString;function Ae(e){if(null!=e){try{return He.call(e)}catch(e){}try{return e+""}catch(e){}}return ""}var $e=/^\[object .+?Constructor\]$/,_e=Function.prototype,Ne=Object.prototype,Ve=_e.toString,Be=Ne.hasOwnProperty,We=RegExp("^"+Ve.call(Be).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");function Ge(e){return !(!je(e)||(t=e,Te&&Te in t))&&(Fe(e)?We:$e).test(Ae(e));var t;}function Ue(e,t){var r=function(e,t){return null==e?void 0:e[t]}(e,t);return Ge(r)?r:void 0}var Ke=Ue(Ee,"Map"),Ze=Ue(Object,"create");var Ye=Object.prototype.hasOwnProperty;var qe=Object.prototype.hasOwnProperty;function Xe(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var o=e[t];this.set(o[0],o[1]);}}function Je(e,t){var r,o,n=e.__data__;return ("string"==(o=typeof(r=t))||"number"==o||"symbol"==o||"boolean"==o?"__proto__"!==r:null===r)?n["string"==typeof t?"string":"hash"]:n.map}function Qe(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var o=e[t];this.set(o[0],o[1]);}}Xe.prototype.clear=function(){this.__data__=Ze?Ze(null):{},this.size=0;},Xe.prototype.delete=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t},Xe.prototype.get=function(e){var t=this.__data__;if(Ze){var r=t[e];return "__lodash_hash_undefined__"===r?void 0:r}return Ye.call(t,e)?t[e]:void 0},Xe.prototype.has=function(e){var t=this.__data__;return Ze?void 0!==t[e]:qe.call(t,e)},Xe.prototype.set=function(e,t){var r=this.__data__;return this.size+=this.has(e)?0:1,r[e]=Ze&&void 0===t?"__lodash_hash_undefined__":t,this},Qe.prototype.clear=function(){this.size=0,this.__data__={hash:new Xe,map:new(Ke||we),string:new Xe};},Qe.prototype.delete=function(e){var t=Je(this,e).delete(e);return this.size-=t?1:0,t},Qe.prototype.get=function(e){return Je(this,e).get(e)},Qe.prototype.has=function(e){return Je(this,e).has(e)},Qe.prototype.set=function(e,t){var r=Je(this,e),o=r.size;return r.set(e,t),this.size+=r.size==o?0:1,this};function et(e){var t=this.__data__=new we(e);this.size=t.size;}et.prototype.clear=function(){this.__data__=new we,this.size=0;},et.prototype.delete=function(e){var t=this.__data__,r=t.delete(e);return this.size=t.size,r},et.prototype.get=function(e){return this.__data__.get(e)},et.prototype.has=function(e){return this.__data__.has(e)},et.prototype.set=function(e,t){var r=this.__data__;if(r instanceof we){var o=r.__data__;if(!Ke||o.length<199)return o.push([e,t]),this.size=++r.size,this;r=this.__data__=new Qe(o);}return r.set(e,t),this.size=r.size,this};function tt(e){var t=-1,r=null==e?0:e.length;for(this.__data__=new Qe;++t<r;)this.add(e[t]);}function rt(e,t){for(var r=-1,o=null==e?0:e.length;++r<o;)if(t(e[r],r,e))return !0;return !1}tt.prototype.add=tt.prototype.push=function(e){return this.__data__.set(e,"__lodash_hash_undefined__"),this},tt.prototype.has=function(e){return this.__data__.has(e)};function ot(e,t,r,o,n,l){var a=1&r,i=e.length,s=t.length;if(i!=s&&!(a&&s>i))return !1;var c=l.get(e);if(c&&l.get(t))return c==t;var u=-1,d=!0,p=2&r?new tt:void 0;for(l.set(e,t),l.set(t,e);++u<i;){var m=e[u],f=t[u];if(o)var g=a?o(f,m,u,t,e,l):o(m,f,u,e,t,l);if(void 0!==g){if(g)continue;d=!1;break}if(p){if(!rt(t,(function(e,t){if(a=t,!p.has(a)&&(m===e||n(m,e,r,o,l)))return p.push(t);var a;}))){d=!1;break}}else if(m!==f&&!n(m,f,r,o,l)){d=!1;break}}return l.delete(e),l.delete(t),d}var nt=Ee.Uint8Array;function lt(e){var t=-1,r=Array(e.size);return e.forEach((function(e,o){r[++t]=[o,e];})),r}function at(e){var t=-1,r=Array(e.size);return e.forEach((function(e){r[++t]=e;})),r}var it=Se?Se.prototype:void 0,st=it?it.valueOf:void 0;var ct=Array.isArray;var ut=Object.prototype.propertyIsEnumerable,dt=Object.getOwnPropertySymbols,pt=dt?function(e){return null==e?[]:(e=Object(e),function(e,t){for(var r=-1,o=null==e?0:e.length,n=0,l=[];++r<o;){var a=e[r];t(a,r,e)&&(l[n++]=a);}return l}(dt(e),(function(t){return ut.call(e,t)})))}:function(){return []};function mt(e){return null!=e&&"object"==typeof e}function ft(e){return mt(e)&&"[object Arguments]"==Le(e)}var gt=Object.prototype,bt=gt.hasOwnProperty,ht=gt.propertyIsEnumerable,vt=ft(function(){return arguments}())?ft:function(e){return mt(e)&&bt.call(e,"callee")&&!ht.call(e,"callee")};var Ct="object"==typeof exports&&exports&&!exports.nodeType&&exports,wt=Ct&&"object"==typeof module&&module&&!module.nodeType&&module,Ot=wt&&wt.exports===Ct?Ee.Buffer:void 0,yt=(Ot?Ot.isBuffer:void 0)||function(){return !1},Et=/^(?:0|[1-9]\d*)$/;function St(e,t){var r=typeof e;return !!(t=null==t?9007199254740991:t)&&("number"==r||"symbol"!=r&&Et.test(e))&&e>-1&&e%1==0&&e<t}function xt(e){return "number"==typeof e&&e>-1&&e%1==0&&e<=9007199254740991}var Rt={};Rt["[object Float32Array]"]=Rt["[object Float64Array]"]=Rt["[object Int8Array]"]=Rt["[object Int16Array]"]=Rt["[object Int32Array]"]=Rt["[object Uint8Array]"]=Rt["[object Uint8ClampedArray]"]=Rt["[object Uint16Array]"]=Rt["[object Uint32Array]"]=!0,Rt["[object Arguments]"]=Rt["[object Array]"]=Rt["[object ArrayBuffer]"]=Rt["[object Boolean]"]=Rt["[object DataView]"]=Rt["[object Date]"]=Rt["[object Error]"]=Rt["[object Function]"]=Rt["[object Map]"]=Rt["[object Number]"]=Rt["[object Object]"]=Rt["[object RegExp]"]=Rt["[object Set]"]=Rt["[object String]"]=Rt["[object WeakMap]"]=!1;var kt,Mt="object"==typeof exports&&exports&&!exports.nodeType&&exports,Pt=Mt&&"object"==typeof module&&module&&!module.nodeType&&module,It=Pt&&Pt.exports===Mt&&Oe.process,Lt=function(){try{return It&&It.binding&&It.binding("util")}catch(e){}}(),jt=Lt&&Lt.isTypedArray,Ft=jt?(kt=jt,function(e){return kt(e)}):function(e){return mt(e)&&xt(e.length)&&!!Rt[Le(e)]},Dt=Object.prototype.hasOwnProperty;function zt(e,t){var r=ct(e),o=!r&&vt(e),n=!r&&!o&&yt(e),l=!r&&!o&&!n&&Ft(e),a=r||o||n||l,i=a?function(e,t){for(var r=-1,o=Array(e);++r<e;)o[r]=t(r);return o}(e.length,String):[],s=i.length;for(var c in e)!t&&!Dt.call(e,c)||a&&("length"==c||n&&("offset"==c||"parent"==c)||l&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||St(c,s))||i.push(c);return i}var Tt=Object.prototype;var Ht=function(e,t){return function(r){return e(t(r))}}(Object.keys,Object),At=Object.prototype.hasOwnProperty;function $t(e){if(r=(t=e)&&t.constructor,t!==("function"==typeof r&&r.prototype||Tt))return Ht(e);var t,r,o=[];for(var n in Object(e))At.call(e,n)&&"constructor"!=n&&o.push(n);return o}function _t(e){return null!=(t=e)&&xt(t.length)&&!Fe(t)?zt(e):$t(e);var t;}function Nt(e){return function(e,t,r){var o=t(e);return ct(e)?o:function(e,t){for(var r=-1,o=t.length,n=e.length;++r<o;)e[n+r]=t[r];return e}(o,r(e))}(e,_t,pt)}var Vt=Object.prototype.hasOwnProperty;var Bt=Ue(Ee,"DataView"),Wt=Ue(Ee,"Promise"),Gt=Ue(Ee,"Set"),Ut=Ue(Ee,"WeakMap"),Kt=Ae(Bt),Zt=Ae(Ke),Yt=Ae(Wt),qt=Ae(Gt),Xt=Ae(Ut),Jt=Le;(Bt&&"[object DataView]"!=Jt(new Bt(new ArrayBuffer(1)))||Ke&&"[object Map]"!=Jt(new Ke)||Wt&&"[object Promise]"!=Jt(Wt.resolve())||Gt&&"[object Set]"!=Jt(new Gt)||Ut&&"[object WeakMap]"!=Jt(new Ut))&&(Jt=function(e){var t=Le(e),r="[object Object]"==t?e.constructor:void 0,o=r?Ae(r):"";if(o)switch(o){case Kt:return "[object DataView]";case Zt:return "[object Map]";case Yt:return "[object Promise]";case qt:return "[object Set]";case Xt:return "[object WeakMap]"}return t});var Qt=Jt,er="[object Object]",tr=Object.prototype.hasOwnProperty;function rr(e,t,r,o,n,l){var a=ct(e),i=ct(t),s=a?"[object Array]":Qt(e),c=i?"[object Array]":Qt(t),u=(s="[object Arguments]"==s?er:s)==er,d=(c="[object Arguments]"==c?er:c)==er,p=s==c;if(p&&yt(e)){if(!yt(t))return !1;a=!0,u=!1;}if(p&&!u)return l||(l=new et),a||Ft(e)?ot(e,t,r,o,n,l):function(e,t,r,o,n,l,a){switch(r){case"[object DataView]":if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return !1;e=e.buffer,t=t.buffer;case"[object ArrayBuffer]":return !(e.byteLength!=t.byteLength||!l(new nt(e),new nt(t)));case"[object Boolean]":case"[object Date]":case"[object Number]":return he(+e,+t);case"[object Error]":return e.name==t.name&&e.message==t.message;case"[object RegExp]":case"[object String]":return e==t+"";case"[object Map]":var i=lt;case"[object Set]":var s=1&o;if(i||(i=at),e.size!=t.size&&!s)return !1;var c=a.get(e);if(c)return c==t;o|=2,a.set(e,t);var u=ot(i(e),i(t),o,n,l,a);return a.delete(e),u;case"[object Symbol]":if(st)return st.call(e)==st.call(t)}return !1}(e,t,s,r,o,n,l);if(!(1&r)){var m=u&&tr.call(e,"__wrapped__"),f=d&&tr.call(t,"__wrapped__");if(m||f){var g=m?e.value():e,b=f?t.value():t;return l||(l=new et),n(g,b,r,o,l)}}return !!p&&(l||(l=new et),function(e,t,r,o,n,l){var a=1&r,i=Nt(e),s=i.length;if(s!=Nt(t).length&&!a)return !1;for(var c=s;c--;){var u=i[c];if(!(a?u in t:Vt.call(t,u)))return !1}var d=l.get(e);if(d&&l.get(t))return d==t;var p=!0;l.set(e,t),l.set(t,e);for(var m=a;++c<s;){var f=e[u=i[c]],g=t[u];if(o)var b=a?o(g,f,u,t,e,l):o(f,g,u,e,t,l);if(!(void 0===b?f===g||n(f,g,r,o,l):b)){p=!1;break}m||(m="constructor"==u);}if(p&&!m){var h=e.constructor,v=t.constructor;h==v||!("constructor"in e)||!("constructor"in t)||"function"==typeof h&&h instanceof h&&"function"==typeof v&&v instanceof v||(p=!1);}return l.delete(e),l.delete(t),p}(e,t,r,o,n,l))}function or(e,t,r,o,n){return e===t||(null==e||null==t||!mt(e)&&!mt(t)?e!=e&&t!=t:rr(e,t,r,o,or,n))}function nr(e,t){return or(e,t)}function lr(e){return useEventCallback(e)}const ar="undefined"!=typeof window?React__namespace.useLayoutEffect:React__namespace.useEffect;function ir(e,t,r){const o={};return Object.keys(e).forEach((n=>{o[n]=e[n].reduce(((e,o)=>(o&&(r&&r[o]&&e.push(r[o]),e.push(t(o))),e)),[]).join(" ");})),o}const sr={active:"Mui-active",checked:"Mui-checked",disabled:"Mui-disabled",error:"Mui-error",focused:"Mui-focused",focusVisible:"Mui-focusVisible",required:"Mui-required",expanded:"Mui-expanded",selected:"Mui-selected"};function cr(e,t){return sr[t]||`${e}-${t}`}function ur(e,t){const r={};return t.forEach((t=>{r[t]=cr(e,t);})),r}function dr(e){return "function"==typeof e}function pr(e){return e.type||e.mode}function mr(){return "fade"in n?"fade"in n&&"alpha"in n?"v4.12":"v4":"v5"}function fr(e,t){var r,o,l;return (null===(r=n)||void 0===r?void 0:r.alpha)?null===(o=n)||void 0===o?void 0:o.alpha(e,t):null===(l=n)||void 0===l?void 0:l.fade(e,t)}function gr(){var e,t,r;return (null===(e=n)||void 0===e?void 0:e.createTheme)?null===(t=n)||void 0===t?void 0:t.createTheme():null===(r=n)||void 0===r?void 0:r.createMuiTheme()}function br(){try{const e="__some_random_key_you_are_not_going_to_use__";return window.localStorage.setItem(e,e),window.localStorage.removeItem(e),!0}catch(e){return !1}}function hr(e){return cr("MuiDataGrid",e)}function vr(e){return e.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&")}const Cr=br()&&null!=window.localStorage.getItem("DEBUG"),wr=()=>{},Or={debug:wr,info:wr,warn:wr,error:wr},yr=["debug","info","warn","error"];function Er(e,t,r=console){const o=yr.indexOf(t);if(-1===o)throw new Error(`Material-UI: Log level ${t} not recognized.`);return yr.reduce(((t,n,l)=>(t[n]=l>=o?(...t)=>{const[o,...l]=t;r[n](`Material-UI: ${e} - ${o}`,...l);}:wr,t)),{})}function Sr(t,r){t.current.getLogger=React__namespace.useCallback((e=>Cr?Er(e,"debug",r.logger):r.logLevel?Er(e,r.logLevel.toString(),r.logger):Or),[r.logLevel,r.logger]);}function xr(t,r){const o=React__namespace.useRef(null);if(o.current)return o.current;const n=t.current.getLogger(r);return o.current=n,n}function Rr(t,r,o){const n=xr(t,"useGridApiMethod"),l=React__namespace.useRef(r),[a]=React__namespace.useState(Object.keys(r)),i=React__namespace.useCallback((()=>{t.current&&a.forEach((e=>{t.current.hasOwnProperty(e)||(n.debug(`Adding ${o}.${e} to apiRef`),t.current[e]=(...t)=>l.current[e](...t));}));}),[a,o,t,n]);React__namespace.useEffect((()=>{l.current=r;}),[r]),React__namespace.useEffect((()=>{i();}),[i]),i();}const kr=()=>({all:[],lookup:{}}),Mr={noRowsLabel:"No rows",noResultsOverlayLabel:"No results found.",errorOverlayDefaultLabel:"An error occurred.",toolbarDensity:"Density",toolbarDensityLabel:"Density",toolbarDensityCompact:"Compact",toolbarDensityStandard:"Standard",toolbarDensityComfortable:"Comfortable",toolbarColumns:"Columns",toolbarColumnsLabel:"Select columns",toolbarFilters:"Filters",toolbarFiltersLabel:"Show filters",toolbarFiltersTooltipHide:"Hide filters",toolbarFiltersTooltipShow:"Show filters",toolbarFiltersTooltipActive:e=>1!==e?`${e} active filters`:`${e} active filter`,toolbarExport:"Export",toolbarExportLabel:"Export",toolbarExportCSV:"Download as CSV",columnsPanelTextFieldLabel:"Find column",columnsPanelTextFieldPlaceholder:"Column title",columnsPanelDragIconLabel:"Reorder column",columnsPanelShowAllButton:"Show all",columnsPanelHideAllButton:"Hide all",filterPanelAddFilter:"Add filter",filterPanelDeleteIconLabel:"Delete",filterPanelOperators:"Operators",filterPanelOperatorAnd:"And",filterPanelOperatorOr:"Or",filterPanelColumns:"Columns",filterPanelInputLabel:"Value",filterPanelInputPlaceholder:"Filter value",filterOperatorContains:"contains",filterOperatorEquals:"equals",filterOperatorStartsWith:"starts with",filterOperatorEndsWith:"ends with",filterOperatorIs:"is",filterOperatorNot:"is not",filterOperatorAfter:"is after",filterOperatorOnOrAfter:"is on or after",filterOperatorBefore:"is before",filterOperatorOnOrBefore:"is on or before",filterOperatorIsEmpty:"is empty",filterOperatorIsNotEmpty:"is not empty",filterValueAny:"any",filterValueTrue:"true",filterValueFalse:"false",columnMenuLabel:"Menu",columnMenuShowColumns:"Show columns",columnMenuFilter:"Filter",columnMenuHideColumn:"Hide",columnMenuUnsort:"Unsort",columnMenuSortAsc:"Sort by ASC",columnMenuSortDesc:"Sort by DESC",columnHeaderFiltersTooltipActive:e=>1!==e?`${e} active filters`:`${e} active filter`,columnHeaderFiltersLabel:"Show filters",columnHeaderSortIconLabel:"Sort",footerRowSelected:e=>1!==e?`${e.toLocaleString()} rows selected`:`${e.toLocaleString()} row selected`,footerTotalRows:"Total Rows:",footerTotalVisibleRows:(e,t)=>`${e.toLocaleString()} of ${t.toLocaleString()}`,checkboxSelectionHeaderName:"Checkbox selection",booleanCellTrueLabel:"true",booleanCellFalseLabel:"false",MuiTablePagination:{}};var Pr;!function(e){e.Compact="compact",e.Standard="standard",e.Comfortable="comfortable";}(Pr||(Pr={}));const Ir={client:"client",server:"server"},Lr={columnBuffer:2,density:Pr.Standard,filterMode:Ir.client,headerHeight:56,paginationMode:Ir.client,rowHeight:52,rowsPerPageOptions:[25,50,100],scrollEndThreshold:80,sortingMode:Ir.client,sortingOrder:["asc","desc",null],logger:console,logLevel:"production"===process.env.NODE_ENV?"error":"warn",editMode:"cell"},jr=Object.assign(Object.assign({},Lr),{localeText:Mr});function Fr(){return {dragCol:""}}function Dr(){return {resizingColumnField:""}}var zr;!function(e){e.And="and",e.Or="or";}(zr||(zr={}));const Tr=()=>({items:[],linkOperator:zr.And}),Hr=()=>({visibleRowsLookup:{}}),Ar=()=>({idRowsLookup:{},allRows:[],totalRowCount:0});function $r(){return {sortedRows:[],sortModel:[]}}const _r=()=>({realScroll:{left:0,top:0},renderContext:null,renderingZoneScroll:{left:0,top:0},virtualPage:0,virtualRowsCount:0}),Nr=()=>({rows:{idRowsLookup:{},allRows:[],totalRowCount:0},editRows:{},pagination:{page:0,pageCount:0,rowCount:0,pageSize:100},options:jr,isScrolling:!1,columns:{all:[],lookup:{}},columnReorder:{dragCol:""},columnResize:{resizingColumnField:""},rendering:{realScroll:{left:0,top:0},renderContext:null,renderingZoneScroll:{left:0,top:0},virtualPage:0,virtualRowsCount:0},containerSizes:null,scrollBar:{hasScrollX:!1,hasScrollY:!1,sizes:{x:0,y:0}},viewportSizes:{width:0,height:1},sorting:{sortedRows:[],sortModel:[]},focus:{cell:null,columnHeader:null},tabIndex:{cell:null,columnHeader:null},selection:[],filter:Tr(),columnMenu:{open:!1},preferencePanel:{open:!1},visibleRows:{visibleRowsLookup:{}},density:{value:Pr.Standard,rowHeight:52,headerHeight:56}}),Vr=t=>{const r=xr(t,"useGridApi"),[,o]=React__namespace.useState();t.current.state||(r.info("Initialising state."),t.current.state=Nr(),t.current.forceUpdate=o);const n=React__namespace.useCallback((()=>t.current.state),[t]),l=React__namespace.useCallback((e=>{let r;r=dr(e)?e(t.current.state):e,t.current.state=r,o((()=>r)),t.current.publishEvent(ne.stateChange,r);}),[t]);return Rr(t,{getState:n,setState:l},"GridStateApi"),t.current},Br=t=>{Vr(t);const r=React__namespace.useCallback((()=>t.current.forceUpdate((()=>t.current.state))),[t]),o=React__namespace.useCallback((e=>{const r=e(t.current.state);if(t.current.state===r)return !1;const{ignoreSetState:o,postUpdate:n}=t.current.applyControlStateConstraint(r);return o||(t.current.state=r,t.current.publishEvent&&t.current.publishEvent(ne.stateChange,r)),n(),!o}),[t]);return [t.current.state,o,r]},Wr=(e,t)=>{const[r]=Br(e);return t(r)},Gr=e=>e.rendering,Ur=createSelector(Gr,(e=>e.realScroll)),Kr=ur("MuiDataGrid",["root","row","row--editing","cell","withBorder","cell--editing","cell--editable","cell--withRenderer","cell--textLeft","cell--textCenter","cell--textRight","columnHeader","columnHeader--dragging","columnHeaderWrapper","scrollArea","scrollArea--left","scrollArea--right","columnsContainer","toolbarContainer","overlay","main","dataContainer","window","windowContainer","viewport","autoHeight","columnHeaderCheckbox","cellCheckbox","columnHeader--sorted","columnHeader--sortable","columnHeader--moving","columnHeader--numeric","columnHeader--alignLeft","columnHeader--alignCenter","columnHeader--alignRight","columnHeaderDraggableContainer","columnHeaderTitle","iconButtonContainer","sortIcon","filterIcon","menuIcon","menuIconButton","columnHeaderTitleContainer","columnSeparator","columnSeparator--resizable","iconSeparator","menuOpen","columnHeaderWrapper","editInputCell","editBooleanCell","booleanCell","checkboxInput","rowCount","selectedRowCount","footerContainer","columnHeaderDropZone","columnHeaderDraggableContainer","renderingZone"]),Zr=React__namespace.memo((function({width:t,height:r}){return t&&r?React__namespace.createElement("div",{style:{minWidth:t,maxWidth:t,lineHeight:r-1+"px",minHeight:r,maxHeight:r},className:Kr.cell}):null}));var Yr;function qr(t,r,o,n){const l=xr(t,"useGridApiEventHandler");React__namespace.useEffect((()=>{if(o&&r){const e=(e,t,r)=>{t.defaultMuiPrevented||o(e,t,r);};return t.current.subscribeEvent(r,e,n)}}),[t,l,r,o,n]);}!function(e){e.DataGrid="DataGrid",e.DataGridPro="DataGridPro";}(Yr||(Yr={}));const Xr={isFirst:!0};function Jr(e,t,r){qr(e,t,r,Xr);}const Qr=React__namespace.memo((function(t){const{scrollDirection:o}=t,n=React__namespace.useRef(null),l=ae(),a=React__namespace.useRef(),[i,s]=React__namespace.useState(!1),c=React__namespace.useRef({left:0,top:0}),u=React__namespace.useCallback((e=>{c.current=e;}),[]),d=React__namespace.useCallback((e=>{let t;if("left"===o)t=e.clientX-n.current.getBoundingClientRect().right;else {if("right"!==o)throw new Error("wrong dir");t=Math.max(1,e.clientX-n.current.getBoundingClientRect().left);}t=1.5*(t-1)+1,clearTimeout(a.current),a.current=setTimeout((()=>{l.current.scroll({left:c.current.left+t,top:c.current.top});}));}),[o,l]);React__namespace.useEffect((()=>()=>{clearTimeout(a.current);}),[]);const p=React__namespace.useCallback((()=>{s((e=>!e));}),[]);return qr(l,ne.rowsScroll,u),qr(l,ne.columnHeaderDragStart,p),qr(l,ne.columnHeaderDragEnd,p),i?React__namespace.createElement("div",{ref:n,className:r$1(Kr.scrollArea,Kr[`scrollArea--${o}`]),onDragOver:d}):null})),eo=e=>e.columnReorder,to=createSelector(eo,(e=>e.dragCol)),ro=e=>e.columnResize,oo=createSelector(ro,(e=>e.resizingColumnField)),no=e=>e.rows,lo=createSelector(no,(e=>e&&e.totalRowCount)),ao=createSelector(no,(e=>e&&e.idRowsLookup)),io$1=createSelector(no,(e=>e.allRows)),so=createSelector(no,(e=>e.allRows.map((t=>e.idRowsLookup[t])))),co=e=>e.sorting,uo=createSelector(co,io$1,((e,t)=>e.sortedRows.length?e.sortedRows:t)),po=createSelector(uo,ao,((e,t)=>{const r=new Map;return e.forEach((e=>{r.set(e,t[e]);})),r})),mo=createSelector(co,(e=>e.sortModel)),fo=createSelector(mo,(e=>e.reduce(((t,r,o)=>(t[r.field]={sortDirection:r.sort,sortIndex:e.length>1?o+1:void 0},t)),{}))),go=e=>e.visibleRows,bo=createSelector(go,po,((e,t)=>{const r=new Map;return t.forEach(((t,o)=>{!1!==e.visibleRowsLookup[o]&&r.set(o,t);})),r})),ho=createSelector(bo,(e=>[...e.entries()])),vo=createSelector(bo,(e=>[...e.keys()])),Co=createSelector(go,lo,((e,t)=>null==e.visibleRows?t:e.visibleRows.length)),wo=e=>e.filter,Oo=createSelector(wo,ce,((e,t)=>{var r;return null===(r=e.items)||void 0===r?void 0:r.filter((e=>{var r,o;if(!e.columnField)return !1;const n=t[e.columnField];if(!(null==n?void 0:n.filterOperators)||0===(null===(r=null==n?void 0:n.filterOperators)||void 0===r?void 0:r.length))return !1;const l=n.filterOperators.find((t=>t.value===e.operatorValue));return !!l&&(!l.InputComponent||null!=e.value&&""!==(null===(o=e.value)||void 0===o?void 0:o.toString()))}))})),yo=createSelector(Oo,(e=>e.length)),Eo=createSelector(Oo,(e=>e.reduce(((e,t)=>(e[t.columnField]?e[t.columnField].push(t):e[t.columnField]=[t],e)),{}))),So=e=>e.focus,xo=createSelector(So,(e=>e.cell)),Ro=createSelector(So,(e=>e.columnHeader)),ko=e=>e.tabIndex,Mo=createSelector(ko,(e=>e.cell)),Po=createSelector(ko,(e=>e.columnHeader)),Io=e=>e.density,Lo=createSelector(Io,(e=>e.value)),jo=createSelector(Io,(e=>e.rowHeight)),Fo=createSelector(Io,(e=>e.headerHeight)),Do=e=>e.columnMenu,zo=e=>e.options,To=e=>"Escape"===e,Ho=e=>"Enter"===e,Ao=e=>"Tab"===e,$o=e=>" "===e,_o=e=>0===e.indexOf("Arrow"),No=e=>"Home"===e||"End"===e,Vo=e=>0===e.indexOf("Page"),Bo=e=>"Delete"===e||"Backspace"===e,Wo=/^(\p{L}|\p{M}\p{L}|\p{M}|\p{N}|\p{Z}|\p{S}|\p{P})$/iu,Go=e=>Wo.test(e),Uo=["Enter","Escape","Tab"],Ko=["Enter","Tab"],Zo=e=>Ko.indexOf(e)>-1,Yo=e=>No(e)||_o(e)||Vo(e)||$o(e),qo=e=>!!e.key,Xo=e=>Ao(e)||To(e),Jo=React__namespace.createContext(void 0);"production"!==process.env.NODE_ENV&&(Jo.displayName="GridRootPropsContext");const Qo=()=>{const t=React__namespace.useContext(Jo);if(!t)throw new Error("Material-UI: useGridRootProps should only be used inside the DataGrid/DataGridPro component.");return t},en=React__namespace.forwardRef((function(t,r){var o;const{field:n,id:l,value:a,tabIndex:i,hasFocus:s}=t,u=ae(),d=Qo(),p=React__namespace.useRef(null),m=useForkRef(p,r),f=u.current.getCellElement(l,n);React__namespace.useLayoutEffect((()=>{0===i&&f&&(f.tabIndex=-1);}),[f,i]),React__namespace.useLayoutEffect((()=>{if(s&&p.current){p.current.querySelector("input").focus();}}),[s]);const g=React__namespace.useCallback((e=>{$o(e.key)&&e.stopPropagation(),Yo(e.key)&&!e.shiftKey&&u.current.publishEvent(ne.cellNavigationKeyDown,t,e);}),[u,t]),b=null==u?void 0:u.current.components.Checkbox,h=!d.isRowSelectable||d.isRowSelectable(u.current.getRowParams(l));return React__namespace.createElement(b,Object.assign({ref:m,tabIndex:i,checked:!!a,onChange:e=>{u.current.selectRow(l,e.target.checked,!0);},onClick:e=>{e.stopPropagation();},className:Kr.checkboxInput,color:"primary",inputProps:{"aria-label":"Select Row checkbox"},onKeyDown:g,disabled:!h},null===(o=null==u?void 0:u.current.componentsProps)||void 0===o?void 0:o.checkbox))})),tn=React__namespace.memo(en),rn=e=>e.pagination,on=createSelector(rn,vo,((e,t)=>{const r=e.page*e.pageSize,o=r+e.pageSize;return t.slice(r,o)})),nn=e=>e.selection,ln=createSelector(nn,(e=>e.length)),an=createSelector(nn,ao,((e,t)=>new Map(e.map((e=>[e,t[e]]))))),sn=createSelector(nn,(e=>e.reduce(((e,t)=>(e[t]=t,e)),{}))),cn=React__namespace.forwardRef((function(t,r){var o;const[,n]=React__namespace.useState(!1),l=ae(),a=Qo(),i=Wr(l,Po),s=Wr(l,ln),c=Wr(l,lo),u=s>0&&s!==c,d=s>0&&s===c||u,p=null!==i&&i.field===t.field?0:-1;React__namespace.useLayoutEffect((()=>{const e=l.current.getColumnHeaderElement(t.field);0===p&&e&&(e.tabIndex=-1);}),[p,l,t.field]);const m=React__namespace.useCallback((e=>{$o(e.key)&&e.stopPropagation(),Yo(e.key)&&!e.shiftKey&&l.current.publishEvent(ne.columnHeaderNavigationKeyDown,t,e);}),[l,t]),f=React__namespace.useCallback((()=>{n((e=>!e));}),[]);React__namespace.useEffect((()=>null==l?void 0:l.current.subscribeEvent(ne.selectionChange,f)),[l,f]);const g=null==l?void 0:l.current.components.Checkbox;return React__namespace.createElement(g,Object.assign({ref:r,indeterminate:u,checked:d,onChange:e=>{const t=e.target.checked,r=a.checkboxSelectionVisibleOnly&&a.pagination?on(l.current.state):vo(l.current.state);l.current.selectRows(r,t,!e.target.indeterminate);},className:Kr.checkboxInput,color:"primary",inputProps:{"aria-label":"Select All Rows checkbox"},tabIndex:p,onKeyDown:m},null===(o=null==l?void 0:l.current.componentsProps)||void 0===o?void 0:o.checkbox))}));
    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    function un(e,t){var r={};for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.indexOf(o)<0&&(r[o]=e[o]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var n=0;for(o=Object.getOwnPropertySymbols(e);n<o.length;n++)t.indexOf(o[n])<0&&Object.prototype.propertyIsEnumerable.call(e,o[n])&&(r[o[n]]=e[o[n]]);}return r}function dn(t){const{id:r,value:o,formattedValue:n,api:l,field:a,row:i,colDef:s,cellMode:c,isEditable:u,tabIndex:d,hasFocus:p,getValue:m}=t,f=un(t,["id","value","formattedValue","api","field","row","colDef","cellMode","isEditable","tabIndex","hasFocus","getValue"]),g=React__namespace.useRef(),[b,h]=React__namespace.useState(o),C=React__namespace.useCallback((e=>{const t=e.target.value;h(t),l.setEditCellValue({id:r,field:a,value:t},e);}),[l,a,r]);return React__namespace.useEffect((()=>{h(o);}),[o]),ar((()=>{p&&g.current.focus();}),[p]),React__namespace.createElement(v,Object.assign({inputRef:g,className:Kr.editInputCell,fullWidth:!0,type:"number"===s.type?s.type:"text",value:b||"",onChange:C},f))}const pn=t=>React__namespace.createElement(dn,Object.assign({},t)),mn=(e,t)=>{const r=e.indexOf(t);return t&&-1!==r&&r+1!==e.length?e[r+1]:e[0]},fn=(e,t)=>null==e&&null!=t?-1:null==t&&null!=e?1:null==e&&null==t?0:null,gn=new Intl.Collator,bn=(e,t)=>{const r=fn(e,t);return null!==r?r:Number(e)-Number(t)},hn=(e,t)=>{const r=fn(e,t);return null!==r?r:e>t?1:e<t?-1:0},vn=createSvgIcon$1(React__namespace.createElement("path",{d:"M4 12l1.41 1.41L11 7.83V20h2V7.83l5.58 5.59L20 12l-8-8-8 8z"}),"ArrowUpward"),Cn=createSvgIcon$1(React__namespace.createElement("path",{d:"M20 12l-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z"}),"ArrowDownward"),wn=createSvgIcon$1(React__namespace.createElement("path",{d:"M10 18h4v-2h-4v2zM3 6v2h18V6H3zm3 7h12v-2H6v2z"}),"FilterList"),On=createSvgIcon$1(React__namespace.createElement("path",{d:"M4.25 5.61C6.27 8.2 10 13 10 13v6c0 .55.45 1 1 1h2c.55 0 1-.45 1-1v-6s3.72-4.8 5.74-7.39c.51-.66.04-1.61-.79-1.61H5.04c-.83 0-1.3.95-.79 1.61z"}),"FilterAlt"),yn=createSvgIcon$1(React__namespace.createElement("path",{d:"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"}),"Search"),En=createSvgIcon$1(React__namespace.createElement("path",{d:"M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"}),"Menu"),Sn=createSvgIcon$1(React__namespace.createElement("path",{d:"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"}),"CheckCircle"),xn=createSvgIcon$1(React__namespace.createElement("path",{d:"M6 5H3c-.55 0-1 .45-1 1v12c0 .55.45 1 1 1h3c.55 0 1-.45 1-1V6c0-.55-.45-1-1-1zm14 0h-3c-.55 0-1 .45-1 1v12c0 .55.45 1 1 1h3c.55 0 1-.45 1-1V6c0-.55-.45-1-1-1zm-7 0h-3c-.55 0-1 .45-1 1v12c0 .55.45 1 1 1h3c.55 0 1-.45 1-1V6c0-.55-.45-1-1-1z"}),"ColumnIcon"),Rn=createSvgIcon$1(React__namespace.createElement("path",{d:"M11 19V5h2v14z"}),"Separator"),kn=createSvgIcon$1(React__namespace.createElement("path",{d:"M4 15h16v-2H4v2zm0 4h16v-2H4v2zm0-8h16V9H4v2zm0-6v2h16V5H4z"}),"ViewHeadline"),Mn=createSvgIcon$1(React__namespace.createElement("path",{d:"M21,8H3V4h18V8z M21,10H3v4h18V10z M21,16H3v4h18V16z"}),"TableRows"),Pn=createSvgIcon$1(React__namespace.createElement("path",{d:"M4 18h17v-6H4v6zM4 5v6h17V5H4z"}),"ViewStream"),In=createSvgIcon$1(React__namespace.createElement("path",{d:"M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"}),"TripleDotsVertical"),Ln=createSvgIcon$1(React__namespace.createElement("path",{d:"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"}),"Close"),jn=createSvgIcon$1(React__namespace.createElement("path",{d:"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"}),"Add"),Fn=createSvgIcon$1(React__namespace.createElement("path",{d:"M12 4V1L8 5l4 4V6c3.31 0 6 2.69 6 6 0 1.01-.25 1.97-.7 2.8l1.46 1.46C19.54 15.03 20 13.57 20 12c0-4.42-3.58-8-8-8zm0 14c-3.31 0-6-2.69-6-6 0-1.01.25-1.97.7-2.8L5.24 7.74C4.46 8.97 4 10.43 4 12c0 4.42 3.58 8 8 8v3l4-4-4-4v3z"}),"Load"),Dn=createSvgIcon$1(React__namespace.createElement("path",{d:"M11 18c0 1.1-.9 2-2 2s-2-.9-2-2 .9-2 2-2 2 .9 2 2zm-2-8c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0-6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm6 4c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"}),"Drag"),zn=createSvgIcon$1(React__namespace.createElement("path",{d:"M19 12v7H5v-7H3v7c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2v-7h-2zm-6 .67l2.59-2.58L17 11.5l-5 5-5-5 1.41-1.41L11 12.67V3h2z"}),"SaveAlt"),Tn=createSvgIcon$1(React__namespace.createElement("path",{d:"M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"}),"Check"),Hn=({valueOptions:t})=>(t?["",...t]:[""]).map((t=>"object"==typeof t?React__namespace.createElement("option",{key:t.value,value:t.value},t.label):React__namespace.createElement("option",{key:t,value:t},t))),An=500;function $n(t){const{item:r,applyValue:o,type:n,apiRef:l}=t,a=un(t,["item","applyValue","type","apiRef"]),i=React__namespace.useRef(),[s,c]=React__namespace.useState(r.value||""),[u,p]=React__namespace.useState(!1),m=useId(),f="singleSelect"===n?{select:!0,SelectProps:{native:!0},children:Hn(l.current.getColumn(r.columnField))}:{},g=React__namespace.useCallback((e=>{let t=e.target.value;if("singleSelect"===n){const e=l.current.getColumn(r.columnField);t=e.valueOptions.map((e=>"object"==typeof e?e.value:e)).find((e=>String(e)===t));}clearTimeout(i.current),c(t),p(!0),i.current=setTimeout((()=>{o(Object.assign(Object.assign({},r),{value:t})),p(!1);}),500);}),[l,o,r,n]);React__namespace.useEffect((()=>()=>{clearTimeout(i.current);}),[]),React__namespace.useEffect((()=>{c(r.value||"");}),[r.value]);const b=u?{endAdornment:React__namespace.createElement(Fn,null)}:a.InputProps;return React__namespace.createElement(TextField$1,Object.assign({id:m,label:l.current.getLocaleText("filterPanelInputLabel"),placeholder:l.current.getLocaleText("filterPanelInputPlaceholder"),value:s,onChange:g,type:n||"text",variant:"standard",InputProps:b,InputLabelProps:{shrink:!0}},f,a))}const _n=()=>[{value:"contains",getApplyFilterFn:e=>{if(!e.value)return null;const t=new RegExp(vr(e.value),"i");return ({value:e})=>t.test(e&&e.toString()||"")},InputComponent:$n},{value:"equals",getApplyFilterFn:e=>{if(!e.value)return null;const t=new Intl.Collator(void 0,{sensitivity:"base",usage:"search"});return ({value:r})=>0===t.compare(e.value,r&&r.toString()||"")},InputComponent:$n},{value:"startsWith",getApplyFilterFn:e=>{if(!e.value)return null;const t=new RegExp(`^${vr(e.value)}.*$`,"i");return ({value:e})=>t.test(e&&e.toString()||"")},InputComponent:$n},{value:"endsWith",getApplyFilterFn:e=>{if(!e.value)return null;const t=new RegExp(`.*${vr(e.value)}$`,"i");return ({value:e})=>t.test(e&&e.toString()||"")},InputComponent:$n},{value:"isEmpty",getApplyFilterFn:()=>({value:e})=>""===e||null==e},{value:"isNotEmpty",getApplyFilterFn:()=>({value:e})=>""!==e&&null!=e}],Nn={width:100,minWidth:50,hide:!1,sortable:!0,resizable:!0,filterable:!0,sortComparator:(e,t)=>{const r=fn(e,t);return null!==r?r:"string"==typeof e?gn.compare(e.toString(),t.toString()):e-t},type:"string",align:"left",filterOperators:_n(),renderEditCell:pn},Vn=React__namespace.memo((t=>{const{id:r,value:o,formattedValue:n,api:l,field:a,row:i,colDef:s,cellMode:c,isEditable:u,hasFocus:d,tabIndex:p,getValue:m}=t,f=un(t,["id","value","formattedValue","api","field","row","colDef","cellMode","isEditable","hasFocus","tabIndex","getValue"]),g=React__namespace.useMemo((()=>o?l.components.BooleanCellTrueIcon:l.components.BooleanCellFalseIcon),[l.components.BooleanCellFalseIcon,l.components.BooleanCellTrueIcon,o]);return React__namespace.createElement(g,Object.assign({fontSize:"small",className:Kr.booleanCell,titleAccess:l.getLocaleText(o?"booleanCellTrueLabel":"booleanCellFalseLabel"),"data-value":Boolean(o)},f))}));function Bn(t){const{id:o,value:n,formattedValue:l,api:a,field:i,row:s,colDef:c,cellMode:u,isEditable:p,tabIndex:m,className:f,getValue:g,hasFocus:b}=t,h=un(t,["id","value","formattedValue","api","field","row","colDef","cellMode","isEditable","tabIndex","className","getValue","hasFocus"]),v=React__namespace.useRef(null),C=useId(),[O,y]=React__namespace.useState(n),E=React__namespace.useCallback((e=>{const t=e.target.checked;y(t),a.setEditCellValue({id:o,field:i,value:t},e);}),[a,i,o]);return React__namespace.useEffect((()=>{y(n);}),[n]),ar((()=>{b&&v.current.focus();}),[b]),React__namespace.createElement("label",Object.assign({htmlFor:C,className:r$1(Kr.editBooleanCell,f)},h),React__namespace.createElement(Checkbox$1,{id:C,inputRef:v,checked:Boolean(O),onChange:E,size:"small"}))}function Wn(t){const{item:r,applyValue:o,apiRef:n}=t,l=un(t,["item","applyValue","apiRef"]),[a,i]=React__namespace.useState(r.value||""),s=React__namespace.useCallback((e=>{const t=e.target.value;i(t),o(Object.assign(Object.assign({},r),{value:t}));}),[o,r]);return React__namespace.useEffect((()=>{i(r.value||"");}),[r.value]),React__namespace.createElement(TextField$1,Object.assign({label:n.current.getLocaleText("filterPanelInputLabel"),value:a,onChange:s,variant:"standard",select:!0,SelectProps:{native:!0},InputLabelProps:{shrink:!0}},l),React__namespace.createElement("option",{value:""},n.current.getLocaleText("filterValueAny")),React__namespace.createElement("option",{value:"true"},n.current.getLocaleText("filterValueTrue")),React__namespace.createElement("option",{value:"false"},n.current.getLocaleText("filterValueFalse")))}const Gn=Object.assign(Object.assign({},Nn),{type:"boolean",align:"center",headerAlign:"center",renderCell:t=>React__namespace.createElement(Vn,Object.assign({},t)),renderEditCell:t=>React__namespace.createElement(Bn,Object.assign({},t)),sortComparator:bn,valueFormatter:function({value:e,api:t}){return e?t.getLocaleText("booleanCellTrueLabel"):t.getLocaleText("booleanCellFalseLabel")},filterOperators:[{value:"is",getApplyFilterFn:e=>{if(!e.value)return null;const t="true"===e.value;return ({value:e})=>Boolean(e)===t},InputComponent:Wn}]}),Un=Object.assign(Object.assign({},Gn),{field:"__check__",type:"checkboxSelection",width:50,resizable:!1,sortable:!1,filterable:!1,disableColumnMenu:!0,disableReorder:!0,valueGetter:e=>void 0!==sn(e.api.state)[e.id],renderHeader:t=>React__namespace.createElement(cn,Object.assign({},t)),renderCell:t=>React__namespace.createElement(tn,Object.assign({},t)),cellClassName:Kr.cellCheckbox,headerClassName:Kr.columnHeaderCheckbox}),Kn=()=>[{label:"=",value:"=",getApplyFilterFn:e=>null==e.value?null:({value:t})=>Number(t)===e.value,InputComponent:$n,InputComponentProps:{type:"number"}},{label:"!=",value:"!=",getApplyFilterFn:e=>null==e.value?null:({value:t})=>Number(t)!==e.value,InputComponent:$n,InputComponentProps:{type:"number"}},{label:">",value:">",getApplyFilterFn:e=>null==e.value?null:({value:t})=>Number(t)>e.value,InputComponent:$n,InputComponentProps:{type:"number"}},{label:">=",value:">=",getApplyFilterFn:e=>null==e.value?null:({value:t})=>Number(t)>=e.value,InputComponent:$n,InputComponentProps:{type:"number"}},{label:"<",value:"<",getApplyFilterFn:e=>null==e.value?null:({value:t})=>Number(t)<e.value,InputComponent:$n,InputComponentProps:{type:"number"}},{label:"<=",value:"<=",getApplyFilterFn:e=>null==e.value?null:({value:t})=>Number(t)<=e.value,InputComponent:$n,InputComponentProps:{type:"number"}},{value:"isEmpty",getApplyFilterFn:()=>({value:e})=>null==e},{value:"isNotEmpty",getApplyFilterFn:()=>({value:e})=>null!=e}],Zn=Object.assign(Object.assign({},Nn),{type:"number",align:"right",headerAlign:"right",sortComparator:bn,valueParser:e=>Number(e),valueFormatter:({value:e})=>e&&function(e){return "number"==typeof e}(e)&&e.toLocaleString()||e,filterOperators:Kn()}),Yn=/(\d+)-(\d+)-(\d+)/,qn=/(\d+)-(\d+)-(\d+)T(\d+):(\d+)/;function Xn(e,t,r,o){if(!e.value)return null;const[n,l,a,i,s]=e.value.match(r?qn:Yn).slice(1).map(Number),c=new Date(n,l-1,a,i||0,s||0).getTime();return ({value:e})=>{if(!e)return !1;const n=e instanceof Date?e:new Date(e.toString());if(o)return t(n.getTime(),c);const l=(e instanceof Date?new Date(n):n).setHours(r?n.getHours():0,r?n.getMinutes():0,0,0);return t(l,c)}}const Jn=e=>[{value:"is",getApplyFilterFn:t=>Xn(t,((e,t)=>e===t),e),InputComponent:$n,InputComponentProps:{type:e?"datetime-local":"date"}},{value:"not",getApplyFilterFn:t=>Xn(t,((e,t)=>e!==t),e),InputComponent:$n,InputComponentProps:{type:e?"datetime-local":"date"}},{value:"after",getApplyFilterFn:t=>Xn(t,((e,t)=>e>t),e),InputComponent:$n,InputComponentProps:{type:e?"datetime-local":"date"}},{value:"onOrAfter",getApplyFilterFn:t=>Xn(t,((e,t)=>e>=t),e),InputComponent:$n,InputComponentProps:{type:e?"datetime-local":"date"}},{value:"before",getApplyFilterFn:t=>Xn(t,((e,t)=>e<t),e,!e),InputComponent:$n,InputComponentProps:{type:e?"datetime-local":"date"}},{value:"onOrBefore",getApplyFilterFn:t=>Xn(t,((e,t)=>e<=t),e),InputComponent:$n,InputComponentProps:{type:e?"datetime-local":"date"}},{value:"isEmpty",getApplyFilterFn:()=>({value:e})=>null==e},{value:"isNotEmpty",getApplyFilterFn:()=>({value:e})=>null!=e}];function Qn(t){const{id:r,value:o,formattedValue:n,api:l,field:a,row:i,colDef:s,cellMode:c,isEditable:u,tabIndex:d,hasFocus:p,getValue:m}=t,f=un(t,["id","value","formattedValue","api","field","row","colDef","cellMode","isEditable","tabIndex","hasFocus","getValue"]),g=React__namespace.useRef(),[b,h]=React__namespace.useState(o),C=React__namespace.useCallback((e=>{const t=e.target.value;if(h(t),""===t)return void l.setEditCellValue({id:r,field:a,value:null},e);const[o,n]=t.split("T"),[i,s,c]=o.split("-"),u=new Date;if(u.setFullYear(Number(i)),u.setMonth(Number(s)-1),u.setDate(Number(c)),u.setHours(0,0,0,0),n){const[e,t]=n.split(":");u.setHours(Number(e),Number(t),0,0);}l.setEditCellValue({id:r,field:a,value:u},e);}),[l,a,r]),w="dateTime"===s.type;React__namespace.useEffect((()=>{h(o);}),[o]),ar((()=>{p&&g.current.focus();}),[p]);let O=b||"";if(b instanceof Date){const e=b.getTimezoneOffset();O=new Date(b.getTime()-60*e*1e3).toISOString().substr(0,w?16:10);}return React__namespace.createElement(v,Object.assign({inputRef:g,fullWidth:!0,className:Kr.editInputCell,type:w?"datetime-local":"date",value:O,onChange:C},f))}const el=t=>React__namespace.createElement(Qn,Object.assign({},t));function tl({value:e}){return e instanceof Date?e.toLocaleDateString():e}function rl({value:e}){return e instanceof Date?e.toLocaleString():e}const ol=Object.assign(Object.assign({},Nn),{type:"date",sortComparator:hn,valueFormatter:tl,filterOperators:Jn(),renderEditCell:el}),nl=Object.assign(Object.assign({},Nn),{type:"dateTime",sortComparator:hn,valueFormatter:rl,filterOperators:Jn(!0),renderEditCell:el});var ll,al,il;!function(e){e.Cell="cell",e.Row="row";}(ll||(ll={})),function(e){e.Edit="edit",e.View="view";}(al||(al={})),function(e){e.Edit="edit",e.View="view";}(il||(il={}));const sl=t=>"object"==typeof t?React__namespace.createElement(MenuItem$1,{key:t.value,value:t.value},t.label):React__namespace.createElement(MenuItem$1,{key:t,value:t},t);function cl(t){var r;const{id:o,value:n,formattedValue:l,api:a,field:i,row:s,colDef:c,cellMode:u,isEditable:d,tabIndex:p,className:m,getValue:f,hasFocus:g}=t,b=un(t,["id","value","formattedValue","api","field","row","colDef","cellMode","isEditable","tabIndex","className","getValue","hasFocus"]),h=React__namespace.useRef(),v=Qo(),[C,w]=React__namespace.useState("cell"===v.editMode);return ar((()=>{g&&h.current.querySelector('[role="button"]').focus();}),[g]),React__namespace.createElement(Select$1,Object.assign({ref:h,value:n,onChange:e=>{w(!1),a.setEditCellValue({id:o,field:i,value:e.target.value},e),e.key||"cell"!==v.editMode||(a.commitCellChange({id:o,field:i},e),a.setCellMode(o,i,"view"));},open:C,onOpen:()=>{w(!0);},MenuProps:{onClose:(e,t)=>{v.editMode!==ll.Row?("backdropClick"===t||To(e.key))&&a.setCellMode(o,i,"view"):w(!1);}},fullWidth:!0},b),null===(r=c.valueOptions)||void 0===r?void 0:r.map(sl))}const ul=t=>React__namespace.createElement(cl,Object.assign({},t)),dl=Object.assign(Object.assign({},Nn),{type:"singleSelect",renderEditCell:ul,filterOperators:[{value:"is",getApplyFilterFn:e=>null==e.value||""===e.value?null:({value:t})=>"object"==typeof t?e.value===t.value:e.value===t,InputComponent:$n,InputComponentProps:{type:"singleSelect"}},{value:"not",getApplyFilterFn:e=>null==e.value||""===e.value?null:({value:t})=>"object"==typeof t?e.value!==t.value:e.value!==t,InputComponent:$n,InputComponentProps:{type:"singleSelect"}}]}),pl="__default__",ml=()=>{const e={string:Nn,number:Zn,date:ol,dateTime:nl,boolean:Gn,singleSelect:dl};return e.__default__=Nn,e},fl=(e,t)=>t?e[t]:e.__default__,gl="string",bl="number",hl="date",vl="dateTime",Cl="boolean";const wl=React__namespace.memo((function(t){const{direction:r,index:o}=t,n=ae(),l=n.current.components.ColumnUnsortedIcon;if(null==r&&null===l)return null;const a=React__namespace.createElement(IconButton$1,{tabIndex:-1,"aria-label":n.current.getLocaleText("columnHeaderSortIconLabel"),title:n.current.getLocaleText("columnHeaderSortIconLabel"),size:"small"},function(t,r){let o=t.ColumnUnsortedIcon;return "asc"===r?o=t.ColumnSortedAscendingIcon:"desc"===r&&(o=t.ColumnSortedDescendingIcon),React__namespace.createElement(o,{fontSize:"small",className:Kr.sortIcon})}(n.current.components,r));return React__namespace.createElement("div",{className:Kr.iconButtonContainer},null!=o&&React__namespace.createElement(E,{badgeContent:o,color:"default"},a),null==o&&a)}));function Ol(e,t){return e.closest(`.${t}`)}function yl(e){return null!=e&&e.classList.contains(Kr.columnHeader)}function El(e){const t=e.getAttribute("data-field"),r=Ol(e,"MuiDataGrid-root");if(!r)throw new Error("Material-UI: The root element is not found.");return r.querySelectorAll(`.${Kr.cell}[data-field="${t}"]`)}function Sl(e){return e.replace(/["\\]/g,"\\$&")}function xl(e,t){return e.querySelector(`.${Kr.row}[data-id="${Sl(String(t))}"]`)}const Rl=React__namespace.forwardRef((function(t,o){const{className:n}=t,l=un(t,["className"]);return React__namespace.createElement("div",Object.assign({ref:o,className:r$1(Kr.columnHeaderTitle,n)},l))}));function kl(t){const{label:r,description:o,columnWidth:n}=t,l=React__namespace.useRef(null),[a,i]=React__namespace.useState("");return React__namespace.useEffect((()=>{if(!o&&l&&l.current){const t=(e=l.current).scrollHeight>e.clientHeight||e.scrollWidth>e.clientWidth;i(t?r:"");}var e;}),[l,n,o,r]),React__namespace.createElement(x,{title:o||a},React__namespace.createElement(Rl,{ref:l},r))}const Ml=React__namespace.memo((function(t){const{resizable:o,resizing:n,height:l}=t,a=un(t,["resizable","resizing","height"]),i=ae(),s=Qo(),c=i.current.components.ColumnResizeIcon,u=React__namespace.useCallback((e=>{e.preventDefault(),e.stopPropagation();}),[]);return React__namespace.createElement("div",Object.assign({className:r$1(Kr.columnSeparator,{[Kr["columnSeparator--resizable"]]:o,"Mui-resizing":n}),style:{minHeight:l,opacity:s.showColumnRightBorder?0:1}},a,{onClick:u}),React__namespace.createElement(c,{className:Kr.iconSeparator}))})),Pl=React__namespace.memo((t=>{const{column:o,open:n,columnMenuId:l,columnMenuButtonId:a,iconButtonRef:i}=t,s=ae(),c=s.current.components.ColumnMenuIcon,u=React__namespace.useCallback((e=>{e.preventDefault(),e.stopPropagation(),s.current.toggleColumnMenu(o.field);}),[s,o.field]);return React__namespace.createElement("div",{className:r$1(Kr.menuIcon,{[Kr.menuOpen]:n})},React__namespace.createElement(IconButton$1,{ref:i,tabIndex:-1,className:Kr.menuIconButton,"aria-label":s.current.getLocaleText("columnMenuLabel"),title:s.current.getLocaleText("columnMenuLabel"),size:"small",onClick:u,"aria-expanded":n?"true":void 0,"aria-haspopup":"true","aria-controls":l,id:a},React__namespace.createElement(c,{fontSize:"small"})))})),Il=e=>e.preferencePanel,Ll=e=>e.viewportSizes;var jl;function Fl(t){const{counter:r}=t,o=ae(),n=o.current.components.ColumnFilteredIcon,l=React__namespace.useCallback((e=>{e.preventDefault(),e.stopPropagation();const{open:t,openedPanelValue:r}=Il(o.current.state);t&&r===jl.filters?o.current.hideFilterPanel():o.current.showFilterPanel();}),[o]);if(!r)return null;const a=React__namespace.createElement(IconButton$1,{onClick:l,color:"default","aria-label":o.current.getLocaleText("columnHeaderFiltersLabel"),size:"small",tabIndex:-1},React__namespace.createElement(n,{className:Kr.filterIcon,fontSize:"small"}));return React__namespace.createElement(x,{title:o.current.getLocaleText("columnHeaderFiltersTooltipActive")(r),enterDelay:1e3},React__namespace.createElement("div",{className:Kr.iconButtonContainer},r>1&&React__namespace.createElement(E,{badgeContent:r,color:"default"},a),1===r&&a))}!function(e){e.filters="filters",e.columns="columns";}(jl||(jl={}));const Dl=makeStyles$1((e=>({root:{zIndex:e.zIndex.modal,"& .MuiDataGrid-gridMenuList":{outline:0}}})),{name:"MuiGridMenu",defaultTheme:gr()}),zl={"bottom-start":"top left","bottom-end":"top right"},Tl=t=>{const{open:r,target:o,onClickAway:n,children:l,position:a}=t,i=un(t,["open","target","onClickAway","children","position"]),s=React__namespace.useRef(o),c=React__namespace.useRef(r),u=Dl();return React__namespace.useEffect((()=>{c.current&&s.current&&s.current.focus(),c.current=r,s.current=o;}),[r,o]),React__namespace.createElement(P,Object.assign({className:u.root,open:r,anchorEl:o,transition:!0,placement:a},i),(({TransitionProps:t,placement:r})=>React__namespace.createElement(ClickAwayListener,{onClickAway:n},React__namespace.createElement(k,Object.assign({},t,{style:{transformOrigin:zl[r]}}),React__namespace.createElement(M,null,l)))))};function Hl({columnMenuId:t,columnMenuButtonId:r,ContentComponent:o,contentComponentProps:n,field:l,open:a,target:i}){const s=ae(),c=null==s?void 0:s.current.getColumn(l),u=React__namespace.useCallback((e=>{e.stopPropagation(),null==s||s.current.hideColumnMenu();}),[s]);return i?React__namespace.createElement(Tl,{placement:"bottom-"+("right"===c.align?"start":"end"),open:a,target:i,onClickAway:u},React__namespace.createElement(o,Object.assign({currentColumn:c,hideMenu:u,open:a,id:t,labelledby:r},n))):null}function Al(t){var o;const{column:n,columnMenuOpen:l,colIndex:a,headerHeight:i,isDragging:s,isResizing:c,sortDirection:u,sortIndex:p,options:m,filterItemsCounter:f,hasFocus:g,tabIndex:b}=t,h=ae(),v=React__namespace.useRef(null),C=useId(),w=useId(),O=React__namespace.useRef(null),{classes:y,disableColumnReorder:E,showColumnRightBorder:S,disableColumnResize:x,disableColumnMenu:R,disableColumnFilter:k}=m,M=null!=u,P="number"===n.type;let I=null;n.renderHeader&&h.current&&(I=n.renderHeader(h.current.getColumnHeaderParams(n.field)));const L=React__namespace.useCallback((e=>t=>h.current.publishEvent(e,h.current.getColumnHeaderParams(n.field),t)),[h,n.field]),j=React__namespace.useMemo((()=>({onClick:L(ne.columnHeaderClick),onDoubleClick:L(ne.columnHeaderDoubleClick),onMouseOver:L(ne.columnHeaderOver),onMouseOut:L(ne.columnHeaderOut),onMouseEnter:L(ne.columnHeaderEnter),onMouseLeave:L(ne.columnHeaderLeave),onKeyDown:L(ne.columnHeaderKeyDown),onFocus:L(ne.columnHeaderFocus),onBlur:L(ne.columnHeaderBlur)})),[L]),F=React__namespace.useMemo((()=>({onDragStart:L(ne.columnHeaderDragStart),onDragEnter:L(ne.columnHeaderDragEnter),onDragOver:L(ne.columnHeaderDragOver),onDragEnd:L(ne.columnHeaderDragEnd)})),[L]),D=React__namespace.useMemo((()=>({onMouseDown:L(ne.columnSeparatorMouseDown)})),[L]),z=[null==y?void 0:y.columnHeader];if(n.headerClassName){const e=dr(n.headerClassName)?n.headerClassName({field:n.field,colDef:n}):n.headerClassName;z.push(e);}const T=r$1("center"===n.headerAlign&&Kr["columnHeader--alignCenter"],"right"===n.headerAlign&&Kr["columnHeader--alignRight"],{[Kr["columnHeader--sortable"]]:n.sortable,[Kr["columnHeader--moving"]]:s,[Kr["columnHeader--sorted"]]:M,[Kr["columnHeader--numeric"]]:P,[Kr.withBorder]:S},...z),H=n.computedWidth;let A;null!=u&&(A={"aria-sort":"asc"===u?"ascending":"descending"});const $=!R&&!n.disableColumnMenu&&React__namespace.createElement(Pl,{column:n,columnMenuId:C,columnMenuButtonId:w,open:l,iconButtonRef:O}),_=React__namespace.createElement(React__namespace.Fragment,null,!k&&React__namespace.createElement(Fl,{counter:f}),n.sortable&&!n.hideSortIcons&&React__namespace.createElement(wl,{direction:u,index:p}));return React__namespace.useLayoutEffect((()=>{const e=h.current.state.columnMenu;if(g&&!e.open){const e=v.current.querySelector('[tabindex="0"]');e?e.focus():v.current.focus();}})),React__namespace.createElement("div",Object.assign({ref:v,className:T,key:n.field,"data-field":n.field,style:{width:H,minWidth:H,maxWidth:H},role:"columnheader",tabIndex:b,"aria-colindex":a+1},A,j),React__namespace.createElement("div",Object.assign({className:Kr.columnHeaderDraggableContainer,draggable:!E&&!n.disableReorder},F),React__namespace.createElement("div",{className:Kr.columnHeaderTitleContainer},I||React__namespace.createElement(kl,{label:n.headerName||n.field,description:n.description,columnWidth:H}),_),$),React__namespace.createElement(Ml,Object.assign({resizable:!x&&!!n.resizable,resizing:c,height:i},D)),React__namespace.createElement(Hl,{columnMenuId:C,columnMenuButtonId:w,field:n.field,open:l,target:O.current,ContentComponent:h.current.components.ColumnMenu,contentComponentProps:null===(o=h.current.componentsProps)||void 0===o?void 0:o.columnMenu}))}function $l(t){const{columns:r}=t,o=ae(),n=Wr(o,zo),l=Wr(o,fo),a=Wr(o,Eo),i=Wr(o,to),s=Wr(o,oo),c=Wr(o,Ro),u=Wr(o,Gr).renderContext,d=Wr(o,Po),p=Wr(o,Mo),m=Wr(o,Fo),f=Wr(o,Do),g=r.map(((t,r)=>{const o=(g=r,null==u?g:g+u.firstColIdx);var g;const b=0===o,h=!(null===d&&null===p),v=null!==d&&d.field===t.field||b&&!h?0:-1,C=null!==c&&c.field===t.field,w=f.open&&f.field===t.field;return React__namespace.createElement(Al,Object.assign({key:t.field},l[t.field],{columnMenuOpen:w,filterItemsCounter:a[t.field]&&a[t.field].length,options:n,headerHeight:m,isDragging:t.field===i,column:t,colIndex:o,isResizing:s===t.field,hasFocus:C,tabIndex:v}))}));return React__namespace.createElement(React__namespace.Fragment,null,g)}const _l=e=>e.containerSizes,Nl=e=>e.viewportSizes,Vl=e=>e.scrollBar,Bl=createSelector(_l,(e=>null==e?null:e.dataContainerSizes)),Wl=createSelector(_l,(e=>null==e?0:e.dataContainerSizes.height)),Gl=e=>e.scrollBar,Ul=React__namespace.forwardRef((function(t,o){var n;const l=ae(),a=Wr(l,de),i=Wr(l,_l),s=Wr(l,Fo),c=Wr(l,Gr).renderContext,{hasScrollX:u}=Wr(l,Gl),d=Wr(l,to),p=r$1(Kr.columnHeaderWrapper,{scroll:u,[Kr.columnHeaderDropZone]:d}),m=React__namespace.useMemo((()=>null==c?[]:a.slice(c.firstColIdx,c.lastColIdx+1)),[a,c]);return React__namespace.createElement(React__namespace.Fragment,null,React__namespace.createElement(Qr,{scrollDirection:"left"}),React__namespace.createElement("div",{ref:o,className:p,"aria-rowindex":1,role:"row",style:{minWidth:null===(n=null==i?void 0:i.totalSizes)||void 0===n?void 0:n.width}},React__namespace.createElement(Zr,{width:null==c?void 0:c.leftEmptyWidth,height:s}),React__namespace.createElement($l,{columns:m}),React__namespace.createElement(Zr,{width:null==c?void 0:c.rightEmptyWidth,height:s})),React__namespace.createElement(Qr,{scrollDirection:"right"}))})),Kl=React__namespace.forwardRef((function(t,o){const{className:n,style:l}=t,a=un(t,["className","style"]),i=ae(),s=Wr(i,Fo);return React__namespace.createElement("div",Object.assign({ref:o,className:r$1(Kr.columnsContainer,n)},a,{style:Object.assign({minHeight:s,maxHeight:s,lineHeight:`${s}px`},l)}))}));function Zl(t){return React__namespace.createElement("div",{className:Kr.main},t.children)}const Yl=React__namespace.forwardRef((function(t,o){const{className:n,size:l}=t,a=un(t,["className","size"]),i=ae(),s=Qo(),c=Wr(i,Fo),u=Wr(i,jo),d=Wr(i,Wl);React__namespace.useEffect((()=>{i.current.resize();}),[i]);const p=React__namespace.useMemo((()=>{if(!s.autoHeight)return l.height;return c+(d<u?2*u:d)}),[s.autoHeight,d,c,u,l.height]);return React__namespace.createElement("div",{className:Kr.windowContainer,style:{width:l.width,height:p}},React__namespace.createElement("div",Object.assign({ref:o,className:r$1(Kr.window,n)},a,{style:{top:c,overflowY:s.autoHeight?"hidden":"auto"}})))}));function ql(e,t){var r=function(e){var t=e.__resizeTriggers__,r=t.firstElementChild,o=t.lastElementChild,n=r.firstElementChild;o.scrollLeft=o.scrollWidth,o.scrollTop=o.scrollHeight,n.style.width=r.offsetWidth+1+"px",n.style.height=r.offsetHeight+1+"px",r.scrollLeft=r.scrollWidth,r.scrollTop=r.scrollHeight;},o=function(e){if(!(e.target.className.indexOf("contract-trigger")<0&&e.target.className.indexOf("expand-trigger")<0)){var o=this;r(this),this.__resizeRAF__&&t.cancelAnimationFrame(this.__resizeRAF__),this.__resizeRAF__=t.requestAnimationFrame((function(){(function(e){return e.offsetWidth!=e.__resizeLast__.width||e.offsetHeight!=e.__resizeLast__.height})(o)&&(o.__resizeLast__.width=o.offsetWidth,o.__resizeLast__.height=o.offsetHeight,o.__resizeListeners__.forEach((function(t){t.call(o,e);})));}));}},n=!1,l="",a="animationstart",i="Webkit Moz O ms".split(" "),s="webkitAnimationStart animationstart oAnimationStart MSAnimationStart".split(" "),c=document.createElement("fakeelement");if(void 0!==c.style.animationName&&(n=!0),!1===n)for(var u=0;u<i.length;u++)if(void 0!==c.style[i[u]+"AnimationName"]){l="-"+i[u].toLowerCase()+"-",a=s[u],n=!0;break}var d="resizeanim",p="@"+l+"keyframes "+"resizeanim { from { opacity: 0; } to { opacity: 0; } } ",m=l+"animation: 1ms "+"resizeanim; ";return {addResizeListener:function(n,l){if(!n.__resizeTriggers__){var i=n.ownerDocument,s=t.getComputedStyle(n);s&&"static"==s.position&&(n.style.position="relative"),function(t){if(!t.getElementById("muiDetectElementResize")){var r=(p||"")+".Mui-resizeTriggers { "+(m||"")+'visibility: hidden; opacity: 0; } .Mui-resizeTriggers, .Mui-resizeTriggers > div, .contract-trigger:before { content: " "; display: block; position: absolute; top: 0; left: 0; height: 100%; width: 100%; overflow: hidden; z-index: -1; } .Mui-resizeTriggers > div { background: #eee; overflow: auto; } .contract-trigger:before { width: 200%; height: 200%; }',o=t.head||t.getElementsByTagName("head")[0],n=t.createElement("style");n.id="muiDetectElementResize",n.type="text/css",null!=e&&n.setAttribute("nonce",e),n.styleSheet?n.styleSheet.cssText=r:n.appendChild(t.createTextNode(r)),o.appendChild(n);}}(i),n.__resizeLast__={},n.__resizeListeners__=[],(n.__resizeTriggers__=i.createElement("div")).className="Mui-resizeTriggers",n.__resizeTriggers__.innerHTML='<div class="expand-trigger"><div></div></div><div class="contract-trigger"></div>',n.appendChild(n.__resizeTriggers__),r(n),n.addEventListener("scroll",o,!0),a&&(n.__resizeTriggers__.__animationListener__=function(e){e.animationName==d&&r(n);},n.__resizeTriggers__.addEventListener(a,n.__resizeTriggers__.__animationListener__));}n.__resizeListeners__.push(l);},removeResizeListener:function(e,t){if(e.__resizeListeners__.splice(e.__resizeListeners__.indexOf(t),1),!e.__resizeListeners__.length){e.removeEventListener("scroll",o,!0),e.__resizeTriggers__.__animationListener__&&(e.__resizeTriggers__.removeEventListener(a,e.__resizeTriggers__.__animationListener__),e.__resizeTriggers__.__animationListener__=null);try{e.__resizeTriggers__=!e.removeChild(e.__resizeTriggers__);}catch(e){}}}}}const Xl=React__namespace.forwardRef((function(t,r){const{children:o,defaultHeight:n=null,defaultWidth:l=null,disableHeight:a=!1,disableWidth:i=!1,nonce:s,onResize:u,style:d}=t,m=un(t,["children","defaultHeight","defaultWidth","disableHeight","disableWidth","nonce","onResize","style"]),[f,g]=React__namespace.useState({height:n,width:l}),b=React__namespace.useRef(null),h=React__namespace.useRef(null),v=lr((()=>{if(h.current){const e=h.current.offsetHeight||0,t=h.current.offsetWidth||0,r=ownerWindow(h.current).getComputedStyle(h.current),o=parseInt(r.paddingLeft,10)||0,n=parseInt(r.paddingRight,10)||0,l=e-(parseInt(r.paddingTop,10)||0)-(parseInt(r.paddingBottom,10)||0),s=t-o-n;(!a&&f.height!==l||!i&&f.width!==s)&&(g({height:l,width:s}),u&&u({height:l,width:s}));}}));ar((()=>{var e;if(h.current=b.current.parentElement,!h)return;const t=ownerWindow(null!==(e=h.current)&&void 0!==e?e:void 0),r=ql(s,t);return r.addResizeListener(h.current,v),v(),()=>{r.removeResizeListener(h.current,v);}}),[s,v]);const C={overflow:"visible"},w={};a||(C.height=0,w.height=f.height),i||(C.width=0,w.width=f.width);const O=useForkRef(b,r);return React__namespace.createElement("div",Object.assign({ref:O,style:Object.assign(Object.assign({},C),d)},m),null===f.height&&null===f.width?null:o(w))})),Jl=e=>e.editRows;function Ql(t){const{className:o}=t,n=un(t,["className"]),l=ae(),a=Wr(l,Bl),i={minWidth:null==a?void 0:a.width,minHeight:null==a?void 0:a.height};return React__namespace.createElement("div",Object.assign({className:r$1(Kr.dataContainer,o),style:i},n))}const ea=React__namespace.forwardRef((function(t,r){const{height:o,width:n,children:l}=t;return React__namespace.createElement("div",{ref:r,className:Kr.renderingZone,style:{maxHeight:o,width:n}},l)})),ta="MuiDataGrid",ra="root",oa="columnHeader",na="row",la="cell",aa="MuiDataGrid-columnHeader",ia="MuiDataGrid-row",sa="MuiDataGrid-cell",ca="MuiDataGrid-columnSeparator--resizable",ua="MuiDataGrid-columnHeaderTitleContainer",da="MuiDataGrid-columnHeaderDropZone",pa="MuiDataGrid-columnHeader--dragging";function ma(t){const{selected:o,id:n,rowIndex:l,children:a}=t,i=l+2,s=ae(),c=Wr(s,jo),{classes:u,getRowClassName:d,editMode:p}=Wr(s,zo),m=React__namespace.useCallback((e=>t=>{(1!==t.target.nodeType||t.currentTarget.contains(t.target))&&s.current.getRow(n)&&s.current.publishEvent(e,null==s?void 0:s.current.getRowParams(n),t);}),[s,n]),f=React__namespace.useMemo((()=>({onClick:m(ne.rowClick),onDoubleClick:m(ne.rowDoubleClick),onMouseOver:m(ne.rowOver),onMouseOut:m(ne.rowOut),onMouseEnter:m(ne.rowEnter),onMouseLeave:m(ne.rowLeave)})),[m]),g={maxHeight:c,minHeight:c},b=dr(d)&&d(s.current.getRowParams(n)),h=r$1(b,null==u?void 0:u.row,{"Mui-selected":o,"MuiDataGrid-row--editing":s.current.getRowMode(n)===il.Edit,"MuiDataGrid-row--editable":p===ll.Row});return React__namespace.createElement("div",Object.assign({key:n,"data-id":n,"data-rowindex":l,role:"row",className:h,"aria-rowindex":i,"aria-selected":o,style:g},f),a)}function fa(e,t,r){if(null==e)throw new Error(["Material-UI: The data grid component requires all rows to have a unique id property.",r||"A row was provided without id in the rows prop:",JSON.stringify(t)].join("\n"));return !0}const ga=React__namespace.memo((function(t){const{align:o,className:n,children:l,colIndex:a,cellMode:i,field:s,formattedValue:c,hasFocus:u,height:d,isEditable:p,isSelected:g,rowIndex:b,rowId:h,showRightBorder:v,tabIndex:C,value:w,width:O}=t,y=null==c?w:c,E=React__namespace.useRef(null),S=ae(),x=r$1(n,`${Kr[`cell--text${capitalize(o)}`]}`,{[`${Kr.withBorder}`]:v,[`${Kr["cell--editable"]}`]:p}),R=React__namespace.useCallback((e=>t=>{if(t.relatedTarget&&t.currentTarget.contains(t.relatedTarget))return;const r=S.current.getCellParams(h,s||"");S.current.publishEvent(e,r,t);}),[S,s,h]),k=React__namespace.useCallback((e=>t=>{const r=S.current.getCellParams(h,s||"");S.current.publishEvent(e,r,t);}),[S,s,h]),M=React__namespace.useCallback((e=>t=>{if(1===t.target.nodeType&&!t.currentTarget.contains(t.target))return;if(!S.current.getRow(h))return;const r=S.current.getCellParams(h,s||"");S.current.publishEvent(e,r,t);}),[S,s,h]),P=React__namespace.useMemo((()=>({onClick:M(ne.cellClick),onDoubleClick:M(ne.cellDoubleClick),onMouseDown:M(ne.cellMouseDown),onMouseUp:k(ne.cellMouseUp),onMouseOver:M(ne.cellOver),onMouseOut:M(ne.cellOut),onMouseEnter:M(ne.cellEnter),onMouseLeave:M(ne.cellLeave),onKeyDown:M(ne.cellKeyDown),onBlur:R(ne.cellBlur),onFocus:M(ne.cellFocus),onDragStart:M(ne.cellDragStart),onDragEnter:M(ne.cellDragEnter),onDragOver:M(ne.cellDragOver)})),[M,R,k]),I={minWidth:O,maxWidth:O,lineHeight:d-1+"px",minHeight:d,maxHeight:d};return React__namespace.useLayoutEffect((()=>{if(!u||i===al.Edit)return;const e=ownerDocument(S.current.rootElementRef.current);if(E.current&&!E.current.contains(e.activeElement)){const e=E.current.querySelector('[tabindex="0"]');e?e.focus():E.current.focus();}})),React__namespace.createElement("div",Object.assign({ref:E,className:x,role:"cell","data-value":w,"data-field":s,"data-rowindex":b,"data-colindex":a,"data-rowselected":g,"data-editable":p,"data-mode":i,"aria-colindex":a+1,style:I,tabIndex:"view"!==i&&p?-1:C},P),null!=l?l:null==y?void 0:y.toString())})),ba=React__namespace.memo((function(t){const{columns:o,firstColIdx:n,hasScrollX:l,hasScrollY:a,height:i,id:s,getCellClassName:c,lastColIdx:u,rowIndex:d,cellFocus:p,cellTabIndex:m,showCellRightBorder:f,isSelected:g,editRowState:b,cellClassName:h}=t,v=un(t,["columns","firstColIdx","hasScrollX","hasScrollY","height","id","getCellClassName","lastColIdx","rowIndex","cellFocus","cellTabIndex","showCellRightBorder","isSelected","editRowState","cellClassName"]),C=ae(),w=o.slice(n,u+1).map(((e,u)=>{const w=n+u,O=w===o.length-1,y=O?!(O&&l&&!a)&&!t.extendRowFullWidth:f,E=C.current.getCellParams(s,e.field),S=[h];e.cellClassName&&S.push(r$1(dr(e.cellClassName)?e.cellClassName(E):e.cellClassName));const x=b&&b[e.field];let R=null;if(null==x&&e.renderCell&&(R=e.renderCell(Object.assign(Object.assign({},E),{api:C.current})),S.push(Kr["cell--withRenderer"])),null!=x&&e.renderEditCell){const t=Object.assign(Object.assign(Object.assign({},E),x),{api:C.current});R=e.renderEditCell(t),S.push(Kr["cell--editing"]);}c&&S.push(c(E));return Object.assign({value:E.value,field:e.field,width:e.computedWidth,rowId:s,height:i,showRightBorder:y,formattedValue:E.formattedValue,align:e.align||"left",rowIndex:d,cellMode:E.cellMode,colIndex:w,children:R,isEditable:E.isEditable,isSelected:g,hasFocus:null!==p&&p.id===s&&p.field===e.field,tabIndex:null!==m&&m.id===s&&m.field===e.field&&"view"===E.cellMode?0:-1,className:r$1(S)},v)}));return React__namespace.createElement(React__namespace.Fragment,null,w.map((t=>React__namespace.createElement(ga,Object.assign({key:t.field},t)))))}));function ha(t){const{height:r,width:o,children:n}=t;return React__namespace.createElement("div",{className:Kr.viewport,style:{minWidth:o,maxWidth:o,maxHeight:r}},n)}const va=React__namespace.forwardRef((function(t,r){const o=ae(),n=Qo(),l=Wr(o,zo),a=Wr(o,_l),i=Wr(o,Nl),s=Wr(o,Vl),c=Wr(o,de),u=Wr(o,Gr),d=Wr(o,xo),p=Wr(o,Mo),m=Wr(o,sn),f=Wr(o,ho),g=Wr(o,jo),b=Wr(o,Jl);return React__namespace.createElement(Ql,null,React__namespace.createElement(ha,Object.assign({},i),React__namespace.createElement(ea,Object.assign({ref:r},(null==a?void 0:a.renderingZone)||{width:0,height:0}),(()=>{if(null==u.renderContext)return null;return f.slice(u.renderContext.firstRowIdx,u.renderContext.lastRowIdx).map((([t,r],o)=>{var a;return React__namespace.createElement(ma,{key:t,id:t,selected:void 0!==m[t],rowIndex:u.renderContext.firstRowIdx+o},React__namespace.createElement(Zr,{width:u.renderContext.leftEmptyWidth,height:g}),React__namespace.createElement(ba,{columns:c,row:r,id:t,height:g,firstColIdx:u.renderContext.firstColIdx,lastColIdx:u.renderContext.lastColIdx,hasScrollX:s.hasScrollX,hasScrollY:s.hasScrollY,showCellRightBorder:!!n.showCellRightBorder,extendRowFullWidth:!n.disableExtendRowFullWidth,rowIndex:u.renderContext.firstRowIdx+o,cellFocus:d,cellTabIndex:p,isSelected:void 0!==m[t],editRowState:b[t],cellClassName:null===(a=l.classes)||void 0===a?void 0:a.cell,getCellClassName:n.getCellClassName}),React__namespace.createElement(Zr,{width:u.renderContext.rightEmptyWidth,height:g}))}))})())))}));function Ca(){var t,r,o;const n=ae(),l=Qo(),a=Wr(n,lo),i=Wr(n,Co),s=!l.loading&&0===a,c=!l.loading&&a>0&&0===i;return s?React__namespace.createElement(n.current.components.NoRowsOverlay,Object.assign({},null===(t=l.componentsProps)||void 0===t?void 0:t.noRowsOverlay)):c?React__namespace.createElement(n.current.components.NoResultsOverlay,Object.assign({},null===(r=l.componentsProps)||void 0===r?void 0:r.noResultsOverlay)):l.loading?React__namespace.createElement(n.current.components.LoadingOverlay,Object.assign({},null===(o=l.componentsProps)||void 0===o?void 0:o.loadingOverlay)):null}function wa(t){const{children:r}=t,o=ae(),n=Qo(),l=React__namespace.useRef(null),a=React__namespace.useRef(null),i=React__namespace.useRef(null),s=React__namespace.useRef(null);o.current.columnHeadersContainerElementRef=a,o.current.columnHeadersElementRef=l,o.current.windowRef=i,o.current.renderingZoneRef=s;const c=React__namespace.useCallback((e=>o.current.publishEvent(ne.resize,e)),[o]);return React__namespace.createElement(Zl,null,React__namespace.createElement(Ca,null),React__namespace.createElement(Kl,{ref:a},React__namespace.createElement(Ul,{ref:l})),React__namespace.createElement(Xl,{nonce:n.nonce,disableHeight:n.autoHeight,onResize:c},(t=>React__namespace.createElement(Yl,{ref:i,size:t},React__namespace.createElement(va,{ref:s})))),r)}class Oa extends React__namespace.Component{static getDerivedStateFromError(e){return {hasError:!0,error:e}}componentDidCatch(e,t){this.props.api.current&&(this.logError(e),this.props.api.current.showError({error:e,errorInfo:t}));}logError(e,t){this.props.logger.error(`An unexpected error occurred. Error: ${e&&e.message}. `,e,t);}render(){var e;return this.props.hasError||(null===(e=this.state)||void 0===e?void 0:e.hasError)?this.props.render(this.props.componentProps||this.state):this.props.children}}function ya(t){const{children:r}=t,o=ae(),n=xr(o,"GridErrorHandler"),l=Qo(),[a]=Br(o);return React__namespace.createElement(Oa,{hasError:null!=a.error,componentProps:a.error,api:o,logger:n,render:t=>{var r;return React__namespace.createElement(Zl,null,React__namespace.createElement(o.current.components.ErrorOverlay,Object.assign({},t,null===(r=l.componentsProps)||void 0===r?void 0:r.errorOverlay)))}},r)}function Ea(){var t;const r=ae(),o=Qo(),n=React__namespace.useRef(null);return r.current.footerRef=n,o.hideFooter?null:React__namespace.createElement("div",{ref:n},React__namespace.createElement(r.current.components.Footer,Object.assign({},null===(t=o.componentsProps)||void 0===t?void 0:t.footer)))}function Sa(){var t;const r=ae(),o=Qo(),n=React__namespace.useRef(null);return r.current.headerRef=n,React__namespace.createElement("div",{ref:n},React__namespace.createElement(r.current.components.Header,Object.assign({},null===(t=o.componentsProps)||void 0===t?void 0:t.header)))}const xa=makeStyles$1((e=>{const t="light"===pr(e.palette)?lighten(fr(e.palette.divider,1),.88):darken(fr(e.palette.divider,1),.68),r={root:Object.assign(Object.assign({flex:1,boxSizing:"border-box",position:"relative",border:`1px solid ${t}`,borderRadius:e.shape.borderRadius,color:e.palette.text.primary},e.typography.body2),{outline:"none",height:"100%",display:"flex",flexDirection:"column",[`&.${Kr.autoHeight}`]:{height:"auto"},[`& .${Kr.main}`]:{position:"relative",flexGrow:1,display:"flex",flexDirection:"column"},[`& .${Kr.overlay}`]:{display:"flex",position:"absolute",top:0,left:0,right:0,bottom:0,alignSelf:"center",alignItems:"center",justifyContent:"center",backgroundColor:fr(e.palette.background.default,e.palette.action.disabledOpacity)},[`& .${Kr.toolbarContainer}`]:{display:"flex",alignItems:"center",padding:"4px 4px 0"},[`& .${Kr.columnsContainer}`]:{position:"absolute",top:0,left:0,right:0,overflow:"hidden",display:"flex",flexDirection:"column",borderBottom:`1px solid ${t}`},[`& .${Kr.scrollArea}`]:{position:"absolute",top:0,zIndex:101,width:20,bottom:0},[`& .${Kr["scrollArea--left"]}`]:{left:0},[`& .${Kr["scrollArea--right"]}`]:{right:0},[`& .${Kr.columnHeaderWrapper}`]:{display:"flex",width:"100%",alignItems:"center",overflow:"hidden"},[`& .${Kr.columnHeader}, & .${Kr.cell}`]:{WebkitTapHighlightColor:"transparent",lineHeight:null,padding:"0 10px",boxSizing:"border-box"},[`& .${Kr.columnHeader}:focus-within, & .${Kr.cell}:focus-within`]:{outline:`solid ${fr(e.palette.primary.main,.5)} 1px`,outlineWidth:1,outlineOffset:-1},[`& .${Kr.columnHeader}:focus, & .${Kr.cell}:focus`]:{outline:`solid ${e.palette.primary.main} 1px`},[`& .${Kr.columnHeaderCheckbox}, & .${Kr.cellCheckbox}`]:{padding:0,justifyContent:"center",alignItems:"center"},[`& .${Kr.columnHeader}`]:{position:"relative",display:"flex",alignItems:"center"},[`& .${Kr.columnHeader}:not(.${Kr["columnHeader--sorted"]}) .${Kr.sortIcon}`]:{opacity:0,transition:e.transitions.create(["opacity"],{duration:e.transitions.duration.shorter})},[`& .${Kr.columnHeader}:not(.${Kr["columnHeader--sorted"]}):hover .${Kr.sortIcon}`]:{opacity:.5},[`& .${Kr.columnHeaderTitleContainer}`]:{display:"flex",alignItems:"center",minWidth:0,flex:1,whiteSpace:"nowrap",overflow:"hidden",padding:"0 6px"},[`& .${Kr.sortIcon}, & .${Kr.filterIcon}`]:{fontSize:"inherit"},[`& .${Kr["columnHeader--sortable"]}`]:{cursor:"pointer"},[`& .${Kr["columnHeader--alignCenter"]} .${Kr.columnHeaderTitleContainer}`]:{justifyContent:"center"},[`& .${Kr["columnHeader--alignRight"]} .${Kr.columnHeaderDraggableContainer}, & .${Kr["columnHeader--alignRight"]} .${Kr.columnHeaderTitleContainer}`]:{flexDirection:"row-reverse"},[`& .${Kr["columnHeader--alignCenter"]} .${Kr.menuIcon}, & .${Kr["columnHeader--alignRight"]} .${Kr.menuIcon}`]:{marginRight:"auto",marginLeft:-6},[`& .${Kr.columnHeaderTitle}`]:{textOverflow:"ellipsis",overflow:"hidden",whiteSpace:"nowrap",fontWeight:e.typography.fontWeightMedium},[`& .${Kr["columnHeader--moving"]}`]:{backgroundColor:e.palette.action.hover},[`& .${Kr.columnSeparator}`]:{position:"absolute",right:-12,zIndex:100,display:"flex",flexDirection:"column",justifyContent:"center",color:t},[`& .${Kr["columnSeparator--resizable"]}`]:{cursor:"col-resize",touchAction:"none","&:hover":{color:e.palette.text.primary,"@media (hover: none)":{color:t}},"&.Mui-resizing":{color:e.palette.text.primary}},[`& .${Kr.iconSeparator}`]:{color:"inherit"},[`& .${Kr.menuIcon}`]:{visibility:"hidden",fontSize:20,marginRight:-6,display:"flex",alignItems:"center"},[`& .${Kr.columnHeader}:hover .${Kr.menuIcon}, .${Kr.menuOpen}`]:{visibility:"visible"},[`& .${Kr.columnHeaderWrapper}.scroll .${Kr.columnHeader}:last-child`]:{borderRight:"none"},[`& .${Kr.dataContainer}`]:{position:"relative",flexGrow:1,display:"flex",flexDirection:"column"},[`& .${Kr.window}`]:{position:"absolute",bottom:0,left:0,right:0,overflowX:"auto"},[`& .${Kr.viewport}`]:{position:"sticky",top:0,left:0,display:"flex",flexDirection:"column",overflow:"hidden"},[`& .${Kr.row}`]:{display:"flex",width:"fit-content","&:hover":{backgroundColor:e.palette.action.hover,"@media (hover: none)":{backgroundColor:"transparent"}},"&.Mui-selected":{backgroundColor:fr(e.palette.primary.main,e.palette.action.selectedOpacity),"&:hover":{backgroundColor:fr(e.palette.primary.main,e.palette.action.selectedOpacity+e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:fr(e.palette.primary.main,e.palette.action.selectedOpacity)}}}},[`& .${Kr.cell}`]:{display:"block",overflow:"hidden",textOverflow:"ellipsis",whiteSpace:"nowrap",borderBottom:`1px solid ${t}`},[`& .${Kr.cell}.${Kr["cell--editing"]}`]:{padding:1,display:"flex",boxShadow:e.shadows[2],backgroundColor:e.palette.background.paper,"&:focus-within":{outline:`solid ${e.palette.primary.main} 1px`,outlineOffset:"-1px"}},[`& .${Kr["row--editing"]}`]:{boxShadow:e.shadows[2]},[`& .${Kr["row--editing"]} .${Kr.cell}`]:{boxShadow:e.shadows[0],backgroundColor:e.palette.background.paper},[`& .${Kr.editInputCell}`]:Object.assign(Object.assign({},e.typography.body2),{padding:"1px 0","& input":{padding:"0 16px",height:"100%"}}),[`& .${Kr.editBooleanCell}`]:{display:"flex",height:"100%",width:"100%",alignItems:"center",justifyContent:"center"},[`& .${Kr.booleanCell}[data-value="true"]`]:{color:e.palette.text.secondary},[`& .${Kr.booleanCell}[data-value="false"]`]:{color:e.palette.text.disabled},[`& .${Kr.columnHeaderWrapper} .${Kr.cell}`]:{borderBottom:"none"},[`& .${Kr["cell--withRenderer"]}`]:{display:"flex",alignItems:"center"},[`& .${Kr.withBorder}`]:{borderRight:`1px solid ${t}`},[`& .${Kr["cell--textLeft"]}`]:{textAlign:"left"},[`& .${Kr["cell--textLeft"]}.${Kr["cell--withRenderer"]}, & .${Kr["cell--textLeft"]}.${Kr["cell--editing"]}`]:{justifyContent:"flex-start"},[`& .${Kr["cell--textRight"]}`]:{textAlign:"right"},[`& .${Kr["cell--textRight"]}.${Kr["cell--withRenderer"]}, & .${Kr["cell--textRight"]}.${Kr["cell--editing"]}`]:{justifyContent:"flex-end"},[`& .${Kr["cell--textCenter"]}`]:{textAlign:"center"},[`& .${Kr["cell--textCenter"]}.${Kr["cell--withRenderer"]}, & .${Kr["cell--textCenter"]}.${Kr["cell--editing"]}`]:{justifyContent:"center"},[`& .${Kr.rowCount}, & .${Kr.selectedRowCount}`]:{alignItems:"center",display:"flex",margin:e.spacing(0,2)},[`& .${Kr.footerContainer}`]:{display:"flex",justifyContent:"space-between",alignItems:"center",minHeight:52,[`& .${Kr.selectedRowCount}`]:{visibility:"hidden",width:0,height:0,[e.breakpoints.up("sm")]:{visibility:"visible",width:"auto",height:"auto"}}},[`& .${Kr.columnHeaderDropZone} .${Kr.columnHeaderDraggableContainer}`]:{cursor:"move"},[`& .${Kr.columnHeaderDraggableContainer}`]:{display:"flex",width:"100%"},[`& .${Kr["columnHeader--dragging"]}`]:{background:e.palette.background.paper,padding:"0 12px",borderRadius:e.shape.borderRadius,opacity:e.palette.action.disabledOpacity}})};if("dark"===pr(e.palette)){const e="#202022",t="#585859",o="#838384";r.root=Object.assign(Object.assign({},r.root),{scrollbarColor:`${t} ${e}`,"& *::-webkit-scrollbar":{backgroundColor:e},"& *::-webkit-scrollbar-thumb":{borderRadius:8,backgroundColor:t,minHeight:24,border:`3px solid ${e}`},"& *::-webkit-scrollbar-thumb:focus":{backgroundColor:o},"& *::-webkit-scrollbar-thumb:active":{backgroundColor:o},"& *::-webkit-scrollbar-thumb:hover":{backgroundColor:o},"& *::-webkit-scrollbar-corner":{backgroundColor:e}});}return r}),{name:"MuiDataGrid",defaultTheme:gr()}),Ra=React__namespace.forwardRef((function(t,o){var n;const l=xa(),a=ae(),i=Qo(),{children:s,className:u}=t,d=un(t,["children","className"]),p=Wr(a,ge),[m]=Br(a),f=Wr(a,zo),g=React__namespace.useRef(null),b=useForkRef(g,o);return a.current.rootElementRef=g,React__namespace.createElement(NoSsr,null,React__namespace.createElement("div",Object.assign({ref:b,className:r$1(l.root,null===(n=f.classes)||void 0===n?void 0:n.root,i.className,u,{[Kr.autoHeight]:i.autoHeight}),role:"grid","aria-colcount":p,"aria-rowcount":m.rows.totalRowCount,"aria-multiselectable":!i.disableMultipleSelection,"aria-label":i["aria-label"],"aria-labelledby":i["aria-labelledby"],style:i.style},d),s))})),ka=React__namespace.forwardRef((function(t,o){const{className:n}=t,l=un(t,["className"]);return React__namespace.createElement("div",Object.assign({ref:o,className:r$1(Kr.footerContainer,n)},l))})),Ma=React__namespace.forwardRef((function(t,o){const{className:n,style:l}=t,a=un(t,["className","style"]),i=ae(),s=Wr(i,Fo);return React__namespace.createElement("div",Object.assign({ref:o,className:r$1(Kr.overlay,n),style:Object.assign({top:s},l)},a))})),Pa=React__namespace.forwardRef((function(t,o){const{className:n,children:l}=t,a=un(t,["className","children"]);return l?React__namespace.createElement("div",Object.assign({ref:o,className:r$1(Kr.toolbarContainer,n)},a),l):null})),Ia=t=>{const{onClick:r}=t,o=ae(),n=Qo(),l=React__namespace.useCallback((e=>{r(e),o.current.showPreferences(jl.columns);}),[o,r]);return n.disableColumnSelector?null:React__namespace.createElement(MenuItem$1,{onClick:l},o.current.getLocaleText("columnMenuShowColumns"))},La=t=>{const{column:r,onClick:o}=t,n=ae(),l=Qo(),a=React__namespace.useCallback((e=>{o(e),n.current.showFilterPanel(null==r?void 0:r.field);}),[n,null==r?void 0:r.field,o]);return l.disableColumnFilter||!(null==r?void 0:r.filterable)?null:React__namespace.createElement(MenuItem$1,{onClick:a},n.current.getLocaleText("columnMenuFilter"))},ja=React__namespace.forwardRef((function(t,o){const{hideMenu:n,currentColumn:l,open:a,id:i,labelledby:s,className:c,children:u}=t,d=un(t,["hideMenu","currentColumn","open","id","labelledby","className","children"]),p=React__namespace.useCallback((e=>{Ao(e.key)&&e.preventDefault(),Xo(e.key)&&n();}),[n]);return React__namespace.createElement(L,Object.assign({id:i,ref:o,className:r$1("MuiDataGrid-gridMenuList",c),"aria-labelledby":s,onKeyDown:p,autoFocus:a},d),u)})),Fa=t=>{const{column:r,onClick:o}=t,n=ae(),l=Qo(),a=React__namespace.useRef(),i=React__namespace.useCallback((e=>{o(e),a.current=setTimeout((()=>{n.current.setColumnVisibility(null==r?void 0:r.field,!1);}),100);}),[n,null==r?void 0:r.field,o]);return React__namespace.useEffect((()=>()=>clearTimeout(a.current)),[]),l.disableColumnSelector?null:React__namespace.createElement(MenuItem$1,{onClick:i},n.current.getLocaleText("columnMenuHideColumn"))},Da=t=>{const{column:r,onClick:o}=t,n=ae(),l=Wr(n,mo),a=React__namespace.useMemo((()=>{if(!r)return null;const e=l.find((e=>e.field===r.field));return null==e?void 0:e.sort}),[r,l]),i=React__namespace.useCallback((e=>{o(e);const t=e.currentTarget.getAttribute("data-value")||null;null==n||n.current.sortColumn(r,t);}),[n,r,o]);return r&&r.sortable?React__namespace.createElement(React__namespace.Fragment,null,React__namespace.createElement(MenuItem$1,{onClick:i,disabled:null==a},n.current.getLocaleText("columnMenuUnsort")),React__namespace.createElement(MenuItem$1,{onClick:i,"data-value":"asc",disabled:"asc"===a},n.current.getLocaleText("columnMenuSortAsc")),React__namespace.createElement(MenuItem$1,{onClick:i,"data-value":"desc",disabled:"desc"===a},n.current.getLocaleText("columnMenuSortDesc"))):null},za=React__namespace.forwardRef((function(t,r){const{hideMenu:o,currentColumn:n}=t;return React__namespace.createElement(ja,Object.assign({ref:r},t),React__namespace.createElement(Da,{onClick:o,column:n}),React__namespace.createElement(La,{onClick:o,column:n}),React__namespace.createElement(Fa,{onClick:o,column:n}),React__namespace.createElement(Ia,{onClick:o,column:n}))})),Ta=makeStyles$1((()=>({root:{display:"flex",flexDirection:"column",overflow:"auto",flex:"1 1",maxHeight:400}})),{name:"MuiGridPanelContent"});function Ha(t){const o=Ta(),{className:n}=t,l=un(t,["className"]);return React__namespace.createElement("div",Object.assign({className:r$1(o.root,n)},l))}const Aa=makeStyles$1((()=>({root:{padding:4,display:"flex",justifyContent:"space-between"}})),{name:"MuiGridPanelFooter"});function $a(t){const o=Aa(),{className:n}=t,l=un(t,["className"]);return React__namespace.createElement("div",Object.assign({className:r$1(o.root,n)},l))}const _a=makeStyles$1((e=>({root:{padding:e.spacing(1)}})),{name:"MuiDataGridPanelHeader",defaultTheme:gr()});function Na(t){const o=_a(),{className:n}=t,l=un(t,["className"]);return React__namespace.createElement("div",Object.assign({className:r$1(o.root,n)},l))}const Va=makeStyles$1((()=>({root:{display:"flex",flexDirection:"column",flex:1,"&:focus":{outline:0}}})),{name:"MuiGridPanelWrapper"}),Ba=()=>!0;function Wa(t){const o=Va(),{className:n}=t,l=un(t,["className"]),a=mr().startsWith("v4")?{getDoc:()=>document}:{};return React__namespace.createElement(Unstable_TrapFocus,Object.assign({open:!0,disableEnforceFocus:!0,isEnabled:Ba},a),React__namespace.createElement("div",Object.assign({tabIndex:-1,className:r$1(o.root,n)},l)))}let Ga=!1;"undefined"!=typeof process&&void 0!==process.env.GRID_EXPERIMENTAL_ENABLED&&br()&&window.localStorage.getItem("GRID_EXPERIMENTAL_ENABLED")?Ga="true"===window.localStorage.getItem("GRID_EXPERIMENTAL_ENABLED"):"undefined"!=typeof process&&(Ga="true"===process.env.GRID_EXPERIMENTAL_ENABLED);const Ua=Ga,Ka=makeStyles$1({container:{padding:"8px 0px 8px 8px"},column:{display:"flex",justifyContent:"space-between",padding:"1px 8px 1px 7px"},switch:{marginRight:4},dragIcon:{justifyContent:"flex-end"}},{name:"MuiDataGridColumnsPanel"});function Za(){const t=Ka(),r=ae(),o=React__namespace.useRef(null),n=Wr(r,ue),l=Qo(),[a,i]=React__namespace.useState(""),s=React__namespace.useCallback((e=>{const{name:t}=e.target,o=r.current.getColumn(t);r.current.setColumnVisibility(t,!!o.hide);}),[r]),c=React__namespace.useCallback((e=>{r.current.updateColumns(n.map((t=>(t.hide=e,t))));}),[r,n]),u=React__namespace.useCallback((()=>c(!1)),[c]),d=React__namespace.useCallback((()=>c(!0)),[c]),p=React__namespace.useCallback((e=>{i(e.target.value);}),[]),m=React__namespace.useMemo((()=>a?n.filter((e=>e.field.toLowerCase().indexOf(a.toLowerCase())>-1||e.headerName&&e.headerName.toLowerCase().indexOf(a.toLowerCase())>-1)):n),[n,a]);return React__namespace.useEffect((()=>{o.current.focus();}),[]),React__namespace.createElement(Wa,null,React__namespace.createElement(Na,null,React__namespace.createElement(TextField$1,{label:r.current.getLocaleText("columnsPanelTextFieldLabel"),placeholder:r.current.getLocaleText("columnsPanelTextFieldPlaceholder"),inputRef:o,value:a,onChange:p,variant:"standard",fullWidth:!0})),React__namespace.createElement(Ha,null,React__namespace.createElement("div",{className:t.container},m.map((o=>React__namespace.createElement("div",{key:o.field,className:t.column},React__namespace.createElement(FormControlLabel$1,{control:React__namespace.createElement(j,{className:t.switch,checked:!o.hide,onClick:s,name:o.field,color:"primary",size:"small"}),label:o.headerName||o.field}),!l.disableColumnReorder&&Ua&&React__namespace.createElement(IconButton$1,{draggable:!0,className:t.dragIcon,"aria-label":r.current.getLocaleText("columnsPanelDragIconLabel"),title:r.current.getLocaleText("columnsPanelDragIconLabel"),size:"small",disabled:!0},React__namespace.createElement(Dn,null))))))),React__namespace.createElement($a,null,React__namespace.createElement(Button$2,{onClick:d,color:"primary"},r.current.getLocaleText("columnsPanelHideAllButton")),React__namespace.createElement(Button$2,{onClick:u,color:"primary"},r.current.getLocaleText("columnsPanelShowAllButton"))))}const Ya=makeStyles$1((e=>({root:{zIndex:e.zIndex.modal},paper:{backgroundColor:e.palette.background.paper,minWidth:300,maxHeight:450,display:"flex"}})),{name:"MuiGridPanel",defaultTheme:gr()}),qa=ur("MuiGridPanel",["root","paper"]),Xa=React__namespace.forwardRef((function(t,o){var n;const{children:l,className:a,open:i}=t,s=un(t,["children","className","open"]),c=Ya(s),u=ae(),d=React__namespace.useCallback((()=>{u.current.hidePreferences();}),[u]),p=React__namespace.useCallback((e=>{To(e.key)&&u.current.hidePreferences();}),[u]),m=null===(n=null==u?void 0:u.current.columnHeadersContainerElementRef)||void 0===n?void 0:n.current;return m?React__namespace.createElement(P,Object.assign({ref:o,placement:"bottom-start",className:r$1(a,c.root),open:i,anchorEl:m,modifiers:"v5"===mr()?[{name:"flip",enabled:!1}]:{flip:{enabled:!1}}},s),React__namespace.createElement(ClickAwayListener,{onClickAway:d},React__namespace.createElement(M,{className:c.paper,elevation:8,onKeyDown:p},l))):null})),Ja=React__namespace.forwardRef((function(t,r){var o,n,l;const a=ae(),i=Wr(a,ue),s=Qo(),c=Wr(a,Il),u=c.openedPanelValue===jl.columns,d=!c.openedPanelValue||!u,p=a.current.components.ColumnsPanel,m=a.current.components.FilterPanel,f=a.current.components.Panel;return React__namespace.createElement(f,Object.assign({ref:r,open:i.length>0&&c.open},null===(o=null==a?void 0:a.current.componentsProps)||void 0===o?void 0:o.panel,t),!s.disableColumnSelector&&u&&React__namespace.createElement(p,Object.assign({},null===(n=null==a?void 0:a.current.componentsProps)||void 0===n?void 0:n.columnsPanel)),!s.disableColumnFilter&&d&&React__namespace.createElement(m,Object.assign({},null===(l=null==a?void 0:a.current.componentsProps)||void 0===l?void 0:l.filterPanel)))})),Qa=makeStyles$1({root:{display:"flex",justifyContent:"space-around",padding:8},linkOperatorSelect:{minWidth:60},columnSelect:{width:150},operatorSelect:{width:120},filterValueInput:{width:190},closeIcon:{flexShrink:0,justifyContent:"flex-end",marginRight:6,marginBottom:2}},{name:"MuiGridFilterForm"});function ei(t){var r,o;const{item:n,hasMultipleFilters:l,deleteFilter:a,applyFilterChanges:i,multiFilterOperator:s,showMultiFilterOperators:c,disableMultiFilterOperator:u,applyMultiFilterOperatorChanges:p}=t,f=Qa(),g=ae(),b=Wr(g,me),h=useId(),v=useId(),C=useId(),w=useId(),y=useId(),E=useId(),x=React__namespace.useCallback((()=>n.columnField?g.current.getColumn(n.columnField):null),[g,n]),R=React__namespace.useCallback((()=>{var e;const t=x();return n.operatorValue&&t?null===(e=t.filterOperators)||void 0===e?void 0:e.find((e=>e.value===n.operatorValue)):null}),[n,x]),k=React__namespace.useCallback((e=>{const t=e.target.value,r=g.current.getColumn(t).filterOperators[0];i(Object.assign(Object.assign({},n),{value:void 0,columnField:t,operatorValue:r.value}));}),[g,i,n]),M=React__namespace.useCallback((e=>{const t=e.target.value;i(Object.assign(Object.assign({},n),{operatorValue:t}));}),[i,n]),P=React__namespace.useCallback((e=>{const t=e.target.value===zr.And.toString()?zr.And:zr.Or;p(t);}),[p]),I=React__namespace.useCallback((()=>{a(n);}),[a,n]),L=R();return React__namespace.createElement("div",{className:f.root},React__namespace.createElement(T,{variant:"standard",className:f.closeIcon},React__namespace.createElement(IconButton$1,{"aria-label":g.current.getLocaleText("filterPanelDeleteIconLabel"),title:g.current.getLocaleText("filterPanelDeleteIconLabel"),onClick:I,size:"small"},React__namespace.createElement(Ln,{fontSize:"small"}))),React__namespace.createElement(T,{variant:"standard",className:f.linkOperatorSelect,style:{display:l?"block":"none",visibility:c?"visible":"hidden"}},React__namespace.createElement(H,{htmlFor:h,id:v},g.current.getLocaleText("filterPanelOperators")),React__namespace.createElement(Select$1,{labelId:v,id:h,value:s,onChange:P,disabled:!!u,native:!0},React__namespace.createElement("option",{key:zr.And.toString(),value:zr.And.toString()},g.current.getLocaleText("filterPanelOperatorAnd")),React__namespace.createElement("option",{key:zr.Or.toString(),value:zr.Or.toString()},g.current.getLocaleText("filterPanelOperatorOr")))),React__namespace.createElement(T,{variant:"standard",className:f.columnSelect},React__namespace.createElement(H,{htmlFor:C,id:w},g.current.getLocaleText("filterPanelColumns")),React__namespace.createElement(Select$1,{labelId:w,id:C,value:n.columnField||"",onChange:k,native:!0},b.map((t=>React__namespace.createElement("option",{key:t.field,value:t.field},t.headerName||t.field))))),React__namespace.createElement(T,{variant:"standard",className:f.operatorSelect},React__namespace.createElement(H,{htmlFor:y,id:E},g.current.getLocaleText("filterPanelOperators")),React__namespace.createElement(Select$1,{labelId:E,id:y,value:n.operatorValue,onChange:M,native:!0},null===(o=null===(r=x())||void 0===r?void 0:r.filterOperators)||void 0===o?void 0:o.map((t=>React__namespace.createElement("option",{key:t.value,value:t.value},t.label||g.current.getLocaleText(`filterOperator${capitalize(t.value)}`)))))),React__namespace.createElement(T,{variant:"standard",className:f.filterValueInput},(null==L?void 0:L.InputComponent)?React__namespace.createElement(L.InputComponent,Object.assign({apiRef:g,item:n,applyValue:i},L.InputComponentProps)):null))}function ti(){const t=ae(),[r]=Br(t),o=Qo(),n=React__namespace.useMemo((()=>r.filter.items.length>1),[r.filter.items.length]),l=React__namespace.useCallback((e=>{t.current.upsertFilter(e);}),[t]),a=React__namespace.useCallback((e=>{t.current.applyFilterLinkOperator(e);}),[t]),i=React__namespace.useCallback((()=>{t.current.upsertFilter({});}),[t]),s=React__namespace.useCallback((e=>{t.current.deleteFilter(e);}),[t]);return React__namespace.useEffect((()=>{0===r.filter.items.length&&i();}),[i,r.filter.items.length]),React__namespace.createElement(Wa,null,React__namespace.createElement(Ha,null,r.filter.items.map(((t,o)=>React__namespace.createElement(ei,{key:null==t.id?o:t.id,item:t,applyFilterChanges:l,deleteFilter:s,hasMultipleFilters:n,showMultiFilterOperators:o>0,multiFilterOperator:r.filter.linkOperator,disableMultiFilterOperator:1!==o,applyMultiFilterOperatorChanges:a})))),!o.disableMultipleColumnsFiltering&&React__namespace.createElement($a,null,React__namespace.createElement(Button$2,{onClick:i,startIcon:React__namespace.createElement(jn,null),color:"primary"},t.current.getLocaleText("filterPanelAddFilter"))))}const ri=React__namespace.forwardRef((function(t,r){const{onClick:o}=t,n=un(t,["onClick"]),l=ae(),a=Qo(),i=l.current.components.ColumnSelectorIcon,{open:s,openedPanelValue:c}=Wr(l,Il);return a.disableColumnSelector?null:React__namespace.createElement(Button$2,Object.assign({ref:r,size:"small",color:"primary","aria-label":l.current.getLocaleText("toolbarColumnsLabel"),startIcon:React__namespace.createElement(i,null)},n,{onClick:e=>{s&&c===jl.columns?l.current.hidePreferences():l.current.showPreferences(jl.columns),null==o||o(e);}}),l.current.getLocaleText("toolbarColumns"))})),oi=React__namespace.forwardRef((function(t,r){const{onClick:o}=t,n=un(t,["onClick"]),l=ae(),a=Qo(),i=Wr(l,Lo),s=useId(),c=useId(),[u,p]=React__namespace.useState(null),m=l.current.components.DensityCompactIcon,f=l.current.components.DensityStandardIcon,g=l.current.components.DensityComfortableIcon,b=[{icon:React__namespace.createElement(m,null),label:l.current.getLocaleText("toolbarDensityCompact"),value:Pr.Compact},{icon:React__namespace.createElement(f,null),label:l.current.getLocaleText("toolbarDensityStandard"),value:Pr.Standard},{icon:React__namespace.createElement(g,null),label:l.current.getLocaleText("toolbarDensityComfortable"),value:Pr.Comfortable}],h=React__namespace.useCallback((()=>{switch(i){case Pr.Compact:return React__namespace.createElement(m,null);case Pr.Comfortable:return React__namespace.createElement(g,null);default:return React__namespace.createElement(f,null)}}),[i,m,g,f]),v=()=>p(null);if(a.disableDensitySelector)return null;const C=b.map(((t,r)=>React__namespace.createElement(MenuItem$1,{key:r,onClick:()=>{return e=t.value,l.current.setDensity(e),void p(null);var e;},selected:t.value===i},React__namespace.createElement(A,null,t.icon),t.label)));return React__namespace.createElement(React__namespace.Fragment,null,React__namespace.createElement(Button$2,Object.assign({ref:r,color:"primary",size:"small",startIcon:h(),"aria-label":l.current.getLocaleText("toolbarDensityLabel"),"aria-expanded":u?"true":void 0,"aria-haspopup":"menu","aria-labelledby":c,id:s},n,{onClick:e=>{p(e.currentTarget),null==o||o(e);}}),l.current.getLocaleText("toolbarDensity")),React__namespace.createElement(Tl,{open:Boolean(u),target:u,onClickAway:v,position:"bottom-start"},React__namespace.createElement(L,{id:c,className:"MuiDataGrid-gridMenuList","aria-labelledby":s,onKeyDown:e=>{Ao(e.key)&&e.preventDefault(),Xo(e.key)&&v();},autoFocusItem:Boolean(u)},C)))})),ni=makeStyles$1((e=>({list:{margin:e.spacing(1,1,.5),padding:e.spacing(0,1)}})),{name:"MuiGridToolbarFilterButton",defaultTheme:gr()}),li=React__namespace.forwardRef((function(t,r){const{componentsProps:o={}}=t,n=un(t,["componentsProps"]),l=o.button||{},a=ni(),i=ae(),s=Qo(),c=Wr(i,yo),u=Wr(i,Oo),d=Wr(i,ce),p=Wr(i,Il),f=React__namespace.useMemo((()=>{if(p.open)return i.current.getLocaleText("toolbarFiltersTooltipHide");if(0===c)return i.current.getLocaleText("toolbarFiltersTooltipShow");return React__namespace.createElement("div",null,i.current.getLocaleText("toolbarFiltersTooltipActive")(c),React__namespace.createElement("ul",{className:a.list},u.map(((t,r)=>Object.assign({},d[t.columnField]&&React__namespace.createElement("li",{key:r},`${d[t.columnField].headerName||t.columnField}\n                  ${(e=>d[e.columnField].filterOperators.find((t=>t.value===e.operatorValue)).label||i.current.getLocaleText(`filterOperator${capitalize(e.operatorValue)}`).toString())(t)}\n                  ${t.value}`))))))}),[i,p.open,c,u,d,a]);if(s.disableColumnFilter)return null;const g=i.current.components.OpenFilterButtonIcon;return React__namespace.createElement(x,Object.assign({title:f,enterDelay:1e3},n),React__namespace.createElement(Button$2,Object.assign({ref:r,size:"small",color:"primary","aria-label":i.current.getLocaleText("toolbarFiltersLabel"),startIcon:React__namespace.createElement(E,{badgeContent:c,color:"primary"},React__namespace.createElement(g,null))},l,{onClick:e=>{var t;const{open:r,openedPanelValue:o}=p;r&&o===jl.filters?i.current.hideFilterPanel():i.current.showFilterPanel(),null===(t=l.onClick)||void 0===t||t.call(l,e);}}),i.current.getLocaleText("toolbarFilters")))})),ai=React__namespace.forwardRef((function(t,r){const{csvOptions:o,onClick:n}=t,l=un(t,["csvOptions","onClick"]),a=ae(),i=useId(),s=useId(),[c,u]=React__namespace.useState(null),p=a.current.components.ExportIcon,m=[];m.push({label:a.current.getLocaleText("toolbarExportCSV"),format:"csv",formatOptions:o});const f=()=>u(null),g=e=>()=>{"csv"===e.format&&a.current.exportDataAsCsv(e.formatOptions),u(null);};return React__namespace.createElement(React__namespace.Fragment,null,React__namespace.createElement(Button$2,Object.assign({ref:r,color:"primary",size:"small",startIcon:React__namespace.createElement(p,null),"aria-expanded":c?"true":void 0,"aria-label":a.current.getLocaleText("toolbarExportLabel"),"aria-haspopup":"menu","aria-labelledby":s,id:i},l,{onClick:e=>{u(e.currentTarget),null==n||n(e);}}),a.current.getLocaleText("toolbarExport")),React__namespace.createElement(Tl,{open:Boolean(c),target:c,onClickAway:f,position:"bottom-start"},React__namespace.createElement(L,{id:s,className:"MuiDataGrid-gridMenuList","aria-labelledby":i,onKeyDown:e=>{Ao(e.key)&&e.preventDefault(),Xo(e.key)&&f();},autoFocusItem:Boolean(c)},m.map(((t,r)=>React__namespace.createElement(MenuItem$1,{key:r,onClick:g(t)},t.label))))))})),ii=React__namespace.forwardRef((function(t,r){const o=Qo();return o.disableColumnFilter&&o.disableColumnSelector&&o.disableDensitySelector?null:React__namespace.createElement(Pa,Object.assign({ref:r},t),React__namespace.createElement(ri,null),React__namespace.createElement(li,null),React__namespace.createElement(oi,null),React__namespace.createElement(ai,null))})),si=React__namespace.forwardRef((function(t,o){const{className:n,rowCount:l,visibleRowCount:a}=t,i=un(t,["className","rowCount","visibleRowCount"]),s=ae();if(0===l)return null;const c=a<l?s.current.getLocaleText("footerTotalVisibleRows")(a,l):l.toLocaleString();return React__namespace.createElement("div",Object.assign({ref:o,className:r$1(Kr.rowCount,n)},i),s.current.getLocaleText("footerTotalRows")," ",c)})),ci=React__namespace.forwardRef((function(t,o){const{className:n,selectedRowCount:l}=t,a=un(t,["className","selectedRowCount"]),i=ae().current.getLocaleText("footerRowSelected")(l);return React__namespace.createElement("div",Object.assign({ref:o,className:r$1(Kr.selectedRowCount,n)},a),i)})),ui=React__namespace.forwardRef((function(t,r){var o;const n=ae(),l=Qo(),a=Wr(n,lo),i=Wr(n,ln),s=Wr(n,rn),c=Wr(n,Co),u=!l.hideFooterSelectedRowCount&&i>0?React__namespace.createElement(ci,{selectedRowCount:i}):React__namespace.createElement("div",null),d=l.hideFooterRowCount||l.pagination?null:React__namespace.createElement(si,{rowCount:a,visibleRowCount:c}),p=!!l.pagination&&null!=s.pageSize&&!l.hideFooterPagination&&(null==n?void 0:n.current.components.Pagination),m=p&&React__namespace.createElement(p,Object.assign({},null===(o=null==n?void 0:n.current.componentsProps)||void 0===o?void 0:o.pagination));return React__namespace.createElement(ka,Object.assign({ref:r},t),u,d,m)})),di=React__namespace.forwardRef((function(t,r){var o,n;const l=ae(),a=null==l?void 0:l.current.components.PreferencesPanel,i=a&&React__namespace.createElement(a,Object.assign({},null===(o=null==l?void 0:l.current.componentsProps)||void 0===o?void 0:o.preferencesPanel)),s=null==l?void 0:l.current.components.Toolbar,c=s&&React__namespace.createElement(s,Object.assign({},null===(n=null==l?void 0:l.current.componentsProps)||void 0===n?void 0:n.toolbar));return React__namespace.createElement("div",Object.assign({ref:r},t),i,c)})),pi=React__namespace.forwardRef((function(t,r){return React__namespace.createElement(Ma,Object.assign({ref:r},t),React__namespace.createElement(CircularProgress$1,null))})),mi=React__namespace.forwardRef((function(t,r){const o=ae().current.getLocaleText("noRowsLabel");return React__namespace.createElement(Ma,Object.assign({ref:r},t),o)})),fi=makeStyles$1((e=>({selectLabel:{display:"none",[e.breakpoints.up("md")]:{display:"block"}},caption:{"&[id]":{display:"none",[e.breakpoints.up("md")]:{display:"block"}}},input:{display:"none",[e.breakpoints.up("md")]:{display:"inline-flex"}}})),{defaultTheme:gr()}),gi=React__namespace.forwardRef((function(t,r){var o,n,l;const a=fi(),i=ae(),s=Qo(),c=Wr(i,rn),u=React__namespace.useMemo((()=>Math.floor(c.rowCount/(c.pageSize||1))),[c.rowCount,c.pageSize]),d=React__namespace.useCallback((e=>{const t=Number(e.target.value);i.current.setPageSize(t);}),[i]),p=React__namespace.useCallback(((e,t)=>{i.current.setPage(t);}),[i]);if("production"!==process.env.NODE_ENV){const t=React__namespace.useRef(!1);t.current||s.autoPageSize||s.rowsPerPageOptions.includes(null!==(o=s.pageSize)&&void 0!==o?o:c.pageSize)||(console.warn([`Material-UI: The page size \`${null!==(n=s.pageSize)&&void 0!==n?n:c.pageSize}\` is not preset in the \`rowsPerPageOptions\``,"Add it to show the pagination select."].join("\n")),t.current=!0);}return React__namespace.createElement(_$1,Object.assign({ref:r,classes:Object.assign(Object.assign({},"v5"===mr()?{selectLabel:a.selectLabel}:{caption:a.caption}),{input:a.input}),component:"div",count:c.rowCount,page:c.page<=u?c.page:u,rowsPerPageOptions:(null===(l=s.rowsPerPageOptions)||void 0===l?void 0:l.includes(c.pageSize))?s.rowsPerPageOptions:[],rowsPerPage:c.pageSize},i.current.getLocaleText("MuiTablePagination"),"v4"!==mr()?{onPageChange:p,onRowsPerPageChange:d}:{onChangePage:p,onChangeRowsPerPage:d},t))})),bi=t=>{const r=xr(t,"useGridColumnMenu"),[o,n,l]=Br(t),a=React__namespace.useCallback((e=>{r.debug("Opening Column Menu"),n((t=>Object.assign(Object.assign({},t),{columnMenu:{open:!0,field:e}}))),t.current.hidePreferences(),l();}),[t,l,r,n]),i=React__namespace.useCallback((()=>{r.debug("Hiding Column Menu"),n((e=>Object.assign(Object.assign({},e),{columnMenu:Object.assign(Object.assign({},e.columnMenu),{open:!1,field:void 0})}))),l();}),[l,r,n]),s=React__namespace.useCallback((e=>{r.debug("Toggle Column Menu"),o.columnMenu.open&&o.columnMenu.field===e?i():a(e);}),[r,a,i,o]),c=React__namespace.useCallback((()=>{n((e=>e.columnMenu.open?Object.assign(Object.assign({},e),{columnMenu:Object.assign(Object.assign({},e.columnMenu),{open:!1})}):e));}),[n]);React__namespace.useEffect((()=>{o.isScrolling&&i();}),[o.isScrolling,i]),Rr(t,{showColumnMenu:a,hideColumnMenu:i,toggleColumnMenu:s},"ColumnMenuApi"),qr(t,ne.columnResizeStart,c);},hi=(t,r)=>{const o=xr(t,"useGridColumnReorder"),[,n,l]=Br(t),a=Wr(t,to),i=React__namespace.useRef(null),s=React__namespace.useRef({x:0,y:0}),c=React__namespace.useRef(null),u=React__namespace.useRef();React__namespace.useEffect((()=>()=>{clearTimeout(u.current);}),[]);const d=React__namespace.useCallback(((e,a)=>{r.disableColumnReorder||e.colDef.disableReorder||(o.debug(`Start dragging col ${e.field}`),i.current=a.currentTarget,i.current.classList.add(Kr["columnSeparator--dragging"]),n((t=>Object.assign(Object.assign({},t),{columnReorder:Object.assign(Object.assign({},t.columnReorder),{dragCol:e.field})}))),l(),u.current=setTimeout((()=>{i.current.classList.remove(Kr["columnSeparator--dragging"]);})),c.current=t.current.getColumnIndex(e.field,!1));}),[r.disableColumnReorder,o,n,l,t]),p=React__namespace.useCallback(((e,t)=>{t.preventDefault();}),[]),m=React__namespace.useCallback(((e,r)=>{if(!a)return;o.debug(`Dragging over col ${e.field}`),r.preventDefault();const n={x:r.clientX,y:r.clientY};if(e.field!==a&&(l=s.current,i=n,l.x!==i.x||l.y!==i.y)){const r=t.current.getColumnIndex(e.field,!1),o=t.current.getColumnIndex(e.field,!0),l=t.current.getColumn(e.field),i=t.current.getColumnIndex(a,!1),c=t.current.getVisibleColumns().length,u=!l.disableReorder||o>0&&o<c-1,d=((e,t)=>e.x<=t.x?"right":"left")(s.current,n),p="left"===d&&r<i,m="right"===d&&i<r;u&&(p||m)&&t.current.setColumnIndex(a,r),s.current=n;}var l,i;}),[t,a,o]),f=React__namespace.useCallback(((e,s)=>{!r.disableColumnReorder&&a&&(o.debug("End dragging col"),s.preventDefault(),clearTimeout(u.current),i.current=null,"none"===s.dataTransfer.dropEffect&&(t.current.setColumnIndex(e.field,c.current),c.current=null),n((e=>Object.assign(Object.assign({},e),{columnReorder:Object.assign(Object.assign({},e.columnReorder),{dragCol:""})}))),l());}),[r.disableColumnReorder,o,n,l,t,a]);qr(t,ne.columnHeaderDragStart,d),qr(t,ne.columnHeaderDragEnter,p),qr(t,ne.columnHeaderDragOver,m),qr(t,ne.columnHeaderDragEnd,f),qr(t,ne.cellDragEnter,p),qr(t,ne.cellDragOver,m),qr(t,ne.cellDragEnd,f);};function vi(e,t){t=function(e){const t=Object.assign({},e);return Object.keys(e).forEach((r=>{e.hasOwnProperty(r)&&void 0===e[r]&&delete t[r];})),t}(t);return Object.assign(Object.assign({},e),t)}function Ci(e,t={},r,o){const n=function(e,t){const r=Object.assign(Object.assign({},e),t),o={};return Object.entries(r).forEach((([e,t])=>{t=Object.assign(Object.assign({},r[t.extendType||"__default__"]),t),o[e]=t;})),o}(ml(),t),l=e.map((e=>Object.assign(Object.assign({},fl(n,e.type)),e)));return o?[Object.assign(Object.assign({},Un),{headerName:r("checkboxSelectionHeaderName")}),...l]:l}const wi=(e,t)=>{var r,o;const n={all:[...null!==(r=null==t?void 0:t.all)&&void 0!==r?r:[]],lookup:Object.assign({},null!==(o=null==t?void 0:t.lookup)&&void 0!==o?o:{})};return e.forEach((e=>{null==n.lookup[e.field]?(n.lookup[e.field]=e,n.all.push(e.field)):n.lookup[e.field]=Object.assign(Object.assign({},n.lookup[e.field]),e);})),n};function Oi(t,r){const o=xr(t,"useGridColumns"),[n,l,a]=Br(t),i=Wr(t,pe),s=Wr(t,ue),c=Wr(t,de),u=React__namespace.useCallback(((e,r=!0)=>{o.debug("Updating columns state."),l((t=>Object.assign(Object.assign({},t),{columns:e}))),a(),r&&t.current.publishEvent(ne.columnsChange,e.all);}),[o,l,a,t]),d=React__namespace.useCallback((e=>t.current.state.columns.lookup[e]),[t]),p=React__namespace.useCallback((()=>s),[s]),m=React__namespace.useCallback((()=>c),[c]),f=React__namespace.useCallback((()=>i),[i]),g=React__namespace.useCallback(((e,t=!0)=>t?c.findIndex((t=>t.field===e)):s.findIndex((t=>t.field===e))),[s,c]),b=React__namespace.useCallback((e=>{const t=g(e);return i.positions[t]}),[i.positions,g]),h=React__namespace.useCallback(((e,r)=>{o.debug("updating GridColumns with new state");const n=t.current.state.viewportSizes.width;let l=e.all.map((t=>e.lookup[t]));l=function(e,t){let r=0,o=t;const n=e.map((e=>{var t,n;const l=Object.assign({},e);if(e.hide)l.computedWidth=0;else {const e=null!==(t=l.minWidth)&&void 0!==t?t:Nn.minWidth;if(l.flex&&l.flex>0)r+=l.flex,l.computedWidth=e;else {const t=Math.max(null!==(n=l.width)&&void 0!==n?n:Nn.width,e);o-=t,l.computedWidth=t;}}return l}));if(r>0&&o>0){const e=o/r;for(let t=0;t<n.length;t+=1){const r=n[t];!r.hide&&r.flex&&r.flex>0&&(n[t].computedWidth=Math.max(e*r.flex,r.computedWidth));}}return n}(l,n);const a={all:l.map((e=>e.field)),lookup:l.reduce(((e,t)=>(e[t.field]=t,e)),{})};u(a,r);}),[t,o,u]),v=React__namespace.useCallback((e=>{const r=wi(e,t.current.state.columns);h(r,!1);}),[t,h]),C=React__namespace.useCallback((e=>v([e])),[v]),w=React__namespace.useCallback(((e,r)=>{const o=d(e),n=Object.assign(Object.assign({},o),{hide:!r});v([n]),t.current.publishEvent(ne.columnVisibilityChange,{field:e,colDef:n,isVisible:r});}),[t,d,v]),O=React__namespace.useCallback(((e,r)=>{const l=n.columns.all.findIndex((t=>t===e));if(l===r)return;o.debug(`Moving column ${e} to index ${r}`);const a={field:e,element:t.current.getColumnHeaderElement(e),colDef:t.current.getColumn(e),targetIndex:r,oldIndex:l};t.current.publishEvent(ne.columnOrderChange,a);const i=[...n.columns.all];i.splice(r,0,i.splice(l,1)[0]),u(Object.assign(Object.assign({},n.columns),{all:i}));}),[t,n.columns,o,u]),y=React__namespace.useCallback(((e,r)=>{o.debug(`Updating column ${e} width to ${r}`);const n=t.current.getColumn(e),l=Object.assign(Object.assign({},n),{width:r});t.current.updateColumns([l]),t.current.publishEvent(ne.columnWidthChange,{element:t.current.getColumnHeaderElement(e),colDef:l,width:r});}),[t,o]);Rr(t,{getColumn:d,getAllColumns:p,getColumnIndex:g,getColumnPosition:b,getVisibleColumns:m,getColumnsMeta:f,updateColumn:C,updateColumns:v,setColumnVisibility:w,setColumnIndex:O,setColumnWidth:y},"ColApi"),React__namespace.useEffect((()=>{o.info(`GridColumns have changed, new length ${r.columns.length}`);const e=Ci(r.columns,r.columnTypes,t.current.getLocaleText,r.checkboxSelection),n=wi(e);h(n);}),[o,t,h,r.columns,r.columnTypes,r.checkboxSelection]),React__namespace.useEffect((()=>{o.debug(`GridColumns gridState.viewportSizes.width, changed ${n.viewportSizes.width}`),h(t.current.state.columns);}),[t,h,n.viewportSizes.width,o]),Jr(t,ne.columnVisibilityChange,r.onColumnVisibilityChange);}function yi(e,r){const o=React__default["default"].useRef({}),n=React__default["default"].useCallback((e=>{const{stateId:t,stateSelector:r}=e,n=un(e,["stateId","stateSelector"]);o.current[t]=Object.assign(Object.assign({},n),{stateId:t,stateSelector:r||(e=>e[t])});}),[]),l=React__default["default"].useCallback((t=>{let n=!1;const l=[],a=o.current;if(Object.keys(a).forEach((r=>{const o=a[r],i=o.stateSelector(e.current.state),s=o.stateSelector(t);s!==i&&s!==o.propModel&&l.push(o.stateId),void 0!==o.propModel&&s!==o.propModel&&(n=!0);})),l.length>1)throw new Error(`You're not allowed to update several sub-state in one transaction. You already updated ${l[0]}, therefore, you're not allowed to update ${l.join(", ")} in the same transaction.`);return {ignoreSetState:n,postUpdate:()=>{l.forEach((o=>{const n=a[o],l=a[o].stateSelector(t);if(n.propOnChange){const t=r.signature===Yr.DataGridPro?{api:e.current}:{};n.propOnChange(l,t);}e.current.publishEvent(n.changeEvent,l);}));}}}),[e,r.signature]);Rr(e,{updateControlState:n,applyControlStateConstraint:l},"controlStateApi");}const Ei=(t,r,o,n)=>{const l=Vr(t),[a,i,s]=Br(t),c=React__namespace.useCallback((e=>{void 0===a[r]&&(a[r]=n),i((t=>{const n=Object.assign({},t);return n[r]=o(t[r],e),n})),s();}),[s,a,n,o,i,r]),u=React__namespace.useRef(c);React__namespace.useEffect((()=>{u.current=c;}),[c]);const d=React__namespace.useCallback((e=>u.current(e)),[]);return {gridState:a,dispatch:d,gridApi:l}},Si=(t,r)=>{const o=xr(t,"useGridFilter"),[n,l,a]=Br(t),i=Wr(t,fe),s=React__namespace.useCallback((()=>{o.debug("clearing filtered rows"),l((e=>Object.assign(Object.assign({},e),{visibleRows:{visibleRowsLookup:{}}})));}),[o,l]),c=React__namespace.useCallback(((e,r=zr.And)=>{if(!e.columnField||!e.operatorValue)return;const n=t.current.getColumn(e.columnField);if(!n)return;const i=n.valueParser?n.valueParser(e.value):e.value,s=Object.assign(Object.assign({},e),{value:i});o.debug(`Filtering column: ${s.columnField} ${s.operatorValue} ${s.value} `);const c=n.filterOperators;if(!(null==c?void 0:c.length))throw new Error(`Material-UI: No filter operators found for column '${n.field}'.`);const u=c.find((e=>e.value===s.operatorValue));if(!u)throw new Error(`Material-UI: No filter operator found for column '${n.field}' and operator value '${s.operatorValue}'.`);const d=u.getApplyFilterFn(s,n);"function"==typeof d&&(l((e=>{const o=Object.assign({},e.visibleRows.visibleRowsLookup);return po(e).forEach(((e,n)=>{const l=t.current.getCellParams(n,s.columnField),a=d(l);null==o[n]?o[n]=a:o[n]=r===zr.And?o[n]&&a:o[n]||a;})),Object.assign(Object.assign({},e),{visibleRows:Object.assign(Object.assign({},e.visibleRows),{visibleRowsLookup:o,visibleRows:Object.entries(o).filter((([,e])=>e)).map((([e])=>e))})})})),a());}),[t,a,o,l]),u=React__namespace.useCallback((()=>{if(r.filterMode===Ir.server)return void a();s();const{items:e,linkOperator:o}=t.current.state.filter;e.forEach((e=>{t.current.applyFilter(e,o);})),a();}),[t,s,a,r.filterMode]),d=React__namespace.useCallback((e=>{o.debug("Upserting filter"),l((o=>{const n=[...o.filter.items],l=Object.assign({},e),a=n.findIndex((e=>e.id===l.id));if(1===n.length&&nr(n[0],{})?n[0]=l:-1===a?n.push(l):n[a]=l,null==l.id&&(l.id=Math.round(1e5*Math.random())),null==l.columnField&&(l.columnField=i[0]),null!=l.columnField&&null==l.operatorValue){const e=t.current.getColumn(l.columnField);l.operatorValue=e&&e.filterOperators[0].value;}r.disableMultipleColumnsFiltering&&n.length>1&&(n.length=1);return Object.assign(Object.assign({},o),{filter:Object.assign(Object.assign({},o.filter),{items:n})})})),u();}),[o,l,t,u,r.disableMultipleColumnsFiltering,i]),p=React__namespace.useCallback((e=>{o.debug(`Deleting filter on column ${e.columnField} with value ${e.value}`),l((t=>{const r=[...t.filter.items.filter((t=>t.id!==e.id))];return Object.assign(Object.assign({},t),{filter:Object.assign(Object.assign({},t.filter),{items:r})})})),0===t.current.state.filter.items.length&&t.current.upsertFilter({}),u();}),[t,u,o,l]),m=React__namespace.useCallback((e=>{if(o.debug("Displaying filter panel"),e){const r=n.filter.items.length>0?n.filter.items[n.filter.items.length-1]:null;r&&r.columnField===e||t.current.upsertFilter({columnField:e});}t.current.showPreferences(jl.filters);}),[t,n.filter.items,o]),f=React__namespace.useCallback((()=>{o.debug("Hiding filter panel"),null==t||t.current.hidePreferences();}),[t,o]),g=React__namespace.useCallback(((e=zr.And)=>{o.debug("Applying filter link operator"),l((t=>Object.assign(Object.assign({},t),{filter:Object.assign(Object.assign({},t.filter),{linkOperator:e})}))),u();}),[u,o,l]),b=React__namespace.useCallback((()=>{s(),o.debug("Clearing filter model"),l((e=>Object.assign(Object.assign({},e),{filter:Tr()})));}),[s,o,l]),h=React__namespace.useCallback((e=>{b(),o.debug("Setting filter model"),g(e.linkOperator),e.items.forEach((e=>d(e)));}),[g,b,o,d]),v=React__namespace.useCallback((()=>bo(t.current.state)),[t]);Rr(t,{applyFilterLinkOperator:g,applyFilters:u,applyFilter:c,deleteFilter:p,upsertFilter:d,setFilterModel:h,showFilterPanel:m,hideFilterPanel:f,getVisibleRowModels:v},"FilterApi"),React__namespace.useEffect((()=>{t.current&&(o.debug("Rows prop changed, applying filters"),s(),t.current.applyFilters());}),[t,s,o,r.rows]);const C=React__namespace.useCallback((()=>{o.debug("onColUpdated - GridColumns changed, applying filters");const e=t.current.state.filter,r=fe(t.current.state);o.debug("GridColumns changed, applying filters"),e.items.forEach((e=>{r.find((t=>t===e.columnField))||t.current.deleteFilter(e);})),t.current.applyFilters();}),[t,o]);React__namespace.useEffect((()=>{t.current.updateControlState({stateId:"filter",propModel:r.filterModel,propOnChange:r.onFilterModelChange,stateSelector:e=>e.filter,changeEvent:ne.filterModelChange});}),[t,r.filterModel,r.onFilterModelChange]),React__namespace.useEffect((()=>{if(void 0!==r.filterModel&&r.filterModel.items.length>1){if(r.filterModel.items.find((e=>null==e.id)))throw new Error("The 'id' field is required on filterModel.items when you use multiple filters.")}const e=t.current.state.filter;void 0!==r.filterModel&&r.filterModel!==e&&(o.debug("filterModel prop changed, applying filters"),l((e=>Object.assign(Object.assign({},e),{filter:r.filterModel||Tr()}))),t.current.applyFilters());}),[t,o,r.filterModel,l]),qr(t,ne.rowsSet,t.current.applyFilters),qr(t,ne.rowsUpdate,t.current.applyFilters),qr(t,ne.columnsChange,C);},xi=(t,r)=>{const o=xr(t,"useGridFocus"),[,n,l]=Br(t),a=React__namespace.useRef(null),i=React__namespace.useCallback(((e,r)=>{t.current.getRow(e)&&(n((t=>(o.debug(`Focusing on cell with id=${e} and field=${r}`),Object.assign(Object.assign({},t),{tabIndex:{cell:{id:e,field:r},columnHeader:null},focus:{cell:{id:e,field:r},columnHeader:null}})))),l(),t.current.publishEvent(ne.cellFocusIn,t.current.getCellParams(e,r)));}),[t,l,o,n]),s=React__namespace.useCallback(((e,r)=>{const{cell:a}=t.current.state.focus;a&&t.current.publishEvent(ne.cellFocusOut,t.current.getCellParams(a.id,a.field),r),n((t=>(o.debug(`Focusing on column header with colIndex=${e}`),Object.assign(Object.assign({},t),{tabIndex:{columnHeader:{field:e},cell:null},focus:{columnHeader:{field:e},cell:null}})))),l();}),[t,l,o,n]),c=React__namespace.useCallback((({id:e,field:r})=>{t.current.setCellFocus(e,r);}),[t]),u=React__namespace.useCallback(((e,r)=>{"Enter"===r.key||"Tab"===r.key||Yo(r.key)||t.current.setCellFocus(e.id,e.field);}),[t]),d=React__namespace.useCallback((({field:e},r)=>{r.target===r.currentTarget&&t.current.setColumnHeaderFocus(e,r);}),[t]),p=React__namespace.useCallback((()=>{o.debug("Clearing focus"),n((e=>Object.assign(Object.assign({},e),{focus:{cell:null,columnHeader:null}})));}),[o,n]),m=React__namespace.useCallback((e=>{a.current=e;}),[]),g=React__namespace.useCallback((e=>{const r=a.current;a.current=null;const{cell:o}=t.current.state.focus;if(!o)return void(r&&t.current.setCellFocus(r.id,r.field));if((null==r?void 0:r.id)===o.id&&(null==r?void 0:r.field)===o.field)return;const i=t.current.getCellElement(o.id,o.field);(null==i?void 0:i.contains(e.target))||t.current.getRow(o.id)&&(t.current.publishEvent(ne.cellFocusOut,t.current.getCellParams(o.id,o.field),e),r?t.current.setCellFocus(r.id,r.field):(n((e=>Object.assign(Object.assign({},e),{focus:{cell:null,columnHeader:null}}))),l()));}),[t,l,n]),b=React__namespace.useCallback((e=>{if("view"===e.cellMode)return;const{cell:r}=t.current.state.focus;(null==r?void 0:r.id)===e.id&&(null==r?void 0:r.field)===e.field||t.current.setCellFocus(e.id,e.field);}),[t]);Rr(t,{setCellFocus:i,setColumnHeaderFocus:s},"GridFocusApi"),React__namespace.useEffect((()=>{const{cell:e}=t.current.state.focus;if(e){t.current.getRow(e.id)||n((e=>Object.assign(Object.assign({},e),{focus:{cell:null,columnHeader:null}})));}}),[t,n,r.rows]),React__namespace.useEffect((()=>{const e=ownerDocument(t.current.rootElementRef.current);return e.addEventListener("click",g),()=>{e.removeEventListener("click",g);}}),[t,g]),qr(t,ne.columnHeaderBlur,p),qr(t,ne.cellDoubleClick,c),qr(t,ne.cellMouseUp,m),qr(t,ne.cellKeyDown,u),qr(t,ne.cellModeChange,b),qr(t,ne.columnHeaderFocus,d);},Ri=t=>{const r=xr(t,"useGridKeyboard"),o=React__namespace.useCallback(((e,o)=>{const n=Ol(o.target,Kr.row),l=Number(n.getAttribute("data-rowindex"));let a=l;const i=[...t.current.getSelectedRows().keys()];if(i.length>0){const e=i.map((e=>t.current.getRowIndex(e))),r=e.map((e=>Math.abs(l-e))),o=Math.max(...r);a=e[r.indexOf(o)];}t.current.publishEvent(ne.cellNavigationKeyDown,e,o);const s=t.current.state.focus.cell,c=t.current.getRowIndex(s.id),u=Array(Math.abs(c-a)+1).fill(c>a?a:c);r.debug("Selecting rows "),t.current.selectRows(u,!0,!0);}),[r,t]),n=React__namespace.useCallback(((e,r)=>{if(1===r.target.nodeType&&(null==(n=r.target)||!n.classList.contains(Kr.cell)))return;var n;const l=t.current.getCellParams(e.id,e.field);if(!(l.cellMode===al.Edit)){if($o(r.key)&&r.shiftKey)return r.preventDefault(),void t.current.selectRow(l.id);if(!Yo(r.key)||r.shiftKey)return Yo(r.key)&&r.shiftKey?(r.preventDefault(),void o(l,r)):void("c"===r.key.toLowerCase()&&(r.ctrlKey||r.metaKey)||"a"===r.key.toLowerCase()&&(r.ctrlKey||r.metaKey)&&(r.preventDefault(),t.current.selectRows(t.current.getAllRowIds(),!0)));t.current.publishEvent(ne.cellNavigationKeyDown,l,r);}}),[t,o]),l=React__namespace.useCallback(((e,r)=>{yl(r.target)&&($o(r.key)&&yl(r.target)&&r.preventDefault(),!Yo(r.key)||$o(r.key)||r.shiftKey?Ho(r.key)&&(r.ctrlKey||r.metaKey)&&t.current.toggleColumnMenu(e.field):t.current.publishEvent(ne.columnHeaderNavigationKeyDown,e,r));}),[t]);qr(t,ne.cellKeyDown,n),qr(t,ne.columnHeaderKeyDown,l);},ki=(t,r)=>{const o=xr(t,"useGridKeyboardNavigation"),n=Wr(t,rn),l=Wr(t,lo),a=Wr(t,ge),i=Wr(t,_l),s=Wr(t,ho),c=e=>Ho(e.key)?"ArrowDown":Ao(e.key)?e.shiftKey?"ArrowLeft":"ArrowRight":e.key,u=React__namespace.useCallback(((e,u)=>{u.preventDefault();const d=t.current.getColumnIndex(e.field),p=s.findIndex((([t])=>t===e.id)),m=c(u),f=u.ctrlKey||u.metaKey||u.shiftKey;let g,b=l;if(r.pagination&&l>n.pageSize&&(b=n.pageSize*(n.page+1)),_o(m))g=((e,t)=>{if(!_o(e))throw new Error("Material-UI: The first argument (key) should be an arrow key code.");switch(e){case"ArrowLeft":return Object.assign(Object.assign({},t),{colIndex:t.colIndex-1});case"ArrowRight":return Object.assign(Object.assign({},t),{colIndex:t.colIndex+1});case"ArrowUp":return Object.assign(Object.assign({},t),{rowIndex:t.rowIndex-1});default:return Object.assign(Object.assign({},t),{rowIndex:t.rowIndex+1})}})(m,{colIndex:d,rowIndex:p});else if(No(m)){const e="Home"===m?0:a-1;if(f){let t=0;t=0===e?r.pagination?b-n.pageSize:0:b-1,g={colIndex:e,rowIndex:t};}else g={colIndex:e,rowIndex:p};}else {if(!Vo(m)&&!$o(m))throw new Error("Material-UI. Key not mapped to navigation behavior.");g={colIndex:d,rowIndex:p+(m.indexOf("Down")>-1||$o(m)?i.viewportPageSize:-1*i.viewportPageSize)};}if(g.rowIndex<0){const e=t.current.getVisibleColumns()[g.colIndex].field;return void t.current.setColumnHeaderFocus(e,u)}g.rowIndex=g.rowIndex>=b&&b>0?b-1:g.rowIndex,g.colIndex=g.colIndex<=0?0:g.colIndex,g.colIndex=g.colIndex>=a?a-1:g.colIndex,o.debug(`Navigating to next cell row ${g.rowIndex}, col ${g.colIndex}`),t.current.scrollToIndexes(g);const h=t.current.getVisibleColumns()[g.colIndex].field,[v]=s[g.rowIndex];t.current.setCellFocus(v,h);}),[t,s,l,r.pagination,n.pageSize,n.page,a,o,i]),d=React__namespace.useCallback(((e,r)=>{let n;r.preventDefault();const l=t.current.getColumnIndex(e.field),u=c(r);if(_o(u))n=((e,t)=>{if(!_o(e))throw new Error("Material-UI: The first argument (key) should be an arrow key code.");switch(e){case"ArrowLeft":return {colIndex:t.colIndex-1};case"ArrowRight":return {colIndex:t.colIndex+1};case"ArrowDown":return null;default:return Object.assign({},t)}})(u,{colIndex:l});else {if(!No(u)){if(Vo(u)){if(u.indexOf("Down")>-1){const e=t.current.getVisibleColumns()[l].field,r=t.current.getRowIdFromRowIndex(i.viewportPageSize-1);t.current.setCellFocus(r,e);}return}throw new Error("Material-UI. Key not mapped to navigation behavior.")}n={colIndex:"Home"===u?0:a-1};}if(!n){const e=t.current.getVisibleColumns()[l].field,[r]=s[0];return void t.current.setCellFocus(r,e)}n.colIndex=Math.max(0,n.colIndex),n.colIndex=n.colIndex>=a?a-1:n.colIndex,o.debug(`Navigating to next column row ${n.colIndex}`),t.current.scrollToIndexes(n);const d=t.current.getVisibleColumns()[n.colIndex].field;t.current.setColumnHeaderFocus(d,r);}),[t,a,i,o,s]);qr(t,ne.cellNavigationKeyDown,u),qr(t,ne.columnHeaderNavigationKeyDown,d);};function Mi(t,r,o){const n=xr(t,"useGridScrollFn"),l=React__namespace.useRef();return [React__namespace.useCallback((e=>{var t;e.left===(null===(t=l.current)||void 0===t?void 0:t.left)&&e.top===l.current.top||r&&r.current&&(n.debug(`Moving ${r.current.className} to: ${e.left}-${e.top}`),r.current.style.transform=`translate3d(${-e.left}px, ${-e.top}px, 0px)`,o.current.style.transform=`translate3d(${-e.left}px, 0px, 0px)`,l.current=e);}),[r,n,o])]}const Pi=(e,t)=>t>0&&e>0?Math.ceil(e/t):0,Ii=e=>e.pageCount?Object.assign(Object.assign({},e),{page:Math.max(Math.min(e.page,e.pageCount-1),0)}):e,Li=(t,r)=>{const o=xr(t,"useGridPage"),[,n,l]=Br(t),a=Wr(t,Co),i=React__namespace.useCallback((e=>{o.debug(`Setting page to ${e}`),n((t=>Object.assign(Object.assign({},t),{pagination:Ii(Object.assign(Object.assign({},t.pagination),{page:e}))}))),l();}),[n,l,o]);React__namespace.useEffect((()=>{t.current.updateControlState({stateId:"page",propModel:r.page,propOnChange:r.onPageChange,stateSelector:e=>e.pagination.page,changeEvent:ne.pageChange});}),[t,r.page,r.onPageChange]),React__namespace.useEffect((()=>{n((e=>{const t=void 0!==r.rowCount?r.rowCount:a,o=Pi(t,e.pagination.pageSize),n=null==r.page?e.pagination.page:r.page;return Object.assign(Object.assign({},e),{pagination:Ii(Object.assign(Object.assign({},e.pagination),{page:n,rowCount:t,pageCount:o}))})})),l();}),[n,l,a,r.rowCount,r.page,t]);const s=React__namespace.useCallback((e=>{n((t=>{const r=Pi(t.pagination.rowCount,e);return Object.assign(Object.assign({},t),{pagination:Ii(Object.assign(Object.assign({},t.pagination),{pageCount:r,page:t.pagination.page}))})})),l();}),[n,l]);qr(t,ne.pageSizeChange,s);Rr(t,{setPage:i},"GridPageApi");};function ji(t,r){const o=xr(t,"useApi"),n=React__namespace.useCallback(((e,o,n={})=>{if(n.defaultMuiPrevented=!1,n&&(e=>void 0!==e.isPropagationStopped)(n)&&n.isPropagationStopped())return;const l=r.signature===Yr.DataGridPro?{api:t.current}:{};t.current.emit(e,o,n,l);}),[t,r.signature]),l=React__namespace.useCallback(((e,r,n)=>{o.debug(`Binding ${e} event`),t.current.on(e,r,n);const l=t.current;return ()=>{o.debug(`Clearing ${e} event`),l.removeListener(e,r);}}),[t,o]),a=React__namespace.useCallback((e=>{t.current.publishEvent(ne.componentError,e);}),[t]);React__namespace.useEffect((()=>{o.debug("Initializing grid api.");const e=t.current;return ()=>{o.info("Unmounting Grid component. Clearing all events listeners."),e.emit(ne.unmount),e.removeAllListeners();}}),[o,t]),Rr(t,{subscribeEvent:l,publishEvent:n,showError:a},"GridCoreApi");}const Fi=(t,r)=>{var o,n;const l=xr(t,"useGridContainerProps"),[a,i,s]=Br(t),c=React__namespace.useRef({width:0,height:0}),u=Wr(t,jo),d=Wr(t,be),p=Wr(t,Co),m=Wr(t,rn),g=t.current.windowRef,b=null===(n=null===(o=t.current)||void 0===o?void 0:o.rootElementRef)||void 0===n?void 0:n.current,h=!!d,v=React__namespace.useMemo((()=>{if(null!=r.scrollbarSize)return r.scrollbarSize;if(!h||!b)return 0;const e=function(e,t){const r=e.createElement("div");r.style.width="99px",r.style.height="99px",r.style.position="absolute",r.style.overflow="scroll",r.className="scrollDiv",t.appendChild(r);const o=r.offsetWidth-r.clientWidth;return t.removeChild(r),o}(ownerDocument(b),b);return l.debug(`Detected scroll bar size ${e}.`),e}),[b,l,r.scrollbarSize,h]),C=React__namespace.useCallback((()=>{if(l.debug("Calculating virtual row count."),r.pagination&&(!r.autoPageSize||r.pageSize)){const e=p-m.page*m.pageSize;return e>m.pageSize?m.pageSize:e}return p}),[l,r.autoPageSize,r.pagination,r.pageSize,m.page,m.pageSize,p]),w=React__namespace.useCallback((e=>{l.debug("Calculating scrollbar sizes.");let t=d>c.current.width;const o={y:0,x:t?v:0};if(0===e)return {hasScrollX:t,hasScrollY:!1,sizes:o};const n=e*u,a=!r.autoPageSize&&!r.autoHeight&&n+o.x>c.current.height;return o.y=a?v:0,t=d+o.y>c.current.width,o.x=t?v:0,l.debug(`Scrollbar size on axis x: ${o.x}, y: ${o.y}`),{hasScrollX:t,hasScrollY:a,sizes:o}}),[l,d,r.autoPageSize,r.autoHeight,u,v]),O=React__namespace.useCallback(((e,t)=>{if(!(null==g?void 0:g.current))return null;l.debug("Calculating container sizes.");const o=g.current.getBoundingClientRect();c.current={width:o.width,height:o.height},l.debug(`window Size - W: ${c.current.width} H: ${c.current.height} `);return {width:c.current.width-t.sizes.y,height:r.autoHeight?e*u:c.current.height-t.sizes.x}}),[l,r.autoHeight,u,g]),y=React__namespace.useCallback(((e,t,o)=>{if(!g||!g.current||0===d||Number.isNaN(d))return null;const n=e*u-c.current.height>2*u&&!r.disableVirtualization;if(r.autoPageSize||r.autoHeight||!n){const n=Math.floor(t.height/u),a=o.hasScrollY||e<n?e:n,i=Math.max(a*u+(r.autoHeight?o.sizes.x:0),1),s={isVirtualized:!1,virtualRowsCount:a,renderingZonePageSize:a,viewportPageSize:a,totalSizes:{width:d,height:i},dataContainerSizes:{width:d,height:i},renderingZoneScrollHeight:i-t.height,renderingZone:{width:d,height:i},windowSizes:c.current,lastPage:1};return l.debug("Fixed container props",s),s}const a=Math.floor(t.height/u),i=a>0?Math.ceil(e/a)-1:0,s=2*a,p=s*u,m=p-t.height;let f=i*m+t.height;const b=e%a;b>0&&(f=f-m+b*u);const h={isVirtualized:n,virtualRowsCount:e,viewportPageSize:a,totalSizes:{width:d,height:f},dataContainerSizes:{width:d,height:f},renderingZonePageSize:s,renderingZone:{width:d,height:p},renderingZoneScrollHeight:m,windowSizes:c.current,lastPage:i};return l.debug("virtualized container props",h),h}),[g,d,u,r.autoPageSize,r.autoHeight,r.disableVirtualization,l]),E=React__namespace.useCallback(((e,t)=>{let r=!1;i((o=>(r=e(o),r?t(o):o))),r&&s();}),[s,i]),S=React__namespace.useCallback((()=>{l.debug("Refreshing container sizes");const e=C(),t=w(e),r=O(e,t);if(!r)return;E((e=>e.scrollBar!==t),(e=>Object.assign(Object.assign({},e),{scrollBar:t}))),E((e=>e.viewportSizes!==r),(e=>Object.assign(Object.assign({},e),{viewportSizes:r})));const o=y(e,r,t);E((e=>!nr(e.containerSizes,o)),(e=>Object.assign(Object.assign({},e),{containerSizes:o})));}),[y,w,O,C,l,E]);React__namespace.useEffect((()=>{S();}),[a.columns,r.hideFooter,S,p]),qr(t,ne.debouncedResize,S);},Di=(t,r,o,n,l)=>{const a=xr(t,"useNativeEventListener"),[i,s]=React__namespace.useState(!1),c=React__namespace.useRef(n),u=React__namespace.useCallback((e=>c.current&&c.current(e)),[]);React__namespace.useEffect((()=>{c.current=n;}),[n]),React__namespace.useEffect((()=>{let e;if(e=dr(r)?r():r&&r.current?r.current:null,e&&u&&o&&!i){a.debug(`Binding native ${o} event`),e.addEventListener(o,u,l);const r=e;s(!0);const n=()=>{a.debug(`Clearing native ${o} event`),r.removeEventListener(o,u,l);};t.current.subscribeEvent(ne.unmount,n);}}),[r,u,o,i,a,l,t]);},zi=(t,r)=>{const o=xr(t,"useGridPageSize"),[,n,l]=Br(t),a=Wr(t,Co),i=Wr(t,_l),s=React__namespace.useCallback((e=>{o.debug(`Setting page size to ${e}`),n((t=>Object.assign(Object.assign({},t),{pagination:Object.assign(Object.assign({},t.pagination),{pageSize:e})}))),l();}),[n,l,o]);React__namespace.useEffect((()=>{t.current.updateControlState({stateId:"pageSize",propModel:r.pageSize,propOnChange:r.onPageSizeChange,stateSelector:e=>e.pagination.pageSize,changeEvent:ne.pageSizeChange});}),[t,r.pageSize,r.onPageSizeChange]),React__namespace.useEffect((()=>{const e=null==i?void 0:i.viewportPageSize,o=t.current.state.pagination.pageSize;let a=o;null!=r.pageSize?a=r.pageSize:r.autoPageSize&&(a=null!=e?e:0),a!==o&&(r.autoPageSize&&t.current.publishEvent(ne.pageSizeChange,e),n((e=>Object.assign(Object.assign({},e),{pagination:Object.assign(Object.assign({},e.pagination),{pageSize:a})}))),l());}),[t,n,l,a,r.autoPageSize,r.pageSize,null==i?void 0:i.viewportPageSize]);Rr(t,{setPageSize:s},"GridPageSizeApi");},Ti=t=>{const r=xr(t,"useGridPreferencesPanel"),[,o,n]=Br(t),l=React__namespace.useRef(),a=React__namespace.useRef(),i=React__namespace.useCallback((()=>{r.debug("Hiding Preferences Panel"),o((e=>Object.assign(Object.assign({},e),{preferencePanel:{open:!1}}))),n();}),[n,r,o]),s=React__namespace.useCallback((()=>{a.current=setTimeout((()=>clearTimeout(l.current)),0);}),[]),c=React__namespace.useCallback((()=>{l.current=setTimeout(i,100);}),[i]);Rr(t,{showPreferences:React__namespace.useCallback((e=>{r.debug("Opening Preferences Panel"),s(),o((t=>Object.assign(Object.assign({},t),{preferencePanel:Object.assign(Object.assign({},t.preferencePanel),{open:!0,openedPanelValue:e})}))),n();}),[s,n,r,o]),hidePreferences:c},"ColumnMenuApi"),React__namespace.useEffect((()=>()=>{clearTimeout(l.current),clearTimeout(a.current);}),[]);};let Hi=!1;function Ai(t){const r=React__namespace.useCallback((e=>({field:e,colDef:t.current.getColumn(e)})),[t]),o=React__namespace.useCallback((e=>{const r=t.current.getRow(e);if(!r)throw new Error(`No row with id #${e} found`);return {id:e,columns:t.current.getAllColumns(),row:r,getValue:t.current.getCellValue}}),[t]),n=React__namespace.useCallback(((e,r)=>{const o=t.current.getRow(e);if(!o)throw new Error(`No row with id #${e} found`);const n=xo(t.current.state),l=Mo(t.current.state);return {id:e,field:r,row:o,value:o[r],colDef:t.current.getColumn(r),cellMode:t.current.getCellMode(e,r),getValue:t.current.getCellValue,api:t.current,hasFocus:null!==n&&n.field===r&&n.id===e,tabIndex:l&&l.field===r&&l.id===e?0:-1}}),[t]),l=React__namespace.useCallback(((e,r)=>{const o=t.current.getColumn(r),n=t.current.getCellValue(e,r),l=t.current.getRow(e);if(!l)throw new Error(`No row with id #${e} found`);const a=xo(t.current.state),i=Mo(t.current.state),s={id:e,field:r,row:l,colDef:o,cellMode:t.current.getCellMode(e,r),getValue:t.current.getCellValue,hasFocus:null!==a&&a.field===r&&a.id===e,tabIndex:i&&i.field===r&&i.id===e?0:-1,value:n,formattedValue:n};return o.valueFormatter&&(s.formattedValue=o.valueFormatter(Object.assign(Object.assign({},s),{api:t.current}))),s.isEditable=o&&t.current.isCellEditable(s),s}),[t]),a=React__namespace.useCallback(((e,r)=>{const o=t.current.getColumn(r);if("production"!==process.env.NODE_ENV&&(o||Hi||function(e){console.warn([`Material-UI: You are calling getValue('${e}') but the column \`${e}\` is not defined.`,`Instead, you can access the data from \`params.row.${e}\`.`].join("\n")),Hi=!0;}(r)),!o||!o.valueGetter){const o=t.current.getRow(e);if(!o)throw new Error(`No row with id #${e} found`);return o[r]}return o.valueGetter(n(e,r))}),[t,n]),i=React__namespace.useCallback((e=>t.current.rootElementRef.current?function(e,t){return e.querySelector(`[role="columnheader"][data-field="${Sl(t)}"]`)}(t.current.rootElementRef.current,e):null),[t]),s=React__namespace.useCallback((e=>t.current.rootElementRef.current?xl(t.current.rootElementRef.current,e):null),[t]),c=React__namespace.useCallback(((e,r)=>t.current.rootElementRef.current?function(e,{id:t,field:r}){const o=xl(e,t);return o?o.querySelector(`.${Kr.cell}[data-field="${Sl(r)}"]`):null}(t.current.rootElementRef.current,{id:e,field:r}):null),[t]);Rr(t,{getCellValue:a,getCellParams:l,getCellElement:c,getRowParams:o,getRowElement:s,getColumnHeaderParams:r,getColumnHeaderElement:i},"GridParamsApi");}function $i(e,t,r){const o=t?t(e):e.id;return fa(o,e,r),o}function _i(e,t,r){const o=Object.assign(Object.assign({},{idRowsLookup:{},allRows:[],totalRowCount:0}),{totalRowCount:t&&t>e.length?t:e.length});return e.forEach((e=>{const t=$i(e,r);o.allRows.push(t),o.idRowsLookup[t]=e;})),o}const Ni=(t,r)=>{const o=xr(t,"useGridRows"),[,n,l]=Br(t),a=Wr(t,no),i=React__namespace.useRef(),s=React__namespace.useCallback((e=>{null==i.current&&(i.current=setTimeout((()=>{o.debug("Updating component"),i.current=null,e&&e(),l();}),100));}),[o,l]),c=React__namespace.useRef(a);React__namespace.useEffect((()=>()=>clearTimeout(i.current)),[]),React__namespace.useEffect((()=>{n((e=>(c.current=_i(r.rows,r.rowCount,r.getRowId),Object.assign(Object.assign({},e),{rows:c.current}))));}),[r.getRowId,r.rows,r.rowCount,n]);const u=React__namespace.useCallback((e=>t.current.getSortedRowIds?t.current.getSortedRowIds().indexOf(e):t.current.state.rows.allRows.indexOf(e)),[t]),d=React__namespace.useCallback((e=>t.current.getSortedRowIds?t.current.getSortedRowIds()[e]:t.current.state.rows.allRows[e]),[t]),p=React__namespace.useCallback((e=>{var r;return null!==(r=t.current.state.rows.idRowsLookup[e])&&void 0!==r?r:null}),[t]),m=React__namespace.useCallback((e=>{o.debug(`updating all rows, new length ${e.length}`),c.current.allRows.length>0&&t.current.publishEvent(ne.rowsClear);const l=[],a=e.reduce(((e,t)=>{const o=$i(t,r.getRowId);return e[o]=t,l.push(o),e}),{}),i=r.rowCount&&r.rowCount>l.length?r.rowCount:l.length;c.current={idRowsLookup:a,allRows:l,totalRowCount:i},n((e=>Object.assign(Object.assign({},e),{rows:c.current}))),s((()=>t.current.publishEvent(ne.rowsSet)));}),[o,n,s,t,r.getRowId,r.rowCount]),f=React__namespace.useCallback((e=>{const o=e.reduce(((e,t)=>{const o=$i(t,r.getRowId,"A row was provided without id when calling updateRows():");return e[o]=null!=e[o]?Object.assign(Object.assign({},e[o]),t):t,e}),{}),l=[],a=[];let i=null;if(Object.entries(o).forEach((([e,t])=>{if("delete"===t._action)return void a.push(e);const r=p(e);r?(i||(i=Object.assign({},c.current.idRowsLookup)),i[e]=Object.assign(Object.assign({},r),t)):l.push(t);})),i&&(c.current.idRowsLookup=i,n((e=>Object.assign(Object.assign({},e),{rows:Object.assign({},c.current)})))),a.length>0||l.length>0){a.forEach((e=>{delete c.current.idRowsLookup[e];}));const e=[...Object.values(c.current.idRowsLookup),...l];m(e);}s((()=>t.current.publishEvent(ne.rowsUpdate)));}),[t,s,p,r.getRowId,n,m]),g=React__namespace.useCallback((()=>new Map(t.current.state.rows.allRows.map((e=>[e,t.current.state.rows.idRowsLookup[e]])))),[t]),b=React__namespace.useCallback((()=>t.current.state.rows.totalRowCount),[t]),h=React__namespace.useCallback((()=>t.current.state.rows.allRows),[t]);Rr(t,{getRowIndex:u,getRowIdFromRowIndex:d,getRow:p,getRowModels:g,getRowsCount:b,getAllRowIds:h,setRows:m,updateRows:f},"GridRowApi");};function Vi(t,r){const o=xr(t,"useGridEditRows"),[,n,l]=Br(t),a=React__namespace.useRef(null),i=React__namespace.useRef(null),s=Wr(t,ue),c=(e,o)=>{e.cellMode!==al.View&&(r.editMode===ll.Row?(i.current=null,a.current=setTimeout((()=>{var r;if((null===(r=i.current)||void 0===r?void 0:r.id)!==e.id){t.current.commitRowChange(e.id,o);const r=t.current.getRowParams(e.id);t.current.publishEvent(ne.rowEditStop,r,o);}}))):(t.current.commitCellChange(e,o),t.current.publishEvent(ne.cellEditStop,e,o)));},u=React__namespace.useCallback((e=>{i.current=e;}),[]),d=lr(((e,t)=>{c(e,t);})),p=lr((e=>{const{cell:r}=t.current.state.focus;if(!r)return;const o=t.current.getCellParams(r.id,r.field);c(o,e);})),m=React__namespace.useCallback(((e,r,a)=>{const i=t.current.getCellMode(e,r)===al.Edit;a===al.Edit&&i||a===al.View&&!i||(o.debug(`Switching cell id: ${e} field: ${r} to mode: ${a}`),n((o=>{const n=Object.assign({},o.editRows);return n[e]=Object.assign({},n[e]),a===al.Edit?n[e][r]={value:t.current.getCellValue(e,r)}:(delete n[e][r],Object.keys(n[e]).length||delete n[e]),Object.assign(Object.assign({},o),{editRows:n})})),l(),t.current.publishEvent(ne.cellModeChange,{id:e,field:r,mode:a,api:t.current}));}),[t,l,o,n]),f=React__namespace.useCallback(((e,r)=>{const o=t.current.getRowMode(e)===il.Edit;r===il.Edit&&o||r===il.View&&!o||(n((o=>{const n=Object.assign({},o.editRows);return r===il.Edit?(n[e]={},s.forEach((r=>{const o=t.current.getCellParams(e,r.field);o.isEditable&&(n[e][r.field]={value:o.value});}))):delete n[e],Object.assign(Object.assign({},o),{editRows:n})})),l());}),[t,s,l,n]),g=React__namespace.useCallback((e=>r.editMode===ll.Cell?il.View:t.current.state.editRows[e]?il.Edit:il.View),[t,r.editMode]),b=React__namespace.useCallback(((e,r)=>{const o=t.current.state.editRows;return o[e]&&o[e][r]?al.Edit:al.View}),[t]),h=React__namespace.useCallback((e=>!!e.colDef.editable&&!!e.colDef.renderEditCell&&(!r.isCellEditable||r.isCellEditable(e))),[r.isCellEditable]),v=React__namespace.useCallback(((e,r)=>{const o={id:e.id,field:e.field,props:{value:e.value}};t.current.publishEvent(ne.editCellPropsChange,o,r);}),[t]),C=React__namespace.useCallback((e=>{const{id:r,field:a,props:i}=e;o.debug(`Setting cell props on id: ${r} field: ${a}`),n((e=>{const o=t.current.getColumn(a),n=o.valueParser?o.valueParser(i.value,t.current.getCellParams(r,a)):i.value,l=Object.assign({},e.editRows);return l[r]=Object.assign({},e.editRows[r]),l[r][a]=Object.assign(Object.assign({},i),{value:n}),Object.assign(Object.assign({},e),{editRows:l})})),l();}),[t,l,o,n]),w=React__namespace.useCallback((e=>{C(e);}),[C]),O=React__namespace.useCallback((e=>{o.debug("Setting row model"),n((t=>Object.assign(Object.assign({},t),{editRows:e}))),l();}),[l,o,n]),y=React__namespace.useCallback((()=>t.current.state.editRows),[t]),E=React__namespace.useCallback(((e,r)=>{const{id:o,field:n}=e,l=t.current.getEditRowsModel();if(!l[o]||!l[o][n])throw new Error(`Material-UI: Cell at id: ${o} and field: ${n} is not in edit mode.`);const{error:a,value:i}=l[o][n];if(!a){const o=Object.assign(Object.assign({},e),{value:i});return t.current.publishEvent(ne.cellEditCommit,o,r),!0}return !1}),[t]),S=React__namespace.useCallback((e=>{if(r.editMode===ll.Row)throw new Error("Material-UI: You can't commit changes when the edit mode is 'row'.");const{id:n,field:l}=e,a=t.current.getEditRowsModel(),{value:i}=a[n][l];o.debug(`Setting cell id: ${n} field: ${l} to value: ${null==i?void 0:i.toString()}`);const s=t.current.getRow(n),c=Object.assign(Object.assign({},s),{[l]:i});t.current.updateRows([c]);}),[t,o,r.editMode]),x=React__namespace.useCallback(((e,o)=>{if(r.editMode===ll.Cell)throw new Error("Material-UI: You can't commit changes when the edit mode is 'cell'.");const n=t.current.getEditRowsModel()[e];if(!n)throw new Error(`Material-UI: Row at id: ${e} is not being editted.`);return !Object.values(n).some((e=>!!e.error))&&(t.current.publishEvent(ne.rowEditCommit,e,o),!0)}),[t,r.editMode]),R=React__namespace.useCallback(((e,t)=>{e.isEditable&&(m(e.id,e.field,al.Edit),qo(t)&&Go(t.key)&&C({id:e.id,field:e.field,props:{value:""}}));}),[C,m]),k=React__namespace.useCallback((e=>{t.current.setRowMode(e.id,il.Edit);}),[t]),M=React__namespace.useCallback(((e,r)=>{t.current.setRowMode(e.id,il.View),"Enter"===r.key&&t.current.publishEvent(ne.cellNavigationKeyDown,e,r);}),[t]),P=React__namespace.useCallback((e=>{const r=t.current.getEditRowsModel()[e];if(!r)throw new Error(`Material-UI: Row at id: ${e} is not being editted.`);const o=t.current.getRow(e),n=Object.assign({},o);Object.keys(r).forEach((e=>{n[e]=r[e].value;})),t.current.updateRows([n]);}),[t]),I=React__namespace.useCallback(((e,t)=>{const r=t.detail>1;e.isEditable&&e.cellMode===al.View&&r&&t.preventDefault();}),[]),L=React__namespace.useCallback(((e,o)=>{const{id:n,field:l,cellMode:a,isEditable:i}=e;if(!i)return;const s=a===al.Edit;if(r.editMode===ll.Row){const r=t.current.getRowParams(e.id);return void(s?"Enter"===o.key?(t.current.commitRowChange(e.id),t.current.publishEvent(ne.rowEditStop,r,o)):"Escape"===o.key&&t.current.publishEvent(ne.rowEditStop,r,o):"Enter"===o.key&&t.current.publishEvent(ne.rowEditStart,r,o))}const c=o.ctrlKey||o.metaKey||o.altKey;var u;if(!s&&(u=o.key,Ho(u)||Bo(u)||Go(u))&&!c&&t.current.publishEvent(ne.cellEditStart,e,o),!s&&Bo(o.key)&&(t.current.setEditCellValue({id:n,field:l,value:""}),t.current.commitCellChange({id:n,field:l},o),t.current.publishEvent(ne.cellEditStop,e,o)),s&&Zo(o.key)){const e={id:n,field:l};if(!t.current.commitCellChange(e,o))return}s&&(e=>Uo.indexOf(e)>-1)(o.key)&&t.current.publishEvent(ne.cellEditStop,e,o);}),[t,r.editMode]),j=React__namespace.useCallback(((e,r)=>{m(e.id,e.field,al.View),r&&qo(r)&&(Zo(r.key)?t.current.publishEvent(ne.cellNavigationKeyDown,e,r):("Escape"===r.key||Bo(r.key))&&t.current.setCellFocus(e.id,e.field));}),[t,m]),F=React__namespace.useCallback(((e,o)=>{if(e.isEditable)if(r.editMode===ll.Row){const r=t.current.getRowParams(e.id);t.current.publishEvent(ne.rowEditStart,r,o);}else t.current.publishEvent(ne.cellEditStart,e,o);}),[t,r.editMode]);qr(t,ne.cellKeyDown,L),qr(t,ne.cellMouseDown,I),qr(t,ne.cellDoubleClick,F),qr(t,ne.cellFocusOut,d),qr(t,ne.cellFocusIn,u),qr(t,ne.columnHeaderDragStart,p),qr(t,ne.editCellPropsChange,w),qr(t,ne.cellEditStart,R),qr(t,ne.cellEditStop,j),qr(t,ne.cellEditCommit,S),qr(t,ne.rowEditStart,k),qr(t,ne.rowEditStop,M),qr(t,ne.rowEditCommit,P),Jr(t,ne.editCellPropsChange,r.onEditCellPropsChange),Jr(t,ne.cellEditCommit,r.onCellEditCommit),Jr(t,ne.cellEditStart,r.onCellEditStart),Jr(t,ne.cellEditStop,r.onCellEditStop),Jr(t,ne.rowEditCommit,r.onRowEditCommit),Jr(t,ne.rowEditStart,r.onRowEditStart),Jr(t,ne.rowEditStop,r.onRowEditStop),Rr(t,{setCellMode:m,getCellMode:b,setRowMode:f,getRowMode:g,isCellEditable:h,commitCellChange:E,commitRowChange:x,setEditRowsModel:O,getEditRowsModel:y,setEditCellValue:v},"EditRowApi"),React__namespace.useEffect((()=>{t.current.updateControlState({stateId:"editRows",propModel:r.editRowsModel,propOnChange:r.onEditRowsModelChange,stateSelector:e=>e.editRows,changeEvent:ne.editRowsModelChange});}),[t,r.editRowsModel,r.onEditRowsModelChange]),React__namespace.useEffect((()=>{const e=t.current.state.editRows;void 0!==r.editRowsModel&&r.editRowsModel!==e&&t.current.setEditRowsModel(r.editRowsModel||{});}),[t,r.editRowsModel]);}const Bi=(t,r)=>{const o=xr(t,"useGridSelection"),[,n,l]=Br(t),a=Wr(t,zo),i=Wr(t,ao),s=React__namespace.useMemo((()=>null==r.selectionModel||Array.isArray(r.selectionModel)?r.selectionModel:[r.selectionModel]),[r.selectionModel]),{checkboxSelection:c,disableMultipleSelection:u,disableSelectionOnClick:d,isRowSelectable:p}=a,m=React__namespace.useCallback((()=>an(t.current.state)),[t]),f=React__namespace.useCallback((e=>{const{id:r,allowMultipleOverride:a,isSelected:i,isMultipleKey:s}=e;p&&!p(t.current.getRowParams(r))||(o.debug(`Selecting row ${r}`),n((e=>{let t=sn(e);if(a||!u&&s||c){(null==i?void 0===t[r]:i)?t[r]=r:delete t[r];}else {const e=null==i?!s||void 0===t[r]:i;t={},e&&(t[r]=r);}return Object.assign(Object.assign({},e),{selection:Object.values(t)})})),l());}),[p,u,t,o,c,l,n]),g=React__namespace.useCallback(((e,r=!0,o=!1)=>{const n=t.current.getRow(e);n&&f({id:e,row:n,allowMultipleOverride:o,isSelected:r});}),[t,f]),b=React__namespace.useCallback(((e,r=!0,o=!1)=>{const a=p?e.filter((e=>p(t.current.getRowParams(e)))):e;u&&a.length>1&&!c||(n((e=>{const t=o?{}:sn(e);return a.forEach((e=>{r?t[e]=e:void 0!==t[e]&&delete t[e];})),Object.assign(Object.assign({},e),{selection:Object.values(t)})})),l());}),[p,u,c,n,l,t]),h=React__namespace.useCallback((e=>{t.current.state.selection!==e&&n((t=>Object.assign(Object.assign({},t),{selection:e})));}),[n,t]),v=React__namespace.useCallback(((e,t)=>{d||f({id:e.id,row:e.row,isMultipleKey:t.metaKey||t.ctrlKey});}),[d,f]);qr(t,ne.rowClick,v);Rr(t,{selectRow:g,getSelectedRows:m,selectRows:b,setSelectionModel:h},"GridSelectionApi"),React__namespace.useEffect((()=>{t.current.updateControlState({stateId:"selection",propModel:s,propOnChange:r.onSelectionModelChange,stateSelector:nn,changeEvent:ne.selectionChange});}),[t,r.onSelectionModelChange,s]),React__namespace.useEffect((()=>{n((e=>{const t=nn(e),r=sn(e);let o=!1;return t.forEach((e=>{i[e]||(delete r[e],o=!0);})),o?Object.assign(Object.assign({},e),{selection:Object.values(r)}):e})),l();}),[i,t,n,l]),React__namespace.useEffect((()=>{void 0!==s&&t.current.setSelectionModel(s);}),[t,s,n]),React__namespace.useEffect((()=>{n((e=>{const r=[...e.selection],o=sn(e);let n=!1;return r.forEach((e=>{!p||p(t.current.getRowParams(e))||(delete o[e],n=!0);})),n?Object.assign(Object.assign({},e),{selection:Object.values(o)}):e})),l();}),[t,n,l,p]);},Wi=(t,r)=>{const o=xr(t,"useGridSorting"),[n,l,a]=Br(t),i=Wr(t,lo),s=React__namespace.useCallback(((e,t)=>{const r=n.sorting.sortModel.findIndex((t=>t.field===e));let o=[...n.sorting.sortModel];return r>-1?t?o.splice(r,1,t):o.splice(r,1):o=[...n.sorting.sortModel,t],o}),[n.sorting.sortModel]),c=React__namespace.useCallback(((e,t)=>{const o=n.sorting.sortModel.find((t=>t.field===e.field));if(o){const e=void 0===t?mn(r.sortingOrder,o.sort):t;return null==e?void 0:Object.assign(Object.assign({},o),{sort:e})}return {field:e.field,sort:void 0===t?mn(r.sortingOrder):t}}),[n.sorting.sortModel,r.sortingOrder]),u=React__namespace.useCallback(((e,r)=>({id:e,field:r,value:t.current.getCellValue(e,r),api:t.current})),[t]),d=React__namespace.useCallback((e=>(t,r)=>e.reduce(((e,o,n)=>{if(0!==e)return e;const{comparator:l}=o,a=t[n],i=r[n];return e=l(a.value,i.value,a,i)}),0)),[]),p=React__namespace.useCallback((e=>e.map((e=>{const r=t.current.getColumn(e.field);if(!r)throw new Error(`Error sorting: column with field '${e.field}' not found. `);const o="desc"===e.sort?(e,t,o,n)=>-1*r.sortComparator(e,t,o,n):r.sortComparator;return {field:r.field,comparator:o}}))),[t]),m=React__namespace.useCallback((()=>{let e=t.current.getAllRowIds();if(r.sortingMode===Ir.server)return o.debug("Skipping sorting rows as sortingMode = server"),void l((t=>Object.assign(Object.assign({},t),{sorting:Object.assign(Object.assign({},t.sorting),{sortedRows:e})})));const n=t.current.state.sorting.sortModel;if(n.length>0){const t=p(n);o.debug("Sorting rows with ",n),e=e.map((e=>t.map((t=>u(e,t.field))))).sort(d(t)).map((e=>e[0].id));}l((t=>Object.assign(Object.assign({},t),{sorting:Object.assign(Object.assign({},t.sorting),{sortedRows:e})}))),a();}),[t,o,u,l,a,p,d,r.sortingMode]),f=React__namespace.useCallback((e=>{l((t=>Object.assign(Object.assign({},t),{sorting:Object.assign(Object.assign({},t.sorting),{sortModel:e})}))),a(),t.current.applySorting();}),[l,a,t]),g=React__namespace.useCallback(((e,t,o)=>{if(!e.sortable)return;const n=c(e,t);let l;l=!o||r.disableMultipleColumnsSorting?n?[n]:[]:s(e.field,n),f(l);}),[s,f,c,r.disableMultipleColumnsSorting]),b=React__namespace.useCallback((({colDef:e},t)=>{const r=t.shiftKey||t.metaKey||t.ctrlKey;g(e,void 0,r);}),[g]),h=React__namespace.useCallback((({colDef:e},t)=>{!Ho(t.key)||t.ctrlKey||t.metaKey||g(e,void 0,t.shiftKey);}),[g]),v=React__namespace.useCallback((()=>{l((e=>Object.assign(Object.assign({},e),{sorting:Object.assign(Object.assign({},e.sorting),{sortedRows:[]})})));}),[l]),C=React__namespace.useCallback((()=>n.sorting.sortModel),[n.sorting.sortModel]),w=React__namespace.useCallback((()=>Object.values(po(t.current.state))),[t]),O=React__namespace.useCallback((()=>uo(t.current.state)),[t]),y=React__namespace.useCallback((()=>{l((e=>{const t=e.sorting.sortModel,r=ue(e);let o=t;return t.length>0&&(o=t.reduce(((e,t)=>(r.find((e=>e.field===t.field))&&e.push(t),e)),[])),Object.assign(Object.assign({},e),{sorting:Object.assign(Object.assign({},e.sorting),{sortModel:o})})}));}),[l]);qr(t,ne.columnHeaderClick,b),qr(t,ne.columnHeaderKeyDown,h),qr(t,ne.rowsSet,t.current.applySorting),qr(t,ne.rowsClear,v),qr(t,ne.rowsUpdate,t.current.applySorting),qr(t,ne.columnsChange,y);Rr(t,{getSortModel:C,getSortedRows:w,getSortedRowIds:O,setSortModel:f,sortColumn:g,applySorting:m},"GridSortApi"),React__namespace.useEffect((()=>{t.current.applySorting();}),[t,r.rows]),React__namespace.useEffect((()=>{i>0&&(o.debug("row changed, applying sortModel"),t.current.applySorting());}),[i,t,o]),React__namespace.useEffect((()=>{t.current.updateControlState({stateId:"sortModel",propModel:r.sortModel,propOnChange:r.onSortModelChange,stateSelector:e=>e.sorting.sortModel,changeEvent:ne.sortModelChange});}),[t,r.sortModel,r.onSortModelChange]),React__namespace.useEffect((()=>{const e=t.current.state.sorting.sortModel;void 0!==r.sortModel&&r.sortModel!==e&&f(r.sortModel);}),[r.sortModel,t,f]);};function Gi(e,t,r=0,o=t.length){if(t.length<=0)return -1;if(r>=o)return r;const n=r+Math.floor((o-r)/2);return e<=t[n]?Gi(e,t,r,n):Gi(e,t,n+1,o)}const Ui=(t,r)=>{var o;const n=xr(t,"useGridVirtualization"),l=t.current.columnHeadersElementRef,a=t.current.windowRef,i=t.current.renderingZoneRef,[s,c,u]=Br(t),d=Wr(t,rn),p=Wr(t,lo),m=Wr(t,de),f=Wr(t,pe),g=React__namespace.useRef(null),b=React__namespace.useRef(null),h=React__namespace.useRef(0),[v]=Mi(t,i,l),C=React__namespace.useCallback((e=>{let t=!1;return c((r=>{const o=Object.assign(Object.assign({},r.rendering),e);return nr(r.rendering,o)?r:(t=!0,Object.assign(Object.assign({},r),{rendering:o}))})),t}),[c]),w=React__namespace.useCallback((e=>{if(null==t.current.state.containerSizes)return null;let o=0;r.pagination&&null!=d.pageSize&&"client"===r.paginationMode&&(o=d.pageSize*d.page);const n=e*t.current.state.containerSizes.viewportPageSize+o;let l=n+t.current.state.containerSizes.renderingZonePageSize;const a=t.current.state.containerSizes.virtualRowsCount+o;l>a&&(l=a);return {page:e,firstRowIdx:n,lastRowIdx:l}}),[t,r.pagination,d.pageSize,r.paginationMode,d.page]),O=React__namespace.useCallback((()=>{if(null==t.current.state.containerSizes)return null;return Object.assign(Object.assign(Object.assign({},g.current),w(t.current.state.rendering.virtualPage)),{paginationCurrentPage:d.page,pageSize:d.pageSize})}),[g,w,t,d.page,d.pageSize]),y=React__namespace.useCallback((()=>{const e=O();C({renderContext:e})&&(n.debug("reRender: trigger rendering"),u());}),[O,n,u,C]),E=React__namespace.useCallback((e=>Gi(e,f.positions)),[f.positions]),S=React__namespace.useCallback((e=>m.length?m[E(e)]:null),[E,m]),x=React__namespace.useCallback(((e,o)=>{var l,a,i,s;if(!e)return !1;b.current=e;const c=e.windowSizes.width;h.current=o,n.debug(`GridColumns from ${null===(l=S(o))||void 0===l?void 0:l.field} to ${null===(a=S(o+c))||void 0===a?void 0:a.field}`);const u=E(o),d=E(o+c),p=(null===(i=null==g?void 0:g.current)||void 0===i?void 0:i.firstColIdx)||0,v=(null===(s=null==g?void 0:g.current)||void 0===s?void 0:s.lastColIdx)||0,C=r.columnBuffer,w=C>1?C-1:C,O=Math.abs(u-w-p),y=Math.abs(d+w-v);n.debug(`Column buffer: ${C}, tolerance: ${w}`),n.debug(`Previous values  => first: ${p}, last: ${v}`),n.debug(`Current displayed values  => first: ${u}, last: ${d}`),n.debug(`Difference with first: ${O} and last: ${y} `);const x=m.length>0?m.length-1:0,R=u-C>=0?u-C:0,k={leftEmptyWidth:f.positions[R],rightEmptyWidth:0,firstColIdx:R,lastColIdx:d+C>=x?x:d+C};return t.current.state.scrollBar.hasScrollX?k.rightEmptyWidth=f.totalWidth-f.positions[k.lastColIdx]-m[k.lastColIdx].computedWidth:r.disableExtendRowFullWidth||(k.rightEmptyWidth=t.current.state.viewportSizes.width-f.totalWidth),nr(k,g.current)?(n.debug("No rendering needed on columns"),!1):(g.current=k,n.debug("New columns state to render",k),!0)}),[t,f.positions,f.totalWidth,S,E,n,r.columnBuffer,r.disableExtendRowFullWidth,m]),R=React__namespace.useCallback(((e=!1)=>{if(r.disableVirtualization)return;const o=t.current.state,l=o.containerSizes;if(!a||!a.current||!l)return;const i=o.scrollBar,{scrollLeft:s,scrollTop:c}=a.current;n.debug(`Handling scroll Left: ${s} Top: ${c}`);let u=x(l,s);const p=s,m=o.containerSizes.renderingZoneScrollHeight,f=o.rendering.virtualPage,g=m>0?Math.floor(c/m):0,b=c%m,h={left:i.hasScrollX?p:0,top:l.isVirtualized?b:c};l.isVirtualized&&f!==g?(C({virtualPage:g}),n.debug(`Changing page from ${f} to ${g}`),u=!0):(!l.isVirtualized&&f>0&&(n.debug("Virtualization disabled, setting virtualPage to 0"),C({virtualPage:0})),v(h)),C({renderingZoneScroll:h,realScroll:{left:a.current.scrollLeft,top:a.current.scrollTop}}),t.current.publishEvent(ne.rowsScroll,h);const w=o.rendering.renderContext&&o.rendering.renderContext.paginationCurrentPage!==d.page;(e||u||w)&&y();}),[t,n,d.page,y,v,C,x,a,r.disableVirtualization]),k=React__namespace.useCallback((()=>{v({left:0,top:0}),C({virtualPage:0}),a&&a.current&&(a.current.scrollTop=0,a.current.scrollLeft=0),C({renderingZoneScroll:{left:0,top:0}});}),[v,C,a]),M=React__namespace.useRef(null),P=React__namespace.useCallback((()=>{r.disableVirtualization||a.current.scrollLeft<0||a.current.scrollTop<0||(M.current||c((e=>Object.assign(Object.assign({},e),{isScrolling:!0}))),clearTimeout(M.current),M.current=setTimeout((()=>{M.current=null,c((e=>Object.assign(Object.assign({},e),{isScrolling:!1}))),u();}),300),t.current.updateViewport&&t.current.updateViewport());}),[r.disableVirtualization,a,t,c,u]),I=React__namespace.useCallback((()=>s.containerSizes),[s.containerSizes]),L=React__namespace.useCallback((()=>s.rendering.renderContext||void 0),[s.rendering.renderContext]);ar((()=>{r.disableVirtualization||i&&i.current&&(n.debug("applying scrollTop ",s.rendering.renderingZoneScroll.top),v(s.rendering.renderingZoneScroll));}));Rr(t,{getContainerPropsState:I,getRenderContextState:L,updateViewport:R},"GridVirtualizationApi"),React__namespace.useEffect((()=>{var e;(null===(e=s.rendering.renderContext)||void 0===e?void 0:e.paginationCurrentPage)!==d.page&&t.current.updateViewport&&(n.debug(`State paginationState.page changed to ${d.page}. `),t.current.updateViewport(!0),k());}),[t,d.page,null===(o=s.rendering.renderContext)||void 0===o?void 0:o.paginationCurrentPage,n,k]),React__namespace.useEffect((()=>(t.current.updateViewport&&(n.debug(`totalRowCount has changed to ${p}, updating viewport.`),t.current.updateViewport(!0)),()=>{clearTimeout(M.current);})),[n,p,s.viewportSizes,s.scrollBar,s.containerSizes,t]),Di(t,a,"scroll",P,{passive:!0});const j=React__namespace.useCallback((()=>{n.debug("Clearing previous renderedColRef"),g.current=null;}),[n,g]);qr(t,ne.columnsChange,j),qr(t,ne.debouncedResize,j);};function Ki(e){const{clientHeight:t,scrollTop:r,offsetHeight:o,offsetTop:n}=e,l=n+o;return l-t>r?l-t:n<r?n:void 0}const Zi=(t,r)=>{const o=xr(t,"useGridScroll"),n=t.current.columnHeadersElementRef,l=t.current.windowRef,a=Wr(t,jo),i=Wr(t,rn),s=Wr(t,lo),c=Wr(t,de),u=Wr(t,pe),d=React__namespace.useCallback((e=>{if(0===s||0===c.length)return !1;o.debug(`Scrolling to cell at row ${e.rowIndex}, col: ${e.colIndex} `);const n={};if(null!=e.colIndex&&(n.left=Ki({clientHeight:l.current.clientWidth,scrollTop:l.current.scrollLeft,offsetHeight:c[e.colIndex].computedWidth,offsetTop:u.positions[e.colIndex]})),null!=e.rowIndex){const t=r.pagination?e.rowIndex-i.page*i.pageSize:e.rowIndex;n.top=Ki({clientHeight:l.current.clientHeight,scrollTop:l.current.scrollTop,offsetHeight:a,offsetTop:a*t});}return (void 0!==typeof n.left||void 0!==typeof n.top)&&(t.current.scroll(n),!0)}),[s,c,o,t,r.pagination,i.page,i.pageSize,l,u.positions,a]),p=React__namespace.useCallback((e=>{l.current&&null!=e.left&&n.current&&(n.current.scrollLeft=e.left,l.current.scrollLeft=e.left,o.debug(`Scrolling left: ${e.left}`)),l.current&&null!=e.top&&(l.current.scrollTop=e.top,o.debug(`Scrolling top: ${e.top}`)),o.debug("Scrolling, updating container, and viewport");}),[l,n,o]),m=React__namespace.useCallback((()=>Ur(t.current.getState())),[t]);Rr(t,{scroll:p,scrollToIndexes:d,getScrollPosition:m},"GridScrollApi");const f=React__namespace.useCallback((e=>{e.target.scrollLeft=0,e.target.scrollTop=0;}),[]);Di(t,(()=>{var e,r,o;return null===(o=null===(r=null===(e=t.current)||void 0===e?void 0:e.renderingZoneRef)||void 0===r?void 0:r.current)||void 0===o?void 0:o.parentElement}),"scroll",f),Di(t,(()=>{var e,r;return null===(r=null===(e=t.current)||void 0===e?void 0:e.columnHeadersContainerElementRef)||void 0===r?void 0:r.current}),"scroll",f);};class Yi extends class{constructor(){this.maxListeners=10,this.warnOnce=!1,this.events={};}on(e,t){Array.isArray(this.events[e])||(this.events[e]=[]),this.events[e].push(t),"production"!==process.env.NODE_ENV&&this.events[e].length>this.maxListeners&&!1===this.warnOnce&&(this.warnOnce=!0,console.warn([`Possible EventEmitter memory leak detected. ${this.events[e].length} ${e} listeners added.`,"Use emitter.setMaxListeners() to increase limit."].join("\n")));}removeListener(e,t){if(Array.isArray(this.events[e])){const r=this.events[e].indexOf(t);r>-1&&this.events[e].splice(r,1);}}removeAllListeners(e){e?Array.isArray(this.events[e])&&(this.events[e]=[]):this.events={};}emit(e,...t){if(Array.isArray(this.events[e])){const r=this.events[e].slice(),o=r.length;for(let e=0;e<o;e+=1)r[e].apply(this,t);}}once(e,t){const r=this;this.on(e,(function o(...n){r.removeListener(e,o),t.apply(r,n);}));}}{on(e,t,r){Array.isArray(this.events[e])||(this.events[e]=[]),r&&r.isFirst?this.events[e].splice(0,0,t):this.events[e].push(t),"production"!==process.env.NODE_ENV&&this.events[e].length>this.maxListeners&&!1===this.warnOnce&&(this.warnOnce=!0,console.warn([`Possible EventEmitter memory leak detected. ${this.events[e].length} ${e} listeners added.`,"Use emitter.setMaxListeners() to increase limit."].join("\n")));}}function qi(...t){const r=t[0],o=React__namespace.useRef(new Yi);return React__namespace.useImperativeHandle(r,(()=>o.current),[o]),o}function Xi(e,t){if(void 0!==t&&e.changedTouches){for(let r=0;r<e.changedTouches.length;r+=1){const o=e.changedTouches[r];if(o.identifier===t)return {x:o.clientX,y:o.clientY}}return !1}return {x:e.clientX,y:e.clientY}}const Ji=(t,r)=>{const o=xr(t,"useGridColumnResize"),[,n,l]=Br(t),a=React__namespace.useRef(),i=React__namespace.useRef(),s=React__namespace.useRef(),c=React__namespace.useRef(),u=React__namespace.useRef(),d=React__namespace.useRef(),p=e=>{o.debug(`Updating width to ${e} for col ${a.current.field}`),a.current.computedWidth=e,a.current.width=e,a.current.flex=void 0,i.current.style.width=`${e}px`,i.current.style.minWidth=`${e}px`,i.current.style.maxWidth=`${e}px`,s.current.forEach((t=>{const r=t;r.style.width=`${e}px`,r.style.minWidth=`${e}px`,r.style.maxWidth=`${e}px`;}));},m=lr((e=>{w(),t.current.updateColumn(a.current),clearTimeout(u.current),u.current=setTimeout((()=>{var r;t.current.publishEvent(ne.columnResizeStop,null,e),t.current.publishEvent(ne.columnWidthChange,{element:i.current,colDef:a.current,width:null===(r=a.current)||void 0===r?void 0:r.computedWidth},e);})),o.debug(`Updating col ${a.current.field} with new width: ${a.current.width}`);})),g=lr((e=>{var r;if(0===e.buttons)return void m(e);let o=c.current+e.clientX-i.current.getBoundingClientRect().left;o=Math.max(null===(r=a.current)||void 0===r?void 0:r.minWidth,o),p(o),t.current.publishEvent(ne.columnResize,{element:i.current,colDef:a.current,width:o},e);})),b=lr((({colDef:e},r)=>{var n;if(0!==r.button)return;if(!r.currentTarget.classList.contains(Kr["columnSeparator--resizable"]))return;r.preventDefault(),i.current=Ol(r.currentTarget,Kr.columnHeader),o.debug(`Start Resize on col ${e.field}`),t.current.publishEvent(ne.columnResizeStart,{field:e.field},r),a.current=e,i.current=null===(n=t.current.columnHeadersElementRef)||void 0===n?void 0:n.current.querySelector(`[data-field="${e.field}"]`),s.current=El(i.current);const l=ownerDocument(t.current.rootElementRef.current);l.body.style.cursor="col-resize",c.current=a.current.computedWidth-(r.clientX-i.current.getBoundingClientRect().left),l.addEventListener("mousemove",g),l.addEventListener("mouseup",m);})),h=lr((e=>{Xi(e,d.current)&&(w(),t.current.updateColumn(a.current),clearTimeout(u.current),u.current=setTimeout((()=>{t.current.publishEvent(ne.columnResizeStop,null,e);})),o.debug(`Updating col ${a.current.field} with new width: ${a.current.width}`));})),v=lr((e=>{var r;const o=Xi(e,d.current);if(!o)return;if("mousemove"===e.type&&0===e.buttons)return void h(e);let n=c.current+o.x-i.current.getBoundingClientRect().left;n=Math.max(null===(r=a.current)||void 0===r?void 0:r.minWidth,n),p(n),t.current.publishEvent(ne.columnResize,{element:i.current,colDef:a.current,width:n},e);})),C=lr((e=>{var r;if(!Ol(e.target,Kr["columnSeparator--resizable"]))return;e.preventDefault();const n=e.changedTouches[0];null!=n&&(d.current=n.identifier),i.current=Ol(e.target,Kr.columnHeader);const l=i.current.getAttribute("data-field");const u=t.current.getColumn(l);o.debug(`Start Resize on col ${u.field}`),t.current.publishEvent(ne.columnResizeStart,{field:l},e),a.current=u,i.current=function(e,t){return e.querySelector(`[data-field="${t}"]`)}(null===(r=t.current.columnHeadersElementRef)||void 0===r?void 0:r.current,u.field),s.current=El(i.current),c.current=a.current.computedWidth-(n.clientX-i.current.getBoundingClientRect().left);const p=ownerDocument(e.currentTarget);p.addEventListener("touchmove",v),p.addEventListener("touchend",h);})),w=React__namespace.useCallback((()=>{const e=ownerDocument(t.current.rootElementRef.current);e.body.style.removeProperty("cursor"),e.removeEventListener("mousemove",g),e.removeEventListener("mouseup",m),e.removeEventListener("touchmove",v),e.removeEventListener("touchend",h);}),[t,g,m,v,h]),O=React__namespace.useCallback((({field:e})=>{n((t=>Object.assign(Object.assign({},t),{columnResize:Object.assign(Object.assign({},t.columnResize),{resizingColumnField:e})}))),l();}),[n,l]),y=React__namespace.useCallback((()=>{n((e=>Object.assign(Object.assign({},e),{columnResize:Object.assign(Object.assign({},e.columnResize),{resizingColumnField:""})}))),l();}),[n,l]);React__namespace.useEffect((()=>()=>{clearTimeout(u.current),w();}),[t,C,w]),Di(t,(()=>{var e,r;return null===(r=null===(e=t.current)||void 0===e?void 0:e.columnHeadersElementRef)||void 0===r?void 0:r.current}),"touchstart",C,{passive:!1}),qr(t,ne.columnSeparatorMouseDown,b),qr(t,ne.columnResizeStart,O),qr(t,ne.columnResizeStop,y),Jr(t,ne.columnResize,r.onColumnResize),Jr(t,ne.columnWidthChange,r.onColumnWidthChange);},Qi=React__namespace.memo((function(t){const r=ae(),o=Qo(),[n]=o.sortingOrder,l="asc"===n?null==r?void 0:r.current.components.ColumnSortedAscendingIcon:null==r?void 0:r.current.components.ColumnSortedDescendingIcon;return l?React__namespace.createElement(l,Object.assign({},t)):null})),es=React__namespace.forwardRef((function(t,r){const{message:o}=t,n=un(t,["message"]),l=ae().current.getLocaleText("errorOverlayDefaultLabel");return React__namespace.createElement(Ma,Object.assign({ref:r},n),o||l)})),ts=React__namespace.forwardRef((function(t,r){const o=ae().current.getLocaleText("noResultsOverlayLabel");return React__namespace.createElement(Ma,Object.assign({ref:r},t),o)})),rs={BooleanCellFalseIcon:Ln,BooleanCellTrueIcon:Tn,Checkbox:Checkbox$1,ColumnFilteredIcon:On,ColumnMenu:za,ColumnMenuIcon:In,ColumnResizeIcon:Rn,ColumnSelectorIcon:xn,ColumnSortedAscendingIcon:vn,ColumnSortedDescendingIcon:Cn,ColumnsPanel:Za,ColumnUnsortedIcon:Qi,DensityComfortableIcon:Pn,DensityCompactIcon:kn,DensityStandardIcon:Mn,ErrorOverlay:es,ExportIcon:zn,FilterPanel:ti,Footer:ui,Header:di,LoadingOverlay:pi,NoResultsOverlay:ts,NoRowsOverlay:mi,OpenFilterButtonIcon:wn,Pagination:gi,Panel:Xa,PreferencesPanel:Ja},os=(t,r)=>{const o=React__namespace.useMemo((()=>{var e,t;return {BooleanCellTrueIcon:r.components&&r.components.BooleanCellTrueIcon||rs.BooleanCellTrueIcon,BooleanCellFalseIcon:r.components&&r.components.BooleanCellFalseIcon||rs.BooleanCellFalseIcon,ColumnFilteredIcon:r.components&&r.components.ColumnFilteredIcon||rs.ColumnFilteredIcon,ColumnMenuIcon:r.components&&r.components.ColumnMenuIcon||rs.ColumnMenuIcon,ColumnResizeIcon:r.components&&r.components.ColumnResizeIcon||rs.ColumnResizeIcon,ColumnSelectorIcon:r.components&&r.components.ColumnSelectorIcon||rs.ColumnSelectorIcon,ColumnUnsortedIcon:void 0===(null===(e=r.components)||void 0===e?void 0:e.ColumnUnsortedIcon)?rs.ColumnUnsortedIcon:null===(t=r.components)||void 0===t?void 0:t.ColumnUnsortedIcon,ColumnSortedAscendingIcon:r.components&&r.components.ColumnSortedAscendingIcon||rs.ColumnSortedAscendingIcon,ColumnSortedDescendingIcon:r.components&&r.components.ColumnSortedDescendingIcon||rs.ColumnSortedDescendingIcon,DensityComfortableIcon:r.components&&r.components.DensityComfortableIcon||rs.DensityComfortableIcon,DensityCompactIcon:r.components&&r.components.DensityCompactIcon||rs.DensityCompactIcon,DensityStandardIcon:r.components&&r.components.DensityStandardIcon||rs.DensityStandardIcon,ExportIcon:r.components&&r.components.ExportIcon||rs.ExportIcon,OpenFilterButtonIcon:r.components&&r.components.OpenFilterButtonIcon||rs.OpenFilterButtonIcon,Checkbox:r.components&&r.components.Checkbox||rs.Checkbox,ColumnMenu:r.components&&r.components.ColumnMenu||rs.ColumnMenu,ErrorOverlay:r.components&&r.components.ErrorOverlay||rs.ErrorOverlay,Footer:r.components&&r.components.Footer||rs.Footer,Header:r.components&&r.components.Header||rs.Header,Toolbar:r.components&&r.components.Toolbar,PreferencesPanel:r.components&&r.components.PreferencesPanel||rs.PreferencesPanel,LoadingOverlay:r.components&&r.components.LoadingOverlay||rs.LoadingOverlay,NoResultsOverlay:r.components&&r.components.NoResultsOverlay||rs.NoResultsOverlay,NoRowsOverlay:r.components&&r.components.NoRowsOverlay||rs.NoRowsOverlay,Pagination:r.components&&r.components.Pagination||rs.Pagination,FilterPanel:r.components&&r.components.FilterPanel||rs.FilterPanel,ColumnsPanel:r.components&&r.components.ColumnsPanel||rs.ColumnsPanel,Panel:r.components&&r.components.Panel||rs.Panel}}),[r.components]);t.current.components=o,t.current.componentsProps=r.componentsProps;},ns=()=>{const t=ae(),r=Wr(t,zo),o=Wr(t,so),n=Wr(t,de),[l]=Br(t);return React__namespace.useMemo((()=>({state:l,rows:o,columns:n,options:r,apiRef:t,rootElement:t.current.rootElementRef})),[l,o,n,r,t])},ls=(e,t)=>{var r,o;return "v5"===mr()?{components:{MuiDataGrid:{defaultProps:{localeText:Object.assign(Object.assign({},e),{MuiTablePagination:(null===(r=null==t?void 0:t.components)||void 0===r?void 0:r.MuiTablePagination.defaultProps)||{}})}}}}:{props:{MuiDataGrid:{localeText:Object.assign(Object.assign({},e),{MuiTablePagination:(null===(o=null==t?void 0:t.props)||void 0===o?void 0:o.MuiTablePagination)||{}})}}}},as=ls({noRowsLabel:"لا توجد صفوف",noResultsOverlayLabel:"لم يتم العثور على نتائج.",errorOverlayDefaultLabel:"حدث خطأ.",toolbarDensity:"كثافة",toolbarDensityLabel:"كثافة",toolbarDensityCompact:"مدمج",toolbarDensityStandard:"المعيار",toolbarDensityComfortable:"مريح",toolbarColumns:"الأعمدة",toolbarColumnsLabel:"حدد الأعمدة",toolbarFilters:"الفلاتر",toolbarFiltersLabel:"اظهر الفلاتر",toolbarFiltersTooltipHide:"إخفاء الفلاتر",toolbarFiltersTooltipShow:"اظهر الفلاتر",toolbarFiltersTooltipActive:e=>`${e} فلاتر نشطة`,toolbarExport:"تصدير",toolbarExportLabel:"تصدير",toolbarExportCSV:"تنزيل كملف CSV",columnsPanelTextFieldLabel:"ايجاد عمود",columnsPanelTextFieldPlaceholder:"عنوان العمود",columnsPanelDragIconLabel:"إعادة ترتيب العمود",columnsPanelShowAllButton:"عرض الكل",columnsPanelHideAllButton:"اخفاء الكل",filterPanelAddFilter:"اضف فلتر",filterPanelDeleteIconLabel:"حذف",filterPanelOperators:"العاملين",filterPanelOperatorAnd:"و",filterPanelOperatorOr:"او",filterPanelColumns:"الأعمدة",filterPanelInputLabel:"قيمة",filterPanelInputPlaceholder:"قيمة التصفية",filterOperatorContains:"يحتوي على",filterOperatorEquals:"يساوي",filterOperatorStartsWith:"يبدأ ب",filterOperatorEndsWith:"ينتهي بـ",filterOperatorIs:"يكون",filterOperatorNot:"ليس",filterOperatorAfter:"يكون بعد",filterOperatorOnOrAfter:"في أو بعد",filterOperatorBefore:"يكون",filterOperatorOnOrBefore:"في أو قبل",filterOperatorIsEmpty:"فارغ",filterOperatorIsNotEmpty:"ليس فارغا",filterValueAny:"أي",filterValueTrue:"صحيح",filterValueFalse:"خاطئة",columnMenuLabel:"القائمة",columnMenuShowColumns:"إظهار الأعمدة",columnMenuFilter:"فلتر",columnMenuHideColumn:"إخفاء",columnMenuUnsort:"غير مرتب",columnMenuSortAsc:"الترتيب حسب ASC",columnMenuSortDesc:"الترتيب حسب DESC",columnHeaderFiltersTooltipActive:e=>`${e} فلاتر نشطة`,columnHeaderFiltersLabel:"اظهر الفلاتر",columnHeaderSortIconLabel:"ترتيب",footerRowSelected:e=>`${e.toLocaleString()} صفوف مختارة`,footerTotalRows:"إجمالي الصفوف:",footerTotalVisibleRows:(e,t)=>`${e.toLocaleString()} من ${t.toLocaleString()}`,checkboxSelectionHeaderName:"تحديد",booleanCellTrueLabel:"صحيح",booleanCellFalseLabel:"خاطئة"},enUS_1),is=ls({noRowsLabel:"Няма редове",errorOverlayDefaultLabel:"Възникна грешка.",toolbarDensity:"Гъстота",toolbarDensityLabel:"Гъстота",toolbarDensityCompact:"Компактна",toolbarDensityStandard:"Стандартна",toolbarDensityComfortable:"Комфортна",toolbarColumns:"Колони",toolbarColumnsLabel:"Покажи селектора на колони",toolbarFilters:"Филтри",toolbarFiltersLabel:"Покажи Филтрите",toolbarFiltersTooltipHide:"Скрий Филтрите",toolbarFiltersTooltipShow:"Покажи Филтрите",toolbarFiltersTooltipActive:e=>`${e} активни филтри`,columnsPanelTextFieldLabel:"Намери колона",columnsPanelTextFieldPlaceholder:"Заглавие на колона",columnsPanelDragIconLabel:"Пренареди на колона",columnsPanelShowAllButton:"Покажи Всички",columnsPanelHideAllButton:"Скрий Всички",filterPanelAddFilter:"Добави Филтър",filterPanelDeleteIconLabel:"Изтрий",filterPanelOperators:"Оператори",filterPanelOperatorAnd:"И",filterPanelOperatorOr:"Или",filterPanelColumns:"Колони",filterOperatorContains:"съдържа",filterOperatorEquals:"равно",filterOperatorStartsWith:"започва с",filterOperatorEndsWith:"завършва с",filterOperatorIs:"е",filterOperatorNot:"не е",filterOperatorAfter:"е след",filterOperatorOnOrAfter:"е на или след",filterOperatorBefore:"е преди",filterOperatorOnOrBefore:"е на или преди",filterPanelInputLabel:"Стойност",filterPanelInputPlaceholder:"Стойност на филтъра",columnMenuLabel:"Меню",columnMenuShowColumns:"Покажи колоните",columnMenuFilter:"Филтри",columnMenuHideColumn:"Скрий",columnMenuUnsort:"Отмени сортирането",columnMenuSortAsc:"Сортирай по възходящ ред",columnMenuSortDesc:"Сортирай по низходящ ред",columnHeaderFiltersTooltipActive:e=>`${e} активни филтри`,columnHeaderFiltersLabel:"Покажи Филтрите",columnHeaderSortIconLabel:"Сортирай",footerRowSelected:e=>1!==e?`${e.toLocaleString()} избрани редове`:`${e.toLocaleString()} избран ред`,footerTotalRows:"Общо Rедове:"},bgBG_1),ss=ls({noRowsLabel:"Žádné záznamy",noResultsOverlayLabel:"Nenašli se žadné výsledky.",errorOverlayDefaultLabel:"Stala sa nepředvídaná chyba.",toolbarDensity:"Hustota",toolbarDensityLabel:"Hustota",toolbarDensityCompact:"Kompaktní",toolbarDensityStandard:"Standartní",toolbarDensityComfortable:"Komfortní",toolbarColumns:"Sloupce",toolbarColumnsLabel:"Vybrat sloupec",toolbarFilters:"Filtry",toolbarFiltersLabel:"Zobrazit filtry",toolbarFiltersTooltipHide:"Skrýt filtry",toolbarFiltersTooltipShow:"Zobrazit filtry",toolbarFiltersTooltipActive:e=>{let t="aktivních filtrů";return e>1&&e<5?t="aktivní filtry":1===e&&(t="aktivní filtr"),`${e} ${t}`},toolbarExport:"Export",toolbarExportLabel:"Export",toolbarExportCSV:"Stáhnout jako CSV",columnsPanelTextFieldLabel:"Najít sloupec",columnsPanelTextFieldPlaceholder:"Název sloupce",columnsPanelDragIconLabel:"Uspořádat sloupce",columnsPanelShowAllButton:"Zobrazit vše",columnsPanelHideAllButton:"Skrýt vše",filterPanelAddFilter:"Přidat filtr",filterPanelDeleteIconLabel:"Odstranit",filterPanelOperators:"Operátory",filterPanelOperatorAnd:"A",filterPanelOperatorOr:"Nebo",filterPanelColumns:"Sloupce",filterPanelInputLabel:"Hodnota",filterPanelInputPlaceholder:"Hodnota filtru",filterOperatorContains:"obsahuje",filterOperatorEquals:"rovná se",filterOperatorStartsWith:"začíná s",filterOperatorEndsWith:"končí na",filterOperatorIs:"je",filterOperatorNot:"není",filterOperatorAfter:"je po",filterOperatorOnOrAfter:"je na nebo po",filterOperatorBefore:"je před",filterOperatorOnOrBefore:"je na nebo dříve",filterValueAny:"jakýkoliv",filterValueTrue:"ano",filterValueFalse:"ne",columnMenuLabel:"Menu",columnMenuShowColumns:"Zobrazit sloupce",columnMenuFilter:"Filtr",columnMenuHideColumn:"Skrýt",columnMenuUnsort:"Zrušit filtry",columnMenuSortAsc:"Seřadit vzestupně",columnMenuSortDesc:"Seřadit sestupně",columnHeaderFiltersTooltipActive:e=>{let t="aktivních filtrů";return e>1&&e<5?t="aktivní filtry":1===e&&(t="aktivní filtr"),`${e} ${t}`},columnHeaderFiltersLabel:"Zobrazit filtry",columnHeaderSortIconLabel:"Filtrovat",footerRowSelected:e=>{let t="vybraných záznamů";return e>1&&e<5?t="vybrané záznamy":1===e&&(t="vybraný záznam"),`${e} ${t}`},footerTotalRows:"Celkem řádků:",checkboxSelectionHeaderName:"Výběr řádku",booleanCellTrueLabel:"ano",booleanCellFalseLabel:"ne"},csCZ_1),cs=ls({noRowsLabel:"Keine Einträge",noResultsOverlayLabel:"Keine Ergebnisse gefunden.",errorOverlayDefaultLabel:"Ein unerwarteter Fehler ist aufgetreten.",toolbarDensity:"Zeilenhöhe",toolbarDensityLabel:"Zeilenhöhe",toolbarDensityCompact:"Kompakt",toolbarDensityStandard:"Standard",toolbarDensityComfortable:"Breit",toolbarColumns:"Spalten",toolbarColumnsLabel:"Zeige Spaltenauswahl",toolbarFilters:"Filter",toolbarFiltersLabel:"Zeige Filter",toolbarFiltersTooltipHide:"Verberge Filter",toolbarFiltersTooltipShow:"Zeige Filter",toolbarFiltersTooltipActive:e=>1!==e?`${e} aktive Filter`:`${e} aktiver Filter`,toolbarExport:"Exportieren",toolbarExportLabel:"Exportieren",toolbarExportCSV:"Download als CSV",columnsPanelTextFieldLabel:"Finde Spalte",columnsPanelTextFieldPlaceholder:"Spaltenüberschrift",columnsPanelDragIconLabel:"Spalte umsortieren",columnsPanelShowAllButton:"Zeige alle",columnsPanelHideAllButton:"Verberge alle",filterPanelAddFilter:"Filter hinzufügen",filterPanelDeleteIconLabel:"Löschen",filterPanelOperators:"Operatoren",filterPanelOperatorAnd:"Und",filterPanelOperatorOr:"Oder",filterPanelColumns:"Spalten",filterPanelInputLabel:"Wert",filterPanelInputPlaceholder:"Wert filtern",filterOperatorContains:"beinhaltet",filterOperatorEquals:"ist gleich",filterOperatorStartsWith:"beginnt mit",filterOperatorEndsWith:"endet mit",filterOperatorIs:"ist",filterOperatorNot:"ist nicht",filterOperatorOnOrAfter:"ist an oder nach",filterOperatorBefore:"ist vor",filterOperatorOnOrBefore:"ist an oder vor",filterOperatorAfter:"ist nach",filterOperatorIsEmpty:"ist leer",filterOperatorIsNotEmpty:"ist nicht leer",columnMenuLabel:"Menü",columnMenuShowColumns:"Zeige alle Spalten",columnMenuFilter:"Filter",columnMenuHideColumn:"Verbergen",columnMenuUnsort:"Sortierung deaktivieren",columnMenuSortAsc:"Sortiere aufsteigend",columnMenuSortDesc:"Sortiere absteigend",columnHeaderFiltersTooltipActive:e=>1!==e?`${e} aktive Filter`:`${e} aktiver Filter`,columnHeaderFiltersLabel:"Zeige Filter",columnHeaderSortIconLabel:"Sortieren",footerRowSelected:e=>1!==e?`${e.toLocaleString()} Einträge ausgewählt`:`${e.toLocaleString()} Eintrag ausgewählt`,footerTotalRows:"Gesamt:",footerTotalVisibleRows:(e,t)=>`${e.toLocaleString()} von ${t.toLocaleString()}`},deDE_1),us=ls({noRowsLabel:"Δεν υπάρχουν καταχωρήσεις",errorOverlayDefaultLabel:"Παρουσιάστηκε απρόβλεπτο σφάλμα.",toolbarDensity:"Ύψος σειράς",toolbarDensityLabel:"Ύψος σειράς",toolbarDensityCompact:"Συμπαγής",toolbarDensityStandard:"Προκαθορισμένο",toolbarDensityComfortable:"Πλατύ",toolbarColumns:"Στήλες",toolbarColumnsLabel:"Επιλέξτε στήλες",toolbarFilters:"Φίλτρα",toolbarFiltersLabel:"Εμφάνιση φίλτρων",toolbarFiltersTooltipHide:"Απόκρυψη φίλτρων",toolbarFiltersTooltipShow:"Εμφάνιση φίλτρων",toolbarFiltersTooltipActive:e=>1!==e?`${e} ενεργά φίλτρα`:`${e} ενεργό φίλτρο`,toolbarExport:"Εξαγωγή",toolbarExportLabel:"Εξαγωγή",toolbarExportCSV:"Λήψη ως CSV",columnsPanelTextFieldLabel:"Εύρεση στήλης",columnsPanelTextFieldPlaceholder:"Επικεφαλίδα στήλης",columnsPanelDragIconLabel:"Αναδιάταξη στήλης",columnsPanelShowAllButton:"Προβολή όλων",columnsPanelHideAllButton:"Απόκρυψη όλων",filterPanelAddFilter:"Προσθήκη φίλτρου",filterPanelDeleteIconLabel:"Διαγραφή",filterPanelOperators:"Τελεστές",filterPanelOperatorAnd:"Καί",filterPanelOperatorOr:"Ή",filterPanelColumns:"Στήλες",filterPanelInputLabel:"Τιμή",filterPanelInputPlaceholder:"Τιμή φίλτρου",filterOperatorContains:"περιέχει",filterOperatorEquals:"ισούται",filterOperatorStartsWith:"ξεκινάει με",filterOperatorEndsWith:"τελειώνει με",filterOperatorIs:"είναι",filterOperatorNot:"δεν είναι",filterOperatorAfter:"είναι μετά",filterOperatorOnOrAfter:"είναι ίσο ή μετά",filterOperatorBefore:"είναι πριν",filterOperatorOnOrBefore:"είναι ίσο ή πριν",columnMenuLabel:"Μενού",columnMenuShowColumns:"Εμφάνιση στηλών",columnMenuFilter:"Φίλτρο",columnMenuHideColumn:"Απόκρυψη",columnMenuUnsort:"Απενεργοποίηση ταξινόμησης",columnMenuSortAsc:"Ταξινόμηση σε αύξουσα σειρά",columnMenuSortDesc:"Ταξινόμηση σε φθίνουσα σειρά",columnHeaderFiltersTooltipActive:e=>1!==e?`${e} ενεργά φίλτρα`:`${e} ενεργό φίλτρο`,columnHeaderFiltersLabel:"Εμφάνιση φίλτρων",columnHeaderSortIconLabel:"Ταξινόμηση",footerRowSelected:e=>1!==e?`${e.toLocaleString()} επιλεγμένες γραμμές`:`${e.toLocaleString()} επιλεγμένη γραμμή`,footerTotalRows:"Σύνολο Γραμμών:"}),ds=ls(Mr,enUS_1),ps=ls({noRowsLabel:"Sin filas",errorOverlayDefaultLabel:"Ha ocurrido un error.",toolbarDensity:"Densidad",toolbarDensityLabel:"Densidad",toolbarDensityCompact:"Compacta",toolbarDensityStandard:"Standard",toolbarDensityComfortable:"Comoda",toolbarColumns:"Columnas",toolbarColumnsLabel:"Seleccionar columnas",toolbarFilters:"Filtros",toolbarFiltersLabel:"Mostrar filtros",toolbarFiltersTooltipHide:"Ocultar filtros",toolbarFiltersTooltipShow:"Mostrar filtros",toolbarFiltersTooltipActive:e=>e>1?`${e} filtros activos`:`${e} filtro activo`,toolbarExport:"Exportar",toolbarExportLabel:"Exportar",toolbarExportCSV:"Descargar como CSV",columnsPanelTextFieldLabel:"Columna de búsqueda",columnsPanelTextFieldPlaceholder:"Título de columna",columnsPanelDragIconLabel:"Reorder columna",columnsPanelShowAllButton:"Mostrar todo",columnsPanelHideAllButton:"Ocultar todo",filterPanelAddFilter:"Agregar filtro",filterPanelDeleteIconLabel:"Borrar",filterPanelOperators:"Operadores",filterPanelOperatorAnd:"Y",filterPanelOperatorOr:"O",filterPanelColumns:"Columnas",filterPanelInputLabel:"Valor",filterPanelInputPlaceholder:"Valor de filtro",filterOperatorContains:"contiene",filterOperatorEquals:"es igual",filterOperatorStartsWith:"comienza con",filterOperatorEndsWith:"termina con",filterOperatorIs:"es",filterOperatorNot:"no es",filterOperatorAfter:"es posterior",filterOperatorOnOrAfter:"es en o posterior",filterOperatorBefore:"es anterior",filterOperatorOnOrBefore:"es en o anterior",filterOperatorIsEmpty:"está vacío",filterOperatorIsNotEmpty:"no esta vacío",columnMenuLabel:"Menú",columnMenuShowColumns:"Mostrar columnas",columnMenuFilter:"Filtro",columnMenuHideColumn:"Ocultar",columnMenuUnsort:"Desordenar",columnMenuSortAsc:"Ordenar ASC",columnMenuSortDesc:"Ordenar DESC",columnHeaderFiltersTooltipActive:e=>e>1?`${e} filtros activos`:`${e} filtro activo`,columnHeaderFiltersLabel:"Mostrar filtros",columnHeaderSortIconLabel:"Ordenar",footerRowSelected:e=>e>1?`${e.toLocaleString()} filas seleccionadas`:`${e.toLocaleString()} fila seleccionada`,footerTotalRows:"Filas Totales:",footerTotalVisibleRows:(e,t)=>`${e.toLocaleString()} de ${t.toLocaleString()}`},esES_1),ms=ls({noRowsLabel:"Pas de résultats",noResultsOverlayLabel:"Aucun résultat.",errorOverlayDefaultLabel:"Une erreur est apparue.",toolbarDensity:"Densité",toolbarDensityLabel:"Densité",toolbarDensityCompact:"Compact",toolbarDensityStandard:"Standard",toolbarDensityComfortable:"Confortable",toolbarColumns:"Colonnes",toolbarColumnsLabel:"Choisir les colonnes",toolbarFilters:"Filtres",toolbarFiltersLabel:"Afficher les filtres",toolbarFiltersTooltipHide:"Cacher les filtres",toolbarFiltersTooltipShow:"Afficher les filtres",toolbarFiltersTooltipActive:e=>e>1?`${e} filtres actifs`:`${e} filtre actif`,toolbarExport:"Exporter",toolbarExportLabel:"Exporter",toolbarExportCSV:"Télécharger en CSV",columnsPanelTextFieldLabel:"Chercher colonne",columnsPanelTextFieldPlaceholder:"Titre de la colonne",columnsPanelDragIconLabel:"Réorganiser la colonne",columnsPanelShowAllButton:"Tout afficher",columnsPanelHideAllButton:"Tout cacher",filterPanelAddFilter:"Ajouter un filtre",filterPanelDeleteIconLabel:"Supprimer",filterPanelOperators:"Opérateurs",filterPanelOperatorAnd:"Et",filterPanelOperatorOr:"Ou",filterPanelColumns:"Colonnes",filterPanelInputLabel:"Valeur",filterPanelInputPlaceholder:"Filtrer la valeur",filterOperatorContains:"contient",filterOperatorEquals:"égal à",filterOperatorStartsWith:"commence par",filterOperatorEndsWith:"se termine par",filterOperatorIs:"est",filterOperatorNot:"n'est pas",filterOperatorOnOrAfter:"égal ou postérieur",filterOperatorAfter:"postérieur",filterOperatorOnOrBefore:"égal ou antérieur",filterOperatorBefore:"antérieur",filterOperatorIsEmpty:"est vide",filterOperatorIsNotEmpty:"n'est pas vide",columnMenuLabel:"Menu",columnMenuShowColumns:"Afficher les colonnes",columnMenuFilter:"Filtrer",columnMenuHideColumn:"Cacher",columnMenuUnsort:"Annuler le tri",columnMenuSortAsc:"Tri ascendant",columnMenuSortDesc:"Tri descendant",columnHeaderFiltersTooltipActive:e=>e>1?`${e} filtres actifs`:`${e} filtre actif`,columnHeaderFiltersLabel:"Afficher les filtres",columnHeaderSortIconLabel:"Trier",footerRowSelected:e=>e>1?`${e.toLocaleString()} lignes sélectionnées`:`${e.toLocaleString()} ligne sélectionnée`,footerTotalRows:"Lignes totales :",footerTotalVisibleRows:(e,t)=>`${e.toLocaleString()} sur ${t.toLocaleString()}`,checkboxSelectionHeaderName:"Sélection"},frFR_1),fs=ls({noRowsLabel:"Nessun record",noResultsOverlayLabel:"Nessun record trovato.",errorOverlayDefaultLabel:"Si è verificato un errore.",toolbarDensity:"Densità",toolbarDensityLabel:"Densità",toolbarDensityCompact:"Compact",toolbarDensityStandard:"Standard",toolbarDensityComfortable:"Confortable",toolbarColumns:"Colonne",toolbarColumnsLabel:"Seleziona le colonne",toolbarFilters:"Filtri",toolbarFiltersLabel:"Mostra i filtri",toolbarFiltersTooltipHide:"Nascondi i filtri",toolbarFiltersTooltipShow:"Mostra i filtri",toolbarFiltersTooltipActive:e=>e>1?`${e} filtri attivi`:`${e} filtro attivo`,columnsPanelTextFieldLabel:"Cerca colonna",columnsPanelTextFieldPlaceholder:"Titolo della colonna",columnsPanelDragIconLabel:"Riordina la colonna",columnsPanelShowAllButton:"Mostra tutto",columnsPanelHideAllButton:"Nascondi tutto",filterPanelAddFilter:"Aggiungi un filtro",filterPanelDeleteIconLabel:"Rimuovi",filterPanelOperators:"Operatori",filterPanelOperatorAnd:"E (and)",filterPanelOperatorOr:"O (or)",filterPanelColumns:"Colonne",filterPanelInputLabel:"Valore",filterPanelInputPlaceholder:"Filtra il valore",filterOperatorContains:"contiene",filterOperatorEquals:"uguale a",filterOperatorStartsWith:"comincia per",filterOperatorEndsWith:"termina per",filterOperatorIs:"uguale a",filterOperatorNot:"diversa da",filterOperatorOnOrAfter:"a partire dal",filterOperatorAfter:"dopo il",filterOperatorOnOrBefore:"fino al",filterOperatorBefore:"prima del",filterOperatorIsEmpty:"è vuoto",filterOperatorIsNotEmpty:"non è vuoto",columnMenuLabel:"Menu",columnMenuShowColumns:"Mostra le colonne",columnMenuFilter:"Filtra",columnMenuHideColumn:"Nascondi",columnMenuUnsort:"Annulla l'ordinamento",columnMenuSortAsc:"Ordinamento crescente",columnMenuSortDesc:"Ordinamento decrescente",columnHeaderFiltersTooltipActive:e=>e>1?`${e} filtri attivi`:`${e} filtro attivo`,columnHeaderFiltersLabel:"Mostra i filtri",columnHeaderSortIconLabel:"Ordina",footerRowSelected:e=>e>1?`${e.toLocaleString()} record selezionati`:`${e.toLocaleString()} record selezionato`,footerTotalRows:"Record totali :",footerTotalVisibleRows:(e,t)=>`${e.toLocaleString()} di ${t.toLocaleString()}`,checkboxSelectionHeaderName:"Seleziona"},itIT_1),gs=ls({noRowsLabel:"行がありません",errorOverlayDefaultLabel:"エラーが発生しました。",toolbarDensity:"行間隔",toolbarDensityLabel:"行間隔",toolbarDensityCompact:"コンパクト",toolbarDensityStandard:"標準",toolbarDensityComfortable:"ひろめ",toolbarColumns:"列一覧",toolbarColumnsLabel:"列選択",toolbarFilters:"フィルター",toolbarFiltersLabel:"フィルター表示",toolbarFiltersTooltipHide:"フィルター非表示",toolbarFiltersTooltipShow:"フィルター表示",toolbarFiltersTooltipActive:e=>`${e}件のフィルターを適用中`,toolbarExport:"エクスポート",toolbarExportLabel:"エクスポート",toolbarExportCSV:"CSVダウンロード",columnsPanelTextFieldLabel:"列検索",columnsPanelTextFieldPlaceholder:"検索クエリを入力...",columnsPanelDragIconLabel:"列並べ替え",columnsPanelShowAllButton:"すべて表示",columnsPanelHideAllButton:"すべて非表示",filterPanelAddFilter:"フィルター追加",filterPanelDeleteIconLabel:"削除",filterPanelOperators:"オペレータ",filterPanelOperatorAnd:"And",filterPanelOperatorOr:"Or",filterPanelColumns:"列",filterPanelInputLabel:"値",filterPanelInputPlaceholder:"値を入力...",filterOperatorContains:"...を含む",filterOperatorEquals:"...に等しい",filterOperatorStartsWith:"...で始まる",filterOperatorEndsWith:"...で終わる",filterOperatorIs:"...である",filterOperatorNot:"...でない",filterOperatorAfter:"...より後ろ",filterOperatorOnOrAfter:"...以降",filterOperatorBefore:"...より前",filterOperatorOnOrBefore:"...以前",columnMenuLabel:"メニュー",columnMenuShowColumns:"列表示",columnMenuFilter:"フィルター",columnMenuHideColumn:"列非表示",columnMenuUnsort:"ソート解除",columnMenuSortAsc:"昇順ソート",columnMenuSortDesc:"降順ソート",columnHeaderFiltersTooltipActive:e=>`${e}件のフィルターを適用中`,columnHeaderFiltersLabel:"フィルター表示",columnHeaderSortIconLabel:"ソート",footerRowSelected:e=>`${e}行を選択中`,footerTotalRows:"総行数:"},jaJP_1),bs=ls({noRowsLabel:"Geen resultaten.",errorOverlayDefaultLabel:"Er deed zich een fout voor.",toolbarDensity:"Grootte",toolbarDensityLabel:"Grootte",toolbarDensityCompact:"Compact",toolbarDensityStandard:"Normaal",toolbarDensityComfortable:"Breed",toolbarColumns:"Kolommen",toolbarColumnsLabel:"Kies kolommen",toolbarFilters:"Filters",toolbarFiltersLabel:"Toon filters",toolbarFiltersTooltipHide:"Verberg filters",toolbarFiltersTooltipShow:"Toon filters",toolbarFiltersTooltipActive:e=>e>1?`${e} actieve filters`:`${e} filter actief`,columnsPanelTextFieldLabel:"Zoek kolom",columnsPanelTextFieldPlaceholder:"Kolomtitel",columnsPanelDragIconLabel:"Kolom herschikken",columnsPanelShowAllButton:"Alles tonen",columnsPanelHideAllButton:"Alles verbergen",filterPanelAddFilter:"Filter toevoegen",filterPanelDeleteIconLabel:"Verwijderen",filterPanelOperators:"Operatoren",filterPanelOperatorAnd:"En",filterPanelOperatorOr:"Of",filterPanelColumns:"Kolommen",filterPanelInputLabel:"Waarde",filterPanelInputPlaceholder:"Filter waarde",filterOperatorContains:"bevat",filterOperatorEquals:"gelijk aan",filterOperatorStartsWith:"begint met",filterOperatorEndsWith:"eindigt met",filterOperatorIs:"is",filterOperatorNot:"is niet",filterOperatorOnOrAfter:"is gelijk of er voor",filterOperatorAfter:"is voor",filterOperatorOnOrBefore:"is gelijk of er na",filterOperatorBefore:"is na",columnMenuLabel:"Menu",columnMenuShowColumns:"Toon kolommen",columnMenuFilter:"Filteren",columnMenuHideColumn:"Verbergen",columnMenuUnsort:"Annuleer sortering",columnMenuSortAsc:"Oplopend sorteren",columnMenuSortDesc:"Aflopend sorteren",columnHeaderFiltersTooltipActive:e=>e>1?`${e} actieve filters`:`${e} filter actief`,columnHeaderFiltersLabel:"Toon filters",columnHeaderSortIconLabel:"Sorteren",footerRowSelected:e=>e>1?`${e.toLocaleString()} rijen geselecteerd`:`${e.toLocaleString()} rij geselecteerd`,footerTotalRows:"Totaal:"},nlNL_1),hs={noRowsLabel:"Brak danych",errorOverlayDefaultLabel:"Wystąpił błąd.",toolbarDensity:"Wysokość rzędu",toolbarDensityLabel:"Wysokość rzędu",toolbarDensityCompact:"Kompakt",toolbarDensityStandard:"Standard",toolbarDensityComfortable:"Komfort",toolbarColumns:"Kolumny",toolbarColumnsLabel:"Zaznacz kolumny",toolbarFilters:"Filtry",toolbarFiltersLabel:"Pokaż filtry",toolbarFiltersTooltipHide:"Ukryj filtry",toolbarFiltersTooltipShow:"Pokaż filtry",toolbarFiltersTooltipActive:e=>`Liczba aktywnych filtrów: ${e}`,toolbarExport:"Eksportuj",toolbarExportLabel:"Eksportuj",toolbarExportCSV:"Pobierz jako plik CSV",columnsPanelTextFieldLabel:"Znajdź kolumnę",columnsPanelTextFieldPlaceholder:"Tytuł kolumny",columnsPanelDragIconLabel:"Zmień kolejność kolumn",columnsPanelShowAllButton:"Pokaż wszystko",columnsPanelHideAllButton:"Ukryj wszystko",filterPanelAddFilter:"Dodaj filtr",filterPanelDeleteIconLabel:"Usuń",filterPanelOperators:"Operator",filterPanelOperatorAnd:"I",filterPanelOperatorOr:"Lub",filterPanelColumns:"Kolumny",filterPanelInputLabel:"Wartość",filterPanelInputPlaceholder:"Filtrowana wartość",filterOperatorContains:"zawiera",filterOperatorEquals:"równa się",filterOperatorStartsWith:"zaczyna się od",filterOperatorEndsWith:"kończy się na",filterOperatorIs:"równa się",filterOperatorNot:"różne",filterOperatorAfter:"większe niż",filterOperatorOnOrAfter:"większe lub równe",filterOperatorBefore:"mniejsze niż",filterOperatorOnOrBefore:"mniejsze lub równe",columnMenuLabel:"Menu",columnMenuShowColumns:"Pokaż wszystkie kolumny",columnMenuFilter:"Filtr",columnMenuHideColumn:"Ukryj",columnMenuUnsort:"Anuluj sortowanie",columnMenuSortAsc:"Sortuj rosnąco",columnMenuSortDesc:"Sortuj malejąco",columnHeaderFiltersTooltipActive:e=>`Liczba aktywnych filtrów: ${e}`,columnHeaderFiltersLabel:"Pokaż filtry",columnHeaderSortIconLabel:"Sortuj",footerRowSelected:e=>`Liczba wybranych wierszy: ${e.toLocaleString()}`,footerTotalRows:"Łączna liczba wierszy:"},vs=ls(hs,plPL_1),Cs=ls({noRowsLabel:"Nenhuma linha",noResultsOverlayLabel:"Nenhum resultado encontrado.",errorOverlayDefaultLabel:"Ocorreu um erro.",toolbarDensity:"Densidade",toolbarDensityLabel:"Densidade",toolbarDensityCompact:"Compacto",toolbarDensityStandard:"Padrão",toolbarDensityComfortable:"Confortável",toolbarColumns:"Colunas",toolbarColumnsLabel:"Exibir seletor de colunas",toolbarFilters:"Filtros",toolbarFiltersLabel:"Exibir filtros",toolbarFiltersTooltipHide:"Ocultar filtros",toolbarFiltersTooltipShow:"Exibir filtros",toolbarFiltersTooltipActive:e=>`${e} ${1!==e?"filtros":"filtro"} ${1!==e?"ativos":"ativo"}`,toolbarExport:"Exportar",toolbarExportLabel:"Exportar",toolbarExportCSV:"Baixar como CSV",columnsPanelTextFieldLabel:"Localizar coluna",columnsPanelTextFieldPlaceholder:"Título da coluna",columnsPanelDragIconLabel:"Reordenar Coluna",columnsPanelShowAllButton:"Mostrar todas",columnsPanelHideAllButton:"Ocultar todas",filterPanelAddFilter:"Adicionar filtro",filterPanelDeleteIconLabel:"Excluir",filterPanelOperators:"Operadores",filterPanelOperatorAnd:"E",filterPanelOperatorOr:"Ou",filterPanelColumns:"Colunas",filterPanelInputLabel:"Valor",filterPanelInputPlaceholder:"Filtrar valor",filterOperatorContains:"contém",filterOperatorEquals:"é igual a",filterOperatorStartsWith:"começa com",filterOperatorEndsWith:"termina com",filterOperatorIs:"é",filterOperatorNot:"não é",filterOperatorOnOrAfter:"em ou após",filterOperatorBefore:"antes de",filterOperatorOnOrBefore:"em ou antes de",filterOperatorAfter:"após",filterOperatorIsEmpty:"está vazio",filterOperatorIsNotEmpty:"não está vazio",columnMenuLabel:"Menu",columnMenuShowColumns:"Exibir colunas",columnMenuFilter:"Filtrar",columnMenuHideColumn:"Ocultar",columnMenuUnsort:"Desfazer ordenação",columnMenuSortAsc:"Ordenar do menor para o maior",columnMenuSortDesc:"Ordenar do maior para o menor",columnHeaderFiltersTooltipActive:e=>`${e} ${1!==e?"filtros":"filtro"} ${1!==e?"ativos":"ativo"}`,columnHeaderFiltersLabel:"Exibir Filtros",columnHeaderSortIconLabel:"Ordenar",footerRowSelected:e=>1!==e?`${e.toLocaleString()} linhas selecionadas`:`${e.toLocaleString()} linha selecionada`,footerTotalRows:"Total de linhas:",footerTotalVisibleRows:(e,t)=>`${e.toLocaleString()} de ${t.toLocaleString()}`,checkboxSelectionHeaderName:"Seleção",booleanCellTrueLabel:"sim",booleanCellFalseLabel:"não"},ptBR_1),ws={noRowsLabel:"Нет строк",errorOverlayDefaultLabel:"Обнаружена ошибка.",toolbarDensity:"Высота строки",toolbarDensityLabel:"Высота строки",toolbarDensityCompact:"Компактная",toolbarDensityStandard:"Стандартная",toolbarDensityComfortable:"Комфортная",toolbarColumns:"Столбцы",toolbarColumnsLabel:"Выделите столбцы",toolbarFilters:"Фильтры",toolbarFiltersLabel:"Показать фильтры",toolbarFiltersTooltipHide:"Скрыть фильтры",toolbarFiltersTooltipShow:"Показать фильтры",toolbarFiltersTooltipActive:e=>{let t="активных фильтров";const r=e%10;return r>1&&r<5?t="активных фильтра":1===r&&(t="активный фильтр"),`${e} ${t}`},toolbarExport:"Экспорт",toolbarExportLabel:"Экспорт",toolbarExportCSV:"Скачать в формате CSV",columnsPanelTextFieldLabel:"Найти столбец",columnsPanelTextFieldPlaceholder:"Заголовок столбца",columnsPanelDragIconLabel:"Изменить порядок столбца",columnsPanelShowAllButton:"Показать все",columnsPanelHideAllButton:"Скрыть все",filterPanelAddFilter:"Добавить фильтр",filterPanelDeleteIconLabel:"Удалить",filterPanelOperators:"Операторы",filterPanelOperatorAnd:"И",filterPanelOperatorOr:"Или",filterPanelColumns:"Столбцы",filterPanelInputLabel:"Значение",filterPanelInputPlaceholder:"Значение фильтра",filterOperatorContains:"содержит",filterOperatorEquals:"равен",filterOperatorStartsWith:"начинается с",filterOperatorEndsWith:"заканчивается на",filterOperatorIs:"равен",filterOperatorNot:"не равен",filterOperatorAfter:"больше чем",filterOperatorOnOrAfter:"больше или равно",filterOperatorBefore:"меньше чем",filterOperatorOnOrBefore:"меньше или равно",filterValueAny:"любой",filterValueTrue:"истина",filterValueFalse:"ложь",columnMenuLabel:"Меню",columnMenuShowColumns:"Показать столбцы",columnMenuFilter:"Фильтр",columnMenuHideColumn:"Скрыть",columnMenuUnsort:"Отменить сортировку",columnMenuSortAsc:"Сортировать по возрастанию",columnMenuSortDesc:"Сортировать по убыванию",columnHeaderFiltersTooltipActive:e=>{let t="активных фильтров";const r=e%10;return r>1&&r<5?t="активных фильтра":1===r&&(t="активный фильтр"),`${e} ${t}`},columnHeaderFiltersLabel:"Показать фильтры",columnHeaderSortIconLabel:"Сортировать",footerRowSelected:e=>{let t="строк выбрано";const r=e%10;return r>1&&r<5?t="строки выбраны":1===r&&(t="строка выбрана"),`${e} ${t}`},footerTotalRows:"Всего строк:",checkboxSelectionHeaderName:"Выбор флажка",booleanCellTrueLabel:"истина",booleanCellFalseLabel:"ложь"},Os=ls(ws,ruRU_1),ys={noRowsLabel:"Žiadne záznamy",noResultsOverlayLabel:"Nenašli sa žadne výsledky.",errorOverlayDefaultLabel:"Stala sa nepredvídaná chyba.",toolbarDensity:"Hustota",toolbarDensityLabel:"Hustota",toolbarDensityCompact:"Kompaktná",toolbarDensityStandard:"Štandartná",toolbarDensityComfortable:"Komfortná",toolbarColumns:"Stĺpce",toolbarColumnsLabel:"Vybrať stĺpce",toolbarFilters:"Filtre",toolbarFiltersLabel:"Zobraziť filtre",toolbarFiltersTooltipHide:"Skryť filtre ",toolbarFiltersTooltipShow:"Zobraziť filtre",toolbarFiltersTooltipActive:e=>{let t="aktívnych filtrov";return e>1&&e<5?t="aktívne filtre":1===e&&(t="aktívny filter"),`${e} ${t}`},toolbarExport:"Export",toolbarExportLabel:"Export",toolbarExportCSV:"Stiahnuť ako CSV",columnsPanelTextFieldLabel:"Nájsť stĺpec",columnsPanelTextFieldPlaceholder:"Názov stĺpca",columnsPanelDragIconLabel:"Usporiadť stĺpce",columnsPanelShowAllButton:"Zobraziť všetko",columnsPanelHideAllButton:"Skryť všetko",filterPanelAddFilter:"Pridať filter",filterPanelDeleteIconLabel:"Odstrániť",filterPanelOperators:"Operátory",filterPanelOperatorAnd:"A",filterPanelOperatorOr:"Alebo",filterPanelColumns:"Stĺpce",filterPanelInputLabel:"Hodnota",filterPanelInputPlaceholder:"Hodnota filtra",filterOperatorContains:"obsahuje",filterOperatorEquals:"rovná sa",filterOperatorStartsWith:"začína s",filterOperatorEndsWith:"končí na",filterOperatorIs:"je",filterOperatorNot:"nie je",filterOperatorAfter:"je po",filterOperatorOnOrAfter:"je na alebo po",filterOperatorBefore:"je pred",filterOperatorOnOrBefore:"je na alebo skôr",filterValueAny:"akýkoľvek",filterValueTrue:"áno",filterValueFalse:"nie",columnMenuLabel:"Menu",columnMenuShowColumns:"Zobraziť stĺpce",columnMenuFilter:"Filter",columnMenuHideColumn:"Skryť",columnMenuUnsort:"Zrušiť filtre",columnMenuSortAsc:"Zoradiť vzostupne",columnMenuSortDesc:"Zoradiť zostupne",columnHeaderFiltersTooltipActive:e=>{let t="aktívnych filtrov";return e>1&&e<5?t="aktívne filtre":1===e&&(t="aktívny filter"),`${e} ${t}`},columnHeaderFiltersLabel:"Zobraziť filtre",columnHeaderSortIconLabel:"Filtrovať",footerRowSelected:e=>{let t="vybraných záznamov";return e>1&&e<5?t="vybrané záznamy":1===e&&(t="vybraný záznam"),`${e} ${t}`},footerTotalRows:"Riadkov spolu:",checkboxSelectionHeaderName:"Výber riadku",booleanCellTrueLabel:"áno",booleanCellFalseLabel:"nie"},Es=ls(ys,skSK_1),Ss=ls({noRowsLabel:"Satır yok",errorOverlayDefaultLabel:"Bir hata oluştu.",toolbarDensity:"Yoğunluk",toolbarDensityLabel:"Yoğunluk",toolbarDensityCompact:"Sıkı",toolbarDensityStandard:"Standart",toolbarDensityComfortable:"Rahat",toolbarColumns:"Sütunlar",toolbarColumnsLabel:"Sütun seç",toolbarFilters:"Filtreler",toolbarFiltersLabel:"Filtreleri göster",toolbarFiltersTooltipHide:"Filtreleri gizle",toolbarFiltersTooltipShow:"Filtreleri göster",toolbarFiltersTooltipActive:e=>`${e} aktif filtre`,toolbarExport:"Dışa aktar",toolbarExportLabel:"Dışa aktar",toolbarExportCSV:"CSV olarak aktar",columnsPanelTextFieldLabel:"Sütun ara",columnsPanelTextFieldPlaceholder:"Sütun adı",columnsPanelDragIconLabel:"Sütunları yeniden sırala",columnsPanelShowAllButton:"Hepsini göster",columnsPanelHideAllButton:"Hepsini gizle",filterPanelAddFilter:"Filtre Ekle",filterPanelDeleteIconLabel:"Kaldır",filterPanelOperators:"Operatör",filterPanelOperatorAnd:"Ve",filterPanelOperatorOr:"Veya",filterPanelColumns:"Sütunlar",filterPanelInputLabel:"Değer",filterPanelInputPlaceholder:"Filtre değeri",filterOperatorContains:"içerir",filterOperatorEquals:"eşittir",filterOperatorStartsWith:"ile başlar",filterOperatorEndsWith:"ile biter",filterOperatorIs:"eşittir",filterOperatorNot:"eşit değildir",filterOperatorAfter:"büyük",filterOperatorOnOrAfter:"büyük eşit",filterOperatorBefore:"küçük",filterOperatorOnOrBefore:"küçük eşit",filterOperatorIsEmpty:"boş",filterOperatorIsNotEmpty:"dolu",columnMenuLabel:"Menü",columnMenuShowColumns:"Sütunları göster",columnMenuFilter:"Filtre uygula",columnMenuHideColumn:"Gizle",columnMenuUnsort:"Sıralama",columnMenuSortAsc:"Sırala - Artan",columnMenuSortDesc:"Sırala - Azalan",columnHeaderFiltersTooltipActive:e=>`${e} filtre aktif`,columnHeaderFiltersLabel:"Filtreleri göster",columnHeaderSortIconLabel:"Sırala",footerRowSelected:e=>`${e.toLocaleString()} satır seçildi`,footerTotalRows:"Toplam Satır:",footerTotalVisibleRows:(e,t)=>`${e.toLocaleString()} / ${t.toLocaleString()}`},trTR_1),xs={noRowsLabel:"Немає рядків",errorOverlayDefaultLabel:"Виявлено помилку.",toolbarDensity:"Висота рядка",toolbarDensityLabel:"Висота рядка",toolbarDensityCompact:"Компактний",toolbarDensityStandard:"Стандартний",toolbarDensityComfortable:"Комфортний",toolbarColumns:"Стовпці",toolbarColumnsLabel:"Виділіть стовпці",toolbarFilters:"Фільтри",toolbarFiltersLabel:"Показати фільтри",toolbarFiltersTooltipHide:"Сховати фільтри",toolbarFiltersTooltipShow:"Показати фільтри",toolbarFiltersTooltipActive:e=>1!==e?`${e} активні фільтри`:`${e} активний фільтр`,toolbarExport:"Експорт",toolbarExportLabel:"Експорт",toolbarExportCSV:"Завантажити у форматі CSV",columnsPanelTextFieldLabel:"Знайти стовпець",columnsPanelTextFieldPlaceholder:"Заголовок стовпця",columnsPanelDragIconLabel:"Змінити порядок стовпця",columnsPanelShowAllButton:"Показати усі",columnsPanelHideAllButton:"Сховати усі",filterPanelAddFilter:"Додати фільтр",filterPanelDeleteIconLabel:"Видалити",filterPanelOperators:"Оператори",filterPanelOperatorAnd:"І",filterPanelOperatorOr:"Або",filterPanelColumns:"Стовпці",filterPanelInputLabel:"Значення",filterPanelInputPlaceholder:"Значення фільтра",filterOperatorContains:"містить",filterOperatorEquals:"дорівнює",filterOperatorStartsWith:"починається з",filterOperatorEndsWith:"закінчується на",filterOperatorIs:"дорівнює",filterOperatorNot:"не",filterOperatorAfter:"більше ніж",filterOperatorOnOrAfter:"більше або дорівнює",filterOperatorBefore:"менше ніж",filterOperatorOnOrBefore:"менше або дорівнює",filterValueAny:"будь-який",filterValueTrue:"правда",filterValueFalse:"помилковий",columnMenuLabel:"Меню",columnMenuShowColumns:"Показати стовпці",columnMenuFilter:"Фільтр",columnMenuHideColumn:"Сховати",columnMenuUnsort:"Скасувати сортування",columnMenuSortAsc:"Сортувати за зростанням",columnMenuSortDesc:"Сортувати за спаданням",columnHeaderFiltersTooltipActive:e=>1!==e?`${e} активні фільтри`:`${e} активний фільтр`,columnHeaderFiltersLabel:"Показати фільтри",columnHeaderSortIconLabel:"Сортувати",footerRowSelected:e=>1!==e?`${e.toLocaleString()} вибрані рядки`:`${e.toLocaleString()} вибраний рядок`,footerTotalRows:"Всього рядків:",checkboxSelectionHeaderName:"Вибір прапорця",booleanCellTrueLabel:"правда",booleanCellFalseLabel:"помилковий"},Rs=ls(xs,ukUA_1),ks=({apiRef:t,props:r,children:o})=>React__namespace.createElement(Jo.Provider,{value:r},React__namespace.createElement(le.Provider,{value:t},o)),Ms=(e,t)=>{if("string"==typeof e){const r=e.replace(/"/g,'""');return r.includes(t)?`"${r}"`:r}return e};function Ps(e){const{columns:t,rows:r,selectedRowIds:o,getCellParams:n,delimiterCharacter:l,includeHeaders:a=!0}=e;let i=[...r.keys()];o.length&&(i=i.filter((e=>o.includes(e))));const s=i.reduce(((e,r)=>`${e}${function(e,t,r,o){const n=[];return t.forEach((t=>t.field!==Un.field&&n.push(Ms(r(e,t.field).formattedValue,o)))),n}(r,t,n,l).join(l)}\r\n`),"").trim();if(!a)return s;return `${`${t.filter((e=>e.field!==Un.field)).map((e=>Ms(e.headerName||e.field,l))).join(l)}\r\n`}${s}`.trim()}function Is(e){const t=document.createElement("span");t.style.whiteSpace="pre",t.style.userSelect="all",t.style.opacity="0px",t.textContent=e,document.body.appendChild(t);const r=document.createRange();r.selectNode(t);const o=window.getSelection();o.removeAllRanges(),o.addRange(r);try{document.execCommand("copy");}finally{document.body.removeChild(t);}}const Ls=t=>{const r=xr(t,"useGridCsvExport"),o=Wr(t,de),n=Wr(t,ue),l=Wr(t,bo),a=Wr(t,nn),i=React__namespace.useCallback((e=>{let i;if(r.debug("Get data as CSV"),null==e?void 0:e.fields)i=e.fields.map((e=>n.find((t=>t.field===e)))).filter((e=>!!e));else {i=((null==e?void 0:e.allColumns)?n:o).filter((e=>!e.disableExport));}return Ps({columns:i,rows:l,selectedRowIds:a,getCellParams:t.current.getCellParams,delimiterCharacter:(null==e?void 0:e.delimiter)||","})}),[r,o,n,l,a,t]),s=React__namespace.useCallback((e=>{r.debug("Export data as CSV");const t=i(e);!function(e,t="csv",r=document.title){const o=`${r}.${t}`;if("download"in HTMLAnchorElement.prototype){const t=URL.createObjectURL(e),r=document.createElement("a");return r.href=t,r.download=o,r.click(),void setTimeout((()=>{URL.revokeObjectURL(t);}))}throw new Error("exportAs not supported")}(new Blob([(null==e?void 0:e.utf8WithBom)?new Uint8Array([239,187,191]):"",t],{type:"text/csv"}),"csv",null==e?void 0:e.fileName);}),[r,i]);Rr(t,{getDataAsCsv:i,exportDataAsCsv:s},"GridCsvExportApi");};function js(e,t){switch(t.type){case"options::UPDATE":return vi(e,t.payload);default:throw new Error(`Material-UI: Action ${t.type} not found.`)}}const Fs="test"===process.env.NODE_ENV;const Ds=(t,r)=>{Sr(t,r),ji(t,r),function(t,r){const[,o]=Br(t),n=React__namespace.useCallback((e=>{o((t=>Object.assign(Object.assign({},t),{error:e})));}),[o]);React__namespace.useEffect((()=>{n(r.error);}),[n,r.error]),qr(t,ne.componentError,n);}(t,r),yi(t,r),function(t,r){const o=xr(t,"useOptionsProp"),n=React__namespace.useMemo((()=>Object.assign(Object.assign({},r),{classes:ir({root:["root"],columnHeader:["columnHeader"],row:["row"],cell:["cell"]},hr,r.classes),localeText:Object.assign(Object.assign({},Mr),r.localeText)})),[r]),{gridState:l,dispatch:a}=Ei(t,"options",js,Object.assign({},jr)),i=React__namespace.useCallback((e=>{o.debug("updating options state."),a({type:"options::UPDATE",payload:e});}),[a,o]);React__namespace.useEffect((()=>{i(n);}),[n,i]),l.options;}(t,r),function(e,t){Jr(e,ne.columnHeaderClick,t.onColumnHeaderClick),Jr(e,ne.columnHeaderDoubleClick,t.onColumnHeaderDoubleClick),Jr(e,ne.columnHeaderOver,t.onColumnHeaderOver),Jr(e,ne.columnHeaderOut,t.onColumnHeaderOut),Jr(e,ne.columnHeaderEnter,t.onColumnHeaderEnter),Jr(e,ne.columnHeaderLeave,t.onColumnHeaderLeave),Jr(e,ne.columnOrderChange,t.onColumnOrderChange),Jr(e,ne.cellClick,t.onCellClick),Jr(e,ne.cellDoubleClick,t.onCellDoubleClick),Jr(e,ne.cellOver,t.onCellOver),Jr(e,ne.cellOut,t.onCellOut),Jr(e,ne.cellEnter,t.onCellEnter),Jr(e,ne.cellLeave,t.onCellLeave),Jr(e,ne.cellKeyDown,t.onCellKeyDown),Jr(e,ne.cellBlur,t.onCellBlur),Jr(e,ne.cellFocusOut,t.onCellFocusOut),Jr(e,ne.rowDoubleClick,t.onRowDoubleClick),Jr(e,ne.rowClick,t.onRowClick),Jr(e,ne.rowOver,t.onRowOver),Jr(e,ne.rowOut,t.onRowOut),Jr(e,ne.rowEnter,t.onRowEnter),Jr(e,ne.rowLeave,t.onRowLeave),Jr(e,ne.componentError,t.onError),Jr(e,ne.stateChange,t.onStateChange);}(t,r),(t=>{const{localeText:r}=Wr(t,zo);Rr(t,{getLocaleText:React__namespace.useCallback((e=>{if(null==r[e])throw new Error(`Missing translation for key ${e}.`);return r[e]}),[r])},"LocaleTextApi");})(t),function(t,r){const o=xr(t,"useResizeContainer"),n=React__namespace.useRef(!1),l=React__namespace.useCallback((()=>{var e;o.debug("resizing..."),t.current.publishEvent(ne.debouncedResize,null===(e=t.current.state.containerSizes)||void 0===e?void 0:e.windowSizes);}),[t,o]);Rr(t,{resize:l},"GridEventsApi");const a=React__namespace.useMemo((()=>debounce$1(l,60)),[l]),i=React__namespace.useCallback((e=>{const t=/jsdom/.test(window.navigator.userAgent);0!==e.height||n.current||r.autoHeight||t||(o.warn(["The parent of the grid has an empty height.","You need to make sure the container has an intrinsic height.","The grid displays with a height of 0px.","","You can find a solution in the docs:","https://material-ui.com/components/data-grid/layout/"].join("\n")),n.current=!0),0!==e.width||n.current||t||(o.warn(["The parent of the grid has an empty width.","You need to make sure the container has an intrinsic width.","The grid displays with a width of 0px.","","You can find a solution in the docs:","https://material-ui.com/components/data-grid/layout/"].join("\n")),n.current=!0),Fs?l():a();}),[r.autoHeight,a,o,l]);React__namespace.useEffect((()=>()=>{o.info("canceling resize..."),a.clear();}),[o,a]),React__namespace.useEffect((()=>{o.info("canceling resize..."),a.clear();}),[r.rows,a,o]),qr(t,ne.resize,i),Jr(t,ne.debouncedResize,r.onResize);}(t,r),function(e,{rows:t}){"production"!==process.env.NODE_ENV&&Object.freeze(t);}(0,r),Oi(t,r),Ai(t),Ni(t,r),Vi(t,r),xi(t,r),Ri(t),ki(t,r),Bi(t,r),Wi(t,r),bi(t),Ti(t),Si(t,r),Fi(t,r),((t,r)=>{const o=xr(t,"useDensity"),[,n,l]=Br(t),a=React__namespace.useCallback(((e,t,r)=>{switch(e){case Pr.Compact:return {value:e,headerHeight:Math.floor(.7*t),rowHeight:Math.floor(.7*r)};case Pr.Comfortable:return {value:e,headerHeight:Math.floor(1.3*t),rowHeight:Math.floor(1.3*r)};default:return {value:e,headerHeight:t,rowHeight:r}}}),[]),i=React__namespace.useCallback(((e,t=r.headerHeight,i=r.rowHeight)=>{o.debug(`Set grid density to ${e}`),n((r=>Object.assign(Object.assign({},r),{density:Object.assign(Object.assign({},r.density),a(e,t,i))}))),l();}),[o,n,l,a,r.headerHeight,r.rowHeight]);React__namespace.useEffect((()=>{i(r.density,r.headerHeight,r.rowHeight);}),[i,r.density,r.rowHeight,r.headerHeight]),Rr(t,{setDensity:i},"GridDensityApi");})(t,r),Zi(t,r),((t,r)=>{const o=t.current.windowRef,n=t.current.columnHeadersElementRef,l=t.current.renderingZoneRef,[a,i,s]=Br(t),[c]=Mi(t,l,n),u=Wr(t,rn),d=Wr(t,de),p=React__namespace.useCallback((()=>{if(!a.containerSizes||!(null==o?void 0:o.current))return;let e=0;const{page:t,pageSize:n}=u;r.pagination&&"client"===r.paginationMode&&(e=n*t);const l={firstRowIdx:e,lastRowIdx:e+a.containerSizes.virtualRowsCount,firstColIdx:0,lastColIdx:d.length>0?d.length-1:0},c={top:o.current.scrollTop,left:o.current.scrollLeft};i((e=>Object.assign(Object.assign({},e),{rendering:Object.assign(Object.assign({},e.rendering),{virtualPage:0,renderContext:l,realScroll:c,renderingZoneScroll:c})}))),s();}),[a.containerSizes,u,r.pagination,r.paginationMode,i,s,d.length,o]);React__namespace.useEffect((()=>{r.disableVirtualization&&p();}),[r.disableVirtualization,p]);const m=React__namespace.useCallback((()=>{if(!r.disableVirtualization||!(null==o?void 0:o.current))return;const{scrollLeft:e,scrollTop:t}=o.current;c({top:t,left:e}),p();}),[r.disableVirtualization,c,o,p]);Di(t,o,"scroll",m,{passive:!0});})(t,r),Ui(t,r),Ji(t,r),zi(t,r),Li(t,r),Ls(t),((t,r)=>{const o=Wr(t,_l),n=Wr(t,de),l=React__namespace.useRef(!1),a=Wr(t,Gr),i=React__namespace.useRef(null),s=React__namespace.useCallback((e=>{if(!o)return;const a=e.top+o.windowSizes.height+r.scrollEndThreshold;if(a<o.dataContainerSizes.height&&(l.current=!1),a>=o.dataContainerSizes.height&&!l.current){const e={visibleColumns:n,viewportPageSize:o.viewportPageSize,virtualRowsCount:o.virtualRowsCount};t.current.publishEvent(ne.rowsScrollEnd,e),l.current=!0;}}),[t,r.scrollEndThreshold,n,o]),c=React__namespace.useCallback((()=>{const e=t.current.getScrollPosition();s(e);}),[t,s]);React__namespace.useEffect((()=>{const e=a.renderContext;if(e){if(!i.current||e.firstRowIdx!==i.current.firstRowIndex||e.lastRowIdx!==i.current.lastRowIndex){const r={firstRowIndex:e.firstRowIdx,lastRowIndex:e.lastRowIdx};t.current.publishEvent(ne.viewportRowsChange,r);}i.current={firstRowIndex:e.firstRowIdx,lastRowIndex:e.lastRowIdx};}}),[t,r.onViewportRowsChange,a]),qr(t,ne.rowsScroll,c),Jr(t,ne.rowsScrollEnd,r.onRowsScrollEnd),Jr(t,ne.viewportRowsChange,r.onViewportRowsChange);})(t,r),(t=>{const r=Wr(t,de),o=React__namespace.useCallback(((e=!1)=>{const o=t.current.getSelectedRows(),n=r.filter((e=>e.field!==Un.field));if(0===o.size||0===n.length)return;const l=Ps({columns:r,rows:o,selectedRowIds:[],includeHeaders:e,getCellParams:t.current.getCellParams,delimiterCharacter:"\t"});navigator.clipboard?navigator.clipboard.writeText(l).catch((()=>{Is(l);})):Is(l);}),[t,r]),n=React__namespace.useCallback((e=>{var r;const o=e.ctrlKey||e.metaKey||e.altKey;"c"===e.key.toLowerCase()&&o&&""===(null===(r=window.getSelection())||void 0===r?void 0:r.toString())&&t.current.copySelectedRowsToClipboard(e.altKey);}),[t]);Di(t,t.current.rootElementRef,"keydown",n),Rr(t,{copySelectedRowsToClipboard:o},"GridClipboardApi");})(t),os(t,r),function(t,{state:r}){const[,o,n]=Br(t),l=xr(t,"useStateProp");React__namespace.useEffect((()=>{null!=r&&t.current.state!==r&&(l.debug("Overriding state with props.state"),o((e=>Object.assign(Object.assign({},e),r))),n());}),[t,n,l,r,o]);}(t,r),function(e){const[t]=Br(e),r=xr(e,"useRenderInfoLog");if(null!=t.rendering.renderContext){const{page:e,firstColIdx:o,lastColIdx:n,firstRowIdx:l,lastRowIdx:a}=t.rendering.renderContext;r.info(`Rendering, page: ${e}, col: ${o}-${n}, row: ${l}-${a}`);}}(t);},zs=100,Ts=t=>{if(t.pageSize>100)throw new Error("'props.pageSize' cannot exceed 100 in DataGrid.");const r=function({props:t,name:r}){const o=useTheme();return React__namespace.useMemo((()=>{const e=Object.assign({},t),n=getThemeProps({theme:o,name:r,props:e}),l=n.theme||o,a="rtl"===l.direction;return Object.assign({theme:l,isRtl:a},n)}),[t,r,o])}({props:t,name:"MuiDataGrid"});return React__namespace.useMemo((()=>Object.assign(Object.assign({},r),{apiRef:void 0,disableColumnResize:!0,disableColumnReorder:!0,disableMultipleColumnsFiltering:!0,disableMultipleColumnsSorting:!0,disableMultipleSelection:!0,pagination:!0,onRowsScrollEnd:void 0,onViewportRowsChange:void 0,checkboxSelectionVisibleOnly:!1,signature:"DataGrid"})),[r])},Hs=React__namespace.forwardRef((function(t,r){const o=Ts(t),n=qi();return Ds(n,o),React__namespace.createElement(ks,{apiRef:n,props:o},React__namespace.createElement(Ra,{ref:r},React__namespace.createElement(ya,null,React__namespace.createElement(Sa,null),React__namespace.createElement(wa,null),React__namespace.createElement(Ea,null))))}));Hs.defaultProps=Lr;const As=React__namespace.memo(Hs);As.propTypes={apiRef:chainPropTypes(re.any,(e=>null!=e.apiRef?new Error(["Material-UI: `apiRef` is not a valid prop.","GridApiRef is not available in the MIT version.","","You need to upgrade to the DataGridPro component to unlock this feature."].join("\n")):null)),checkboxSelectionVisibleOnly:chainPropTypes(re.bool,(e=>e.checkboxSelectionVisibleOnly?new Error(["Material-UI: `<DataGrid checkboxSelectionVisibleOnly={true} />` is not a valid prop.","Selecting all columns only on the current page is not available in the MIT version.","","You need to upgrade to the DataGridPro component to unlock this feature."].join("\n")):null)),columns:chainPropTypes(re.array.isRequired,(e=>e.columns&&e.columns.some((e=>e.resizable))?new Error(["Material-UI: `column.resizable = true` is not a valid prop.","Column resizing is not available in the MIT version.","","You need to upgrade to the DataGridPro component to unlock this feature."].join("\n")):null)),disableColumnReorder:chainPropTypes(re.bool,(e=>!1===e.disableColumnReorder?new Error(["Material-UI: `<DataGrid disableColumnReorder={false} />` is not a valid prop.","Column reordering is not available in the MIT version.","","You need to upgrade to the DataGridPro component to unlock this feature."].join("\n")):null)),disableColumnResize:chainPropTypes(re.bool,(e=>!1===e.disableColumnResize?new Error(["Material-UI: `<DataGrid disableColumnResize={false} />` is not a valid prop.","Column resizing is not available in the MIT version.","","You need to upgrade to the DataGridPro component to unlock this feature."].join("\n")):null)),disableMultipleColumnsFiltering:chainPropTypes(re.bool,(e=>!1===e.disableMultipleColumnsFiltering?new Error(["Material-UI: `<DataGrid disableMultipleColumnsFiltering={false} />` is not a valid prop.","Only single column sorting is available in the MIT version.","","You need to upgrade to the DataGridPro component to unlock this feature."].join("\n")):null)),disableMultipleColumnsSorting:chainPropTypes(re.bool,(e=>!1===e.disableMultipleColumnsSorting?new Error(["Material-UI: `<DataGrid disableMultipleColumnsSorting={false} />` is not a valid prop.","Only single column sorting is available in the MIT version.","","You need to upgrade to the DataGridPro component to unlock this feature."].join("\n")):null)),disableMultipleSelection:chainPropTypes(re.bool,(e=>!1===e.disableMultipleSelection?new Error(["Material-UI: `<DataGrid disableMultipleSelection={false} />` is not a valid prop.","Only single column selection is available in the MIT version.","","You need to upgrade to the DataGridPro component to unlock this feature."].join("\n")):null)),filterModel:chainPropTypes(re.any,(e=>null!=e.filterModel&&e.filterModel.items.length>1?new Error(["Material-UI: `<DataGrid filterModel={model} />` is not a valid prop. `model.items` has more than 1 item.","Only single filter is available in the MIT version.","","You need to upgrade to the DataGridPro component to unlock this feature."].join("\n")):null)),onRowsScrollEnd:chainPropTypes(re.any,(e=>null!=e.onRowsScrollEnd?new Error(["Material-UI: `onRowsScrollEnd` is not a valid prop.","onRowsScrollEnd is not available in the MIT version.","","You need to upgrade to the DataGridPro component to unlock this feature."].join("\n")):null)),onViewportRowsChange:chainPropTypes(re.any,(e=>null!=e.onViewportRowsChange?new Error(["Material-UI: `onViewportRowsChange` is not a valid prop.","onViewportRowsChange is not available in the MIT version.","","You need to upgrade to the DataGridPro component to unlock this feature."].join("\n")):null)),pageSize:chainPropTypes(re.number,(e=>e.pageSize&&e.pageSize>100?new Error([`Material-UI: \`<DataGrid pageSize={${e.pageSize}} />\` is not a valid prop.`,"Only page size below 100 is available in the MIT version.","","You need to upgrade to the DataGridPro component to unlock this feature."].join("\n")):null)),pagination:e=>!1===e.pagination?new Error(["Material-UI: `<DataGrid pagination={false} />` is not a valid prop.","Infinite scrolling is not available in the MIT version.","","You need to upgrade to the DataGridPro component to disable the pagination."].join("\n")):null,rows:re.array.isRequired,scrollEndThreshold:chainPropTypes(re.number,(e=>e.scrollEndThreshold?new Error([`Material-UI: \`<DataGrid scrollEndThreshold={${e.scrollEndThreshold}} />\` is not a valid prop.`,"scrollEndThreshold is not available in the MIT version.","","You need to upgrade to the DataGridPro component to unlock this feature."].join("\n")):null)),selectionModel:chainPropTypes(re.oneOfType([re.number,re.string,re.array]),(e=>!e.checkboxSelection&&Array.isArray(e.selectionModel)&&e.selectionModel.length>1?new Error([`Material-UI: \`<DataGrid selectionModel={${JSON.stringify(e.selectionModel)}} />\` is not a valid prop.`,"selectionModel can only be of 1 item in DataGrid.","","You need to upgrade to the DataGridPro component to unlock multiple selection."].join("\n")):null))};

    var indexEsm = /*#__PURE__*/Object.freeze({
        __proto__: null,
        DEFAULT_GRID_COL_TYPE_KEY: pl,
        DEFAULT_GRID_OPTIONS: jr,
        DEFAULT_GRID_PROPS_FROM_OPTIONS: Lr,
        DEFAULT_GRID_SLOTS_COMPONENTS: rs,
        DataGrid: As,
        GRID_BOOLEAN_COLUMN_TYPE: Cl,
        GRID_CELL_CSS_CLASS: sa,
        GRID_CELL_CSS_CLASS_SUFFIX: la,
        GRID_COLUMN_HEADER_CSS_CLASS: aa,
        GRID_COLUMN_HEADER_CSS_CLASS_SUFFIX: oa,
        GRID_COLUMN_HEADER_DRAGGING_CSS_CLASS: pa,
        GRID_COLUMN_HEADER_DROP_ZONE_CSS_CLASS: da,
        GRID_COLUMN_HEADER_SEPARATOR_RESIZABLE_CSS_CLASS: ca,
        GRID_COLUMN_HEADER_TITLE_CSS_CLASS: ua,
        GRID_CSS_CLASS_PREFIX: ta,
        GRID_DATETIME_COLUMN_TYPE: vl,
        GRID_DATETIME_COL_DEF: nl,
        GRID_DATE_COLUMN_TYPE: hl,
        GRID_DATE_COL_DEF: ol,
        GRID_DEFAULT_LOCALE_TEXT: Mr,
        GRID_EXPERIMENTAL_ENABLED: Ua,
        GRID_NUMBER_COLUMN_TYPE: bl,
        GRID_NUMERIC_COL_DEF: Zn,
        GRID_ROOT_CSS_CLASS_SUFFIX: ra,
        GRID_ROW_CSS_CLASS: ia,
        GRID_ROW_CSS_CLASS_SUFFIX: na,
        GRID_STRING_COLUMN_TYPE: gl,
        GRID_STRING_COL_DEF: Nn,
        GridAddIcon: jn,
        GridApiContext: le,
        GridArrowDownwardIcon: Cn,
        GridArrowUpwardIcon: vn,
        GridAutoSizer: Xl,
        GridBody: wa,
        GridCell: ga,
        GridCellCheckboxForwardRef: en,
        GridCellCheckboxRenderer: tn,
        get GridCellModes () { return al; },
        GridCheckCircleIcon: Sn,
        GridCheckIcon: Tn,
        GridCloseIcon: Ln,
        GridColumnHeaderItem: Al,
        GridColumnHeaderMenu: Hl,
        GridColumnHeaderSeparator: Ml,
        GridColumnHeaderSortIcon: wl,
        GridColumnHeaderTitle: kl,
        GridColumnHeadersItemCollection: $l,
        GridColumnIcon: xn,
        GridColumnMenu: za,
        GridColumnMenuContainer: ja,
        GridColumnsContainer: Kl,
        GridColumnsHeader: Ul,
        GridColumnsMenuItem: Ia,
        GridColumnsPanel: Za,
        GridDataContainer: Ql,
        get GridDensityTypes () { return Pr; },
        GridDragIcon: Dn,
        GridEditInputCell: dn,
        get GridEditModes () { return ll; },
        GridEditSingleSelectCell: cl,
        GridEmptyCell: Zr,
        GridErrorHandler: ya,
        get GridEvents () { return ne; },
        GridFeatureModeConstant: Ir,
        GridFilterAltIcon: On,
        GridFilterForm: ei,
        GridFilterInputValue: $n,
        GridFilterListIcon: wn,
        GridFilterMenuItem: La,
        GridFilterPanel: ti,
        GridFooter: ui,
        GridFooterContainer: ka,
        GridFooterPlaceholder: Ea,
        GridHeader: di,
        GridHeaderCheckbox: cn,
        GridHeaderPlaceholder: Sa,
        get GridLinkOperator () { return zr; },
        GridLoadIcon: Fn,
        GridLoadingOverlay: pi,
        GridMenu: Tl,
        GridMenuIcon: En,
        GridNoRowsOverlay: mi,
        GridOverlay: Ma,
        GridOverlays: Ca,
        GridPagination: gi,
        GridPanel: Xa,
        GridPanelContent: Ha,
        GridPanelFooter: $a,
        GridPanelHeader: Na,
        GridPanelWrapper: Wa,
        get GridPreferencePanelsValue () { return jl; },
        GridPreferencesPanel: Ja,
        GridRenderingZone: ea,
        GridRoot: Ra,
        GridRow: ma,
        GridRowCells: ba,
        GridRowCount: si,
        get GridRowModes () { return il; },
        GridSaveAltIcon: zn,
        GridScrollArea: Qr,
        GridSearchIcon: yn,
        GridSelectedRowCount: ci,
        GridSeparatorIcon: Rn,
        GridStickyContainer: ha,
        GridTableRowsIcon: Mn,
        GridToolbar: ii,
        GridToolbarColumnsButton: ri,
        GridToolbarContainer: Pa,
        GridToolbarDensitySelector: oi,
        GridToolbarExport: ai,
        GridToolbarFilterButton: li,
        GridTripleDotsVerticalIcon: In,
        GridViewHeadlineIcon: kn,
        GridViewStreamIcon: Pn,
        GridViewport: va,
        GridWindow: Yl,
        HideGridColMenuItem: Fa,
        MAX_PAGE_SIZE: zs,
        SUBMIT_FILTER_STROKE_TIME: An,
        SortGridMenuItems: Da,
        activeGridFilterItemsSelector: Oo,
        allGridColumnsFieldsSelector: se,
        allGridColumnsSelector: ue,
        arSD: as,
        bgBG: is,
        checkGridRowIdIsValid: fa,
        convertGridRowsPropToState: _i,
        csCZ: ss,
        deDE: cs,
        elGR: us,
        enUS: ds,
        esES: ps,
        filterGridColumnLookupSelector: Eo,
        filterGridItemsCounterSelector: yo,
        filterGridStateSelector: wo,
        filterableGridColumnsIdsSelector: fe,
        filterableGridColumnsSelector: me,
        frFR: ms,
        getGridColDef: fl,
        getGridDateOperators: Jn,
        getGridDefaultColumnTypes: ml,
        getGridNumericColumnOperators: Kn,
        getGridStringOperators: _n,
        getInitialGridColumnReorderState: Fr,
        getInitialGridColumnResizeState: Dr,
        getInitialGridColumnsState: kr,
        getInitialGridFilterState: Tr,
        getInitialGridRenderingState: _r,
        getInitialGridRowState: Ar,
        getInitialGridSortingState: $r,
        getInitialGridState: Nr,
        getInitialVisibleGridRowsState: Hr,
        gridCheckboxSelectionColDef: Un,
        gridClasses: Kr,
        gridColumnLookupSelector: ce,
        gridColumnMenuStateSelector: Do,
        gridColumnReorderDragColSelector: to,
        gridColumnReorderSelector: eo,
        gridColumnResizeSelector: ro,
        gridColumnsMetaSelector: pe,
        gridColumnsSelector: ie,
        gridColumnsTotalWidthSelector: be,
        gridDateFormatter: tl,
        gridDateTimeFormatter: rl,
        gridEditRowsStateSelector: Jl,
        gridFocusCellSelector: xo,
        gridFocusColumnHeaderSelector: Ro,
        gridFocusStateSelector: So,
        gridPaginatedVisibleSortedGridRowIdsSelector: on,
        gridPaginationSelector: rn,
        gridPanelClasses: qa,
        gridPreferencePanelStateSelector: Il,
        gridResizingColumnFieldSelector: oo,
        gridRowCountSelector: lo,
        gridRowsLookupSelector: ao,
        gridRowsStateSelector: no,
        gridScrollbarStateSelector: Gl,
        gridSelectionStateSelector: nn,
        gridSortColumnLookupSelector: fo,
        gridSortModelSelector: mo,
        gridTabIndexCellSelector: Mo,
        gridTabIndexColumnHeaderSelector: Po,
        gridTabIndexStateSelector: ko,
        gridViewportSizeStateSelector: Ll,
        itIT: fs,
        jaJP: gs,
        nlNL: bs,
        plPL: vs,
        plPLGrid: hs,
        ptBR: Cs,
        renderEditInputCell: pn,
        renderEditSingleSelectCell: ul,
        ruRU: Os,
        ruRUGrid: ws,
        selectedGridRowsCountSelector: ln,
        selectedGridRowsSelector: an,
        selectedIdsLookupSelector: sn,
        skSK: Es,
        skSKGrid: ys,
        sortedGridRowIdsSelector: uo,
        sortedGridRowsSelector: po,
        trTR: Ss,
        ukUA: Rs,
        ukUAGrid: xs,
        unorderedGridRowIdsSelector: io$1,
        unorderedGridRowModelsSelector: so,
        useApi: ji,
        useDataGridComponent: Ds,
        useGridApi: Vr,
        useGridApiMethod: Rr,
        useGridApiRef: qi,
        useGridColumnMenu: bi,
        useGridColumnReorder: hi,
        useGridColumnResize: Ji,
        useGridColumns: Oi,
        useGridComponents: os,
        useGridContainerProps: Fi,
        useGridControlState: yi,
        useGridEditRows: Vi,
        useGridFilter: Si,
        useGridFocus: xi,
        useGridKeyboard: Ri,
        useGridKeyboardNavigation: ki,
        useGridLogger: xr,
        useGridLoggerFactory: Sr,
        useGridPage: Li,
        useGridPageSize: zi,
        useGridParamsApi: Ai,
        useGridPreferencesPanel: Ti,
        useGridReducer: Ei,
        useGridRows: Ni,
        useGridScroll: Zi,
        useGridScrollFn: Mi,
        useGridSelection: Bi,
        useGridSelector: Wr,
        useGridSlotComponentProps: ns,
        useGridSorting: Wi,
        useGridState: Br,
        useGridVirtualization: Ui,
        useNativeEventListener: Di,
        visibleGridColumnsLengthSelector: ge,
        visibleGridColumnsSelector: de,
        visibleGridRowCountSelector: Co,
        visibleGridRowsStateSelector: go,
        visibleSortedGridRowIdsSelector: vo,
        visibleSortedGridRowsAsArraySelector: ho,
        visibleSortedGridRowsSelector: bo
    });

    var require$$12$1 = /*@__PURE__*/getAugmentedNamespace(indexEsm);

    var isObject = function isObject(x) {
    	return typeof x === 'object' && x !== null;
    };

    var SequenceFeatureDetails$1 = {};

    function _extends() {
      _extends = Object.assign || function (target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];

          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }

        return target;
      };

      return _extends.apply(this, arguments);
    }

    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;

      _setPrototypeOf$1(subClass, superClass);
    }

    function _setPrototypeOf$1(o, p) {
      _setPrototypeOf$1 = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
      };

      return _setPrototypeOf$1(o, p);
    }

    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;

      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }

      return target;
    }

    var observerMap = new Map();
    var RootIds = new WeakMap();
    var rootId = 0;
    var unsupportedValue = undefined;
    /**
     * What should be the default behavior if the IntersectionObserver is unsupported?
     * Ideally the polyfill has been loaded, you can have the following happen:
     * - `undefined`: Throw an error
     * - `true` or `false`: Set the `inView` value to this regardless of intersection state
     * **/

    function defaultFallbackInView(inView) {
      unsupportedValue = inView;
    }
    /**
     * Generate a unique ID for the root element
     * @param root
     */

    function getRootId(root) {
      if (!root) return '0';
      if (RootIds.has(root)) return RootIds.get(root);
      rootId += 1;
      RootIds.set(root, rootId.toString());
      return RootIds.get(root);
    }
    /**
     * Convert the options to a string Id, based on the values.
     * Ensures we can reuse the same observer when observing elements with the same options.
     * @param options
     */


    function optionsToId(options) {
      return Object.keys(options).sort().filter(function (key) {
        return options[key] !== undefined;
      }).map(function (key) {
        return key + "_" + (key === 'root' ? getRootId(options.root) : options[key]);
      }).toString();
    }

    function createObserver(options) {
      // Create a unique ID for this observer instance, based on the root, root margin and threshold.
      var id = optionsToId(options);
      var instance = observerMap.get(id);

      if (!instance) {
        // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.
        var elements = new Map();
        var thresholds;
        var observer = new IntersectionObserver(function (entries) {
          entries.forEach(function (entry) {
            var _elements$get;

            // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.
            // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0
            var inView = entry.isIntersecting && thresholds.some(function (threshold) {
              return entry.intersectionRatio >= threshold;
            }); // @ts-ignore support IntersectionObserver v2

            if (options.trackVisibility && typeof entry.isVisible === 'undefined') {
              // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.
              // @ts-ignore
              entry.isVisible = inView;
            }

            (_elements$get = elements.get(entry.target)) == null ? void 0 : _elements$get.forEach(function (callback) {
              callback(inView, entry);
            });
          });
        }, options); // Ensure we have a valid thresholds array. If not, use the threshold from the options

        thresholds = observer.thresholds || (Array.isArray(options.threshold) ? options.threshold : [options.threshold || 0]);
        instance = {
          id: id,
          observer: observer,
          elements: elements
        };
        observerMap.set(id, instance);
      }

      return instance;
    }
    /**
     * @param element - DOM Element to observe
     * @param callback - Callback function to trigger when intersection status changes
     * @param options - Intersection Observer options
     * @param fallbackInView - Fallback inView value.
     * @return Function - Cleanup function that should be triggered to unregister the observer
     */


    function observe(element, callback, options, fallbackInView) {
      if (options === void 0) {
        options = {};
      }

      if (fallbackInView === void 0) {
        fallbackInView = unsupportedValue;
      }

      if (typeof window.IntersectionObserver === 'undefined' && fallbackInView !== undefined) {
        var bounds = element.getBoundingClientRect();
        callback(fallbackInView, {
          isIntersecting: fallbackInView,
          target: element,
          intersectionRatio: typeof options.threshold === 'number' ? options.threshold : 0,
          time: 0,
          boundingClientRect: bounds,
          intersectionRect: bounds,
          rootBounds: bounds
        });
        return function () {// Nothing to cleanup
        };
      } // An observer with the same options can be reused, so lets use this fact


      var _createObserver = createObserver(options),
          id = _createObserver.id,
          observer = _createObserver.observer,
          elements = _createObserver.elements; // Register the callback listener for this element


      var callbacks = elements.get(element) || [];

      if (!elements.has(element)) {
        elements.set(element, callbacks);
      }

      callbacks.push(callback);
      observer.observe(element);
      return function unobserve() {
        // Remove the callback from the callback list
        callbacks.splice(callbacks.indexOf(callback), 1);

        if (callbacks.length === 0) {
          // No more callback exists for element, so destroy it
          elements["delete"](element);
          observer.unobserve(element);
        }

        if (elements.size === 0) {
          // No more elements are being observer by this instance, so destroy it
          observer.disconnect();
          observerMap["delete"](id);
        }
      };
    }

    var _excluded$1 = ["children", "as", "tag", "triggerOnce", "threshold", "root", "rootMargin", "onChange", "skip", "trackVisibility", "delay", "initialInView", "fallbackInView"];

    function isPlainChildren(props) {
      return typeof props.children !== 'function';
    }
    /**
     ## Render props

     To use the `<InView>` component, you pass it a function. It will be called
     whenever the state changes, with the new value of `inView`. In addition to the
     `inView` prop, children also receive a `ref` that should be set on the
     containing DOM element. This is the element that the IntersectionObserver will
     monitor.

     If you need it, you can also access the
     [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)
     on `entry`, giving you access to all the details about the current intersection
     state.

     ```jsx
     import { InView } from 'react-intersection-observer';

     const Component = () => (
     <InView>
     {({ inView, ref, entry }) => (
          <div ref={ref}>
            <h2>{`Header inside viewport ${inView}.`}</h2>
          </div>
        )}
     </InView>
     );

     export default Component;
     ```

     ## Plain children

     You can pass any element to the `<InView />`, and it will handle creating the
     wrapping DOM element. Add a handler to the `onChange` method, and control the
     state in your own component. Any extra props you add to `<InView>` will be
     passed to the HTML element, allowing you set the `className`, `style`, etc.

     ```jsx
     import { InView } from 'react-intersection-observer';

     const Component = () => (
     <InView as="div" onChange={(inView, entry) => console.log('Inview:', inView)}>
     <h2>Plain children are always rendered. Use onChange to monitor state.</h2>
     </InView>
     );

     export default Component;
     ```
     */


    var InView = /*#__PURE__*/function (_React$Component) {
      _inheritsLoose(InView, _React$Component);

      function InView(props) {
        var _this;

        _this = _React$Component.call(this, props) || this;
        _this.node = null;
        _this._unobserveCb = null;

        _this.handleNode = function (node) {
          if (_this.node) {
            // Clear the old observer, before we start observing a new element
            _this.unobserve();

            if (!node && !_this.props.triggerOnce && !_this.props.skip) {
              // Reset the state if we get a new node, and we aren't ignoring updates
              _this.setState({
                inView: !!_this.props.initialInView,
                entry: undefined
              });
            }
          }

          _this.node = node ? node : null;

          _this.observeNode();
        };

        _this.handleChange = function (inView, entry) {
          if (inView && _this.props.triggerOnce) {
            // If `triggerOnce` is true, we should stop observing the element.
            _this.unobserve();
          }

          if (!isPlainChildren(_this.props)) {
            // Store the current State, so we can pass it to the children in the next render update
            // There's no reason to update the state for plain children, since it's not used in the rendering.
            _this.setState({
              inView: inView,
              entry: entry
            });
          }

          if (_this.props.onChange) {
            // If the user is actively listening for onChange, always trigger it
            _this.props.onChange(inView, entry);
          }
        };

        _this.state = {
          inView: !!props.initialInView,
          entry: undefined
        };
        return _this;
      }

      var _proto = InView.prototype;

      _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
        // If a IntersectionObserver option changed, reinit the observer
        if (prevProps.rootMargin !== this.props.rootMargin || prevProps.root !== this.props.root || prevProps.threshold !== this.props.threshold || prevProps.skip !== this.props.skip || prevProps.trackVisibility !== this.props.trackVisibility || prevProps.delay !== this.props.delay) {
          this.unobserve();
          this.observeNode();
        }
      };

      _proto.componentWillUnmount = function componentWillUnmount() {
        this.unobserve();
        this.node = null;
      };

      _proto.observeNode = function observeNode() {
        if (!this.node || this.props.skip) return;
        var _this$props = this.props,
            threshold = _this$props.threshold,
            root = _this$props.root,
            rootMargin = _this$props.rootMargin,
            trackVisibility = _this$props.trackVisibility,
            delay = _this$props.delay,
            fallbackInView = _this$props.fallbackInView;
        this._unobserveCb = observe(this.node, this.handleChange, {
          threshold: threshold,
          root: root,
          rootMargin: rootMargin,
          // @ts-ignore
          trackVisibility: trackVisibility,
          // @ts-ignore
          delay: delay
        }, fallbackInView);
      };

      _proto.unobserve = function unobserve() {
        if (this._unobserveCb) {
          this._unobserveCb();

          this._unobserveCb = null;
        }
      };

      _proto.render = function render() {
        if (!isPlainChildren(this.props)) {
          var _this$state = this.state,
              inView = _this$state.inView,
              entry = _this$state.entry;
          return this.props.children({
            inView: inView,
            entry: entry,
            ref: this.handleNode
          });
        }

        var _this$props2 = this.props,
            children = _this$props2.children,
            as = _this$props2.as,
            tag = _this$props2.tag,
            props = _objectWithoutPropertiesLoose(_this$props2, _excluded$1);

        return /*#__PURE__*/React__namespace.createElement(as || tag || 'div', _extends({
          ref: this.handleNode
        }, props), children);
      };

      return InView;
    }(React__namespace.Component);
    InView.displayName = 'InView';
    InView.defaultProps = {
      threshold: 0,
      triggerOnce: false,
      initialInView: false
    };

    /**
     * React Hooks make it easy to monitor the `inView` state of your components. Call
     * the `useInView` hook with the (optional) [options](#options) you need. It will
     * return an array containing a `ref`, the `inView` status and the current
     * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).
     * Assign the `ref` to the DOM element you want to monitor, and the hook will
     * report the status.
     *
     * @example
     * ```jsx
     * import React from 'react';
     * import { useInView } from 'react-intersection-observer';
     *
     * const Component = () => {
     *   const { ref, inView, entry } = useInView({
     *       threshold: 0,
     *   });
     *
     *   return (
     *     <div ref={ref}>
     *       <h2>{`Header inside viewport ${inView}.`}</h2>
     *     </div>
     *   );
     * };
     * ```
     */

    function useInView(_temp) {
      var _ref = _temp === void 0 ? {} : _temp,
          threshold = _ref.threshold,
          delay = _ref.delay,
          trackVisibility = _ref.trackVisibility,
          rootMargin = _ref.rootMargin,
          root = _ref.root,
          triggerOnce = _ref.triggerOnce,
          skip = _ref.skip,
          initialInView = _ref.initialInView,
          fallbackInView = _ref.fallbackInView;

      var unobserve = React__namespace.useRef();

      var _React$useState = React__namespace.useState({
        inView: !!initialInView
      }),
          state = _React$useState[0],
          setState = _React$useState[1];

      var setRef = React__namespace.useCallback(function (node) {
        if (unobserve.current !== undefined) {
          unobserve.current();
          unobserve.current = undefined;
        } // Skip creating the observer


        if (skip) return;

        if (node) {
          unobserve.current = observe(node, function (inView, entry) {
            setState({
              inView: inView,
              entry: entry
            });

            if (entry.isIntersecting && triggerOnce && unobserve.current) {
              // If it should only trigger once, unobserve the element after it's inView
              unobserve.current();
              unobserve.current = undefined;
            }
          }, {
            root: root,
            rootMargin: rootMargin,
            threshold: threshold,
            // @ts-ignore
            trackVisibility: trackVisibility,
            // @ts-ignore
            delay: delay
          }, fallbackInView);
        }
      }, // We break the rule here, because we aren't including the actual `threshold` variable
      // eslint-disable-next-line react-hooks/exhaustive-deps
      [// If the threshold is an array, convert it to a string so it won't change between renders.
      // eslint-disable-next-line react-hooks/exhaustive-deps
      Array.isArray(threshold) ? threshold.toString() : threshold, root, rootMargin, triggerOnce, skip, trackVisibility, fallbackInView, delay]);
      /* eslint-disable-next-line */

      React$i.useEffect(function () {
        if (!unobserve.current && state.entry && !triggerOnce && !skip) {
          // If we don't have a ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)
          // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView
          setState({
            inView: !!initialInView
          });
        }
      });
      var result = [setRef, state.inView, state.entry]; // Support object destructuring, by adding the specific values.

      result.ref = result[0];
      result.inView = result[1];
      result.entry = result[2];
      return result;
    }

    var reactIntersectionObserver_m = /*#__PURE__*/Object.freeze({
        __proto__: null,
        InView: InView,
        'default': InView,
        defaultFallbackInView: defaultFallbackInView,
        observe: observe,
        useInView: useInView
    });

    var require$$9 = /*@__PURE__*/getAugmentedNamespace(reactIntersectionObserver_m);

    var toggleSelection = function () {
      var selection = document.getSelection();
      if (!selection.rangeCount) {
        return function () {};
      }
      var active = document.activeElement;

      var ranges = [];
      for (var i = 0; i < selection.rangeCount; i++) {
        ranges.push(selection.getRangeAt(i));
      }

      switch (active.tagName.toUpperCase()) { // .toUpperCase handles XHTML
        case 'INPUT':
        case 'TEXTAREA':
          active.blur();
          break;

        default:
          active = null;
          break;
      }

      selection.removeAllRanges();
      return function () {
        selection.type === 'Caret' &&
        selection.removeAllRanges();

        if (!selection.rangeCount) {
          ranges.forEach(function(range) {
            selection.addRange(range);
          });
        }

        active &&
        active.focus();
      };
    };

    var deselectCurrent = toggleSelection;

    var clipboardToIE11Formatting = {
      "text/plain": "Text",
      "text/html": "Url",
      "default": "Text"
    };

    var defaultMessage = "Copy to clipboard: #{key}, Enter";

    function format(message) {
      var copyKey = (/mac os x/i.test(navigator.userAgent) ? "⌘" : "Ctrl") + "+C";
      return message.replace(/#{\s*key\s*}/g, copyKey);
    }

    function copy(text, options) {
      var debug,
        message,
        reselectPrevious,
        range,
        selection,
        mark,
        success = false;
      if (!options) {
        options = {};
      }
      debug = options.debug || false;
      try {
        reselectPrevious = deselectCurrent();

        range = document.createRange();
        selection = document.getSelection();

        mark = document.createElement("span");
        mark.textContent = text;
        // reset user styles for span element
        mark.style.all = "unset";
        // prevents scrolling to the end of the page
        mark.style.position = "fixed";
        mark.style.top = 0;
        mark.style.clip = "rect(0, 0, 0, 0)";
        // used to preserve spaces and line breaks
        mark.style.whiteSpace = "pre";
        // do not inherit user-select (it may be `none`)
        mark.style.webkitUserSelect = "text";
        mark.style.MozUserSelect = "text";
        mark.style.msUserSelect = "text";
        mark.style.userSelect = "text";
        mark.addEventListener("copy", function(e) {
          e.stopPropagation();
          if (options.format) {
            e.preventDefault();
            if (typeof e.clipboardData === "undefined") { // IE 11
              debug && console.warn("unable to use e.clipboardData");
              debug && console.warn("trying IE specific stuff");
              window.clipboardData.clearData();
              var format = clipboardToIE11Formatting[options.format] || clipboardToIE11Formatting["default"];
              window.clipboardData.setData(format, text);
            } else { // all other browsers
              e.clipboardData.clearData();
              e.clipboardData.setData(options.format, text);
            }
          }
          if (options.onCopy) {
            e.preventDefault();
            options.onCopy(e.clipboardData);
          }
        });

        document.body.appendChild(mark);

        range.selectNodeContents(mark);
        selection.addRange(range);

        var successful = document.execCommand("copy");
        if (!successful) {
          throw new Error("copy command was unsuccessful");
        }
        success = true;
      } catch (err) {
        debug && console.error("unable to copy using execCommand: ", err);
        debug && console.warn("trying IE specific stuff");
        try {
          window.clipboardData.setData(options.format || "text", text);
          options.onCopy && options.onCopy(window.clipboardData);
          success = true;
        } catch (err) {
          debug && console.error("unable to copy using clipboardData: ", err);
          debug && console.error("falling back to prompt");
          message = format("message" in options ? options.message : defaultMessage);
          window.prompt(message, text);
        }
      } finally {
        if (selection) {
          if (typeof selection.removeRange == "function") {
            selection.removeRange(range);
          } else {
            selection.removeAllRanges();
          }
        }

        if (mark) {
          document.body.removeChild(mark);
        }
        reselectPrevious();
      }

      return success;
    }

    var copyToClipboard = copy;

    var util$1 = {};

    var _interopRequireDefault$a = interopRequireDefault.exports;

    Object.defineProperty(util$1, "__esModule", {
      value: true
    });
    util$1.calculateUTRs = calculateUTRs;
    util$1.dedupe = dedupe;
    util$1.ellipses = ellipses;
    util$1.revlist = revlist;
    util$1.stitch = stitch;

    var _toConsumableArray2$3 = _interopRequireDefault$a(toConsumableArray.exports);

    var _defineProperty2$3 = _interopRequireDefault$a(defineProperty$1.exports);

    function ownKeys$3(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

    function _objectSpread$3(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$3(Object(source), true).forEach(function (key) { (0, _defineProperty2$3.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$3(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

    function stitch(subfeats, sequence) {
      return subfeats.map(function (sub) {
        return sequence.slice(sub.start, sub.end);
      }).join('');
    } // filter items if they have the same "ID" or location


    function getItemId(feat) {
      return "".concat(feat.start, "-").concat(feat.end);
    } // filters if successive elements share same start/end


    function dedupe(list) {
      return list.filter(function (item, pos, ary) {
        return !pos || getItemId(item) !== getItemId(ary[pos - 1]);
      });
    }

    function revlist(list, seqlen) {
      return list.map(function (sub) {
        return _objectSpread$3(_objectSpread$3({}, sub), {}, {
          start: seqlen - sub.end,
          end: seqlen - sub.start
        });
      }).sort(function (a, b) {
        return a.start - b.start;
      });
    } // calculates UTRs using impliedUTRs logic


    function calculateUTRs(cds, exons) {
      var firstCds = cds[0];
      var lastCds = cds[cds.length - 1];
      var firstCdsIdx = exons.findIndex(function (exon) {
        return exon.end >= firstCds.start && exon.start <= firstCds.start;
      });
      var lastCdsIdx = exons.findIndex(function (exon) {
        return exon.end >= lastCds.end && exon.start <= lastCds.end;
      });
      var lastCdsExon = exons[lastCdsIdx];
      var firstCdsExon = exons[firstCdsIdx];
      var fiveUTRs = [].concat((0, _toConsumableArray2$3.default)(exons.slice(0, firstCdsIdx)), [{
        start: firstCdsExon.start,
        end: firstCds.start
      }]).map(function (elt) {
        return _objectSpread$3(_objectSpread$3({}, elt), {}, {
          type: 'five_prime_UTR'
        });
      });
      var threeUTRs = [{
        start: lastCds.end,
        end: lastCdsExon.end
      }].concat((0, _toConsumableArray2$3.default)(exons.slice(lastCdsIdx + 1))).map(function (elt) {
        return _objectSpread$3(_objectSpread$3({}, elt), {}, {
          type: 'three_prime_UTR'
        });
      });
      return [].concat((0, _toConsumableArray2$3.default)(fiveUTRs), (0, _toConsumableArray2$3.default)(threeUTRs));
    }

    function ellipses(slug) {
      return slug.length > 20 ? "".concat(slug.slice(0, 20), "...") : slug;
    }

    var _interopRequireDefault$9 = interopRequireDefault.exports;

    var _typeof$1 = _typeof$e.exports;

    Object.defineProperty(SequenceFeatureDetails$1, "__esModule", {
      value: true
    });
    SequenceFeatureDetails$1.SequencePanel = void 0;
    SequenceFeatureDetails$1.default = SequenceFeatureDetails;

    var _regenerator$2 = _interopRequireDefault$9(regenerator);

    var _asyncToGenerator2$2 = _interopRequireDefault$9(asyncToGenerator.exports);

    var _slicedToArray2$3 = _interopRequireDefault$9(slicedToArray.exports);

    var _defineProperty2$2 = _interopRequireDefault$9(defineProperty$1.exports);

    var _toConsumableArray2$2 = _interopRequireDefault$9(toConsumableArray.exports);

    var _react$1 = _interopRequireWildcard$5(React__default["default"]);

    var _core$1 = require$$9$2;

    var _reactIntersectionObserver = require$$9;

    var _copyToClipboard = _interopRequireDefault$9(copyToClipboard);

    var _util$1 = util$3;

    var _configuration$1 = configuration;

    var _util2$1 = util$1;

    function _getRequireWildcardCache$1(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache$1 = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

    function _interopRequireWildcard$5(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof$1(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache$1(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

    function ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

    function _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$2(Object(source), true).forEach(function (key) { (0, _defineProperty2$2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

    var useStyles$4 = (0, _core$1.makeStyles)(function (theme) {
      return {
        button: {
          margin: theme.spacing(1)
        }
      };
    }); // note that these are currently put into the style section instead of being
    // defined in classes to aid copy and paste to an external document e.g. word

    var proteinColor = 'rgb(220,160,220)';
    var intronColor = undefined;
    var cdsColor = 'rgb(220,220,180)';
    var updownstreamColor = 'rgba(250,200,200)';
    var utrColor = 'rgb(200,240,240)';

    function GeneCDS(_ref) {
      var cds = _ref.cds,
          sequence = _ref.sequence;
      return /*#__PURE__*/_react$1.default.createElement("span", {
        style: {
          background: cdsColor
        }
      }, (0, _util2$1.stitch)(cds, sequence));
    }

    function GeneProtein(_ref2) {
      var cds = _ref2.cds,
          sequence = _ref2.sequence,
          codonTable = _ref2.codonTable;
      var str = (0, _util2$1.stitch)(cds, sequence);
      var protein = '';

      for (var i = 0; i < str.length; i += 3) {
        // use & symbol for undefined codon, or partial slice
        protein += codonTable[str.slice(i, i + 3)] || '&';
      }

      return /*#__PURE__*/_react$1.default.createElement("span", {
        style: {
          background: proteinColor
        }
      }, protein);
    }

    function GenecDNA(_ref3) {
      var utr = _ref3.utr,
          cds = _ref3.cds,
          exons = _ref3.exons,
          sequence = _ref3.sequence,
          upstream = _ref3.upstream,
          downstream = _ref3.downstream,
          includeIntrons = _ref3.includeIntrons,
          collapseIntron = _ref3.collapseIntron;
      var chunks = cds.length ? [].concat((0, _toConsumableArray2$2.default)(cds), (0, _toConsumableArray2$2.default)(utr)).sort(function (a, b) {
        return a.start - b.start;
      }) : exons;
      return /*#__PURE__*/_react$1.default.createElement(_react$1.default.Fragment, null, upstream ? /*#__PURE__*/_react$1.default.createElement("span", {
        style: {
          background: updownstreamColor
        }
      }, upstream) : null, chunks.filter(function (f) {
        return f.start !== f.end;
      }).map(function (chunk, index) {
        var _chunks;

        var intron = sequence.slice(chunk.end, (_chunks = chunks[index + 1]) === null || _chunks === void 0 ? void 0 : _chunks.start);
        return /*#__PURE__*/_react$1.default.createElement(_react$1.default.Fragment, {
          key: JSON.stringify(chunk)
        }, /*#__PURE__*/_react$1.default.createElement("span", {
          style: {
            background: chunk.type === 'CDS' ? cdsColor : utrColor
          }
        }, sequence.slice(chunk.start, chunk.end)), includeIntrons && index < chunks.length - 1 ? /*#__PURE__*/_react$1.default.createElement("span", {
          style: {
            background: intronColor
          }
        }, collapseIntron && intron.length > 20 ? "".concat(intron.slice(0, 10), "...").concat(intron.slice(-10)) : intron) : null);
      }), downstream ? /*#__PURE__*/_react$1.default.createElement("span", {
        style: {
          background: updownstreamColor
        }
      }, downstream) : null);
    }

    var SequencePanel = /*#__PURE__*/_react$1.default.forwardRef(function (_ref4, ref) {
      var feature = _ref4.feature,
          mode = _ref4.mode,
          _ref4$sequence = _ref4.sequence,
          sequence = _ref4$sequence.seq,
          _ref4$sequence$upstre = _ref4$sequence.upstream,
          upstream = _ref4$sequence$upstre === void 0 ? '' : _ref4$sequence$upstre,
          _ref4$sequence$downst = _ref4$sequence.downstream,
          downstream = _ref4$sequence$downst === void 0 ? '' : _ref4$sequence$downst;
      var subfeatures = feature.subfeatures;
      var codonTable = (0, _util$1.generateCodonTable)(_util$1.defaultCodonTable);

      if (!subfeatures) {
        return null;
      }

      var children = subfeatures.sort(function (a, b) {
        return a.start - b.start;
      }).map(function (sub) {
        return _objectSpread$2(_objectSpread$2({}, sub), {}, {
          start: sub.start - feature.start,
          end: sub.end - feature.start
        });
      }); // we filter duplicate entries in cds and exon lists duplicate entries may be
      // rare but was seen in Gencode v36 track NCList, likely a bug on GFF3 or
      // probably worth ignoring here (produces broken protein translations if
      // included)
      //
      // position 1:224,800,006..225,203,064 gene ENSG00000185842.15 first
      // transcript ENST00000445597.6
      //
      // http://localhost:3000/?config=test_data%2Fconfig.json&session=share-FUl7G1isvF&password=HXh5Y

      var cds = (0, _util2$1.dedupe)(children.filter(function (sub) {
        return sub.type === 'CDS';
      }));
      var utr = (0, _util2$1.dedupe)(children.filter(function (sub) {
        return sub.type.match(/utr/i);
      }));
      var exons = (0, _util2$1.dedupe)(children.filter(function (sub) {
        return sub.type === 'exon';
      }));

      if (!utr.length && cds.length && exons.length) {
        utr = (0, _util2$1.calculateUTRs)(cds, exons);
      }

      if (feature.strand === -1) {
        var _ref5 = [(0, _util$1.revcom)(sequence), (0, _util$1.revcom)(downstream), (0, _util$1.revcom)(upstream)];
        sequence = _ref5[0];
        upstream = _ref5[1];
        downstream = _ref5[2];
        cds = (0, _util2$1.revlist)(cds, sequence.length);
        exons = (0, _util2$1.revlist)(exons, sequence.length);
        utr = (0, _util2$1.revlist)(utr, sequence.length);
      }

      return /*#__PURE__*/_react$1.default.createElement("div", {
        ref: ref,
        "data-testid": "sequence_panel"
      }, /*#__PURE__*/_react$1.default.createElement("div", {
        style: {
          fontFamily: 'monospace',
          wordWrap: 'break-word'
        }
      }, ">".concat(feature.name || feature.id || 'unknown', "-").concat(mode, "\n"), mode === 'cds' ? /*#__PURE__*/_react$1.default.createElement(GeneCDS, {
        cds: cds,
        sequence: sequence
      }) : mode === 'cdna' ? /*#__PURE__*/_react$1.default.createElement(GenecDNA, {
        exons: exons,
        cds: cds,
        utr: utr,
        sequence: sequence
      }) : mode === 'protein' ? /*#__PURE__*/_react$1.default.createElement(GeneProtein, {
        cds: cds,
        codonTable: codonTable,
        sequence: sequence
      }) : mode === 'gene' ? /*#__PURE__*/_react$1.default.createElement(GenecDNA, {
        exons: exons,
        cds: cds,
        utr: utr,
        sequence: sequence,
        includeIntrons: true
      }) : mode === 'gene_collapsed_intron' ? /*#__PURE__*/_react$1.default.createElement(GenecDNA, {
        exons: exons,
        cds: cds,
        sequence: sequence,
        utr: utr,
        includeIntrons: true,
        collapseIntron: true
      }) : mode === 'gene_updownstream' ? /*#__PURE__*/_react$1.default.createElement(GenecDNA, {
        exons: exons,
        cds: cds,
        sequence: sequence,
        utr: utr,
        upstream: upstream,
        downstream: downstream,
        includeIntrons: true
      }) : mode === 'gene_updownstream_collapsed_intron' ? /*#__PURE__*/_react$1.default.createElement(GenecDNA, {
        exons: exons,
        cds: cds,
        sequence: sequence,
        utr: utr,
        upstream: upstream,
        downstream: downstream,
        includeIntrons: true,
        collapseIntron: true
      }) : /*#__PURE__*/_react$1.default.createElement("div", null, "Unknown type")));
    }); // display the stitched-together sequence of a gene's CDS, cDNA, or protein
    // sequence. this is a best effort and weird genomic phenomena could lead these
    // to not be 100% accurate


    SequenceFeatureDetails$1.SequencePanel = SequencePanel;

    function SequenceFeatureDetails(_ref6) {
      var _parentFeature$subfea;

      var model = _ref6.model,
          feature = _ref6.feature;
      var classes = useStyles$4();
      var parentFeature = feature;
      var hasCDS = (_parentFeature$subfea = parentFeature.subfeatures) === null || _parentFeature$subfea === void 0 ? void 0 : _parentFeature$subfea.find(function (sub) {
        return sub.type === 'CDS';
      });
      var seqPanelRef = (0, _react$1.useRef)(null);

      var _useInView = (0, _reactIntersectionObserver.useInView)(),
          ref = _useInView.ref,
          inView = _useInView.inView;

      var _useState = (0, _react$1.useState)(),
          _useState2 = (0, _slicedToArray2$3.default)(_useState, 2),
          sequence = _useState2[0],
          setSequence = _useState2[1];

      var _useState3 = (0, _react$1.useState)(),
          _useState4 = (0, _slicedToArray2$3.default)(_useState3, 2),
          error = _useState4[0],
          setError = _useState4[1];

      var _useState5 = (0, _react$1.useState)(hasCDS ? 'cds' : 'cdna'),
          _useState6 = (0, _slicedToArray2$3.default)(_useState5, 2),
          mode = _useState6[0],
          setMode = _useState6[1];

      var _useState7 = (0, _react$1.useState)(false),
          _useState8 = (0, _slicedToArray2$3.default)(_useState7, 2),
          copied = _useState8[0],
          setCopied = _useState8[1];

      var _useState9 = (0, _react$1.useState)(false),
          _useState10 = (0, _slicedToArray2$3.default)(_useState9, 2),
          copiedHtml = _useState10[0],
          setCopiedHtml = _useState10[1];

      (0, _react$1.useEffect)(function () {
        var _model$view;

        var finished = false;

        if (!model || !inView) {
          return function () {};
        }

        var _getSession = (0, _util$1.getSession)(model),
            assemblyManager = _getSession.assemblyManager,
            rpcManager = _getSession.rpcManager;

        var _ref7 = ((_model$view = model.view) === null || _model$view === void 0 ? void 0 : _model$view.assemblyNames) || [],
            _ref8 = (0, _slicedToArray2$3.default)(_ref7, 1),
            assemblyName = _ref8[0];

        function fetchSeq(_x, _x2, _x3) {
          return _fetchSeq.apply(this, arguments);
        }

        function _fetchSeq() {
          _fetchSeq = (0, _asyncToGenerator2$2.default)( /*#__PURE__*/_regenerator$2.default.mark(function _callee2(start, end, refName) {
            var assembly, sessionId, feats, _ref11, _ref12, feat;

            return _regenerator$2.default.wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    _context2.next = 2;
                    return assemblyManager.waitForAssembly(assemblyName);

                  case 2:
                    assembly = _context2.sent;

                    if (assembly) {
                      _context2.next = 5;
                      break;
                    }

                    throw new Error('assembly not found');

                  case 5:
                    sessionId = 'getSequence';
                    _context2.next = 8;
                    return rpcManager.call(sessionId, 'CoreGetFeatures', {
                      adapterConfig: (0, _configuration$1.getConf)(assembly, ['sequence', 'adapter']),
                      sessionId: sessionId,
                      region: {
                        start: start,
                        end: end,
                        refName: assembly.getCanonicalRefName(refName)
                      }
                    });

                  case 8:
                    feats = _context2.sent;
                    _ref11 = feats, _ref12 = (0, _slicedToArray2$3.default)(_ref11, 1), feat = _ref12[0];

                    if (feat) {
                      _context2.next = 12;
                      break;
                    }

                    throw new Error("sequence not found for feature with refName:".concat(refName));

                  case 12:
                    return _context2.abrupt("return", feat.get('seq'));

                  case 13:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2);
          }));
          return _fetchSeq.apply(this, arguments);
        }
        (0, _asyncToGenerator2$2.default)( /*#__PURE__*/_regenerator$2.default.mark(function _callee() {
          var _ref10, start, end, refName, seq, up, down;

          return _regenerator$2.default.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.prev = 0;
                  _ref10 = feature, start = _ref10.start, end = _ref10.end, refName = _ref10.refName;
                  _context.next = 4;
                  return fetchSeq(start, end, refName);

                case 4:
                  seq = _context.sent;
                  _context.next = 7;
                  return fetchSeq(Math.max(0, start - 500), start, refName);

                case 7:
                  up = _context.sent;
                  _context.next = 10;
                  return fetchSeq(end, end + 500, refName);

                case 10:
                  down = _context.sent;

                  if (!finished) {
                    setSequence({
                      seq: seq,
                      upstream: up,
                      downstream: down
                    });
                  }

                  _context.next = 17;
                  break;

                case 14:
                  _context.prev = 14;
                  _context.t0 = _context["catch"](0);
                  setError(_context.t0);

                case 17:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, null, [[0, 14]]);
        }))();
        return function () {
          finished = true;
        };
      }, [feature, inView, model]);
      var loading = !sequence;
      return /*#__PURE__*/_react$1.default.createElement("div", {
        ref: ref
      }, /*#__PURE__*/_react$1.default.createElement(_core$1.Select, {
        value: mode,
        onChange: function onChange(event) {
          return setMode(event.target.value);
        }
      }, hasCDS ? /*#__PURE__*/_react$1.default.createElement(_core$1.MenuItem, {
        value: "cds"
      }, "CDS") : null, hasCDS ? /*#__PURE__*/_react$1.default.createElement(_core$1.MenuItem, {
        value: "protein"
      }, "Protein") : null, /*#__PURE__*/_react$1.default.createElement(_core$1.MenuItem, {
        value: "gene"
      }, "Gene w/ introns"), /*#__PURE__*/_react$1.default.createElement(_core$1.MenuItem, {
        value: "gene_collapsed_intron"
      }, "Gene w/ 10bp of intron"), /*#__PURE__*/_react$1.default.createElement(_core$1.MenuItem, {
        value: "gene_updownstream"
      }, "Gene w/ 500bp up+down stream"), /*#__PURE__*/_react$1.default.createElement(_core$1.MenuItem, {
        value: "gene_updownstream_collapsed_intron"
      }, "Gene w/ 500bp up+down stream w/ 10bp intron"), /*#__PURE__*/_react$1.default.createElement(_core$1.MenuItem, {
        value: "cdna"
      }, "cDNA")), /*#__PURE__*/_react$1.default.createElement(_core$1.Button, {
        className: classes.button,
        type: "button",
        variant: "contained",
        onClick: function onClick() {
          var ref = seqPanelRef.current;

          if (ref) {
            (0, _copyToClipboard.default)(ref.textContent || '', {
              format: 'text/plain'
            });
            setCopied(true);
            setTimeout(function () {
              return setCopied(false);
            }, 1000);
          }
        }
      }, copied ? 'Copied to clipboard!' : 'Copy as plaintext'), /*#__PURE__*/_react$1.default.createElement(_core$1.Tooltip, {
        title: "Note that 'Copy as HTML' can retain the colors but cannot be pasted into some programs like notepad that only expect plain text"
      }, /*#__PURE__*/_react$1.default.createElement(_core$1.Button, {
        className: classes.button,
        type: "button",
        variant: "contained",
        onClick: function onClick() {
          var ref = seqPanelRef.current;

          if (ref) {
            (0, _copyToClipboard.default)(ref.innerHTML, {
              format: 'text/html'
            });
            setCopiedHtml(true);
            setTimeout(function () {
              return setCopiedHtml(false);
            }, 1000);
          }
        }
      }, copiedHtml ? 'Copied to clipboard!' : 'Copy as HTML')), /*#__PURE__*/_react$1.default.createElement("div", {
        "data-testid": "feature_sequence"
      }, error ? /*#__PURE__*/_react$1.default.createElement(_core$1.Typography, {
        color: "error"
      }, "".concat(error)) : loading ? /*#__PURE__*/_react$1.default.createElement("div", null, "Loading gene sequence...") : sequence ? /*#__PURE__*/_react$1.default.createElement(SequencePanel, {
        ref: seqPanelRef,
        feature: parentFeature,
        mode: mode,
        sequence: sequence
      }) : /*#__PURE__*/_react$1.default.createElement("div", null, "No sequence found")));
    }

    var _interopRequireDefault$8 = interopRequireDefault.exports;

    var _typeof = _typeof$e.exports;

    Object.defineProperty(BaseFeatureDetail, "__esModule", {
      value: true
    });
    BaseFeatureDetail.BaseAttributes = Attributes_1 = BaseFeatureDetail.Attributes = void 0;
    BaseFeatureDetail.BaseCard = BaseCard;
    BaseFeatureDetail.useStyles = BaseFeatureDetail.default = BaseFeatureDetail.SimpleValue = BaseFeatureDetail.FieldName = BaseFeatureDetail.FeatureDetails = BaseFeatureDetail.BasicValue = BaseFeatureDetail.BaseCoreDetails = void 0;

    var _objectWithoutProperties2 = _interopRequireDefault$8(objectWithoutProperties.exports);

    var _extends2 = _interopRequireDefault$8(_extends$1.exports);

    var _defineProperty2$1 = _interopRequireDefault$8(defineProperty$1.exports);

    var _toConsumableArray2$1 = _interopRequireDefault$8(toConsumableArray.exports);

    var _slicedToArray2$2 = _interopRequireDefault$8(slicedToArray.exports);

    var _react = _interopRequireWildcard$4(React__default["default"]);

    var _reactErrorBoundary = reactErrorBoundary_umd.exports;

    var _core = require$$9$2;

    var _ExpandMore = _interopRequireDefault$8(ExpandMore);

    var _styles = require$$11;

    var _xDataGrid = require$$12$1;

    var _mobxReact = require$$13;

    var _clsx = _interopRequireDefault$8(require$$14);

    var _isObject = _interopRequireDefault$8(isObject);

    var _configuration = configuration;

    var _util = util$3;

    var _SanitizedHTML = _interopRequireDefault$8(SanitizedHTML$1);

    var _SequenceFeatureDetails = _interopRequireDefault$8(SequenceFeatureDetails$1);

    var _util2 = util$1;

    var _excluded = ["id"];

    function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

    function _interopRequireWildcard$4(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

    function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

    function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$1(Object(source), true).forEach(function (key) { (0, _defineProperty2$1.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

    // these are always omitted as too detailed
    var globalOmit = ['length', 'position', 'subfeatures', 'uniqueId', 'exonFrames', 'parentId', 'thickStart', 'thickEnd']; // coreDetails are omitted in some circumstances

    var coreDetails = ['name', 'start', 'end', 'strand', 'refName', 'description', 'type'];
    var useStyles$3 = (0, _styles.makeStyles)(function (theme) {
      return {
        expansionPanelDetails: {
          display: 'block',
          padding: theme.spacing(1)
        },
        expandIcon: {
          color: '#FFFFFF'
        },
        field: {
          display: 'flex',
          flexWrap: 'wrap'
        },
        fieldDescription: {
          '&:hover': {
            background: 'yellow'
          }
        },
        fieldName: {
          wordBreak: 'break-all',
          minWidth: '90px',
          maxWidth: '150px',
          borderBottom: '1px solid #0003',
          background: theme.palette.grey[200],
          marginRight: theme.spacing(1),
          padding: theme.spacing(0.5)
        },
        fieldValue: {
          wordBreak: 'break-word',
          maxHeight: 300,
          padding: theme.spacing(0.5),
          overflow: 'auto'
        },
        fieldSubvalue: {
          wordBreak: 'break-word',
          maxHeight: 300,
          padding: theme.spacing(0.5),
          background: theme.palette.grey[100],
          border: "1px solid ".concat(theme.palette.grey[300]),
          boxSizing: 'border-box',
          overflow: 'auto'
        }
      };
    });
    BaseFeatureDetail.useStyles = useStyles$3;

    function BaseCard(_ref) {
      var children = _ref.children,
          title = _ref.title,
          _ref$defaultExpanded = _ref.defaultExpanded,
          defaultExpanded = _ref$defaultExpanded === void 0 ? true : _ref$defaultExpanded;
      var classes = useStyles$3();

      var _useState = (0, _react.useState)(defaultExpanded),
          _useState2 = (0, _slicedToArray2$2.default)(_useState, 2),
          expanded = _useState2[0],
          setExpanded = _useState2[1];

      return /*#__PURE__*/_react.default.createElement(_core.Accordion, {
        expanded: expanded,
        onChange: function onChange() {
          return setExpanded(function (s) {
            return !s;
          });
        },
        TransitionProps: {
          unmountOnExit: true
        }
      }, /*#__PURE__*/_react.default.createElement(_core.AccordionSummary, {
        expandIcon: /*#__PURE__*/_react.default.createElement(_ExpandMore.default, {
          className: classes.expandIcon
        })
      }, /*#__PURE__*/_react.default.createElement(_core.Typography, {
        variant: "button"
      }, " ", title)), /*#__PURE__*/_react.default.createElement(_core.AccordionDetails, {
        className: classes.expansionPanelDetails
      }, children));
    }

    var FieldName = function FieldName(_ref2) {
      var description = _ref2.description,
          name = _ref2.name,
          _ref2$prefix = _ref2.prefix,
          prefix = _ref2$prefix === void 0 ? [] : _ref2$prefix;
      var classes = useStyles$3();
      var val = [].concat((0, _toConsumableArray2$1.default)(prefix), [name]).join('.');
      return description ? /*#__PURE__*/_react.default.createElement(_core.Tooltip, {
        title: description,
        placement: "left"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: (0, _clsx.default)(classes.fieldDescription, classes.fieldName)
      }, val)) : /*#__PURE__*/_react.default.createElement("div", {
        className: classes.fieldName
      }, val);
    };

    BaseFeatureDetail.FieldName = FieldName;

    var BasicValue = function BasicValue(_ref3) {
      var value = _ref3.value;
      var classes = useStyles$3();
      return /*#__PURE__*/_react.default.createElement("div", {
        className: classes.fieldValue
      }, /*#__PURE__*/_react.default.isValidElement(value) ? value : /*#__PURE__*/_react.default.createElement(_SanitizedHTML.default, {
        html: (0, _isObject.default)(value) ? JSON.stringify(value) : String(value)
      }));
    };

    BaseFeatureDetail.BasicValue = BasicValue;

    var SimpleValue = function SimpleValue(_ref4) {
      var name = _ref4.name,
          value = _ref4.value,
          description = _ref4.description,
          prefix = _ref4.prefix;
      var classes = useStyles$3();
      return value !== null && value !== undefined ? /*#__PURE__*/_react.default.createElement("div", {
        className: classes.field
      }, /*#__PURE__*/_react.default.createElement(FieldName, {
        prefix: prefix,
        description: description,
        name: name
      }), /*#__PURE__*/_react.default.createElement(BasicValue, {
        value: value
      })) : null;
    };

    BaseFeatureDetail.SimpleValue = SimpleValue;

    var ArrayValue = function ArrayValue(_ref5) {
      var name = _ref5.name,
          value = _ref5.value,
          description = _ref5.description,
          _ref5$prefix = _ref5.prefix,
          prefix = _ref5$prefix === void 0 ? [] : _ref5$prefix;
      var classes = useStyles$3();
      return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, value.length === 1 ? (0, _isObject.default)(value[0]) ? /*#__PURE__*/_react.default.createElement(Attributes, {
        attributes: value[0],
        prefix: [].concat((0, _toConsumableArray2$1.default)(prefix), [name])
      }) : /*#__PURE__*/_react.default.createElement("div", {
        className: classes.field
      }, /*#__PURE__*/_react.default.createElement(FieldName, {
        prefix: prefix,
        description: description,
        name: name
      }), /*#__PURE__*/_react.default.createElement(BasicValue, {
        value: value[0]
      })) : value.every(function (val) {
        return (0, _isObject.default)(val);
      }) ? value.map(function (val, i) {
        return /*#__PURE__*/_react.default.createElement(Attributes, {
          key: JSON.stringify(val) + '-' + i,
          attributes: val,
          prefix: [].concat((0, _toConsumableArray2$1.default)(prefix), [name + '-' + i])
        });
      }) : /*#__PURE__*/_react.default.createElement("div", {
        className: classes.field
      }, /*#__PURE__*/_react.default.createElement(FieldName, {
        prefix: prefix,
        description: description,
        name: name
      }), value.map(function (val, i) {
        return /*#__PURE__*/_react.default.createElement("div", {
          key: JSON.stringify(val) + '-' + i,
          className: classes.fieldSubvalue
        }, /*#__PURE__*/_react.default.createElement(BasicValue, {
          value: val
        }));
      })));
    };

    function CoreDetails(props) {
      var feature = props.feature;
      var _ref6 = feature,
          refName = _ref6.refName,
          start = _ref6.start,
          end = _ref6.end,
          strand = _ref6.strand;
      var strandMap = {
        '-1': '-',
        '0': '',
        '1': '+'
      };
      var strandStr = strandMap[strand] ? "(".concat(strandMap[strand], ")") : '';
      var displayStart = (start + 1).toLocaleString('en-US');
      var displayEnd = end.toLocaleString('en-US');
      var displayRef = refName ? "".concat(refName, ":") : '';

      var displayedDetails = _objectSpread$1(_objectSpread$1({}, feature), {}, {
        length: (end - start).toLocaleString('en-US'),
        position: "".concat(displayRef).concat(displayStart, "..").concat(displayEnd, " ").concat(strandStr)
      });

      var coreRenderedDetails = ['Position', 'Description', 'Name', 'Length', 'Type'];
      return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, coreRenderedDetails.map(function (key) {
        return [key, displayedDetails[key.toLowerCase()]];
      }).filter(function (_ref7) {
        var _ref8 = (0, _slicedToArray2$2.default)(_ref7, 2),
            value = _ref8[1];

        return value !== null && value !== undefined;
      }).map(function (_ref9) {
        var _ref10 = (0, _slicedToArray2$2.default)(_ref9, 2),
            key = _ref10[0],
            value = _ref10[1];

        return /*#__PURE__*/_react.default.createElement(SimpleValue, {
          key: key,
          name: key,
          value: value
        });
      }));
    }

    var BaseCoreDetails = function BaseCoreDetails(props) {
      return /*#__PURE__*/_react.default.createElement(BaseCard, (0, _extends2.default)({}, props, {
        title: "Primary data"
      }), /*#__PURE__*/_react.default.createElement(CoreDetails, props));
    };

    BaseFeatureDetail.BaseCoreDetails = BaseCoreDetails;

    var DataGridDetails = function DataGridDetails(_ref11) {
      var value = _ref11.value,
          prefix = _ref11.prefix,
          name = _ref11.name;
      var keys = Object.keys(value[0]).sort();
      var unionKeys = new Set(keys);
      value.forEach(function (val) {
        return Object.keys(val).forEach(function (k) {
          return unionKeys.add(k);
        });
      });

      if (unionKeys.size < keys.length + 5) {
        // avoids key 'id' from being used in row data
        var rows = Object.entries(value).map(function (_ref12) {
          var _ref13 = (0, _slicedToArray2$2.default)(_ref12, 2),
              k = _ref13[0],
              val = _ref13[1];

          var id = val.id,
              rest = (0, _objectWithoutProperties2.default)(val, _excluded);
          return _objectSpread$1({
            id: k,
            // used by material UI
            identifier: id
          }, rest);
        }); // avoids key 'id' from being used in column names, and tries
        // to make it at the start of the colNames array

        var colNames;

        if (unionKeys.has('id')) {
          unionKeys.delete('id');
          colNames = ['identifier'].concat((0, _toConsumableArray2$1.default)(unionKeys));
        } else {
          colNames = (0, _toConsumableArray2$1.default)(unionKeys);
        }

        var columns = colNames.map(function (val) {
          return {
            field: val,
            width: Math.max.apply(Math, (0, _toConsumableArray2$1.default)(rows.map(function (row) {
              var result = String(row[val]);
              return Math.min(Math.max((0, _util.measureText)(result, 14) + 50, 80), 1000);
            })))
          };
        }); // disableSelection on click helps avoid
        // https://github.com/mui-org/material-ui-x/issues/1197

        return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(FieldName, {
          prefix: prefix,
          name: name
        }), /*#__PURE__*/_react.default.createElement("div", {
          style: {
            height: Math.min(rows.length, 100) * 20 + 50 + (rows.length < 100 ? 0 : 50),
            width: '100%'
          }
        }, /*#__PURE__*/_react.default.createElement(_xDataGrid.DataGrid, {
          disableSelectionOnClick: true,
          rowHeight: 20,
          headerHeight: 25,
          rows: rows,
          rowsPerPageOptions: [],
          hideFooterRowCount: true,
          hideFooterSelectedRowCount: true,
          columns: columns,
          hideFooter: rows.length < 100
        })));
      }

      return null;
    }; // arr = ['a','b'], obj = {a:{b:'hello}}, returns hello (with special addition to grab description also)


    function accessNested(arr) {
      var _obj;

      var obj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      arr.forEach(function (elt) {
        if (obj) {
          obj = obj[elt];
        }
      });
      return typeof obj === 'string' ? obj : typeof ((_obj = obj) === null || _obj === void 0 ? void 0 : _obj.Description) === 'string' ? obj.Description : undefined;
    }

    var Attributes = function Attributes(props) {
      var attributes = props.attributes,
          _props$omit = props.omit,
          omit = _props$omit === void 0 ? [] : _props$omit,
          descriptions = props.descriptions,
          _props$formatter = props.formatter,
          formatter = _props$formatter === void 0 ? function (val) {
        return val;
      } : _props$formatter,
          _props$prefix = props.prefix,
          prefix = _props$prefix === void 0 ? [] : _props$prefix;
      var omits = [].concat((0, _toConsumableArray2$1.default)(omit), globalOmit);
      return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, Object.entries(attributes).filter(function (_ref14) {
        var _ref15 = (0, _slicedToArray2$2.default)(_ref14, 2),
            k = _ref15[0],
            v = _ref15[1];

        return v !== undefined && !omits.includes(k);
      }).map(function (_ref16) {
        var _ref17 = (0, _slicedToArray2$2.default)(_ref16, 2),
            key = _ref17[0],
            value = _ref17[1];

        if (Array.isArray(value) && value.length > 2 && value.every(function (val) {
          return (0, _isObject.default)(val);
        })) {
          return /*#__PURE__*/_react.default.createElement(DataGridDetails, {
            key: key,
            prefix: prefix,
            name: key,
            value: value
          });
        }

        var description = accessNested([].concat((0, _toConsumableArray2$1.default)(prefix), [key]), descriptions);

        if (Array.isArray(value)) {
          return /*#__PURE__*/_react.default.createElement(ArrayValue, {
            key: key,
            name: key,
            value: value,
            description: description,
            prefix: prefix
          });
        }

        if ((0, _isObject.default)(value)) {
          return /*#__PURE__*/_react.default.createElement(Attributes, {
            omit: omits,
            key: key,
            attributes: value,
            descriptions: descriptions,
            prefix: [].concat((0, _toConsumableArray2$1.default)(prefix), [key])
          });
        }

        return /*#__PURE__*/_react.default.createElement(SimpleValue, {
          key: key,
          name: key,
          value: formatter(value, key),
          description: description,
          prefix: prefix
        });
      }));
    };

    var Attributes_1 = BaseFeatureDetail.Attributes = Attributes;

    var BaseAttributes = function BaseAttributes(props) {
      var feature = props.feature;
      return /*#__PURE__*/_react.default.createElement(BaseCard, (0, _extends2.default)({}, props, {
        title: "Attributes"
      }), /*#__PURE__*/_react.default.createElement(Attributes, (0, _extends2.default)({}, props, {
        attributes: feature
      })));
    };

    BaseFeatureDetail.BaseAttributes = BaseAttributes;

    function isEmpty(obj) {
      return Object.keys(obj).length === 0;
    }

    var FeatureDetails = function FeatureDetails(props) {
      var _props$omit2 = props.omit,
          omit = _props$omit2 === void 0 ? [] : _props$omit2,
          model = props.model,
          feature = props.feature,
          _props$depth = props.depth,
          depth = _props$depth === void 0 ? 0 : _props$depth;
      var _feature$name = feature.name,
          name = _feature$name === void 0 ? '' : _feature$name,
          _feature$id = feature.id,
          id = _feature$id === void 0 ? '' : _feature$id,
          _feature$type = feature.type,
          type = _feature$type === void 0 ? '' : _feature$type,
          subfeatures = feature.subfeatures;
      var session = (0, _util.getSession)(model);
      var defaultSeqTypes = ['mRNA', 'transcript'];
      var sequenceTypes = (0, _configuration.getConf)(session, ['featureDetails', 'sequenceTypes']) || defaultSeqTypes;
      return /*#__PURE__*/_react.default.createElement(BaseCard, {
        title: [(0, _util2.ellipses)(name || id), type].filter(function (f) {
          return !!f;
        }).join(' - ')
      }, /*#__PURE__*/_react.default.createElement(_core.Typography, null, "Core details"), /*#__PURE__*/_react.default.createElement(CoreDetails, props), /*#__PURE__*/_react.default.createElement(_core.Divider, null), /*#__PURE__*/_react.default.createElement(_core.Typography, null, "Attributes"), /*#__PURE__*/_react.default.createElement(Attributes, (0, _extends2.default)({
        attributes: feature
      }, props, {
        omit: [].concat((0, _toConsumableArray2$1.default)(omit), coreDetails)
      })), sequenceTypes.includes(feature.type) ? /*#__PURE__*/_react.default.createElement(_reactErrorBoundary.ErrorBoundary, {
        FallbackComponent: function FallbackComponent(_ref18) {
          var error = _ref18.error;
          return /*#__PURE__*/_react.default.createElement(_core.Typography, {
            color: "error"
          }, "Failed to fetch sequence for feature: ", "".concat(error));
        }
      }, /*#__PURE__*/_react.default.createElement(_SequenceFeatureDetails.default, props)) : null, subfeatures !== null && subfeatures !== void 0 && subfeatures.length ? /*#__PURE__*/_react.default.createElement(BaseCard, {
        title: "Subfeatures",
        defaultExpanded: !sequenceTypes.includes(feature.type)
      }, subfeatures.map(function (sub) {
        return /*#__PURE__*/_react.default.createElement(FeatureDetails, {
          key: JSON.stringify(sub),
          feature: sub,
          model: model,
          depth: depth + 1
        });
      })) : null);
    };

    BaseFeatureDetail.FeatureDetails = FeatureDetails;
    var BaseFeatureDetails = (0, _mobxReact.observer)(function (props) {
      var model = props.model;
      var featureData = model.featureData;

      if (!featureData) {
        return null;
      }

      var feature = JSON.parse(JSON.stringify(featureData));

      if (isEmpty(feature)) {
        return null;
      }

      return /*#__PURE__*/_react.default.createElement(FeatureDetails, {
        model: model,
        feature: feature
      });
    });
    var _default$5 = BaseFeatureDetails;
    BaseFeatureDetail.default = _default$5;

    var MoreInfoDlg = observer(function (_a) {
        var info = _a.info, onClose = _a.onClose;
        return (React__default["default"].createElement(Dialog$2, { onClose: function () { return onClose(); }, open: true },
            React__default["default"].createElement(DialogTitle$2, null, "Metadata"),
            React__default["default"].createElement(DialogContent$2, null,
                React__default["default"].createElement(Attributes_1, { attributes: info }))));
    });

    var __assign$3 = (undefined && undefined.__assign) || function () {
        __assign$3 = Object.assign || function(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
            }
            return t;
        };
        return __assign$3.apply(this, arguments);
    };
    var extendBounds = 5;
    var radius = 3.5;
    var d = radius * 2;
    var padding = 600;
    var TreeMenu = observer(function (_a) {
        var _b, _c;
        var node = _a.node, onClose = _a.onClose, model = _a.model;
        var structures = model.structures;
        var nodeDetails = node ? model.getRowDetails(node.name) : undefined;
        return (React__default["default"].createElement(React__default["default"].Fragment, null,
            React__default["default"].createElement(Menu$4, { anchorReference: "anchorPosition", anchorPosition: {
                    top: node.y,
                    left: node.x,
                }, transitionDuration: 0, keepMounted: true, open: Boolean(node), onClose: onClose },
                React__default["default"].createElement(MenuItem$1, { dense: true, disabled: true }, node.name),
                React__default["default"].createElement(MenuItem$1, { dense: true, onClick: function () {
                        model.setDialogComponent(MoreInfoDlg, {
                            info: model.getRowDetails(node.name),
                        });
                        onClose();
                    } }, "More info..."), (_b = structures[node.name]) === null || _b === void 0 ? void 0 :
                _b.map(function (entry) {
                    return !model.selectedStructures.find(function (n) { return n.id === node.name; }) ? (React__default["default"].createElement(MenuItem$1, { key: JSON.stringify(entry), dense: true, onClick: function () {
                            model.addStructureToSelection({
                                structure: entry,
                                id: node.name,
                            });
                            onClose();
                        } },
                        "Add PDB to selection (",
                        entry.pdb,
                        ")")) : (React__default["default"].createElement(MenuItem$1, { key: JSON.stringify(entry), dense: true, onClick: function () {
                            model.removeStructureFromSelection({
                                structure: entry,
                                id: node.name,
                            });
                            onClose();
                        } },
                        "Remove PDB from selection (",
                        entry.pdb,
                        ")"));
                }), (_c = nodeDetails.accession) === null || _c === void 0 ? void 0 :
                _c.map(function (accession) { return (React__default["default"].createElement(MenuItem$1, { dense: true, key: accession, onClick: function () {
                        model.addUniprotTrack({ name: nodeDetails.name, accession: accession });
                        onClose();
                    } },
                    "Open UniProt track (",
                    accession,
                    ")")); }))));
    });
    var TreeBranchMenu = observer(function (_a) {
        var node = _a.node, model = _a.model, onClose = _a.onClose;
        return (React__default["default"].createElement(Menu$4, { anchorReference: "anchorPosition", anchorPosition: {
                left: node.x,
                top: node.y,
            }, transitionDuration: 0, keepMounted: true, open: Boolean(node), onClose: onClose },
            React__default["default"].createElement(MenuItem$1, { dense: true, disabled: true }, node.name),
            React__default["default"].createElement(MenuItem$1, { dense: true, onClick: function () {
                    model.toggleCollapsed(node.id);
                    onClose();
                } }, model.collapsed.includes(node.id)
                ? 'Expand this node'
                : 'Collapse this node'),
            React__default["default"].createElement(MenuItem$1, { dense: true, onClick: function () {
                    model.showOnly === node.id
                        ? model.setShowOnly(undefined)
                        : model.setShowOnly(node.id);
                    onClose();
                } }, model.showOnly === node.id
                ? 'Disable show only this node'
                : 'Show only this node')));
    });
    var TreeBlock = observer(function (_a) {
        var model = _a.model, offsetY = _a.offsetY;
        var ref = React$i.useRef(null);
        var clickMap = React$i.useRef(new RBush());
        var mouseoverRef = React$i.useRef(null);
        var _b = React$i.useState(), branchMenu = _b[0], setBranchMenu = _b[1];
        var _c = React$i.useState(), toggleNodeMenu = _c[0], setToggleNodeMenu = _c[1];
        var _d = React$i.useState(), hoverElt = _d[0], setHoverElt = _d[1];
        var hierarchy = model.hierarchy, rowHeight = model.rowHeight, scrollY = model.scrollY, treeWidth = model.treeWidth, showBranchLen = model.showBranchLen, collapsed = model.collapsed, margin = model.margin, labelsAlignRight = model.labelsAlignRight, noTree = model.noTree, blockSize = model.blockSize, drawNodeBubbles = model.drawNodeBubbles, drawTree = model.drawTree, treeAreaWidth = model.treeAreaWidth, structures = model.structures, highResScaleFactor = model.highResScaleFactor;
        React$i.useEffect(function () {
            clickMap.current.clear();
            if (!ref.current) {
                return;
            }
            var ctx = ref.current.getContext('2d');
            if (!ctx) {
                return;
            }
            ctx.resetTransform();
            ctx.scale(highResScaleFactor, highResScaleFactor);
            ctx.clearRect(0, 0, treeWidth + padding, blockSize);
            ctx.translate(margin.left, -offsetY);
            var font = ctx.font;
            ctx.font = font.replace(/\d+px/, "".concat(Math.max(8, rowHeight - 8), "px"));
            if (!noTree && drawTree) {
                hierarchy.links().forEach(function (_a) {
                    var source = _a.source, target = _a.target;
                    var y = showBranchLen ? 'len' : 'y';
                    //@ts-ignore
                    var _b = source, sy = _b.x, _c = y, sx = _b[_c];
                    //@ts-ignore
                    var _d = target, ty = _d.x, _e = y, tx = _d[_e];
                    var y1 = Math.min(sy, ty);
                    var y2 = Math.max(sy, ty);
                    //1d line intersection to check if line crosses block at all, this is
                    //an optimization that allows us to skip drawing most tree links
                    //outside the block
                    if (offsetY + blockSize >= y1 && y2 >= offsetY) {
                        ctx.beginPath();
                        ctx.moveTo(sx, sy);
                        ctx.lineTo(sx, ty);
                        ctx.lineTo(tx, ty);
                        ctx.stroke();
                    }
                });
                if (drawNodeBubbles) {
                    hierarchy.descendants().forEach(function (node) {
                        var val = showBranchLen ? 'len' : 'y';
                        var _a = node, 
                        //@ts-ignore
                        y = _a.x, 
                        //@ts-ignore
                        _b = val, 
                        //@ts-ignore
                        x = _a[_b], data = _a.data;
                        var _c = data.id, id = _c === void 0 ? '' : _c, _d = data.name, name = _d === void 0 ? '' : _d;
                        if (y > offsetY - extendBounds &&
                            y < offsetY + blockSize + extendBounds) {
                            ctx.strokeStyle = 'black';
                            ctx.fillStyle = collapsed.includes(id) ? 'black' : 'white';
                            ctx.beginPath();
                            ctx.arc(x, y, radius, 0, 2 * Math.PI);
                            ctx.fill();
                            ctx.stroke();
                            clickMap.current.insert({
                                minX: x - radius,
                                maxX: x - radius + d,
                                minY: y - radius,
                                maxY: y - radius + d,
                                branch: true,
                                id: id,
                                name: name,
                            });
                        }
                    });
                }
            }
            if (rowHeight >= 10) {
                if (labelsAlignRight) {
                    ctx.textAlign = 'right';
                    ctx.setLineDash([1, 3]);
                }
                else {
                    ctx.textAlign = 'start';
                }
                hierarchy.leaves().forEach(function (node) {
                    var 
                    //@ts-ignore
                    y = node.x, 
                    //@ts-ignore
                    x = node.y, _a = node.data, name = _a.name, id = _a.id, 
                    //@ts-ignore
                    len = node.len;
                    if (y > offsetY - extendBounds &&
                        y < offsetY + blockSize + extendBounds) {
                        //note: +rowHeight/4 matches with -rowHeight/4 in msa
                        var yp = y + rowHeight / 4;
                        var xp = showBranchLen ? len : x;
                        var width = ctx.measureText(name).width;
                        var height = ctx.measureText('M').width; // use an 'em' for height
                        var hasStructure = structures[name];
                        ctx.fillStyle = hasStructure ? 'blue' : 'black';
                        if (!drawTree && !labelsAlignRight) {
                            ctx.fillText(name, 0, yp);
                            clickMap.current.insert({
                                minX: 0,
                                maxX: width,
                                minY: yp - height,
                                maxY: yp,
                                name: name,
                                id: id,
                            });
                        }
                        else if (labelsAlignRight) {
                            var smallPadding = 2;
                            var offset = treeAreaWidth - smallPadding - margin.left;
                            if (drawTree && !noTree) {
                                var width_1 = ctx.measureText(name).width;
                                ctx.moveTo(xp + radius + 2, y);
                                ctx.lineTo(offset - smallPadding - width_1, y);
                                ctx.stroke();
                            }
                            ctx.fillText(name, offset, yp);
                            clickMap.current.insert({
                                minX: treeAreaWidth - margin.left - width,
                                maxX: treeAreaWidth - margin.left,
                                minY: yp - height,
                                maxY: yp,
                                name: name,
                                id: id,
                            });
                        }
                        else {
                            ctx.fillText(name, xp + d, yp);
                            clickMap.current.insert({
                                minX: xp + d,
                                maxX: xp + d + width,
                                minY: yp - height,
                                maxY: yp,
                                name: name,
                                id: id,
                            });
                        }
                    }
                });
                ctx.setLineDash([]);
            }
        }, [
            collapsed,
            rowHeight,
            margin.left,
            hierarchy,
            offsetY,
            treeWidth,
            showBranchLen,
            noTree,
            blockSize,
            drawNodeBubbles,
            drawTree,
            labelsAlignRight,
            treeAreaWidth,
            structures,
            highResScaleFactor,
        ]);
        React$i.useEffect(function () {
            var canvas = mouseoverRef.current;
            if (!canvas) {
                return;
            }
            var ctx = canvas.getContext('2d');
            if (!ctx) {
                return;
            }
            ctx.resetTransform();
            ctx.clearRect(0, 0, treeWidth + padding, blockSize);
            ctx.translate(margin.left, -offsetY);
            if (hoverElt) {
                var minX = hoverElt.minX, maxX = hoverElt.maxX, minY = hoverElt.minY, maxY = hoverElt.maxY;
                ctx.fillStyle = 'rgba(0,0,0,0.1)';
                ctx.fillRect(minX, minY, maxX - minX, maxY - minY);
            }
        }, [hoverElt, margin.left, offsetY, blockSize, treeWidth]);
        function hoverBranchClickMap(event) {
            var x = event.nativeEvent.offsetX - margin.left;
            var y = event.nativeEvent.offsetY;
            var entry = clickMap.current.search({
                minX: x,
                maxX: x + 1,
                minY: y + offsetY,
                maxY: y + 1 + offsetY,
            })[0];
            return entry && entry.branch
                ? __assign$3(__assign$3({}, entry), { x: event.clientX, y: event.clientY }) : undefined;
        }
        function hoverNameClickMap(event) {
            var x = event.nativeEvent.offsetX - margin.left;
            var y = event.nativeEvent.offsetY;
            var entry = clickMap.current.search({
                minX: x,
                maxX: x + 1,
                minY: y + offsetY,
                maxY: y + 1 + offsetY,
            })[0];
            return entry && !entry.branch
                ? __assign$3(__assign$3({}, entry), { x: event.clientX, y: event.clientY }) : undefined;
        }
        return (React__default["default"].createElement(React__default["default"].Fragment, null,
            (branchMenu === null || branchMenu === void 0 ? void 0 : branchMenu.id) ? (React__default["default"].createElement(TreeBranchMenu, { node: branchMenu, model: model, onClose: function () { return setBranchMenu(undefined); } })) : null,
            (toggleNodeMenu === null || toggleNodeMenu === void 0 ? void 0 : toggleNodeMenu.id) ? (React__default["default"].createElement(TreeMenu, { node: toggleNodeMenu, model: model, onClose: function () { return setToggleNodeMenu(undefined); } })) : null,
            React__default["default"].createElement("canvas", { width: (treeWidth + padding) * highResScaleFactor, height: blockSize * highResScaleFactor, style: {
                    width: treeWidth + padding,
                    height: blockSize,
                    top: scrollY + offsetY,
                    left: 0,
                    position: 'absolute',
                }, onMouseMove: function (event) {
                    if (!ref.current) {
                        return;
                    }
                    var ret = hoverNameClickMap(event) || hoverBranchClickMap(event);
                    if (ret) {
                        ref.current.style.cursor = 'pointer';
                    }
                    else {
                        ref.current.style.cursor = 'default';
                    }
                    setHoverElt(hoverNameClickMap(event));
                }, onClick: function (event) {
                    var x = event.clientX, y = event.clientY;
                    var data = hoverBranchClickMap(event);
                    if (data === null || data === void 0 ? void 0 : data.id) {
                        setBranchMenu(__assign$3(__assign$3({}, data), { x: x, y: y }));
                    }
                    var data2 = hoverNameClickMap(event);
                    if (data2 === null || data2 === void 0 ? void 0 : data2.id) {
                        setToggleNodeMenu(__assign$3(__assign$3({}, data2), { x: x, y: y }));
                    }
                }, ref: ref }),
            React__default["default"].createElement("canvas", { style: {
                    width: treeWidth + padding,
                    height: blockSize,
                    top: scrollY + offsetY,
                    left: 0,
                    position: 'absolute',
                    pointerEvents: 'none',
                    zIndex: 100,
                }, width: treeWidth + padding, height: blockSize, ref: mouseoverRef })));
    });
    var TreeCanvas = observer(function (_a) {
        var model = _a.model;
        var ref = React$i.useRef(null);
        var scheduled = React$i.useRef(false);
        var deltaY = React$i.useRef(0);
        var prevY = React$i.useRef(0);
        var treeWidth = model.treeWidth, height = model.height, blocksY = model.blocksY;
        var _b = React$i.useState(false), mouseDragging = _b[0], setMouseDragging = _b[1];
        React$i.useEffect(function () {
            var curr = ref.current;
            if (!curr) {
                return;
            }
            function onWheel(origEvent) {
                var event = normalizeWheel(origEvent);
                deltaY.current += event.pixelY;
                if (!scheduled.current) {
                    scheduled.current = true;
                    requestAnimationFrame(function () {
                        model.doScrollY(-deltaY.current);
                        deltaY.current = 0;
                        scheduled.current = false;
                    });
                }
                origEvent.preventDefault();
            }
            curr.addEventListener('wheel', onWheel);
            return function () {
                curr.removeEventListener('wheel', onWheel);
            };
        }, [model]);
        React$i.useEffect(function () {
            var cleanup = function () { };
            function globalMouseMove(event) {
                event.preventDefault();
                var currY = event.clientY;
                var distanceY = currY - prevY.current;
                if (distanceY) {
                    // use rAF to make it so multiple event handlers aren't fired per-frame
                    // see https://calendar.perfplanet.com/2013/the-runtime-performance-checklist/
                    if (!scheduled.current) {
                        scheduled.current = true;
                        window.requestAnimationFrame(function () {
                            model.doScrollY(distanceY);
                            scheduled.current = false;
                            prevY.current = event.clientY;
                        });
                    }
                }
            }
            function globalMouseUp() {
                prevY.current = 0;
                if (mouseDragging) {
                    setMouseDragging(false);
                }
            }
            if (mouseDragging) {
                window.addEventListener('mousemove', globalMouseMove, true);
                window.addEventListener('mouseup', globalMouseUp, true);
                cleanup = function () {
                    window.removeEventListener('mousemove', globalMouseMove, true);
                    window.removeEventListener('mouseup', globalMouseUp, true);
                };
            }
            return cleanup;
        }, [model, mouseDragging]);
        function mouseDown(event) {
            // check if clicking a draggable element or a resize handle
            var target = event.target;
            if (target.draggable || target.dataset.resizer) {
                return;
            }
            // otherwise do click and drag scroll
            if (event.button === 0) {
                prevY.current = event.clientY;
                setMouseDragging(true);
            }
        }
        // this local mouseup is used in addition to the global because sometimes
        // the global add/remove are not called in time, resulting in issue #533
        function mouseUp(event) {
            event.preventDefault();
            setMouseDragging(false);
        }
        function mouseLeave(event) {
            event.preventDefault();
        }
        return (React__default["default"].createElement("div", { ref: ref, onMouseDown: mouseDown, onMouseUp: mouseUp, onMouseLeave: mouseLeave, style: {
                height: height,
                position: 'relative',
                overflow: 'hidden',
                width: treeWidth + padding,
            } }, blocksY.map(function (block) { return (React__default["default"].createElement(TreeBlock, { key: block, model: model, offsetY: block })); })));
    });

    var __assign$2 = (undefined && undefined.__assign) || function () {
        __assign$2 = Object.assign || function(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
            }
            return t;
        };
        return __assign$2.apply(this, arguments);
    };
    function transform(obj, cb) {
        return Object.fromEntries(Object.entries(obj).map(cb));
    }
    function generateNodeIds(tree, parent, depth) {
        var _a;
        if (parent === void 0) { parent = 'node'; }
        if (depth === void 0) { depth = 0; }
        var id = "".concat(parent, "-").concat(depth);
        return __assign$2(__assign$2({}, tree), { id: id, branchset: ((_a = tree.branchset) === null || _a === void 0 ? void 0 : _a.map(function (b, i) {
                return generateNodeIds(b, "".concat(id, "-").concat(i), depth + 1);
            })) || [] });
    }
    function colorContrast(colorScheme, theme) {
        return transform(colorScheme, function (_a) {
            var letter = _a[0], color$1 = _a[1];
            return [
                letter,
                theme.palette.getContrastText(color(color$1).hex()),
            ];
        });
    }

    var colorSchemes = {
        clustal: {
            G: 'orange',
            P: 'orange',
            S: 'orange',
            T: 'orange',
            H: 'red',
            K: 'red',
            R: 'red',
            F: 'blue',
            W: 'blue',
            Y: 'blue',
            I: 'green',
            L: 'green',
            M: 'green',
            V: 'green',
        },
        lesk: {
            G: 'orange',
            A: 'orange',
            S: 'orange',
            T: 'orange',
            C: 'green',
            V: 'green',
            I: 'green',
            L: 'green',
            P: 'green',
            F: 'green',
            Y: 'green',
            M: 'green',
            W: 'green',
            N: 'magenta',
            Q: 'magenta',
            H: 'magenta',
            D: 'red',
            E: 'red',
            K: 'blue',
            R: 'blue',
        },
        maeditor: {
            A: 'lightgreen',
            G: 'lightgreen',
            C: 'green',
            D: 'darkgreen',
            E: 'darkgreen',
            N: 'darkgreen',
            Q: 'darkgreen',
            I: 'blue',
            L: 'blue',
            M: 'blue',
            V: 'blue',
            F: '#c8a2c8',
            W: '#c8a2c8',
            Y: '#c8a2c8',
            H: 'darkblue',
            K: 'orange',
            R: 'orange',
            P: 'pink',
            S: 'red',
            T: 'red',
        },
        percent_identity_dynamic: {},
        //https://github.com/biotite-dev/biotite/blob/8c460972f8ab904312f130dfb80f3efc8c9bd7c5/src/biotite/sequence/graphics/color_schemes/flower.json
        flower: {
            A: '#b18a51',
            C: '#ff5701',
            D: '#01a578',
            E: '#2da0a1',
            F: '#fa559d',
            G: '#b1c23c',
            H: '#0194f9',
            I: '#f27663',
            K: '#7fc3d7',
            L: '#df6e75',
            M: '#fe9daf',
            N: '#0bcec6',
            P: '#4fa32a',
            Q: '#7295ae',
            R: '#83bff1',
            S: '#b4bd9b',
            T: '#d2b576',
            V: '#fd997b',
            W: '#ff2ded',
            Y: '#c96ecf',
        },
        rainbow_dna: {
            A: '#3737f5',
            C: '#37f537',
            G: '#f5f537',
            T: '#f53737',
            U: '#f53737',
        },
        //https://github.com/biotite-dev/biotite/blob/8c460972f8ab904312f130dfb80f3efc8c9bd7c5/src/biotite/sequence/graphics/color_schemes/clustalx_protein.json
        clustalx_protein: {
            A: '#197fe5',
            C: '#e57f7f',
            D: '#cc4ccc',
            E: '#cc4ccc',
            F: '#197fe5',
            G: '#e5994c',
            H: '#19b2b2',
            I: '#197fe5',
            K: '#e53319',
            L: '#197fe5',
            M: '#197fe5',
            N: '#19cc19',
            P: '#cccc00',
            Q: '#19cc19',
            R: '#e53319',
            S: '#19cc19',
            T: '#19cc19',
            V: '#197fe5',
            W: '#197fe5',
            Y: '#19b2b2',
        },
        // this has special handling
        clustalx_protein_dynamic: {},
        clustalx_dna: {
            A: '#e53319',
            C: '#197fe5',
            G: '#e5994c',
            T: '#19cc19',
            U: '#19cc19',
        },
        jalview_buried: {
            A: '#00a35c',
            R: '#00fc03',
            N: '#00eb14',
            D: '#00eb14',
            C: '#0000ff',
            Q: '#00f10e',
            E: '#00f10e',
            G: '#009d62',
            H: '#00d52a',
            I: '#0054ab',
            L: '#007b84',
            K: '#00ff00',
            M: '#009768',
            F: '#008778',
            P: '#00e01f',
            S: '#00d52a',
            T: '#00db24',
            W: '#00a857',
            Y: '#00e619',
            V: '#005fa0',
            B: '#00eb14',
            X: '#00b649',
            Z: '#00f10e',
        },
        jalview_hydrophobicity: {
            A: '#ad0052',
            R: '#0000ff',
            N: '#0c00f3',
            D: '#0c00f3',
            C: '#c2003d',
            Q: '#0c00f3',
            E: '#0c00f3',
            G: '#6a0095',
            H: '#1500ea',
            I: '#ff0000',
            L: '#ea0015',
            K: '#0000ff',
            M: '#b0004f',
            F: '#cb0034',
            P: '#4600b9',
            S: '#5e00a1',
            T: '#61009e',
            W: '#5b00a4',
            Y: '#4f00b0',
            V: '#f60009',
            B: '#0c00f3',
            X: '#680097',
            Z: '#0c00f3',
        },
        jalview_prophelix: {
            A: '#e718e7',
            R: '#6f906f',
            N: '#1be41b',
            D: '#778877',
            C: '#23dc23',
            Q: '#926d92',
            E: '#ff00ff',
            G: '#00ff00',
            H: '#758a75',
            I: '#8a758a',
            L: '#ae51ae',
            K: '#a05fa0',
            M: '#ef10ef',
            F: '#986798',
            P: '#00ff00',
            S: '#36c936',
            T: '#47b847',
            W: '#8a758a',
            Y: '#21de21',
            V: '#857a85',
            B: '#49b649',
            X: '#758a75',
            Z: '#c936c9',
        },
        jalview_propstrand: {
            A: '#5858a7',
            R: '#6b6b94',
            N: '#64649b',
            D: '#2121de',
            C: '#9d9d62',
            Q: '#8c8c73',
            E: '#0000ff',
            G: '#4949b6',
            H: '#60609f',
            I: '#ecec13',
            L: '#b2b24d',
            K: '#4747b8',
            M: '#82827d',
            F: '#c2c23d',
            P: '#2323dc',
            S: '#4949b6',
            T: '#9d9d62',
            W: '#c0c03f',
            Y: '#d3d32c',
            V: '#ffff00',
            B: '#4343bc',
            X: '#797986',
            Z: '#4747b8',
        },
        jalview_propturn: {
            A: '#2cd3d3',
            R: '#708f8f',
            N: '#ff0000',
            D: '#e81717',
            C: '#a85757',
            Q: '#3fc0c0',
            E: '#778888',
            G: '#ff0000',
            H: '#708f8f',
            I: '#00ffff',
            L: '#1ce3e3',
            K: '#7e8181',
            M: '#1ee1e1',
            F: '#1ee1e1',
            P: '#f60909',
            S: '#e11e1e',
            T: '#738c8c',
            W: '#738c8c',
            Y: '#9d6262',
            V: '#07f8f8',
            B: '#f30c0c',
            X: '#7c8383',
            Z: '#5ba4a4',
        },
        jalview_taylor: {
            A: '#ccff00',
            R: '#0000ff',
            N: '#cc00ff',
            D: '#ff0000',
            C: '#ffff00',
            Q: '#ff00cc',
            E: '#ff0066',
            G: '#ff9900',
            H: '#0066ff',
            I: '#66ff00',
            L: '#33ff00',
            K: '#6600ff',
            M: '#00ff00',
            F: '#00ff66',
            P: '#ffcc00',
            S: '#ff3300',
            T: '#ff6600',
            W: '#00ccff',
            Y: '#00ffcc',
            V: '#99ff00',
        },
        jalview_zappo: {
            A: '#ffafaf',
            R: '#6464ff',
            N: '#00ff00',
            D: '#ff0000',
            C: '#ffff00',
            Q: '#00ff00',
            E: '#ff0000',
            G: '#ff00ff',
            H: '#6464ff',
            I: '#ffafaf',
            L: '#ffafaf',
            K: '#6464ff',
            M: '#ffafaf',
            F: '#ffc800',
            P: '#ff00ff',
            S: '#00ff00',
            T: '#00ff00',
            W: '#ffc800',
            Y: '#ffc800',
            V: '#ffafaf',
        },
        cinema: {
            H: 'blue',
            K: 'blue',
            R: 'blue',
            D: 'red',
            E: 'red',
            S: 'green',
            T: 'green',
            N: 'green',
            Q: 'green',
            A: 'white',
            V: 'white',
            L: 'white',
            I: 'white',
            M: 'white',
            F: 'magenta',
            W: 'magenta',
            Y: 'magenta',
            P: 'brown',
            G: 'brown',
            C: 'yellow',
            B: 'gray',
            Z: 'gray',
            X: 'gray',
            '-': 'gray',
            '.': 'gray',
        },
    };
    // turn all supplied colors to hex colors which getContrastText from mui
    // requires
    var colorSchemes$1 = transform(colorSchemes, function (_a) {
        var key = _a[0], val = _a[1];
        return [
            key,
            transform(val, function (_a) {
                var letter = _a[0], color$1 = _a[1];
                return [letter, color(color$1).hex()];
            }),
        ];
    });
    // info http://www.jalview.org/help/html/colourSchemes/clustal.html
    // modifications:
    // reference to clustalX source code scheme modifies what the jalview.org
    // scheme says there the jalview.org colorscheme says WLVIMAFCHP but it
    // should be WLVIMAFCHPY, colprot.xml says e.g. %#ACFHILMVWYPp" which has Y
    function getClustalXColor(stats, model, row, col) {
        var total = Object.values(stats).reduce(function (a, b) { return a + b; }, 0);
        var l = model.columns[row][col];
        var _a = stats.W, W = _a === void 0 ? 0 : _a, _b = stats.L, L = _b === void 0 ? 0 : _b, _c = stats.V, V = _c === void 0 ? 0 : _c, _d = stats.I, I = _d === void 0 ? 0 : _d, _e = stats.M, M = _e === void 0 ? 0 : _e, _f = stats.A, A = _f === void 0 ? 0 : _f, _g = stats.F, F = _g === void 0 ? 0 : _g, _h = stats.C, C = _h === void 0 ? 0 : _h, _j = stats.H, H = _j === void 0 ? 0 : _j, _k = stats.P, P = _k === void 0 ? 0 : _k, _l = stats.R, R = _l === void 0 ? 0 : _l, _m = stats.K, K = _m === void 0 ? 0 : _m, _o = stats.Q, Q = _o === void 0 ? 0 : _o, _p = stats.E, E = _p === void 0 ? 0 : _p, _q = stats.D, D = _q === void 0 ? 0 : _q, _r = stats.T, T = _r === void 0 ? 0 : _r, _s = stats.S, S = _s === void 0 ? 0 : _s, _t = stats.G, G = _t === void 0 ? 0 : _t, _u = stats.Y, Y = _u === void 0 ? 0 : _u, _v = stats.N, N = _v === void 0 ? 0 : _v;
        var WLVIMAFCHP = W + L + V + I + M + A + F + C + H + P + Y;
        var KR = K + R;
        var QE = Q + E;
        var ED = E + D;
        var TS = T + S;
        if (WLVIMAFCHP / total > 0.6) {
            if (l === 'W' ||
                l === 'L' ||
                l === 'V' ||
                l === 'A' ||
                l === 'I' ||
                l === 'M' ||
                l === 'F' ||
                l === 'C') {
                // blue from jalview.org docs
                return 'rgb(128,179,230)';
            }
        }
        if ((l === 'K' || l === 'R') &&
            (KR / total > 0.6 || K / total > 0.8 || R / total > 0.8 || Q / total > 0.8)) {
            return '#d88';
        }
        if (l === 'E' &&
            (KR / total > 0.6 ||
                QE / total > 0.5 ||
                E / total > 0.8 ||
                Q / total > 0.8 ||
                D / total > 0.8)) {
            return 'rgb(192, 72, 192)';
        }
        if (l === 'D' &&
            (KR / total > 0.6 ||
                ED / total > 0.5 ||
                K / total > 0.8 ||
                R / total > 0.8 ||
                Q / total > 0.8)) {
            return 'rgb(204, 77, 204)';
        }
        if (l === 'N' && (N / total > 0.5 || Y / total > 0.85)) {
            return '#8f8';
        }
        if (l === 'Q' &&
            (KR / total > 0.6 ||
                QE / total > 0.6 ||
                Q / total > 0.85 ||
                E / total > 0.85 ||
                K / total > 0.85 ||
                R / total > 0.85)) {
            return '#8f8';
        }
        if ((l === 'S' || l === 'T') &&
            // WLVIMAFCHP modified from 0.6 to 0.55 on page to match what i see in jalview
            (WLVIMAFCHP / total > 0.6 ||
                TS / total > 0.5 ||
                S / total > 0.85 ||
                T / total > 0.85)) {
            return 'rgb(26,204,26)';
        }
        if (l === 'C' && C / total > 0.85) {
            return 'rgb(240, 128, 128)';
        }
        if (l === 'G' && G / total > 0) {
            return 'rgb(240, 144, 72)';
        }
        if (l === 'P' && P / total > 0) {
            return 'rgb(204, 204, 0)';
        }
        if ((l === 'H' || l === 'Y') &&
            (WLVIMAFCHP / total > 0.6 ||
                W > 0.85 ||
                Y > 0.85 ||
                A > 0.85 ||
                C > 0.85 ||
                P > 0.85 ||
                Q > 0.85 ||
                F > 0.85 ||
                H > 0.85 ||
                I > 0.85 ||
                L > 0.85 ||
                M > 0.85 ||
                V > 0.85)) {
            // cyan from jalview.org docs
            return 'rgb(26, 179, 179)';
        }
        return undefined;
    }
    // info http://www.jalview.org/help/html/colourSchemes/clustal.html
    // modifications:
    // reference to clustalX source code scheme modifies what the jalview.org
    // scheme says there the jalview.org colorscheme says WLVIMAFCHP but it
    // should be WLVIMAFCHPY, colprot.xml says e.g. %#ACFHILMVWYPp" which has Y
    function getPercentIdentityColor(stats, model, row, col) {
        var total = Object.values(stats).reduce(function (a, b) { return a + b; }, 0);
        var l = model.columns[row][col];
        var entries = Object.entries(stats);
        var ent = 0;
        var letter = '';
        for (var i = 0; i < entries.length; i++) {
            if (entries[i][1] > ent && entries[i][0] !== '-') {
                letter = entries[i][0];
                ent = entries[i][1];
            }
        }
        var proportion = ent / total;
        var thresh = "hsl(240, 30%, ".concat(100 * Math.max(1 - ent / total / 3, 0.3), "%)");
        if (proportion > 0.4) {
            if (l === letter) {
                return thresh;
            }
        }
    }

    var MSABlock = observer(function (_a) {
        var model = _a.model, offsetX = _a.offsetX, offsetY = _a.offsetY;
        var MSA = model.MSA, colWidth = model.colWidth, bgColor = model.bgColor, columns = model.columns, rowHeight = model.rowHeight, scrollY = model.scrollY, scrollX = model.scrollX, hierarchy = model.hierarchy, colorScheme = model.colorScheme, colorSchemeName = model.colorSchemeName, blockSize = model.blockSize, highResScaleFactor = model.highResScaleFactor, colStats = model.colStats;
        var theme = useTheme();
        var contrastScheme = React$i.useMemo(function () { return colorContrast(colorScheme, theme); }, [colorScheme, theme]);
        var ref = React$i.useRef(null);
        React$i.useEffect(function () {
            if (!ref.current) {
                return;
            }
            var ctx = ref.current.getContext('2d');
            if (!ctx) {
                return;
            }
            ctx.resetTransform();
            ctx.scale(highResScaleFactor, highResScaleFactor);
            ctx.clearRect(0, 0, blockSize, blockSize);
            ctx.translate(-offsetX, rowHeight / 2 - offsetY);
            ctx.textAlign = 'center';
            ctx.font = ctx.font.replace(/\d+px/, "".concat(Math.max(8, rowHeight - 8), "px"));
            var leaves = hierarchy.leaves();
            var b = blockSize;
            // slice vertical rows, e.g. tree leaves, avoid negative slice
            var yStart = Math.max(0, Math.floor((offsetY - rowHeight) / rowHeight));
            var yEnd = Math.max(0, Math.ceil((offsetY + b + rowHeight) / rowHeight));
            // slice horizontal visible letters, avoid negative slice
            var xStart = Math.max(0, Math.floor(offsetX / colWidth));
            var xEnd = Math.max(0, Math.ceil((offsetX + b) / colWidth));
            var visibleLeaves = leaves.slice(yStart, yEnd);
            visibleLeaves.forEach(function (node) {
                var _a;
                var 
                //@ts-ignore
                y = node.x, name = node.data.name;
                var str = (_a = columns[name]) === null || _a === void 0 ? void 0 : _a.slice(xStart, xEnd);
                for (var i = 0; i < (str === null || str === void 0 ? void 0 : str.length); i++) {
                    var letter = str[i];
                    var color = colorSchemeName === 'clustalx_protein_dynamic'
                        ? getClustalXColor(colStats[xStart + i], model, name, xStart + i)
                        : colorSchemeName === 'percent_identity_dynamic'
                            ? getPercentIdentityColor(colStats[xStart + i], model, name, xStart + i)
                            : colorScheme[letter.toUpperCase()];
                    if (bgColor) {
                        var x = i * colWidth + offsetX - (offsetX % colWidth);
                        ctx.fillStyle = color || 'white';
                        ctx.fillRect(x, y - rowHeight, colWidth, rowHeight);
                    }
                }
            });
            if (rowHeight >= 10 && colWidth >= rowHeight / 2) {
                visibleLeaves.forEach(function (node) {
                    var _a;
                    var 
                    //@ts-ignore
                    y = node.x, name = node.data.name;
                    var str = (_a = columns[name]) === null || _a === void 0 ? void 0 : _a.slice(xStart, xEnd);
                    for (var i = 0; i < (str === null || str === void 0 ? void 0 : str.length); i++) {
                        var letter = str[i];
                        var color = colorScheme[letter.toUpperCase()];
                        var contrast = contrastScheme[letter.toUpperCase()] || 'black';
                        var x = i * colWidth + offsetX - (offsetX % colWidth);
                        //note: -rowHeight/4 matches +rowHeight/4 in tree
                        ctx.fillStyle = bgColor ? contrast : color || 'black';
                        ctx.fillText(letter, x + colWidth / 2, y - rowHeight / 4);
                    }
                });
            }
        }, [
            MSA,
            highResScaleFactor,
            columns,
            colorScheme,
            contrastScheme,
            bgColor,
            rowHeight,
            colWidth,
            hierarchy,
            offsetX,
            offsetY,
            blockSize,
        ]);
        return (React__default["default"].createElement("canvas", { ref: ref, onMouseMove: function (event) {
                if (!ref.current) {
                    return;
                }
                var _a = ref.current.getBoundingClientRect(), left = _a.left, top = _a.top;
                var mouseX = event.clientX - left;
                var mouseY = event.clientY - top;
                model.setMousePos(Math.floor((mouseX + offsetX) / colWidth) + 1, Math.floor((mouseY + offsetY) / rowHeight));
            }, onMouseLeave: function () { return model.setMousePos(); }, width: blockSize * highResScaleFactor, height: blockSize * highResScaleFactor, style: {
                position: 'absolute',
                top: scrollY + offsetY,
                left: scrollX + offsetX,
                width: blockSize,
                height: blockSize,
            } }));
    });
    var MSACanvas = observer(function (_a) {
        var model = _a.model;
        var MSA = model.MSA, msaFilehandle = model.msaFilehandle, height = model.height, msaAreaWidth = model.msaAreaWidth, blocks2d = model.blocks2d;
        var ref = React$i.useRef(null);
        // wheel
        var scheduled = React$i.useRef(false);
        var deltaX = React$i.useRef(0);
        var deltaY = React$i.useRef(0);
        // mouse click-and-drag scrolling
        var prevX = React$i.useRef(0);
        var prevY = React$i.useRef(0);
        var _b = React$i.useState(false), mouseDragging = _b[0], setMouseDragging = _b[1];
        React$i.useEffect(function () {
            var curr = ref.current;
            if (!curr) {
                return;
            }
            function onWheel(origEvent) {
                var event = normalizeWheel(origEvent);
                deltaX.current += event.pixelX;
                deltaY.current += event.pixelY;
                if (!scheduled.current) {
                    scheduled.current = true;
                    requestAnimationFrame(function () {
                        model.doScrollX(-deltaX.current);
                        model.doScrollY(-deltaY.current);
                        deltaX.current = 0;
                        deltaY.current = 0;
                        scheduled.current = false;
                    });
                }
                origEvent.preventDefault();
            }
            curr.addEventListener('wheel', onWheel);
            return function () {
                curr.removeEventListener('wheel', onWheel);
            };
        }, [model]);
        React$i.useEffect(function () {
            var cleanup = function () { };
            function globalMouseMove(event) {
                event.preventDefault();
                var currX = event.clientX;
                var currY = event.clientY;
                var distanceX = currX - prevX.current;
                var distanceY = currY - prevY.current;
                if (distanceX || distanceY) {
                    // use rAF to make it so multiple event handlers aren't fired per-frame
                    // see https://calendar.perfplanet.com/2013/the-runtime-performance-checklist/
                    if (!scheduled.current) {
                        scheduled.current = true;
                        window.requestAnimationFrame(function () {
                            model.doScrollX(distanceX);
                            model.doScrollY(distanceY);
                            scheduled.current = false;
                            prevX.current = event.clientX;
                            prevY.current = event.clientY;
                        });
                    }
                }
            }
            function globalMouseUp() {
                prevX.current = 0;
                if (mouseDragging) {
                    setMouseDragging(false);
                }
            }
            if (mouseDragging) {
                window.addEventListener('mousemove', globalMouseMove, true);
                window.addEventListener('mouseup', globalMouseUp, true);
                cleanup = function () {
                    window.removeEventListener('mousemove', globalMouseMove, true);
                    window.removeEventListener('mouseup', globalMouseUp, true);
                };
            }
            return cleanup;
        }, [model, mouseDragging]);
        return (React__default["default"].createElement("div", { ref: ref, onMouseDown: function (event) {
                // check if clicking a draggable element or a resize handle
                var target = event.target;
                if (target.draggable || target.dataset.resizer) {
                    return;
                }
                // otherwise do click and drag scroll
                if (event.button === 0) {
                    prevX.current = event.clientX;
                    prevY.current = event.clientY;
                    setMouseDragging(true);
                }
            }, onMouseUp: function (event) {
                event.preventDefault();
                setMouseDragging(false);
            }, onMouseLeave: function (event) {
                event.preventDefault();
            }, style: {
                position: 'relative',
                height: height,
                width: msaAreaWidth,
                overflow: 'hidden',
            } }, !MSA && !msaFilehandle ? null : !MSA ? (React__default["default"].createElement("div", { style: { position: 'absolute', left: '50%', top: '50%' } },
            React__default["default"].createElement(CircularProgress$1, null),
            React__default["default"].createElement(Typography$2, null, "Loading..."))) : (blocks2d.map(function (_a) {
            var bx = _a[0], by = _a[1];
            return (React__default["default"].createElement(MSABlock, { key: "".concat(bx, "_").concat(by), model: model, offsetX: bx, offsetY: by }));
        }))));
    });

    /**
     * Given a scale ( bp/px ) and minimum distances (px) between major and minor
     * gridlines, return an object like `{ majorPitch: bp, minorPitch: bp }` giving
     * the gridline pitches to use.
     */
    function chooseGridPitch(scale, minMajorPitchPx, minMinorPitchPx) {
        scale = Math.abs(scale);
        var minMajorPitchBp = minMajorPitchPx * scale;
        var majorMagnitude = parseInt(Number(minMajorPitchBp).toExponential().split(/e/i)[1], 10);
        var majorPitch = Math.pow(10, majorMagnitude);
        while (majorPitch < minMajorPitchBp) {
            majorPitch *= 2;
            if (majorPitch >= minMajorPitchBp) {
                break;
            }
            majorPitch *= 2.5;
        }
        majorPitch = Math.max(majorPitch, 5);
        var majorPitchPx = majorPitch / scale;
        var minorPitch = 0;
        if (!(majorPitch % 10) && majorPitchPx / 10 >= minMinorPitchPx) {
            minorPitch = majorPitch / 10;
        }
        else if (!(majorPitch % 5) && majorPitchPx / 5 >= minMinorPitchPx) {
            minorPitch = majorPitch / 5;
        }
        else if (!(majorPitch % 2) && majorPitchPx / 2 >= minMinorPitchPx) {
            minorPitch = majorPitch / 2;
        }
        return { majorPitch: majorPitch, minorPitch: minorPitch };
    }
    function makeTicks(start, end, bpPerPx, emitMajor, emitMinor) {
        var _a;
        if (emitMajor === void 0) { emitMajor = true; }
        if (emitMinor === void 0) { emitMinor = true; }
        var gridPitch = chooseGridPitch(bpPerPx, 60, 15);
        var minBase = start;
        var maxBase = end;
        if (minBase === null || maxBase === null) {
            return [];
        }
        if (bpPerPx < 0) {
            _a = [maxBase, minBase], minBase = _a[0], maxBase = _a[1];
        }
        // add 20px additional on the right and left to allow us to draw the ends of
        // labels that lie a little outside our region
        minBase -= Math.abs(20 * bpPerPx);
        maxBase += Math.abs(20 * bpPerPx) + 1;
        var iterPitch = gridPitch.minorPitch || gridPitch.majorPitch;
        var index = 0;
        var ticks = [];
        for (var base = Math.ceil(minBase / iterPitch) * iterPitch; base < maxBase; base += iterPitch) {
            if (emitMinor && base % (gridPitch.majorPitch * 2)) {
                ticks.push({ type: 'minor', base: base - 1, index: index });
                index += 1;
            }
            else if (emitMajor && !(base % (gridPitch.majorPitch * 2))) {
                ticks.push({ type: 'major', base: base - 1, index: index });
                index += 1;
            }
        }
        return ticks;
    }
    function mathPower(num) {
        if (num < 999) {
            return String(num);
        }
        return "".concat(mathPower(~~(num / 1000)), ",").concat("00".concat(~~(num % 1000)).substr(-3, 3));
    }
    var useStyles$2 = makeStyles(function ( /* theme */) { return ({
        majorTickLabel: {
            fontSize: '11px',
        },
        majorTick: {
            stroke: '#555',
        },
        minorTick: {
            stroke: '#999',
        },
    }); });
    function RulerBlock(_a) {
        var start = _a.start, end = _a.end, bpPerPx = _a.bpPerPx, reversed = _a.reversed, major = _a.major, minor = _a.minor;
        var classes = useStyles$2();
        var ticks = makeTicks(start, end, bpPerPx, major, minor);
        return (React__default["default"].createElement(React__default["default"].Fragment, null,
            ticks.map(function (tick) {
                var x = (reversed ? end - tick.base : tick.base - start) / bpPerPx;
                return (React__default["default"].createElement("line", { key: tick.base, x1: x, x2: x, y1: 11, y2: tick.type === 'major' ? 11 + 6 : 11 + 4, strokeWidth: 1, stroke: tick.type === 'major' ? '#555' : '#999', className: tick.type === 'major' ? classes.majorTick : classes.minorTick, "data-bp": tick.base }));
            }),
            ticks
                .filter(function (tick) { return tick.type === 'major'; })
                .map(function (tick) {
                var x = (reversed ? end - tick.base : tick.base - start) / bpPerPx;
                return (React__default["default"].createElement("text", { x: x, y: 10, key: "label-".concat(tick.base), textAnchor: "middle", style: { fontSize: '11px' }, className: classes.majorTickLabel }, mathPower(tick.base + 1)));
            })));
    }
    var Ruler = observer(function (_a) {
        var model = _a.model;
        var MSA = model.MSA, colWidth = model.colWidth, msaAreaWidth = model.msaAreaWidth, resizeHandleWidth = model.resizeHandleWidth, scrollX = model.scrollX, blocksX = model.blocksX, blockSize = model.blockSize;
        var ref = React$i.useRef(null);
        var offsetX = blocksX[0];
        return !MSA ? null : (React__default["default"].createElement("div", { ref: ref, style: {
                position: 'relative',
                width: msaAreaWidth,
                cursor: 'crosshair',
                overflow: 'hidden',
                height: 20,
                background: '#ccc',
            } },
            React__default["default"].createElement("svg", { style: {
                    width: blocksX.length * blockSize,
                    position: 'absolute',
                    left: scrollX + offsetX + resizeHandleWidth,
                    pointerEvents: 'none',
                } },
                React__default["default"].createElement(RulerBlock, { key: offsetX, start: offsetX / colWidth, end: offsetX / colWidth + (blockSize * blocksX.length) / colWidth, bpPerPx: 1 / colWidth }))));
    });

    var TreeRuler = observer(function (_a) {
        var model = _a.model;
        var treeWidth = model.treeWidth;
        return React__default["default"].createElement("div", { style: { width: treeWidth } });
    });

    var SettingsDialog = observer(function (_a) {
        var model = _a.model, onClose = _a.onClose, open = _a.open;
        var rowHeightInit = model.rowHeight, colWidthInit = model.colWidth, treeWidthInit = model.treeWidth, colorSchemeName = model.colorSchemeName, noTree = model.noTree;
        var _b = React$i.useState("".concat(rowHeightInit)), rowHeight = _b[0], setRowHeight = _b[1];
        var _c = React$i.useState("".concat(colWidthInit)), colWidth = _c[0], setColWidth = _c[1];
        var _d = React$i.useState("".concat(treeWidthInit)), treeWidth = _d[0], setTreeWidth = _d[1];
        function error(n) {
            return Number.isNaN(+n) || +n < 0;
        }
        var rowHeightError = error(rowHeight);
        var colWidthError = error(colWidth);
        var treeWidthError = error(treeWidth);
        return (React__default["default"].createElement(Dialog$2, { onClose: function () { return onClose(); }, open: open },
            React__default["default"].createElement(DialogTitle$2, null, "Settings"),
            React__default["default"].createElement(DialogContent$2, null,
                React__default["default"].createElement(FormControlLabel$1, { control: React__default["default"].createElement(Checkbox$1, { checked: model.showBranchLen, onChange: function () { return model.toggleBranchLen(); } }), label: "Show branch length" }),
                React__default["default"].createElement(FormControlLabel$1, { control: React__default["default"].createElement(Checkbox$1, { checked: model.bgColor, onChange: function () { return model.toggleBgColor(); } }), label: "Color background" }),
                React__default["default"].createElement(FormControlLabel$1, { control: React__default["default"].createElement(Checkbox$1, { checked: model.drawNodeBubbles, onChange: function () { return model.toggleNodeBubbles(); } }), label: "Draw node bubbles" }),
                React__default["default"].createElement(FormControlLabel$1, { control: React__default["default"].createElement(Checkbox$1, { checked: model.drawTree, onChange: function () { return model.toggleDrawTree(); } }), label: "Draw tree (if available)" }),
                React__default["default"].createElement(FormControlLabel$1, { control: React__default["default"].createElement(Checkbox$1, { checked: model.labelsAlignRight, onChange: function () { return model.toggleLabelsAlignRight(); } }), label: "Labels align right (note: labels may draw over tree, but can adjust tree width or tree area width in UI)" }),
                React__default["default"].createElement(TextField$1, { label: "Row height (px)", value: rowHeight, error: rowHeightError, onChange: function (event) { return setRowHeight(event.target.value); } }),
                React__default["default"].createElement(TextField$1, { label: "Column width (px)", value: colWidth, error: colWidthError, onChange: function (event) { return setColWidth(event.target.value); } }),
                React__default["default"].createElement("br", null),
                !noTree ? (React__default["default"].createElement(TextField$1, { label: "Tree width (px)", value: treeWidth, error: treeWidthError, onChange: function (event) { return setTreeWidth(event.target.value); } })) : null,
                React__default["default"].createElement("br", null),
                React__default["default"].createElement(TextField$1, { select: true, label: "Color scheme", value: colorSchemeName, onChange: function (event) { return model.setColorSchemeName(event.target.value); } }, Object.keys(colorSchemes$1).map(function (option) { return (React__default["default"].createElement(MenuItem$1, { key: option, value: option }, option)); })),
                React__default["default"].createElement(DialogActions$2, null,
                    React__default["default"].createElement(Button$2, { disabled: rowHeightError || colWidthError || treeWidthError, onClick: function () {
                            model.setRowHeight(+rowHeight);
                            model.setColWidth(+colWidth);
                            if (!noTree) {
                                model.setTreeWidth(+treeWidth);
                            }
                            onClose();
                        }, variant: "contained", color: "primary" }, "Submit")))));
    });

    var version = "1.3.1";

    function LicenseDialog(_a) {
        var onClose = _a.onClose, open = _a.open;
        return (React__default["default"].createElement(Dialog$2, { onClose: function () { return onClose(); }, open: open },
            React__default["default"].createElement(DialogTitle$2, null, "Biotite License"),
            React__default["default"].createElement(DialogContent$2, null,
                React__default["default"].createElement("pre", { style: { height: 100, overflow: 'auto' } }, "\nCopyright 2017 - 2020, The Biotite contributors\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\nlist of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\nthis list of conditions and the following disclaimer in the documentation and/or\nother materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors\nmay be used to endorse or promote products derived from this software without\nspecific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n        "))));
    }
    function AboutDialog(_a) {
        var onClose = _a.onClose, open = _a.open;
        var _b = React$i.useState(false), dlgOpen = _b[0], setDlgOpen = _b[1];
        return (React__default["default"].createElement(React__default["default"].Fragment, null,
            React__default["default"].createElement(LicenseDialog, { onClose: function () { return setDlgOpen(false); }, open: dlgOpen }),
            React__default["default"].createElement(Dialog$2, { onClose: function () { return onClose(); }, open: open },
                React__default["default"].createElement(DialogTitle$2, null, "About this plugin"),
                React__default["default"].createElement(DialogContent$2, null,
                    React__default["default"].createElement(Typography$2, null,
                        "MSAView ",
                        version,
                        " (",
                        React__default["default"].createElement(Link$1, { href: "https://github.com/gmod/jbrowse-plugin-msaview" }, "Github"),
                        ")"),
                    React__default["default"].createElement("ul", null,
                        React__default["default"].createElement("li", null,
                            React__default["default"].createElement(Typography$2, null,
                                "We use some color schemes from the",
                                ' ',
                                React__default["default"].createElement(Link$1, { href: "https://github.com/biotite-dev/biotite" }, "biotite"),
                                ' ',
                                "project, and their license is reproduced",
                                ' ',
                                React__default["default"].createElement(Link$1, { onClick: function () { return setDlgOpen(true); } }, "here"))),
                        React__default["default"].createElement("li", null,
                            React__default["default"].createElement(Typography$2, null,
                                "See this page for some information on jalview colorings",
                                ' ',
                                React__default["default"].createElement(Link$1, { href: "https://www.jalview.org/help/html/colourSchemes/" }, "here"))),
                        React__default["default"].createElement("li", null,
                            React__default["default"].createElement(Typography$2, null,
                                "See this page for some info on the clustal, cinema, maeditor, and lesk color schemes",
                                ' ',
                                React__default["default"].createElement(Link$1, { href: "http://www.bioinformatics.nl/~berndb/aacolour.html" }, "here"))),
                        React__default["default"].createElement("li", null,
                            React__default["default"].createElement(Typography$2, null,
                                "See this paper about the flower color scheme",
                                ' ',
                                React__default["default"].createElement(Link$1, { href: "https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7245768/" }, "here"))))))));
    }

    var DetailsDialog = observer(function (_a) {
        var model = _a.model, onClose = _a.onClose, open = _a.open;
        var alignmentDetails = model.alignmentDetails;
        return (React__default["default"].createElement(Dialog$2, { onClose: function () { return onClose(); }, open: open },
            React__default["default"].createElement(DialogTitle$2, null, "Metadata"),
            React__default["default"].createElement(DialogContent$2, null,
                React__default["default"].createElement(Attributes_1, { attributes: alignmentDetails }))));
    });

    var TracklistDialog = observer(function (_a) {
        var model = _a.model, onClose = _a.onClose, open = _a.open;
        var tracks = model.tracks;
        return (React__default["default"].createElement(Dialog$2, { onClose: function () { return onClose(); }, open: open },
            React__default["default"].createElement(DialogTitle$2, null, "Add track"),
            React__default["default"].createElement(DialogContent$2, null,
                React__default["default"].createElement(Typography$2, null, "Open relevant per-alignment tracks e.g. protein domains"),
                React__default["default"].createElement(FormGroup$1, null, tracks.map(function (track) {
                    return (React__default["default"].createElement(FormControlLabel$1, { key: track.model.id, control: React__default["default"].createElement(Checkbox$1, { checked: !model.turnedOffTracks.has(track.model.id), onChange: function () {
                                model.toggleTrack(track.model.id);
                            } }), label: track.model.name }));
                })),
                React__default["default"].createElement(DialogActions$2, null,
                    React__default["default"].createElement(Button$2, { onClick: function () { return onClose(); }, variant: "contained", color: "primary" }, "Close")))));
    });

    var FolderOpen = {};

    var _interopRequireDefault$7 = interopRequireDefault.exports;

    var _interopRequireWildcard$3 = interopRequireWildcard.exports;

    Object.defineProperty(FolderOpen, "__esModule", {
      value: true
    });
    var default_1$4 = FolderOpen.default = void 0;

    var React$3 = _interopRequireWildcard$3(React__default["default"]);

    var _createSvgIcon$3 = _interopRequireDefault$7(createSvgIcon);

    var _default$4 = (0, _createSvgIcon$3.default)( /*#__PURE__*/React$3.createElement("path", {
      d: "M20 6h-8l-2-2H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2zm0 12H4V8h16v10z"
    }), 'FolderOpen');

    default_1$4 = FolderOpen.default = _default$4;

    var Settings = {};

    var _interopRequireDefault$6 = interopRequireDefault.exports;

    var _interopRequireWildcard$2 = interopRequireWildcard.exports;

    Object.defineProperty(Settings, "__esModule", {
      value: true
    });
    var default_1$3 = Settings.default = void 0;

    var React$2 = _interopRequireWildcard$2(React__default["default"]);

    var _createSvgIcon$2 = _interopRequireDefault$6(createSvgIcon);

    var _default$3 = (0, _createSvgIcon$2.default)( /*#__PURE__*/React$2.createElement("path", {
      d: "M19.14 12.94c.04-.3.06-.61.06-.94 0-.32-.02-.64-.07-.94l2.03-1.58c.18-.14.23-.41.12-.61l-1.92-3.32c-.12-.22-.37-.29-.59-.22l-2.39.96c-.5-.38-1.03-.7-1.62-.94l-.36-2.54c-.04-.24-.24-.41-.48-.41h-3.84c-.24 0-.43.17-.47.41l-.36 2.54c-.59.24-1.13.57-1.62.94l-2.39-.96c-.22-.08-.47 0-.59.22L2.74 8.87c-.12.21-.08.47.12.61l2.03 1.58c-.05.3-.09.63-.09.94s.02.64.07.94l-2.03 1.58c-.18.14-.23.41-.12.61l1.92 3.32c.12.22.37.29.59.22l2.39-.96c.5.38 1.03.7 1.62.94l.36 2.54c.05.24.24.41.48.41h3.84c.24 0 .44-.17.47-.41l.36-2.54c.59-.24 1.13-.56 1.62-.94l2.39.96c.22.08.47 0 .59-.22l1.92-3.32c.12-.22.07-.47-.12-.61l-2.01-1.58zM12 15.6c-1.98 0-3.6-1.62-3.6-3.6s1.62-3.6 3.6-3.6 3.6 1.62 3.6 3.6-1.62 3.6-3.6 3.6z"
    }), 'Settings');

    default_1$3 = Settings.default = _default$3;

    var Help = {};

    var _interopRequireDefault$5 = interopRequireDefault.exports;

    var _interopRequireWildcard$1 = interopRequireWildcard.exports;

    Object.defineProperty(Help, "__esModule", {
      value: true
    });
    var default_1$2 = Help.default = void 0;

    var React$1 = _interopRequireWildcard$1(React__default["default"]);

    var _createSvgIcon$1 = _interopRequireDefault$5(createSvgIcon);

    var _default$2 = (0, _createSvgIcon$1.default)( /*#__PURE__*/React$1.createElement("path", {
      d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 17h-2v-2h2v2zm2.07-7.75l-.9.92C13.45 12.9 13 13.5 13 15h-2v-.5c0-1.1.45-2.1 1.17-2.83l1.24-1.26c.37-.36.59-.86.59-1.41 0-1.1-.9-2-2-2s-2 .9-2 2H8c0-2.21 1.79-4 4-4s4 1.79 4 4c0 .88-.36 1.68-.93 2.25z"
    }), 'Help');

    default_1$2 = Help.default = _default$2;

    var List = {};

    var _interopRequireDefault$4 = interopRequireDefault.exports;

    var _interopRequireWildcard = interopRequireWildcard.exports;

    Object.defineProperty(List, "__esModule", {
      value: true
    });
    var default_1$1 = List.default = void 0;

    var React = _interopRequireWildcard(React__default["default"]);

    var _createSvgIcon = _interopRequireDefault$4(createSvgIcon);

    var _default$1 = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement("path", {
      d: "M3 13h2v-2H3v2zm0 4h2v-2H3v2zm0-8h2V7H3v2zm4 4h14v-2H7v2zm0 4h14v-2H7v2zM7 7v2h14V7H7z"
    }), 'List');

    default_1$1 = List.default = _default$1;

    var InfoArea = observer(function (_a) {
        var model = _a.model;
        var mouseOverRowName = model.mouseOverRowName, mouseCol = model.mouseCol;
        return (React__default["default"].createElement("div", null,
            React__default["default"].createElement(Typography$2, { display: "inline" },
                "Row name: ",
                mouseOverRowName),
            React__default["default"].createElement("span", { style: { marginLeft: 10 } }),
            React__default["default"].createElement(Typography$2, { display: "inline" },
                "Position: ",
                mouseCol)));
    });
    var Header = observer(function (_a) {
        var model = _a.model;
        var _b = React$i.useState(false), settingsDialogVisible = _b[0], setSettingsDialogVisible = _b[1];
        var _c = React$i.useState(false), aboutDialogVisible = _c[0], setAboutDialogVisible = _c[1];
        var _d = React$i.useState(false), detailsDialogVisible = _d[0], setDetailsDialogVisible = _d[1];
        var _e = React$i.useState(false), tracklistDialogVisible = _e[0], setTracklistDialogVisible = _e[1];
        var currentAlignment = model.currentAlignment, alignmentNames = model.alignmentNames;
        return (React__default["default"].createElement("div", { style: { display: 'flex' } },
            React__default["default"].createElement(IconButton$1, { onClick: function () {
                    model.setData({ tree: '', msa: '' });
                    model.setTreeFilehandle(undefined);
                    model.setMSAFilehandle(undefined);
                    model.setScrollY(0);
                    model.setScrollX(0);
                    model.setCurrentAlignment(0);
                } },
                React__default["default"].createElement(default_1$4, null)),
            React__default["default"].createElement(IconButton$1, { onClick: function () { return setSettingsDialogVisible(true); } },
                React__default["default"].createElement(default_1$3, null)),
            React__default["default"].createElement(IconButton$1, { onClick: function () { return setDetailsDialogVisible(true); } },
                React__default["default"].createElement(default_1$5, null)),
            React__default["default"].createElement(IconButton$1, { onClick: function () { return setTracklistDialogVisible(true); } },
                React__default["default"].createElement(default_1$1, null)),
            settingsDialogVisible ? (React__default["default"].createElement(SettingsDialog, { open: true, model: model, onClose: function () { return setSettingsDialogVisible(false); } })) : null,
            aboutDialogVisible ? (React__default["default"].createElement(AboutDialog, { open: true, onClose: function () { return setAboutDialogVisible(false); } })) : null,
            detailsDialogVisible ? (React__default["default"].createElement(DetailsDialog, { open: true, model: model, onClose: function () { return setDetailsDialogVisible(false); } })) : null,
            tracklistDialogVisible ? (React__default["default"].createElement(TracklistDialog, { open: true, model: model, onClose: function () { return setTracklistDialogVisible(false); } })) : null,
            alignmentNames.length > 0 ? (React__default["default"].createElement(Select$1, { native: true, value: currentAlignment, onChange: function (event) {
                    model.setCurrentAlignment(+event.target.value);
                    model.setScrollX(0);
                    model.setScrollY(0);
                } }, alignmentNames.map(function (option, index) { return (React__default["default"].createElement("option", { key: "".concat(option, "-").concat(index), value: index }, option)); }))) : null,
            React__default["default"].createElement(InfoArea, { model: model }),
            React__default["default"].createElement("div", { style: { flex: 1 } }),
            React__default["default"].createElement(IconButton$1, { onClick: function () { return setAboutDialogVisible(true); } },
                React__default["default"].createElement(default_1$2, null))));
    });

    var useStyles$1 = makeStyles(function (theme) { return ({
        textArea: {
            padding: theme.spacing(2),
            overflow: 'auto',
            background: '#ddd',
            wordBreak: 'break-word',
        },
    }); });
    var TrackInfoDialog = observer(function (_a) {
        var model = _a.model, onClose = _a.onClose;
        var _b = React$i.useState('Copy to clipboard'), label = _b[0], setLabel = _b[1];
        var classes = useStyles$1();
        return (React__default["default"].createElement(Dialog$2, { open: true, onClose: onClose, fullWidth: true, maxWidth: "lg" },
            React__default["default"].createElement(DialogTitle$2, null,
                "Track info - ",
                model.name),
            React__default["default"].createElement(DialogContent$2, null,
                React__default["default"].createElement(Button$2, { variant: "contained", color: "primary", onClick: function () {
                        copyToClipboard(model.data);
                        setLabel('Copied!');
                        setTimeout(function () {
                            setLabel('Copy to clipboard');
                        }, 300);
                    } }, label),
                React__default["default"].createElement("pre", { className: classes.textArea }, model.data)),
            React__default["default"].createElement(DialogActions$2, null,
                React__default["default"].createElement(Button$2, { variant: "contained", onClick: onClose, color: "secondary" }, "Close"))));
    });

    var useStyles = makeStyles(function () { return ({
        button: {
            padding: 0,
        },
    }); });
    var TrackLabel = observer(function (_a) {
        var model = _a.model, track = _a.track;
        var _b = React$i.useState(), anchorEl = _b[0], setAnchorEl = _b[1];
        var _c = React$i.useState(false), trackInfoDlgOpen = _c[0], setTrackInfoDlgOpen = _c[1];
        var rowHeight = model.rowHeight, width = model.treeAreaWidth;
        var height = track.height, name = track.model.name;
        var classes = useStyles();
        var trackLabelHeight = Math.max(8, rowHeight - 8);
        return (React__default["default"].createElement("div", { style: {
                width: width,
                height: height,
                flexShrink: 0,
                textAlign: 'right',
                fontSize: trackLabelHeight,
            } },
            name,
            React__default["default"].createElement(IconButton$1, { className: classes.button, style: { width: trackLabelHeight, height: trackLabelHeight }, onClick: function (event) {
                    setAnchorEl(event.target);
                } },
                React__default["default"].createElement(default_1$6, null)),
            anchorEl ? (React__default["default"].createElement(Menu$4, { anchorEl: anchorEl, transitionDuration: 0, open: true, onClose: function () {
                    setAnchorEl(undefined);
                } },
                React__default["default"].createElement(MenuItem$1, { dense: true, onClick: function () {
                        model.toggleTrack(track.model.id);
                        setAnchorEl(undefined);
                    } }, "Close"),
                React__default["default"].createElement(MenuItem$1, { dense: true, onClick: function () {
                        setTrackInfoDlgOpen(true);
                        setAnchorEl(undefined);
                    } }, "Get info"))) : null,
            trackInfoDlgOpen ? (React__default["default"].createElement(TrackInfoDialog, { model: track.model, onClose: function () { return setTrackInfoDlgOpen(false); } })) : null));
    });
    var Track = observer(function (_a) {
        var model = _a.model, track = _a.track;
        var resizeHandleWidth = model.resizeHandleWidth;
        var height = track.model.height;
        var ref = React$i.useRef(null);
        var scheduled = React$i.useRef(false);
        var deltaX = React$i.useRef(0);
        React$i.useEffect(function () {
            var curr = ref.current;
            if (!curr) {
                return;
            }
            function onWheel(origEvent) {
                var event = normalizeWheel(origEvent);
                deltaX.current += event.pixelX;
                if (!scheduled.current) {
                    scheduled.current = true;
                    requestAnimationFrame(function () {
                        model.doScrollX(-deltaX.current);
                        deltaX.current = 0;
                        scheduled.current = false;
                    });
                }
                origEvent.preventDefault();
            }
            curr.addEventListener('wheel', onWheel);
            return function () {
                curr.removeEventListener('wheel', onWheel);
            };
        }, [model]);
        return (React__default["default"].createElement("div", { key: track.id, style: { display: 'flex', height: height } },
            React__default["default"].createElement(TrackLabel, { model: model, track: track }),
            React__default["default"].createElement("div", { style: { width: resizeHandleWidth, flexShrink: 0 } }),
            React__default["default"].createElement("div", { ref: ref },
                React__default["default"].createElement(track.ReactComponent, { model: model, track: track }))));
    });

    var __spreadArray$1 = (undefined && undefined.__spreadArray) || function (to, from, pack) {
        if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
                if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                ar[i] = from[i];
            }
        }
        return to.concat(ar || Array.prototype.slice.call(from));
    };
    var specialFromEntries = function (val) {
        var ret = {};
        val.forEach(function (_a) {
            var key = _a[0], val = _a[1];
            if (!ret[key])
                ret[key] = [];
            ret[key].push(val);
        });
        return ret;
    };
    var Row = observer(function (_a) {
        var name = _a.name, value = _a.value, setValue = _a.setValue, setName = _a.setName, onDelete = _a.onDelete;
        return (React__default["default"].createElement("div", null,
            React__default["default"].createElement(IconButton$1, { onClick: onDelete, style: { margin: 10 } },
                React__default["default"].createElement(default_1$7, null)),
            React__default["default"].createElement(TextField$1, { value: name, onChange: function (event) { return setName(event.target.value); }, label: "Key" }),
            React__default["default"].createElement(TextField$1, { value: value, onChange: function (event) { return setValue(event.target.value); }, label: "Value" })));
    });
    var AnnotationDialog = observer(function (_a) {
        var onClose = _a.onClose, data = _a.data, model = _a.model;
        var blanks = model.blanks;
        var l = data.left, r = data.right;
        var _b = React$i.useState([
            ['Name', ''],
            ['ID', ''],
            ['Note', ''],
        ]), rows = _b[0], setRows = _b[1];
        return (React__default["default"].createElement(Dialog$2, { onClose: function () { return onClose(); }, open: true },
            React__default["default"].createElement(DialogTitle$2, null, "Create new region annotation"),
            React__default["default"].createElement(DialogContent$2, null,
                React__default["default"].createElement(Typography$2, null,
                    "Do you want to add an annotation to the MSA at ",
                    l,
                    "..",
                    r,
                    ' ',
                    blanks.length
                        ? " (gapped ".concat(model.getPos(l), "..").concat(model.getPos(r))
                        : ''),
                rows.map(function (_a, index) {
                    var key = _a[0], val = _a[1];
                    return (React__default["default"].createElement(Row, { key: index, name: key, value: val, setValue: function (newValue) {
                            var newRows = __spreadArray$1([], rows, true);
                            newRows[index][1] = newValue;
                            setRows(newRows);
                        }, setName: function (newName) {
                            var newRows = __spreadArray$1([], rows, true);
                            newRows[index][0] = newName;
                            setRows(newRows);
                        }, onDelete: function () {
                            rows.splice(index, 1);
                            setRows(__spreadArray$1([], rows, true));
                        } }));
                }),
                React__default["default"].createElement(Button$2, { onClick: function () {
                        setRows(__spreadArray$1(__spreadArray$1([], rows, true), [['', '']], false));
                    } }, "Add row"),
                React__default["default"].createElement(DialogActions$2, null,
                    React__default["default"].createElement(Button$2, { onClick: function () {
                            model.addAnnotation(l, r, specialFromEntries(rows));
                            onClose();
                        }, variant: "contained", color: "primary" }, "Submit"),
                    React__default["default"].createElement(Button$2, { variant: "contained", color: "secondary", onClick: function () { return onClose(); } }, "Cancel")))));
    });

    var VerticalResizeHandle = observer(function (_a) {
        var model = _a.model;
        var resizeHandleWidth = model.resizeHandleWidth;
        var _b = React$i.useState(false), mouseDragging = _b[0], setMouseDragging = _b[1];
        var scheduled = React$i.useRef(false);
        var prevX = React$i.useRef(0);
        React$i.useEffect(function () {
            function globalMouseMove(event) {
                event.preventDefault();
                var currX = event.clientX;
                if (prevX.current === 0) {
                    prevX.current = event.clientX;
                }
                else {
                    var distance_1 = currX - prevX.current;
                    if (distance_1) {
                        // use rAF to make it so multiple event handlers aren't fired per-frame
                        // see https://calendar.perfplanet.com/2013/the-runtime-performance-checklist/
                        if (!scheduled.current) {
                            scheduled.current = true;
                            window.requestAnimationFrame(function () {
                                model.setTreeAreaWidth(model.treeAreaWidth + distance_1);
                                scheduled.current = false;
                                prevX.current = event.clientX;
                            });
                        }
                    }
                }
            }
            function globalMouseUp() {
                prevX.current = 0;
                if (mouseDragging) {
                    setMouseDragging(false);
                }
            }
            if (mouseDragging) {
                document.addEventListener('mousemove', globalMouseMove, true);
                document.addEventListener('mouseup', globalMouseUp, true);
                return function () {
                    document.removeEventListener('mousemove', globalMouseMove, true);
                    document.removeEventListener('mouseup', globalMouseUp, true);
                };
            }
            return function () { };
        }, [mouseDragging, model]);
        return (React__default["default"].createElement("div", null,
            React__default["default"].createElement("div", { onMouseDown: function () { return setMouseDragging(true); }, style: {
                    cursor: 'ew-resize',
                    height: '100%',
                    width: resizeHandleWidth,
                    background: "rgba(200,200,200)",
                    position: 'relative',
                } })));
    });
    var HorizontalResizeHandle = observer(function (_a) {
        var model = _a.model;
        var resizeHandleWidth = model.resizeHandleWidth;
        var _b = React$i.useState(false), mouseDragging = _b[0], setMouseDragging = _b[1];
        var scheduled = React$i.useRef(false);
        var prevY = React$i.useRef(0);
        React$i.useEffect(function () {
            function globalMouseMove(event) {
                event.preventDefault();
                var currY = event.clientY;
                if (prevY.current === 0) {
                    prevY.current = event.clientY;
                }
                else {
                    var distance_2 = currY - prevY.current;
                    if (distance_2) {
                        // use rAF to make it so multiple event handlers aren't fired per-frame
                        // see https://calendar.perfplanet.com/2013/the-runtime-performance-checklist/
                        if (!scheduled.current) {
                            scheduled.current = true;
                            window.requestAnimationFrame(function () {
                                model.setHeight(model.height + distance_2);
                                scheduled.current = false;
                                prevY.current = event.clientY;
                            });
                        }
                    }
                }
            }
            function globalMouseUp() {
                prevY.current = 0;
                if (mouseDragging) {
                    setMouseDragging(false);
                }
            }
            if (mouseDragging) {
                document.addEventListener('mousemove', globalMouseMove, true);
                document.addEventListener('mouseup', globalMouseUp, true);
                return function () {
                    document.removeEventListener('mousemove', globalMouseMove, true);
                    document.removeEventListener('mouseup', globalMouseUp, true);
                };
            }
            return function () { };
        }, [mouseDragging, model]);
        return (React__default["default"].createElement("div", null,
            React__default["default"].createElement("div", { onMouseDown: function () { return setMouseDragging(true); }, style: {
                    cursor: 'ns-resize',
                    width: '100%',
                    height: resizeHandleWidth,
                    background: "rgba(200,200,200)",
                    position: 'relative',
                } })));
    });

    var __assign$1 = (undefined && undefined.__assign) || function () {
        __assign$1 = Object.assign || function(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
            }
            return t;
        };
        return __assign$1.apply(this, arguments);
    };
    var MouseoverCanvas = observer(function (_a) {
        var model = _a.model;
        var ref = React$i.useRef(null);
        var height = model.height, width = model.width, treeAreaWidth = model.treeAreaWidth, resizeHandleWidth = model.resizeHandleWidth, scrollX = model.scrollX, mouseCol = model.mouseCol, colWidth = model.colWidth;
        React$i.useEffect(function () {
            if (!ref.current) {
                return;
            }
            var ctx = ref.current.getContext('2d');
            if (!ctx) {
                return;
            }
            ctx.resetTransform();
            ctx.clearRect(0, 0, width, height);
            if (mouseCol !== undefined) {
                var x = (mouseCol - 1) * colWidth + scrollX + treeAreaWidth + resizeHandleWidth;
                ctx.fillStyle = 'rgba(100,100,100,0.5)';
                ctx.fillRect(x, 0, colWidth, height);
            }
        }, [
            mouseCol,
            colWidth,
            scrollX,
            height,
            resizeHandleWidth,
            treeAreaWidth,
            width,
        ]);
        return (React__default["default"].createElement("canvas", { ref: ref, width: width, height: height, style: {
                position: 'absolute',
                top: 0,
                left: 0,
                width: width,
                height: height,
                zIndex: 1000,
                pointerEvents: 'none',
            } }));
    });
    var MSAView = observer(function (_a) {
        var model = _a.model;
        var done = model.done, initialized = model.initialized, treeAreaWidth = model.treeAreaWidth, height = model.height; model.resizeHandleWidth; var turnedOnTracks = model.turnedOnTracks;
        return (React__default["default"].createElement("div", null,
            !initialized ? (React__default["default"].createElement(ImportForm, { model: model })) : !done ? (React__default["default"].createElement(Typography$2, { variant: "h4" }, "Loading...")) : (React__default["default"].createElement("div", null,
                React__default["default"].createElement("div", { style: { height: height, overflow: 'hidden' } },
                    React__default["default"].createElement(Header, { model: model }),
                    React__default["default"].createElement("div", null,
                        React__default["default"].createElement("div", { style: { position: 'relative' } },
                            React__default["default"].createElement("div", { style: { display: 'flex' } },
                                React__default["default"].createElement("div", { style: { flexShrink: 0, width: treeAreaWidth } },
                                    React__default["default"].createElement(TreeRuler, { model: model })),
                                React__default["default"].createElement(Rubberband$1, { model: model, ControlComponent: React__default["default"].createElement(Ruler, { model: model }) })), turnedOnTracks === null || turnedOnTracks === void 0 ? void 0 :
                            turnedOnTracks.map(function (track) { return (React__default["default"].createElement(Track, { key: track.model.id, model: model, track: track })); }),
                            React__default["default"].createElement("div", { style: { display: 'flex' } },
                                React__default["default"].createElement("div", { style: { flexShrink: 0, width: treeAreaWidth } },
                                    React__default["default"].createElement(TreeCanvas, { model: model })),
                                React__default["default"].createElement(VerticalResizeHandle, { model: model }),
                                React__default["default"].createElement(MSACanvas, { model: model }),
                                React__default["default"].createElement(MouseoverCanvas, { model: model }))))),
                React__default["default"].createElement(HorizontalResizeHandle, { model: model }))),
            model.DialogComponent ? (React__default["default"].createElement(model.DialogComponent, __assign$1({}, (model.DialogProps || {}), { onClose: function () {
                    model.setDialogComponent(undefined, undefined);
                } }))) : null,
            model.annotPos ? (React__default["default"].createElement(AnnotationDialog, { data: model.annotPos, model: model, onClose: function () { return model.clearAnnotPos(); } })) : null));
    });

    function defaultSeparation(a, b) {
      return a.parent === b.parent ? 1 : 2;
    }

    function meanX(children) {
      return children.reduce(meanXReduce, 0) / children.length;
    }

    function meanXReduce(x, c) {
      return x + c.x;
    }

    function maxY(children) {
      return 1 + children.reduce(maxYReduce, 0);
    }

    function maxYReduce(y, c) {
      return Math.max(y, c.y);
    }

    function leafLeft(node) {
      var children;
      while (children = node.children) node = children[0];
      return node;
    }

    function leafRight(node) {
      var children;
      while (children = node.children) node = children[children.length - 1];
      return node;
    }

    function cluster() {
      var separation = defaultSeparation,
          dx = 1,
          dy = 1,
          nodeSize = false;

      function cluster(root) {
        var previousNode,
            x = 0;

        // First walk, computing the initial x & y values.
        root.eachAfter(function(node) {
          var children = node.children;
          if (children) {
            node.x = meanX(children);
            node.y = maxY(children);
          } else {
            node.x = previousNode ? x += separation(node, previousNode) : 0;
            node.y = 0;
            previousNode = node;
          }
        });

        var left = leafLeft(root),
            right = leafRight(root),
            x0 = left.x - separation(left, right) / 2,
            x1 = right.x + separation(right, left) / 2;

        // Second walk, normalizing x & y to the desired size.
        return root.eachAfter(nodeSize ? function(node) {
          node.x = (node.x - root.x) * dx;
          node.y = (root.y - node.y) * dy;
        } : function(node) {
          node.x = (node.x - x0) / (x1 - x0) * dx;
          node.y = (1 - (root.y ? node.y / root.y : 1)) * dy;
        });
      }

      cluster.separation = function(x) {
        return arguments.length ? (separation = x, cluster) : separation;
      };

      cluster.size = function(x) {
        return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? null : [dx, dy]);
      };

      cluster.nodeSize = function(x) {
        return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? [dx, dy] : null);
      };

      return cluster;
    }

    function count(node) {
      var sum = 0,
          children = node.children,
          i = children && children.length;
      if (!i) sum = 1;
      else while (--i >= 0) sum += children[i].value;
      node.value = sum;
    }

    function node_count() {
      return this.eachAfter(count);
    }

    function node_each(callback, that) {
      let index = -1;
      for (const node of this) {
        callback.call(that, node, ++index, this);
      }
      return this;
    }

    function node_eachBefore(callback, that) {
      var node = this, nodes = [node], children, i, index = -1;
      while (node = nodes.pop()) {
        callback.call(that, node, ++index, this);
        if (children = node.children) {
          for (i = children.length - 1; i >= 0; --i) {
            nodes.push(children[i]);
          }
        }
      }
      return this;
    }

    function node_eachAfter(callback, that) {
      var node = this, nodes = [node], next = [], children, i, n, index = -1;
      while (node = nodes.pop()) {
        next.push(node);
        if (children = node.children) {
          for (i = 0, n = children.length; i < n; ++i) {
            nodes.push(children[i]);
          }
        }
      }
      while (node = next.pop()) {
        callback.call(that, node, ++index, this);
      }
      return this;
    }

    function node_find(callback, that) {
      let index = -1;
      for (const node of this) {
        if (callback.call(that, node, ++index, this)) {
          return node;
        }
      }
    }

    function node_sum(value) {
      return this.eachAfter(function(node) {
        var sum = +value(node.data) || 0,
            children = node.children,
            i = children && children.length;
        while (--i >= 0) sum += children[i].value;
        node.value = sum;
      });
    }

    function node_sort(compare) {
      return this.eachBefore(function(node) {
        if (node.children) {
          node.children.sort(compare);
        }
      });
    }

    function node_path(end) {
      var start = this,
          ancestor = leastCommonAncestor(start, end),
          nodes = [start];
      while (start !== ancestor) {
        start = start.parent;
        nodes.push(start);
      }
      var k = nodes.length;
      while (end !== ancestor) {
        nodes.splice(k, 0, end);
        end = end.parent;
      }
      return nodes;
    }

    function leastCommonAncestor(a, b) {
      if (a === b) return a;
      var aNodes = a.ancestors(),
          bNodes = b.ancestors(),
          c = null;
      a = aNodes.pop();
      b = bNodes.pop();
      while (a === b) {
        c = a;
        a = aNodes.pop();
        b = bNodes.pop();
      }
      return c;
    }

    function node_ancestors() {
      var node = this, nodes = [node];
      while (node = node.parent) {
        nodes.push(node);
      }
      return nodes;
    }

    function node_descendants() {
      return Array.from(this);
    }

    function node_leaves() {
      var leaves = [];
      this.eachBefore(function(node) {
        if (!node.children) {
          leaves.push(node);
        }
      });
      return leaves;
    }

    function node_links() {
      var root = this, links = [];
      root.each(function(node) {
        if (node !== root) { // Don’t include the root’s parent, if any.
          links.push({source: node.parent, target: node});
        }
      });
      return links;
    }

    function* node_iterator() {
      var node = this, current, next = [node], children, i, n;
      do {
        current = next.reverse(), next = [];
        while (node = current.pop()) {
          yield node;
          if (children = node.children) {
            for (i = 0, n = children.length; i < n; ++i) {
              next.push(children[i]);
            }
          }
        }
      } while (next.length);
    }

    function hierarchy(data, children) {
      if (data instanceof Map) {
        data = [undefined, data];
        if (children === undefined) children = mapChildren;
      } else if (children === undefined) {
        children = objectChildren;
      }

      var root = new Node$1(data),
          node,
          nodes = [root],
          child,
          childs,
          i,
          n;

      while (node = nodes.pop()) {
        if ((childs = children(node.data)) && (n = (childs = Array.from(childs)).length)) {
          node.children = childs;
          for (i = n - 1; i >= 0; --i) {
            nodes.push(child = childs[i] = new Node$1(childs[i]));
            child.parent = node;
            child.depth = node.depth + 1;
          }
        }
      }

      return root.eachBefore(computeHeight);
    }

    function node_copy() {
      return hierarchy(this).eachBefore(copyData);
    }

    function objectChildren(d) {
      return d.children;
    }

    function mapChildren(d) {
      return Array.isArray(d) ? d[1] : null;
    }

    function copyData(node) {
      if (node.data.value !== undefined) node.value = node.data.value;
      node.data = node.data.data;
    }

    function computeHeight(node) {
      var height = 0;
      do node.height = height;
      while ((node = node.parent) && (node.height < ++height));
    }

    function Node$1(data) {
      this.data = data;
      this.depth =
      this.height = 0;
      this.parent = null;
    }

    Node$1.prototype = hierarchy.prototype = {
      constructor: Node$1,
      count: node_count,
      each: node_each,
      eachAfter: node_eachAfter,
      eachBefore: node_eachBefore,
      find: node_find,
      sum: node_sum,
      sort: node_sort,
      path: node_path,
      ancestors: node_ancestors,
      descendants: node_descendants,
      leaves: node_leaves,
      links: node_links,
      copy: node_copy,
      [Symbol.iterator]: node_iterator
    };

    function ascending(a, b) {
      return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
    }

    function max(values, valueof) {
      let max;
      if (valueof === undefined) {
        for (const value of values) {
          if (value != null
              && (max < value || (max === undefined && value >= value))) {
            max = value;
          }
        }
      } else {
        let index = -1;
        for (let value of values) {
          if ((value = valueof(value, ++index, values)) != null
              && (max < value || (max === undefined && value >= value))) {
            max = value;
          }
        }
      }
      return max;
    }

    var io = {};

    const myGlobal = typeof window !== 'undefined'
        ? window
        : typeof self !== 'undefined'
            ? self
            : { fetch: undefined };
    class RemoteFile {
        constructor(source, opts = {}) {
            this.baseOverrides = {};
            this.url = source;
            // if it is a file URL, monkey-patch ourselves to act like a LocalFile
            if (source.startsWith('file://')) {
                const path = LocalFile(source);
                if (!path) {
                    throw new TypeError('invalid file url');
                }
                const localFile = new LocalFile(path);
                this.read = localFile.read.bind(localFile);
                this.readFile = localFile.readFile.bind(localFile);
                this.stat = localFile.stat.bind(localFile);
                // @ts-ignore
                this.fetchImplementation = () => {
                    /* intentionally blank */
                };
                return;
            }
            const fetch = opts.fetch || (myGlobal.fetch && myGlobal.fetch.bind(myGlobal));
            if (!fetch) {
                throw new TypeError(`no fetch function supplied, and none found in global environment`);
            }
            if (opts.overrides) {
                this.baseOverrides = opts.overrides;
            }
            this.fetchImplementation = fetch;
        }
        async getBufferFromResponse(response) {
            if (typeof response.buffer === 'function') {
                return response.buffer();
            }
            else if (typeof response.arrayBuffer === 'function') {
                const resp = await response.arrayBuffer();
                return Buffer.from(resp);
            }
            else {
                throw new TypeError('invalid HTTP response object, has no buffer method, and no arrayBuffer method');
            }
        }
        async fetch(input, init) {
            let response;
            try {
                response = await this.fetchImplementation(input, init);
            }
            catch (e) {
                if (`${e}`.includes('Failed to fetch')) {
                    // refetch to to help work around a chrome bug (discussed in
                    // generic-filehandle issue #72) in which the chrome cache returns a
                    // CORS error for content in its cache.  see also
                    // https://github.com/GMOD/jbrowse-components/pull/1511
                    console.warn(`generic-filehandle: refetching ${input} to attempt to work around chrome CORS header caching bug`);
                    response = await this.fetchImplementation(input, {
                        ...init,
                        cache: 'reload',
                    });
                }
                else {
                    throw e;
                }
            }
            return response;
        }
        async read(buffer, offset = 0, length, position = 0, opts = {}) {
            const { headers = {}, signal, overrides = {} } = opts;
            if (length < Infinity) {
                headers.range = `bytes=${position}-${position + length}`;
            }
            else if (length === Infinity && position !== 0) {
                headers.range = `bytes=${position}-`;
            }
            const args = {
                ...this.baseOverrides,
                ...overrides,
                headers: {
                    ...headers,
                    ...overrides.headers,
                    ...this.baseOverrides.headers,
                },
                method: 'GET',
                redirect: 'follow',
                mode: 'cors',
                signal,
            };
            const response = await this.fetch(this.url, args);
            if (!response.ok) {
                throw new Error(`HTTP ${response.status} ${response.statusText} ${this.url}`);
            }
            if ((response.status === 200 && position === 0) ||
                response.status === 206) {
                const responseData = await this.getBufferFromResponse(response);
                const bytesCopied = responseData.copy(buffer, offset, 0, Math.min(length, responseData.length));
                // try to parse out the size of the remote file
                const res = response.headers.get('content-range');
                const sizeMatch = /\/(\d+)$/.exec(res || '');
                if (sizeMatch && sizeMatch[1]) {
                    this._stat = { size: parseInt(sizeMatch[1], 10) };
                }
                return { bytesRead: bytesCopied, buffer };
            }
            if (response.status === 200) {
                throw new Error('${this.url} fetch returned status 200, expected 206');
            }
            // TODO: try harder here to gather more information about what the problem is
            throw new Error(`HTTP ${response.status} fetching ${this.url}`);
        }
        async readFile(options = {}) {
            let encoding;
            let opts;
            if (typeof options === 'string') {
                encoding = options;
                opts = {};
            }
            else {
                encoding = options.encoding;
                opts = options;
                delete opts.encoding;
            }
            const { headers = {}, signal, overrides = {} } = opts;
            const args = {
                headers,
                method: 'GET',
                redirect: 'follow',
                mode: 'cors',
                signal,
                ...this.baseOverrides,
                ...overrides,
            };
            const response = await this.fetch(this.url, args);
            if (!response) {
                throw new Error('generic-filehandle failed to fetch');
            }
            if (response.status !== 200) {
                throw Object.assign(new Error(`HTTP ${response.status} fetching ${this.url}`), {
                    status: response.status,
                });
            }
            if (encoding === 'utf8') {
                return response.text();
            }
            if (encoding) {
                throw new Error(`unsupported encoding: ${encoding}`);
            }
            return this.getBufferFromResponse(response);
        }
        async stat() {
            if (!this._stat) {
                const buf = Buffer.allocUnsafe(10);
                await this.read(buf, 0, 10, 0);
                if (!this._stat) {
                    throw new Error(`unable to determine size of file at ${this.url}`);
                }
            }
            return this._stat;
        }
        async close() {
            return;
        }
    }

    // Using this you can "await" the file like a normal promise
    // https://blog.shovonhasan.com/using-promises-with-filereader/
    function readBlobAsArrayBuffer(blob) {
        const fileReader = new FileReader();
        return new Promise((resolve, reject) => {
            fileReader.onerror = () => {
                fileReader.abort();
                reject(new Error('problem reading blob'));
            };
            fileReader.onabort = () => {
                reject(new Error('blob reading was aborted'));
            };
            fileReader.onload = () => {
                if (fileReader.result && typeof fileReader.result !== 'string') {
                    resolve(fileReader.result);
                }
                else {
                    reject(new Error('unknown error reading blob'));
                }
            };
            fileReader.readAsArrayBuffer(blob);
        });
    }
    function readBlobAsText(blob) {
        const fileReader = new FileReader();
        return new Promise((resolve, reject) => {
            fileReader.onerror = () => {
                fileReader.abort();
                reject(new Error('problem reading blob'));
            };
            fileReader.onabort = () => {
                reject(new Error('blob reading was aborted'));
            };
            fileReader.onload = () => {
                if (fileReader.result && typeof fileReader.result === 'string') {
                    resolve(fileReader.result);
                }
                else {
                    reject(new Error('unknown error reading blob'));
                }
            };
            fileReader.readAsText(blob);
        });
    }
    /**
     * Blob of binary data fetched from a local file (with FileReader).
     *
     * Adapted by Robert Buels and Garrett Stevens from the BlobFetchable object in
     * the Dalliance Genome Explorer, which is copyright Thomas Down 2006-2011.
     */
    class BlobFile {
        constructor(blob) {
            this.blob = blob;
            this.size = blob.size;
        }
        async read(buffer, offset = 0, length, position = 0) {
            // short-circuit a read of 0 bytes here, because browsers actually sometimes
            // crash if you try to read 0 bytes from a local file!
            if (!length) {
                return { bytesRead: 0, buffer };
            }
            const start = position;
            const end = start + length;
            const result = await readBlobAsArrayBuffer(this.blob.slice(start, end));
            const resultBuffer = Buffer.from(result);
            const bytesCopied = resultBuffer.copy(buffer, offset);
            return { bytesRead: bytesCopied, buffer: resultBuffer };
        }
        async readFile(options) {
            let encoding;
            if (typeof options === 'string') {
                encoding = options;
            }
            else {
                encoding = options && options.encoding;
            }
            if (encoding === 'utf8') {
                return readBlobAsText(this.blob);
            }
            if (encoding) {
                throw new Error(`unsupported encoding: ${encoding}`);
            }
            const result = await readBlobAsArrayBuffer(this.blob);
            return Buffer.from(result);
        }
        async stat() {
            return { size: this.size };
        }
        async close() {
            return;
        }
    }

    function fromUrl(source, opts = {}) {
        return new RemoteFile(source, opts);
    }
    function open(maybeUrl, maybePath, maybeFilehandle, opts = {}) {
        if (maybeFilehandle !== undefined) {
            return maybeFilehandle;
        }
        if (maybeUrl !== undefined) {
            return fromUrl(maybeUrl, opts);
        }
        if (maybePath !== undefined) {
            return new LocalFile(maybePath, opts);
        }
        throw new Error('no url, path, or filehandle provided, cannot open');
    }

    var esm = /*#__PURE__*/Object.freeze({
        __proto__: null,
        open: open,
        fromUrl: fromUrl,
        RemoteFile: RemoteFile,
        LocalFile: LocalFile,
        BlobFile: BlobFile
    });

    var require$$3 = /*@__PURE__*/getAugmentedNamespace(esm);

    var RemoteFileWithRangeCache$1 = {};

    var get = {exports: {}};

    var superPropBase = {exports: {}};

    (function (module) {
    var getPrototypeOf$1 = getPrototypeOf.exports;

    function _superPropBase(object, property) {
      while (!Object.prototype.hasOwnProperty.call(object, property)) {
        object = getPrototypeOf$1(object);
        if (object === null) break;
      }

      return object;
    }

    module.exports = _superPropBase, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }(superPropBase));

    (function (module) {
    var superPropBase$1 = superPropBase.exports;

    function _get() {
      if (typeof Reflect !== "undefined" && Reflect.get) {
        module.exports = _get = Reflect.get, module.exports.__esModule = true, module.exports["default"] = module.exports;
      } else {
        module.exports = _get = function _get(target, property, receiver) {
          var base = superPropBase$1(target, property);
          if (!base) return;
          var desc = Object.getOwnPropertyDescriptor(base, property);

          if (desc.get) {
            return desc.get.call(arguments.length < 3 ? target : receiver);
          }

          return desc.value;
        }, module.exports.__esModule = true, module.exports["default"] = module.exports;
      }

      return _get.apply(this, arguments);
    }

    module.exports = _get, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }(get));

    class QuickLRU {
    	constructor(options = {}) {
    		if (!(options.maxSize && options.maxSize > 0)) {
    			throw new TypeError('`maxSize` must be a number greater than 0');
    		}

    		this.maxSize = options.maxSize;
    		this.cache = new Map();
    		this.oldCache = new Map();
    		this._size = 0;
    	}

    	_set(key, value) {
    		this.cache.set(key, value);
    		this._size++;

    		if (this._size >= this.maxSize) {
    			this._size = 0;
    			this.oldCache = this.cache;
    			this.cache = new Map();
    		}
    	}

    	get(key) {
    		if (this.cache.has(key)) {
    			return this.cache.get(key);
    		}

    		if (this.oldCache.has(key)) {
    			const value = this.oldCache.get(key);
    			this._set(key, value);
    			return value;
    		}
    	}

    	set(key, value) {
    		if (this.cache.has(key)) {
    			this.cache.set(key, value);
    		} else {
    			this._set(key, value);
    		}

    		return this;
    	}

    	has(key) {
    		return this.cache.has(key) || this.oldCache.has(key);
    	}

    	peek(key) {
    		if (this.cache.has(key)) {
    			return this.cache.get(key);
    		}

    		if (this.oldCache.has(key)) {
    			return this.oldCache.get(key);
    		}
    	}

    	delete(key) {
    		const deleted = this.cache.delete(key);
    		if (deleted) {
    			this._size--;
    		}

    		return this.oldCache.delete(key) || deleted;
    	}

    	clear() {
    		this.cache.clear();
    		this.oldCache.clear();
    		this._size = 0;
    	}

    	* keys() {
    		for (const [key] of this) {
    			yield key;
    		}
    	}

    	* values() {
    		for (const [, value] of this) {
    			yield value;
    		}
    	}

    	* [Symbol.iterator]() {
    		for (const item of this.cache) {
    			yield item;
    		}

    		for (const item of this.oldCache) {
    			const [key] = item;
    			if (!this.cache.has(key)) {
    				yield item;
    			}
    		}
    	}

    	get size() {
    		let oldCacheSize = 0;
    		for (const key of this.oldCache.keys()) {
    			if (!this.cache.has(key)) {
    				oldCacheSize++;
    			}
    		}

    		return this._size + oldCacheSize;
    	}
    }

    var quickLru = QuickLRU;

    var _interopRequireDefault$3 = interopRequireDefault.exports;

    var _classCallCheck2$3 = _interopRequireDefault$3(classCallCheck.exports);

    var _createClass2$3 = _interopRequireDefault$3(createClass.exports);

    function parseCacheControl(field) {
      if (typeof field !== 'string') {
        return {};
      }

      var parsed = {};
      var invalid = field.toLowerCase().replace( // eslint-disable-next-line no-control-regex,no-useless-escape
      /(?:^|(?:\s*,\s*))([^\x00-\x20\(\)<>@\,;\:\\"\/\[\]\?\=\{\}\x7F]+)(?:\=(?:([^\x00-\x20\(\)<>@\,;\:\\"\/\[\]\?\=\{\}\x7F]+)|(?:\"((?:[^"\\]|\\.)*)\")))?/g, function (match, fieldName, three, four) {
        var value = three || four;
        parsed[fieldName] = value ? value.toLowerCase() : true;
        return '';
      });
      if (invalid) return {}; // parse any things that seem to be numbers

      Object.keys(parsed).forEach(function (key) {
        if (/^[\d]+$/.test(parsed[key])) {
          try {
            var num = parseInt(parsed[key], 10);

            if (!Number.isNaN(num)) {
              parsed[key] = num;
            }
          } catch (e) {
            /* ignore */
          }
        }
      });
      return parsed;
    }

    var CacheSemantics$1 =
    /*#__PURE__*/
    function () {
      function CacheSemantics(_ref) {
        var minimumTTL = _ref.minimumTTL;
        (0, _classCallCheck2$3.default)(this, CacheSemantics);
        this.minimumTTL = minimumTTL;
      }

      (0, _createClass2$3.default)(CacheSemantics, [{
        key: "calculateChunkExpirationDate",
        value: function calculateChunkExpirationDate(chunkResponse) {
          var _chunkResponse$header = chunkResponse.headers,
              headers = _chunkResponse$header === void 0 ? {} : _chunkResponse$header,
              requestDate = chunkResponse.requestDate,
              responseDate = chunkResponse.responseDate;
          var baselineDate = responseDate || requestDate;

          if (!baselineDate) {
            if (!headers.date) return undefined;
            baselineDate = new Date(headers.date);
          }

          var basePlus = function basePlus(ttl) {
            return new Date(baselineDate.getTime() + ttl);
          }; // results that are not really cacheable expire after the minimum time to live


          if (/\bno-cache\b/.test(headers.pragma)) return basePlus(this.minimumTTL);
          var cacheControl = parseCacheControl(headers['cache-control']);
          if (cacheControl['no-cache'] || cacheControl['no-store'] || cacheControl['must-revalidate']) return basePlus(this.minimumTTL);

          if (cacheControl['max-age'] !== undefined) {
            var ttl = cacheControl['max-age'] * 1000; // max-age is in seconds

            return basePlus(Math.max(ttl, this.minimumTTL));
          } else if (this._coerceToDate(headers.expires)) {
            return this._coerceToDate(headers.expires);
          } else if (this._coerceToDate(headers['last-modified'])) {
            var lastModified = this._coerceToDate(headers['last-modified']);

            var _ttl = (baselineDate.getTime() - lastModified.getTime()) / 10;

            return basePlus(_ttl);
          } // otherwise, we just cache forever


          return undefined;
        }
      }, {
        key: "_coerceToDate",
        value: function _coerceToDate(thing) {
          if (thing) {
            if (thing instanceof Date) return thing;
            if (typeof thing === 'string' || typeof thing === 'number') return new Date(thing);
          }

          return undefined;
        }
        /**
         * check whether a cached chunk response is still valid and can be used
         * @param {object} chunkResponse
         * @returns {boolean}
         */

      }, {
        key: "cachedChunkIsValid",
        value: function cachedChunkIsValid(chunkResponse) {
          var expiration = this.calculateChunkExpirationDate(chunkResponse);
          return !expiration || new Date() <= expiration;
        }
        /**
         * check whether the response for this chunk fetch can be cached
         * @param {object} chunkResponse
         * @returns {boolean}
         */

      }, {
        key: "chunkIsCacheable",
        value: function chunkIsCacheable() {
          // right now, we are caching everything, we just give it a very short
          // time to live if it's not supposed to be cached
          return true;
        }
      }]);
      return CacheSemantics;
    }();

    var cacheSemantics = {
      CacheSemantics: CacheSemantics$1,
      parseCacheControl: parseCacheControl
    };

    var has = function (obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop) };
    var isEnumerable = function (obj, prop) {
      return Object.prototype.propertyIsEnumerable.call(obj, prop)
    };

    function entries (obj) {
      if (obj == null) {
        throw new TypeError('Cannot convert undefined or null to object')
      }
      var pairs = [];
      for (var key in obj) {
        if (has(obj, key) && isEnumerable(obj, key)) {
          pairs.push([key, obj[key]]);
        }
      }
      return pairs
    }

    var entries_1 = entries;

    var object_entriesPonyfill = typeof Object.entries === 'function' ? Object.entries : entries_1;

    var abortcontrollerPonyfill = {exports: {}};

    var cjsPonyfill = {};

    Object.defineProperty(cjsPonyfill, '__esModule', { value: true });

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }

      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true
        }
      });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }

    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
      };
      return _getPrototypeOf(o);
    }

    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
      };

      return _setPrototypeOf(o, p);
    }

    function _isNativeReflectConstruct$1() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;

      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
        return true;
      } catch (e) {
        return false;
      }
    }

    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }

      return self;
    }

    function _possibleConstructorReturn(self, call) {
      if (call && (typeof call === "object" || typeof call === "function")) {
        return call;
      }

      return _assertThisInitialized(self);
    }

    function _createSuper$1(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$1();

      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived),
            result;

        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;

          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }

        return _possibleConstructorReturn(this, result);
      };
    }

    function _superPropBase(object, property) {
      while (!Object.prototype.hasOwnProperty.call(object, property)) {
        object = _getPrototypeOf(object);
        if (object === null) break;
      }

      return object;
    }

    function _get(target, property, receiver) {
      if (typeof Reflect !== "undefined" && Reflect.get) {
        _get = Reflect.get;
      } else {
        _get = function _get(target, property, receiver) {
          var base = _superPropBase(target, property);

          if (!base) return;
          var desc = Object.getOwnPropertyDescriptor(base, property);

          if (desc.get) {
            return desc.get.call(receiver);
          }

          return desc.value;
        };
      }

      return _get(target, property, receiver || target);
    }

    var Emitter = /*#__PURE__*/function () {
      function Emitter() {
        _classCallCheck(this, Emitter);

        Object.defineProperty(this, 'listeners', {
          value: {},
          writable: true,
          configurable: true
        });
      }

      _createClass(Emitter, [{
        key: "addEventListener",
        value: function addEventListener(type, callback, options) {
          if (!(type in this.listeners)) {
            this.listeners[type] = [];
          }

          this.listeners[type].push({
            callback: callback,
            options: options
          });
        }
      }, {
        key: "removeEventListener",
        value: function removeEventListener(type, callback) {
          if (!(type in this.listeners)) {
            return;
          }

          var stack = this.listeners[type];

          for (var i = 0, l = stack.length; i < l; i++) {
            if (stack[i].callback === callback) {
              stack.splice(i, 1);
              return;
            }
          }
        }
      }, {
        key: "dispatchEvent",
        value: function dispatchEvent(event) {
          if (!(event.type in this.listeners)) {
            return;
          }

          var stack = this.listeners[event.type];
          var stackToCall = stack.slice();

          for (var i = 0, l = stackToCall.length; i < l; i++) {
            var listener = stackToCall[i];

            try {
              listener.callback.call(this, event);
            } catch (e) {
              Promise.resolve().then(function () {
                throw e;
              });
            }

            if (listener.options && listener.options.once) {
              this.removeEventListener(event.type, listener.callback);
            }
          }

          return !event.defaultPrevented;
        }
      }]);

      return Emitter;
    }();

    var AbortSignal$1 = /*#__PURE__*/function (_Emitter) {
      _inherits(AbortSignal, _Emitter);

      var _super = _createSuper$1(AbortSignal);

      function AbortSignal() {
        var _this;

        _classCallCheck(this, AbortSignal);

        _this = _super.call(this); // Some versions of babel does not transpile super() correctly for IE <= 10, if the parent
        // constructor has failed to run, then "this.listeners" will still be undefined and then we call
        // the parent constructor directly instead as a workaround. For general details, see babel bug:
        // https://github.com/babel/babel/issues/3041
        // This hack was added as a fix for the issue described here:
        // https://github.com/Financial-Times/polyfill-library/pull/59#issuecomment-477558042

        if (!_this.listeners) {
          Emitter.call(_assertThisInitialized(_this));
        } // Compared to assignment, Object.defineProperty makes properties non-enumerable by default and
        // we want Object.keys(new AbortController().signal) to be [] for compat with the native impl


        Object.defineProperty(_assertThisInitialized(_this), 'aborted', {
          value: false,
          writable: true,
          configurable: true
        });
        Object.defineProperty(_assertThisInitialized(_this), 'onabort', {
          value: null,
          writable: true,
          configurable: true
        });
        return _this;
      }

      _createClass(AbortSignal, [{
        key: "toString",
        value: function toString() {
          return '[object AbortSignal]';
        }
      }, {
        key: "dispatchEvent",
        value: function dispatchEvent(event) {
          if (event.type === 'abort') {
            this.aborted = true;

            if (typeof this.onabort === 'function') {
              this.onabort.call(this, event);
            }
          }

          _get(_getPrototypeOf(AbortSignal.prototype), "dispatchEvent", this).call(this, event);
        }
      }]);

      return AbortSignal;
    }(Emitter);
    var AbortController$1 = /*#__PURE__*/function () {
      function AbortController() {
        _classCallCheck(this, AbortController);

        // Compared to assignment, Object.defineProperty makes properties non-enumerable by default and
        // we want Object.keys(new AbortController()) to be [] for compat with the native impl
        Object.defineProperty(this, 'signal', {
          value: new AbortSignal$1(),
          writable: true,
          configurable: true
        });
      }

      _createClass(AbortController, [{
        key: "abort",
        value: function abort() {
          var event;

          try {
            event = new Event('abort');
          } catch (e) {
            if (typeof document !== 'undefined') {
              if (!document.createEvent) {
                // For Internet Explorer 8:
                event = document.createEventObject();
                event.type = 'abort';
              } else {
                // For Internet Explorer 11:
                event = document.createEvent('Event');
                event.initEvent('abort', false, false);
              }
            } else {
              // Fallback where document isn't available:
              event = {
                type: 'abort',
                bubbles: false,
                cancelable: false
              };
            }
          }

          this.signal.dispatchEvent(event);
        }
      }, {
        key: "toString",
        value: function toString() {
          return '[object AbortController]';
        }
      }]);

      return AbortController;
    }();

    if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {
      // These are necessary to make sure that we get correct output for:
      // Object.prototype.toString.call(new AbortController())
      AbortController$1.prototype[Symbol.toStringTag] = 'AbortController';
      AbortSignal$1.prototype[Symbol.toStringTag] = 'AbortSignal';
    }

    function polyfillNeeded(self) {
      if (self.__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL) {
        console.log('__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL=true is set, will force install polyfill');
        return true;
      } // Note that the "unfetch" minimal fetch polyfill defines fetch() without
      // defining window.Request, and this polyfill need to work on top of unfetch
      // so the below feature detection needs the !self.AbortController part.
      // The Request.prototype check is also needed because Safari versions 11.1.2
      // up to and including 12.1.x has a window.AbortController present but still
      // does NOT correctly implement abortable fetch:
      // https://bugs.webkit.org/show_bug.cgi?id=174980#c2


      return typeof self.Request === 'function' && !self.Request.prototype.hasOwnProperty('signal') || !self.AbortController;
    }

    /**
     * Note: the "fetch.Request" default value is available for fetch imported from
     * the "node-fetch" package and not in browsers. This is OK since browsers
     * will be importing umd-polyfill.js from that path "self" is passed the
     * decorator so the default value will not be used (because browsers that define
     * fetch also has Request). One quirky setup where self.fetch exists but
     * self.Request does not is when the "unfetch" minimal fetch polyfill is used
     * on top of IE11; for this case the browser will try to use the fetch.Request
     * default value which in turn will be undefined but then then "if (Request)"
     * will ensure that you get a patched fetch but still no Request (as expected).
     * @param {fetch, Request = fetch.Request}
     * @returns {fetch: abortableFetch, Request: AbortableRequest}
     */

    function abortableFetchDecorator(patchTargets) {
      if ('function' === typeof patchTargets) {
        patchTargets = {
          fetch: patchTargets
        };
      }

      var _patchTargets = patchTargets,
          fetch = _patchTargets.fetch,
          _patchTargets$Request = _patchTargets.Request,
          NativeRequest = _patchTargets$Request === void 0 ? fetch.Request : _patchTargets$Request,
          NativeAbortController = _patchTargets.AbortController,
          _patchTargets$__FORCE = _patchTargets.__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL,
          __FORCE_INSTALL_ABORTCONTROLLER_POLYFILL = _patchTargets$__FORCE === void 0 ? false : _patchTargets$__FORCE;

      if (!polyfillNeeded({
        fetch: fetch,
        Request: NativeRequest,
        AbortController: NativeAbortController,
        __FORCE_INSTALL_ABORTCONTROLLER_POLYFILL: __FORCE_INSTALL_ABORTCONTROLLER_POLYFILL
      })) {
        return {
          fetch: fetch,
          Request: Request
        };
      }

      var Request = NativeRequest; // Note that the "unfetch" minimal fetch polyfill defines fetch() without
      // defining window.Request, and this polyfill need to work on top of unfetch
      // hence we only patch it if it's available. Also we don't patch it if signal
      // is already available on the Request prototype because in this case support
      // is present and the patching below can cause a crash since it assigns to
      // request.signal which is technically a read-only property. This latter error
      // happens when you run the main5.js node-fetch example in the repo
      // "abortcontroller-polyfill-examples". The exact error is:
      //   request.signal = init.signal;
      //   ^
      // TypeError: Cannot set property signal of #<Request> which has only a getter

      if (Request && !Request.prototype.hasOwnProperty('signal') || __FORCE_INSTALL_ABORTCONTROLLER_POLYFILL) {
        Request = function Request(input, init) {
          var signal;

          if (init && init.signal) {
            signal = init.signal; // Never pass init.signal to the native Request implementation when the polyfill has
            // been installed because if we're running on top of a browser with a
            // working native AbortController (i.e. the polyfill was installed due to
            // __FORCE_INSTALL_ABORTCONTROLLER_POLYFILL being set), then passing our
            // fake AbortSignal to the native fetch will trigger:
            // TypeError: Failed to construct 'Request': member signal is not of type AbortSignal.

            delete init.signal;
          }

          var request = new NativeRequest(input, init);

          if (signal) {
            Object.defineProperty(request, 'signal', {
              writable: false,
              enumerable: false,
              configurable: true,
              value: signal
            });
          }

          return request;
        };

        Request.prototype = NativeRequest.prototype;
      }

      var realFetch = fetch;

      var abortableFetch = function abortableFetch(input, init) {
        var signal = Request && Request.prototype.isPrototypeOf(input) ? input.signal : init ? init.signal : undefined;

        if (signal) {
          var abortError;

          try {
            abortError = new DOMException('Aborted', 'AbortError');
          } catch (err) {
            // IE 11 does not support calling the DOMException constructor, use a
            // regular error object on it instead.
            abortError = new Error('Aborted');
            abortError.name = 'AbortError';
          } // Return early if already aborted, thus avoiding making an HTTP request


          if (signal.aborted) {
            return Promise.reject(abortError);
          } // Turn an event into a promise, reject it once `abort` is dispatched


          var cancellation = new Promise(function (_, reject) {
            signal.addEventListener('abort', function () {
              return reject(abortError);
            }, {
              once: true
            });
          });

          if (init && init.signal) {
            // Never pass .signal to the native implementation when the polyfill has
            // been installed because if we're running on top of a browser with a
            // working native AbortController (i.e. the polyfill was installed due to
            // __FORCE_INSTALL_ABORTCONTROLLER_POLYFILL being set), then passing our
            // fake AbortSignal to the native fetch will trigger:
            // TypeError: Failed to execute 'fetch' on 'Window': member signal is not of type AbortSignal.
            delete init.signal;
          } // Return the fastest promise (don't need to wait for request to finish)


          return Promise.race([cancellation, realFetch(input, init)]);
        }

        return realFetch(input, init);
      };

      return {
        fetch: abortableFetch,
        Request: Request
      };
    }

    cjsPonyfill.AbortController = AbortController$1;
    cjsPonyfill.AbortSignal = AbortSignal$1;
    cjsPonyfill.abortableFetch = abortableFetchDecorator;

    /* eslint-disable */
    if (typeof AbortController === 'undefined') {
      var _require$1 = cjsPonyfill,
          _AbortController = _require$1.AbortController,
          _AbortSignal = _require$1.AbortSignal;

      abortcontrollerPonyfill.exports = {
        AbortController: _AbortController,
        AbortSignal: _AbortSignal
      };
    } else {
      abortcontrollerPonyfill.exports = {
        AbortController: AbortController,
        AbortSignal: AbortSignal
      };
    }

    var _interopRequireDefault$2 = interopRequireDefault.exports;

    var _slicedToArray2$1 = _interopRequireDefault$2(slicedToArray.exports);

    var _classCallCheck2$2 = _interopRequireDefault$2(classCallCheck.exports);

    var _createClass2$2 = _interopRequireDefault$2(createClass.exports);

    var _object = _interopRequireDefault$2(object_entriesPonyfill);

    var _abortcontrollerPonyfill = abortcontrollerPonyfill.exports;

    /**
     * takes fetch requests and aggregates them at a certain time frequency
     */
    var AggregatingFetcher$1 =
    /*#__PURE__*/
    function () {
      /**
       *
       * @param {object} params
       * @param {number} [params.frequency] number of milliseconds to wait for requests to aggregate
       */
      function AggregatingFetcher(_ref) {
        var _ref$frequency = _ref.frequency,
            frequency = _ref$frequency === void 0 ? 100 : _ref$frequency,
            fetch = _ref.fetch,
            _ref$maxExtraSize = _ref.maxExtraSize,
            maxExtraSize = _ref$maxExtraSize === void 0 ? 32000 : _ref$maxExtraSize,
            _ref$maxFetchSize = _ref.maxFetchSize,
            maxFetchSize = _ref$maxFetchSize === void 0 ? 1000000 : _ref$maxFetchSize;
        (0, _classCallCheck2$2.default)(this, AggregatingFetcher);
        this.requestQueues = {}; // url => array of requests

        this.fetchCallback = fetch;
        this.frequency = frequency;
        this.maxExtraSize = maxExtraSize;
        this.maxFetchSize = maxFetchSize;
      }

      (0, _createClass2$2.default)(AggregatingFetcher, [{
        key: "_canAggregate",
        value: function _canAggregate(requestGroup, request) {
          return (// the fetches overlap, or come close
            request.start <= requestGroup.end + this.maxExtraSize && // aggregating would not result in a fetch that is too big
            request.end - request.start + requestGroup.end - requestGroup.start < this.maxFetchSize
          );
        } // returns a promise that only resolves
        // when all of the signals in the given array
        // have fired their abort signal

      }, {
        key: "_allSignalsFired",
        value: function _allSignalsFired(signals) {
          return new Promise(function (resolve) {
            var signalsLeft = signals.filter(function (s) {
              return !s.aborted;
            }).length;
            signals.forEach(function (signal) {
              signal.addEventListener('abort', function () {
                signalsLeft -= 1; // console.log('aggregatingfetcher received an abort')

                if (!signalsLeft) {
                  // console.log('aggregatingfetcher aborting aggegated request')
                  resolve();
                }
              });
            });
          }).catch(function (e) {
            // eslint-disable-next-line no-console
            console.error(e);
          });
        } // dispatch a request group as a single request
        // and then slice the result back up to satisfy
        // the individual requests

      }, {
        key: "_dispatch",
        value: function _dispatch(_ref2) {
          var url = _ref2.url,
              start = _ref2.start,
              end = _ref2.end,
              requests = _ref2.requests;
          // if any of the requests have an AbortSignal `signal` in their requestOptions,
          // make our aggregating abortcontroller track it, aborting the request if
          // all of the abort signals that are aggregated here have fired
          var abortWholeRequest = new _abortcontrollerPonyfill.AbortController();
          var signals = [];
          requests.forEach(function (_ref3) {
            var requestOptions = _ref3.requestOptions;
            if (requestOptions && requestOptions.signal) signals.push(requestOptions.signal);
          });

          if (signals.length === requests.length) {
            this._allSignalsFired(signals).then(function () {
              return abortWholeRequest.abort();
            });
          }

          this.fetchCallback(url, start, end - 1, {
            signal: abortWholeRequest.signal
          }).then(function (response) {
            var data = response.buffer;
            requests.forEach(function (_ref4) {
              var reqStart = _ref4.start,
                  reqEnd = _ref4.end,
                  resolve = _ref4.resolve;
              // remember Buffer.slice does not copy, it creates
              // an offset child buffer pointing to the same data
              resolve({
                headers: response.headers,
                buffer: data.slice(reqStart - start, reqEnd - start)
              });
            });
          }, function (err) {
            requests.forEach(function (_ref5) {
              var reject = _ref5.reject;
              return reject(err);
            });
          });
        }
      }, {
        key: "_aggregateAndDispatch",
        value: function _aggregateAndDispatch() {
          var _this = this;

          (0, _object.default)(this.requestQueues).forEach(function (_ref6) {
            var _ref7 = (0, _slicedToArray2$1.default)(_ref6, 2),
                url = _ref7[0],
                requests = _ref7[1];

            if (!requests || !requests.length) return; // console.log(url, requests)
            // we are now going to aggregate the requests in this url's queue
            // into groups of requests that can be dispatched as one

            var requestsToDispatch = []; // look to see if any of the requests are aborted, and if they are, just
            // reject them now and forget about them

            requests.forEach(function (request) {
              var requestOptions = request.requestOptions,
                  reject = request.reject;

              if (requestOptions && requestOptions.signal && requestOptions.signal.aborted) {
                reject(Object.assign(new Error('aborted'), {
                  code: 'ERR_ABORTED'
                }));
              } else {
                requestsToDispatch.push(request);
              }
            });
            requestsToDispatch.sort(function (a, b) {
              return a.start - b.start;
            }); // eslint-disable-next-line no-param-reassign

            requests.length = 0;
            if (!requestsToDispatch.length) return;
            var currentRequestGroup;

            for (var i = 0; i < requestsToDispatch.length; i += 1) {
              var next = requestsToDispatch[i];

              if (currentRequestGroup && _this._canAggregate(currentRequestGroup, next)) {
                // aggregate it into the current group
                currentRequestGroup.requests.push(next);
                currentRequestGroup.end = next.end;
              } else {
                // out of range, dispatch the current request group
                if (currentRequestGroup) _this._dispatch(currentRequestGroup); // and start on a new one

                currentRequestGroup = {
                  requests: [next],
                  url: url,
                  start: next.start,
                  end: next.end
                };
              }
            }

            if (currentRequestGroup) _this._dispatch(currentRequestGroup);
          });
        }
      }, {
        key: "_enQueue",
        value: function _enQueue(url, request) {
          if (!this.requestQueues[url]) this.requestQueues[url] = [];
          this.requestQueues[url].push(request);
        }
        /**
         *
         * @param {string} url
         * @param {number} start 0-based half-open
         * @param {number} end 0-based half-open
         * @param {object} [requestOptions] options passed to the underlying fetch call
         */

      }, {
        key: "fetch",
        value: function fetch(url, start, end) {
          var _this2 = this;

          var requestOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
          return new Promise(function (resolve, reject) {
            _this2._enQueue(url, {
              start: start,
              end: end,
              resolve: resolve,
              reject: reject,
              requestOptions: requestOptions
            });

            if (!_this2.timeout) {
              _this2.timeout = setTimeout(function () {
                _this2.timeout = undefined;

                _this2._aggregateAndDispatch();
              }, _this2.frequency || 1);
            }
          });
        }
      }]);
      return AggregatingFetcher;
    }();

    var aggregatingFetcher = AggregatingFetcher$1;

    var browserPonyfill = {exports: {}};

    (function (module) {
    var __root__ = (function (root) {
    function F() { this.fetch = false; }
    F.prototype = root;
    return new F();
    })(typeof self !== 'undefined' ? self : commonjsGlobal);
    (function(self) {

    (function(self) {

      if (self.fetch) {
        return
      }

      var support = {
        searchParams: 'URLSearchParams' in self,
        iterable: 'Symbol' in self && 'iterator' in Symbol,
        blob: 'FileReader' in self && 'Blob' in self && (function() {
          try {
            new Blob();
            return true
          } catch(e) {
            return false
          }
        })(),
        formData: 'FormData' in self,
        arrayBuffer: 'ArrayBuffer' in self
      };

      if (support.arrayBuffer) {
        var viewClasses = [
          '[object Int8Array]',
          '[object Uint8Array]',
          '[object Uint8ClampedArray]',
          '[object Int16Array]',
          '[object Uint16Array]',
          '[object Int32Array]',
          '[object Uint32Array]',
          '[object Float32Array]',
          '[object Float64Array]'
        ];

        var isDataView = function(obj) {
          return obj && DataView.prototype.isPrototypeOf(obj)
        };

        var isArrayBufferView = ArrayBuffer.isView || function(obj) {
          return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
        };
      }

      function normalizeName(name) {
        if (typeof name !== 'string') {
          name = String(name);
        }
        if (/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name)) {
          throw new TypeError('Invalid character in header field name')
        }
        return name.toLowerCase()
      }

      function normalizeValue(value) {
        if (typeof value !== 'string') {
          value = String(value);
        }
        return value
      }

      // Build a destructive iterator for the value list
      function iteratorFor(items) {
        var iterator = {
          next: function() {
            var value = items.shift();
            return {done: value === undefined, value: value}
          }
        };

        if (support.iterable) {
          iterator[Symbol.iterator] = function() {
            return iterator
          };
        }

        return iterator
      }

      function Headers(headers) {
        this.map = {};

        if (headers instanceof Headers) {
          headers.forEach(function(value, name) {
            this.append(name, value);
          }, this);
        } else if (Array.isArray(headers)) {
          headers.forEach(function(header) {
            this.append(header[0], header[1]);
          }, this);
        } else if (headers) {
          Object.getOwnPropertyNames(headers).forEach(function(name) {
            this.append(name, headers[name]);
          }, this);
        }
      }

      Headers.prototype.append = function(name, value) {
        name = normalizeName(name);
        value = normalizeValue(value);
        var oldValue = this.map[name];
        this.map[name] = oldValue ? oldValue+','+value : value;
      };

      Headers.prototype['delete'] = function(name) {
        delete this.map[normalizeName(name)];
      };

      Headers.prototype.get = function(name) {
        name = normalizeName(name);
        return this.has(name) ? this.map[name] : null
      };

      Headers.prototype.has = function(name) {
        return this.map.hasOwnProperty(normalizeName(name))
      };

      Headers.prototype.set = function(name, value) {
        this.map[normalizeName(name)] = normalizeValue(value);
      };

      Headers.prototype.forEach = function(callback, thisArg) {
        for (var name in this.map) {
          if (this.map.hasOwnProperty(name)) {
            callback.call(thisArg, this.map[name], name, this);
          }
        }
      };

      Headers.prototype.keys = function() {
        var items = [];
        this.forEach(function(value, name) { items.push(name); });
        return iteratorFor(items)
      };

      Headers.prototype.values = function() {
        var items = [];
        this.forEach(function(value) { items.push(value); });
        return iteratorFor(items)
      };

      Headers.prototype.entries = function() {
        var items = [];
        this.forEach(function(value, name) { items.push([name, value]); });
        return iteratorFor(items)
      };

      if (support.iterable) {
        Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
      }

      function consumed(body) {
        if (body.bodyUsed) {
          return Promise.reject(new TypeError('Already read'))
        }
        body.bodyUsed = true;
      }

      function fileReaderReady(reader) {
        return new Promise(function(resolve, reject) {
          reader.onload = function() {
            resolve(reader.result);
          };
          reader.onerror = function() {
            reject(reader.error);
          };
        })
      }

      function readBlobAsArrayBuffer(blob) {
        var reader = new FileReader();
        var promise = fileReaderReady(reader);
        reader.readAsArrayBuffer(blob);
        return promise
      }

      function readBlobAsText(blob) {
        var reader = new FileReader();
        var promise = fileReaderReady(reader);
        reader.readAsText(blob);
        return promise
      }

      function readArrayBufferAsText(buf) {
        var view = new Uint8Array(buf);
        var chars = new Array(view.length);

        for (var i = 0; i < view.length; i++) {
          chars[i] = String.fromCharCode(view[i]);
        }
        return chars.join('')
      }

      function bufferClone(buf) {
        if (buf.slice) {
          return buf.slice(0)
        } else {
          var view = new Uint8Array(buf.byteLength);
          view.set(new Uint8Array(buf));
          return view.buffer
        }
      }

      function Body() {
        this.bodyUsed = false;

        this._initBody = function(body) {
          this._bodyInit = body;
          if (!body) {
            this._bodyText = '';
          } else if (typeof body === 'string') {
            this._bodyText = body;
          } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
            this._bodyBlob = body;
          } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
            this._bodyFormData = body;
          } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
            this._bodyText = body.toString();
          } else if (support.arrayBuffer && support.blob && isDataView(body)) {
            this._bodyArrayBuffer = bufferClone(body.buffer);
            // IE 10-11 can't handle a DataView body.
            this._bodyInit = new Blob([this._bodyArrayBuffer]);
          } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
            this._bodyArrayBuffer = bufferClone(body);
          } else {
            throw new Error('unsupported BodyInit type')
          }

          if (!this.headers.get('content-type')) {
            if (typeof body === 'string') {
              this.headers.set('content-type', 'text/plain;charset=UTF-8');
            } else if (this._bodyBlob && this._bodyBlob.type) {
              this.headers.set('content-type', this._bodyBlob.type);
            } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
              this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
            }
          }
        };

        if (support.blob) {
          this.blob = function() {
            var rejected = consumed(this);
            if (rejected) {
              return rejected
            }

            if (this._bodyBlob) {
              return Promise.resolve(this._bodyBlob)
            } else if (this._bodyArrayBuffer) {
              return Promise.resolve(new Blob([this._bodyArrayBuffer]))
            } else if (this._bodyFormData) {
              throw new Error('could not read FormData body as blob')
            } else {
              return Promise.resolve(new Blob([this._bodyText]))
            }
          };

          this.arrayBuffer = function() {
            if (this._bodyArrayBuffer) {
              return consumed(this) || Promise.resolve(this._bodyArrayBuffer)
            } else {
              return this.blob().then(readBlobAsArrayBuffer)
            }
          };
        }

        this.text = function() {
          var rejected = consumed(this);
          if (rejected) {
            return rejected
          }

          if (this._bodyBlob) {
            return readBlobAsText(this._bodyBlob)
          } else if (this._bodyArrayBuffer) {
            return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
          } else if (this._bodyFormData) {
            throw new Error('could not read FormData body as text')
          } else {
            return Promise.resolve(this._bodyText)
          }
        };

        if (support.formData) {
          this.formData = function() {
            return this.text().then(decode)
          };
        }

        this.json = function() {
          return this.text().then(JSON.parse)
        };

        return this
      }

      // HTTP methods whose capitalization should be normalized
      var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];

      function normalizeMethod(method) {
        var upcased = method.toUpperCase();
        return (methods.indexOf(upcased) > -1) ? upcased : method
      }

      function Request(input, options) {
        options = options || {};
        var body = options.body;

        if (input instanceof Request) {
          if (input.bodyUsed) {
            throw new TypeError('Already read')
          }
          this.url = input.url;
          this.credentials = input.credentials;
          if (!options.headers) {
            this.headers = new Headers(input.headers);
          }
          this.method = input.method;
          this.mode = input.mode;
          if (!body && input._bodyInit != null) {
            body = input._bodyInit;
            input.bodyUsed = true;
          }
        } else {
          this.url = String(input);
        }

        this.credentials = options.credentials || this.credentials || 'omit';
        if (options.headers || !this.headers) {
          this.headers = new Headers(options.headers);
        }
        this.method = normalizeMethod(options.method || this.method || 'GET');
        this.mode = options.mode || this.mode || null;
        this.referrer = null;

        if ((this.method === 'GET' || this.method === 'HEAD') && body) {
          throw new TypeError('Body not allowed for GET or HEAD requests')
        }
        this._initBody(body);
      }

      Request.prototype.clone = function() {
        return new Request(this, { body: this._bodyInit })
      };

      function decode(body) {
        var form = new FormData();
        body.trim().split('&').forEach(function(bytes) {
          if (bytes) {
            var split = bytes.split('=');
            var name = split.shift().replace(/\+/g, ' ');
            var value = split.join('=').replace(/\+/g, ' ');
            form.append(decodeURIComponent(name), decodeURIComponent(value));
          }
        });
        return form
      }

      function parseHeaders(rawHeaders) {
        var headers = new Headers();
        // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
        // https://tools.ietf.org/html/rfc7230#section-3.2
        var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ');
        preProcessedHeaders.split(/\r?\n/).forEach(function(line) {
          var parts = line.split(':');
          var key = parts.shift().trim();
          if (key) {
            var value = parts.join(':').trim();
            headers.append(key, value);
          }
        });
        return headers
      }

      Body.call(Request.prototype);

      function Response(bodyInit, options) {
        if (!options) {
          options = {};
        }

        this.type = 'default';
        this.status = options.status === undefined ? 200 : options.status;
        this.ok = this.status >= 200 && this.status < 300;
        this.statusText = 'statusText' in options ? options.statusText : 'OK';
        this.headers = new Headers(options.headers);
        this.url = options.url || '';
        this._initBody(bodyInit);
      }

      Body.call(Response.prototype);

      Response.prototype.clone = function() {
        return new Response(this._bodyInit, {
          status: this.status,
          statusText: this.statusText,
          headers: new Headers(this.headers),
          url: this.url
        })
      };

      Response.error = function() {
        var response = new Response(null, {status: 0, statusText: ''});
        response.type = 'error';
        return response
      };

      var redirectStatuses = [301, 302, 303, 307, 308];

      Response.redirect = function(url, status) {
        if (redirectStatuses.indexOf(status) === -1) {
          throw new RangeError('Invalid status code')
        }

        return new Response(null, {status: status, headers: {location: url}})
      };

      self.Headers = Headers;
      self.Request = Request;
      self.Response = Response;

      self.fetch = function(input, init) {
        return new Promise(function(resolve, reject) {
          var request = new Request(input, init);
          var xhr = new XMLHttpRequest();

          xhr.onload = function() {
            var options = {
              status: xhr.status,
              statusText: xhr.statusText,
              headers: parseHeaders(xhr.getAllResponseHeaders() || '')
            };
            options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
            var body = 'response' in xhr ? xhr.response : xhr.responseText;
            resolve(new Response(body, options));
          };

          xhr.onerror = function() {
            reject(new TypeError('Network request failed'));
          };

          xhr.ontimeout = function() {
            reject(new TypeError('Network request failed'));
          };

          xhr.open(request.method, request.url, true);

          if (request.credentials === 'include') {
            xhr.withCredentials = true;
          } else if (request.credentials === 'omit') {
            xhr.withCredentials = false;
          }

          if ('responseType' in xhr && support.blob) {
            xhr.responseType = 'blob';
          }

          request.headers.forEach(function(value, name) {
            xhr.setRequestHeader(name, value);
          });

          xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
        })
      };
      self.fetch.polyfill = true;
    })(typeof self !== 'undefined' ? self : this);
    }).call(__root__, void(0));
    var fetch = __root__.fetch;
    fetch.Response = __root__.Response;
    fetch.Request = __root__.Request;
    fetch.Headers = __root__.Headers;
    if (module.exports) {
    module.exports = fetch;
    // Needed for TypeScript consumers without esModuleInterop.
    module.exports.default = fetch;
    }
    }(browserPonyfill));

    var crossFetch = browserPonyfill.exports;

    function crossFetchBinaryRange$1(url, start, end) {
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      var requestDate = new Date();
      var fetchOptions = Object.assign({
        method: 'GET',
        headers: {
          range: "bytes=".concat(start, "-").concat(end)
        }
      }, options);
      return crossFetch(url, fetchOptions).then(function (res) {
        var responseDate = new Date();
        if (res.status !== 206 && res.status !== 200) throw new Error("HTTP ".concat(res.status, " when fetching ").concat(url, " bytes ").concat(start, "-").concat(end));

        if (res.status === 200) {
          // TODO: check that the response satisfies the byte range,
          // and is not too big (check maximum size),
          // because we actually ended up getting served the whole file
          throw new Error("HTTP ".concat(res.status, " when fetching ").concat(url, " bytes ").concat(start, "-").concat(end));
        }

        var bufPromise = res.buffer ? res.buffer() : res.arrayBuffer().then(function (arrayBuffer) {
          return Buffer.from(arrayBuffer);
        }); // return the response headers, and the data buffer

        return bufPromise.then(function (buffer) {
          return {
            headers: res.headers.map,
            requestDate: requestDate,
            responseDate: responseDate,
            buffer: buffer
          };
        });
      });
    }

    var crossFetchBinaryRange_1 = crossFetchBinaryRange$1;

    var _interopRequireDefault$1 = interopRequireDefault.exports;

    var _toConsumableArray2 = _interopRequireDefault$1(toConsumableArray.exports);

    var _regenerator$1 = _interopRequireDefault$1(regenerator);

    var _asyncToGenerator2$1 = _interopRequireDefault$1(asyncToGenerator.exports);

    var _classCallCheck2$1 = _interopRequireDefault$1(classCallCheck.exports);

    var _createClass2$1 = _interopRequireDefault$1(createClass.exports);

    var LRU = quickLru;

    var _require = cacheSemantics,
        CacheSemantics = _require.CacheSemantics;

    var AggregatingFetcher = aggregatingFetcher;

    var crossFetchBinaryRange = crossFetchBinaryRange_1;
    /**
     * check if the given exception was caused by an operation being intentionally aborted
     * @param {Error} exception
     * @returns {boolean}
     */


    function isAbortException(exception) {
      return (// DOMException
        exception.name === 'AbortError' || // standard-ish non-DOM abort exception
        // @ts-ignore
        exception.code === 'ERR_ABORTED' || // message contains aborted for bubbling through RPC
        // things we have seen that we want to catch here
        // Error: aborted
        // AbortError: aborted
        // AbortError: The user aborted a request.
        !!exception.message.match(/\b(aborted|AbortError)\b/i)
      );
    } // TODO: fire events when a remote file is detected as having been changed

    /**
     * smart cache that fetches chunks of remote files.
     * caches chunks in an LRU cache, and aggregates upstream fetches
     */


    var HttpRangeFetcher$1 =
    /*#__PURE__*/
    function () {
      /**
       * @param {object} args the arguments object
       * @param {number} [args.fetch] callback with signature `(key, start, end) => Promise({ headers, buffer })`
       * @param {number} [args.size] size in bytes of cache to keep
       * @param {number} [args.chunkSize] size in bytes of cached chunks
       * @param {number} [args.aggregationTime] time in ms over which to pool requests before dispatching them
       * @param {number} [args.minimumTTL] time in ms a non-cacheable response will be cached
       * @param {number} [args.maxFetchSize] maximum size of an aggregated request
       * @param {number} [args.maxExtraFetch] max number of additional bytes to fetch when aggregating requests
       * that don't actually overlap
       */
      function HttpRangeFetcher(_ref) {
        var _ref$fetch = _ref.fetch,
            fetch = _ref$fetch === void 0 ? crossFetchBinaryRange : _ref$fetch,
            _ref$size = _ref.size,
            size = _ref$size === void 0 ? 10000000 : _ref$size,
            _ref$chunkSize = _ref.chunkSize,
            chunkSize = _ref$chunkSize === void 0 ? 32768 : _ref$chunkSize,
            _ref$aggregationTime = _ref.aggregationTime,
            aggregationTime = _ref$aggregationTime === void 0 ? 100 : _ref$aggregationTime,
            _ref$minimumTTL = _ref.minimumTTL,
            minimumTTL = _ref$minimumTTL === void 0 ? 1000 : _ref$minimumTTL,
            _ref$maxFetchSize = _ref.maxFetchSize,
            maxFetchSize = _ref$maxFetchSize === void 0 ? chunkSize * 4 : _ref$maxFetchSize,
            _ref$maxExtraFetch = _ref.maxExtraFetch,
            maxExtraFetch = _ref$maxExtraFetch === void 0 ? chunkSize : _ref$maxExtraFetch;
        (0, _classCallCheck2$1.default)(this, HttpRangeFetcher);
        this.aggregator = new AggregatingFetcher({
          fetch: fetch,
          frequency: aggregationTime,
          maxFetchSize: maxFetchSize,
          maxExtraSize: maxExtraFetch
        });
        this.chunkSize = chunkSize;
        this.chunkCache = new LRU({
          maxSize: Math.floor(size / chunkSize) || 1
        });
        this.cacheSemantics = new CacheSemantics({
          minimumTTL: minimumTTL
        });
        this.stats = new LRU({
          maxSize: 20
        });
      }
      /**
       * Fetch a range of a remote resource.
       * @param {string} key the resource's unique identifier, this would usually be a URL.
       * This is passed along to the fetch callback.
       * @param {number} [position] offset in the file at which to start fetching
       * @param {number} [length] number of bytes to fetch, defaults to the remainder of the file
       * @param {object} [options] request options
       * @param {AbortSignal} [options.signal] AbortSignal object that can be used to abort the fetch
       */


      (0, _createClass2$1.default)(HttpRangeFetcher, [{
        key: "getRange",
        value: function () {
          var _getRange = (0, _asyncToGenerator2$1.default)(
          /*#__PURE__*/
          _regenerator$1.default.mark(function _callee(key) {
            var _this = this;

            var position,
                requestedLength,
                options,
                length,
                stat,
                firstChunk,
                lastChunk,
                fetches,
                _loop,
                chunk,
                chunkResponses,
                chunksOffset,
                _args = arguments;

            return _regenerator$1.default.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    position = _args.length > 1 && _args[1] !== undefined ? _args[1] : 0;
                    requestedLength = _args.length > 2 ? _args[2] : undefined;
                    options = _args.length > 3 && _args[3] !== undefined ? _args[3] : {};
                    length = requestedLength;

                    if (!(length === undefined)) {
                      _context.next = 11;
                      break;
                    }

                    _context.next = 7;
                    return this.stat(key);

                  case 7:
                    stat = _context.sent;

                    if (!(stat.size === undefined)) {
                      _context.next = 10;
                      break;
                    }

                    throw new Error("length not specified, and could not determine size of the remote file");

                  case 10:
                    length = stat.size - position;

                  case 11:
                    // calculate the list of chunks involved in this fetch
                    firstChunk = Math.floor(position / this.chunkSize);
                    lastChunk = Math.floor((position + length - 1) / this.chunkSize); // fetch them all as necessary

                    fetches = new Array(lastChunk - firstChunk + 1);

                    _loop = function _loop(chunk) {
                      fetches[chunk - firstChunk] = _this._getChunk(key, chunk, options).then(function (response) {
                        return response && {
                          headers: response.headers,
                          buffer: response.buffer,
                          chunkNumber: chunk
                        };
                      });
                    };

                    for (chunk = firstChunk; chunk <= lastChunk; chunk += 1) {
                      _loop(chunk);
                    } // return a "composite buffer" that lets the array of chunks be accessed like a flat buffer


                    _context.next = 18;
                    return Promise.all(fetches);

                  case 18:
                    chunkResponses = _context.sent;
                    chunkResponses = chunkResponses.filter(function (r) {
                      return !!r;
                    }); // filter out any undefined (out of range) responses

                    if (chunkResponses.length) {
                      _context.next = 22;
                      break;
                    }

                    return _context.abrupt("return", {
                      headers: {},
                      buffer: Buffer.allocUnsafe(0)
                    });

                  case 22:
                    chunksOffset = position - chunkResponses[0].chunkNumber * this.chunkSize;
                    return _context.abrupt("return", {
                      headers: this._makeHeaders(chunkResponses[0].headers, position, position + length - 1),
                      buffer: this._makeBuffer(chunkResponses, chunksOffset, length)
                    });

                  case 24:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this);
          }));

          function getRange(_x) {
            return _getRange.apply(this, arguments);
          }

          return getRange;
        }()
      }, {
        key: "_makeBuffer",
        value: function _makeBuffer(chunkResponses, chunksOffset, length) {
          if (chunkResponses.length === 1) {
            return chunkResponses[0].buffer.slice(chunksOffset, chunksOffset + length);
          } else if (chunkResponses.length === 0) {
            return Buffer.allocUnsafe(0);
          } // 2 or more buffers


          var buffers = chunkResponses.map(function (r) {
            return r.buffer;
          });
          var first = buffers.shift().slice(chunksOffset);
          var last = buffers.pop();
          var trimEnd = first.length + buffers.reduce(function (sum, buf) {
            return sum + buf.length;
          }, 0) + last.length - length;

          if (trimEnd < 0) {
            trimEnd = 0;
          }

          last = last.slice(0, last.length - trimEnd);
          return Buffer.concat([first].concat((0, _toConsumableArray2.default)(buffers), [last]));
        }
        /**
         * Fetches the first few bytes of the remote file (if necessary) and uses
         * the returned headers to populate a `fs`-like stat object.
         *
         * Currently, this attempts to set `size`, `mtime`, and `mtimeMs`, if
         * the information is available from HTTP headers.
         *
         * @param {string} key
         * @returns {Promise} for a stats object
         */

      }, {
        key: "stat",
        value: function () {
          var _stat = (0, _asyncToGenerator2$1.default)(
          /*#__PURE__*/
          _regenerator$1.default.mark(function _callee2(key) {
            var stat, chunk;
            return _regenerator$1.default.wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    stat = this.stats.get(key);

                    if (stat) {
                      _context2.next = 9;
                      break;
                    }

                    _context2.next = 4;
                    return this._getChunk(key, 0);

                  case 4:
                    chunk = _context2.sent;

                    this._recordStatsIfNecessary(key, chunk);

                    stat = this.stats.get(key);

                    if (stat) {
                      _context2.next = 9;
                      break;
                    }

                    throw new Error("failed to retrieve file size for ".concat(key));

                  case 9:
                    return _context2.abrupt("return", stat);

                  case 10:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2, this);
          }));

          function stat(_x2) {
            return _stat.apply(this, arguments);
          }

          return stat;
        }()
      }, {
        key: "_headersToStats",
        value: function _headersToStats(chunkResponse) {
          var headers = chunkResponse.headers;
          var stat = {};

          if (headers['content-range']) {
            var match = headers['content-range'].match(/\d+-\d+\/(\d+)/);

            if (match) {
              stat.size = parseInt(match[1], 10);
              if (Number.isNaN(stat.size)) delete stat.size;
            }
          }

          if (headers['last-modified']) {
            stat.mtime = new Date(headers['last-modified']);
            if (stat.mtime.toString() === 'Invalid Date') delete stat.mtime;

            if (stat.mtime) {
              stat.mtimeMs = stat.mtime.getTime();
            }
          }

          return stat;
        }
      }, {
        key: "_makeHeaders",
        value: function _makeHeaders(originalHeaders, newStart, newEnd) {
          var newHeaders = Object.assign({}, originalHeaders || {});
          newHeaders['content-length'] = newEnd - newStart;
          var oldContentRange = newHeaders['content-range'] || '';
          var match = oldContentRange.match(/\d+-\d+\/(\d+)/);

          if (match) {
            newHeaders['content-range'] = "".concat(newStart, "-").concat(newEnd - 1, "/").concat(match[1]); // eslint-disable-next-line prefer-destructuring

            newHeaders['x-resource-length'] = match[1];
          }

          return newHeaders;
        }
      }, {
        key: "_getChunk",
        value: function () {
          var _getChunk2 = (0, _asyncToGenerator2$1.default)(
          /*#__PURE__*/
          _regenerator$1.default.mark(function _callee3(key, chunkNumber, requestOptions) {
            var _this2 = this;

            var chunkKey, cachedPromise, chunk, chunkAborted, fetchStart, fetchEnd, stat, alreadyRejected, freshPromise, freshChunk;
            return _regenerator$1.default.wrap(function _callee3$(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    chunkKey = "".concat(key, "/").concat(chunkNumber);
                    cachedPromise = this.chunkCache.get(chunkKey);

                    if (!cachedPromise) {
                      _context3.next = 21;
                      break;
                    }

                    _context3.prev = 3;
                    _context3.next = 6;
                    return cachedPromise;

                  case 6:
                    chunk = _context3.sent;
                    _context3.next = 16;
                    break;

                  case 9:
                    _context3.prev = 9;
                    _context3.t0 = _context3["catch"](3);

                    if (!isAbortException(_context3.t0)) {
                      _context3.next = 15;
                      break;
                    }

                    // fetch was aborted
                    chunkAborted = true;
                    _context3.next = 16;
                    break;

                  case 15:
                    throw _context3.t0;

                  case 16:
                    if (!(chunkAborted || !this.cacheSemantics.cachedChunkIsValid(chunk))) {
                      _context3.next = 19;
                      break;
                    }

                    this._uncacheIfSame(chunkKey, cachedPromise);

                    return _context3.abrupt("return", this._getChunk(key, chunkNumber, requestOptions));

                  case 19:
                    // gather the stats for the file from the headers
                    this._recordStatsIfNecessary(key, chunk);

                    return _context3.abrupt("return", chunk);

                  case 21:
                    fetchStart = chunkNumber * this.chunkSize;
                    fetchEnd = fetchStart + this.chunkSize; // clamp the end of the fetch to the size if we have a cached size for the file

                    stat = this.stats.get(key);

                    if (!(stat && stat.size)) {
                      _context3.next = 28;
                      break;
                    }

                    if (!(fetchStart >= stat.size)) {
                      _context3.next = 27;
                      break;
                    }

                    return _context3.abrupt("return", undefined);

                  case 27:
                    if (fetchEnd >= stat.size) fetchEnd = stat.size;

                  case 28:
                    alreadyRejected = false;
                    freshPromise = this.aggregator.fetch(key, fetchStart, fetchEnd, requestOptions).catch(function (err) {
                      // if the request fails, remove its promise
                      // from the cache and keep the error
                      alreadyRejected = true;

                      _this2._uncacheIfSame(chunkKey, freshPromise);

                      throw err;
                    });
                    if (!alreadyRejected) this.chunkCache.set(chunkKey, freshPromise);
                    _context3.next = 33;
                    return freshPromise;

                  case 33:
                    freshChunk = _context3.sent;

                    // gather the stats for the file from the headers
                    this._recordStatsIfNecessary(key, freshChunk); // remove the promise from the cache
                    // if it turns out not to be cacheable. this is
                    // done after the fact because we want multiple requests
                    // for the same chunk to reuse the same cached promise


                    if (!this.cacheSemantics.chunkIsCacheable(freshChunk)) {
                      this._uncacheIfSame(chunkKey, freshPromise);
                    }

                    return _context3.abrupt("return", freshChunk);

                  case 37:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee3, this, [[3, 9]]);
          }));

          function _getChunk(_x3, _x4, _x5) {
            return _getChunk2.apply(this, arguments);
          }

          return _getChunk;
        }() // if the stats for a resource haven't been recorded yet, record them

      }, {
        key: "_recordStatsIfNecessary",
        value: function _recordStatsIfNecessary(key, chunk) {
          if (!this.stats.has(key)) this.stats.set(key, this._headersToStats(chunk));
        } // delete a promise from the cache if it is still in there.
        // need to check if it is still the same because it might
        // have been overwritten sometime while the promise was in flight

      }, {
        key: "_uncacheIfSame",
        value: function _uncacheIfSame(key, cachedPromise) {
          if (this.chunkCache.get(key) === cachedPromise) {
            this.chunkCache.delete(key);
          }
        }
        /**
         * Throw away all cached data, resetting the cache.
         */

      }, {
        key: "reset",
        value: function reset() {
          this.stats.clear();
          this.chunkCache.clear();
        }
      }]);
      return HttpRangeFetcher;
    }();

    var httpRangeFetcher = HttpRangeFetcher$1;

    var HttpRangeFetcher = httpRangeFetcher;

    var dist$1 = {
      HttpRangeFetcher: HttpRangeFetcher
    };

    var lookup = [];
    var revLookup = [];
    var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
    var inited = false;
    function init () {
      inited = true;
      var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
      for (var i = 0, len = code.length; i < len; ++i) {
        lookup[i] = code[i];
        revLookup[code.charCodeAt(i)] = i;
      }

      revLookup['-'.charCodeAt(0)] = 62;
      revLookup['_'.charCodeAt(0)] = 63;
    }

    function toByteArray (b64) {
      if (!inited) {
        init();
      }
      var i, j, l, tmp, placeHolders, arr;
      var len = b64.length;

      if (len % 4 > 0) {
        throw new Error('Invalid string. Length must be a multiple of 4')
      }

      // the number of equal signs (place holders)
      // if there are two placeholders, than the two characters before it
      // represent one byte
      // if there is only one, then the three characters before it represent 2 bytes
      // this is just a cheap hack to not do indexOf twice
      placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;

      // base64 is 4/3 + up to two characters of the original data
      arr = new Arr(len * 3 / 4 - placeHolders);

      // if there are placeholders, only get up to the last complete 4 chars
      l = placeHolders > 0 ? len - 4 : len;

      var L = 0;

      for (i = 0, j = 0; i < l; i += 4, j += 3) {
        tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)];
        arr[L++] = (tmp >> 16) & 0xFF;
        arr[L++] = (tmp >> 8) & 0xFF;
        arr[L++] = tmp & 0xFF;
      }

      if (placeHolders === 2) {
        tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4);
        arr[L++] = tmp & 0xFF;
      } else if (placeHolders === 1) {
        tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2);
        arr[L++] = (tmp >> 8) & 0xFF;
        arr[L++] = tmp & 0xFF;
      }

      return arr
    }

    function tripletToBase64 (num) {
      return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
    }

    function encodeChunk (uint8, start, end) {
      var tmp;
      var output = [];
      for (var i = start; i < end; i += 3) {
        tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);
        output.push(tripletToBase64(tmp));
      }
      return output.join('')
    }

    function fromByteArray (uint8) {
      if (!inited) {
        init();
      }
      var tmp;
      var len = uint8.length;
      var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
      var output = '';
      var parts = [];
      var maxChunkLength = 16383; // must be multiple of 3

      // go through the array every three bytes, we'll deal with trailing stuff later
      for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
        parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));
      }

      // pad the end with zeros, but make sure to not forget the extra bytes
      if (extraBytes === 1) {
        tmp = uint8[len - 1];
        output += lookup[tmp >> 2];
        output += lookup[(tmp << 4) & 0x3F];
        output += '==';
      } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + (uint8[len - 1]);
        output += lookup[tmp >> 10];
        output += lookup[(tmp >> 4) & 0x3F];
        output += lookup[(tmp << 2) & 0x3F];
        output += '=';
      }

      parts.push(output);

      return parts.join('')
    }

    function read (buffer, offset, isLE, mLen, nBytes) {
      var e, m;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var nBits = -7;
      var i = isLE ? (nBytes - 1) : 0;
      var d = isLE ? -1 : 1;
      var s = buffer[offset + i];

      i += d;

      e = s & ((1 << (-nBits)) - 1);
      s >>= (-nBits);
      nBits += eLen;
      for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

      m = e & ((1 << (-nBits)) - 1);
      e >>= (-nBits);
      nBits += mLen;
      for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

      if (e === 0) {
        e = 1 - eBias;
      } else if (e === eMax) {
        return m ? NaN : ((s ? -1 : 1) * Infinity)
      } else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
      }
      return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
    }

    function write (buffer, value, offset, isLE, mLen, nBytes) {
      var e, m, c;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
      var i = isLE ? 0 : (nBytes - 1);
      var d = isLE ? 1 : -1;
      var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

      value = Math.abs(value);

      if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
      } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
          e--;
          c *= 2;
        }
        if (e + eBias >= 1) {
          value += rt / c;
        } else {
          value += rt * Math.pow(2, 1 - eBias);
        }
        if (value * c >= 2) {
          e++;
          c /= 2;
        }

        if (e + eBias >= eMax) {
          m = 0;
          e = eMax;
        } else if (e + eBias >= 1) {
          m = (value * c - 1) * Math.pow(2, mLen);
          e = e + eBias;
        } else {
          m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
          e = 0;
        }
      }

      for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

      e = (e << mLen) | m;
      eLen += mLen;
      for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

      buffer[offset + i - d] |= s * 128;
    }

    var toString = {}.toString;

    var isArray = Array.isArray || function (arr) {
      return toString.call(arr) == '[object Array]';
    };

    /*!
     * The buffer module from node.js, for the browser.
     *
     * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
     * @license  MIT
     */

    var INSPECT_MAX_BYTES = 50;

    /**
     * If `Buffer.TYPED_ARRAY_SUPPORT`:
     *   === true    Use Uint8Array implementation (fastest)
     *   === false   Use Object implementation (most compatible, even IE6)
     *
     * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
     * Opera 11.6+, iOS 4.2+.
     *
     * Due to various browser bugs, sometimes the Object implementation will be used even
     * when the browser supports typed arrays.
     *
     * Note:
     *
     *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
     *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
     *
     *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
     *
     *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
     *     incorrect length in some situations.

     * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
     * get the Object implementation, which is slower but behaves correctly.
     */
    Buffer$1.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
      ? global.TYPED_ARRAY_SUPPORT
      : true;

    /*
     * Export kMaxLength after typed array support is determined.
     */
    var _kMaxLength = kMaxLength();

    function kMaxLength () {
      return Buffer$1.TYPED_ARRAY_SUPPORT
        ? 0x7fffffff
        : 0x3fffffff
    }

    function createBuffer (that, length) {
      if (kMaxLength() < length) {
        throw new RangeError('Invalid typed array length')
      }
      if (Buffer$1.TYPED_ARRAY_SUPPORT) {
        // Return an augmented `Uint8Array` instance, for best performance
        that = new Uint8Array(length);
        that.__proto__ = Buffer$1.prototype;
      } else {
        // Fallback: Return an object instance of the Buffer class
        if (that === null) {
          that = new Buffer$1(length);
        }
        that.length = length;
      }

      return that
    }

    /**
     * The Buffer constructor returns instances of `Uint8Array` that have their
     * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
     * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
     * and the `Uint8Array` methods. Square bracket notation works as expected -- it
     * returns a single octet.
     *
     * The `Uint8Array` prototype remains unmodified.
     */

    function Buffer$1 (arg, encodingOrOffset, length) {
      if (!Buffer$1.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer$1)) {
        return new Buffer$1(arg, encodingOrOffset, length)
      }

      // Common case.
      if (typeof arg === 'number') {
        if (typeof encodingOrOffset === 'string') {
          throw new Error(
            'If encoding is specified then the first argument must be a string'
          )
        }
        return allocUnsafe(this, arg)
      }
      return from(this, arg, encodingOrOffset, length)
    }

    Buffer$1.poolSize = 8192; // not used by this implementation

    // TODO: Legacy, not needed anymore. Remove in next major version.
    Buffer$1._augment = function (arr) {
      arr.__proto__ = Buffer$1.prototype;
      return arr
    };

    function from (that, value, encodingOrOffset, length) {
      if (typeof value === 'number') {
        throw new TypeError('"value" argument must not be a number')
      }

      if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
        return fromArrayBuffer(that, value, encodingOrOffset, length)
      }

      if (typeof value === 'string') {
        return fromString(that, value, encodingOrOffset)
      }

      return fromObject(that, value)
    }

    /**
     * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
     * if value is a number.
     * Buffer.from(str[, encoding])
     * Buffer.from(array)
     * Buffer.from(buffer)
     * Buffer.from(arrayBuffer[, byteOffset[, length]])
     **/
    Buffer$1.from = function (value, encodingOrOffset, length) {
      return from(null, value, encodingOrOffset, length)
    };

    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
      Buffer$1.prototype.__proto__ = Uint8Array.prototype;
      Buffer$1.__proto__ = Uint8Array;
    }

    function assertSize (size) {
      if (typeof size !== 'number') {
        throw new TypeError('"size" argument must be a number')
      } else if (size < 0) {
        throw new RangeError('"size" argument must not be negative')
      }
    }

    function alloc (that, size, fill, encoding) {
      assertSize(size);
      if (size <= 0) {
        return createBuffer(that, size)
      }
      if (fill !== undefined) {
        // Only pay attention to encoding if it's a string. This
        // prevents accidentally sending in a number that would
        // be interpretted as a start offset.
        return typeof encoding === 'string'
          ? createBuffer(that, size).fill(fill, encoding)
          : createBuffer(that, size).fill(fill)
      }
      return createBuffer(that, size)
    }

    /**
     * Creates a new filled Buffer instance.
     * alloc(size[, fill[, encoding]])
     **/
    Buffer$1.alloc = function (size, fill, encoding) {
      return alloc(null, size, fill, encoding)
    };

    function allocUnsafe (that, size) {
      assertSize(size);
      that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
      if (!Buffer$1.TYPED_ARRAY_SUPPORT) {
        for (var i = 0; i < size; ++i) {
          that[i] = 0;
        }
      }
      return that
    }

    /**
     * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
     * */
    Buffer$1.allocUnsafe = function (size) {
      return allocUnsafe(null, size)
    };
    /**
     * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
     */
    Buffer$1.allocUnsafeSlow = function (size) {
      return allocUnsafe(null, size)
    };

    function fromString (that, string, encoding) {
      if (typeof encoding !== 'string' || encoding === '') {
        encoding = 'utf8';
      }

      if (!Buffer$1.isEncoding(encoding)) {
        throw new TypeError('"encoding" must be a valid string encoding')
      }

      var length = byteLength(string, encoding) | 0;
      that = createBuffer(that, length);

      var actual = that.write(string, encoding);

      if (actual !== length) {
        // Writing a hex string, for example, that contains invalid characters will
        // cause everything after the first invalid character to be ignored. (e.g.
        // 'abxxcd' will be treated as 'ab')
        that = that.slice(0, actual);
      }

      return that
    }

    function fromArrayLike (that, array) {
      var length = array.length < 0 ? 0 : checked(array.length) | 0;
      that = createBuffer(that, length);
      for (var i = 0; i < length; i += 1) {
        that[i] = array[i] & 255;
      }
      return that
    }

    function fromArrayBuffer (that, array, byteOffset, length) {
      array.byteLength; // this throws if `array` is not a valid ArrayBuffer

      if (byteOffset < 0 || array.byteLength < byteOffset) {
        throw new RangeError('\'offset\' is out of bounds')
      }

      if (array.byteLength < byteOffset + (length || 0)) {
        throw new RangeError('\'length\' is out of bounds')
      }

      if (byteOffset === undefined && length === undefined) {
        array = new Uint8Array(array);
      } else if (length === undefined) {
        array = new Uint8Array(array, byteOffset);
      } else {
        array = new Uint8Array(array, byteOffset, length);
      }

      if (Buffer$1.TYPED_ARRAY_SUPPORT) {
        // Return an augmented `Uint8Array` instance, for best performance
        that = array;
        that.__proto__ = Buffer$1.prototype;
      } else {
        // Fallback: Return an object instance of the Buffer class
        that = fromArrayLike(that, array);
      }
      return that
    }

    function fromObject (that, obj) {
      if (internalIsBuffer(obj)) {
        var len = checked(obj.length) | 0;
        that = createBuffer(that, len);

        if (that.length === 0) {
          return that
        }

        obj.copy(that, 0, 0, len);
        return that
      }

      if (obj) {
        if ((typeof ArrayBuffer !== 'undefined' &&
            obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
          if (typeof obj.length !== 'number' || isnan(obj.length)) {
            return createBuffer(that, 0)
          }
          return fromArrayLike(that, obj)
        }

        if (obj.type === 'Buffer' && isArray(obj.data)) {
          return fromArrayLike(that, obj.data)
        }
      }

      throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
    }

    function checked (length) {
      // Note: cannot use `length < kMaxLength()` here because that fails when
      // length is NaN (which is otherwise coerced to zero.)
      if (length >= kMaxLength()) {
        throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                             'size: 0x' + kMaxLength().toString(16) + ' bytes')
      }
      return length | 0
    }

    function SlowBuffer (length) {
      if (+length != length) { // eslint-disable-line eqeqeq
        length = 0;
      }
      return Buffer$1.alloc(+length)
    }
    Buffer$1.isBuffer = isBuffer;
    function internalIsBuffer (b) {
      return !!(b != null && b._isBuffer)
    }

    Buffer$1.compare = function compare (a, b) {
      if (!internalIsBuffer(a) || !internalIsBuffer(b)) {
        throw new TypeError('Arguments must be Buffers')
      }

      if (a === b) return 0

      var x = a.length;
      var y = b.length;

      for (var i = 0, len = Math.min(x, y); i < len; ++i) {
        if (a[i] !== b[i]) {
          x = a[i];
          y = b[i];
          break
        }
      }

      if (x < y) return -1
      if (y < x) return 1
      return 0
    };

    Buffer$1.isEncoding = function isEncoding (encoding) {
      switch (String(encoding).toLowerCase()) {
        case 'hex':
        case 'utf8':
        case 'utf-8':
        case 'ascii':
        case 'latin1':
        case 'binary':
        case 'base64':
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return true
        default:
          return false
      }
    };

    Buffer$1.concat = function concat (list, length) {
      if (!isArray(list)) {
        throw new TypeError('"list" argument must be an Array of Buffers')
      }

      if (list.length === 0) {
        return Buffer$1.alloc(0)
      }

      var i;
      if (length === undefined) {
        length = 0;
        for (i = 0; i < list.length; ++i) {
          length += list[i].length;
        }
      }

      var buffer = Buffer$1.allocUnsafe(length);
      var pos = 0;
      for (i = 0; i < list.length; ++i) {
        var buf = list[i];
        if (!internalIsBuffer(buf)) {
          throw new TypeError('"list" argument must be an Array of Buffers')
        }
        buf.copy(buffer, pos);
        pos += buf.length;
      }
      return buffer
    };

    function byteLength (string, encoding) {
      if (internalIsBuffer(string)) {
        return string.length
      }
      if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
          (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
        return string.byteLength
      }
      if (typeof string !== 'string') {
        string = '' + string;
      }

      var len = string.length;
      if (len === 0) return 0

      // Use a for loop to avoid recursion
      var loweredCase = false;
      for (;;) {
        switch (encoding) {
          case 'ascii':
          case 'latin1':
          case 'binary':
            return len
          case 'utf8':
          case 'utf-8':
          case undefined:
            return utf8ToBytes(string).length
          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return len * 2
          case 'hex':
            return len >>> 1
          case 'base64':
            return base64ToBytes(string).length
          default:
            if (loweredCase) return utf8ToBytes(string).length // assume utf8
            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    }
    Buffer$1.byteLength = byteLength;

    function slowToString (encoding, start, end) {
      var loweredCase = false;

      // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
      // property of a typed array.

      // This behaves neither like String nor Uint8Array in that we set start/end
      // to their upper/lower bounds if the value passed is out of range.
      // undefined is handled specially as per ECMA-262 6th Edition,
      // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
      if (start === undefined || start < 0) {
        start = 0;
      }
      // Return early if start > this.length. Done here to prevent potential uint32
      // coercion fail below.
      if (start > this.length) {
        return ''
      }

      if (end === undefined || end > this.length) {
        end = this.length;
      }

      if (end <= 0) {
        return ''
      }

      // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
      end >>>= 0;
      start >>>= 0;

      if (end <= start) {
        return ''
      }

      if (!encoding) encoding = 'utf8';

      while (true) {
        switch (encoding) {
          case 'hex':
            return hexSlice(this, start, end)

          case 'utf8':
          case 'utf-8':
            return utf8Slice(this, start, end)

          case 'ascii':
            return asciiSlice(this, start, end)

          case 'latin1':
          case 'binary':
            return latin1Slice(this, start, end)

          case 'base64':
            return base64Slice(this, start, end)

          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return utf16leSlice(this, start, end)

          default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
            encoding = (encoding + '').toLowerCase();
            loweredCase = true;
        }
      }
    }

    // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
    // Buffer instances.
    Buffer$1.prototype._isBuffer = true;

    function swap (b, n, m) {
      var i = b[n];
      b[n] = b[m];
      b[m] = i;
    }

    Buffer$1.prototype.swap16 = function swap16 () {
      var len = this.length;
      if (len % 2 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 16-bits')
      }
      for (var i = 0; i < len; i += 2) {
        swap(this, i, i + 1);
      }
      return this
    };

    Buffer$1.prototype.swap32 = function swap32 () {
      var len = this.length;
      if (len % 4 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 32-bits')
      }
      for (var i = 0; i < len; i += 4) {
        swap(this, i, i + 3);
        swap(this, i + 1, i + 2);
      }
      return this
    };

    Buffer$1.prototype.swap64 = function swap64 () {
      var len = this.length;
      if (len % 8 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 64-bits')
      }
      for (var i = 0; i < len; i += 8) {
        swap(this, i, i + 7);
        swap(this, i + 1, i + 6);
        swap(this, i + 2, i + 5);
        swap(this, i + 3, i + 4);
      }
      return this
    };

    Buffer$1.prototype.toString = function toString () {
      var length = this.length | 0;
      if (length === 0) return ''
      if (arguments.length === 0) return utf8Slice(this, 0, length)
      return slowToString.apply(this, arguments)
    };

    Buffer$1.prototype.equals = function equals (b) {
      if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer')
      if (this === b) return true
      return Buffer$1.compare(this, b) === 0
    };

    Buffer$1.prototype.inspect = function inspect () {
      var str = '';
      var max = INSPECT_MAX_BYTES;
      if (this.length > 0) {
        str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
        if (this.length > max) str += ' ... ';
      }
      return '<Buffer ' + str + '>'
    };

    Buffer$1.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
      if (!internalIsBuffer(target)) {
        throw new TypeError('Argument must be a Buffer')
      }

      if (start === undefined) {
        start = 0;
      }
      if (end === undefined) {
        end = target ? target.length : 0;
      }
      if (thisStart === undefined) {
        thisStart = 0;
      }
      if (thisEnd === undefined) {
        thisEnd = this.length;
      }

      if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
        throw new RangeError('out of range index')
      }

      if (thisStart >= thisEnd && start >= end) {
        return 0
      }
      if (thisStart >= thisEnd) {
        return -1
      }
      if (start >= end) {
        return 1
      }

      start >>>= 0;
      end >>>= 0;
      thisStart >>>= 0;
      thisEnd >>>= 0;

      if (this === target) return 0

      var x = thisEnd - thisStart;
      var y = end - start;
      var len = Math.min(x, y);

      var thisCopy = this.slice(thisStart, thisEnd);
      var targetCopy = target.slice(start, end);

      for (var i = 0; i < len; ++i) {
        if (thisCopy[i] !== targetCopy[i]) {
          x = thisCopy[i];
          y = targetCopy[i];
          break
        }
      }

      if (x < y) return -1
      if (y < x) return 1
      return 0
    };

    // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
    // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
    //
    // Arguments:
    // - buffer - a Buffer to search
    // - val - a string, Buffer, or number
    // - byteOffset - an index into `buffer`; will be clamped to an int32
    // - encoding - an optional encoding, relevant is val is a string
    // - dir - true for indexOf, false for lastIndexOf
    function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
      // Empty buffer means no match
      if (buffer.length === 0) return -1

      // Normalize byteOffset
      if (typeof byteOffset === 'string') {
        encoding = byteOffset;
        byteOffset = 0;
      } else if (byteOffset > 0x7fffffff) {
        byteOffset = 0x7fffffff;
      } else if (byteOffset < -0x80000000) {
        byteOffset = -0x80000000;
      }
      byteOffset = +byteOffset;  // Coerce to Number.
      if (isNaN(byteOffset)) {
        // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
        byteOffset = dir ? 0 : (buffer.length - 1);
      }

      // Normalize byteOffset: negative offsets start from the end of the buffer
      if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
      if (byteOffset >= buffer.length) {
        if (dir) return -1
        else byteOffset = buffer.length - 1;
      } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1
      }

      // Normalize val
      if (typeof val === 'string') {
        val = Buffer$1.from(val, encoding);
      }

      // Finally, search either indexOf (if dir is true) or lastIndexOf
      if (internalIsBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) {
          return -1
        }
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
      } else if (typeof val === 'number') {
        val = val & 0xFF; // Search for a byte value [0-255]
        if (Buffer$1.TYPED_ARRAY_SUPPORT &&
            typeof Uint8Array.prototype.indexOf === 'function') {
          if (dir) {
            return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
          } else {
            return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
          }
        }
        return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
      }

      throw new TypeError('val must be string, number or Buffer')
    }

    function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
      var indexSize = 1;
      var arrLength = arr.length;
      var valLength = val.length;

      if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase();
        if (encoding === 'ucs2' || encoding === 'ucs-2' ||
            encoding === 'utf16le' || encoding === 'utf-16le') {
          if (arr.length < 2 || val.length < 2) {
            return -1
          }
          indexSize = 2;
          arrLength /= 2;
          valLength /= 2;
          byteOffset /= 2;
        }
      }

      function read (buf, i) {
        if (indexSize === 1) {
          return buf[i]
        } else {
          return buf.readUInt16BE(i * indexSize)
        }
      }

      var i;
      if (dir) {
        var foundIndex = -1;
        for (i = byteOffset; i < arrLength; i++) {
          if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
            if (foundIndex === -1) foundIndex = i;
            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
          } else {
            if (foundIndex !== -1) i -= i - foundIndex;
            foundIndex = -1;
          }
        }
      } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for (i = byteOffset; i >= 0; i--) {
          var found = true;
          for (var j = 0; j < valLength; j++) {
            if (read(arr, i + j) !== read(val, j)) {
              found = false;
              break
            }
          }
          if (found) return i
        }
      }

      return -1
    }

    Buffer$1.prototype.includes = function includes (val, byteOffset, encoding) {
      return this.indexOf(val, byteOffset, encoding) !== -1
    };

    Buffer$1.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
    };

    Buffer$1.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
    };

    function hexWrite (buf, string, offset, length) {
      offset = Number(offset) || 0;
      var remaining = buf.length - offset;
      if (!length) {
        length = remaining;
      } else {
        length = Number(length);
        if (length > remaining) {
          length = remaining;
        }
      }

      // must be an even number of digits
      var strLen = string.length;
      if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

      if (length > strLen / 2) {
        length = strLen / 2;
      }
      for (var i = 0; i < length; ++i) {
        var parsed = parseInt(string.substr(i * 2, 2), 16);
        if (isNaN(parsed)) return i
        buf[offset + i] = parsed;
      }
      return i
    }

    function utf8Write (buf, string, offset, length) {
      return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
    }

    function asciiWrite (buf, string, offset, length) {
      return blitBuffer(asciiToBytes(string), buf, offset, length)
    }

    function latin1Write (buf, string, offset, length) {
      return asciiWrite(buf, string, offset, length)
    }

    function base64Write (buf, string, offset, length) {
      return blitBuffer(base64ToBytes(string), buf, offset, length)
    }

    function ucs2Write (buf, string, offset, length) {
      return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
    }

    Buffer$1.prototype.write = function write (string, offset, length, encoding) {
      // Buffer#write(string)
      if (offset === undefined) {
        encoding = 'utf8';
        length = this.length;
        offset = 0;
      // Buffer#write(string, encoding)
      } else if (length === undefined && typeof offset === 'string') {
        encoding = offset;
        length = this.length;
        offset = 0;
      // Buffer#write(string, offset[, length][, encoding])
      } else if (isFinite(offset)) {
        offset = offset | 0;
        if (isFinite(length)) {
          length = length | 0;
          if (encoding === undefined) encoding = 'utf8';
        } else {
          encoding = length;
          length = undefined;
        }
      // legacy write(string, encoding, offset, length) - remove in v0.13
      } else {
        throw new Error(
          'Buffer.write(string, encoding, offset[, length]) is no longer supported'
        )
      }

      var remaining = this.length - offset;
      if (length === undefined || length > remaining) length = remaining;

      if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
        throw new RangeError('Attempt to write outside buffer bounds')
      }

      if (!encoding) encoding = 'utf8';

      var loweredCase = false;
      for (;;) {
        switch (encoding) {
          case 'hex':
            return hexWrite(this, string, offset, length)

          case 'utf8':
          case 'utf-8':
            return utf8Write(this, string, offset, length)

          case 'ascii':
            return asciiWrite(this, string, offset, length)

          case 'latin1':
          case 'binary':
            return latin1Write(this, string, offset, length)

          case 'base64':
            // Warning: maxLength not taken into account in base64Write
            return base64Write(this, string, offset, length)

          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return ucs2Write(this, string, offset, length)

          default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    };

    Buffer$1.prototype.toJSON = function toJSON () {
      return {
        type: 'Buffer',
        data: Array.prototype.slice.call(this._arr || this, 0)
      }
    };

    function base64Slice (buf, start, end) {
      if (start === 0 && end === buf.length) {
        return fromByteArray(buf)
      } else {
        return fromByteArray(buf.slice(start, end))
      }
    }

    function utf8Slice (buf, start, end) {
      end = Math.min(buf.length, end);
      var res = [];

      var i = start;
      while (i < end) {
        var firstByte = buf[i];
        var codePoint = null;
        var bytesPerSequence = (firstByte > 0xEF) ? 4
          : (firstByte > 0xDF) ? 3
          : (firstByte > 0xBF) ? 2
          : 1;

        if (i + bytesPerSequence <= end) {
          var secondByte, thirdByte, fourthByte, tempCodePoint;

          switch (bytesPerSequence) {
            case 1:
              if (firstByte < 0x80) {
                codePoint = firstByte;
              }
              break
            case 2:
              secondByte = buf[i + 1];
              if ((secondByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
                if (tempCodePoint > 0x7F) {
                  codePoint = tempCodePoint;
                }
              }
              break
            case 3:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];
              if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
                if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                  codePoint = tempCodePoint;
                }
              }
              break
            case 4:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];
              fourthByte = buf[i + 3];
              if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
                if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                  codePoint = tempCodePoint;
                }
              }
          }
        }

        if (codePoint === null) {
          // we did not generate a valid codePoint so insert a
          // replacement char (U+FFFD) and advance only 1 byte
          codePoint = 0xFFFD;
          bytesPerSequence = 1;
        } else if (codePoint > 0xFFFF) {
          // encode to utf16 (surrogate pair dance)
          codePoint -= 0x10000;
          res.push(codePoint >>> 10 & 0x3FF | 0xD800);
          codePoint = 0xDC00 | codePoint & 0x3FF;
        }

        res.push(codePoint);
        i += bytesPerSequence;
      }

      return decodeCodePointsArray(res)
    }

    // Based on http://stackoverflow.com/a/22747272/680742, the browser with
    // the lowest limit is Chrome, with 0x10000 args.
    // We go 1 magnitude less, for safety
    var MAX_ARGUMENTS_LENGTH = 0x1000;

    function decodeCodePointsArray (codePoints) {
      var len = codePoints.length;
      if (len <= MAX_ARGUMENTS_LENGTH) {
        return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
      }

      // Decode in chunks to avoid "call stack size exceeded".
      var res = '';
      var i = 0;
      while (i < len) {
        res += String.fromCharCode.apply(
          String,
          codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
        );
      }
      return res
    }

    function asciiSlice (buf, start, end) {
      var ret = '';
      end = Math.min(buf.length, end);

      for (var i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i] & 0x7F);
      }
      return ret
    }

    function latin1Slice (buf, start, end) {
      var ret = '';
      end = Math.min(buf.length, end);

      for (var i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i]);
      }
      return ret
    }

    function hexSlice (buf, start, end) {
      var len = buf.length;

      if (!start || start < 0) start = 0;
      if (!end || end < 0 || end > len) end = len;

      var out = '';
      for (var i = start; i < end; ++i) {
        out += toHex(buf[i]);
      }
      return out
    }

    function utf16leSlice (buf, start, end) {
      var bytes = buf.slice(start, end);
      var res = '';
      for (var i = 0; i < bytes.length; i += 2) {
        res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
      }
      return res
    }

    Buffer$1.prototype.slice = function slice (start, end) {
      var len = this.length;
      start = ~~start;
      end = end === undefined ? len : ~~end;

      if (start < 0) {
        start += len;
        if (start < 0) start = 0;
      } else if (start > len) {
        start = len;
      }

      if (end < 0) {
        end += len;
        if (end < 0) end = 0;
      } else if (end > len) {
        end = len;
      }

      if (end < start) end = start;

      var newBuf;
      if (Buffer$1.TYPED_ARRAY_SUPPORT) {
        newBuf = this.subarray(start, end);
        newBuf.__proto__ = Buffer$1.prototype;
      } else {
        var sliceLen = end - start;
        newBuf = new Buffer$1(sliceLen, undefined);
        for (var i = 0; i < sliceLen; ++i) {
          newBuf[i] = this[i + start];
        }
      }

      return newBuf
    };

    /*
     * Need to make sure that buffer isn't trying to write out of bounds.
     */
    function checkOffset (offset, ext, length) {
      if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
      if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
    }

    Buffer$1.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) checkOffset(offset, byteLength, this.length);

      var val = this[offset];
      var mul = 1;
      var i = 0;
      while (++i < byteLength && (mul *= 0x100)) {
        val += this[offset + i] * mul;
      }

      return val
    };

    Buffer$1.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) {
        checkOffset(offset, byteLength, this.length);
      }

      var val = this[offset + --byteLength];
      var mul = 1;
      while (byteLength > 0 && (mul *= 0x100)) {
        val += this[offset + --byteLength] * mul;
      }

      return val
    };

    Buffer$1.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 1, this.length);
      return this[offset]
    };

    Buffer$1.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 2, this.length);
      return this[offset] | (this[offset + 1] << 8)
    };

    Buffer$1.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 2, this.length);
      return (this[offset] << 8) | this[offset + 1]
    };

    Buffer$1.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);

      return ((this[offset]) |
          (this[offset + 1] << 8) |
          (this[offset + 2] << 16)) +
          (this[offset + 3] * 0x1000000)
    };

    Buffer$1.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);

      return (this[offset] * 0x1000000) +
        ((this[offset + 1] << 16) |
        (this[offset + 2] << 8) |
        this[offset + 3])
    };

    Buffer$1.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) checkOffset(offset, byteLength, this.length);

      var val = this[offset];
      var mul = 1;
      var i = 0;
      while (++i < byteLength && (mul *= 0x100)) {
        val += this[offset + i] * mul;
      }
      mul *= 0x80;

      if (val >= mul) val -= Math.pow(2, 8 * byteLength);

      return val
    };

    Buffer$1.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) checkOffset(offset, byteLength, this.length);

      var i = byteLength;
      var mul = 1;
      var val = this[offset + --i];
      while (i > 0 && (mul *= 0x100)) {
        val += this[offset + --i] * mul;
      }
      mul *= 0x80;

      if (val >= mul) val -= Math.pow(2, 8 * byteLength);

      return val
    };

    Buffer$1.prototype.readInt8 = function readInt8 (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 1, this.length);
      if (!(this[offset] & 0x80)) return (this[offset])
      return ((0xff - this[offset] + 1) * -1)
    };

    Buffer$1.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 2, this.length);
      var val = this[offset] | (this[offset + 1] << 8);
      return (val & 0x8000) ? val | 0xFFFF0000 : val
    };

    Buffer$1.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 2, this.length);
      var val = this[offset + 1] | (this[offset] << 8);
      return (val & 0x8000) ? val | 0xFFFF0000 : val
    };

    Buffer$1.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);

      return (this[offset]) |
        (this[offset + 1] << 8) |
        (this[offset + 2] << 16) |
        (this[offset + 3] << 24)
    };

    Buffer$1.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);

      return (this[offset] << 24) |
        (this[offset + 1] << 16) |
        (this[offset + 2] << 8) |
        (this[offset + 3])
    };

    Buffer$1.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);
      return read(this, offset, true, 23, 4)
    };

    Buffer$1.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);
      return read(this, offset, false, 23, 4)
    };

    Buffer$1.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 8, this.length);
      return read(this, offset, true, 52, 8)
    };

    Buffer$1.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 8, this.length);
      return read(this, offset, false, 52, 8)
    };

    function checkInt (buf, value, offset, ext, max, min) {
      if (!internalIsBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
      if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
      if (offset + ext > buf.length) throw new RangeError('Index out of range')
    }

    Buffer$1.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
      }

      var mul = 1;
      var i = 0;
      this[offset] = value & 0xFF;
      while (++i < byteLength && (mul *= 0x100)) {
        this[offset + i] = (value / mul) & 0xFF;
      }

      return offset + byteLength
    };

    Buffer$1.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
      }

      var i = byteLength - 1;
      var mul = 1;
      this[offset + i] = value & 0xFF;
      while (--i >= 0 && (mul *= 0x100)) {
        this[offset + i] = (value / mul) & 0xFF;
      }

      return offset + byteLength
    };

    Buffer$1.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
      if (!Buffer$1.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
      this[offset] = (value & 0xff);
      return offset + 1
    };

    function objectWriteUInt16 (buf, value, offset, littleEndian) {
      if (value < 0) value = 0xffff + value + 1;
      for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
        buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
          (littleEndian ? i : 1 - i) * 8;
      }
    }

    Buffer$1.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
      if (Buffer$1.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value & 0xff);
        this[offset + 1] = (value >>> 8);
      } else {
        objectWriteUInt16(this, value, offset, true);
      }
      return offset + 2
    };

    Buffer$1.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
      if (Buffer$1.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value >>> 8);
        this[offset + 1] = (value & 0xff);
      } else {
        objectWriteUInt16(this, value, offset, false);
      }
      return offset + 2
    };

    function objectWriteUInt32 (buf, value, offset, littleEndian) {
      if (value < 0) value = 0xffffffff + value + 1;
      for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
        buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff;
      }
    }

    Buffer$1.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
      if (Buffer$1.TYPED_ARRAY_SUPPORT) {
        this[offset + 3] = (value >>> 24);
        this[offset + 2] = (value >>> 16);
        this[offset + 1] = (value >>> 8);
        this[offset] = (value & 0xff);
      } else {
        objectWriteUInt32(this, value, offset, true);
      }
      return offset + 4
    };

    Buffer$1.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
      if (Buffer$1.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value >>> 24);
        this[offset + 1] = (value >>> 16);
        this[offset + 2] = (value >>> 8);
        this[offset + 3] = (value & 0xff);
      } else {
        objectWriteUInt32(this, value, offset, false);
      }
      return offset + 4
    };

    Buffer$1.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);

        checkInt(this, value, offset, byteLength, limit - 1, -limit);
      }

      var i = 0;
      var mul = 1;
      var sub = 0;
      this[offset] = value & 0xFF;
      while (++i < byteLength && (mul *= 0x100)) {
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
          sub = 1;
        }
        this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
      }

      return offset + byteLength
    };

    Buffer$1.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);

        checkInt(this, value, offset, byteLength, limit - 1, -limit);
      }

      var i = byteLength - 1;
      var mul = 1;
      var sub = 0;
      this[offset + i] = value & 0xFF;
      while (--i >= 0 && (mul *= 0x100)) {
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
          sub = 1;
        }
        this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
      }

      return offset + byteLength
    };

    Buffer$1.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
      if (!Buffer$1.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
      if (value < 0) value = 0xff + value + 1;
      this[offset] = (value & 0xff);
      return offset + 1
    };

    Buffer$1.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
      if (Buffer$1.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value & 0xff);
        this[offset + 1] = (value >>> 8);
      } else {
        objectWriteUInt16(this, value, offset, true);
      }
      return offset + 2
    };

    Buffer$1.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
      if (Buffer$1.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value >>> 8);
        this[offset + 1] = (value & 0xff);
      } else {
        objectWriteUInt16(this, value, offset, false);
      }
      return offset + 2
    };

    Buffer$1.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
      if (Buffer$1.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value & 0xff);
        this[offset + 1] = (value >>> 8);
        this[offset + 2] = (value >>> 16);
        this[offset + 3] = (value >>> 24);
      } else {
        objectWriteUInt32(this, value, offset, true);
      }
      return offset + 4
    };

    Buffer$1.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
      if (value < 0) value = 0xffffffff + value + 1;
      if (Buffer$1.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value >>> 24);
        this[offset + 1] = (value >>> 16);
        this[offset + 2] = (value >>> 8);
        this[offset + 3] = (value & 0xff);
      } else {
        objectWriteUInt32(this, value, offset, false);
      }
      return offset + 4
    };

    function checkIEEE754 (buf, value, offset, ext, max, min) {
      if (offset + ext > buf.length) throw new RangeError('Index out of range')
      if (offset < 0) throw new RangeError('Index out of range')
    }

    function writeFloat (buf, value, offset, littleEndian, noAssert) {
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 4);
      }
      write(buf, value, offset, littleEndian, 23, 4);
      return offset + 4
    }

    Buffer$1.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
      return writeFloat(this, value, offset, true, noAssert)
    };

    Buffer$1.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
      return writeFloat(this, value, offset, false, noAssert)
    };

    function writeDouble (buf, value, offset, littleEndian, noAssert) {
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 8);
      }
      write(buf, value, offset, littleEndian, 52, 8);
      return offset + 8
    }

    Buffer$1.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
      return writeDouble(this, value, offset, true, noAssert)
    };

    Buffer$1.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
      return writeDouble(this, value, offset, false, noAssert)
    };

    // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
    Buffer$1.prototype.copy = function copy (target, targetStart, start, end) {
      if (!start) start = 0;
      if (!end && end !== 0) end = this.length;
      if (targetStart >= target.length) targetStart = target.length;
      if (!targetStart) targetStart = 0;
      if (end > 0 && end < start) end = start;

      // Copy 0 bytes; we're done
      if (end === start) return 0
      if (target.length === 0 || this.length === 0) return 0

      // Fatal error conditions
      if (targetStart < 0) {
        throw new RangeError('targetStart out of bounds')
      }
      if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
      if (end < 0) throw new RangeError('sourceEnd out of bounds')

      // Are we oob?
      if (end > this.length) end = this.length;
      if (target.length - targetStart < end - start) {
        end = target.length - targetStart + start;
      }

      var len = end - start;
      var i;

      if (this === target && start < targetStart && targetStart < end) {
        // descending copy from end
        for (i = len - 1; i >= 0; --i) {
          target[i + targetStart] = this[i + start];
        }
      } else if (len < 1000 || !Buffer$1.TYPED_ARRAY_SUPPORT) {
        // ascending copy from start
        for (i = 0; i < len; ++i) {
          target[i + targetStart] = this[i + start];
        }
      } else {
        Uint8Array.prototype.set.call(
          target,
          this.subarray(start, start + len),
          targetStart
        );
      }

      return len
    };

    // Usage:
    //    buffer.fill(number[, offset[, end]])
    //    buffer.fill(buffer[, offset[, end]])
    //    buffer.fill(string[, offset[, end]][, encoding])
    Buffer$1.prototype.fill = function fill (val, start, end, encoding) {
      // Handle string cases:
      if (typeof val === 'string') {
        if (typeof start === 'string') {
          encoding = start;
          start = 0;
          end = this.length;
        } else if (typeof end === 'string') {
          encoding = end;
          end = this.length;
        }
        if (val.length === 1) {
          var code = val.charCodeAt(0);
          if (code < 256) {
            val = code;
          }
        }
        if (encoding !== undefined && typeof encoding !== 'string') {
          throw new TypeError('encoding must be a string')
        }
        if (typeof encoding === 'string' && !Buffer$1.isEncoding(encoding)) {
          throw new TypeError('Unknown encoding: ' + encoding)
        }
      } else if (typeof val === 'number') {
        val = val & 255;
      }

      // Invalid ranges are not set to a default, so can range check early.
      if (start < 0 || this.length < start || this.length < end) {
        throw new RangeError('Out of range index')
      }

      if (end <= start) {
        return this
      }

      start = start >>> 0;
      end = end === undefined ? this.length : end >>> 0;

      if (!val) val = 0;

      var i;
      if (typeof val === 'number') {
        for (i = start; i < end; ++i) {
          this[i] = val;
        }
      } else {
        var bytes = internalIsBuffer(val)
          ? val
          : utf8ToBytes(new Buffer$1(val, encoding).toString());
        var len = bytes.length;
        for (i = 0; i < end - start; ++i) {
          this[i + start] = bytes[i % len];
        }
      }

      return this
    };

    // HELPER FUNCTIONS
    // ================

    var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

    function base64clean (str) {
      // Node strips out invalid characters like \n and \t from the string, base64-js does not
      str = stringtrim(str).replace(INVALID_BASE64_RE, '');
      // Node converts strings with length < 2 to ''
      if (str.length < 2) return ''
      // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
      while (str.length % 4 !== 0) {
        str = str + '=';
      }
      return str
    }

    function stringtrim (str) {
      if (str.trim) return str.trim()
      return str.replace(/^\s+|\s+$/g, '')
    }

    function toHex (n) {
      if (n < 16) return '0' + n.toString(16)
      return n.toString(16)
    }

    function utf8ToBytes (string, units) {
      units = units || Infinity;
      var codePoint;
      var length = string.length;
      var leadSurrogate = null;
      var bytes = [];

      for (var i = 0; i < length; ++i) {
        codePoint = string.charCodeAt(i);

        // is surrogate component
        if (codePoint > 0xD7FF && codePoint < 0xE000) {
          // last char was a lead
          if (!leadSurrogate) {
            // no lead yet
            if (codePoint > 0xDBFF) {
              // unexpected trail
              if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
              continue
            } else if (i + 1 === length) {
              // unpaired lead
              if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
              continue
            }

            // valid lead
            leadSurrogate = codePoint;

            continue
          }

          // 2 leads in a row
          if (codePoint < 0xDC00) {
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            leadSurrogate = codePoint;
            continue
          }

          // valid surrogate pair
          codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
        } else if (leadSurrogate) {
          // valid bmp char, but last char was a lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        }

        leadSurrogate = null;

        // encode utf8
        if (codePoint < 0x80) {
          if ((units -= 1) < 0) break
          bytes.push(codePoint);
        } else if (codePoint < 0x800) {
          if ((units -= 2) < 0) break
          bytes.push(
            codePoint >> 0x6 | 0xC0,
            codePoint & 0x3F | 0x80
          );
        } else if (codePoint < 0x10000) {
          if ((units -= 3) < 0) break
          bytes.push(
            codePoint >> 0xC | 0xE0,
            codePoint >> 0x6 & 0x3F | 0x80,
            codePoint & 0x3F | 0x80
          );
        } else if (codePoint < 0x110000) {
          if ((units -= 4) < 0) break
          bytes.push(
            codePoint >> 0x12 | 0xF0,
            codePoint >> 0xC & 0x3F | 0x80,
            codePoint >> 0x6 & 0x3F | 0x80,
            codePoint & 0x3F | 0x80
          );
        } else {
          throw new Error('Invalid code point')
        }
      }

      return bytes
    }

    function asciiToBytes (str) {
      var byteArray = [];
      for (var i = 0; i < str.length; ++i) {
        // Node's code seems to be doing this and not & 0x7F..
        byteArray.push(str.charCodeAt(i) & 0xFF);
      }
      return byteArray
    }

    function utf16leToBytes (str, units) {
      var c, hi, lo;
      var byteArray = [];
      for (var i = 0; i < str.length; ++i) {
        if ((units -= 2) < 0) break

        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
      }

      return byteArray
    }


    function base64ToBytes (str) {
      return toByteArray(base64clean(str))
    }

    function blitBuffer (src, dst, offset, length) {
      for (var i = 0; i < length; ++i) {
        if ((i + offset >= dst.length) || (i >= src.length)) break
        dst[i + offset] = src[i];
      }
      return i
    }

    function isnan (val) {
      return val !== val // eslint-disable-line no-self-compare
    }


    // the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
    // The _isBuffer check is for Safari 5-7 support, because it's missing
    // Object.prototype.constructor. Remove this eventually
    function isBuffer(obj) {
      return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj))
    }

    function isFastBuffer (obj) {
      return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
    }

    // For Node v0.10 support. Remove this eventually.
    function isSlowBuffer (obj) {
      return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0))
    }

    var bufferEs6 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        Buffer: Buffer$1,
        INSPECT_MAX_BYTES: INSPECT_MAX_BYTES,
        SlowBuffer: SlowBuffer,
        isBuffer: isBuffer,
        kMaxLength: _kMaxLength
    });

    var require$$12 = /*@__PURE__*/getAugmentedNamespace(bufferEs6);

    var _interopRequireDefault = interopRequireDefault.exports;

    Object.defineProperty(RemoteFileWithRangeCache$1, "__esModule", {
      value: true
    });
    RemoteFileWithRangeCache$1.RemoteFileWithRangeCache = void 0;
    RemoteFileWithRangeCache$1.clearCache = clearCache;

    var _defineProperty2 = _interopRequireDefault(defineProperty$1.exports);

    var _regenerator = _interopRequireDefault(regenerator);

    var _slicedToArray2 = _interopRequireDefault(slicedToArray.exports);

    var _asyncToGenerator2 = _interopRequireDefault(asyncToGenerator.exports);

    var _classCallCheck2 = _interopRequireDefault(classCallCheck.exports);

    var _createClass2 = _interopRequireDefault(createClass.exports);

    var _get2 = _interopRequireDefault(get.exports);

    var _inherits2 = _interopRequireDefault(inherits.exports);

    var _possibleConstructorReturn2 = _interopRequireDefault(possibleConstructorReturn.exports);

    var _getPrototypeOf2 = _interopRequireDefault(getPrototypeOf.exports);

    var _httpRangeFetcher = dist$1;

    var _buffer = require$$12;

    var _genericFilehandle = require$$3;

    function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

    function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

    function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

    function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

    function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

    function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

    function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

    var fetchers = {};

    function binaryRangeFetch(url, start, end) {
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      var fetcher = fetchers[url];

      if (!fetcher) {
        throw new Error("fetch not registered for ".concat(url));
      }

      return fetcher(url, start, end, options);
    }

    var globalRangeCache = new _httpRangeFetcher.HttpRangeFetcher({
      fetch: binaryRangeFetch,
      size: 500 * Math.pow(1024, 2),
      // 500MiB
      chunkSize: 128 * 124,
      // 128KiB
      maxFetchSize: 100 * Math.pow(1024, 2),
      // 100MiB
      minimumTTL: 24 * 60 * 60 * 1000 // 1 day

    });

    function clearCache() {
      globalRangeCache.reset();
    }

    var RemoteFileWithRangeCache = /*#__PURE__*/function (_RemoteFile) {
      (0, _inherits2.default)(RemoteFileWithRangeCache, _RemoteFile);

      var _super = _createSuper(RemoteFileWithRangeCache);

      function RemoteFileWithRangeCache() {
        (0, _classCallCheck2.default)(this, RemoteFileWithRangeCache);
        return _super.apply(this, arguments);
      }

      (0, _createClass2.default)(RemoteFileWithRangeCache, [{
        key: "fetch",
        value: function () {
          var _fetch = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(url, init) {
            var requestHeaders, range, _ref, _ref2, rangeParse, _rangeParse, _start, _end, s, e, response, headers;

            return _regenerator.default.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    if (!fetchers[String(url)]) {
                      fetchers[String(url)] = this.fetchBinaryRange.bind(this);
                    } // if it is a range request, route it through the range cache


                    requestHeaders = init && init.headers;

                    if (requestHeaders) {
                      if (requestHeaders instanceof Headers) {
                        range = requestHeaders.get('range');
                      } else if (Array.isArray(requestHeaders)) {
                        _ref = requestHeaders.find(function (_ref3) {
                          var _ref4 = (0, _slicedToArray2.default)(_ref3, 1),
                              key = _ref4[0];

                          return key === 'range';
                        }) || [undefined, undefined];
                        _ref2 = (0, _slicedToArray2.default)(_ref, 2);
                        range = _ref2[1];
                      } else {
                        range = requestHeaders.range;
                      }
                    }

                    if (!range) {
                      _context.next = 14;
                      break;
                    }

                    rangeParse = /bytes=(\d+)-(\d+)/.exec(range);

                    if (!rangeParse) {
                      _context.next = 14;
                      break;
                    }

                    _rangeParse = (0, _slicedToArray2.default)(rangeParse, 3), _start = _rangeParse[1], _end = _rangeParse[2];
                    s = parseInt(_start, 10);
                    e = parseInt(_end, 10);
                    _context.next = 11;
                    return globalRangeCache.getRange(url, s, e - s + 1, {
                      signal: init && init.signal
                    });

                  case 11:
                    response = _context.sent;
                    headers = response.headers;
                    return _context.abrupt("return", new Response(response.buffer, {
                      status: 206,
                      headers: headers
                    }));

                  case 14:
                    return _context.abrupt("return", (0, _get2.default)((0, _getPrototypeOf2.default)(RemoteFileWithRangeCache.prototype), "fetch", this).call(this, url, init));

                  case 15:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this);
          }));

          function fetch(_x, _x2) {
            return _fetch.apply(this, arguments);
          }

          return fetch;
        }()
      }, {
        key: "fetchBinaryRange",
        value: function () {
          var _fetchBinaryRange = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(url, start, end) {
            var options,
                requestDate,
                requestHeaders,
                res,
                responseDate,
                errorMessage,
                hint,
                headers,
                _iterator,
                _step,
                _step$value,
                k,
                v,
                arrayBuffer,
                _args2 = arguments;

            return _regenerator.default.wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    options = _args2.length > 3 && _args2[3] !== undefined ? _args2[3] : {};
                    requestDate = new Date();
                    requestHeaders = _objectSpread(_objectSpread({}, options.headers), {}, {
                      range: "bytes=".concat(start, "-").concat(end)
                    });
                    _context2.next = 5;
                    return (0, _get2.default)((0, _getPrototypeOf2.default)(RemoteFileWithRangeCache.prototype), "fetch", this).call(this, url, _objectSpread(_objectSpread({}, options), {}, {
                      headers: requestHeaders
                    }));

                  case 5:
                    res = _context2.sent;
                    responseDate = new Date();

                    if (!(res.status !== 206)) {
                      _context2.next = 11;
                      break;
                    }

                    errorMessage = "HTTP ".concat(res.status, " (").concat(res.statusText, ") when fetching ").concat(url, " bytes ").concat(start, "-").concat(end);
                    hint = ' (should be 206 for range requests)';
                    throw new Error("".concat(errorMessage).concat(res.status === 200 ? hint : ''));

                  case 11:
                    // translate the Headers object into a regular key -> value object.
                    // will miss duplicate headers of course
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    headers = {};
                    _iterator = _createForOfIteratorHelper(res.headers.entries());

                    try {
                      for (_iterator.s(); !(_step = _iterator.n()).done;) {
                        _step$value = (0, _slicedToArray2.default)(_step.value, 2), k = _step$value[0], v = _step$value[1];
                        headers[k] = v;
                      } // return the response headers, and the data buffer

                    } catch (err) {
                      _iterator.e(err);
                    } finally {
                      _iterator.f();
                    }

                    _context2.next = 16;
                    return res.arrayBuffer();

                  case 16:
                    arrayBuffer = _context2.sent;
                    return _context2.abrupt("return", {
                      headers: headers,
                      requestDate: requestDate,
                      responseDate: responseDate,
                      buffer: _buffer.Buffer.from(arrayBuffer)
                    });

                  case 18:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2, this);
          }));

          function fetchBinaryRange(_x3, _x4, _x5) {
            return _fetchBinaryRange.apply(this, arguments);
          }

          return fetchBinaryRange;
        }()
      }]);
      return RemoteFileWithRangeCache;
    }(_genericFilehandle.RemoteFile);

    RemoteFileWithRangeCache$1.RemoteFileWithRangeCache = RemoteFileWithRangeCache;

    (function (exports) {

    var _interopRequireDefault = interopRequireDefault.exports;

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "RemoteFileWithRangeCache", {
      enumerable: true,
      get: function get() {
        return _RemoteFileWithRangeCache.RemoteFileWithRangeCache;
      }
    });
    exports.openLocation = openLocation;

    var _regenerator = _interopRequireDefault(regenerator);

    var _asyncToGenerator2 = _interopRequireDefault(asyncToGenerator.exports);

    var _genericFilehandle = require$$3;

    var _RemoteFileWithRangeCache = RemoteFileWithRangeCache$1;

    var _types = types$1;

    var _tracks = tracks;

    var _detectNode = _interopRequireDefault(browser);

    function isLocalPathLocation(location) {
      return 'localPath' in location;
    }

    function isBlobLocation(location) {
      return 'blobId' in location;
    }

    function openLocation(location, pluginManager) {
      function checkAuthNeededFetch(_x, _x2) {
        return _checkAuthNeededFetch.apply(this, arguments);
      }

      function _checkAuthNeededFetch() {
        _checkAuthNeededFetch = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(url, opts) {
          var response, authHeaders;
          return _regenerator.default.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return fetch(url, opts);

                case 2:
                  response = _context.sent;

                  if (!(response.status === 401)) {
                    _context.next = 7;
                    break;
                  }

                  authHeaders = response.headers.get('WWW-Authenticate');

                  if (!((0, _types.isUriLocation)(location) && authHeaders && authHeaders.includes('Basic'))) {
                    _context.next = 7;
                    break;
                  }

                  throw new _types.AuthNeededError('Accessing HTTPBasic resource without authentication', location);

                case 7:
                  return _context.abrupt("return", response);

                case 8:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));
        return _checkAuthNeededFetch.apply(this, arguments);
      }

      if (!location) {
        throw new Error('must provide a location to openLocation');
      }

      if (isLocalPathLocation(location)) {
        if (!location.localPath) {
          throw new Error('No local path provided');
        }

        if (_detectNode.default) {
          return new _genericFilehandle.LocalFile(location.localPath);
        } else {
          throw new Error("can't use local files in the browser");
        }
      }

      if (isBlobLocation(location)) {
        // special case where blob is not directly stored on the model, use a getter
        var blob = (0, _tracks.getBlob)(location.blobId);

        if (!blob) {
          throw new Error("file (\"".concat(location.name, "\") was opened locally from a previous session. To restore it, go to track settings and reopen the file"));
        }

        return new _genericFilehandle.BlobFile(blob);
      }

      if ((0, _types.isUriLocation)(location)) {
        if (!location.uri) {
          throw new Error('No URI provided');
        }

        if (location.internetAccountPreAuthorization) {
          if (!pluginManager) {
            throw new Error('need plugin manager to open locations with an internet account');
          }

          var rootModel = pluginManager.rootModel;

          if (rootModel && !(0, _types.isAppRootModel)(rootModel)) {
            throw new Error('This context does not support internet accounts');
          }

          var internetAccount;

          if (rootModel) {
            internetAccount = rootModel.findAppropriateInternetAccount(location);
          } else {
            var internetAccountType = pluginManager.getInternetAccountType(location.internetAccountPreAuthorization.internetAccountType);
            internetAccount = internetAccountType.stateModel.create({
              type: location.internetAccountPreAuthorization.internetAccountType,
              configuration: location.internetAccountPreAuthorization.authInfo.configuration
            });

            if (!location.internetAccountPreAuthorization.authInfo.token) {
              throw new Error('Failed to obtain token from internet account. Try reloading the page');
            }
          }

          if (!internetAccount) {
            throw new Error('Could not find associated internet account');
          }

          return internetAccount.openLocation(location);
        } else if (location.internetAccountId) {
          if (!pluginManager) {
            throw new Error('need plugin manager to open locations with an internet account');
          }

          var _rootModel = pluginManager.rootModel;

          if (_rootModel && !(0, _types.isAppRootModel)(_rootModel)) {
            throw new Error('This context does not support internet accounts');
          }

          if (_rootModel) {
            var modifiedLocation = JSON.parse(JSON.stringify(location));

            var _internetAccount = _rootModel.findAppropriateInternetAccount(location);

            if (!_internetAccount) {
              throw new Error('Could not find associated internet account');
            }

            _internetAccount.getPreAuthorizationInformation(location).then( // eslint-disable-next-line @typescript-eslint/no-explicit-any
            function (preAuthInfo) {
              return modifiedLocation.internetAccountPreAuthorization = preAuthInfo;
            });

            return _internetAccount.openLocation(modifiedLocation);
          }

          throw new Error('Could not pre-authorize location');
        }

        var url = location.baseUri ? new URL(location.uri, location.baseUri).href : location.uri;
        return new _RemoteFileWithRangeCache.RemoteFileWithRangeCache(url, {
          fetch: checkAuthNeededFetch
        });
      }

      throw new Error('invalid fileLocation');
    }
    }(io));

    var BaseViewModel$1 = {};

    Object.defineProperty(BaseViewModel$1, "__esModule", {
      value: true
    });
    var default_1 = BaseViewModel$1.default = void 0;

    var _mobxStateTree = require$$0$1;

    var _mst = mst;

    var BaseViewModel = _mobxStateTree.types.model('BaseView', {
      id: _mst.ElementId,
      displayName: _mobxStateTree.types.maybe(_mobxStateTree.types.string)
    }).volatile(function
      /* self */
    () {
      return {
        width: 800
      };
    }).views(function
      /* self */
    () {
      return {
        menuItems: function menuItems() {
          return [];
        }
      };
    }).actions(function (self) {
      return {
        setDisplayName: function setDisplayName(name) {
          self.displayName = name;
        },
        setWidth: function setWidth(newWidth) {
          self.width = newWidth;
        }
      };
    });

    var _default = BaseViewModel; // eslint-disable-next-line @typescript-eslint/no-empty-interface,@typescript-eslint/interface-name-prefix

    default_1 = BaseViewModel$1.default = _default;

    var Stockholm = {exports: {}};

    (function (module) {
    const Stockholm = function() {
      let obj = { gf: {},  // gf[tag] = ARRAY
                  gc: {},  // gc[tag] = STRING
                  gs: {},  // gs[tag][seqname] = ARRAY
                  gr: {},  // gr[tag][seqname] = STRING
                  seqname: [],  // optional, specify ordering of rows
                  seqdata: {}  // seqdata[seqname] = STRING
                };
      Object.keys(obj).forEach ((prop) => this[prop] = obj[prop]);
      return this
    };

    const formatStartRegex = /^# STOCKHOLM 1.0/;
    const formatEndRegex = /^\/\/\s*$/;
    const gfRegex = /^#=GF\s+(\S+)\s+(.*?)\s*$/;
    const gcRegex = /^#=GC\s+(\S+)\s+(.*?)\s*$/;
    const gsRegex = /^#=GS\s+(\S+)\s+(\S+)\s+(.*?)\s*$/;
    const grRegex = /^#=GR\s+(\S+)\s+(\S+)\s+(.*?)\s*$/;
    const lineRegex = /^\s*(\S+)\s+(\S+)\s*$/;
    const nonwhiteRegex = /\S/;

    const noFormatStart = "No format header: # STOCKHOLM 1.0";
    const noFormatEnd = "No format footer: //";
    const badLine = "Malformed line";
    const atLine = (n) => "(At line " + (n+1) + ") ";

    const sniff = (text) => formatStartRegex.test (text);

    const validate = (text) => {
      try {
        parseAll (text, { strict: true });
      } catch (e) {
        return false
      }
      return true
    };

    const error = (err) => { throw new Error (err); };
    const warning = (err) => console.warn(err);

    const parseAll = (text, opts) => {
      opts = opts || {};
      const maybeWarning = opts.quiet ? (() => null) : warning;
      const maybeError = opts.strict ? error : maybeWarning;
      let db = [], stock = null;
      const lines = text.split("\n");
      lines.forEach ((line, n) => {
        const makeStock = () => {
          if (!stock) {
            maybeError (atLine(n) + noFormatStart);
            stock = new Stockholm();
          }
        };
        let match;
        if (formatStartRegex.test(line)) {
          if (stock) maybeError (atLine(n) + noFormatEnd);
          stock = new Stockholm();
        } else if (formatEndRegex.test(line)) {
          if (stock)
            db.push (stock);
          else
            maybeError (atLine(n) + noFormatStart);
          stock = null;
        } else if (match = gfRegex.exec(line)) {
          makeStock();
          stock.gf[match[1]] = stock.gf[match[1]] || [];
          stock.gf[match[1]].push (match[2]);
        } else if (match = gcRegex.exec(line)) {
          makeStock();
          stock.gc[match[1]] = stock.gc[match[1]] || '';
          stock.gc[match[1]] += match[2];
        } else if (match = gsRegex.exec(line)) {
          makeStock();
          stock.gs[match[2]] = stock.gs[match[2]] || {};
          stock.gs[match[2]][match[1]] = stock.gs[match[2]][match[1]] || [];
          stock.gs[match[2]][match[1]].push (match[3]);
        } else if (match = grRegex.exec(line)) {
          makeStock();
          stock.gr[match[2]] = stock.gr[match[2]] || {};
          stock.gr[match[2]][match[1]] = stock.gr[match[2]][match[1]] || '';
          stock.gr[match[2]][match[1]] += match[3];
        } else if (match = lineRegex.exec(line)) {
          makeStock();
          if (!stock.seqdata[match[1]]) {
            stock.seqdata[match[1]] = '';
            stock.seqname.push (match[1]);
          }
          stock.seqdata[match[1]] += match[2];
        } else if (nonwhiteRegex.test (line)) {
          error (atLine(n) + badLine);
        }
      });
      if (stock) {
        maybeError ("Warning: no end line //");
        db.push (stock);
      }
      return db;
    };

    const parse = (text, opts) => {
      const db = parseAll (text, opts);
      if (db.length === 0)
        error ("No alignments found");
      if (db.length > 1)
        error ("More than one alignment found");
      return db[0];
    };

    const fromSeqIndex = (seqdata, names) => {
      let stock = new Stockholm();
      names = names || Object.keys(seqdata);  // specifying order is optional
      names.forEach ((name) => stock.addRow (name, seqdata[name]));
      return stock
    };

    const fromRowList = (array) => {
      let stock = new Stockholm();
      array.forEach ((row) => stock.addRow (row[0], row[1]));
      return stock
    };

    Stockholm.prototype.rows = function() {
      return this.seqname.length
    };

    Stockholm.prototype.columns = function() {
      let cols = 0;
      this.seqname.forEach ((name) => { cols = Math.max (cols, this.seqdata[name].length); });
      Object.keys(this.gr).forEach ((tag) => Object.keys(this.gr[tag]).forEach ((name) => {
        cols = Math.max (cols, this.gr[tag][name].length);
      }));
      return cols
    };

    Stockholm.prototype.allNames = function() {
      let isName = {},
          names = [],
          addName = (name) => { if (!isName[name]) { isName[name] = true; names.push (name); } },
          addNames = (list) => list.forEach (addName);
      addNames (this.seqname);
      addNames (Object.keys (this.seqdata));  // just in case seqdata has been independently modified
      Object.keys(this.gr).forEach ((tag) => addNames (Object.keys(this.gr[tag])));
      Object.keys(this.gs).forEach ((tag) => addNames (Object.keys(this.gs[tag])));
      return names
    };

    Stockholm.prototype.allTags = function() {
      let isTag = {};
      const addTags = (obj) => Object.keys(obj).forEach ((tag) => isTag[tag] = true);
      addTags (this.gc);
      addTags (this.gf);
      addTags (this.gr);
      addTags (this.gs);
      return Object.keys(isTag).sort()
    };

    Stockholm.prototype.addRow = function (name, data) {
      if (this.seqdata[name])
        error ("Duplicate row name");
      this.seqname.push (name);
      this.seqdata[name] = data || '';
      return this
    };

    Stockholm.prototype.deleteRow = function (name) {
      if (!this.seqdata[name])
        error ("Row not found");
      this.seqname = this.seqname.filter ((n) => n !== name);
      delete this.seqdata[name];
      return this
    };

    function leftPad (text, width) {
      while (text.length < width)
        text = ' ' + text;
      return text
    }

    function rightPad (text, width) {
      while (text.length < width)
        text = text + ' ';
      return text
    }

    function space (width) {
      return leftPad ("", width)
    }

    Stockholm.prototype.toString = function (opts) {
      opts = opts || { width: 80, indentNames: false };
      const names = this.allNames(), cols = this.columns();
      const nameWidth = Math.max.apply (null, names.map ((name) => name.length).concat([0]));
      const tagWidth = Math.max.apply (null, this.allTags().map ((tag) => tag.length).concat([0]));
      const seqIndent = tagWidth ? (tagWidth + 6) : 0;
      const width = opts.width ? Math.max (1, opts.width - nameWidth - seqIndent - 1) : cols;
      const pad = opts.indentNames ? leftPad : rightPad;
      const padTagName = (opts.indentNames
                          ? ((tag, name) => leftPad(tag,tagWidth) + " " + leftPad(name,nameWidth))
                          : ((tag, name) => rightPad(tag+" "+name,tagWidth+nameWidth+1)));
      let offsets = [0];
      for (let offset = width; offset < cols; offset += width)
        offsets.push (offset);
      return "# STOCKHOLM 1.0\n"
        + Object.keys(this.gf).sort().map (tag => this.gf[tag].map((line) => "#=GF " + pad(tag,tagWidth) + " " + line + "\n").join('')).join('')
        + Object.keys(this.gs).sort().map (tag => Object.keys(this.gs[tag]).map((name) => this.gs[tag][name].map ((line) => "#=GS " + padTagName(tag,name) + " " + line + "\n").join('')).join('')).join('')
        + offsets.map ((offset) =>
                       Object.keys(this.gc).sort().map (tag => "#=GC " + pad(tag,tagWidth) + space(nameWidth+2) + this.gc[tag].substr(offset,width) + "\n").join('')
                       + names.map ((name) => Object.keys(this.gr).filter ((tag) => this.gr[tag][name]).sort().map ((tag) => "#=GR " + padTagName(tag,name) + " " + this.gr[tag][name].substr(offset,width) + "\n").join('')
                                    + (this.seqdata[name]
                                       ? (pad(name,nameWidth+seqIndent)
                                          + " " + this.seqdata[name].substr(offset,width) + "\n")
                                       : '')).join('')).join("\n")
        + "//\n"
    };

    Stockholm.prototype.toFasta = function (opts) {
      opts = opts || { width: 80 };
      const cols = this.columns();
      const width = opts.width || cols;
      let offsets = [0];
      for (let offset = width; offset < cols; offset += width)
        offsets.push (offset);
      return this.allNames()
        .map ((name) =>
              (this.seqdata[name]
               ? (">" + name + "\n"
                  + offsets.map ((offset) => this.seqdata[name].substr (offset, width) + "\n").join(''))
               : ''))
        .join('')
    };

    Stockholm.prototype.toRowList = function (opts) {
      return this.allNames()
        .filter ((name) => this.seqdata[name])
        .map ((name) => [name, this.seqdata[name]])
    };

    module.exports = { sniff, validate, parse, parseAll, fromSeqIndex, fromRowList, Stockholm };
    }(Stockholm));

    var stockholmJs = Stockholm.exports;

    var dist = {};

    var util = {};

    Object.defineProperty(util, "__esModule", { value: true });
    util.parseBlocks = util.parseBlock = util.getSeqBounds = util.getFirstNonEmptyLine = util.parseHeader = util.parseVersion = void 0;
    function parseVersion(line) {
        const res = line.match(/\(?(\d+(\.\d+)+)\)?/);
        return res && res.length > 1 ? res[1] : "";
    }
    util.parseVersion = parseVersion;
    function parseHeader(info) {
        const knownHeaders = ["CLUSTAL", "PROBCONS", "MUSCLE", "MSAPROBS", "Kalign"];
        if (!knownHeaders.find((l) => info.startsWith(l))) {
            console.warn(`${info} is not a known CLUSTAL header: ${knownHeaders.join(",")}, proceeding but could indicate an issue`);
        }
        const version = parseVersion(info);
        return { info, version };
    }
    util.parseHeader = parseHeader;
    function getFirstNonEmptyLine(arr) {
        // There should be two blank lines after the header line
        let line = arr.next();
        while (!line.done && line.value.trim() === "") {
            line = arr.next();
        }
        return line.value;
    }
    util.getFirstNonEmptyLine = getFirstNonEmptyLine;
    function getSeqBounds(line) {
        const fields = line.split(/\s+/);
        const temp = line.slice(fields[0].length);
        const s = fields[0].length + temp.indexOf(fields[1]);
        const e = s + fields[1].length;
        return [s, e];
    }
    util.getSeqBounds = getSeqBounds;
    // Use the first block to get the sequence identifiers
    function parseBlock(arr) {
        let line = getFirstNonEmptyLine(arr);
        const block = [];
        let consensusLine = "";
        if (!line)
            return undefined;
        while (line) {
            if (line[0] !== " ")
                block.push(line);
            else
                consensusLine = line;
            line = arr.next().value;
        }
        const [start, end] = getSeqBounds(block[0]);
        const fields = block.map((s) => s.split(/\s+/));
        const ids = fields.map((s) => s[0]);
        const seqs = block.map((s) => s.slice(start, end));
        let consensus = consensusLine.slice(start, end);
        // handle if the consensus trailing whitespace got trimmed
        const remainder = seqs[0].length - consensus.length;
        if (remainder) {
            consensus += " ".repeat(remainder);
        }
        return { ids, seqs, consensus };
    }
    util.parseBlock = parseBlock;
    function parseBlocks(arr) {
        let block;
        const res = parseBlock(arr);
        if (res !== undefined) {
            while ((block = parseBlock(arr))) {
                for (let i = 0; i < block.seqs.length; i++) {
                    res.seqs[i] += block.seqs[i];
                }
                res.consensus += block.consensus;
            }
        }
        return res;
    }
    util.parseBlocks = parseBlocks;

    Object.defineProperty(dist, "__esModule", { value: true });
    var parse_1 = dist.parse = dist.parseIter = void 0;
    const util_1 = util;
    function parseIter(arr) {
        const line = util_1.getFirstNonEmptyLine(arr);
        if (!line)
            throw new Error("Empty file received");
        const header = util_1.parseHeader(line);
        const res = util_1.parseBlocks(arr);
        if (res === undefined)
            throw new Error("No blocks parsed");
        const alns = res.seqs.map((n, index) => ({ id: res.ids[index], seq: n }));
        const { consensus } = res;
        if (consensus.length != alns[0].seq.length) {
            throw new Error(`Consensus length != sequence length. Con ${consensus.length} seq ${alns[0].seq.length}`);
        }
        return { consensus, alns, header };
    }
    dist.parseIter = parseIter;
    function parse$1(contents) {
        const iter = contents.split("\n")[Symbol.iterator]();
        return parseIter(iter);
    }
    parse_1 = dist.parse = parse$1;

    var ClustalMSA = /** @class */ (function () {
        function ClustalMSA(text) {
            this.MSA = parse_1(text);
        }
        ClustalMSA.prototype.getMSA = function () {
            return this.MSA;
        };
        ClustalMSA.prototype.getRow = function (name) {
            var _a;
            return (_a = this.MSA.alns.find(function (aln) { return aln.id === name; })) === null || _a === void 0 ? void 0 : _a.seq.split('');
        };
        ClustalMSA.prototype.getWidth = function () {
            return this.MSA.alns[0].seq.length;
        };
        ClustalMSA.prototype.getDetails = function () {
            return this.MSA.header;
        };
        ClustalMSA.prototype.getNames = function () {
            return this.MSA.alns.map(function (aln) { return aln.id; });
        };
        ClustalMSA.prototype.getStructures = function () {
            return {};
        };
        Object.defineProperty(ClustalMSA.prototype, "alignmentNames", {
            get: function () {
                return [];
            },
            enumerable: false,
            configurable: true
        });
        ClustalMSA.prototype.getTree = function () {
            return {
                id: 'root',
                noTree: true,
                branchset: this.getNames().map(function (name) { return ({ id: name, name: name }); }),
            };
        };
        Object.defineProperty(ClustalMSA.prototype, "seqConsensus", {
            get: function () {
                return this.MSA.consensus;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ClustalMSA.prototype, "secondaryStructureConsensus", {
            get: function () {
                return undefined;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ClustalMSA.prototype, "tracks", {
            get: function () {
                var _a;
                return ((_a = this.seqConsensus) === null || _a === void 0 ? void 0 : _a.trim())
                    ? [
                        {
                            id: 'seqConsensus',
                            name: 'Sequence consensus',
                            data: this.seqConsensus,
                            customColorScheme: {
                                '*': 'white',
                                ':': 'grey',
                                '.': 'darkgrey',
                                ' ': 'black',
                            },
                        },
                    ]
                    : [];
            },
            enumerable: false,
            configurable: true
        });
        return ClustalMSA;
    }());

    /**
     * Newick format parser in JavaScript.
     *
     * Copyright (c) Jason Davies 2010.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     *
     * Example tree (from http://en.wikipedia.org/wiki/Newick_format):
     *
     * +--0.1--A
     * F-----0.2-----B            +-------0.3----C
     * +------------------0.5-----E
     *                            +---------0.4------D
     *
     * Newick format:
     * (A:0.1,B:0.2,(C:0.3,D:0.4)E:0.5)F;
     *
     * Converted to JSON:
     * {
     *   name: "F",
     *   branchset: [
     *     {name: "A", length: 0.1},
     *     {name: "B", length: 0.2},
     *     {
     *       name: "E",
     *       length: 0.5,
     *       branchset: [
     *         {name: "C", length: 0.3},
     *         {name: "D", length: 0.4}
     *       ]
     *     }
     *   ]
     * }
     *
     * Converted to JSON, but with no names or lengths:
     * {
     *   branchset: [
     *     {}, {}, {
     *       branchset: [{}, {}]
     *     }
     *   ]
     * }
     */
    function parse(s) {
        var ancestors = [];
        var tree = {};
        var tokens = s.split(/\s*(;|\(|\)|,|:)\s*/);
        for (var i = 0; i < tokens.length; i++) {
            var token = tokens[i];
            var subtree = {};
            switch (token) {
                case '(': // new branchset
                    tree.branchset = [subtree];
                    ancestors.push(tree);
                    tree = subtree;
                    break;
                case ',': // another branch
                    ancestors[ancestors.length - 1].branchset.push(subtree);
                    tree = subtree;
                    break;
                case ')': // optional name next
                    tree = ancestors.pop();
                    break;
                case ':': // optional length next
                    break;
                default: {
                    var x = tokens[i - 1];
                    if (x === ')' || x === '(' || x === ',') {
                        tree.name = token;
                    }
                    else if (x === ':') {
                        tree.length = parseFloat(token);
                    }
                }
            }
        }
        return tree;
    }

    var __rest$1 = (undefined && undefined.__rest) || function (s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    };
    var StockholmMSA = /** @class */ (function () {
        function StockholmMSA(text, currentAlignment) {
            var res = stockholmJs.parseAll(text);
            this.data = res;
            this.MSA = res[currentAlignment];
        }
        StockholmMSA.prototype.getMSA = function () {
            return this.MSA;
        };
        StockholmMSA.prototype.getRow = function (name) {
            var _a, _b;
            return (_b = (_a = this.MSA) === null || _a === void 0 ? void 0 : _a.seqdata[name]) === null || _b === void 0 ? void 0 : _b.split('');
        };
        StockholmMSA.prototype.getWidth = function () {
            var _a;
            var name = Object.keys((_a = this.MSA) === null || _a === void 0 ? void 0 : _a.seqdata)[0];
            return this.getRow(name).length;
        };
        Object.defineProperty(StockholmMSA.prototype, "alignmentNames", {
            get: function () {
                return this.data.map(function (aln, index) { var _a; return ((_a = aln.gf.DE) === null || _a === void 0 ? void 0 : _a[0]) || "Alignment ".concat(index + 1); });
            },
            enumerable: false,
            configurable: true
        });
        StockholmMSA.prototype.getDetails = function () {
            var _a, _b;
            return {
                General: this.MSA.gf,
                Accessions: (_a = this.MSA.gs) === null || _a === void 0 ? void 0 : _a.AC,
                Dbxref: (_b = this.MSA.gs) === null || _b === void 0 ? void 0 : _b.DR,
            };
        };
        StockholmMSA.prototype.getRowDetails = function (rowName) {
            var _a, _b;
            return {
                name: rowName,
                accession: (_a = this.MSA.gs) === null || _a === void 0 ? void 0 : _a.AC[rowName],
                dbxref: (_b = this.MSA.gs) === null || _b === void 0 ? void 0 : _b.DR[rowName],
            };
        };
        StockholmMSA.prototype.getNames = function () {
            return Object.keys(this.MSA.seqdata);
        };
        StockholmMSA.prototype.getSeqCoords = function () { };
        StockholmMSA.prototype.getStructures = function () {
            var _a;
            var pdbRegex = /PDB; +(\S+) +(\S); ([0-9]+)-([0-9]+)/;
            var ent = this.MSA;
            return Object.entries(((_a = ent.gs) === null || _a === void 0 ? void 0 : _a.DR) || {})
                .map(function (_a) {
                var id = _a[0], dr = _a[1];
                return [id, pdbRegex.exec(dr)];
            })
                .filter(function (item) { return !!item[1]; })
                .map(function (_a) {
                var id = _a[0], match = _a[1];
                var pdb = match[1].toLowerCase();
                var chain = match[2];
                var startPos = +match[3];
                var endPos = +match[4];
                return { id: id, pdb: pdb, chain: chain, startPos: startPos, endPos: endPos };
            })
                .reduce(function (a, b) {
                var id = b.id, rest = __rest$1(b, ["id"]);
                if (!a[id]) {
                    a[id] = [];
                }
                a[id].push(rest);
                return a;
            }, {});
        };
        StockholmMSA.prototype.getTree = function () {
            var _a, _b, _c;
            var tree = (_c = (_b = (_a = this.MSA) === null || _a === void 0 ? void 0 : _a.gf) === null || _b === void 0 ? void 0 : _b.NH) === null || _c === void 0 ? void 0 : _c[0];
            return tree
                ? generateNodeIds(parse(tree))
                : {
                    id: 'root',
                    noTree: true,
                    branchset: this.getNames().map(function (name) { return ({
                        id: name,
                        name: name,
                    }); }),
                };
        };
        Object.defineProperty(StockholmMSA.prototype, "seqConsensus", {
            get: function () {
                var _a;
                return (_a = this.MSA.gc) === null || _a === void 0 ? void 0 : _a.seq_cons;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(StockholmMSA.prototype, "secondaryStructureConsensus", {
            get: function () {
                var _a;
                return (_a = this.MSA.gc) === null || _a === void 0 ? void 0 : _a.SS_cons;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(StockholmMSA.prototype, "tracks", {
            get: function () {
                return [
                    {
                        id: 'seqConsensus',
                        name: 'Sequence consensus',
                        data: this.seqConsensus,
                        customColorScheme: {},
                    },
                    {
                        id: 'secondaryStruct',
                        name: 'Secondary-structure',
                        data: this.secondaryStructureConsensus,
                        customColorScheme: {
                            '>': 'pink',
                            '<': 'lightblue',
                        },
                    },
                ];
            },
            enumerable: false,
            configurable: true
        });
        return StockholmMSA;
    }());

    var FastaMSA = /** @class */ (function () {
        function FastaMSA(text) {
            var seq = {};
            var name = '';
            var re = /^>(\S+)/;
            text.split('\n').forEach(function (line) {
                var match = re.exec(line);
                if (match) {
                    seq[(name = match[1])] = '';
                }
                else if (name) {
                    seq[name] = seq[name] + line.replace(/[ \t]/g, '');
                }
            });
            this.MSA = { seqdata: seq };
        }
        FastaMSA.prototype.getMSA = function () {
            return this.MSA;
        };
        FastaMSA.prototype.getNames = function () {
            return Object.keys(this.MSA.seqdata);
        };
        FastaMSA.prototype.getRow = function (name) {
            var _a, _b;
            return (_b = (_a = this.MSA) === null || _a === void 0 ? void 0 : _a.seqdata[name]) === null || _b === void 0 ? void 0 : _b.split('');
        };
        FastaMSA.prototype.getWidth = function () {
            var _a;
            var name = Object.keys((_a = this.MSA) === null || _a === void 0 ? void 0 : _a.seqdata)[0];
            return this.getRow(name).length;
        };
        FastaMSA.prototype.getStructures = function () {
            return {};
        };
        Object.defineProperty(FastaMSA.prototype, "alignmentNames", {
            get: function () {
                return [];
            },
            enumerable: false,
            configurable: true
        });
        FastaMSA.prototype.getDetails = function () {
            return {};
        };
        FastaMSA.prototype.getTree = function () {
            return {
                id: 'root',
                noTree: true,
                branchset: this.getNames().map(function (name) { return ({
                    id: name,
                    name: name,
                }); }),
            };
        };
        Object.defineProperty(FastaMSA.prototype, "seqConsensus", {
            get: function () {
                return undefined;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FastaMSA.prototype, "secondaryStructureConsensus", {
            get: function () {
                return undefined;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FastaMSA.prototype, "tracks", {
            get: function () {
                return [];
            },
            enumerable: false,
            configurable: true
        });
        return FastaMSA;
    }());

    var AnnotationBlock$1 = observer(function (_a) {
        var track = _a.track, model = _a.model, offsetX = _a.offsetX;
        var blockSize = model.blockSize, scrollX = model.scrollX, bgColor = model.bgColor, modelColorScheme = model.colorScheme, colWidth = model.colWidth, rowHeight = model.rowHeight, highResScaleFactor = model.highResScaleFactor;
        var _b = track.model, customColorScheme = _b.customColorScheme, data = _b.data;
        var colorScheme = customColorScheme || modelColorScheme;
        var theme = useTheme();
        var ref = React$i.useRef(null);
        var contrastScheme = React$i.useMemo(function () { return colorContrast(colorScheme, theme); }, [colorScheme, theme]);
        React$i.useEffect(function () {
            if (!ref.current) {
                return;
            }
            var ctx = ref.current.getContext('2d');
            if (!ctx) {
                return;
            }
            // this logic is very similar to MSACanvas
            ctx.resetTransform();
            ctx.scale(highResScaleFactor, highResScaleFactor);
            ctx.clearRect(0, 0, blockSize, rowHeight);
            ctx.translate(-offsetX, 0);
            ctx.textAlign = 'center';
            ctx.font = ctx.font.replace(/\d+px/, "".concat(Math.max(8, rowHeight - 8), "px"));
            var xStart = Math.max(0, Math.floor(offsetX / colWidth));
            var xEnd = Math.max(0, Math.ceil((offsetX + blockSize) / colWidth));
            var str = data === null || data === void 0 ? void 0 : data.slice(xStart, xEnd);
            for (var i = 0; str && i < str.length; i++) {
                var letter = str[i];
                var color = colorScheme[letter.toUpperCase()];
                if (bgColor) {
                    var x = i * colWidth + offsetX - (offsetX % colWidth);
                    ctx.fillStyle = color || 'white';
                    ctx.fillRect(x, 0, colWidth, rowHeight);
                    if (rowHeight >= 10 && colWidth >= rowHeight / 2) {
                        ctx.fillStyle = contrastScheme[letter.toUpperCase()] || 'black';
                        ctx.fillText(letter, x + colWidth / 2, rowHeight / 2 + 1); //+1 to avoid cutoff at height:10
                    }
                }
            }
        }, [
            bgColor,
            blockSize,
            colWidth,
            rowHeight,
            offsetX,
            contrastScheme,
            colorScheme,
            highResScaleFactor,
            data,
        ]);
        return (React__default["default"].createElement("canvas", { ref: ref, height: rowHeight * highResScaleFactor, width: blockSize * highResScaleFactor, style: {
                position: 'absolute',
                left: scrollX + offsetX,
                width: blockSize,
                height: rowHeight,
            } }));
    });
    var AnnotationTrack$1 = observer(function (_a) {
        var track = _a.track, model = _a.model;
        var blocksX = model.blocksX, msaAreaWidth = model.msaAreaWidth, rowHeight = model.rowHeight;
        return (React__default["default"].createElement("div", { style: {
                position: 'relative',
                height: rowHeight,
                width: msaAreaWidth,
                overflow: 'hidden',
            } }, blocksX.map(function (bx) { return (React__default["default"].createElement(AnnotationBlock$1, { key: bx, track: track, model: model, offsetX: bx })); })));
    });

    var Layout = /** @class */ (function () {
        function Layout(_a) {
            var _b = _a === void 0 ? {} : _a, _c = _b.maxHeight, maxHeight = _c === void 0 ? 10000 : _c;
            this.maxHeightReached = false;
            this.rbush = new RBush();
            this.rectangles = new Map();
            this.maxHeight = Math.ceil(maxHeight);
            this.pTotalHeight = 0; // total height, in units of bitmap squares (px/pitchY)
        }
        /**
         * @returns top position for the rect, or Null if laying
         *  out the rect would exceed maxHeighe
         */
        Layout.prototype.addRect = function (id, left, right, height, data) {
            // add to rbush
            var existingRecord = this.rectangles.get(id);
            if (existingRecord) {
                return existingRecord.minY;
            }
            var currHeight = 0;
            while (this.rbush.collides({
                minX: left,
                minY: currHeight,
                maxX: right,
                maxY: currHeight + height,
            }) &&
                currHeight <= this.maxHeight) {
                currHeight += 1;
            }
            var record = {
                minX: left,
                minY: currHeight,
                maxX: right,
                maxY: currHeight + height,
                id: id,
                data: data,
            };
            this.rbush.insert(record);
            this.rectangles.set(id, record);
            this.pTotalHeight = Math.max(this.pTotalHeight, currHeight);
            return currHeight;
        };
        Object.defineProperty(Layout.prototype, "totalHeight", {
            get: function () {
                return this.pTotalHeight;
            },
            enumerable: false,
            configurable: true
        });
        return Layout;
    }());

    var AnnotationBlock = observer(function (_a) {
        var track = _a.track, model = _a.model, offsetX = _a.offsetX;
        var blockSize = model.blockSize, colWidth = model.colWidth, blanks = model.blanks, rowHeight = model.rowHeight, highResScaleFactor = model.highResScaleFactor, scrollX = model.scrollX;
        var _b = track.model, height = _b.height, features = _b.features, associatedRowName = _b.associatedRowName;
        var feats = isStateTreeNode(features)
            ? getSnapshot(features)
            : features;
        var layout = React$i.useMemo(function () {
            var temp = new Layout();
            feats === null || feats === void 0 ? void 0 : feats.forEach(function (feature, index) {
                var start = feature.start, end = feature.end;
                if (associatedRowName) {
                    var s = model.rowSpecificBpToPx(associatedRowName, start - 1);
                    var e = model.rowSpecificBpToPx(associatedRowName, end);
                    temp.addRect("".concat(index), s, e, rowHeight, feature);
                }
                else {
                    var s = model.globalBpToPx(start - 1);
                    var e = model.globalBpToPx(end);
                    temp.addRect("".concat(index), s, e, rowHeight, feature);
                }
            });
            return temp;
        }, [rowHeight, feats, associatedRowName, model, blanks]);
        var ref = React$i.useRef(null);
        var labelRef = React$i.useRef(null);
        var mouseoverRef = React$i.useRef(null);
        React$i.useEffect(function () {
            if (!ref.current) {
                return;
            }
            var ctx = ref.current.getContext('2d');
            if (!ctx) {
                return;
            }
            ctx.resetTransform();
            ctx.scale(highResScaleFactor, highResScaleFactor);
            ctx.clearRect(0, 0, blockSize, height);
            ctx.translate(-offsetX, 0);
            ctx.textAlign = 'center';
            ctx.font = ctx.font.replace(/\d+px/, "".concat(Math.max(8, rowHeight - 8), "px"));
            var xStart = Math.max(0, Math.floor(offsetX / colWidth));
            ctx.fillStyle = 'goldenrod';
            layout.rectangles.forEach(function (value) {
                var minX = value.minX, maxX = value.maxX, minY = value.minY, maxY = value.maxY;
                var x1 = (minX - xStart) * colWidth + offsetX - (offsetX % colWidth);
                var x2 = (maxX - xStart) * colWidth + offsetX - (offsetX % colWidth);
                if (x2 - x1 > 0) {
                    ctx.fillRect(x1, minY, x2 - x1, (maxY - minY) / 2);
                }
            });
        }, [
            associatedRowName,
            blockSize,
            colWidth,
            layout.rectangles,
            model,
            rowHeight,
            height,
            offsetX,
            highResScaleFactor,
            features,
            blanks,
        ]);
        React$i.useEffect(function () {
            if (!labelRef.current) {
                return;
            }
            var ctx = labelRef.current.getContext('2d');
            if (!ctx) {
                return;
            }
            // this logic is very similar to MSACanvas
            ctx.resetTransform();
            ctx.scale(highResScaleFactor, highResScaleFactor);
            ctx.clearRect(0, 0, blockSize, height);
            ctx.translate(-offsetX, 0);
            ctx.textAlign = 'center';
            ctx.font = ctx.font.replace(/\d+px/, "".concat(Math.max(8, rowHeight - 8), "px"));
            ctx.fillStyle = 'black';
            ctx.textAlign = 'left';
            layout.rectangles.forEach(function (value) {
                var _a, _b, _c, _d;
                var minX = value.minX, maxX = value.maxX, maxY = value.maxY, minY = value.minY;
                var feature = value.data;
                var x1 = minX * colWidth;
                var x2 = maxX * colWidth;
                if (x2 - x1 > 0) {
                    var note = (_b = (_a = feature.attributes) === null || _a === void 0 ? void 0 : _a.Note) === null || _b === void 0 ? void 0 : _b[0];
                    var name_1 = (_d = (_c = feature.attributes) === null || _c === void 0 ? void 0 : _c.Name) === null || _d === void 0 ? void 0 : _d[0];
                    var type = feature.type;
                    ctx.fillText([type, name_1, note].filter(function (f) { return !!f; }).join(' - '), Math.max(Math.min(-scrollX, x2), x1), minY + (maxY - minY));
                }
            });
        }, [
            blockSize,
            colWidth,
            scrollX,
            highResScaleFactor,
            height,
            layout.rectangles,
            offsetX,
            features,
            model,
            rowHeight,
            blanks,
        ]);
        return !features ? null : (React__default["default"].createElement(React__default["default"].Fragment, null,
            React__default["default"].createElement("canvas", { ref: ref, height: height * highResScaleFactor, width: blockSize * highResScaleFactor, style: {
                    position: 'absolute',
                    left: scrollX + offsetX,
                    width: blockSize,
                    height: height,
                } }),
            React__default["default"].createElement("canvas", { ref: labelRef, height: height * highResScaleFactor, width: blockSize * highResScaleFactor, style: {
                    position: 'absolute',
                    left: scrollX + offsetX,
                    width: blockSize,
                    height: height,
                } }),
            React__default["default"].createElement("canvas", { ref: mouseoverRef, height: height * highResScaleFactor, width: blockSize * highResScaleFactor, style: {
                    position: 'absolute',
                    left: scrollX + offsetX,
                    width: blockSize,
                    height: height,
                } })));
    });
    var AnnotationTrack = observer(function (_a) {
        var model = _a.model, track = _a.track;
        var blocksX = model.blocksX, msaAreaWidth = model.msaAreaWidth;
        var height = track.model.height;
        return (React__default["default"].createElement("div", { style: {
                position: 'relative',
                height: height,
                width: msaAreaWidth,
                overflow: 'hidden',
            } }, blocksX.map(function (bx) { return (React__default["default"].createElement(AnnotationBlock, { track: track, key: bx, model: model, offsetX: bx })); })));
    });

    var __assign = (undefined && undefined.__assign) || function () {
        __assign = Object.assign || function(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    var __rest = (undefined && undefined.__rest) || function (s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    };
    var __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {
        if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
                if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                ar[i] = from[i];
            }
        }
        return to.concat(ar || Array.prototype.slice.call(from));
    };
    function skipBlanks(blanks, arg) {
        var s = '';
        var b = 0;
        for (var j = 0; j < arg.length; j++) {
            if (j === blanks[b]) {
                b++;
            }
            else {
                s += arg[j];
            }
        }
        return s;
    }
    function setBrLength(d, y0, k) {
        var _a;
        //@ts-ignore
        d.len = (y0 += Math.max(d.data.length || 0, 0)) * k;
        (_a = d.children) === null || _a === void 0 ? void 0 : _a.forEach(function (d) {
            setBrLength(d, y0, k);
        });
    }
    function maxLength(d) {
        return (d.data.length || 1) + (d.children ? max(d.children, maxLength) : 0);
    }
    // Collapse the node and all it's children, from
    // https://bl.ocks.org/d3noob/43a860bc0024792f8803bba8ca0d5ecd
    function collapse(d) {
        if (d.children) {
            //@ts-ignore
            d._children = d.children;
            //@ts-ignore
            d._children.forEach(collapse);
            //@ts-ignore
            d.children = null;
        }
    }
    function clamp(min, num, max) {
        return Math.min(Math.max(num, min), max);
    }
    var StructureModel = types$2.model({
        id: types$2.identifier,
        structure: types$2.model({
            pdb: types$2.string,
            startPos: types$2.number,
            endPos: types$2.number,
        }),
        range: types$2.maybe(types$2.string),
    });
    var UniprotTrack = types$2
        .model({
        id: types$2.string,
        accession: types$2.string,
        name: types$2.string,
        associatedRowName: types$2.string,
        height: types$2.optional(types$2.number, 100),
    })
        .volatile(function () { return ({
        error: undefined,
        data: undefined,
    }); })
        .actions(function (self) { return ({
        setError: function (error) {
            self.error = error;
        },
        setData: function (data) {
            self.data = data;
        },
    }); })
        .actions(function (self) { return ({
        afterCreate: function () {
            var _this = this;
            addDisposer(self, autorun(function () { return __awaiter(_this, void 0, void 0, function () {
                var accession, url, response, text, e_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 3, , 4]);
                            accession = self.accession;
                            url = "https://www.uniprot.org/uniprot/".concat(accession, ".gff");
                            return [4 /*yield*/, fetch(url)];
                        case 1:
                            response = _a.sent();
                            if (!response.ok) {
                                throw new Error("HTTP ".concat(response.status, " ").concat(response.statusText, " fetching ").concat(url));
                            }
                            return [4 /*yield*/, response.text()];
                        case 2:
                            text = _a.sent();
                            self.setData(text);
                            return [3 /*break*/, 4];
                        case 3:
                            e_1 = _a.sent();
                            self.setError(e_1);
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            }); }));
        },
    }); })
        .views(function (self) { return ({
        get loading() {
            return !self.data;
        },
        get features() {
            var _a;
            return (_a = self.data) === null || _a === void 0 ? void 0 : _a.split('\n').map(function (f) { return f.trim(); }).filter(function (f) { return !!f; }).filter(function (f) { return !f.startsWith('#'); }).map(function (f) {
                var _a = f.split('\t'), seq_id = _a[0], source = _a[1], type = _a[2], start = _a[3], end = _a[4], score = _a[5], strand = _a[6], phase = _a[7], col9 = _a[8];
                return __assign({ seq_id: seq_id, source: source, type: type, start: +start, end: +end, score: +score, strand: strand, phase: phase }, Object.fromEntries(col9
                    .split(';')
                    .map(function (f) { return f.trim(); })
                    .filter(function (f) { return !!f; })
                    .map(function (f) { return f.split('='); })
                    .map(function (_a) {
                    var key = _a[0], val = _a[1];
                    return [
                        key.trim(),
                        decodeURIComponent(val).trim().split(',').join(' '),
                    ];
                })));
            });
        },
    }); });
    var MSAModel = types$2
        .model('MsaView', {
        id: ElementId_1,
        type: types$2.literal('MsaView'),
        height: types$2.optional(types$2.number, 550),
        treeAreaWidth: types$2.optional(types$2.number, 400),
        treeWidth: types$2.optional(types$2.number, 300),
        rowHeight: 20,
        scrollY: 0,
        scrollX: 0,
        resizeHandleWidth: 5,
        blockSize: 1000,
        mouseRow: types$2.maybe(types$2.number),
        mouseCol: types$2.maybe(types$2.number),
        selectedStructures: types$2.array(StructureModel),
        labelsAlignRight: false,
        colWidth: 16,
        showBranchLen: true,
        bgColor: true,
        drawTree: true,
        drawNodeBubbles: true,
        highResScaleFactor: 2,
        colorSchemeName: 'maeditor',
        treeFilehandle: types$2.maybe(FileLocation_1),
        msaFilehandle: types$2.maybe(FileLocation_1),
        currentAlignment: 0,
        collapsed: types$2.array(types$2.string),
        showOnly: types$2.maybe(types$2.string),
        boxTracks: types$2.array(UniprotTrack),
        turnedOffTracks: types$2.map(types$2.boolean),
        annotatedRegions: types$2.array(types$2.model({
            start: types$2.number,
            end: types$2.number,
            attributes: types$2.frozen(),
        })),
        data: types$2.optional(types$2
            .model({
            tree: types$2.maybe(types$2.string),
            msa: types$2.maybe(types$2.string),
        })
            .actions(function (self) { return ({
            setTree: function (tree) {
                self.tree = tree;
            },
            setMSA: function (msa) {
                self.msa = msa;
            },
        }); }), { tree: '', msa: '' }),
    })
        .volatile(function () { return ({
        error: undefined,
        margin: { left: 20, top: 20 },
        //eslint-disable-next-line @typescript-eslint/no-explicit-any
        DialogComponent: undefined,
        //eslint-disable-next-line @typescript-eslint/no-explicit-any
        DialogProps: undefined,
        // annotations
        annotPos: undefined,
    }); })
        .actions(function (self) { return ({
        //eslint-disable-next-line @typescript-eslint/no-explicit-any
        setDialogComponent: function (dlg, props) {
            self.DialogComponent = dlg;
            self.DialogProps = props;
        },
        setHeight: function (height) {
            self.height = height;
        },
        addStructureToSelection: function (elt) {
            self.selectedStructures.push(elt);
        },
        removeStructureFromSelection: function (elt) {
            var r = self.selectedStructures.find(function (node) { return node.id === elt.id; });
            if (r) {
                self.selectedStructures.remove(r);
            }
        },
        toggleStructureSelection: function (elt) {
            var r = self.selectedStructures.find(function (node) { return node.id === elt.id; });
            if (r) {
                self.selectedStructures.remove(r);
            }
            else {
                self.selectedStructures.push(elt);
            }
        },
        clearSelectedStructures: function () {
            //@ts-ignore
            self.selectedStructures = [];
        },
        setError: function (error) {
            if (error) {
                console.error(error);
            }
            self.error = error;
        },
        setMousePos: function (col, row) {
            self.mouseCol = col;
            self.mouseRow = row;
        },
        setRowHeight: function (n) {
            self.rowHeight = n;
        },
        setColWidth: function (n) {
            self.colWidth = n;
        },
        setColorSchemeName: function (name) {
            self.colorSchemeName = name;
        },
        setScrollY: function (n) {
            self.scrollY = n;
        },
        setScrollX: function (n) {
            self.scrollX = n;
        },
        setTreeAreaWidth: function (n) {
            self.treeAreaWidth = n;
        },
        setTreeWidth: function (n) {
            self.treeWidth = n;
        },
        setCurrentAlignment: function (n) {
            self.currentAlignment = n;
        },
        toggleLabelsAlignRight: function () {
            self.labelsAlignRight = !self.labelsAlignRight;
        },
        toggleDrawTree: function () {
            self.drawTree = !self.drawTree;
        },
        toggleCollapsed: function (node) {
            if (self.collapsed.includes(node)) {
                self.collapsed.remove(node);
            }
            else {
                self.collapsed.push(node);
            }
        },
        setShowOnly: function (node) {
            self.showOnly = node;
        },
        toggleBranchLen: function () {
            self.showBranchLen = !self.showBranchLen;
        },
        toggleBgColor: function () {
            self.bgColor = !self.bgColor;
        },
        toggleNodeBubbles: function () {
            self.drawNodeBubbles = !self.drawNodeBubbles;
        },
        setData: function (data) {
            self.data = cast(data);
        },
        setMSAFilehandle: function (msaFilehandle) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    self.msaFilehandle = msaFilehandle;
                    return [2 /*return*/];
                });
            });
        },
        setTreeFilehandle: function (treeFilehandle) {
            return __awaiter(this, void 0, void 0, function () {
                var r;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!(treeFilehandle && 'blobId' in treeFilehandle)) return [3 /*break*/, 2];
                            return [4 /*yield*/, io.openLocation(treeFilehandle).readFile('utf8')];
                        case 1:
                            r = (_a.sent());
                            this.setTree(r);
                            return [3 /*break*/, 3];
                        case 2:
                            self.treeFilehandle = treeFilehandle;
                            _a.label = 3;
                        case 3: return [2 /*return*/];
                    }
                });
            });
        },
        setMSA: function (result) {
            self.data.setMSA(result);
        },
        setTree: function (result) {
            self.data.setTree(result);
        },
        afterCreate: function () {
            var _this = this;
            addDisposer(self, autorun(function () { return __awaiter(_this, void 0, void 0, function () {
                var treeFilehandle, _a, e_2;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            treeFilehandle = self.treeFilehandle;
                            if (!treeFilehandle) return [3 /*break*/, 4];
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 3, , 4]);
                            _a = this.setTree;
                            return [4 /*yield*/, io.openLocation(treeFilehandle).readFile('utf8')];
                        case 2:
                            _a.apply(this, [(_b.sent())]);
                            return [3 /*break*/, 4];
                        case 3:
                            e_2 = _b.sent();
                            this.setError(e_2);
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            }); }));
            addDisposer(self, autorun(function () { return __awaiter(_this, void 0, void 0, function () {
                var msaFilehandle, _a, e_3;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            msaFilehandle = self.msaFilehandle;
                            if (!msaFilehandle) return [3 /*break*/, 4];
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 3, , 4]);
                            _a = this.setMSA;
                            return [4 /*yield*/, io.openLocation(msaFilehandle).readFile('utf8')];
                        case 2:
                            _a.apply(this, [(_b.sent())]);
                            return [3 /*break*/, 4];
                        case 3:
                            e_3 = _b.sent();
                            this.setError(e_3);
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            }); }));
        },
    }); })
        .views(function (self) {
        var oldBlocksX = [];
        var oldBlocksY = [];
        var oldValX = 0;
        var oldValY = 0;
        return {
            get initialized() {
                return ((self.data.msa ||
                    self.data.tree ||
                    self.msaFilehandle ||
                    self.treeFilehandle) &&
                    !self.error);
            },
            get blocksX() {
                var scrollX = self.scrollX, size = self.blockSize, colWidth = self.colWidth;
                var ret = -(size * Math.floor(scrollX / size)) - size;
                var b = [];
                for (var i = ret; i < ret + size * 3; i += size) {
                    if (i + size > 0) {
                        b.push(i);
                    }
                }
                if (JSON.stringify(b) !== JSON.stringify(oldBlocksX) ||
                    colWidth !== oldValX) {
                    oldBlocksX = b;
                    oldValX = colWidth;
                }
                return oldBlocksX;
            },
            get blocksY() {
                var scrollY = self.scrollY, size = self.blockSize, rowHeight = self.rowHeight;
                var ret = -(size * Math.floor(scrollY / size)) - 2 * size;
                var b = [];
                for (var i = ret; i < ret + size * 3; i += size) {
                    if (i + size > 0) {
                        b.push(i);
                    }
                }
                if (JSON.stringify(b) !== JSON.stringify(oldBlocksY) ||
                    rowHeight !== oldValY) {
                    oldBlocksY = b;
                    oldValY = rowHeight;
                }
                return oldBlocksY;
            },
        };
    })
        .views(function (self) { return ({
        get blocks2d() {
            return self.blocksY.map(function (by) { return self.blocksX.map(function (bx) { return [bx, by]; }); }).flat();
        },
        get done() {
            return self.initialized && (self.data.msa || self.data.tree);
        },
        get colorScheme() {
            return colorSchemes$1[self.colorSchemeName];
        },
        get alignmentDetails() {
            var _a;
            return ((_a = this.MSA) === null || _a === void 0 ? void 0 : _a.getDetails()) || {};
        },
        getRowDetails: function (name) {
            var _a, _b;
            //@ts-ignore
            var details = (_b = (_a = this.MSA) === null || _a === void 0 ? void 0 : _a.getRowDetails) === null || _b === void 0 ? void 0 : _b.call(_a, name);
            var matches = name.match(/\S+\/(\d+)-(\d+)/);
            return __assign(__assign({}, details), (matches && { range: { start: +matches[1], end: +matches[2] } }));
        },
        get currentAlignmentName() {
            return this.alignmentNames[self.currentAlignment];
        },
        get alignmentNames() {
            var _a;
            return ((_a = this.MSA) === null || _a === void 0 ? void 0 : _a.alignmentNames) || [];
        },
        get noTree() {
            return !!this.tree.noTree;
        },
        get menuItems() {
            return [];
        },
        get MSA() {
            var text = self.data.msa;
            if (text) {
                if (stockholmJs.sniff(text)) {
                    return new StockholmMSA(text, self.currentAlignment);
                }
                else if (text.startsWith('>')) {
                    return new FastaMSA(text);
                }
                else {
                    return new ClustalMSA(text);
                }
            }
            return null;
        },
        get numColumns() {
            var _a;
            return ((((_a = this.MSA) === null || _a === void 0 ? void 0 : _a.getWidth()) || 0) - this.blanks.length) * self.colWidth;
        },
        get tree() {
            var _a;
            return self.data.tree
                ? generateNodeIds(parse(self.data.tree))
                : ((_a = this.MSA) === null || _a === void 0 ? void 0 : _a.getTree()) || { noTree: true };
        },
        get rowNames() {
            return this.hierarchy.leaves().map(function (node) { return node.data.name; });
        },
        get mouseOverRowName() {
            return self.mouseRow !== undefined
                ? this.rowNames[self.mouseRow]
                : undefined;
        },
        getMouseOverResidue: function (rowName) {
            return this.columns[rowName];
        },
        get root() {
            var hier = hierarchy(this.tree, function (d) { return d.branchset; })
                .sum(function (d) { return (d.branchset ? 0 : 1); })
                .sort(function (a, b) {
                return ascending(a.data.length || 1, b.data.length || 1);
            });
            if (self.showOnly) {
                var res = hier.find(function (node) { return node.data.id === self.showOnly; });
                if (res) {
                    hier = res;
                }
            }
            if (self.collapsed.length) {
                self.collapsed
                    .map(function (collapsedId) {
                    return hier.find(function (node) { return node.data.id === collapsedId; });
                })
                    .filter(function (f) { return !!f; })
                    .map(function (node) { return collapse(node); });
            }
            return hier;
        },
        get structures() {
            var _a;
            return ((_a = this.MSA) === null || _a === void 0 ? void 0 : _a.getStructures()) || {};
        },
        get inverseStructures() {
            var map = Object.entries(this.structures)
                .map(function (_a) {
                var key = _a[0], val = _a[1];
                return val.map(function (pdbEntry) { return [pdbEntry.pdb, { id: key }]; });
            })
                .flat();
            return Object.fromEntries(map);
        },
        get msaAreaWidth() {
            //@ts-ignore
            return self.width - self.treeAreaWidth;
        },
        get blanks() {
            var _this = this;
            var _a;
            var blanks = [];
            var strs = this.hierarchy
                .leaves()
                .map(function (_a) {
                var _b;
                var data = _a.data;
                return (_b = _this.MSA) === null || _b === void 0 ? void 0 : _b.getRow(data.name);
            })
                .filter(function (item) { return !!item; });
            for (var i = 0; i < ((_a = strs[0]) === null || _a === void 0 ? void 0 : _a.length); i++) {
                var counter = 0;
                for (var j = 0; j < strs.length; j++) {
                    if (strs[j][i] === '-') {
                        counter++;
                    }
                }
                if (counter === strs.length) {
                    blanks.push(i);
                }
            }
            return blanks;
        },
        get rows() {
            var _this = this;
            return this.hierarchy
                .leaves()
                .map(function (_a) {
                var _b;
                var data = _a.data;
                return [data.name, (_b = _this.MSA) === null || _b === void 0 ? void 0 : _b.getRow(data.name)];
            })
                .filter(function (f) { return !!f[1]; });
        },
        get columns() {
            var rows = this.rows;
            var cols = this.columns2d;
            return Object.fromEntries(rows.map(function (row, index) { return [row[0], cols[index]]; }));
        },
        get columns2d() {
            var strs = this.rows.map(function (r) { return r[1]; });
            var ret = [];
            for (var i = 0; i < strs.length; i++) {
                ret.push(skipBlanks(this.blanks, strs[i]));
            }
            return ret;
        },
        get colStats() {
            var r = [];
            var m = this.columns2d;
            for (var i = 0; i < m.length; i++) {
                for (var j = 0; j < m[i].length; j++) {
                    var l = r[j] || {};
                    if (!l[m[i][j]]) {
                        l[m[i][j]] = 0;
                    }
                    l[m[i][j]]++;
                    r[j] = l;
                }
            }
            return r;
        },
        // generates a new tree that is clustered with x,y positions
        get hierarchy() {
            var root = this.root;
            var clust = cluster()
                .size([this.totalHeight, self.treeWidth])
                .separation(function () { return 1; });
            clust(root);
            setBrLength(root, 
            //@ts-ignore
            (root.data.length = 0), self.treeWidth / maxLength(root));
            return root;
        },
        get totalHeight() {
            return this.root.leaves().length * self.rowHeight;
        },
    }); })
        .actions(function (self) { return ({
        addUniprotTrack: function (node) {
            if (self.boxTracks.find(function (t) { return t.name === node.name; })) {
                if (self.turnedOffTracks.has(node.name)) {
                    this.toggleTrack(node.name);
                }
            }
            else {
                self.boxTracks.push(__assign(__assign({}, node), { id: node.name, associatedRowName: node.name }));
            }
        },
        doScrollY: function (deltaY) {
            self.scrollY = clamp(-self.totalHeight + 10, self.scrollY + deltaY, 0);
        },
        doScrollX: function (deltaX) {
            self.scrollX = clamp(-self.numColumns + (self.msaAreaWidth - 100), self.scrollX + deltaX, 0);
        },
        setMouseoveredColumn: function (n, chain, file) {
            var _a;
            var j = 0;
            var i = 0;
            var id = (self.inverseStructures[file.slice(0, -4)] || {}).id;
            var row = (_a = self.MSA) === null || _a === void 0 ? void 0 : _a.getRow(id);
            if (row) {
                for (i = 0; i < row.length && j < n; i++) {
                    if (row[i] !== '-') {
                        j++;
                    }
                }
                self.mouseCol = j + 1;
            }
            else {
                self.mouseCol = undefined;
            }
        },
        toggleTrack: function (id) {
            if (self.turnedOffTracks.has(id)) {
                self.turnedOffTracks.delete(id);
            }
            else {
                self.turnedOffTracks.set(id, true);
            }
        },
    }); })
        .views(function (self) { return ({
        get secondaryStructureConsensus() {
            var _a;
            return (_a = self.MSA) === null || _a === void 0 ? void 0 : _a.secondaryStructureConsensus;
        },
        get seqConsensus() {
            var _a;
            return (_a = self.MSA) === null || _a === void 0 ? void 0 : _a.seqConsensus;
        },
        get conservation() {
            var m = self.columns2d;
            if (m.length) {
                for (var i = 0; i < m[0].length; i++) {
                    var col = [];
                    for (var j = 0; j < m.length; j++) {
                        col.push(m[j][i]);
                    }
                }
            }
            return ['a'];
        },
        get tracks() {
            var blanks = self.blanks;
            var adapterTracks = self.MSA
                ? self.MSA.tracks.map(function (track) {
                    var data = track.data;
                    return {
                        model: __assign(__assign({}, track), { data: data ? skipBlanks(blanks, data) : undefined, height: self.rowHeight }),
                        ReactComponent: AnnotationTrack$1,
                    };
                })
                : [];
            var boxTracks = self.boxTracks
                // filter out tracks that are associated with hidden rows
                .filter(function (track) { return !!self.rows.find(function (row) { return row[0] === track.name; }); })
                .map(function (track) { return ({
                model: track,
                ReactComponent: AnnotationTrack,
            }); });
            var annotationTracks = self.annotatedRegions.length > 0
                ? [
                    {
                        model: {
                            features: self.annotatedRegions,
                            height: 100,
                            id: 'annotations',
                            name: 'User-created annotations',
                            data: self.annotatedRegions
                                .map(function (region) {
                                var attrs = region.attributes
                                    ? Object.entries(region.attributes)
                                        .map(function (_a) {
                                        var k = _a[0], v = _a[1];
                                        return "".concat(k, "=").concat(v.join(','));
                                    })
                                        .join(';')
                                    : '.';
                                return [
                                    'MSA_refcoord',
                                    '.',
                                    '.',
                                    region.start,
                                    region.end,
                                    '.',
                                    '.',
                                    '.',
                                    attrs,
                                ].join('\t');
                            })
                                .join('\n'),
                        },
                        ReactComponent: AnnotationTrack,
                    },
                ]
                : [];
            return __spreadArray(__spreadArray(__spreadArray([], adapterTracks, true), boxTracks, true), annotationTracks, true);
        },
        get turnedOnTracks() {
            return this.tracks.filter(function (f) { return !self.turnedOffTracks.has(f.model.id); });
        },
        // returns coordinate in the current relative coordinate scheme
        pxToBp: function (coord) {
            return Math.floor((coord - self.scrollX) / self.colWidth);
        },
        rowSpecificBpToPx: function (rowName, position) {
            var _a;
            var rowNames = self.rowNames, rows = self.rows, blanks = self.blanks;
            var index = rowNames.indexOf(rowName);
            var row = rows[index][1];
            var details = self.getRowDetails(rowName);
            var offset = ((_a = details.range) === null || _a === void 0 ? void 0 : _a.start) || 0;
            var current = position - offset;
            if (current < 0) {
                return 0;
            }
            var j = 0;
            var i = 0;
            for (; i < row.length; i++) {
                if (row[i] !== '-' && j++ === current) {
                    break;
                }
            }
            var count = 0;
            for (var k = 0; k < row.length; k++) {
                if (blanks.indexOf(k) !== -1 && k < i + 1) {
                    count++;
                }
            }
            return i - count;
        },
        globalBpToPx: function (position) {
            var _a;
            var count = 0;
            for (var k = 0; k < ((_a = self.rows[0]) === null || _a === void 0 ? void 0 : _a[1].length); k++) {
                if (self.blanks.indexOf(k) !== -1 && k < position + 1) {
                    count++;
                }
            }
            return position - count;
        },
        relativePxToBp: function (rowName, position) {
            var rowNames = self.rowNames, rows = self.rows;
            var index = rowNames.indexOf(rowName);
            var row = rows[index][1];
            var k = 0;
            for (var i = 0; i < position; i++) {
                if (row[i] !== '-') {
                    k++;
                }
                else if (k >= position) {
                    break;
                }
            }
            return k;
        },
        getPos: function (pos) {
            var j = 0;
            for (var i = 0, k = 0; i < pos; i++, j++) {
                while (j === self.blanks[k]) {
                    k++;
                    j++;
                }
            }
            return j;
        },
    }); })
        .actions(function (self) { return ({
        addAnnotation: function (start, end, attributes) {
            self.annotatedRegions.push({
                start: self.getPos(start),
                end: self.getPos(end),
                attributes: attributes,
            });
        },
        setOffsets: function (left, right) {
            self.annotPos = { left: left, right: right };
        },
        clearAnnotPos: function () {
            self.annotPos = undefined;
        },
    }); });
    var model = types$2.snapshotProcessor(types$2.compose(default_1, MSAModel), {
        postProcessor: function (result) {
            var _a = result.data, tree = _a.tree, msa = _a.msa, rest = __rest(result
            // remove the MSA/tree data from the tree if the filehandle available in
            // which case it can be reloaded on refresh
            , ["data"]);
            // remove the MSA/tree data from the tree if the filehandle available in
            // which case it can be reloaded on refresh
            return __assign({ data: __assign(__assign({}, (!result.treeFilehandle && { tree: tree })), (!result.msaFilehandle && { msa: msa })) }, rest);
        },
    });

    exports.MSAModel = model;
    exports.MSAView = MSAView;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
